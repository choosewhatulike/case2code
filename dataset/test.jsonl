{"example_str": "examples = [\n    dict(num=123),\n    dict(num=456),\n    dict(num=789),\n    dict(num=0),\n    dict(num=10),\n    dict(num=100),\n    dict(num=1234),\n    dict(num=9876),\n    dict(num=12345),\n    dict(num=54321),\n]\nexamples += [\n    dict(num=1234),     # Last digit 4 becomes the first digit, result is 4001 + 123 = 4123\n    dict(num=9876),     # Last digit 6 becomes the first digit, result is 6000 + 987 = 6987\n    dict(num=560),      # Last digit 0 becomes the first digit, result is 0 + 56 = 56\n    dict(num=45),       # Last digit 5 becomes the first digit, result is 5000 + 4 = 5004\n    dict(num=1),        # Last digit 1 becomes the first digit, result is 1000 + 0 = 1000\n    dict(num=0),        # Last digit 0 becomes the first digit, result is 0 + 0 = 0\n    dict(num=10),       # Last digit 0 becomes the first digit, result is 0 + 1 = 1\n    dict(num=999),      # Last digit 9 becomes the first digit, result is 9000 + 99 = 9099\n    dict(num=1001),     # Last digit 1 becomes the first digit, result is 1000 + 100 = 1100\n    dict(num=2500)      # Last digit 0 becomes the first digit, result is 0 + 250 = 250\n]\nexamples += [\n    dict(num=1234),  # Rotates to 4123\n    dict(num=9876),  # Rotates to 6987\n    dict(num=5600),  # Rotates to 0565\n    dict(num=250),   # Rotates to 0250\n    dict(num=9),     # Rotates to 0009\n    dict(num=1001),  # Rotates to 1100\n    dict(num=2050),  # Rotates to 0205\n    dict(num=8765),  # Rotates to 5876\n    dict(num=4321),  # Rotates to 1432\n    dict(num=1111)   # Rotates to 1111\n]", "code": "def command_R(num):\n    return num % 10 * 1000 + num // 10\n", "func_name": "command_R", "exec_status": true, "example_inputs": ["\"{'num': 123}\"", "\"{'num': 456}\"", "\"{'num': 789}\"", "\"{'num': 0}\"", "\"{'num': 10}\"", "\"{'num': 100}\"", "\"{'num': 1234}\"", "\"{'num': 9876}\"", "\"{'num': 12345}\"", "\"{'num': 54321}\""], "example_outputs": [{"return": "\"3012\""}, {"return": "\"6045\""}, {"return": "\"9078\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"10\""}, {"return": "\"4123\""}, {"return": "\"6987\""}, {"return": "\"6234\""}, {"return": "\"6432\""}, {"return": "\"4123\""}, {"return": "\"6987\""}, {"return": "\"56\""}, {"return": "\"5004\""}, {"return": "\"1000\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"9099\""}, {"return": "\"1100\""}, {"return": "\"250\""}, {"return": "\"4123\""}, {"return": "\"6987\""}, {"return": "\"560\""}, {"return": "\"25\""}, {"return": "\"9000\""}, {"return": "\"1100\""}, {"return": "\"205\""}, {"return": "\"5876\""}, {"return": "\"1432\""}, {"return": "\"1111\""}], "parsed_inputs": [[["num", "123"]], [["num", "456"]], [["num", "789"]], [["num", "0"]], [["num", "10"]], [["num", "100"]], [["num", "1234"]], [["num", "9876"]], [["num", "12345"]], [["num", "54321"]]], "exec_code": "def command_R(num):\n    return num % 10 * 1000 + num // 10\n", "output": "The function is:\n\n```python\ndef command_R(num):\n    return num % 10 * 1000 + num // 10\n\n```", "choosed_example_idx": [6, 8, 9, 0, 2, 3, 5, 7], "prompt": "Function: command_R\n\nWrite a function that generates the output from the input.\nInput: dict(num=1234), Output: \"4123\"\nInput: dict(num=12345), Output: \"6234\"\nInput: dict(num=54321), Output: \"6432\"\nInput: dict(num=123), Output: \"3012\"\nInput: dict(num=789), Output: \"9078\"\nInput: dict(num=0), Output: \"0\"\nInput: dict(num=100), Output: \"10\"\nInput: dict(num=9876), Output: \"6987\"\n\n", "id": "b14e5d06e24218aedad32f15b64f6c07f46542f2_0"}
{"example_str": "examples = [\n    dict(s='1'),\n    dict(s='2'),\n    dict(s='12'),\n    dict(s='a'),\n    dict(s='ab'),\n    dict(s=''),\n    dict(s='0'),\n    dict(s='09'),\n    dict(s='10'),\n    dict(s='123'),\n]\nexamples += [\n    dict(s=\"1\"),\n    dict(s=\"9\"),\n    dict(s=\"0\"),\n    dict(s=\"12\"),\n    dict(s=\"23\"),\n    dict(s=\"5\"),\n    dict(s=\"\"),\n    dict(s=\"3\"),\n    dict(s=\"11\"),\n    dict(s=\"7\")\n]\nexamples += [\n    dict(s='1'),\n    dict(s='9'),\n    dict(s='0'),\n    dict(s='23'),\n    dict(s='5'),\n    dict(s='11'),\n    dict(s=''),\n    dict(s='3'),\n    dict(s='12'),\n    dict(s='7')\n]", "code": "def timeFormat(s):\n    if len(s) == 1:\n        s = '0' + s\n    return s\n", "func_name": "timeFormat", "exec_status": true, "example_inputs": ["\"{'s': '1'}\"", "\"{'s': '2'}\"", "\"{'s': '12'}\"", "\"{'s': 'a'}\"", "\"{'s': 'ab'}\"", "\"{'s': ''}\"", "\"{'s': '0'}\"", "\"{'s': '09'}\"", "\"{'s': '10'}\"", "\"{'s': '123'}\""], "example_outputs": [{"return": "\"'01'\""}, {"return": "\"'02'\""}, {"return": "\"'12'\""}, {"return": "\"'0a'\""}, {"return": "\"'ab'\""}, {"return": "\"''\""}, {"return": "\"'00'\""}, {"return": "\"'09'\""}, {"return": "\"'10'\""}, {"return": "\"'123'\""}, {"return": "\"'01'\""}, {"return": "\"'09'\""}, {"return": "\"'00'\""}, {"return": "\"'12'\""}, {"return": "\"'23'\""}, {"return": "\"'05'\""}, {"return": "\"''\""}, {"return": "\"'03'\""}, {"return": "\"'11'\""}, {"return": "\"'07'\""}, {"return": "\"'01'\""}, {"return": "\"'09'\""}, {"return": "\"'00'\""}, {"return": "\"'23'\""}, {"return": "\"'05'\""}, {"return": "\"'11'\""}, {"return": "\"''\""}, {"return": "\"'03'\""}, {"return": "\"'12'\""}, {"return": "\"'07'\""}], "parsed_inputs": [[["s", "\"1\""]], [["s", "\"2\""]], [["s", "\"12\""]], [["s", "\"a\""]], [["s", "\"ab\""]], [["s", "\"\""]], [["s", "\"0\""]], [["s", "\"09\""]], [["s", "\"10\""]], [["s", "\"123\""]]], "exec_code": "def timeFormat(s):\n    if len(s) == 1:\n        s = '0' + s\n    return s\n", "output": "The function is:\n\n```python\ndef timeFormat(s):\n    if len(s) == 1:\n        s = '0' + s\n    return s\n\n```", "choosed_example_idx": [6, 5, 1, 2, 8, 9], "prompt": "Write a function that generates the output from the input.\nInput: dict(s=\"0\"), Output: \"'00'\"\nInput: dict(s=\"\"), Output: \"''\"\nInput: dict(s=\"2\"), Output: \"'02'\"\nInput: dict(s=\"12\"), Output: \"'12'\"\nInput: dict(s=\"10\"), Output: \"'10'\"\nInput: dict(s=\"123\"), Output: \"'123'\"\n\n\nFunction: timeFormat\n\n", "id": "16585cf84c3eeb791db3fe1d69c0e6a4152e90ae_0"}
{"example_str": "examples = [\n    dict(inputStr=\"hello\"),\n    dict(inputStr=\"world\"),\n    dict(inputStr=\"abcde\"),\n    dict(inputStr=\"xyz\"),\n    dict(inputStr=\"python\"),\n    dict(inputStr=\"programming\"),\n    dict(inputStr=\"\"),\n    dict(inputStr=\"a\"),\n    dict(inputStr=\"abcdefghijklmnopqrstuvwxyz\"),\n    dict(inputStr=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"),\n]\nexamples += [\n    dict(inputStr=\"apple\"),\n    dict(inputStr=\"banana\"),\n    dict(inputStr=\"cherry\"),\n    dict(inputStr=\"date\"),\n    dict(inputStr=\"elderberry\"),\n    dict(inputStr=\"fig\"),\n    dict(inputStr=\"grape\"),\n    dict(inputStr=\"honeydew\"),\n    dict(inputStr=\"kiwi\"),\n    dict(inputStr=\"lemon\")\n]\nexamples += [\n    dict(inputStr='apple'),\n    dict(inputStr='banana'),\n    dict(inputStr='cherry'),\n    dict(inputStr='date'),\n    dict(inputStr='elderberry'),\n    dict(inputStr='fig'),\n    dict(inputStr='grape'),\n    dict(inputStr='honeydew'),\n    dict(inputStr='kiwi'),\n    dict(inputStr='lemon')\n]", "code": "def sortByAlphabet(inputStr):\n    return inputStr[0]\n", "func_name": "sortByAlphabet", "exec_status": true, "example_inputs": ["\"{'inputStr': 'hello'}\"", "\"{'inputStr': 'world'}\"", "\"{'inputStr': 'abcde'}\"", "\"{'inputStr': 'xyz'}\"", "\"{'inputStr': 'python'}\"", "\"{'inputStr': 'programming'}\"", "\"{'inputStr': ''}\"", "\"{'inputStr': 'a'}\"", "\"{'inputStr': 'abcdefghijklmnopqrstuvwxyz'}\"", "\"{'inputStr': 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'}\""], "example_outputs": [{"return": "\"'h'\""}, {"return": "\"'w'\""}, {"return": "\"'a'\""}, {"return": "\"'x'\""}, {"return": "\"'p'\""}, {"return": "\"'p'\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: string index out of range\""}, {"return": "\"'a'\""}, {"return": "\"'a'\""}, {"return": "\"'A'\""}, {"return": "\"'a'\""}, {"return": "\"'b'\""}, {"return": "\"'c'\""}, {"return": "\"'d'\""}, {"return": "\"'e'\""}, {"return": "\"'f'\""}, {"return": "\"'g'\""}, {"return": "\"'h'\""}, {"return": "\"'k'\""}, {"return": "\"'l'\""}, {"return": "\"'a'\""}, {"return": "\"'b'\""}, {"return": "\"'c'\""}, {"return": "\"'d'\""}, {"return": "\"'e'\""}, {"return": "\"'f'\""}, {"return": "\"'g'\""}, {"return": "\"'h'\""}, {"return": "\"'k'\""}, {"return": "\"'l'\""}], "parsed_inputs": [[["inputStr", "\"hello\""]], [["inputStr", "\"world\""]], [["inputStr", "\"abcde\""]], [["inputStr", "\"xyz\""]], [["inputStr", "\"python\""]], [["inputStr", "\"programming\""]], [["inputStr", "\"\""]], [["inputStr", "\"a\""]], [["inputStr", "\"abcdefghijklmnopqrstuvwxyz\""]], [["inputStr", "\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\""]]], "exec_code": "def sortByAlphabet(inputStr):\n    return inputStr[0]\n", "output": "The function is:\n\n```python\ndef sortByAlphabet(inputStr):\n    return inputStr[0]\n\n```", "choosed_example_idx": [4, 7, 6, 9, 3, 5, 8], "prompt": "Write a function that generates the output from the input.\nInput: dict(inputStr=\"python\"), Output: \"'p'\"\nInput: dict(inputStr=\"a\"), Output: \"'a'\"\nInput: dict(inputStr=\"\"), Output: \"<class 'IndexError'>: string index out of range\"\nInput: dict(inputStr=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"), Output: \"'A'\"\nInput: dict(inputStr=\"xyz\"), Output: \"'x'\"\nInput: dict(inputStr=\"programming\"), Output: \"'p'\"\nInput: dict(inputStr=\"abcdefghijklmnopqrstuvwxyz\"), Output: \"'a'\"\n\nFunction: sortByAlphabet\n", "id": "da5fcf1961c47a1667af3862ea47a22114ea061b_0"}
{"example_str": "examples = [\n    dict(n=1),\n    dict(n=2),\n    dict(n=4),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10),\n    dict(n=12),\n    dict(n=15),\n    dict(n=24),\n    dict(n=30),\n]\nexamples += [\n    dict(n=1),\n    dict(n=2),\n    dict(n=4),\n    dict(n=3),\n    dict(n=9),\n    dict(n=15),\n    dict(n=21),\n    dict(n=561),\n    dict(n=8),\n    dict(n=10)\n]\nexamples += [\n    dict(n=1),\n    dict(n=2),\n    dict(n=4),\n    dict(n=3),\n    dict(n=9),\n    dict(n=15),\n    dict(n=21),\n    dict(n=35),\n    dict(n=8),\n    dict(n=16)\n]", "code": "def carmichael_lambda(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 4:\n        return 2\n    bin_n = bin(n)\n    if bin_n.count('1') == 1:\n        return 1 << len(bin_n) - 5\n    pf = factorize(n)\n    res = 1\n    if len(pf) == 1:\n        for k, v in pf.items():\n            res = (k - 1) * pow(k, v - 1)\n        return res\n    else:\n        for k, v in pf.items():\n            res = lcm(res, carmichael_lambda(pow(k, v)))\n        return res\n", "func_name": "carmichael_lambda", "exec_status": true, "example_inputs": ["\"{'n': 1}\"", "\"{'n': 2}\"", "\"{'n': 4}\"", "\"{'n': 8}\"", "\"{'n': 9}\"", "\"{'n': 10}\"", "\"{'n': 12}\"", "\"{'n': 15}\"", "\"{'n': 24}\"", "\"{'n': 30}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'factorize' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'factorize' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'factorize' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'factorize' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'factorize' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'factorize' is not defined\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'factorize' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'factorize' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'factorize' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'factorize' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'factorize' is not defined\""}, {"return": "\"2\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'factorize' is not defined\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'factorize' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'factorize' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'factorize' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'factorize' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'factorize' is not defined\""}, {"return": "\"2\""}, {"return": "\"4\""}], "parsed_inputs": [[["n", "1"]], [["n", "2"]], [["n", "4"]], [["n", "8"]], [["n", "9"]], [["n", "10"]], [["n", "12"]], [["n", "15"]], [["n", "24"]], [["n", "30"]]], "exec_code": "def carmichael_lambda(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 4:\n        return 2\n    bin_n = bin(n)\n    if bin_n.count('1') == 1:\n        return 1 << len(bin_n) - 5\n    pf = factorize(n)\n    res = 1\n    if len(pf) == 1:\n        for k, v in pf.items():\n            res = (k - 1) * pow(k, v - 1)\n        return res\n    else:\n        for k, v in pf.items():\n            res = lcm(res, carmichael_lambda(pow(k, v)))\n        return res\n", "output": "The function is:\n\n```python\ndef carmichael_lambda(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 4:\n        return 2\n    bin_n = bin(n)\n    if bin_n.count('1') == 1:\n        return 1 << len(bin_n) - 5\n    pf = factorize(n)\n    res = 1\n    if len(pf) == 1:\n        for k, v in pf.items():\n            res = (k - 1) * pow(k, v - 1)\n        return res\n    else:\n        for k, v in pf.items():\n            res = lcm(res, carmichael_lambda(pow(k, v)))\n        return res\n\n```", "choosed_example_idx": [9, 3, 7, 0, 5, 4], "prompt": "Input: dict(n=30), Output: \"<class 'NameError'>: name 'factorize' is not defined\"\nInput: dict(n=8), Output: \"2\"\nInput: dict(n=15), Output: \"<class 'NameError'>: name 'factorize' is not defined\"\nInput: dict(n=1), Output: \"1\"\nInput: dict(n=10), Output: \"<class 'NameError'>: name 'factorize' is not defined\"\nInput: dict(n=9), Output: \"<class 'NameError'>: name 'factorize' is not defined\"\n\nFunction: carmichael_lambda\nWrite a function that generates the output from the input.\n\n", "id": "be6fc88899e41486d57ee081d82a044c3c6f26f3_0"}
{"example_str": "examples = [\n    dict(n=10),\n    dict(n=20),\n    dict(n=30),\n    dict(n=40),\n    dict(n=50),\n    dict(n=100),\n    dict(n=200),\n    dict(n=300),\n    dict(n=400),\n    dict(n=500),\n]\nexamples += [\n    dict(n=10),\n    dict(n=20),\n    dict(n=30),\n    dict(n=50),\n    dict(n=100),\n    dict(n=1),\n    dict(n=0),\n    dict(n=200),\n    dict(n=500),\n    dict(n=1000)\n]\nexamples += [\n    dict(n=10),\n    dict(n=20),\n    dict(n=30),\n    dict(n=50),\n    dict(n=100),\n    dict(n=200),\n    dict(n=500),\n    dict(n=1000),\n    dict(n=1500),\n    dict(n=2000),\n]", "code": "def create_prime_sieve(n):\n    sieve = [(True) for i in range(n + 1)]\n    sieve[0] = sieve[1] = False\n    for i in range(4, len(sieve), 2):\n        sieve[i] = False\n    for d in range(3, len(sieve), 2):\n        if sieve[d]:\n            for i in range(d * 2, len(sieve), d):\n                sieve[i] = False\n    return sieve\n", "func_name": "create_prime_sieve", "exec_status": true, "example_inputs": ["\"{'n': 10}\"", "\"{'n': 20}\"", "\"{'n': 30}\"", "\"{'n': 40}\"", "\"{'n': 50}\"", "\"{'n': 100}\"", "\"{'n': 200}\"", "\"{'n': 300}\"", "\"{'n': 400}\"", "\"{'n': 500}\""], "example_outputs": [{"return": "\"[False, False, True, True, False, True, False, True, False, False, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, True, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False]\""}, {"return": "\"[False, False]\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list assignment index out of range\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, True, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, True, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False]\""}, {"return": "\"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False]\""}], "parsed_inputs": [[["n", "10"]], [["n", "20"]], [["n", "30"]], [["n", "40"]], [["n", "50"]], [["n", "100"]], [["n", "200"]], [["n", "300"]], [["n", "400"]], [["n", "500"]]], "exec_code": "def create_prime_sieve(n):\n    sieve = [(True) for i in range(n + 1)]\n    sieve[0] = sieve[1] = False\n    for i in range(4, len(sieve), 2):\n        sieve[i] = False\n    for d in range(3, len(sieve), 2):\n        if sieve[d]:\n            for i in range(d * 2, len(sieve), d):\n                sieve[i] = False\n    return sieve\n", "output": "The function is:\n\n```python\ndef create_prime_sieve(n):\n    sieve = [(True) for i in range(n + 1)]\n    sieve[0] = sieve[1] = False\n    for i in range(4, len(sieve), 2):\n        sieve[i] = False\n    for d in range(3, len(sieve), 2):\n        if sieve[d]:\n            for i in range(d * 2, len(sieve), d):\n                sieve[i] = False\n    return sieve\n\n```", "choosed_example_idx": [1, 2, 9], "prompt": "Write a function that generates the output from the input.\nInput: dict(n=20), Output: \"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False]\"\nInput: dict(n=30), Output: \"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False]\"\nInput: dict(n=500), Output: \"[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False]\"\n\nFunction: create_prime_sieve\n", "id": "b4801a8050fbac9f0a170bf44b2203fd55b77158_0"}
{"example_str": "examples = [\n    dict(s=\"abc\"),\n    dict(s=\"xyz\"),\n    dict(s=\"abcd\"),\n    dict(s=\"a\"),\n    dict(s=\"\"),\n    dict(s=\"hello\"),\n    dict(s=\"world\"),\n    dict(s=\"abcdefg\"),\n    dict(s=\"12345\"),\n    dict(s=\"abcdefghijklmnopqrstuvwxyz\"),\n]\nexamples += [\n    dict(s=\"abcde\"),  # Increasing order\n    dict(s=\"edcba\"),  # Decreasing order\n    dict(s=\"aabbc\"),  # Repeated characters\n    dict(s=\"\"),       # Empty string\n    dict(s=\"a\"),      # Single character\n    dict(s=\"abracadabra\"),  # Characters with repetitions\n    dict(s=\"12345\"),  # Numeric characters in increasing order\n    dict(s=\"54321\"),  # Numeric characters in decreasing order\n    dict(s=\"a1b2c3\"),  # Mixed alphanumeric characters\n    dict(s=\"!@#$%^\")  # Special characters\n]\nexamples += [\n    dict(s=\"abcde\"),\n    dict(s=\"edcba\"),\n    dict(s=\"hello\"),\n    dict(s=\"world\"),\n    dict(s=\"aaaaa\"),\n    dict(s=\"zyxwv\"),\n    dict(s=\"12345\"),\n    dict(s=\"54321\"),\n    dict(s=\"mixed123\"),\n    dict(s=\"UPPERlower\")\n]", "code": "def solve(s):\n    n = 0\n    ans = []\n    for i in range(len(s)):\n        n = 0\n        count = 0\n        while n < i:\n            if s[i] > s[n]:\n                count += 1\n            n += 1\n        ans.append(count)\n    return ans\n", "func_name": "solve", "exec_status": true, "example_inputs": ["\"{'s': 'abc'}\"", "\"{'s': 'xyz'}\"", "\"{'s': 'abcd'}\"", "\"{'s': 'a'}\"", "\"{'s': ''}\"", "\"{'s': 'hello'}\"", "\"{'s': 'world'}\"", "\"{'s': 'abcdefg'}\"", "\"{'s': '12345'}\"", "\"{'s': 'abcdefghijklmnopqrstuvwxyz'}\""], "example_outputs": [{"return": "\"[0, 1, 2]\""}, {"return": "\"[0, 1, 2]\""}, {"return": "\"[0, 1, 2, 3]\""}, {"return": "\"[0]\""}, {"return": "\"[]\""}, {"return": "\"[0, 0, 2, 2, 4]\""}, {"return": "\"[0, 0, 1, 0, 0]\""}, {"return": "\"[0, 1, 2, 3, 4, 5, 6]\""}, {"return": "\"[0, 1, 2, 3, 4]\""}, {"return": "\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\""}, {"return": "\"[0, 1, 2, 3, 4]\""}, {"return": "\"[0, 0, 0, 0, 0]\""}, {"return": "\"[0, 0, 2, 2, 4]\""}, {"return": "\"[]\""}, {"return": "\"[0]\""}, {"return": "\"[0, 1, 2, 0, 3, 0, 5, 0, 4, 8, 0]\""}, {"return": "\"[0, 1, 2, 3, 4]\""}, {"return": "\"[0, 0, 0, 0, 0]\""}, {"return": "\"[0, 0, 2, 1, 4, 2]\""}, {"return": "\"[0, 1, 1, 2, 3, 5]\""}, {"return": "\"[0, 1, 2, 3, 4]\""}, {"return": "\"[0, 0, 0, 0, 0]\""}, {"return": "\"[0, 0, 2, 2, 4]\""}, {"return": "\"[0, 0, 1, 0, 0]\""}, {"return": "\"[0, 0, 0, 0, 0]\""}, {"return": "\"[0, 0, 0, 0, 0]\""}, {"return": "\"[0, 1, 2, 3, 4]\""}, {"return": "\"[0, 0, 0, 0, 0]\""}, {"return": "\"[0, 0, 2, 0, 0, 0, 1, 2]\""}, {"return": "\"[0, 0, 0, 0, 3, 5, 6, 7, 5, 8]\""}], "parsed_inputs": [[["s", "\"abc\""]], [["s", "\"xyz\""]], [["s", "\"abcd\""]], [["s", "\"a\""]], [["s", "\"\""]], [["s", "\"hello\""]], [["s", "\"world\""]], [["s", "\"abcdefg\""]], [["s", "\"12345\""]], [["s", "\"abcdefghijklmnopqrstuvwxyz\""]]], "exec_code": "def solve(s):\n    n = 0\n    ans = []\n    for i in range(len(s)):\n        n = 0\n        count = 0\n        while n < i:\n            if s[i] > s[n]:\n                count += 1\n            n += 1\n        ans.append(count)\n    return ans\n", "output": "The function is:\n\n```python\ndef solve(s):\n    n = 0\n    ans = []\n    for i in range(len(s)):\n        n = 0\n        count = 0\n        while n < i:\n            if s[i] > s[n]:\n                count += 1\n            n += 1\n        ans.append(count)\n    return ans\n\n```", "choosed_example_idx": [9, 8, 1, 2, 7, 6], "prompt": "Function: solve\n\n\nWrite a function that generates the output from the input.\n\nInput: dict(s=\"abcdefghijklmnopqrstuvwxyz\"), Output: \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\"\nInput: dict(s=\"12345\"), Output: \"[0, 1, 2, 3, 4]\"\nInput: dict(s=\"xyz\"), Output: \"[0, 1, 2]\"\nInput: dict(s=\"abcd\"), Output: \"[0, 1, 2, 3]\"\nInput: dict(s=\"abcdefg\"), Output: \"[0, 1, 2, 3, 4, 5, 6]\"\nInput: dict(s=\"world\"), Output: \"[0, 0, 1, 0, 0]\"\n\n\n", "id": "84ef03f0025a73b4947eb41718979edcefb429e0_0"}
{"example_str": "examples = [\n    dict(anio=2000),\n    dict(anio=1999),\n    dict(anio=2020),\n    dict(anio=1900),\n    dict(anio=2004),\n    dict(anio=1987),\n    dict(anio=2050),\n    dict(anio=2012),\n    dict(anio=1968),\n    dict(anio=1800),\n]\nexamples += [\n    dict(anio=2020),  # Leap year, divisible by 4, not by 100\n    dict(anio=1900),  # Not a leap year, divisible by 100 but not by 400\n    dict(anio=2000),  # Leap year, divisible by 100 and by 400\n    dict(anio=2021),  # Not a leap year, not divisible by 4\n    dict(anio=1988),  # Leap year, divisible by 4, not by 100\n    dict(anio=1600),  # Leap year, divisible by 100 and by 400\n    dict(anio=1700),  # Not a leap year, divisible by 100 but not by 400\n    dict(anio=1800),  # Not a leap year, divisible by 100 but not by 400\n    dict(anio=2100),  # Not a leap year, divisible by 100 but not by 400\n    dict(anio=1996)   # Leap year, divisible by 4, not by 100\n]\nexamples += [\n    dict(anio=2000),  # Leap year, divisible by 400\n    dict(anio=2004),  # Leap year, divisible by 4 but not by 100\n    dict(anio=2001),  # Common year, not divisible by 4\n    dict(anio=1900),  # Common year, divisible by 100 but not by 400\n    dict(anio=2020),  # Leap year, divisible by 4 and not by 100\n    dict(anio=2021),  # Common year, not divisible by 4\n    dict(anio=2100),  # Common year, divisible by 100 but not by 400\n    dict(anio=2400),  # Leap year, divisible by 400\n    dict(anio=1996),  # Leap year, divisible by 4 but not by 100\n    dict(anio=1999)   # Common year, not divisible by 4\n]", "code": "def isYearLeap(anio):\n    if anio % 4 == 0 and (anio % 100 != 0 or anio % 400 == 0):\n        return True\n    else:\n        return False\n", "func_name": "isYearLeap", "exec_status": true, "example_inputs": ["\"{'anio': 2000}\"", "\"{'anio': 1999}\"", "\"{'anio': 2020}\"", "\"{'anio': 1900}\"", "\"{'anio': 2004}\"", "\"{'anio': 1987}\"", "\"{'anio': 2050}\"", "\"{'anio': 2012}\"", "\"{'anio': 1968}\"", "\"{'anio': 1800}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}], "parsed_inputs": [[["anio", "2000"]], [["anio", "1999"]], [["anio", "2020"]], [["anio", "1900"]], [["anio", "2004"]], [["anio", "1987"]], [["anio", "2050"]], [["anio", "2012"]], [["anio", "1968"]], [["anio", "1800"]]], "exec_code": "def isYearLeap(anio):\n    if anio % 4 == 0 and (anio % 100 != 0 or anio % 400 == 0):\n        return True\n    else:\n        return False\n", "output": "The function is:\n\n```python\ndef isYearLeap(anio):\n    if anio % 4 == 0 and (anio % 100 != 0 or anio % 400 == 0):\n        return True\n    else:\n        return False\n\n```", "choosed_example_idx": [2, 8, 9, 1, 3], "prompt": "Function: isYearLeap\nInput: dict(anio=2020), Output: \"True\"\nInput: dict(anio=1968), Output: \"True\"\nInput: dict(anio=1800), Output: \"False\"\nInput: dict(anio=1999), Output: \"False\"\nInput: dict(anio=1900), Output: \"False\"\n\n\n\nWrite a function that generates the output from the input.\n\n", "id": "c3895ddf9239fe8e4b1ea1fc916eab99305eeaf5_0"}
{"example_str": "examples = [\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10),\n]\nexamples += [\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10)\n]\nexamples += [\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10)\n]", "code": "def next_collatz(n):\n    if n % 2 == 0:\n        return n / 2\n    else:\n        return 3 * n + 1\n", "func_name": "next_collatz", "exec_status": true, "example_inputs": ["\"{'n': 1}\"", "\"{'n': 2}\"", "\"{'n': 3}\"", "\"{'n': 4}\"", "\"{'n': 5}\"", "\"{'n': 6}\"", "\"{'n': 7}\"", "\"{'n': 8}\"", "\"{'n': 9}\"", "\"{'n': 10}\""], "example_outputs": [{"return": "\"4\""}, {"return": "\"1.0\""}, {"return": "\"10\""}, {"return": "\"2.0\""}, {"return": "\"16\""}, {"return": "\"3.0\""}, {"return": "\"22\""}, {"return": "\"4.0\""}, {"return": "\"28\""}, {"return": "\"5.0\""}, {"return": "\"4\""}, {"return": "\"1.0\""}, {"return": "\"10\""}, {"return": "\"2.0\""}, {"return": "\"16\""}, {"return": "\"3.0\""}, {"return": "\"22\""}, {"return": "\"4.0\""}, {"return": "\"28\""}, {"return": "\"5.0\""}, {"return": "\"4\""}, {"return": "\"1.0\""}, {"return": "\"10\""}, {"return": "\"2.0\""}, {"return": "\"16\""}, {"return": "\"3.0\""}, {"return": "\"22\""}, {"return": "\"4.0\""}, {"return": "\"28\""}, {"return": "\"5.0\""}], "parsed_inputs": [[["n", "1"]], [["n", "2"]], [["n", "3"]], [["n", "4"]], [["n", "5"]], [["n", "6"]], [["n", "7"]], [["n", "8"]], [["n", "9"]], [["n", "10"]]], "exec_code": "def next_collatz(n):\n    if n % 2 == 0:\n        return n / 2\n    else:\n        return 3 * n + 1\n", "output": "The function is:\n\n```python\ndef next_collatz(n):\n    if n % 2 == 0:\n        return n / 2\n    else:\n        return 3 * n + 1\n\n```", "choosed_example_idx": [0, 1, 9, 8, 7, 6, 4, 3, 2], "prompt": "Input: dict(n=1), Output: \"4\"\nInput: dict(n=2), Output: \"1.0\"\nInput: dict(n=10), Output: \"5.0\"\nInput: dict(n=9), Output: \"28\"\nInput: dict(n=8), Output: \"4.0\"\nInput: dict(n=7), Output: \"22\"\nInput: dict(n=5), Output: \"16\"\nInput: dict(n=4), Output: \"2.0\"\nInput: dict(n=3), Output: \"10\"\n\nFunction: next_collatz\nWrite a function that generates the output from the input.\n\n\n", "id": "591c0bb575ed6a85fd156a2f80a7489386324b88_0"}
{"example_str": "examples = [\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10),\n    dict(n=11),\n]\nexamples += [\n    dict(n=2),    # True, directly specified as prime\n    dict(n=3),    # True, directly specified as prime\n    dict(n=7),    # True, directly specified as prime\n    dict(n=4),    # False, even number greater than 2\n    dict(n=9),    # False, 3^2\n    dict(n=11),   # True, prime number\n    dict(n=15),   # False, 3 * 5\n    dict(n=17),   # True, prime number\n    dict(n=19),   # True, prime number\n    dict(n=21)    # False, 3 * 7\n]\nexamples += [\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10),\n    dict(n=11)\n]", "code": "def is_prime(n):\n    if n == 2 or n == 3 or n == 7:\n        return True\n    if n % 2 == 0:\n        return False\n    d = n - 1\n    s = 0\n    while d % 2 == 0:\n        d = d / 2\n        s = s + 1\n    for a in [2, 7, 61]:\n        x = pow(a, d, n)\n        if x == 1 or x == n - 1:\n            continue\n        prime = False\n        for r in range(1, s):\n            x = x * x % n\n            if x == 1:\n                return False\n            if x == n - 1:\n                prime = True\n                break\n        if not prime:\n            return False\n    return True\n", "func_name": "is_prime", "exec_status": true, "example_inputs": ["\"{'n': 2}\"", "\"{'n': 3}\"", "\"{'n': 4}\"", "\"{'n': 5}\"", "\"{'n': 6}\"", "\"{'n': 7}\"", "\"{'n': 8}\"", "\"{'n': 9}\"", "\"{'n': 10}\"", "\"{'n': 11}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: pow() 3rd argument not allowed unless all arguments are integers\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: pow() 3rd argument not allowed unless all arguments are integers\""}, {"return": "\"False\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: pow() 3rd argument not allowed unless all arguments are integers\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: pow() 3rd argument not allowed unless all arguments are integers\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: pow() 3rd argument not allowed unless all arguments are integers\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: pow() 3rd argument not allowed unless all arguments are integers\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: pow() 3rd argument not allowed unless all arguments are integers\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: pow() 3rd argument not allowed unless all arguments are integers\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: pow() 3rd argument not allowed unless all arguments are integers\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: pow() 3rd argument not allowed unless all arguments are integers\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: pow() 3rd argument not allowed unless all arguments are integers\""}, {"return": "\"False\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: pow() 3rd argument not allowed unless all arguments are integers\""}], "parsed_inputs": [[["n", "2"]], [["n", "3"]], [["n", "4"]], [["n", "5"]], [["n", "6"]], [["n", "7"]], [["n", "8"]], [["n", "9"]], [["n", "10"]], [["n", "11"]]], "exec_code": "def is_prime(n):\n    if n == 2 or n == 3 or n == 7:\n        return True\n    if n % 2 == 0:\n        return False\n    d = n - 1\n    s = 0\n    while d % 2 == 0:\n        d = d / 2\n        s = s + 1\n    for a in [2, 7, 61]:\n        x = pow(a, d, n)\n        if x == 1 or x == n - 1:\n            continue\n        prime = False\n        for r in range(1, s):\n            x = x * x % n\n            if x == 1:\n                return False\n            if x == n - 1:\n                prime = True\n                break\n        if not prime:\n            return False\n    return True\n", "output": "The function is:\n\n```python\ndef is_prime(n):\n    if n == 2 or n == 3 or n == 7:\n        return True\n    if n % 2 == 0:\n        return False\n    d = n - 1\n    s = 0\n    while d % 2 == 0:\n        d = d / 2\n        s = s + 1\n    for a in [2, 7, 61]:\n        x = pow(a, d, n)\n        if x == 1 or x == n - 1:\n            continue\n        prime = False\n        for r in range(1, s):\n            x = x * x % n\n            if x == 1:\n                return False\n            if x == n - 1:\n                prime = True\n                break\n        if not prime:\n            return False\n    return True\n\n```", "choosed_example_idx": [9, 2, 5, 4, 7, 0, 6, 8], "prompt": "Input: dict(n=11), Output: \"<class 'TypeError'>: pow() 3rd argument not allowed unless all arguments are integers\"\nInput: dict(n=4), Output: \"False\"\nInput: dict(n=7), Output: \"True\"\nInput: dict(n=6), Output: \"False\"\nInput: dict(n=9), Output: \"<class 'TypeError'>: pow() 3rd argument not allowed unless all arguments are integers\"\nInput: dict(n=2), Output: \"True\"\nInput: dict(n=8), Output: \"False\"\nInput: dict(n=10), Output: \"False\"\n\nFunction: is_prime\nWrite a function that generates the output from the input.\n\n\n", "id": "3f457551e3f3eb4601f3a5d9ba9a092c05fbed16_0"}
{"example_str": "examples = [\n    dict(n=0),\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n]\nexamples += [\n    dict(n=0),  # Factorial of 0 is 1\n    dict(n=1),  # Factorial of 1 is 1\n    dict(n=2),  # Factorial of 2 is 2\n    dict(n=3),  # Factorial of 3 is 6\n    dict(n=4),  # Factorial of 4 is 24\n    dict(n=5),  # Factorial of 5 is 120\n    dict(n=10), # Factorial of 10 is 3628800\n    dict(n=15), # Factorial of 15 is 1307674368000\n    dict(n=20), # Factorial of 20 is 2432902008176640000\n    dict(n=25)  # Factorial of 25 is 15511210043330985984000000\n]\nexamples += [\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10)\n]", "code": "def factorial(n):\n    ans = 1\n    for i in range(1, n + 1):\n        ans = ans * i\n        print(f'multiply {i}')\n    return ans\n", "func_name": "factorial", "exec_status": true, "example_inputs": ["\"{'n': 0}\"", "\"{'n': 1}\"", "\"{'n': 2}\"", "\"{'n': 3}\"", "\"{'n': 4}\"", "\"{'n': 5}\"", "\"{'n': 6}\"", "\"{'n': 7}\"", "\"{'n': 8}\"", "\"{'n': 9}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"6\""}, {"return": "\"24\""}, {"return": "\"120\""}, {"return": "\"720\""}, {"return": "\"5040\""}, {"return": "\"40320\""}, {"return": "\"362880\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"6\""}, {"return": "\"24\""}, {"return": "\"120\""}, {"return": "\"3628800\""}, {"return": "\"1307674368000\""}, {"return": "\"2432902008176640000\""}, {"return": "\"15511210043330985984000000\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"6\""}, {"return": "\"24\""}, {"return": "\"120\""}, {"return": "\"720\""}, {"return": "\"5040\""}, {"return": "\"40320\""}, {"return": "\"362880\""}, {"return": "\"3628800\""}], "parsed_inputs": [[["n", "0"]], [["n", "1"]], [["n", "2"]], [["n", "3"]], [["n", "4"]], [["n", "5"]], [["n", "6"]], [["n", "7"]], [["n", "8"]], [["n", "9"]]], "exec_code": "def factorial(n):\n    ans = 1\n    for i in range(1, n + 1):\n        ans = ans * i\n        print(f'multiply {i}')\n    return ans\n", "output": "The function is:\n\n```python\ndef factorial(n):\n    ans = 1\n    for i in range(1, n + 1):\n        ans = ans * i\n        print(f'multiply {i}')\n    return ans\n\n```", "choosed_example_idx": [0, 4, 2], "prompt": "Input: dict(n=0), Output: \"1\"\nInput: dict(n=4), Output: \"24\"\nInput: dict(n=2), Output: \"2\"\n\n\nWrite a function that generates the output from the input.\n\nFunction: factorial\n", "id": "0627a3989e94fa221a5329856048b987c5366df8_0"}
{"example_str": "examples = [\n    dict(n=10),\n    dict(n=25),\n    dict(n=37),\n    dict(n=48),\n    dict(n=1),\n    dict(n=0),\n    dict(n=2),\n    dict(n=100),\n    dict(n=75),\n    dict(n=99),\n]\nexamples += [\n    dict(n=1),\n    dict(n=2),\n    dict(n=10),\n    dict(n=25),\n    dict(n=50),\n    dict(n=100),\n    dict(n=200),\n    dict(n=500),\n    dict(n=1000),\n    dict(n=2048)\n]\nexamples += [\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=10),\n    dict(n=20),\n    dict(n=50),\n    dict(n=100),\n    dict(n=200),\n    dict(n=500),\n    dict(n=1000)\n]", "code": "def halving_sum(n):\n    sum = 0\n    while n:\n        sum += n\n        n //= 2\n    return sum\n", "func_name": "halving_sum", "exec_status": true, "example_inputs": ["\"{'n': 10}\"", "\"{'n': 25}\"", "\"{'n': 37}\"", "\"{'n': 48}\"", "\"{'n': 1}\"", "\"{'n': 0}\"", "\"{'n': 2}\"", "\"{'n': 100}\"", "\"{'n': 75}\"", "\"{'n': 99}\""], "example_outputs": [{"return": "\"18\""}, {"return": "\"47\""}, {"return": "\"71\""}, {"return": "\"94\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"197\""}, {"return": "\"146\""}, {"return": "\"194\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"18\""}, {"return": "\"47\""}, {"return": "\"97\""}, {"return": "\"197\""}, {"return": "\"397\""}, {"return": "\"994\""}, {"return": "\"1994\""}, {"return": "\"4095\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"4\""}, {"return": "\"18\""}, {"return": "\"38\""}, {"return": "\"97\""}, {"return": "\"197\""}, {"return": "\"397\""}, {"return": "\"994\""}, {"return": "\"1994\""}], "parsed_inputs": [[["n", "10"]], [["n", "25"]], [["n", "37"]], [["n", "48"]], [["n", "1"]], [["n", "0"]], [["n", "2"]], [["n", "100"]], [["n", "75"]], [["n", "99"]]], "exec_code": "def halving_sum(n):\n    sum = 0\n    while n:\n        sum += n\n        n //= 2\n    return sum\n", "output": "The function is:\n\n```python\ndef halving_sum(n):\n    sum = 0\n    while n:\n        sum += n\n        n //= 2\n    return sum\n\n```", "choosed_example_idx": [6, 0, 5, 7, 3, 8], "prompt": "Function: halving_sum\nWrite a function that generates the output from the input.\n\nInput: dict(n=2), Output: \"3\"\nInput: dict(n=10), Output: \"18\"\nInput: dict(n=0), Output: \"0\"\nInput: dict(n=100), Output: \"197\"\nInput: dict(n=48), Output: \"94\"\nInput: dict(n=75), Output: \"146\"\n\n", "id": "789cf4396451671b7604acbaa4231c973c658b3d_0"}
{"example_str": "examples = [\n    dict(code=123456),\n    dict(code=12345),\n    dict(code=1234),\n    dict(code=123),\n    dict(code=12),\n    dict(code='123456'),\n    dict(code='12345'),\n    dict(code='1234'),\n    dict(code='123'),\n    dict(code='12'),\n]\nexamples += [\n    dict(code=123),          # Example with an integer less than 6 digits\n    dict(code=123456),       # Example with an integer exactly 6 digits\n    dict(code=1234567),      # Example with an integer more than 6 digits\n    dict(code='456'),        # Example with a string less than 6 digits\n    dict(code='123456'),     # Example with a string exactly 6 digits\n    dict(code='123456789'),  # Example with a string more than 6 digits\n    dict(code='abc'),        # Example with a non-numeric string less than 6 digits\n    dict(code='abcdef'),     # Example with a non-numeric string exactly 6 digits\n    dict(code='abcdefgh'),   # Example with a non-numeric string more than 6 digits\n    dict(code=0)             # Example with zero as an integer\n]\nexamples += [\n    dict(code=123),          # Integer with less than 6 digits\n    dict(code=123456),       # Integer with exactly 6 digits\n    dict(code=1234567),      # Integer with more than 6 digits\n    dict(code='123'),        # String with less than 6 characters\n    dict(code='123456'),     # String with exactly 6 characters\n    dict(code='1234567'),    # String with more than 6 characters\n    dict(code='abc'),        # String with non-numeric characters\n    dict(code='abcdef'),     # String with exactly 6 non-numeric characters\n    dict(code='abcdefg'),    # String with more than 6 non-numeric characters\n    dict(code='12'),         # Short string with numeric characters\n]", "code": "def convert_standard_code(code):\n    \"\"\"\n    将指标代码转为标准6为字符串\n    :param code:\n    :return:\n    \"\"\"\n    if isinstance(code, int):\n        if len(str(code)) == 6:\n            return str(code)\n        if len(str(code)) < 6:\n            return str(1000000 + code)[1:]\n    if isinstance(code, str):\n        tmp = '000000' + code\n        return str(tmp)[len(tmp) - 6:]\n    return None\n", "func_name": "convert_standard_code", "exec_status": true, "example_inputs": ["\"{'code': 123456}\"", "\"{'code': 12345}\"", "\"{'code': 1234}\"", "\"{'code': 123}\"", "\"{'code': 12}\"", "\"{'code': '123456'}\"", "\"{'code': '12345'}\"", "\"{'code': '1234'}\"", "\"{'code': '123'}\"", "\"{'code': '12'}\""], "example_outputs": [{"return": "\"'123456'\""}, {"return": "\"'012345'\""}, {"return": "\"'001234'\""}, {"return": "\"'000123'\""}, {"return": "\"'000012'\""}, {"return": "\"'123456'\""}, {"return": "\"'012345'\""}, {"return": "\"'001234'\""}, {"return": "\"'000123'\""}, {"return": "\"'000012'\""}, {"return": "\"'000123'\""}, {"return": "\"'123456'\""}, {"return": "\"None\""}, {"return": "\"'000456'\""}, {"return": "\"'123456'\""}, {"return": "\"'456789'\""}, {"return": "\"'000abc'\""}, {"return": "\"'abcdef'\""}, {"return": "\"'cdefgh'\""}, {"return": "\"'000000'\""}, {"return": "\"'000123'\""}, {"return": "\"'123456'\""}, {"return": "\"None\""}, {"return": "\"'000123'\""}, {"return": "\"'123456'\""}, {"return": "\"'234567'\""}, {"return": "\"'000abc'\""}, {"return": "\"'abcdef'\""}, {"return": "\"'bcdefg'\""}, {"return": "\"'000012'\""}], "parsed_inputs": [[["code", "123456"]], [["code", "12345"]], [["code", "1234"]], [["code", "123"]], [["code", "12"]], [["code", "\"123456\""]], [["code", "\"12345\""]], [["code", "\"1234\""]], [["code", "\"123\""]], [["code", "\"12\""]]], "exec_code": "def convert_standard_code(code):\n    \"\"\"\n    将指标代码转为标准6为字符串\n    :param code:\n    :return:\n    \"\"\"\n    if isinstance(code, int):\n        if len(str(code)) == 6:\n            return str(code)\n        if len(str(code)) < 6:\n            return str(1000000 + code)[1:]\n    if isinstance(code, str):\n        tmp = '000000' + code\n        return str(tmp)[len(tmp) - 6:]\n    return None\n", "output": "The function is:\n\n```python\ndef convert_standard_code(code):\n    \"\"\"\n    将指标代码转为标准6为字符串\n    :param code:\n    :return:\n    \"\"\"\n    if isinstance(code, int):\n        if len(str(code)) == 6:\n            return str(code)\n        if len(str(code)) < 6:\n            return str(1000000 + code)[1:]\n    if isinstance(code, str):\n        tmp = '000000' + code\n        return str(tmp)[len(tmp) - 6:]\n    return None\n\n```", "choosed_example_idx": [1, 7, 5, 8, 6, 4], "prompt": "Function: convert_standard_code\n\n\nInput: dict(code=12345), Output: \"'012345'\"\nInput: dict(code=\"1234\"), Output: \"'001234'\"\nInput: dict(code=\"123456\"), Output: \"'123456'\"\nInput: dict(code=\"123\"), Output: \"'000123'\"\nInput: dict(code=\"12345\"), Output: \"'012345'\"\nInput: dict(code=12), Output: \"'000012'\"\n\n\nWrite a function that generates the output from the input.\n", "id": "dee907bdd6f81ed6ec373c8bc5d841805c4a06d2_0"}
{"example_str": "examples = [\n    dict(S=\"abcde\"),\n    dict(S=\"aaaab\"),\n    dict(S=\"abcdabc\"),\n    dict(S=\"abcabcabc\"),\n    dict(S=\"abcdabcd\"),\n    dict(S=\"abcabcdabcabcd\"),\n    dict(S=\"abcdeabcdeabcde\"),\n    dict(S=\"abcdabcdabcdabcd\"),\n    dict(S=\"abcabcabcabcabc\"),\n    dict(S=\"abcdabcdabcdabcdabcd\"),\n]\nexamples += [\n    dict(S=\"a\"),\n    dict(S=\"ab\"),\n    dict(S=\"aa\"),\n    dict(S=\"abc\"),\n    dict(S=\"aab\"),\n    dict(S=\"abab\"),\n    dict(S=\"aaaa\"),\n    dict(S=\"abcabc\"),\n    dict(S=\"abacabad\"),\n    dict(S=\"abracadabra\")\n]\nexamples += [\n    dict(S=\"a\"),\n    dict(S=\"ab\"),\n    dict(S=\"abc\"),\n    dict(S=\"abcd\"),\n    dict(S=\"abcde\"),\n    dict(S=\"aaaaa\"),\n    dict(S=\"aaabaaa\"),\n    dict(S=\"ababab\"),\n    dict(S=\"abcabcabc\"),\n    dict(S=\"abracadabra\")\n]", "code": "def fa(S):\n    F = [0]\n    m = len(S)\n    i = 1\n    j = 0\n    while i < m:\n        if S[i] == S[j]:\n            F.append(j + 1)\n            i += 1\n            j += 1\n        elif j > 0:\n            j = F[j - 1]\n        else:\n            F.append(0)\n            i += 1\n    return F\n", "func_name": "fa", "exec_status": true, "example_inputs": ["\"{'S': 'abcde'}\"", "\"{'S': 'aaaab'}\"", "\"{'S': 'abcdabc'}\"", "\"{'S': 'abcabcabc'}\"", "\"{'S': 'abcdabcd'}\"", "\"{'S': 'abcabcdabcabcd'}\"", "\"{'S': 'abcdeabcdeabcde'}\"", "\"{'S': 'abcdabcdabcdabcd'}\"", "\"{'S': 'abcabcabcabcabc'}\"", "\"{'S': 'abcdabcdabcdabcdabcd'}\""], "example_outputs": [{"return": "\"[0, 0, 0, 0, 0]\""}, {"return": "\"[0, 1, 2, 3, 0]\""}, {"return": "\"[0, 0, 0, 0, 1, 2, 3]\""}, {"return": "\"[0, 0, 0, 1, 2, 3, 4, 5, 6]\""}, {"return": "\"[0, 0, 0, 0, 1, 2, 3, 4]\""}, {"return": "\"[0, 0, 0, 1, 2, 3, 0, 1, 2, 3, 4, 5, 6, 7]\""}, {"return": "\"[0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\""}, {"return": "\"[0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\""}, {"return": "\"[0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\""}, {"return": "\"[0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\""}, {"return": "\"[0]\""}, {"return": "\"[0, 0]\""}, {"return": "\"[0, 1]\""}, {"return": "\"[0, 0, 0]\""}, {"return": "\"[0, 1, 0]\""}, {"return": "\"[0, 0, 1, 2]\""}, {"return": "\"[0, 1, 2, 3]\""}, {"return": "\"[0, 0, 0, 1, 2, 3]\""}, {"return": "\"[0, 0, 1, 0, 1, 2, 3, 0]\""}, {"return": "\"[0, 0, 0, 1, 0, 1, 0, 1, 2, 3, 4]\""}, {"return": "\"[0]\""}, {"return": "\"[0, 0]\""}, {"return": "\"[0, 0, 0]\""}, {"return": "\"[0, 0, 0, 0]\""}, {"return": "\"[0, 0, 0, 0, 0]\""}, {"return": "\"[0, 1, 2, 3, 4]\""}, {"return": "\"[0, 1, 2, 0, 1, 2, 3]\""}, {"return": "\"[0, 0, 1, 2, 3, 4]\""}, {"return": "\"[0, 0, 0, 1, 2, 3, 4, 5, 6]\""}, {"return": "\"[0, 0, 0, 1, 0, 1, 0, 1, 2, 3, 4]\""}], "parsed_inputs": [[["S", "\"abcde\""]], [["S", "\"aaaab\""]], [["S", "\"abcdabc\""]], [["S", "\"abcabcabc\""]], [["S", "\"abcdabcd\""]], [["S", "\"abcabcdabcabcd\""]], [["S", "\"abcdeabcdeabcde\""]], [["S", "\"abcdabcdabcdabcd\""]], [["S", "\"abcabcabcabcabc\""]], [["S", "\"abcdabcdabcdabcdabcd\""]]], "exec_code": "def fa(S):\n    F = [0]\n    m = len(S)\n    i = 1\n    j = 0\n    while i < m:\n        if S[i] == S[j]:\n            F.append(j + 1)\n            i += 1\n            j += 1\n        elif j > 0:\n            j = F[j - 1]\n        else:\n            F.append(0)\n            i += 1\n    return F\n", "output": "The function is:\n\n```python\ndef fa(S):\n    F = [0]\n    m = len(S)\n    i = 1\n    j = 0\n    while i < m:\n        if S[i] == S[j]:\n            F.append(j + 1)\n            i += 1\n            j += 1\n        elif j > 0:\n            j = F[j - 1]\n        else:\n            F.append(0)\n            i += 1\n    return F\n\n```", "choosed_example_idx": [4, 3, 6, 1, 2], "prompt": "Write a function that generates the output from the input.\n\nFunction: fa\n\nInput: dict(S=\"abcdabcd\"), Output: \"[0, 0, 0, 0, 1, 2, 3, 4]\"\nInput: dict(S=\"abcabcabc\"), Output: \"[0, 0, 0, 1, 2, 3, 4, 5, 6]\"\nInput: dict(S=\"abcdeabcdeabcde\"), Output: \"[0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\nInput: dict(S=\"aaaab\"), Output: \"[0, 1, 2, 3, 0]\"\nInput: dict(S=\"abcdabc\"), Output: \"[0, 0, 0, 0, 1, 2, 3]\"\n\n", "id": "42bf15a0787ccec7e65d545446acfb5ad97443cd_0"}
{"example_str": "examples = [\n    dict(input=1),\n    dict(input=2),\n    dict(input=3),\n    dict(input=4),\n    dict(input=5),\n    dict(input=6),\n    dict(input=7),\n    dict(input=8),\n    dict(input=9),\n    dict(input=10),\n]\nexamples += [\n    dict(input=0),\n    dict(input=1),\n    dict(input=2),\n    dict(input=-1),\n    dict(input=-2),\n    dict(input=10),\n    dict(input=11),\n    dict(input=100),\n    dict(input=-100),\n    dict(input=999)\n]\nexamples += [\n    dict(input=0),\n    dict(input=1),\n    dict(input=2),\n    dict(input=3),\n    dict(input=4),\n    dict(input=5),\n    dict(input=6),\n    dict(input=7),\n    dict(input=8),\n    dict(input=9)\n]", "code": "def makeOdd(input):\n    return input % 2 + 1 + input - input % 2 * 2\n", "func_name": "makeOdd", "exec_status": true, "example_inputs": ["\"{'input': 1}\"", "\"{'input': 2}\"", "\"{'input': 3}\"", "\"{'input': 4}\"", "\"{'input': 5}\"", "\"{'input': 6}\"", "\"{'input': 7}\"", "\"{'input': 8}\"", "\"{'input': 9}\"", "\"{'input': 10}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"7\""}, {"return": "\"7\""}, {"return": "\"9\""}, {"return": "\"9\""}, {"return": "\"11\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"-1\""}, {"return": "\"-1\""}, {"return": "\"11\""}, {"return": "\"11\""}, {"return": "\"101\""}, {"return": "\"-99\""}, {"return": "\"999\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"7\""}, {"return": "\"7\""}, {"return": "\"9\""}, {"return": "\"9\""}], "parsed_inputs": [[["input", "1"]], [["input", "2"]], [["input", "3"]], [["input", "4"]], [["input", "5"]], [["input", "6"]], [["input", "7"]], [["input", "8"]], [["input", "9"]], [["input", "10"]]], "exec_code": "def makeOdd(input):\n    return input % 2 + 1 + input - input % 2 * 2\n", "output": "The function is:\n\n```python\ndef makeOdd(input):\n    return input % 2 + 1 + input - input % 2 * 2\n\n```", "choosed_example_idx": [2, 6, 0, 9, 7, 5, 4], "prompt": "Input: dict(input=3), Output: \"3\"\nInput: dict(input=7), Output: \"7\"\nInput: dict(input=1), Output: \"1\"\nInput: dict(input=10), Output: \"11\"\nInput: dict(input=8), Output: \"9\"\nInput: dict(input=6), Output: \"7\"\nInput: dict(input=5), Output: \"5\"\n\nFunction: makeOdd\nWrite a function that generates the output from the input.\n\n", "id": "4e83a4a97e031c11a6ea4a2519a4e0f65556c312_0"}
{"example_str": "examples = [\n    dict(url=\"https://www.example.com/path/to/page\"),\n    dict(url=\"http://example.com\"),\n    dict(url=\"www.example.com\"),\n    dict(url=\"example.com\"),\n    dict(url=\"https://example.com\"),\n    dict(url=\"ftp://example.com\"),\n    dict(url=\"\"),\n    dict(url=\"https://www.example.com\"),\n    dict(url=\"http://example.co.uk\"),\n    dict(url=\"www.subdomain.example.com\"),\n]\nexamples += [\n    dict(url=\"https://www.example.com/page\"),\n    dict(url=\"http://www.example.com\"),\n    dict(url=\"https://example.com/about\"),\n    dict(url=\"http://example.com/contact\"),\n    dict(url=\"ftp://files.example.com/download\"),\n    dict(url=\"https://subdomain.example.com\"),\n    dict(url=\"https://www.example.co.uk\"),\n    dict(url=\"\"),\n    dict(url=\"https://www.example.com/a/long/path\"),\n    dict(url=\"http://localhost:8080\")\n]\nexamples += [\n    dict(url=\"https://www.example.com/page\"),\n    dict(url=\"http://example.net\"),\n    dict(url=\"https://subdomain.example.org/path/to/resource\"),\n    dict(url=\"ftp://files.example.com/downloads/file.zip\"),\n    dict(url=\"https://www.example.co.uk\"),\n    dict(url=\"http://localhost:8080\"),\n    dict(url=\"https://192.168.1.1/settings\"),\n    dict(url=\"http://example.com:1234\"),\n    dict(url=\"https://example.com/?query=param\"),\n    dict(url=\"http://example.com#anchor\")\n]", "code": "def extract_domain(url: str) ->str:\n    if not url:\n        return ''\n    start = url.find('//')\n    if start == -1:\n        start = -2\n    end = url.find('/', start + 2)\n    if end == -1:\n        end = len(url) - 1\n    return url[start + 2:end]\n", "func_name": "extract_domain", "exec_status": true, "example_inputs": ["\"{'url': 'https://www.example.com/path/to/page'}\"", "\"{'url': 'http://example.com'}\"", "\"{'url': 'www.example.com'}\"", "\"{'url': 'example.com'}\"", "\"{'url': 'https://example.com'}\"", "\"{'url': 'ftp://example.com'}\"", "\"{'url': ''}\"", "\"{'url': 'https://www.example.com'}\"", "\"{'url': 'http://example.co.uk'}\"", "\"{'url': 'www.subdomain.example.com'}\""], "example_outputs": [{"return": "\"'www.example.com'\""}, {"return": "\"'example.co'\""}, {"return": "\"'www.example.co'\""}, {"return": "\"'example.co'\""}, {"return": "\"'example.co'\""}, {"return": "\"'example.co'\""}, {"return": "\"''\""}, {"return": "\"'www.example.co'\""}, {"return": "\"'example.co.u'\""}, {"return": "\"'www.subdomain.example.co'\""}, {"return": "\"'www.example.com'\""}, {"return": "\"'www.example.co'\""}, {"return": "\"'example.com'\""}, {"return": "\"'example.com'\""}, {"return": "\"'files.example.com'\""}, {"return": "\"'subdomain.example.co'\""}, {"return": "\"'www.example.co.u'\""}, {"return": "\"''\""}, {"return": "\"'www.example.com'\""}, {"return": "\"'localhost:808'\""}, {"return": "\"'www.example.com'\""}, {"return": "\"'example.ne'\""}, {"return": "\"'subdomain.example.org'\""}, {"return": "\"'files.example.com'\""}, {"return": "\"'www.example.co.u'\""}, {"return": "\"'localhost:808'\""}, {"return": "\"'192.168.1.1'\""}, {"return": "\"'example.com:123'\""}, {"return": "\"'example.com'\""}, {"return": "\"'example.com#ancho'\""}], "parsed_inputs": [[["url", "\"https://www.example.com/path/to/page\""]], [["url", "\"http://example.com\""]], [["url", "\"www.example.com\""]], [["url", "\"example.com\""]], [["url", "\"https://example.com\""]], [["url", "\"ftp://example.com\""]], [["url", "\"\""]], [["url", "\"https://www.example.com\""]], [["url", "\"http://example.co.uk\""]], [["url", "\"www.subdomain.example.com\""]]], "exec_code": "def extract_domain(url: str) ->str:\n    if not url:\n        return ''\n    start = url.find('//')\n    if start == -1:\n        start = -2\n    end = url.find('/', start + 2)\n    if end == -1:\n        end = len(url) - 1\n    return url[start + 2:end]\n", "output": "The function is:\n\n```python\ndef extract_domain(url: str) ->str:\n    if not url:\n        return ''\n    start = url.find('//')\n    if start == -1:\n        start = -2\n    end = url.find('/', start + 2)\n    if end == -1:\n        end = len(url) - 1\n    return url[start + 2:end]\n\n```", "choosed_example_idx": [5, 1, 8, 0, 3, 4], "prompt": "Function: extract_domain\n\nWrite a function that generates the output from the input.\n\nInput: dict(url=\"ftp://example.com\"), Output: \"'example.co'\"\nInput: dict(url=\"http://example.com\"), Output: \"'example.co'\"\nInput: dict(url=\"http://example.co.uk\"), Output: \"'example.co.u'\"\nInput: dict(url=\"https://www.example.com/path/to/page\"), Output: \"'www.example.com'\"\nInput: dict(url=\"example.com\"), Output: \"'example.co'\"\nInput: dict(url=\"https://example.com\"), Output: \"'example.co'\"\n\n", "id": "9ec0cd4f1e83a027c08e3b7e071404443535d6ca_0"}
{"example_str": "examples = [\n    dict(string='是'),\n    dict(string='否'),\n    dict(string='maybe'),\n    dict(string='yes'),\n    dict(string='no'),\n    dict(string='true'),\n    dict(string='false'),\n    dict(string='1'),\n    dict(string='0'),\n    dict(string=''),\n]\nexamples += [\n    dict(string='是'),  # Expected output: 1\n    dict(string='否'),  # Expected output: 0\n    dict(string='yes'),  # Expected output: -1\n    dict(string='no'),  # Expected output: -1\n    dict(string='true'),  # Expected output: -1\n    dict(string='false'),  # Expected output: -1\n    dict(string=''),  # Expected output: -1\n    dict(string='可能'),  # Expected output: -1\n    dict(string='不是'),  # Expected output: -1\n    dict(string='certainly'),  # Expected output: -1\n]\nexamples += [\n    dict(string='是'),\n    dict(string='否'),\n    dict(string='yes'),\n    dict(string='no'),\n    dict(string='true'),\n    dict(string='false'),\n    dict(string='1'),\n    dict(string='0'),\n    dict(string='可能'),\n    dict(string='不是')\n]", "code": "def is_necessary(string):\n    if string == '是':\n        return 1\n    elif string == '否':\n        return 0\n    return -1\n", "func_name": "is_necessary", "exec_status": true, "example_inputs": ["\"{'string': '\\u662f'}\"", "\"{'string': '\\u5426'}\"", "\"{'string': 'maybe'}\"", "\"{'string': 'yes'}\"", "\"{'string': 'no'}\"", "\"{'string': 'true'}\"", "\"{'string': 'false'}\"", "\"{'string': '1'}\"", "\"{'string': '0'}\"", "\"{'string': ''}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"-1\""}, {"return": "\"-1\""}, {"return": "\"-1\""}, {"return": "\"-1\""}, {"return": "\"-1\""}, {"return": "\"-1\""}, {"return": "\"-1\""}, {"return": "\"-1\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"-1\""}, {"return": "\"-1\""}, {"return": "\"-1\""}, {"return": "\"-1\""}, {"return": "\"-1\""}, {"return": "\"-1\""}, {"return": "\"-1\""}, {"return": "\"-1\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"-1\""}, {"return": "\"-1\""}, {"return": "\"-1\""}, {"return": "\"-1\""}, {"return": "\"-1\""}, {"return": "\"-1\""}, {"return": "\"-1\""}, {"return": "\"-1\""}], "parsed_inputs": [[["string", "\"\\u662f\""]], [["string", "\"\\u5426\""]], [["string", "\"maybe\""]], [["string", "\"yes\""]], [["string", "\"no\""]], [["string", "\"true\""]], [["string", "\"false\""]], [["string", "\"1\""]], [["string", "\"0\""]], [["string", "\"\""]]], "exec_code": "def is_necessary(string):\n    if string == '是':\n        return 1\n    elif string == '否':\n        return 0\n    return -1\n", "output": "The function is:\n\n```python\ndef is_necessary(string):\n    if string == '是':\n        return 1\n    elif string == '否':\n        return 0\n    return -1\n\n```", "choosed_example_idx": [5, 9, 6, 3, 7], "prompt": "Input: dict(string=\"true\"), Output: \"-1\"\nInput: dict(string=\"\"), Output: \"-1\"\nInput: dict(string=\"false\"), Output: \"-1\"\nInput: dict(string=\"yes\"), Output: \"-1\"\nInput: dict(string=\"1\"), Output: \"-1\"\n\nWrite a function that generates the output from the input.\n\n\nFunction: is_necessary\n", "id": "ea02de820e3bd58461317c982a5a39b42058ecc2_0"}
{"example_str": "examples = [\n    dict(n=0),\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n]\nexamples += [\n    dict(n=0),   # Factorial of 0 is 1\n    dict(n=1),   # Factorial of 1 is 1\n    dict(n=2),   # Factorial of 2 is 2\n    dict(n=3),   # Factorial of 3 is 6\n    dict(n=4),   # Factorial of 4 is 24\n    dict(n=5),   # Factorial of 5 is 120\n    dict(n=6),   # Factorial of 6 is 720\n    dict(n=7),   # Factorial of 7 is 5040\n    dict(n=8),   # Factorial of 8 is 40320\n    dict(n=9)    # Factorial of 9 is 362880\n]\nexamples += [\n    dict(n=0),\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9)\n]", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n", "func_name": "factorial", "exec_status": true, "example_inputs": ["\"{'n': 0}\"", "\"{'n': 1}\"", "\"{'n': 2}\"", "\"{'n': 3}\"", "\"{'n': 4}\"", "\"{'n': 5}\"", "\"{'n': 6}\"", "\"{'n': 7}\"", "\"{'n': 8}\"", "\"{'n': 9}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"6\""}, {"return": "\"24\""}, {"return": "\"120\""}, {"return": "\"720\""}, {"return": "\"5040\""}, {"return": "\"40320\""}, {"return": "\"362880\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"6\""}, {"return": "\"24\""}, {"return": "\"120\""}, {"return": "\"720\""}, {"return": "\"5040\""}, {"return": "\"40320\""}, {"return": "\"362880\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"6\""}, {"return": "\"24\""}, {"return": "\"120\""}, {"return": "\"720\""}, {"return": "\"5040\""}, {"return": "\"40320\""}, {"return": "\"362880\""}], "parsed_inputs": [[["n", "0"]], [["n", "1"]], [["n", "2"]], [["n", "3"]], [["n", "4"]], [["n", "5"]], [["n", "6"]], [["n", "7"]], [["n", "8"]], [["n", "9"]]], "exec_code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n", "output": "The function is:\n\n```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n```", "choosed_example_idx": [9, 7, 8, 1, 3], "prompt": "Input: dict(n=9), Output: \"362880\"\nInput: dict(n=7), Output: \"5040\"\nInput: dict(n=8), Output: \"40320\"\nInput: dict(n=1), Output: \"1\"\nInput: dict(n=3), Output: \"6\"\n\n\nFunction: factorial\n\nWrite a function that generates the output from the input.\n", "id": "842c703a5922cdb228ab56fd6f7c6e86c97cb8e1_0"}
{"example_str": "examples = [\n    dict(keyInt=1),\n    dict(keyInt=2),\n    dict(keyInt=3),\n    dict(keyInt=4),\n    dict(keyInt=5),\n    dict(keyInt=10),\n    dict(keyInt=20),\n    dict(keyInt=30),\n    dict(keyInt=40),\n    dict(keyInt=50),\n]\nexamples += [\n    dict(keyInt=123),  # integer\n    dict(keyInt=456.789),  # float\n    dict(keyInt=\"Hello\"),  # string with ASCII characters\n    dict(keyInt=True),  # boolean True\n    dict(keyInt=False),  # boolean False\n    dict(keyInt=0),  # zero as an integer\n    dict(keyInt=-987),  # negative integer\n    dict(keyInt=3.14159),  # float (pi approximation)\n    dict(keyInt=\"\"),  # empty string\n    dict(keyInt=\"ASCII text 123\")  # string with numbers and spaces\n]\nexamples += [\n    dict(keyInt=123),\n    dict(keyInt=456),\n    dict(keyInt=789),\n    dict(keyInt=0),\n    dict(keyInt=-1),\n    dict(keyInt=1.234),\n    dict(keyInt=-56.78),\n    dict(keyInt='hello'),\n    dict(keyInt='123'),\n    dict(keyInt='special_chars_!@#')\n]", "code": "def keyCart(keyInt):\n    return u'{}'.format(keyInt).encode('ascii')\n", "func_name": "keyCart", "exec_status": true, "example_inputs": ["\"{'keyInt': 1}\"", "\"{'keyInt': 2}\"", "\"{'keyInt': 3}\"", "\"{'keyInt': 4}\"", "\"{'keyInt': 5}\"", "\"{'keyInt': 10}\"", "\"{'keyInt': 20}\"", "\"{'keyInt': 30}\"", "\"{'keyInt': 40}\"", "\"{'keyInt': 50}\""], "example_outputs": [{"return": "\"b'1'\""}, {"return": "\"b'2'\""}, {"return": "\"b'3'\""}, {"return": "\"b'4'\""}, {"return": "\"b'5'\""}, {"return": "\"b'10'\""}, {"return": "\"b'20'\""}, {"return": "\"b'30'\""}, {"return": "\"b'40'\""}, {"return": "\"b'50'\""}, {"return": "\"b'123'\""}, {"return": "\"b'456.789'\""}, {"return": "\"b'Hello'\""}, {"return": "\"b'True'\""}, {"return": "\"b'False'\""}, {"return": "\"b'0'\""}, {"return": "\"b'-987'\""}, {"return": "\"b'3.14159'\""}, {"return": "\"b''\""}, {"return": "\"b'ASCII text 123'\""}, {"return": "\"b'123'\""}, {"return": "\"b'456'\""}, {"return": "\"b'789'\""}, {"return": "\"b'0'\""}, {"return": "\"b'-1'\""}, {"return": "\"b'1.234'\""}, {"return": "\"b'-56.78'\""}, {"return": "\"b'hello'\""}, {"return": "\"b'123'\""}, {"return": "\"b'special_chars_!@#'\""}], "parsed_inputs": [[["keyInt", "1"]], [["keyInt", "2"]], [["keyInt", "3"]], [["keyInt", "4"]], [["keyInt", "5"]], [["keyInt", "10"]], [["keyInt", "20"]], [["keyInt", "30"]], [["keyInt", "40"]], [["keyInt", "50"]]], "exec_code": "def keyCart(keyInt):\n    return u'{}'.format(keyInt).encode('ascii')\n", "output": "The function is:\n\n```python\ndef keyCart(keyInt):\n    return u'{}'.format(keyInt).encode('ascii')\n\n```", "choosed_example_idx": [9, 4, 0, 6, 5, 3, 2, 8, 1, 7], "prompt": "Input: dict(keyInt=50), Output: \"b'50'\"\nInput: dict(keyInt=5), Output: \"b'5'\"\nInput: dict(keyInt=1), Output: \"b'1'\"\nInput: dict(keyInt=20), Output: \"b'20'\"\nInput: dict(keyInt=10), Output: \"b'10'\"\nInput: dict(keyInt=4), Output: \"b'4'\"\nInput: dict(keyInt=3), Output: \"b'3'\"\nInput: dict(keyInt=40), Output: \"b'40'\"\nInput: dict(keyInt=2), Output: \"b'2'\"\nInput: dict(keyInt=30), Output: \"b'30'\"\n\nFunction: keyCart\n\nWrite a function that generates the output from the input.\n", "id": "7777d4b6d4098d811806f66481682577f394c9b2_0"}
{"example_str": "examples = [\n    dict(from_number='+3038877689'),\n    dict(from_number='+6099024326'),\n    dict(from_number='+7038957477'),\n    dict(from_number='+1234567890'),\n    dict(from_number='+9876543210'),\n    dict(from_number='+1111111111'),\n    dict(from_number='+2222222222'),\n    dict(from_number='+3333333333'),\n    dict(from_number='+4444444444'),\n    dict(from_number='+5555555555'),\n]\nexamples += [\n    dict(from_number='+3038877689'),  # Known caller: Max\n    dict(from_number='+6099024326'),  # Known caller: El Capitan Forrest\n    dict(from_number='+7038957477'),  # Known caller: Queen Isabelle The Goof\n    dict(from_number='+1000000000'),  # Unknown caller\n    dict(from_number='+2000000000'),  # Unknown caller\n    dict(from_number='+3000000000'),  # Unknown caller\n    dict(from_number='+4000000000'),  # Unknown caller\n    dict(from_number='+5000000000'),  # Unknown caller\n    dict(from_number='+6000000000'),  # Unknown caller\n    dict(from_number='+7000000000')   # Unknown caller\n]\nexamples += [\n    dict(from_number='+3038877689'),  # Known caller: Max\n    dict(from_number='+6099024326'),  # Known caller: El Capitan Forrest\n    dict(from_number='+7038957477'),  # Known caller: Queen Isabelle The Goof\n    dict(from_number='+1000000000'),  # Unknown caller\n    dict(from_number='+2000000000'),  # Unknown caller\n    dict(from_number='+3000000000'),  # Unknown caller\n    dict(from_number='+4000000000'),  # Unknown caller\n    dict(from_number='+5000000000'),  # Unknown caller\n    dict(from_number='+6000000000'),  # Unknown caller\n    dict(from_number='+7000000000'),  # Unknown caller\n]", "code": "def greeting(from_number):\n    callers = {'+3038877689': 'Max', '+6099024326': 'El Capitan Forrest',\n        '+7038957477': 'Queen Isabelle The Goof'}\n    if from_number in callers:\n        name = callers[from_number]\n        message = 'Hi ' + name + '! \\n'\n    else:\n        message = \"Hi there!!! Don't tell anyone but you're my favorite member\"\n    return message\n", "func_name": "greeting", "exec_status": true, "example_inputs": ["\"{'from_number': '+3038877689'}\"", "\"{'from_number': '+6099024326'}\"", "\"{'from_number': '+7038957477'}\"", "\"{'from_number': '+1234567890'}\"", "\"{'from_number': '+9876543210'}\"", "\"{'from_number': '+1111111111'}\"", "\"{'from_number': '+2222222222'}\"", "\"{'from_number': '+3333333333'}\"", "\"{'from_number': '+4444444444'}\"", "\"{'from_number': '+5555555555'}\""], "example_outputs": [{"return": "\"'Hi Max! \\\\n'\""}, {"return": "\"'Hi El Capitan Forrest! \\\\n'\""}, {"return": "\"'Hi Queen Isabelle The Goof! \\\\n'\""}, {"return": "\"\\\"Hi there!!! Don't tell anyone but you're my favorite member\\\"\""}, {"return": "\"\\\"Hi there!!! Don't tell anyone but you're my favorite member\\\"\""}, {"return": "\"\\\"Hi there!!! Don't tell anyone but you're my favorite member\\\"\""}, {"return": "\"\\\"Hi there!!! Don't tell anyone but you're my favorite member\\\"\""}, {"return": "\"\\\"Hi there!!! Don't tell anyone but you're my favorite member\\\"\""}, {"return": "\"\\\"Hi there!!! Don't tell anyone but you're my favorite member\\\"\""}, {"return": "\"\\\"Hi there!!! Don't tell anyone but you're my favorite member\\\"\""}, {"return": "\"'Hi Max! \\\\n'\""}, {"return": "\"'Hi El Capitan Forrest! \\\\n'\""}, {"return": "\"'Hi Queen Isabelle The Goof! \\\\n'\""}, {"return": "\"\\\"Hi there!!! Don't tell anyone but you're my favorite member\\\"\""}, {"return": "\"\\\"Hi there!!! Don't tell anyone but you're my favorite member\\\"\""}, {"return": "\"\\\"Hi there!!! Don't tell anyone but you're my favorite member\\\"\""}, {"return": "\"\\\"Hi there!!! Don't tell anyone but you're my favorite member\\\"\""}, {"return": "\"\\\"Hi there!!! Don't tell anyone but you're my favorite member\\\"\""}, {"return": "\"\\\"Hi there!!! Don't tell anyone but you're my favorite member\\\"\""}, {"return": "\"\\\"Hi there!!! Don't tell anyone but you're my favorite member\\\"\""}, {"return": "\"'Hi Max! \\\\n'\""}, {"return": "\"'Hi El Capitan Forrest! \\\\n'\""}, {"return": "\"'Hi Queen Isabelle The Goof! \\\\n'\""}, {"return": "\"\\\"Hi there!!! Don't tell anyone but you're my favorite member\\\"\""}, {"return": "\"\\\"Hi there!!! Don't tell anyone but you're my favorite member\\\"\""}, {"return": "\"\\\"Hi there!!! Don't tell anyone but you're my favorite member\\\"\""}, {"return": "\"\\\"Hi there!!! Don't tell anyone but you're my favorite member\\\"\""}, {"return": "\"\\\"Hi there!!! Don't tell anyone but you're my favorite member\\\"\""}, {"return": "\"\\\"Hi there!!! Don't tell anyone but you're my favorite member\\\"\""}, {"return": "\"\\\"Hi there!!! Don't tell anyone but you're my favorite member\\\"\""}], "parsed_inputs": [[["from_number", "\"+3038877689\""]], [["from_number", "\"+6099024326\""]], [["from_number", "\"+7038957477\""]], [["from_number", "\"+1234567890\""]], [["from_number", "\"+9876543210\""]], [["from_number", "\"+1111111111\""]], [["from_number", "\"+2222222222\""]], [["from_number", "\"+3333333333\""]], [["from_number", "\"+4444444444\""]], [["from_number", "\"+5555555555\""]]], "exec_code": "def greeting(from_number):\n    callers = {'+3038877689': 'Max', '+6099024326': 'El Capitan Forrest',\n        '+7038957477': 'Queen Isabelle The Goof'}\n    if from_number in callers:\n        name = callers[from_number]\n        message = 'Hi ' + name + '! \\n'\n    else:\n        message = \"Hi there!!! Don't tell anyone but you're my favorite member\"\n    return message\n", "output": "The function is:\n\n```python\ndef greeting(from_number):\n    callers = {'+3038877689': 'Max', '+6099024326': 'El Capitan Forrest',\n        '+7038957477': 'Queen Isabelle The Goof'}\n    if from_number in callers:\n        name = callers[from_number]\n        message = 'Hi ' + name + '! \\n'\n    else:\n        message = \"Hi there!!! Don't tell anyone but you're my favorite member\"\n    return message\n\n```", "choosed_example_idx": [9, 2, 6, 4], "prompt": "Input: dict(from_number=\"+5555555555\"), Output: \"\\\"Hi there!!! Don't tell anyone but you're my favorite member\\\"\"\nInput: dict(from_number=\"+7038957477\"), Output: \"'Hi Queen Isabelle The Goof! \\\\n'\"\nInput: dict(from_number=\"+2222222222\"), Output: \"\\\"Hi there!!! Don't tell anyone but you're my favorite member\\\"\"\nInput: dict(from_number=\"+9876543210\"), Output: \"\\\"Hi there!!! Don't tell anyone but you're my favorite member\\\"\"\n\nWrite a function that generates the output from the input.\n\nFunction: greeting\n", "id": "e4bffa62f5e0ce2f22ba4a800ed50bdf3866167f_0"}
{"example_str": "examples = [\n    dict(s='aaabbbccc'),\n    dict(s='abcde'),\n    dict(s='aabbcc'),\n    dict(s=''),\n    dict(s='abcabcabc'),\n    dict(s='ababab'),\n    dict(s='aaa'),\n    dict(s='ab'),\n    dict(s='abcabc'),\n    dict(s='abcdabcd'),\n]\nexamples += [\n    dict(s=\"aabbccdd\"),\n    dict(s=\"aaaa\"),\n    dict(s=\"abcde\"),\n    dict(s=\"\"),\n    dict(s=\"aaabbbccc\"),\n    dict(s=\"a\"),\n    dict(s=\"aabbaa\"),\n    dict(s=\"xyzxyz\"),\n    dict(s=\"111222333\"),\n    dict(s=\"abababab\")\n]\nexamples += [\n    dict(s=\"aaabbc\"),\n    dict(s=\"ccccddddd\"),\n    dict(s=\"\"),\n    dict(s=\"aaaa\"),\n    dict(s=\"abcde\"),\n    dict(s=\"aabbccddeeff\"),\n    dict(s=\"zzzzz\"),\n    dict(s=\"112233\"),\n    dict(s=\"aabbaa\"),\n    dict(s=\"xxyyzzzz\")\n]", "code": "def seqcnt(s):\n    cnt = 1\n    ans = 0\n    bk = ''\n    for c in (s + ' '):\n        if bk == c:\n            cnt += 1\n        else:\n            ans += cnt // 2\n            cnt = 1\n        bk = c\n    return ans\n", "func_name": "seqcnt", "exec_status": true, "example_inputs": ["\"{'s': 'aaabbbccc'}\"", "\"{'s': 'abcde'}\"", "\"{'s': 'aabbcc'}\"", "\"{'s': ''}\"", "\"{'s': 'abcabcabc'}\"", "\"{'s': 'ababab'}\"", "\"{'s': 'aaa'}\"", "\"{'s': 'ab'}\"", "\"{'s': 'abcabc'}\"", "\"{'s': 'abcdabcd'}\""], "example_outputs": [{"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"4\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"4\""}, {"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"6\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"4\""}], "parsed_inputs": [[["s", "\"aaabbbccc\""]], [["s", "\"abcde\""]], [["s", "\"aabbcc\""]], [["s", "\"\""]], [["s", "\"abcabcabc\""]], [["s", "\"ababab\""]], [["s", "\"aaa\""]], [["s", "\"ab\""]], [["s", "\"abcabc\""]], [["s", "\"abcdabcd\""]]], "exec_code": "def seqcnt(s):\n    cnt = 1\n    ans = 0\n    bk = ''\n    for c in (s + ' '):\n        if bk == c:\n            cnt += 1\n        else:\n            ans += cnt // 2\n            cnt = 1\n        bk = c\n    return ans\n", "output": "The function is:\n\n```python\ndef seqcnt(s):\n    cnt = 1\n    ans = 0\n    bk = ''\n    for c in (s + ' '):\n        if bk == c:\n            cnt += 1\n        else:\n            ans += cnt // 2\n            cnt = 1\n        bk = c\n    return ans\n\n```", "choosed_example_idx": [9, 1, 2, 7], "prompt": "Input: dict(s=\"abcdabcd\"), Output: \"0\"\nInput: dict(s=\"abcde\"), Output: \"0\"\nInput: dict(s=\"aabbcc\"), Output: \"3\"\nInput: dict(s=\"ab\"), Output: \"0\"\n\n\nWrite a function that generates the output from the input.\nFunction: seqcnt\n\n\n", "id": "6e58f5e4f68782c78de583514bbc95a92f17fa7e_0"}
{"example_str": "examples = [\n    dict(file_map=\"abcdefghabcdefghabcdefgh\"),\n    dict(file_map=\"abcdefghijklmnopqrstuvwxyz\"),\n    dict(file_map=\"abcdefghabcdefghabcdefghabc\"),\n    dict(file_map=\"abcdefghabcdefghabcdefghabcd\"),\n    dict(file_map=\"abcdefghijklmnopqrstuvwxy\"),\n    dict(file_map=\"abcdefghabcdefghabcdefghabcdefgh\"),\n    dict(file_map=\"abcdefghabcdefghabcdefghabcdefghabc\"),\n    dict(file_map=\"abcdefghabcdefghabcdefghabcdefghabcd\"),\n    dict(file_map=\"abcdefghabcdefghabcdefghabcdefghabcdefgh\"),\n    dict(file_map=\"abcdefghabcdefghabcdefghabcdefghabcdefghabc\"),\n]\nexamples += [\n    dict(file_map=\"abcdefghabcdefghabcdefghabcdefgh\"),\n    dict(file_map=\"12345678123456781234567812345678\"),\n    dict(file_map=\"abcabcabcabcabcabcabcabcabcabcabc\"),\n    dict(file_map=\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"),\n    dict(file_map=\"abcdefgh12345678abcdefgh12345678\"),\n    dict(file_map=\"87654321876543218765432187654321\"),\n    dict(file_map=\"xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz\"),\n    dict(file_map=\"pattern1pattern2pattern1pattern2\"),\n    dict(file_map=\"11112222333344441111222233334444\"),\n    dict(file_map=\"abcdabcdabcdabcdabcdabcdabcdabcd\")\n]\nexamples += [\n    dict(file_map=\"AAAAAAAAAAAAAAAAAAAAAAAA\"),  # All segments are the same\n    dict(file_map=\"AAAABBBBAAAABBBBAAAABBBB\"),  # Two alternating patterns\n    dict(file_map=\"ABCDABCDABCDABCDABCDABCD\"),  # Repeating pattern every 4 characters, but checked in 8-char segments\n    dict(file_map=\"ABCDEFGHABCDEFGHABCDEFGH\"),  # Repeating pattern exactly matching the 8-char segments\n    dict(file_map=\"ABCDEFGHBCDEFGHICDEFGHIJ\"),  # No repeating pattern in the first 24 characters\n    dict(file_map=\"123456781234567812345678\"),  # Numeric repeating pattern\n    dict(file_map=\"123456789012345678901234\"),  # No repeating pattern, numbers increasing\n    dict(file_map=\"abcdefghabcdefghabcdefgh\"),  # Lowercase repeating pattern\n    dict(file_map=\"abcdefghijkabcdefghijkab\"),  # No repeating pattern, 11-char pattern checked in 8-char segments\n    dict(file_map=\"ZZZZZZZZYYYYYYYYZZZZZZZZ\")   # Two different repeating patterns\n]", "code": "def pattern_id(file_map):\n    count = 0\n    pattern = file_map[0:8]\n    pattern2 = file_map[8:16]\n    pattern3 = file_map[16:24]\n    if pattern == pattern2:\n        l = len(pattern)\n        for i in range(0, len(file_map), l):\n            if pattern == file_map[i:i + 8]:\n                count += 8\n        return count\n    elif pattern2 == pattern3:\n        l = len(pattern2)\n        for i in range(8, len(file_map) - 8, l):\n            if pattern2 == file_map[i:i + 8]:\n                count += 8\n        return count\n    else:\n        return count\n", "func_name": "pattern_id", "exec_status": true, "example_inputs": ["\"{'file_map': 'abcdefghabcdefghabcdefgh'}\"", "\"{'file_map': 'abcdefghijklmnopqrstuvwxyz'}\"", "\"{'file_map': 'abcdefghabcdefghabcdefghabc'}\"", "\"{'file_map': 'abcdefghabcdefghabcdefghabcd'}\"", "\"{'file_map': 'abcdefghijklmnopqrstuvwxy'}\"", "\"{'file_map': 'abcdefghabcdefghabcdefghabcdefgh'}\"", "\"{'file_map': 'abcdefghabcdefghabcdefghabcdefghabc'}\"", "\"{'file_map': 'abcdefghabcdefghabcdefghabcdefghabcd'}\"", "\"{'file_map': 'abcdefghabcdefghabcdefghabcdefghabcdefgh'}\"", "\"{'file_map': 'abcdefghabcdefghabcdefghabcdefghabcdefghabc'}\""], "example_outputs": [{"return": "\"24\""}, {"return": "\"0\""}, {"return": "\"24\""}, {"return": "\"24\""}, {"return": "\"0\""}, {"return": "\"32\""}, {"return": "\"32\""}, {"return": "\"32\""}, {"return": "\"40\""}, {"return": "\"40\""}, {"return": "\"32\""}, {"return": "\"32\""}, {"return": "\"0\""}, {"return": "\"32\""}, {"return": "\"0\""}, {"return": "\"32\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"32\""}, {"return": "\"24\""}, {"return": "\"24\""}, {"return": "\"24\""}, {"return": "\"24\""}, {"return": "\"0\""}, {"return": "\"24\""}, {"return": "\"0\""}, {"return": "\"24\""}, {"return": "\"0\""}, {"return": "\"0\""}], "parsed_inputs": [[["file_map", "\"abcdefghabcdefghabcdefgh\""]], [["file_map", "\"abcdefghijklmnopqrstuvwxyz\""]], [["file_map", "\"abcdefghabcdefghabcdefghabc\""]], [["file_map", "\"abcdefghabcdefghabcdefghabcd\""]], [["file_map", "\"abcdefghijklmnopqrstuvwxy\""]], [["file_map", "\"abcdefghabcdefghabcdefghabcdefgh\""]], [["file_map", "\"abcdefghabcdefghabcdefghabcdefghabc\""]], [["file_map", "\"abcdefghabcdefghabcdefghabcdefghabcd\""]], [["file_map", "\"abcdefghabcdefghabcdefghabcdefghabcdefgh\""]], [["file_map", "\"abcdefghabcdefghabcdefghabcdefghabcdefghabc\""]]], "exec_code": "def pattern_id(file_map):\n    count = 0\n    pattern = file_map[0:8]\n    pattern2 = file_map[8:16]\n    pattern3 = file_map[16:24]\n    if pattern == pattern2:\n        l = len(pattern)\n        for i in range(0, len(file_map), l):\n            if pattern == file_map[i:i + 8]:\n                count += 8\n        return count\n    elif pattern2 == pattern3:\n        l = len(pattern2)\n        for i in range(8, len(file_map) - 8, l):\n            if pattern2 == file_map[i:i + 8]:\n                count += 8\n        return count\n    else:\n        return count\n", "output": "The function is:\n\n```python\ndef pattern_id(file_map):\n    count = 0\n    pattern = file_map[0:8]\n    pattern2 = file_map[8:16]\n    pattern3 = file_map[16:24]\n    if pattern == pattern2:\n        l = len(pattern)\n        for i in range(0, len(file_map), l):\n            if pattern == file_map[i:i + 8]:\n                count += 8\n        return count\n    elif pattern2 == pattern3:\n        l = len(pattern2)\n        for i in range(8, len(file_map) - 8, l):\n            if pattern2 == file_map[i:i + 8]:\n                count += 8\n        return count\n    else:\n        return count\n\n```", "choosed_example_idx": [9, 4, 1, 6, 3], "prompt": "Function: pattern_id\n\nWrite a function that generates the output from the input.\n\nInput: dict(file_map=\"abcdefghabcdefghabcdefghabcdefghabcdefghabc\"), Output: \"40\"\nInput: dict(file_map=\"abcdefghijklmnopqrstuvwxy\"), Output: \"0\"\nInput: dict(file_map=\"abcdefghijklmnopqrstuvwxyz\"), Output: \"0\"\nInput: dict(file_map=\"abcdefghabcdefghabcdefghabcdefghabc\"), Output: \"32\"\nInput: dict(file_map=\"abcdefghabcdefghabcdefghabcd\"), Output: \"24\"\n\n\n", "id": "b19f3b5bf6d5ad094b42b4adf33502cf88a9dd2a_0"}
{"example_str": "examples = [\n    dict(pv=10),\n    dict(pv=0),\n    dict(pv=-5),\n    dict(pv=3.14),\n    dict(pv=-0.5),\n    dict(pv=100),\n    dict(pv=-100),\n    dict(pv=0.0),\n    dict(pv=1),\n    dict(pv=-1),\n]\nexamples += [\n    dict(pv=10),             # Example with positive integer\n    dict(pv=-5),             # Example with negative integer\n    dict(pv=0),              # Example with zero\n    dict(pv=3.14),           # Example with positive float\n    dict(pv=-2.718),         # Example with negative float\n    dict(pv=\"0\"),            # Example with a string that is \"0\" (unconventional)\n    dict(pv=\"hello\"),        # Example with a string (unconventional)\n    dict(pv=[]),             # Example with an empty list (unconventional)\n    dict(pv=[1, 2]),         # Example with a list containing elements (unconventional)\n    dict(pv=None)            # Example with None (unconventional and would raise an error)\n]\nexamples += [\n    dict(pv=0),\n    dict(pv=1),\n    dict(pv=-1),\n    dict(pv=100),\n    dict(pv=-100),\n    dict(pv=0.5),\n    dict(pv=-0.5),\n    dict(pv=999),\n    dict(pv=-999),\n    dict(pv=0.0)\n]", "code": "def a(pv):\n    if pv != 0:\n        return pv\n    else:\n        return 0\n", "func_name": "a", "exec_status": true, "example_inputs": ["\"{'pv': 10}\"", "\"{'pv': 0}\"", "\"{'pv': -5}\"", "\"{'pv': 3.14}\"", "\"{'pv': -0.5}\"", "\"{'pv': 100}\"", "\"{'pv': -100}\"", "\"{'pv': 0.0}\"", "\"{'pv': 1}\"", "\"{'pv': -1}\""], "example_outputs": [{"return": "\"10\""}, {"return": "\"0\""}, {"return": "\"-5\""}, {"return": "\"3.14\""}, {"return": "\"-0.5\""}, {"return": "\"100\""}, {"return": "\"-100\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"-1\""}, {"return": "\"10\""}, {"return": "\"-5\""}, {"return": "\"0\""}, {"return": "\"3.14\""}, {"return": "\"-2.718\""}, {"return": "\"'0'\""}, {"return": "\"'hello'\""}, {"return": "\"[]\""}, {"return": "\"[1, 2]\""}, {"return": "\"None\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"-1\""}, {"return": "\"100\""}, {"return": "\"-100\""}, {"return": "\"0.5\""}, {"return": "\"-0.5\""}, {"return": "\"999\""}, {"return": "\"-999\""}, {"return": "\"0\""}], "parsed_inputs": [[["pv", "10"]], [["pv", "0"]], [["pv", "-5"]], [["pv", "3.14"]], [["pv", "-0.5"]], [["pv", "100"]], [["pv", "-100"]], [["pv", "0.0"]], [["pv", "1"]], [["pv", "-1"]]], "exec_code": "def a(pv):\n    if pv != 0:\n        return pv\n    else:\n        return 0\n", "output": "The function is:\n\n```python\ndef a(pv):\n    if pv != 0:\n        return pv\n    else:\n        return 0\n\n```", "choosed_example_idx": [2, 5, 9, 1, 7, 8], "prompt": "Function: a\nWrite a function that generates the output from the input.\nInput: dict(pv=-5), Output: \"-5\"\nInput: dict(pv=100), Output: \"100\"\nInput: dict(pv=-1), Output: \"-1\"\nInput: dict(pv=0), Output: \"0\"\nInput: dict(pv=0.0), Output: \"0\"\nInput: dict(pv=1), Output: \"1\"\n\n\n\n", "id": "c60a9acb6a8c369e17c63840c4b7fcc35ccb3286_0"}
{"example_str": "examples = [\n    dict(line=\"hello world\"),\n    dict(line=\"   this is a test   \"),\n    dict(line=\"1234567890\"),\n    dict(line=\"abcdefghijklmnopqrstuvwxyz\"),\n    dict(line=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"),\n    dict(line=\"!@#$%^&*()_+-=\"),\n    dict(line=\"   \"),\n    dict(line=\"a\"),\n    dict(line=\"\"),\n    dict(line=\"This is a test string.\"),\n]\nexamples += [\n    dict(line=\"Hello, World!\"),\n    dict(line=\"   leading space\"),\n    dict(line=\"trailing space   \"),\n    dict(line=\"\"),\n    dict(line=\"12345\"),\n    dict(line=\"newline\\n\"),\n    dict(line=\"tab\\tcharacter\"),\n    dict(line=\"multiple   spaces\"),\n    dict(line=\"special@#&*chars\"),\n    dict(line=\"UPPER and lower\")\n]\nexamples += [\n    dict(line=\"hello\"),\n    dict(line=\" world \"),\n    dict(line=\"123\"),\n    dict(line=\"!@#$%^&*()\"),\n    dict(line=\"Line with spaces\"),\n    dict(line=\"\\tTabbed line\"),\n    dict(line=\"\\nNewline\"),\n    dict(line=\"\"),\n    dict(line=\"With, commas, and, periods.\"),\n    dict(line=\"Mixed123Numbers\")\n]", "code": "def parse_test(line):\n    return list(line.strip())\n", "func_name": "parse_test", "exec_status": true, "example_inputs": ["\"{'line': 'hello world'}\"", "\"{'line': '   this is a test   '}\"", "\"{'line': '1234567890'}\"", "\"{'line': 'abcdefghijklmnopqrstuvwxyz'}\"", "\"{'line': 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'}\"", "\"{'line': '!@#$%^&*()_+-='}\"", "\"{'line': '   '}\"", "\"{'line': 'a'}\"", "\"{'line': ''}\"", "\"{'line': 'This is a test string.'}\""], "example_outputs": [{"return": "\"['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']\""}, {"return": "\"['t', 'h', 'i', 's', ' ', 'i', 's', ' ', 'a', ' ', 't', 'e', 's', 't']\""}, {"return": "\"['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']\""}, {"return": "\"['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\""}, {"return": "\"['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\""}, {"return": "\"['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', '-', '=']\""}, {"return": "\"[]\""}, {"return": "\"['a']\""}, {"return": "\"[]\""}, {"return": "\"['T', 'h', 'i', 's', ' ', 'i', 's', ' ', 'a', ' ', 't', 'e', 's', 't', ' ', 's', 't', 'r', 'i', 'n', 'g', '.']\""}, {"return": "\"['H', 'e', 'l', 'l', 'o', ',', ' ', 'W', 'o', 'r', 'l', 'd', '!']\""}, {"return": "\"['l', 'e', 'a', 'd', 'i', 'n', 'g', ' ', 's', 'p', 'a', 'c', 'e']\""}, {"return": "\"['t', 'r', 'a', 'i', 'l', 'i', 'n', 'g', ' ', 's', 'p', 'a', 'c', 'e']\""}, {"return": "\"[]\""}, {"return": "\"['1', '2', '3', '4', '5']\""}, {"return": "\"['n', 'e', 'w', 'l', 'i', 'n', 'e']\""}, {"return": "\"['t', 'a', 'b', '\\\\t', 'c', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r']\""}, {"return": "\"['m', 'u', 'l', 't', 'i', 'p', 'l', 'e', ' ', ' ', ' ', 's', 'p', 'a', 'c', 'e', 's']\""}, {"return": "\"['s', 'p', 'e', 'c', 'i', 'a', 'l', '@', '#', '&', '*', 'c', 'h', 'a', 'r', 's']\""}, {"return": "\"['U', 'P', 'P', 'E', 'R', ' ', 'a', 'n', 'd', ' ', 'l', 'o', 'w', 'e', 'r']\""}, {"return": "\"['h', 'e', 'l', 'l', 'o']\""}, {"return": "\"['w', 'o', 'r', 'l', 'd']\""}, {"return": "\"['1', '2', '3']\""}, {"return": "\"['!', '@', '#', '$', '%', '^', '&', '*', '(', ')']\""}, {"return": "\"['L', 'i', 'n', 'e', ' ', 'w', 'i', 't', 'h', ' ', 's', 'p', 'a', 'c', 'e', 's']\""}, {"return": "\"['T', 'a', 'b', 'b', 'e', 'd', ' ', 'l', 'i', 'n', 'e']\""}, {"return": "\"['N', 'e', 'w', 'l', 'i', 'n', 'e']\""}, {"return": "\"[]\""}, {"return": "\"['W', 'i', 't', 'h', ',', ' ', 'c', 'o', 'm', 'm', 'a', 's', ',', ' ', 'a', 'n', 'd', ',', ' ', 'p', 'e', 'r', 'i', 'o', 'd', 's', '.']\""}, {"return": "\"['M', 'i', 'x', 'e', 'd', '1', '2', '3', 'N', 'u', 'm', 'b', 'e', 'r', 's']\""}], "parsed_inputs": [[["line", "\"hello world\""]], [["line", "\"   this is a test   \""]], [["line", "\"1234567890\""]], [["line", "\"abcdefghijklmnopqrstuvwxyz\""]], [["line", "\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\""]], [["line", "\"!@#$%^&*()_+-=\""]], [["line", "\"   \""]], [["line", "\"a\""]], [["line", "\"\""]], [["line", "\"This is a test string.\""]]], "exec_code": "def parse_test(line):\n    return list(line.strip())\n", "output": "The function is:\n\n```python\ndef parse_test(line):\n    return list(line.strip())\n\n```", "choosed_example_idx": [7, 4, 2, 0, 5], "prompt": "Write a function that generates the output from the input.\n\nFunction: parse_test\nInput: dict(line=\"a\"), Output: \"['a']\"\nInput: dict(line=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"), Output: \"['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\"\nInput: dict(line=\"1234567890\"), Output: \"['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']\"\nInput: dict(line=\"hello world\"), Output: \"['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']\"\nInput: dict(line=\"!@#$%^&*()_+-=\"), Output: \"['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', '-', '=']\"\n\n", "id": "da54bc2f72bf2dc62c8b111fa0b6d5c99bce37ff_0"}
{"example_str": "examples = [\n    dict(english_text='Hello'),\n    dict(english_text='How are you?'),\n    dict(english_text='I love Python'),\n    dict(english_text='This is a test'),\n    dict(english_text=''),\n    dict(english_text=None),\n    dict(english_text='Good morning'),\n    dict(english_text='What is your name?'),\n    dict(english_text='I am happy'),\n    dict(english_text='This is a sample text'),\n]", "code": "def english_to_french(english_text):\n    \"\"\"\n    this function is translate english to french\n    \"\"\"\n    if english_text is None or len(english_text) <= 0:\n        return ''\n    translation = dict(language_translator.translate(text=english_text,\n        model_id='en-fr').get_result())\n    return translation['translations'][0]['translation']\n", "func_name": "english_to_french", "exec_status": true, "example_inputs": ["\"{'english_text': 'Hello'}\"", "\"{'english_text': 'How are you?'}\"", "\"{'english_text': 'I love Python'}\"", "\"{'english_text': 'This is a test'}\"", "\"{'english_text': ''}\"", "\"{'english_text': None}\"", "\"{'english_text': 'Good morning'}\"", "\"{'english_text': 'What is your name?'}\"", "\"{'english_text': 'I am happy'}\"", "\"{'english_text': 'This is a sample text'}\""], "example_outputs": [{"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'language_translator' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'language_translator' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'language_translator' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'language_translator' is not defined\""}, {"trace": "[\"{'english_text': ''}\", \"Line 4->    if english_text is None or len(english_text) <= 0:\", \"Line 5->        return ''\"]", "return": "\"''\""}, {"trace": "[\"{'english_text': None}\", \"Line 4->    if english_text is None or len(english_text) <= 0:\", \"Line 5->        return ''\"]", "return": "\"''\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'language_translator' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'language_translator' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'language_translator' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'language_translator' is not defined\""}], "parsed_inputs": [[["english_text", "\"Hello\""]], [["english_text", "\"How are you?\""]], [["english_text", "\"I love Python\""]], [["english_text", "\"This is a test\""]], [["english_text", "\"\""]], [["english_text", "None"]], [["english_text", "\"Good morning\""]], [["english_text", "\"What is your name?\""]], [["english_text", "\"I am happy\""]], [["english_text", "\"This is a sample text\""]]], "exec_code": "def english_to_french(english_text):\n    \"\"\"\n    this function is translate english to french\n    \"\"\"\n    if english_text is None or len(english_text) <= 0:\n        return ''\n    translation = dict(language_translator.translate(text=english_text,\n        model_id='en-fr').get_result())\n    return translation['translations'][0]['translation']\n", "output": "The function is:\n\n```python\ndef english_to_french(english_text):\n    \"\"\"\n    this function is translate english to french\n    \"\"\"\n    if english_text is None or len(english_text) <= 0:\n        return ''\n    translation = dict(language_translator.translate(text=english_text,\n        model_id='en-fr').get_result())\n    return translation['translations'][0]['translation']\n\n```", "choosed_example_idx": [3, 6, 4, 8, 0, 7, 9, 5, 1], "prompt": "Function: english_to_french\nInput: dict(english_text=\"This is a test\"), Output: \"<class 'NameError'>: name 'language_translator' is not defined\"\nInput: dict(english_text=\"Good morning\"), Output: \"<class 'NameError'>: name 'language_translator' is not defined\"\nInput: dict(english_text=\"\"), Output: \"''\"\nInput: dict(english_text=\"I am happy\"), Output: \"<class 'NameError'>: name 'language_translator' is not defined\"\nInput: dict(english_text=\"Hello\"), Output: \"<class 'NameError'>: name 'language_translator' is not defined\"\nInput: dict(english_text=\"What is your name?\"), Output: \"<class 'NameError'>: name 'language_translator' is not defined\"\nInput: dict(english_text=\"This is a sample text\"), Output: \"<class 'NameError'>: name 'language_translator' is not defined\"\nInput: dict(english_text=None), Output: \"''\"\nInput: dict(english_text=\"How are you?\"), Output: \"<class 'NameError'>: name 'language_translator' is not defined\"\n\n\nWrite a function that generates the output from the input.\n", "id": "cf6c46c1cb4d848174f8a7dd0a303e411d35fbcc_0"}
{"example_str": "examples = [\n    dict(conf='config.txt'),\n    dict(conf='/path/to/config.ini'),\n    dict(conf='C:\\\\config.cfg'),\n    dict(conf='settings.properties'),\n    dict(conf='params.txt'),\n    dict(conf='/etc/app/config'),\n    dict(conf='~/.app/config'),\n    dict(conf='./local.cfg'),\n    dict(conf='../config.txt'),\n    dict(conf='/usr/local/etc/config.ini')\n]\nexamples += [\n    {\"conf\": \"config.txt\"},  # Example 1: A typical file name\n    {\"conf\": \"/path/to/config.txt\"},  # Example 2: A file path in Unix/Linux format\n    {\"conf\": \"C:\\\\path\\\\to\\\\config.txt\"},  # Example 3: A file path in Windows format\n    {\"conf\": \"empty.txt\"},  # Example 4: A file that is empty\n    {\"conf\": \"comments_only.txt\"},  # Example 5: A file with only comments\n    {\"conf\": \"no_equals.txt\"},  # Example 6: A file where no line contains '='\n    {\"conf\": \"invalid_path.txt\"},  # Example 7: A non-existent file path\n    {\"conf\": \"binary_file.bin\"},  # Example 8: A binary file (not a text file)\n    {\"conf\": \"permissions_issue.txt\"},  # Example 9: A file with no read permissions\n    {\"conf\": \"config_with_quotes.txt\"}  # Example 10: A file where values are enclosed in quotes\n]\nexamples += [\n    dict(conf=\"config1.txt\"),\n    dict(conf=\"config2.txt\"),\n    dict(conf=\"path/to/config3.txt\"),\n    dict(conf=\"another/path/config4.txt\"),\n    dict(conf=\"empty_config.txt\"),\n    dict(conf=\"config_with_comments.txt\"),\n    dict(conf=\"config_with_special_chars.txt\"),\n    dict(conf=\"config_with_no_values.txt\"),\n    dict(conf=\"config_with_only_comments.txt\"),\n    dict(conf=\"deeply/nested/path/config10.txt\")\n]", "code": "def loadConfig(conf):\n    dict = {}\n    try:\n        for line in file(conf):\n            if line != '' and not line.startswith('#') and '=' in line:\n                key, value = line.split('=', 1)\n                key = key.strip()\n                value = value.strip()\n                if value.startswith(\"'\") or value.startswith('\"'):\n                    value = value[1:-1]\n                dict[key] = value\n    except:\n        pass\n    return dict\n", "func_name": "loadConfig", "exec_status": true, "example_inputs": ["\"{'conf': 'config.txt'}\"", "\"{'conf': '/path/to/config.ini'}\"", "\"{'conf': 'C:\\\\\\\\config.cfg'}\"", "\"{'conf': 'settings.properties'}\"", "\"{'conf': 'params.txt'}\"", "\"{'conf': '/etc/app/config'}\"", "\"{'conf': '~/.app/config'}\"", "\"{'conf': './local.cfg'}\"", "\"{'conf': '../config.txt'}\"", "\"{'conf': '/usr/local/etc/config.ini'}\""], "example_outputs": [{"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}], "parsed_inputs": [[["conf", "\"config.txt\""]], [["conf", "\"/path/to/config.ini\""]], [["conf", "\"C:\\\\config.cfg\""]], [["conf", "\"settings.properties\""]], [["conf", "\"params.txt\""]], [["conf", "\"/etc/app/config\""]], [["conf", "\"~/.app/config\""]], [["conf", "\"./local.cfg\""]], [["conf", "\"../config.txt\""]], [["conf", "\"/usr/local/etc/config.ini\""]]], "exec_code": "def loadConfig(conf):\n    dict = {}\n    try:\n        for line in file(conf):\n            if line != '' and not line.startswith('#') and '=' in line:\n                key, value = line.split('=', 1)\n                key = key.strip()\n                value = value.strip()\n                if value.startswith(\"'\") or value.startswith('\"'):\n                    value = value[1:-1]\n                dict[key] = value\n    except:\n        pass\n    return dict\n", "output": "The function is:\n\n```python\ndef loadConfig(conf):\n    dict = {}\n    try:\n        for line in file(conf):\n            if line != '' and not line.startswith('#') and '=' in line:\n                key, value = line.split('=', 1)\n                key = key.strip()\n                value = value.strip()\n                if value.startswith(\"'\") or value.startswith('\"'):\n                    value = value[1:-1]\n                dict[key] = value\n    except:\n        pass\n    return dict\n\n```", "choosed_example_idx": [9, 8, 0, 1, 3, 7, 5], "prompt": "Function: loadConfig\nWrite a function that generates the output from the input.\nInput: dict(conf=\"/usr/local/etc/config.ini\"), Output: \"{}\"\nInput: dict(conf=\"../config.txt\"), Output: \"{}\"\nInput: dict(conf=\"config.txt\"), Output: \"{}\"\nInput: dict(conf=\"/path/to/config.ini\"), Output: \"{}\"\nInput: dict(conf=\"settings.properties\"), Output: \"{}\"\nInput: dict(conf=\"./local.cfg\"), Output: \"{}\"\nInput: dict(conf=\"/etc/app/config\"), Output: \"{}\"\n\n", "id": "6a742c9c0899054709c26ef0e0d5df43ddeb3410_0"}
{"example_str": "examples = [\n    dict(typepokemon=\"Fire\"),\n    dict(typepokemon=\"WaterType\"),\n    dict(typepokemon=\"Electric\"),\n    dict(typepokemon=\"GrassType\"),\n    dict(typepokemon=\"IceFairy\"),\n    dict(typepokemon=\"Normal\"),\n    dict(typepokemon=\"PoisonType\"),\n    dict(typepokemon=\"GroundRock\"),\n    dict(typepokemon=\"FlyingDragon\"),\n    dict(typepokemon=\"PsychicFairyType\"),\n]\nexamples += [\n    dict(typepokemon=\"FireWater\"),\n    dict(typepokemon=\"GrassPoison\"),\n    dict(typepokemon=\"Electric\"),\n    dict(typepokemon=\"WaterIce\"),\n    dict(typepokemon=\"DragonFlying\"),\n    dict(typepokemon=\"GroundRock\"),\n    dict(typepokemon=\"BugGrass\"),\n    dict(typepokemon=\"Normal\"),\n    dict(typepokemon=\"PsychicFairy\"),\n    dict(typepokemon=\"IcePsychic\")\n]\nexamples += [\n    dict(typepokemon=\"Pikachu\"),\n    dict(typepokemon=\"Charmander\"),\n    dict(typepokemon=\"WaterStone\"),\n    dict(typepokemon=\"FireFang\"),\n    dict(typepokemon=\"ElectricMouse\"),\n    dict(typepokemon=\"GrassKnot\"),\n    dict(typepokemon=\"RockSlide\"),\n    dict(typepokemon=\"IceBeam\"),\n    dict(typepokemon=\"ThunderPunch\"),\n    dict(typepokemon=\"DragonTail\")\n]", "code": "def separatetype(typepokemon):\n    separer = False\n    tab_type = list(typepokemon)\n    for lettre in tab_type[-(len(tab_type) - 1):]:\n        if lettre.isupper():\n            separer = True\n            break\n    if separer:\n        for lettre in enumerate(tab_type[-(len(tab_type) - 1):]):\n            caractere = lettre[1]\n            index = lettre[0]\n            if caractere.isupper():\n                tab_type[index + 1] = ' ' + caractere\n        typepokemon = ''.join(tab_type)\n    return typepokemon\n", "func_name": "separatetype", "exec_status": true, "example_inputs": ["\"{'typepokemon': 'Fire'}\"", "\"{'typepokemon': 'WaterType'}\"", "\"{'typepokemon': 'Electric'}\"", "\"{'typepokemon': 'GrassType'}\"", "\"{'typepokemon': 'IceFairy'}\"", "\"{'typepokemon': 'Normal'}\"", "\"{'typepokemon': 'PoisonType'}\"", "\"{'typepokemon': 'GroundRock'}\"", "\"{'typepokemon': 'FlyingDragon'}\"", "\"{'typepokemon': 'PsychicFairyType'}\""], "example_outputs": [{"return": "\"'Fire'\""}, {"return": "\"'Water Type'\""}, {"return": "\"'Electric'\""}, {"return": "\"'Grass Type'\""}, {"return": "\"'Ice Fairy'\""}, {"return": "\"'Normal'\""}, {"return": "\"'Poison Type'\""}, {"return": "\"'Ground Rock'\""}, {"return": "\"'Flying Dragon'\""}, {"return": "\"'Psychic Fairy Type'\""}, {"return": "\"'Fire Water'\""}, {"return": "\"'Grass Poison'\""}, {"return": "\"'Electric'\""}, {"return": "\"'Water Ice'\""}, {"return": "\"'Dragon Flying'\""}, {"return": "\"'Ground Rock'\""}, {"return": "\"'Bug Grass'\""}, {"return": "\"'Normal'\""}, {"return": "\"'Psychic Fairy'\""}, {"return": "\"'Ice Psychic'\""}, {"return": "\"'Pikachu'\""}, {"return": "\"'Charmander'\""}, {"return": "\"'Water Stone'\""}, {"return": "\"'Fire Fang'\""}, {"return": "\"'Electric Mouse'\""}, {"return": "\"'Grass Knot'\""}, {"return": "\"'Rock Slide'\""}, {"return": "\"'Ice Beam'\""}, {"return": "\"'Thunder Punch'\""}, {"return": "\"'Dragon Tail'\""}], "parsed_inputs": [[["typepokemon", "\"Fire\""]], [["typepokemon", "\"WaterType\""]], [["typepokemon", "\"Electric\""]], [["typepokemon", "\"GrassType\""]], [["typepokemon", "\"IceFairy\""]], [["typepokemon", "\"Normal\""]], [["typepokemon", "\"PoisonType\""]], [["typepokemon", "\"GroundRock\""]], [["typepokemon", "\"FlyingDragon\""]], [["typepokemon", "\"PsychicFairyType\""]]], "exec_code": "def separatetype(typepokemon):\n    separer = False\n    tab_type = list(typepokemon)\n    for lettre in tab_type[-(len(tab_type) - 1):]:\n        if lettre.isupper():\n            separer = True\n            break\n    if separer:\n        for lettre in enumerate(tab_type[-(len(tab_type) - 1):]):\n            caractere = lettre[1]\n            index = lettre[0]\n            if caractere.isupper():\n                tab_type[index + 1] = ' ' + caractere\n        typepokemon = ''.join(tab_type)\n    return typepokemon\n", "output": "The function is:\n\n```python\ndef separatetype(typepokemon):\n    separer = False\n    tab_type = list(typepokemon)\n    for lettre in tab_type[-(len(tab_type) - 1):]:\n        if lettre.isupper():\n            separer = True\n            break\n    if separer:\n        for lettre in enumerate(tab_type[-(len(tab_type) - 1):]):\n            caractere = lettre[1]\n            index = lettre[0]\n            if caractere.isupper():\n                tab_type[index + 1] = ' ' + caractere\n        typepokemon = ''.join(tab_type)\n    return typepokemon\n\n```", "choosed_example_idx": [9, 8, 2, 6, 4, 3, 0], "prompt": "Function: separatetype\nWrite a function that generates the output from the input.\nInput: dict(typepokemon=\"PsychicFairyType\"), Output: \"'Psychic Fairy Type'\"\nInput: dict(typepokemon=\"FlyingDragon\"), Output: \"'Flying Dragon'\"\nInput: dict(typepokemon=\"Electric\"), Output: \"'Electric'\"\nInput: dict(typepokemon=\"PoisonType\"), Output: \"'Poison Type'\"\nInput: dict(typepokemon=\"IceFairy\"), Output: \"'Ice Fairy'\"\nInput: dict(typepokemon=\"GrassType\"), Output: \"'Grass Type'\"\nInput: dict(typepokemon=\"Fire\"), Output: \"'Fire'\"\n\n\n\n", "id": "45bbf35f85f1cbfc4ee7d419db27a56294a62986_0"}
{"example_str": "examples = [\n    dict(str=\"100101\"),\n    dict(str=\"011010\"),\n    dict(str=\"000000\"),\n    dict(str=\"111111\"),\n    dict(str=\"010101\"),\n    dict(str=\"101010\"),\n    dict(str=\"110011\"),\n    dict(str=\"001100\"),\n    dict(str=\"110000\"),\n    dict(str=\"111000\"),\n]\nexamples += [\n    dict(str=\"1101000\"),\n    dict(str=\"111000111\"),\n    dict(str=\"00001111\"),\n    dict(str=\"11111\"),\n    dict(str=\"00000\"),\n    dict(str=\"0101010101\"),\n    dict(str=\"1110000\"),\n    dict(str=\"000111\"),\n    dict(str=\"101010101010101\"),\n    dict(str=\"11110000\")\n]\nexamples += [\n    dict(str='110011'),\n    dict(str='000111'),\n    dict(str='111000'),\n    dict(str='00110011'),\n    dict(str='11110000'),\n    dict(str='00001111'),\n    dict(str='1010101'),\n    dict(str='0101010'),\n    dict(str='111111'),\n    dict(str='000000'),\n]", "code": "def checkZeroOnes(str):\n    result = {'0': 0, '1': 0}\n    max0 = 0\n    max1 = 0\n    for i in range(len(str)):\n        if str[i] == '0':\n            j = i + 1\n            max0 += 1\n            if j >= len(str):\n                if max0 > result['0']:\n                    result['0'] = max0\n            elif str[j] != '0':\n                if max0 > result['0']:\n                    result['0'] = max0\n                max0 = 0\n        elif str[i] == '1':\n            j = i + 1\n            max1 += 1\n            if j >= len(str):\n                if max1 > result['1']:\n                    result['1'] = max1\n            elif str[j] != '1':\n                if max1 > result['1']:\n                    result['1'] = max1\n                max1 = 0\n    print(result)\n    if result['0'] >= result['1']:\n        return False\n    else:\n        return True\n", "func_name": "checkZeroOnes", "exec_status": true, "example_inputs": ["\"{'str': '100101'}\"", "\"{'str': '011010'}\"", "\"{'str': '000000'}\"", "\"{'str': '111111'}\"", "\"{'str': '010101'}\"", "\"{'str': '101010'}\"", "\"{'str': '110011'}\"", "\"{'str': '001100'}\"", "\"{'str': '110000'}\"", "\"{'str': '111000'}\""], "example_outputs": [{"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}], "parsed_inputs": [[["str", "\"100101\""]], [["str", "\"011010\""]], [["str", "\"000000\""]], [["str", "\"111111\""]], [["str", "\"010101\""]], [["str", "\"101010\""]], [["str", "\"110011\""]], [["str", "\"001100\""]], [["str", "\"110000\""]], [["str", "\"111000\""]]], "exec_code": "def checkZeroOnes(str):\n    result = {'0': 0, '1': 0}\n    max0 = 0\n    max1 = 0\n    for i in range(len(str)):\n        if str[i] == '0':\n            j = i + 1\n            max0 += 1\n            if j >= len(str):\n                if max0 > result['0']:\n                    result['0'] = max0\n            elif str[j] != '0':\n                if max0 > result['0']:\n                    result['0'] = max0\n                max0 = 0\n        elif str[i] == '1':\n            j = i + 1\n            max1 += 1\n            if j >= len(str):\n                if max1 > result['1']:\n                    result['1'] = max1\n            elif str[j] != '1':\n                if max1 > result['1']:\n                    result['1'] = max1\n                max1 = 0\n    print(result)\n    if result['0'] >= result['1']:\n        return False\n    else:\n        return True\n", "output": "The function is:\n\n```python\ndef checkZeroOnes(str):\n    result = {'0': 0, '1': 0}\n    max0 = 0\n    max1 = 0\n    for i in range(len(str)):\n        if str[i] == '0':\n            j = i + 1\n            max0 += 1\n            if j >= len(str):\n                if max0 > result['0']:\n                    result['0'] = max0\n            elif str[j] != '0':\n                if max0 > result['0']:\n                    result['0'] = max0\n                max0 = 0\n        elif str[i] == '1':\n            j = i + 1\n            max1 += 1\n            if j >= len(str):\n                if max1 > result['1']:\n                    result['1'] = max1\n            elif str[j] != '1':\n                if max1 > result['1']:\n                    result['1'] = max1\n                max1 = 0\n    print(result)\n    if result['0'] >= result['1']:\n        return False\n    else:\n        return True\n\n```", "choosed_example_idx": [2, 9, 4, 7, 5], "prompt": "Input: dict(str=\"000000\"), Output: \"False\"\nInput: dict(str=\"111000\"), Output: \"False\"\nInput: dict(str=\"010101\"), Output: \"False\"\nInput: dict(str=\"001100\"), Output: \"False\"\nInput: dict(str=\"101010\"), Output: \"False\"\n\nFunction: checkZeroOnes\nWrite a function that generates the output from the input.\n\n", "id": "a127374c84706d53d9426c7583922e99eea8b127_0"}
{"example_str": "examples = [\n    dict(n_mixtures=1),\n    dict(n_mixtures=2),\n    dict(n_mixtures=3),\n    dict(n_mixtures=4),\n    dict(n_mixtures=5),\n    dict(n_mixtures=10),\n    dict(n_mixtures=20),\n    dict(n_mixtures=50),\n    dict(n_mixtures=100),\n    dict(n_mixtures=200),\n]\nexamples += [\n    dict(n_mixtures=1),\n    dict(n_mixtures=2),\n    dict(n_mixtures=3),\n    dict(n_mixtures=4),\n    dict(n_mixtures=5),\n    dict(n_mixtures=6),\n    dict(n_mixtures=7),\n    dict(n_mixtures=8),\n    dict(n_mixtures=9),\n    dict(n_mixtures=10)\n]\nexamples += [\n    dict(n_mixtures=1),\n    dict(n_mixtures=2),\n    dict(n_mixtures=3),\n    dict(n_mixtures=4),\n    dict(n_mixtures=5),\n    dict(n_mixtures=6),\n    dict(n_mixtures=7),\n    dict(n_mixtures=8),\n    dict(n_mixtures=9),\n    dict(n_mixtures=10)\n]", "code": "def get_mixture_weights_index_tuples(n_mixtures):\n    \"\"\"Index tuples for mixture_weight.\n\n    Args:\n        n_mixtures (int): Number of elements in the mixture distribution of the factors.\n\n    Returns:\n        ind_tups (list)\n\n    \"\"\"\n    ind_tups = []\n    for emf in range(n_mixtures):\n        ind_tups.append(('mixture_weights', 0, f'mixture_{emf}', '-'))\n    return ind_tups\n", "func_name": "get_mixture_weights_index_tuples", "exec_status": true, "example_inputs": ["\"{'n_mixtures': 1}\"", "\"{'n_mixtures': 2}\"", "\"{'n_mixtures': 3}\"", "\"{'n_mixtures': 4}\"", "\"{'n_mixtures': 5}\"", "\"{'n_mixtures': 10}\"", "\"{'n_mixtures': 20}\"", "\"{'n_mixtures': 50}\"", "\"{'n_mixtures': 100}\"", "\"{'n_mixtures': 200}\""], "example_outputs": [{"return": "\"[('mixture_weights', 0, 'mixture_0', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-'), ('mixture_weights', 0, 'mixture_4', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-'), ('mixture_weights', 0, 'mixture_4', '-'), ('mixture_weights', 0, 'mixture_5', '-'), ('mixture_weights', 0, 'mixture_6', '-'), ('mixture_weights', 0, 'mixture_7', '-'), ('mixture_weights', 0, 'mixture_8', '-'), ('mixture_weights', 0, 'mixture_9', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-'), ('mixture_weights', 0, 'mixture_4', '-'), ('mixture_weights', 0, 'mixture_5', '-'), ('mixture_weights', 0, 'mixture_6', '-'), ('mixture_weights', 0, 'mixture_7', '-'), ('mixture_weights', 0, 'mixture_8', '-'), ('mixture_weights', 0, 'mixture_9', '-'), ('mixture_weights', 0, 'mixture_10', '-'), ('mixture_weights', 0, 'mixture_11', '-'), ('mixture_weights', 0, 'mixture_12', '-'), ('mixture_weights', 0, 'mixture_13', '-'), ('mixture_weights', 0, 'mixture_14', '-'), ('mixture_weights', 0, 'mixture_15', '-'), ('mixture_weights', 0, 'mixture_16', '-'), ('mixture_weights', 0, 'mixture_17', '-'), ('mixture_weights', 0, 'mixture_18', '-'), ('mixture_weights', 0, 'mixture_19', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-'), ('mixture_weights', 0, 'mixture_4', '-'), ('mixture_weights', 0, 'mixture_5', '-'), ('mixture_weights', 0, 'mixture_6', '-'), ('mixture_weights', 0, 'mixture_7', '-'), ('mixture_weights', 0, 'mixture_8', '-'), ('mixture_weights', 0, 'mixture_9', '-'), ('mixture_weights', 0, 'mixture_10', '-'), ('mixture_weights', 0, 'mixture_11', '-'), ('mixture_weights', 0, 'mixture_12', '-'), ('mixture_weights', 0, 'mixture_13', '-'), ('mixture_weights', 0, 'mixture_14', '-'), ('mixture_weights', 0, 'mixture_15', '-'), ('mixture_weights', 0, 'mixture_16', '-'), ('mixture_weights', 0, 'mixture_17', '-'), ('mixture_weights', 0, 'mixture_18', '-'), ('mixture_weights', 0, 'mixture_19', '-'), ('mixture_weights', 0, 'mixture_20', '-'), ('mixture_weights', 0, 'mixture_21', '-'), ('mixture_weights', 0, 'mixture_22', '-'), ('mixture_weights', 0, 'mixture_23', '-'), ('mixture_weights', 0, 'mixture_24', '-'), ('mixture_weights', 0, 'mixture_25', '-'), ('mixture_weights', 0, 'mixture_26', '-'), ('mixture_weights', 0, 'mixture_27', '-'), ('mixture_weights', 0, 'mixture_28', '-'), ('mixture_weights', 0, 'mixture_29', '-'), ('mixture_weights', 0, 'mixture_30', '-'), ('mixture_weights', 0, 'mixture_31', '-'), ('mixture_weights', 0, 'mixture_32', '-'), ('mixture_weights', 0, 'mixture_33', '-'), ('mixture_weights', 0, 'mixture_34', '-'), ('mixture_weights', 0, 'mixture_35', '-'), ('mixture_weights', 0, 'mixture_36', '-'), ('mixture_weights', 0, 'mixture_37', '-'), ('mixture_weights', 0, 'mixture_38', '-'), ('mixture_weights', 0, 'mixture_39', '-'), ('mixture_weights', 0, 'mixture_40', '-'), ('mixture_weights', 0, 'mixture_41', '-'), ('mixture_weights', 0, 'mixture_42', '-'), ('mixture_weights', 0, 'mixture_43', '-'), ('mixture_weights', 0, 'mixture_44', '-'), ('mixture_weights', 0, 'mixture_45', '-'), ('mixture_weights', 0, 'mixture_46', '-'), ('mixture_weights', 0, 'mixture_47', '-'), ('mixture_weights', 0, 'mixture_48', '-'), ('mixture_weights', 0, 'mixture_49', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-'), ('mixture_weights', 0, 'mixture_4', '-'), ('mixture_weights', 0, 'mixture_5', '-'), ('mixture_weights', 0, 'mixture_6', '-'), ('mixture_weights', 0, 'mixture_7', '-'), ('mixture_weights', 0, 'mixture_8', '-'), ('mixture_weights', 0, 'mixture_9', '-'), ('mixture_weights', 0, 'mixture_10', '-'), ('mixture_weights', 0, 'mixture_11', '-'), ('mixture_weights', 0, 'mixture_12', '-'), ('mixture_weights', 0, 'mixture_13', '-'), ('mixture_weights', 0, 'mixture_14', '-'), ('mixture_weights', 0, 'mixture_15', '-'), ('mixture_weights', 0, 'mixture_16', '-'), ('mixture_weights', 0, 'mixture_17', '-'), ('mixture_weights', 0, 'mixture_18', '-'), ('mixture_weights', 0, 'mixture_19', '-'), ('mixture_weights', 0, 'mixture_20', '-'), ('mixture_weights', 0, 'mixture_21', '-'), ('mixture_weights', 0, 'mixture_22', '-'), ('mixture_weights', 0, 'mixture_23', '-'), ('mixture_weights', 0, 'mixture_24', '-'), ('mixture_weights', 0, 'mixture_25', '-'), ('mixture_weights', 0, 'mixture_26', '-'), ('mixture_weights', 0, 'mixture_27', '-'), ('mixture_weights', 0, 'mixture_28', '-'), ('mixture_weights', 0, 'mixture_29', '-'), ('mixture_weights', 0, 'mixture_30', '-'), ('mixture_weights', 0, 'mixture_31', '-'), ('mixture_weights', 0, 'mixture_32', '-'), ('mixture_weights', 0, 'mixture_33', '-'), ('mixture_weights', 0, 'mixture_34', '-'), ('mixture_weights', 0, 'mixture_35', '-'), ('mixture_weights', 0, 'mixture_36', '-'), ('mixture_weights', 0, 'mixture_37', '-'), ('mixture_weights', 0, 'mixture_38', '-'), ('mixture_weights', 0, 'mixture_39', '-'), ('mixture_weights', 0, 'mixture_40', '-'), ('mixture_weights', 0, 'mixture_41', '-'), ('mixture_weights', 0, 'mixture_42', '-'), ('mixture_weights', 0, 'mixture_43', '-'), ('mixture_weights', 0, 'mixture_44', '-'), ('mixture_weights', 0, 'mixture_45', '-'), ('mixture_weights', 0, 'mixture_46', '-'), ('mixture_weights', 0, 'mixture_47', '-'), ('mixture_weights', 0, 'mixture_48', '-'), ('mixture_weights', 0, 'mixture_49', '-'), ('mixture_weights', 0, 'mixture_50', '-'), ('mixture_weights', 0, 'mixture_51', '-'), ('mixture_weights', 0, 'mixture_52', '-'), ('mixture_weights', 0, 'mixture_53', '-'), ('mixture_weights', 0, 'mixture_54', '-'), ('mixture_weights', 0, 'mixture_55', '-'), ('mixture_weights', 0, 'mixture_56', '-'), ('mixture_weights', 0, 'mixture_57', '-'), ('mixture_weights', 0, 'mixture_58', '-'), ('mixture_weights', 0, 'mixture_59', '-'), ('mixture_weights', 0, 'mixture_60', '-'), ('mixture_weights', 0, 'mixture_61', '-'), ('mixture_weights', 0, 'mixture_62', '-'), ('mixture_weights', 0, 'mixture_63', '-'), ('mixture_weights', 0, 'mixture_64', '-'), ('mixture_weights', 0, 'mixture_65', '-'), ('mixture_weights', 0, 'mixture_66', '-'), ('mixture_weights', 0, 'mixture_67', '-'), ('mixture_weights', 0, 'mixture_68', '-'), ('mixture_weights', 0, 'mixture_69', '-'), ('mixture_weights', 0, 'mixture_70', '-'), ('mixture_weights', 0, 'mixture_71', '-'), ('mixture_weights', 0, 'mixture_72', '-'), ('mixture_weights', 0, 'mixture_73', '-'), ('mixture_weights', 0, 'mixture_74', '-'), ('mixture_weights', 0, 'mixture_75', '-'), ('mixture_weights', 0, 'mixture_76', '-'), ('mixture_weights', 0, 'mixture_77', '-'), ('mixture_weights', 0, 'mixture_78', '-'), ('mixture_weights', 0, 'mixture_79', '-'), ('mixture_weights', 0, 'mixture_80', '-'), ('mixture_weights', 0, 'mixture_81', '-'), ('mixture_weights', 0, 'mixture_82', '-'), ('mixture_weights', 0, 'mixture_83', '-'), ('mixture_weights', 0, 'mixture_84', '-'), ('mixture_weights', 0, 'mixture_85', '-'), ('mixture_weights', 0, 'mixture_86', '-'), ('mixture_weights', 0, 'mixture_87', '-'), ('mixture_weights', 0, 'mixture_88', '-'), ('mixture_weights', 0, 'mixture_89', '-'), ('mixture_weights', 0, 'mixture_90', '-'), ('mixture_weights', 0, 'mixture_91', '-'), ('mixture_weights', 0, 'mixture_92', '-'), ('mixture_weights', 0, 'mixture_93', '-'), ('mixture_weights', 0, 'mixture_94', '-'), ('mixture_weights', 0, 'mixture_95', '-'), ('mixture_weights', 0, 'mixture_96', '-'), ('mixture_weights', 0, 'mixture_97', '-'), ('mixture_weights', 0, 'mixture_98', '-'), ('mixture_weights', 0, 'mixture_99', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-'), ('mixture_weights', 0, 'mixture_4', '-'), ('mixture_weights', 0, 'mixture_5', '-'), ('mixture_weights', 0, 'mixture_6', '-'), ('mixture_weights', 0, 'mixture_7', '-'), ('mixture_weights', 0, 'mixture_8', '-'), ('mixture_weights', 0, 'mixture_9', '-'), ('mixture_weights', 0, 'mixture_10', '-'), ('mixture_weights', 0, 'mixture_11', '-'), ('mixture_weights', 0, 'mixture_12', '-'), ('mixture_weights', 0, 'mixture_13', '-'), ('mixture_weights', 0, 'mixture_14', '-'), ('mixture_weights', 0, 'mixture_15', '-'), ('mixture_weights', 0, 'mixture_16', '-'), ('mixture_weights', 0, 'mixture_17', '-'), ('mixture_weights', 0, 'mixture_18', '-'), ('mixture_weights', 0, 'mixture_19', '-'), ('mixture_weights', 0, 'mixture_20', '-'), ('mixture_weights', 0, 'mixture_21', '-'), ('mixture_weights', 0, 'mixture_22', '-'), ('mixture_weights', 0, 'mixture_23', '-'), ('mixture_weights', 0, 'mixture_24', '-'), ('mixture_weights', 0, 'mixture_25', '-'), ('mixture_weights', 0, 'mixture_26', '-'), ('mixture_weights', 0, 'mixture_27', '-'), ('mixture_weights', 0, 'mixture_28', '-'), ('mixture_weights', 0, 'mixture_29', '-'), ('mixture_weights', 0, 'mixture_30', '-'), ('mixture_weights', 0, 'mixture_31', '-'), ('mixture_weights', 0, 'mixture_32', '-'), ('mixture_weights', 0, 'mixture_33', '-'), ('mixture_weights', 0, 'mixture_34', '-'), ('mixture_weights', 0, 'mixture_35', '-'), ('mixture_weights', 0, 'mixture_36', '-'), ('mixture_weights', 0, 'mixture_37', '-'), ('mixture_weights', 0, 'mixture_38', '-'), ('mixture_weights', 0, 'mixture_39', '-'), ('mixture_weights', 0, 'mixture_40', '-'), ('mixture_weights', 0, 'mixture_41', '-'), ('mixture_weights', 0, 'mixture_42', '-'), ('mixture_weights', 0, 'mixture_43', '-'), ('mixture_weights', 0, 'mixture_44', '-'), ('mixture_weights', 0, 'mixture_45', '-'), ('mixture_weights', 0, 'mixture_46', '-'), ('mixture_weights', 0, 'mixture_47', '-'), ('mixture_weights', 0, 'mixture_48', '-'), ('mixture_weights', 0, 'mixture_49', '-'), ('mixture_weights', 0, 'mixture_50', '-'), ('mixture_weights', 0, 'mixture_51', '-'), ('mixture_weights', 0, 'mixture_52', '-'), ('mixture_weights', 0, 'mixture_53', '-'), ('mixture_weights', 0, 'mixture_54', '-'), ('mixture_weights', 0, 'mixture_55', '-'), ('mixture_weights', 0, 'mixture_56', '-'), ('mixture_weights', 0, 'mixture_57', '-'), ('mixture_weights', 0, 'mixture_58', '-'), ('mixture_weights', 0, 'mixture_59', '-'), ('mixture_weights', 0, 'mixture_60', '-'), ('mixture_weights', 0, 'mixture_61', '-'), ('mixture_weights', 0, 'mixture_62', '-'), ('mixture_weights', 0, 'mixture_63', '-'), ('mixture_weights', 0, 'mixture_64', '-'), ('mixture_weights', 0, 'mixture_65', '-'), ('mixture_weights', 0, 'mixture_66', '-'), ('mixture_weights', 0, 'mixture_67', '-'), ('mixture_weights', 0, 'mixture_68', '-'), ('mixture_weights', 0, 'mixture_69', '-'), ('mixture_weights', 0, 'mixture_70', '-'), ('mixture_weights', 0, 'mixture_71', '-'), ('mixture_weights', 0, 'mixture_72', '-'), ('mixture_weights', 0, 'mixture_73', '-'), ('mixture_weights', 0, 'mixture_74', '-'), ('mixture_weights', 0, 'mixture_75', '-'), ('mixture_weights', 0, 'mixture_76', '-'), ('mixture_weights', 0, 'mixture_77', '-'), ('mixture_weights', 0, 'mixture_78', '-'), ('mixture_weights', 0, 'mixture_79', '-'), ('mixture_weights', 0, 'mixture_80', '-'), ('mixture_weights', 0, 'mixture_81', '-'), ('mixture_weights', 0, 'mixture_82', '-'), ('mixture_weights', 0, 'mixture_83', '-'), ('mixture_weights', 0, 'mixture_84', '-'), ('mixture_weights', 0, 'mixture_85', '-'), ('mixture_weights', 0, 'mixture_86', '-'), ('mixture_weights', 0, 'mixture_87', '-'), ('mixture_weights', 0, 'mixture_88', '-'), ('mixture_weights', 0, 'mixture_89', '-'), ('mixture_weights', 0, 'mixture_90', '-'), ('mixture_weights', 0, 'mixture_91', '-'), ('mixture_weights', 0, 'mixture_92', '-'), ('mixture_weights', 0, 'mixture_93', '-'), ('mixture_weights', 0, 'mixture_94', '-'), ('mixture_weights', 0, 'mixture_95', '-'), ('mixture_weights', 0, 'mixture_96', '-'), ('mixture_weights', 0, 'mixture_97', '-'), ('mixture_weights', 0, 'mixture_98', '-'), ('mixture_weights', 0, 'mixture_99', '-'), ('mixture_weights', 0, 'mixture_100', '-'), ('mixture_weights', 0, 'mixture_101', '-'), ('mixture_weights', 0, 'mixture_102', '-'), ('mixture_weights', 0, 'mixture_103', '-'), ('mixture_weights', 0, 'mixture_104', '-'), ('mixture_weights', 0, 'mixture_105', '-'), ('mixture_weights', 0, 'mixture_106', '-'), ('mixture_weights', 0, 'mixture_107', '-'), ('mixture_weights', 0, 'mixture_108', '-'), ('mixture_weights', 0, 'mixture_109', '-'), ('mixture_weights', 0, 'mixture_110', '-'), ('mixture_weights', 0, 'mixture_111', '-'), ('mixture_weights', 0, 'mixture_112', '-'), ('mixture_weights', 0, 'mixture_113', '-'), ('mixture_weights', 0, 'mixture_114', '-'), ('mixture_weights', 0, 'mixture_115', '-'), ('mixture_weights', 0, 'mixture_116', '-'), ('mixture_weights', 0, 'mixture_117', '-'), ('mixture_weights', 0, 'mixture_118', '-'), ('mixture_weights', 0, 'mixture_119', '-'), ('mixture_weights', 0, 'mixture_120', '-'), ('mixture_weights', 0, 'mixture_121', '-'), ('mixture_weights', 0, 'mixture_122', '-'), ('mixture_weights', 0, 'mixture_123', '-'), ('mixture_weights', 0, 'mixture_124', '-'), ('mixture_weights', 0, 'mixture_125', '-'), ('mixture_weights', 0, 'mixture_126', '-'), ('mixture_weights', 0, 'mixture_127', '-'), ('mixture_weights', 0, 'mixture_128', '-'), ('mixture_weights', 0, 'mixture_129', '-'), ('mixture_weights', 0, 'mixture_130', '-'), ('mixture_weights', 0, 'mixture_131', '-'), ('mixture_weights', 0, 'mixture_132', '-'), ('mixture_weights', 0, 'mixture_133', '-'), ('mixture_weights', 0, 'mixture_134', '-'), ('mixture_weights', 0, 'mixture_135', '-'), ('mixture_weights', 0, 'mixture_136', '-'), ('mixture_weights', 0, 'mixture_137', '-'), ('mixture_weights', 0, 'mixture_138', '-'), ('mixture_weights', 0, 'mixture_139', '-'), ('mixture_weights', 0, 'mixture_140', '-'), ('mixture_weights', 0, 'mixture_141', '-'), ('mixture_weights', 0, 'mixture_142', '-'), ('mixture_weights', 0, 'mixture_143', '-'), ('mixture_weights', 0, 'mixture_144', '-'), ('mixture_weights', 0, 'mixture_145', '-'), ('mixture_weights', 0, 'mixture_146', '-'), ('mixture_weights', 0, 'mixture_147', '-'), ('mixture_weights', 0, 'mixture_148', '-'), ('mixture_weights', 0, 'mixture_149', '-'), ('mixture_weights', 0, 'mixture_150', '-'), ('mixture_weights', 0, 'mixture_151', '-'), ('mixture_weights', 0, 'mixture_152', '-'), ('mixture_weights', 0, 'mixture_153', '-'), ('mixture_weights', 0, 'mixture_154', '-'), ('mixture_weights', 0, 'mixture_155', '-'), ('mixture_weights', 0, 'mixture_156', '-'), ('mixture_weights', 0, 'mixture_157', '-'), ('mixture_weights', 0, 'mixture_158', '-'), ('mixture_weights', 0, 'mixture_159', '-'), ('mixture_weights', 0, 'mixture_160', '-'), ('mixture_weights', 0, 'mixture_161', '-'), ('mixture_weights', 0, 'mixture_162', '-'), ('mixture_weights', 0, 'mixture_163', '-'), ('mixture_weights', 0, 'mixture_164', '-'), ('mixture_weights', 0, 'mixture_165', '-'), ('mixture_weights', 0, 'mixture_166', '-'), ('mixture_weights', 0, 'mixture_167', '-'), ('mixture_weights', 0, 'mixture_168', '-'), ('mixture_weights', 0, 'mixture_169', '-'), ('mixture_weights', 0, 'mixture_170', '-'), ('mixture_weights', 0, 'mixture_171', '-'), ('mixture_weights', 0, 'mixture_172', '-'), ('mixture_weights', 0, 'mixture_173', '-'), ('mixture_weights', 0, 'mixture_174', '-'), ('mixture_weights', 0, 'mixture_175', '-'), ('mixture_weights', 0, 'mixture_176', '-'), ('mixture_weights', 0, 'mixture_177', '-'), ('mixture_weights', 0, 'mixture_178', '-'), ('mixture_weights', 0, 'mixture_179', '-'), ('mixture_weights', 0, 'mixture_180', '-'), ('mixture_weights', 0, 'mixture_181', '-'), ('mixture_weights', 0, 'mixture_182', '-'), ('mixture_weights', 0, 'mixture_183', '-'), ('mixture_weights', 0, 'mixture_184', '-'), ('mixture_weights', 0, 'mixture_185', '-'), ('mixture_weights', 0, 'mixture_186', '-'), ('mixture_weights', 0, 'mixture_187', '-'), ('mixture_weights', 0, 'mixture_188', '-'), ('mixture_weights', 0, 'mixture_189', '-'), ('mixture_weights', 0, 'mixture_190', '-'), ('mixture_weights', 0, 'mixture_191', '-'), ('mixture_weights', 0, 'mixture_192', '-'), ('mixture_weights', 0, 'mixture_193', '-'), ('mixture_weights', 0, 'mixture_194', '-'), ('mixture_weights', 0, 'mixture_195', '-'), ('mixture_weights', 0, 'mixture_196', '-'), ('mixture_weights', 0, 'mixture_197', '-'), ('mixture_weights', 0, 'mixture_198', '-'), ('mixture_weights', 0, 'mixture_199', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-'), ('mixture_weights', 0, 'mixture_4', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-'), ('mixture_weights', 0, 'mixture_4', '-'), ('mixture_weights', 0, 'mixture_5', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-'), ('mixture_weights', 0, 'mixture_4', '-'), ('mixture_weights', 0, 'mixture_5', '-'), ('mixture_weights', 0, 'mixture_6', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-'), ('mixture_weights', 0, 'mixture_4', '-'), ('mixture_weights', 0, 'mixture_5', '-'), ('mixture_weights', 0, 'mixture_6', '-'), ('mixture_weights', 0, 'mixture_7', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-'), ('mixture_weights', 0, 'mixture_4', '-'), ('mixture_weights', 0, 'mixture_5', '-'), ('mixture_weights', 0, 'mixture_6', '-'), ('mixture_weights', 0, 'mixture_7', '-'), ('mixture_weights', 0, 'mixture_8', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-'), ('mixture_weights', 0, 'mixture_4', '-'), ('mixture_weights', 0, 'mixture_5', '-'), ('mixture_weights', 0, 'mixture_6', '-'), ('mixture_weights', 0, 'mixture_7', '-'), ('mixture_weights', 0, 'mixture_8', '-'), ('mixture_weights', 0, 'mixture_9', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-'), ('mixture_weights', 0, 'mixture_4', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-'), ('mixture_weights', 0, 'mixture_4', '-'), ('mixture_weights', 0, 'mixture_5', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-'), ('mixture_weights', 0, 'mixture_4', '-'), ('mixture_weights', 0, 'mixture_5', '-'), ('mixture_weights', 0, 'mixture_6', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-'), ('mixture_weights', 0, 'mixture_4', '-'), ('mixture_weights', 0, 'mixture_5', '-'), ('mixture_weights', 0, 'mixture_6', '-'), ('mixture_weights', 0, 'mixture_7', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-'), ('mixture_weights', 0, 'mixture_4', '-'), ('mixture_weights', 0, 'mixture_5', '-'), ('mixture_weights', 0, 'mixture_6', '-'), ('mixture_weights', 0, 'mixture_7', '-'), ('mixture_weights', 0, 'mixture_8', '-')]\""}, {"return": "\"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-'), ('mixture_weights', 0, 'mixture_4', '-'), ('mixture_weights', 0, 'mixture_5', '-'), ('mixture_weights', 0, 'mixture_6', '-'), ('mixture_weights', 0, 'mixture_7', '-'), ('mixture_weights', 0, 'mixture_8', '-'), ('mixture_weights', 0, 'mixture_9', '-')]\""}], "parsed_inputs": [[["n_mixtures", "1"]], [["n_mixtures", "2"]], [["n_mixtures", "3"]], [["n_mixtures", "4"]], [["n_mixtures", "5"]], [["n_mixtures", "10"]], [["n_mixtures", "20"]], [["n_mixtures", "50"]], [["n_mixtures", "100"]], [["n_mixtures", "200"]]], "exec_code": "def get_mixture_weights_index_tuples(n_mixtures):\n    \"\"\"Index tuples for mixture_weight.\n\n    Args:\n        n_mixtures (int): Number of elements in the mixture distribution of the factors.\n\n    Returns:\n        ind_tups (list)\n\n    \"\"\"\n    ind_tups = []\n    for emf in range(n_mixtures):\n        ind_tups.append(('mixture_weights', 0, f'mixture_{emf}', '-'))\n    return ind_tups\n", "output": "The function is:\n\n```python\ndef get_mixture_weights_index_tuples(n_mixtures):\n    \"\"\"Index tuples for mixture_weight.\n\n    Args:\n        n_mixtures (int): Number of elements in the mixture distribution of the factors.\n\n    Returns:\n        ind_tups (list)\n\n    \"\"\"\n    ind_tups = []\n    for emf in range(n_mixtures):\n        ind_tups.append(('mixture_weights', 0, f'mixture_{emf}', '-'))\n    return ind_tups\n\n```", "choosed_example_idx": [5, 7, 0, 6, 9, 3, 1, 8, 2, 4], "prompt": "Input: dict(n_mixtures=10), Output: \"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-'), ('mixture_weights', 0, 'mixture_4', '-'), ('mixture_weights', 0, 'mixture_5', '-'), ('mixture_weights', 0, 'mixture_6', '-'), ('mixture_weights', 0, 'mixture_7', '-'), ('mixture_weights', 0, 'mixture_8', '-'), ('mixture_weights', 0, 'mixture_9', '-')]\"\nInput: dict(n_mixtures=50), Output: \"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-'), ('mixture_weights', 0, 'mixture_4', '-'), ('mixture_weights', 0, 'mixture_5', '-'), ('mixture_weights', 0, 'mixture_6', '-'), ('mixture_weights', 0, 'mixture_7', '-'), ('mixture_weights', 0, 'mixture_8', '-'), ('mixture_weights', 0, 'mixture_9', '-'), ('mixture_weights', 0, 'mixture_10', '-'), ('mixture_weights', 0, 'mixture_11', '-'), ('mixture_weights', 0, 'mixture_12', '-'), ('mixture_weights', 0, 'mixture_13', '-'), ('mixture_weights', 0, 'mixture_14', '-'), ('mixture_weights', 0, 'mixture_15', '-'), ('mixture_weights', 0, 'mixture_16', '-'), ('mixture_weights', 0, 'mixture_17', '-'), ('mixture_weights', 0, 'mixture_18', '-'), ('mixture_weights', 0, 'mixture_19', '-'), ('mixture_weights', 0, 'mixture_20', '-'), ('mixture_weights', 0, 'mixture_21', '-'), ('mixture_weights', 0, 'mixture_22', '-'), ('mixture_weights', 0, 'mixture_23', '-'), ('mixture_weights', 0, 'mixture_24', '-'), ('mixture_weights', 0, 'mixture_25', '-'), ('mixture_weights', 0, 'mixture_26', '-'), ('mixture_weights', 0, 'mixture_27', '-'), ('mixture_weights', 0, 'mixture_28', '-'), ('mixture_weights', 0, 'mixture_29', '-'), ('mixture_weights', 0, 'mixture_30', '-'), ('mixture_weights', 0, 'mixture_31', '-'), ('mixture_weights', 0, 'mixture_32', '-'), ('mixture_weights', 0, 'mixture_33', '-'), ('mixture_weights', 0, 'mixture_34', '-'), ('mixture_weights', 0, 'mixture_35', '-'), ('mixture_weights', 0, 'mixture_36', '-'), ('mixture_weights', 0, 'mixture_37', '-'), ('mixture_weights', 0, 'mixture_38', '-'), ('mixture_weights', 0, 'mixture_39', '-'), ('mixture_weights', 0, 'mixture_40', '-'), ('mixture_weights', 0, 'mixture_41', '-'), ('mixture_weights', 0, 'mixture_42', '-'), ('mixture_weights', 0, 'mixture_43', '-'), ('mixture_weights', 0, 'mixture_44', '-'), ('mixture_weights', 0, 'mixture_45', '-'), ('mixture_weights', 0, 'mixture_46', '-'), ('mixture_weights', 0, 'mixture_47', '-'), ('mixture_weights', 0, 'mixture_48', '-'), ('mixture_weights', 0, 'mixture_49', '-')]\"\nInput: dict(n_mixtures=1), Output: \"[('mixture_weights', 0, 'mixture_0', '-')]\"\nInput: dict(n_mixtures=20), Output: \"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-'), ('mixture_weights', 0, 'mixture_4', '-'), ('mixture_weights', 0, 'mixture_5', '-'), ('mixture_weights', 0, 'mixture_6', '-'), ('mixture_weights', 0, 'mixture_7', '-'), ('mixture_weights', 0, 'mixture_8', '-'), ('mixture_weights', 0, 'mixture_9', '-'), ('mixture_weights', 0, 'mixture_10', '-'), ('mixture_weights', 0, 'mixture_11', '-'), ('mixture_weights', 0, 'mixture_12', '-'), ('mixture_weights', 0, 'mixture_13', '-'), ('mixture_weights', 0, 'mixture_14', '-'), ('mixture_weights', 0, 'mixture_15', '-'), ('mixture_weights', 0, 'mixture_16', '-'), ('mixture_weights', 0, 'mixture_17', '-'), ('mixture_weights', 0, 'mixture_18', '-'), ('mixture_weights', 0, 'mixture_19', '-')]\"\nInput: dict(n_mixtures=200), Output: \"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-'), ('mixture_weights', 0, 'mixture_4', '-'), ('mixture_weights', 0, 'mixture_5', '-'), ('mixture_weights', 0, 'mixture_6', '-'), ('mixture_weights', 0, 'mixture_7', '-'), ('mixture_weights', 0, 'mixture_8', '-'), ('mixture_weights', 0, 'mixture_9', '-'), ('mixture_weights', 0, 'mixture_10', '-'), ('mixture_weights', 0, 'mixture_11', '-'), ('mixture_weights', 0, 'mixture_12', '-'), ('mixture_weights', 0, 'mixture_13', '-'), ('mixture_weights', 0, 'mixture_14', '-'), ('mixture_weights', 0, 'mixture_15', '-'), ('mixture_weights', 0, 'mixture_16', '-'), ('mixture_weights', 0, 'mixture_17', '-'), ('mixture_weights', 0, 'mixture_18', '-'), ('mixture_weights', 0, 'mixture_19', '-'), ('mixture_weights', 0, 'mixture_20', '-'), ('mixture_weights', 0, 'mixture_21', '-'), ('mixture_weights', 0, 'mixture_22', '-'), ('mixture_weights', 0, 'mixture_23', '-'), ('mixture_weights', 0, 'mixture_24', '-'), ('mixture_weights', 0, 'mixture_25', '-'), ('mixture_weights', 0, 'mixture_26', '-'), ('mixture_weights', 0, 'mixture_27', '-'), ('mixture_weights', 0, 'mixture_28', '-'), ('mixture_weights', 0, 'mixture_29', '-'), ('mixture_weights', 0, 'mixture_30', '-'), ('mixture_weights', 0, 'mixture_31', '-'), ('mixture_weights', 0, 'mixture_32', '-'), ('mixture_weights', 0, 'mixture_33', '-'), ('mixture_weights', 0, 'mixture_34', '-'), ('mixture_weights', 0, 'mixture_35', '-'), ('mixture_weights', 0, 'mixture_36', '-'), ('mixture_weights', 0, 'mixture_37', '-'), ('mixture_weights', 0, 'mixture_38', '-'), ('mixture_weights', 0, 'mixture_39', '-'), ('mixture_weights', 0, 'mixture_40', '-'), ('mixture_weights', 0, 'mixture_41', '-'), ('mixture_weights', 0, 'mixture_42', '-'), ('mixture_weights', 0, 'mixture_43', '-'), ('mixture_weights', 0, 'mixture_44', '-'), ('mixture_weights', 0, 'mixture_45', '-'), ('mixture_weights', 0, 'mixture_46', '-'), ('mixture_weights', 0, 'mixture_47', '-'), ('mixture_weights', 0, 'mixture_48', '-'), ('mixture_weights', 0, 'mixture_49', '-'), ('mixture_weights', 0, 'mixture_50', '-'), ('mixture_weights', 0, 'mixture_51', '-'), ('mixture_weights', 0, 'mixture_52', '-'), ('mixture_weights', 0, 'mixture_53', '-'), ('mixture_weights', 0, 'mixture_54', '-'), ('mixture_weights', 0, 'mixture_55', '-'), ('mixture_weights', 0, 'mixture_56', '-'), ('mixture_weights', 0, 'mixture_57', '-'), ('mixture_weights', 0, 'mixture_58', '-'), ('mixture_weights', 0, 'mixture_59', '-'), ('mixture_weights', 0, 'mixture_60', '-'), ('mixture_weights', 0, 'mixture_61', '-'), ('mixture_weights', 0, 'mixture_62', '-'), ('mixture_weights', 0, 'mixture_63', '-'), ('mixture_weights', 0, 'mixture_64', '-'), ('mixture_weights', 0, 'mixture_65', '-'), ('mixture_weights', 0, 'mixture_66', '-'), ('mixture_weights', 0, 'mixture_67', '-'), ('mixture_weights', 0, 'mixture_68', '-'), ('mixture_weights', 0, 'mixture_69', '-'), ('mixture_weights', 0, 'mixture_70', '-'), ('mixture_weights', 0, 'mixture_71', '-'), ('mixture_weights', 0, 'mixture_72', '-'), ('mixture_weights', 0, 'mixture_73', '-'), ('mixture_weights', 0, 'mixture_74', '-'), ('mixture_weights', 0, 'mixture_75', '-'), ('mixture_weights', 0, 'mixture_76', '-'), ('mixture_weights', 0, 'mixture_77', '-'), ('mixture_weights', 0, 'mixture_78', '-'), ('mixture_weights', 0, 'mixture_79', '-'), ('mixture_weights', 0, 'mixture_80', '-'), ('mixture_weights', 0, 'mixture_81', '-'), ('mixture_weights', 0, 'mixture_82', '-'), ('mixture_weights', 0, 'mixture_83', '-'), ('mixture_weights', 0, 'mixture_84', '-'), ('mixture_weights', 0, 'mixture_85', '-'), ('mixture_weights', 0, 'mixture_86', '-'), ('mixture_weights', 0, 'mixture_87', '-'), ('mixture_weights', 0, 'mixture_88', '-'), ('mixture_weights', 0, 'mixture_89', '-'), ('mixture_weights', 0, 'mixture_90', '-'), ('mixture_weights', 0, 'mixture_91', '-'), ('mixture_weights', 0, 'mixture_92', '-'), ('mixture_weights', 0, 'mixture_93', '-'), ('mixture_weights', 0, 'mixture_94', '-'), ('mixture_weights', 0, 'mixture_95', '-'), ('mixture_weights', 0, 'mixture_96', '-'), ('mixture_weights', 0, 'mixture_97', '-'), ('mixture_weights', 0, 'mixture_98', '-'), ('mixture_weights', 0, 'mixture_99', '-'), ('mixture_weights', 0, 'mixture_100', '-'), ('mixture_weights', 0, 'mixture_101', '-'), ('mixture_weights', 0, 'mixture_102', '-'), ('mixture_weights', 0, 'mixture_103', '-'), ('mixture_weights', 0, 'mixture_104', '-'), ('mixture_weights', 0, 'mixture_105', '-'), ('mixture_weights', 0, 'mixture_106', '-'), ('mixture_weights', 0, 'mixture_107', '-'), ('mixture_weights', 0, 'mixture_108', '-'), ('mixture_weights', 0, 'mixture_109', '-'), ('mixture_weights', 0, 'mixture_110', '-'), ('mixture_weights', 0, 'mixture_111', '-'), ('mixture_weights', 0, 'mixture_112', '-'), ('mixture_weights', 0, 'mixture_113', '-'), ('mixture_weights', 0, 'mixture_114', '-'), ('mixture_weights', 0, 'mixture_115', '-'), ('mixture_weights', 0, 'mixture_116', '-'), ('mixture_weights', 0, 'mixture_117', '-'), ('mixture_weights', 0, 'mixture_118', '-'), ('mixture_weights', 0, 'mixture_119', '-'), ('mixture_weights', 0, 'mixture_120', '-'), ('mixture_weights', 0, 'mixture_121', '-'), ('mixture_weights', 0, 'mixture_122', '-'), ('mixture_weights', 0, 'mixture_123', '-'), ('mixture_weights', 0, 'mixture_124', '-'), ('mixture_weights', 0, 'mixture_125', '-'), ('mixture_weights', 0, 'mixture_126', '-'), ('mixture_weights', 0, 'mixture_127', '-'), ('mixture_weights', 0, 'mixture_128', '-'), ('mixture_weights', 0, 'mixture_129', '-'), ('mixture_weights', 0, 'mixture_130', '-'), ('mixture_weights', 0, 'mixture_131', '-'), ('mixture_weights', 0, 'mixture_132', '-'), ('mixture_weights', 0, 'mixture_133', '-'), ('mixture_weights', 0, 'mixture_134', '-'), ('mixture_weights', 0, 'mixture_135', '-'), ('mixture_weights', 0, 'mixture_136', '-'), ('mixture_weights', 0, 'mixture_137', '-'), ('mixture_weights', 0, 'mixture_138', '-'), ('mixture_weights', 0, 'mixture_139', '-'), ('mixture_weights', 0, 'mixture_140', '-'), ('mixture_weights', 0, 'mixture_141', '-'), ('mixture_weights', 0, 'mixture_142', '-'), ('mixture_weights', 0, 'mixture_143', '-'), ('mixture_weights', 0, 'mixture_144', '-'), ('mixture_weights', 0, 'mixture_145', '-'), ('mixture_weights', 0, 'mixture_146', '-'), ('mixture_weights', 0, 'mixture_147', '-'), ('mixture_weights', 0, 'mixture_148', '-'), ('mixture_weights', 0, 'mixture_149', '-'), ('mixture_weights', 0, 'mixture_150', '-'), ('mixture_weights', 0, 'mixture_151', '-'), ('mixture_weights', 0, 'mixture_152', '-'), ('mixture_weights', 0, 'mixture_153', '-'), ('mixture_weights', 0, 'mixture_154', '-'), ('mixture_weights', 0, 'mixture_155', '-'), ('mixture_weights', 0, 'mixture_156', '-'), ('mixture_weights', 0, 'mixture_157', '-'), ('mixture_weights', 0, 'mixture_158', '-'), ('mixture_weights', 0, 'mixture_159', '-'), ('mixture_weights', 0, 'mixture_160', '-'), ('mixture_weights', 0, 'mixture_161', '-'), ('mixture_weights', 0, 'mixture_162', '-'), ('mixture_weights', 0, 'mixture_163', '-'), ('mixture_weights', 0, 'mixture_164', '-'), ('mixture_weights', 0, 'mixture_165', '-'), ('mixture_weights', 0, 'mixture_166', '-'), ('mixture_weights', 0, 'mixture_167', '-'), ('mixture_weights', 0, 'mixture_168', '-'), ('mixture_weights', 0, 'mixture_169', '-'), ('mixture_weights', 0, 'mixture_170', '-'), ('mixture_weights', 0, 'mixture_171', '-'), ('mixture_weights', 0, 'mixture_172', '-'), ('mixture_weights', 0, 'mixture_173', '-'), ('mixture_weights', 0, 'mixture_174', '-'), ('mixture_weights', 0, 'mixture_175', '-'), ('mixture_weights', 0, 'mixture_176', '-'), ('mixture_weights', 0, 'mixture_177', '-'), ('mixture_weights', 0, 'mixture_178', '-'), ('mixture_weights', 0, 'mixture_179', '-'), ('mixture_weights', 0, 'mixture_180', '-'), ('mixture_weights', 0, 'mixture_181', '-'), ('mixture_weights', 0, 'mixture_182', '-'), ('mixture_weights', 0, 'mixture_183', '-'), ('mixture_weights', 0, 'mixture_184', '-'), ('mixture_weights', 0, 'mixture_185', '-'), ('mixture_weights', 0, 'mixture_186', '-'), ('mixture_weights', 0, 'mixture_187', '-'), ('mixture_weights', 0, 'mixture_188', '-'), ('mixture_weights', 0, 'mixture_189', '-'), ('mixture_weights', 0, 'mixture_190', '-'), ('mixture_weights', 0, 'mixture_191', '-'), ('mixture_weights', 0, 'mixture_192', '-'), ('mixture_weights', 0, 'mixture_193', '-'), ('mixture_weights', 0, 'mixture_194', '-'), ('mixture_weights', 0, 'mixture_195', '-'), ('mixture_weights', 0, 'mixture_196', '-'), ('mixture_weights', 0, 'mixture_197', '-'), ('mixture_weights', 0, 'mixture_198', '-'), ('mixture_weights', 0, 'mixture_199', '-')]\"\nInput: dict(n_mixtures=4), Output: \"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-')]\"\nInput: dict(n_mixtures=2), Output: \"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-')]\"\nInput: dict(n_mixtures=100), Output: \"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-'), ('mixture_weights', 0, 'mixture_4', '-'), ('mixture_weights', 0, 'mixture_5', '-'), ('mixture_weights', 0, 'mixture_6', '-'), ('mixture_weights', 0, 'mixture_7', '-'), ('mixture_weights', 0, 'mixture_8', '-'), ('mixture_weights', 0, 'mixture_9', '-'), ('mixture_weights', 0, 'mixture_10', '-'), ('mixture_weights', 0, 'mixture_11', '-'), ('mixture_weights', 0, 'mixture_12', '-'), ('mixture_weights', 0, 'mixture_13', '-'), ('mixture_weights', 0, 'mixture_14', '-'), ('mixture_weights', 0, 'mixture_15', '-'), ('mixture_weights', 0, 'mixture_16', '-'), ('mixture_weights', 0, 'mixture_17', '-'), ('mixture_weights', 0, 'mixture_18', '-'), ('mixture_weights', 0, 'mixture_19', '-'), ('mixture_weights', 0, 'mixture_20', '-'), ('mixture_weights', 0, 'mixture_21', '-'), ('mixture_weights', 0, 'mixture_22', '-'), ('mixture_weights', 0, 'mixture_23', '-'), ('mixture_weights', 0, 'mixture_24', '-'), ('mixture_weights', 0, 'mixture_25', '-'), ('mixture_weights', 0, 'mixture_26', '-'), ('mixture_weights', 0, 'mixture_27', '-'), ('mixture_weights', 0, 'mixture_28', '-'), ('mixture_weights', 0, 'mixture_29', '-'), ('mixture_weights', 0, 'mixture_30', '-'), ('mixture_weights', 0, 'mixture_31', '-'), ('mixture_weights', 0, 'mixture_32', '-'), ('mixture_weights', 0, 'mixture_33', '-'), ('mixture_weights', 0, 'mixture_34', '-'), ('mixture_weights', 0, 'mixture_35', '-'), ('mixture_weights', 0, 'mixture_36', '-'), ('mixture_weights', 0, 'mixture_37', '-'), ('mixture_weights', 0, 'mixture_38', '-'), ('mixture_weights', 0, 'mixture_39', '-'), ('mixture_weights', 0, 'mixture_40', '-'), ('mixture_weights', 0, 'mixture_41', '-'), ('mixture_weights', 0, 'mixture_42', '-'), ('mixture_weights', 0, 'mixture_43', '-'), ('mixture_weights', 0, 'mixture_44', '-'), ('mixture_weights', 0, 'mixture_45', '-'), ('mixture_weights', 0, 'mixture_46', '-'), ('mixture_weights', 0, 'mixture_47', '-'), ('mixture_weights', 0, 'mixture_48', '-'), ('mixture_weights', 0, 'mixture_49', '-'), ('mixture_weights', 0, 'mixture_50', '-'), ('mixture_weights', 0, 'mixture_51', '-'), ('mixture_weights', 0, 'mixture_52', '-'), ('mixture_weights', 0, 'mixture_53', '-'), ('mixture_weights', 0, 'mixture_54', '-'), ('mixture_weights', 0, 'mixture_55', '-'), ('mixture_weights', 0, 'mixture_56', '-'), ('mixture_weights', 0, 'mixture_57', '-'), ('mixture_weights', 0, 'mixture_58', '-'), ('mixture_weights', 0, 'mixture_59', '-'), ('mixture_weights', 0, 'mixture_60', '-'), ('mixture_weights', 0, 'mixture_61', '-'), ('mixture_weights', 0, 'mixture_62', '-'), ('mixture_weights', 0, 'mixture_63', '-'), ('mixture_weights', 0, 'mixture_64', '-'), ('mixture_weights', 0, 'mixture_65', '-'), ('mixture_weights', 0, 'mixture_66', '-'), ('mixture_weights', 0, 'mixture_67', '-'), ('mixture_weights', 0, 'mixture_68', '-'), ('mixture_weights', 0, 'mixture_69', '-'), ('mixture_weights', 0, 'mixture_70', '-'), ('mixture_weights', 0, 'mixture_71', '-'), ('mixture_weights', 0, 'mixture_72', '-'), ('mixture_weights', 0, 'mixture_73', '-'), ('mixture_weights', 0, 'mixture_74', '-'), ('mixture_weights', 0, 'mixture_75', '-'), ('mixture_weights', 0, 'mixture_76', '-'), ('mixture_weights', 0, 'mixture_77', '-'), ('mixture_weights', 0, 'mixture_78', '-'), ('mixture_weights', 0, 'mixture_79', '-'), ('mixture_weights', 0, 'mixture_80', '-'), ('mixture_weights', 0, 'mixture_81', '-'), ('mixture_weights', 0, 'mixture_82', '-'), ('mixture_weights', 0, 'mixture_83', '-'), ('mixture_weights', 0, 'mixture_84', '-'), ('mixture_weights', 0, 'mixture_85', '-'), ('mixture_weights', 0, 'mixture_86', '-'), ('mixture_weights', 0, 'mixture_87', '-'), ('mixture_weights', 0, 'mixture_88', '-'), ('mixture_weights', 0, 'mixture_89', '-'), ('mixture_weights', 0, 'mixture_90', '-'), ('mixture_weights', 0, 'mixture_91', '-'), ('mixture_weights', 0, 'mixture_92', '-'), ('mixture_weights', 0, 'mixture_93', '-'), ('mixture_weights', 0, 'mixture_94', '-'), ('mixture_weights', 0, 'mixture_95', '-'), ('mixture_weights', 0, 'mixture_96', '-'), ('mixture_weights', 0, 'mixture_97', '-'), ('mixture_weights', 0, 'mixture_98', '-'), ('mixture_weights', 0, 'mixture_99', '-')]\"\nInput: dict(n_mixtures=3), Output: \"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-')]\"\nInput: dict(n_mixtures=5), Output: \"[('mixture_weights', 0, 'mixture_0', '-'), ('mixture_weights', 0, 'mixture_1', '-'), ('mixture_weights', 0, 'mixture_2', '-'), ('mixture_weights', 0, 'mixture_3', '-'), ('mixture_weights', 0, 'mixture_4', '-')]\"\n\nWrite a function that generates the output from the input.\n\nFunction: get_mixture_weights_index_tuples\n", "id": "3b345187965ded0c546c17259a03af6ed5bdbad5_0"}
{"example_str": "examples = [\n    dict(n=25),\n    dict(n=23),\n    dict(n=37),\n    dict(n=48),\n    dict(n=59),\n    dict(n=61),\n    dict(n=65),\n    dict(n=71),\n    dict(n=84),\n    dict(n=97),\n]\nexamples += [\n    dict(n=2),    # 2 is a prime number\n    dict(n=3),    # 3 is a prime number\n    dict(n=4),    # 4 is not a prime number (2 * 2)\n    dict(n=17),   # 17 is a prime number\n    dict(n=18),   # 18 is not a prime number (2 * 9)\n    dict(n=29),   # 29 is a prime number\n    dict(n=49),   # 49 is not a prime number (7 * 7)\n    dict(n=97),   # 97 is a prime number\n    dict(n=100),  # 100 is not a prime number (10 * 10)\n    dict(n=1)     # 1 is not a prime number by definition\n]\nexamples += [\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10)\n]", "code": "def prime(n):\n    if n == 1:\n        return False\n    else:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n", "func_name": "prime", "exec_status": true, "example_inputs": ["\"{'n': 25}\"", "\"{'n': 23}\"", "\"{'n': 37}\"", "\"{'n': 48}\"", "\"{'n': 59}\"", "\"{'n': 61}\"", "\"{'n': 65}\"", "\"{'n': 71}\"", "\"{'n': 84}\"", "\"{'n': 97}\""], "example_outputs": [{"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}], "parsed_inputs": [[["n", "25"]], [["n", "23"]], [["n", "37"]], [["n", "48"]], [["n", "59"]], [["n", "61"]], [["n", "65"]], [["n", "71"]], [["n", "84"]], [["n", "97"]]], "exec_code": "def prime(n):\n    if n == 1:\n        return False\n    else:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n", "output": "The function is:\n\n```python\ndef prime(n):\n    if n == 1:\n        return False\n    else:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n```", "choosed_example_idx": [1, 7, 3, 8, 9, 4, 5], "prompt": "Input: dict(n=23), Output: \"True\"\nInput: dict(n=71), Output: \"True\"\nInput: dict(n=48), Output: \"False\"\nInput: dict(n=84), Output: \"False\"\nInput: dict(n=97), Output: \"True\"\nInput: dict(n=59), Output: \"True\"\nInput: dict(n=61), Output: \"True\"\n\nFunction: prime\nWrite a function that generates the output from the input.\n", "id": "b84f6148274c8170b20befe9bd1dd9d20ddabc73_0"}
{"example_str": "examples = [\n    dict(d=\"10.50\"),\n    dict(d=\"20.75\"),\n    dict(d=\"30.00\"),\n    dict(d=\"40.25\"),\n    dict(d=\"50.50\"),\n    dict(d=\"60.00\"),\n    dict(d=\"70.75\"),\n    dict(d=\"80.50\"),\n    dict(d=\"90.25\"),\n    dict(d=\"100.00\"),\n]\nexamples += [\n    dict(d=\"123.45\"),  # 123 degrees and 45 minutes\n    dict(d=\"0.30\"),    # 0 degrees and 30 minutes\n    dict(d=\"180.00\"),  # 180 degrees and 0 minutes\n    dict(d=\"90.50\"),   # 90 degrees and 50 minutes\n    dict(d=\"360.59\"),  # 360 degrees and 59 minutes\n    dict(d=\"45.15\"),   # 45 degrees and 15 minutes\n    dict(d=\"270.25\"),  # 270 degrees and 25 minutes\n    dict(d=\"89.01\"),   # 89 degrees and 1 minute\n    dict(d=\"12.60\"),   # 12 degrees and 60 minutes (edge case)\n    dict(d=\"359.99\")   # 359 degrees and 99 minutes (unusual but for testing)\n]\nexamples += [\n    dict(d='34.30'),\n    dict(d='45.50'),\n    dict(d='120.45'),\n    dict(d='0.25'),\n    dict(d='180.00'),\n    dict(d='90.75'),\n    dict(d='360.60'),\n    dict(d='270.90'),\n    dict(d='89.15'),\n    dict(d='75.20'),\n]", "code": "def degree_to_float(d):\n    nums = d.split('.')\n    num1 = float(nums[0])\n    num2 = float('0.' + nums[1]) * 100 / 60\n    return str(num1 + num2)\n", "func_name": "degree_to_float", "exec_status": true, "example_inputs": ["\"{'d': '10.50'}\"", "\"{'d': '20.75'}\"", "\"{'d': '30.00'}\"", "\"{'d': '40.25'}\"", "\"{'d': '50.50'}\"", "\"{'d': '60.00'}\"", "\"{'d': '70.75'}\"", "\"{'d': '80.50'}\"", "\"{'d': '90.25'}\"", "\"{'d': '100.00'}\""], "example_outputs": [{"return": "\"'10.833333333333334'\""}, {"return": "\"'21.25'\""}, {"return": "\"'30.0'\""}, {"return": "\"'40.416666666666664'\""}, {"return": "\"'50.833333333333336'\""}, {"return": "\"'60.0'\""}, {"return": "\"'71.25'\""}, {"return": "\"'80.83333333333333'\""}, {"return": "\"'90.41666666666667'\""}, {"return": "\"'100.0'\""}, {"return": "\"'123.75'\""}, {"return": "\"'0.5'\""}, {"return": "\"'180.0'\""}, {"return": "\"'90.83333333333333'\""}, {"return": "\"'360.98333333333335'\""}, {"return": "\"'45.25'\""}, {"return": "\"'270.4166666666667'\""}, {"return": "\"'89.01666666666667'\""}, {"return": "\"'13.0'\""}, {"return": "\"'360.65'\""}, {"return": "\"'34.5'\""}, {"return": "\"'45.833333333333336'\""}, {"return": "\"'120.75'\""}, {"return": "\"'0.4166666666666667'\""}, {"return": "\"'180.0'\""}, {"return": "\"'91.25'\""}, {"return": "\"'361.0'\""}, {"return": "\"'271.5'\""}, {"return": "\"'89.25'\""}, {"return": "\"'75.33333333333333'\""}], "parsed_inputs": [[["d", "\"10.50\""]], [["d", "\"20.75\""]], [["d", "\"30.00\""]], [["d", "\"40.25\""]], [["d", "\"50.50\""]], [["d", "\"60.00\""]], [["d", "\"70.75\""]], [["d", "\"80.50\""]], [["d", "\"90.25\""]], [["d", "\"100.00\""]]], "exec_code": "def degree_to_float(d):\n    nums = d.split('.')\n    num1 = float(nums[0])\n    num2 = float('0.' + nums[1]) * 100 / 60\n    return str(num1 + num2)\n", "output": "The function is:\n\n```python\ndef degree_to_float(d):\n    nums = d.split('.')\n    num1 = float(nums[0])\n    num2 = float('0.' + nums[1]) * 100 / 60\n    return str(num1 + num2)\n\n```", "choosed_example_idx": [5, 7, 6, 1, 2, 4], "prompt": "Input: dict(d=\"60.00\"), Output: \"'60.0'\"\nInput: dict(d=\"80.50\"), Output: \"'80.83333333333333'\"\nInput: dict(d=\"70.75\"), Output: \"'71.25'\"\nInput: dict(d=\"20.75\"), Output: \"'21.25'\"\nInput: dict(d=\"30.00\"), Output: \"'30.0'\"\nInput: dict(d=\"50.50\"), Output: \"'50.833333333333336'\"\n\n\n\nFunction: degree_to_float\nWrite a function that generates the output from the input.\n", "id": "42e5d17b97c11f8fa07715ed0418b41ab239c640_0"}
{"example_str": "examples = [\n    dict(s_=[4, 4]),\n    dict(s_=[1, 3]),\n    dict(s_=[3, 1]),\n    dict(s_=[2, 2]),\n    dict(s_=[0, 0]),\n    dict(s_=[5, 5]),\n    dict(s_=[4, 3]),\n    dict(s_=[1, 1]),\n    dict(s_=[2, 4]),\n    dict(s_=[3, 2]),\n]\nexamples += [\n    dict(s_=[4, 4]),  # True, meets the first condition\n    dict(s_=[1, 3]),  # True, meets the second condition\n    dict(s_=[3, 1]),  # True, meets the third condition\n    dict(s_=[4, 3]),  # False, does not meet any condition\n    dict(s_=[2, 2]),  # False, does not meet any condition\n    dict(s_=[1, 4]),  # False, does not meet any condition\n    dict(s_=[3, 4]),  # False, does not meet any condition\n    dict(s_=[0, 0]),  # False, does not meet any condition\n    dict(s_=[4, 1]),  # False, does not meet any condition\n    dict(s_=[1, 1])   # False, does not meet any condition\n]\nexamples += [\n    dict(s_=[4, 4]),   # True, meets the first condition\n    dict(s_=[1, 3]),   # True, meets the second condition\n    dict(s_=[3, 1]),   # True, meets the third condition\n    dict(s_=[0, 0]),   # False, does not meet any condition\n    dict(s_=[4, 3]),   # False, does not meet any condition\n    dict(s_=[1, 4]),   # False, does not meet any condition\n    dict(s_=[3, 3]),   # False, does not meet any condition\n    dict(s_=[2, 2]),   # False, does not meet any condition\n    dict(s_=[4, 1]),   # False, does not meet any condition\n    dict(s_=[1, 1]),   # False, does not meet any condition\n]", "code": "def is_terminal(s_):\n    if s_[0] == 4 and s_[1] == 4:\n        return True\n    elif s_[0] == 1 and s_[1] == 3:\n        return True\n    elif s_[0] == 3 and s_[1] == 1:\n        return True\n    return False\n", "func_name": "is_terminal", "exec_status": true, "example_inputs": ["\"{'s_': [4, 4]}\"", "\"{'s_': [1, 3]}\"", "\"{'s_': [3, 1]}\"", "\"{'s_': [2, 2]}\"", "\"{'s_': [0, 0]}\"", "\"{'s_': [5, 5]}\"", "\"{'s_': [4, 3]}\"", "\"{'s_': [1, 1]}\"", "\"{'s_': [2, 4]}\"", "\"{'s_': [3, 2]}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}], "parsed_inputs": [[["s_", "[4, 4]"]], [["s_", "[1, 3]"]], [["s_", "[3, 1]"]], [["s_", "[2, 2]"]], [["s_", "[0, 0]"]], [["s_", "[5, 5]"]], [["s_", "[4, 3]"]], [["s_", "[1, 1]"]], [["s_", "[2, 4]"]], [["s_", "[3, 2]"]]], "exec_code": "def is_terminal(s_):\n    if s_[0] == 4 and s_[1] == 4:\n        return True\n    elif s_[0] == 1 and s_[1] == 3:\n        return True\n    elif s_[0] == 3 and s_[1] == 1:\n        return True\n    return False\n", "output": "The function is:\n\n```python\ndef is_terminal(s_):\n    if s_[0] == 4 and s_[1] == 4:\n        return True\n    elif s_[0] == 1 and s_[1] == 3:\n        return True\n    elif s_[0] == 3 and s_[1] == 1:\n        return True\n    return False\n\n```", "choosed_example_idx": [0, 2, 1, 7, 5, 6, 4, 9, 3, 8], "prompt": "Input: dict(s_=[4, 4]), Output: \"True\"\nInput: dict(s_=[3, 1]), Output: \"True\"\nInput: dict(s_=[1, 3]), Output: \"True\"\nInput: dict(s_=[1, 1]), Output: \"False\"\nInput: dict(s_=[5, 5]), Output: \"False\"\nInput: dict(s_=[4, 3]), Output: \"False\"\nInput: dict(s_=[0, 0]), Output: \"False\"\nInput: dict(s_=[3, 2]), Output: \"False\"\nInput: dict(s_=[2, 2]), Output: \"False\"\nInput: dict(s_=[2, 4]), Output: \"False\"\n\nWrite a function that generates the output from the input.\nFunction: is_terminal\n\n\n", "id": "a671e32fa4a53de5f58348c812bf6d28ca5aba98_0"}
{"example_str": "examples = [\n    dict(left=5, right=10),\n    dict(left=10, right=5),\n    dict(left=5, right=5),\n    dict(left=0, right=0),\n    dict(left=-5, right=5),\n    dict(left=5.5, right=10.5),\n    dict(left=10.5, right=5.5),\n    dict(left=5.5, right=5.5),\n    dict(left=-5.5, right=5.5),\n    dict(left=5, right=-5)\n]\nexamples += [\n    dict(left=5, right=10),\n    dict(left=10, right=10),\n    dict(left=15, right=10),\n    dict(left=3.5, right=4.1),\n    dict(left=7.0, right=7.0),\n    dict(left='apple', right='banana'),\n    dict(left='orange', right='apple'),\n    dict(left='same', right='same'),\n    dict(left=[1, 2], right=[1, 2, 3]),\n    dict(left=[1, 2, 3], right=[1, 2])\n]\nexamples += [\n    dict(left=1, right=2),\n    dict(left=5, right=5),\n    dict(left=10, right=9),\n    dict(left=0, right=0),\n    dict(left=-1, right=1),\n    dict(left=100, right=100),\n    dict(left=50, right=49),\n    dict(left=3.5, right=3.5),\n    dict(left=-10, right=-5),\n    dict(left=7.2, right=7.1)\n]", "code": "def do_le(left, right):\n    return left <= right\n", "func_name": "do_le", "exec_status": true, "example_inputs": ["\"{'left': 5, 'right': 10}\"", "\"{'left': 10, 'right': 5}\"", "\"{'left': 5, 'right': 5}\"", "\"{'left': 0, 'right': 0}\"", "\"{'left': -5, 'right': 5}\"", "\"{'left': 5.5, 'right': 10.5}\"", "\"{'left': 10.5, 'right': 5.5}\"", "\"{'left': 5.5, 'right': 5.5}\"", "\"{'left': -5.5, 'right': 5.5}\"", "\"{'left': 5, 'right': -5}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}], "parsed_inputs": [[["left", "5"], ["right", "10"]], [["left", "10"], ["right", "5"]], [["left", "5"], ["right", "5"]], [["left", "0"], ["right", "0"]], [["left", "-5"], ["right", "5"]], [["left", "5.5"], ["right", "10.5"]], [["left", "10.5"], ["right", "5.5"]], [["left", "5.5"], ["right", "5.5"]], [["left", "-5.5"], ["right", "5.5"]], [["left", "5"], ["right", "-5"]]], "exec_code": "def do_le(left, right):\n    return left <= right\n", "output": "The function is:\n\n```python\ndef do_le(left, right):\n    return left <= right\n\n```", "choosed_example_idx": [9, 2, 6, 7, 8], "prompt": "Function: do_le\nInput: dict(left=5, right=-5), Output: \"False\"\nInput: dict(left=5, right=5), Output: \"True\"\nInput: dict(left=10.5, right=5.5), Output: \"False\"\nInput: dict(left=5.5, right=5.5), Output: \"True\"\nInput: dict(left=-5.5, right=5.5), Output: \"True\"\n\n\nWrite a function that generates the output from the input.\n", "id": "1ccfc0feca69e13ffa865e0e18dbe58cfe305060_0"}
{"example_str": "examples = [\n    dict(value=0),\n    dict(value=1),\n    dict(value=2.5),\n    dict(value=-1),\n    dict(value=10),\n    dict(value=0.5),\n    dict(value=-0.5),\n    dict(value=100),\n    dict(value=0.01),\n    dict(value=-10),\n]\nexamples += [\n    dict(value=0),      # Example 1: Simple base case\n    dict(value=1),      # Example 2: Simple increment\n    dict(value=-1),     # Example 3: Negative value\n    dict(value=0.5),    # Example 4: Fractional positive\n    dict(value=-0.5),   # Example 5: Fractional negative\n    dict(value=10),     # Example 6: Larger positive number\n    dict(value=-10),    # Example 7: Larger negative number\n    dict(value=100),    # Example 8: Very large positive number\n    dict(value=-100),   # Example 9: Very large negative number\n    dict(value=2.71828) # Example 10: Specific float (approximation of e)\n]\nexamples += [\n    dict(value=0),\n    dict(value=1),\n    dict(value=2),\n    dict(value=0.5),\n    dict(value=10),\n    dict(value=-1),\n    dict(value=-0.5),\n    dict(value=100),\n    dict(value=0.1),\n    dict(value=50)\n]", "code": "def minimizer(value):\n    return 1 / (1 + value)\n", "func_name": "minimizer", "exec_status": true, "example_inputs": ["\"{'value': 0}\"", "\"{'value': 1}\"", "\"{'value': 2.5}\"", "\"{'value': -1}\"", "\"{'value': 10}\"", "\"{'value': 0.5}\"", "\"{'value': -0.5}\"", "\"{'value': 100}\"", "\"{'value': 0.01}\"", "\"{'value': -10}\""], "example_outputs": [{"return": "\"1.0\""}, {"return": "\"0.5\""}, {"return": "\"0.2857142857142857\""}, {"error": "<|EXCEPTION|> \"<class 'ZeroDivisionError'>: division by zero\""}, {"return": "\"0.09090909090909091\""}, {"return": "\"0.6666666666666666\""}, {"return": "\"2.0\""}, {"return": "\"0.009900990099009901\""}, {"return": "\"0.9900990099009901\""}, {"return": "\"-0.1111111111111111\""}, {"return": "\"1.0\""}, {"return": "\"0.5\""}, {"error": "<|EXCEPTION|> \"<class 'ZeroDivisionError'>: division by zero\""}, {"return": "\"0.6666666666666666\""}, {"return": "\"2.0\""}, {"return": "\"0.09090909090909091\""}, {"return": "\"-0.1111111111111111\""}, {"return": "\"0.009900990099009901\""}, {"return": "\"-0.010101010101010102\""}, {"return": "\"0.26894155362156696\""}, {"return": "\"1.0\""}, {"return": "\"0.5\""}, {"return": "\"0.3333333333333333\""}, {"return": "\"0.6666666666666666\""}, {"return": "\"0.09090909090909091\""}, {"error": "<|EXCEPTION|> \"<class 'ZeroDivisionError'>: division by zero\""}, {"return": "\"2.0\""}, {"return": "\"0.009900990099009901\""}, {"return": "\"0.9090909090909091\""}, {"return": "\"0.0196078431372549\""}], "parsed_inputs": [[["value", "0"]], [["value", "1"]], [["value", "2.5"]], [["value", "-1"]], [["value", "10"]], [["value", "0.5"]], [["value", "-0.5"]], [["value", "100"]], [["value", "0.01"]], [["value", "-10"]]], "exec_code": "def minimizer(value):\n    return 1 / (1 + value)\n", "output": "The function is:\n\n```python\ndef minimizer(value):\n    return 1 / (1 + value)\n\n```", "choosed_example_idx": [2, 8, 3, 0, 9], "prompt": "Function: minimizer\n\nInput: dict(value=2.5), Output: \"0.2857142857142857\"\nInput: dict(value=0.01), Output: \"0.9900990099009901\"\nInput: dict(value=-1), Output: \"<class 'ZeroDivisionError'>: division by zero\"\nInput: dict(value=0), Output: \"1.0\"\nInput: dict(value=-10), Output: \"-0.1111111111111111\"\n\n\n\nWrite a function that generates the output from the input.\n\n", "id": "1cadcd3903b653806e8dc7f058ca074521cb5448_0"}
{"example_str": "examples = [\n    dict(num=111),\n    dict(num=123),\n    dict(num=1357),\n    dict(num=98765),\n    dict(num=11111),\n    dict(num=1234),\n    dict(num=10987),\n    dict(num=9876),\n    dict(num=123456),\n    dict(num=111111),\n]\nexamples += [\n    dict(num=112345),  # True: has consecutive same digits (11), digits do not decrease\n    dict(num=123456),  # False: digits do not decrease but no consecutive same digits\n    dict(num=111123),  # True: has consecutive same digits (111), digits do not decrease\n    dict(num=654321),  # False: digits decrease (no consecutive same digits)\n    dict(num=223450),  # False: digits decrease (has consecutive same digits 22)\n    dict(num=123455),  # True: has consecutive same digits (55), digits do not decrease\n    dict(num=111111),  # True: all digits are the same and do not decrease\n    dict(num=135679),  # False: digits do not decrease but no consecutive same digits\n    dict(num=123344),  # True: has consecutive same digits (33), digits do not decrease\n    dict(num=567890)   # False: digits do not decrease but no consecutive same digits\n]\nexamples += [\n    dict(num=112345),  # True: has a pair of 1s, digits do not decrease\n    dict(num=223450),  # False: has a pair of 2s, but digits decrease (5 to 0)\n    dict(num=123789),  # False: digits increase, but no pair of consecutive digits\n    dict(num=111111),  # True: all digits are the same and increase\n    dict(num=135679),  # False: digits increase, but no consecutive same digits\n    dict(num=111123),  # True: has a pair of 1s, digits do not decrease\n    dict(num=122345),  # True: has a pair of 2s, digits do not decrease\n    dict(num=123455),  # True: ends with a pair of 5s, digits do not decrease\n    dict(num=123344),  # True: ends with a pair of 4s, digits do not decrease\n    dict(num=654321),  # False: digits decrease, no consecutive same digits\n]", "code": "def meets_criteria(num):\n    num = str(num)\n    for i in range(len(num) - 1):\n        if num[i] == num[i + 1]:\n            break\n    else:\n        return False\n    for i in range(len(num) - 1):\n        if int(num[i]) > int(num[i + 1]):\n            return False\n    return True\n", "func_name": "meets_criteria", "exec_status": true, "example_inputs": ["\"{'num': 111}\"", "\"{'num': 123}\"", "\"{'num': 1357}\"", "\"{'num': 98765}\"", "\"{'num': 11111}\"", "\"{'num': 1234}\"", "\"{'num': 10987}\"", "\"{'num': 9876}\"", "\"{'num': 123456}\"", "\"{'num': 111111}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}], "parsed_inputs": [[["num", "111"]], [["num", "123"]], [["num", "1357"]], [["num", "98765"]], [["num", "11111"]], [["num", "1234"]], [["num", "10987"]], [["num", "9876"]], [["num", "123456"]], [["num", "111111"]]], "exec_code": "def meets_criteria(num):\n    num = str(num)\n    for i in range(len(num) - 1):\n        if num[i] == num[i + 1]:\n            break\n    else:\n        return False\n    for i in range(len(num) - 1):\n        if int(num[i]) > int(num[i + 1]):\n            return False\n    return True\n", "output": "The function is:\n\n```python\ndef meets_criteria(num):\n    num = str(num)\n    for i in range(len(num) - 1):\n        if num[i] == num[i + 1]:\n            break\n    else:\n        return False\n    for i in range(len(num) - 1):\n        if int(num[i]) > int(num[i + 1]):\n            return False\n    return True\n\n```", "choosed_example_idx": [9, 2, 1, 7, 0], "prompt": "Input: dict(num=111111), Output: \"True\"\nInput: dict(num=1357), Output: \"False\"\nInput: dict(num=123), Output: \"False\"\nInput: dict(num=9876), Output: \"False\"\nInput: dict(num=111), Output: \"True\"\n\n\n\nFunction: meets_criteria\n\nWrite a function that generates the output from the input.\n", "id": "17a202dd316fd69a9740ed4d80f9a88e6da20d7b_0"}
{"example_str": "examples = [\n    dict(line=\"This is a test\"),\n    dict(line=\"Hello World\"),\n    dict(line=\"Python is fun\"),\n    dict(line=\"I love coding\"),\n    dict(line=\"Split and join strings\"),\n    dict(line=\"This is a very long sentence\"),\n    dict(line=\"A B C D E F\"),\n    dict(line=\"hello\"),\n    dict(line=\"multiple   spaces   between   words\"),\n    dict(line=\"\"),\n]\nexamples += [\n    dict(line=\"Hello world\"),\n    dict(line=\"\"),\n    dict(line=\"Python programming language\"),\n    dict(line=\"123 456 789\"),\n    dict(line=\"A B C D E F\"),\n    dict(line=\"singleword\"),\n    dict(line=\"Special characters !@#$%^&*()\"),\n    dict(line=\"With multiple   spaces\"),\n    dict(line=\"New-line\\ncharacter\"),\n    dict(line=\"Tabs\\tare\\there\")\n]\nexamples += [\n    dict(line=\"hello world\"),\n    dict(line=\"split this sentence\"),\n    dict(line=\"join-these-words\"),\n    dict(line=\"\"),\n    dict(line=\"a b c d e f g\"),\n    dict(line=\"123 456 789\"),\n    dict(line=\"singleword\"),\n    dict(line=\"a\"),\n    dict(line=\"example with multiple words\"),\n    dict(line=\"new-line character\\nincluded\")\n]", "code": "def split_and_join(line):\n    line = line.split(' ')\n    line = '-'.join(line)\n    return line\n", "func_name": "split_and_join", "exec_status": true, "example_inputs": ["\"{'line': 'This is a test'}\"", "\"{'line': 'Hello World'}\"", "\"{'line': 'Python is fun'}\"", "\"{'line': 'I love coding'}\"", "\"{'line': 'Split and join strings'}\"", "\"{'line': 'This is a very long sentence'}\"", "\"{'line': 'A B C D E F'}\"", "\"{'line': 'hello'}\"", "\"{'line': 'multiple   spaces   between   words'}\"", "\"{'line': ''}\""], "example_outputs": [{"return": "\"'This-is-a-test'\""}, {"return": "\"'Hello-World'\""}, {"return": "\"'Python-is-fun'\""}, {"return": "\"'I-love-coding'\""}, {"return": "\"'Split-and-join-strings'\""}, {"return": "\"'This-is-a-very-long-sentence'\""}, {"return": "\"'A-B-C-D-E-F'\""}, {"return": "\"'hello'\""}, {"return": "\"'multiple---spaces---between---words'\""}, {"return": "\"''\""}, {"return": "\"'Hello-world'\""}, {"return": "\"''\""}, {"return": "\"'Python-programming-language'\""}, {"return": "\"'123-456-789'\""}, {"return": "\"'A-B-C-D-E-F'\""}, {"return": "\"'singleword'\""}, {"return": "\"'Special-characters-!@#$%^&*()'\""}, {"return": "\"'With-multiple---spaces'\""}, {"return": "\"'New-line\\\\ncharacter'\""}, {"return": "\"'Tabs\\\\tare\\\\there'\""}, {"return": "\"'hello-world'\""}, {"return": "\"'split-this-sentence'\""}, {"return": "\"'join-these-words'\""}, {"return": "\"''\""}, {"return": "\"'a-b-c-d-e-f-g'\""}, {"return": "\"'123-456-789'\""}, {"return": "\"'singleword'\""}, {"return": "\"'a'\""}, {"return": "\"'example-with-multiple-words'\""}, {"return": "\"'new-line-character\\\\nincluded'\""}], "parsed_inputs": [[["line", "\"This is a test\""]], [["line", "\"Hello World\""]], [["line", "\"Python is fun\""]], [["line", "\"I love coding\""]], [["line", "\"Split and join strings\""]], [["line", "\"This is a very long sentence\""]], [["line", "\"A B C D E F\""]], [["line", "\"hello\""]], [["line", "\"multiple   spaces   between   words\""]], [["line", "\"\""]]], "exec_code": "def split_and_join(line):\n    line = line.split(' ')\n    line = '-'.join(line)\n    return line\n", "output": "The function is:\n\n```python\ndef split_and_join(line):\n    line = line.split(' ')\n    line = '-'.join(line)\n    return line\n\n```", "choosed_example_idx": [9, 2, 7, 6, 8, 0], "prompt": "Function: split_and_join\n\n\nInput: dict(line=\"\"), Output: \"''\"\nInput: dict(line=\"Python is fun\"), Output: \"'Python-is-fun'\"\nInput: dict(line=\"hello\"), Output: \"'hello'\"\nInput: dict(line=\"A B C D E F\"), Output: \"'A-B-C-D-E-F'\"\nInput: dict(line=\"multiple   spaces   between   words\"), Output: \"'multiple---spaces---between---words'\"\nInput: dict(line=\"This is a test\"), Output: \"'This-is-a-test'\"\n\nWrite a function that generates the output from the input.\n", "id": "d3311139bc1bceb9264e76d37c3ec91dfb7990d0_0"}
{"example_str": "examples = [\n    dict(s='1010'),\n    dict(s='1101'),\n    dict(s='1001'),\n    dict(s='1111'),\n    dict(s='0000'),\n    dict(s='0101'),\n    dict(s='1011'),\n    dict(s='0110'),\n    dict(s='1100'),\n    dict(s='2')  # This one will return -1 because it's not a valid binary number\n]\nexamples += [\n    dict(s=\"101\"),       # Binary for decimal 5\n    dict(s=\"1101\"),      # Binary for decimal 13\n    dict(s=\"100101\"),    # Binary for decimal 37\n    dict(s=\"111111\"),    # Binary for decimal 63\n    dict(s=\"0\"),         # Binary for decimal 0\n    dict(s=\"1\"),         # Binary for decimal 1\n    dict(s=\"0010\"),      # Binary for decimal 2\n    dict(s=\"abc\"),       # Invalid input, contains non-binary characters\n    dict(s=\"010101\"),    # Binary for decimal 21\n    dict(s=\"1100101\")    # Binary for decimal 101\n]\nexamples += [\n    dict(s='0'),\n    dict(s='1'),\n    dict(s='10'),\n    dict(s='101'),\n    dict(s='1101'),\n    dict(s='10010'),\n    dict(s='111111'),\n    dict(s='000000'),\n    dict(s='101010'),\n    dict(s='110011'),\n]", "code": "def trans(s):\n    num = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            num = num + 0\n        elif s[i] == '1':\n            num = num + 2 ** (len(s) - i - 1)\n        else:\n            return -1\n    return num\n", "func_name": "trans", "exec_status": true, "example_inputs": ["\"{'s': '1010'}\"", "\"{'s': '1101'}\"", "\"{'s': '1001'}\"", "\"{'s': '1111'}\"", "\"{'s': '0000'}\"", "\"{'s': '0101'}\"", "\"{'s': '1011'}\"", "\"{'s': '0110'}\"", "\"{'s': '1100'}\"", "\"{'s': '2'}\""], "example_outputs": [{"return": "\"10\""}, {"return": "\"13\""}, {"return": "\"9\""}, {"return": "\"15\""}, {"return": "\"0\""}, {"return": "\"5\""}, {"return": "\"11\""}, {"return": "\"6\""}, {"return": "\"12\""}, {"return": "\"-1\""}, {"return": "\"5\""}, {"return": "\"13\""}, {"return": "\"37\""}, {"return": "\"63\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"-1\""}, {"return": "\"21\""}, {"return": "\"101\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"5\""}, {"return": "\"13\""}, {"return": "\"18\""}, {"return": "\"63\""}, {"return": "\"0\""}, {"return": "\"42\""}, {"return": "\"51\""}], "parsed_inputs": [[["s", "\"1010\""]], [["s", "\"1101\""]], [["s", "\"1001\""]], [["s", "\"1111\""]], [["s", "\"0000\""]], [["s", "\"0101\""]], [["s", "\"1011\""]], [["s", "\"0110\""]], [["s", "\"1100\""]], [["s", "\"2\""]]], "exec_code": "def trans(s):\n    num = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            num = num + 0\n        elif s[i] == '1':\n            num = num + 2 ** (len(s) - i - 1)\n        else:\n            return -1\n    return num\n", "output": "The function is:\n\n```python\ndef trans(s):\n    num = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            num = num + 0\n        elif s[i] == '1':\n            num = num + 2 ** (len(s) - i - 1)\n        else:\n            return -1\n    return num\n\n```", "choosed_example_idx": [5, 2, 9, 4, 1], "prompt": "Input: dict(s=\"0101\"), Output: \"5\"\nInput: dict(s=\"1001\"), Output: \"9\"\nInput: dict(s=\"2\"), Output: \"-1\"\nInput: dict(s=\"0000\"), Output: \"0\"\nInput: dict(s=\"1101\"), Output: \"13\"\n\n\n\nWrite a function that generates the output from the input.\nFunction: trans\n\n", "id": "0e0f22e415152b97a47cc2fdc5475e53fc7a7fbb_0"}
{"example_str": "examples = [\n    dict(l=1),\n    dict(l=2),\n    dict(l=3.5),\n    dict(l=0),\n    dict(l=-1),\n    dict(l=10),\n    dict(l=0.5),\n    dict(l=-2.5),\n    dict(l=7),\n    dict(l=9.9)\n]\nexamples += [\n    dict(l=2),\n    dict(l=5.5),\n    dict(l=-3),\n    dict(l=0),\n    dict(l=10),\n    dict(l=-7.2),\n    dict(l=1),\n    dict(l=100),\n    dict(l=0.1),\n    dict(l=-0.5)\n]\nexamples += [\n    dict(l=1),\n    dict(l=2),\n    dict(l=3),\n    dict(l=4),\n    dict(l=5),\n    dict(l=6),\n    dict(l=7),\n    dict(l=8),\n    dict(l=9),\n    dict(l=10),\n]", "code": "def square(l):\n    return l * l\n", "func_name": "square", "exec_status": true, "example_inputs": ["\"{'l': 1}\"", "\"{'l': 2}\"", "\"{'l': 3.5}\"", "\"{'l': 0}\"", "\"{'l': -1}\"", "\"{'l': 10}\"", "\"{'l': 0.5}\"", "\"{'l': -2.5}\"", "\"{'l': 7}\"", "\"{'l': 9.9}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"4\""}, {"return": "\"12.25\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"100\""}, {"return": "\"0.25\""}, {"return": "\"6.25\""}, {"return": "\"49\""}, {"return": "\"98.01\""}, {"return": "\"4\""}, {"return": "\"30.25\""}, {"return": "\"9\""}, {"return": "\"0\""}, {"return": "\"100\""}, {"return": "\"51.84\""}, {"return": "\"1\""}, {"return": "\"10000\""}, {"return": "\"0.010000000000000002\""}, {"return": "\"0.25\""}, {"return": "\"1\""}, {"return": "\"4\""}, {"return": "\"9\""}, {"return": "\"16\""}, {"return": "\"25\""}, {"return": "\"36\""}, {"return": "\"49\""}, {"return": "\"64\""}, {"return": "\"81\""}, {"return": "\"100\""}], "parsed_inputs": [[["l", "1"]], [["l", "2"]], [["l", "3.5"]], [["l", "0"]], [["l", "-1"]], [["l", "10"]], [["l", "0.5"]], [["l", "-2.5"]], [["l", "7"]], [["l", "9.9"]]], "exec_code": "def square(l):\n    return l * l\n", "output": "The function is:\n\n```python\ndef square(l):\n    return l * l\n\n```", "choosed_example_idx": [1, 8, 9, 5, 6, 4, 0, 7, 2, 3], "prompt": "Function: square\n\nWrite a function that generates the output from the input.\n\n\nInput: dict(l=2), Output: \"4\"\nInput: dict(l=7), Output: \"49\"\nInput: dict(l=9.9), Output: \"98.01\"\nInput: dict(l=10), Output: \"100\"\nInput: dict(l=0.5), Output: \"0.25\"\nInput: dict(l=-1), Output: \"1\"\nInput: dict(l=1), Output: \"1\"\nInput: dict(l=-2.5), Output: \"6.25\"\nInput: dict(l=3.5), Output: \"12.25\"\nInput: dict(l=0), Output: \"0\"\n\n", "id": "81b24c4fff2272936dcef3f10dd549348e1efc7f_0"}
{"example_str": "examples = [\n    dict(p={'width': '10', 'height': '20'}),\n    dict(p={'width': '5', 'height': '30'}),\n    dict(p={'width': '100', 'height': '50'}),\n    dict(p={'width': '25', 'height': '75'}),\n    dict(p={'width': '1', 'height': '1'}),\n    dict(p={'width': '200', 'height': '100'}),\n    dict(p={'width': '300', 'height': '200'}),\n    dict(p={'width': '400', 'height': '300'}),\n    dict(p={'width': '500', 'height': '400'}),\n    dict(p={'width': '600', 'height': '500'}),\n]\nexamples += [\n    dict(p={'width': 1920, 'height': 1080}),\n    dict(p={'width': 1280, 'height': 720}),\n    dict(p={'width': 800, 'height': 600}),\n    dict(p={'width': 1024, 'height': 768}),\n    dict(p={'width': 2560, 'height': 1440}),\n    dict(p={'width': 3840, 'height': 2160}),\n    dict(p={'width': 1600, 'height': 900}),\n    dict(p={'width': 1366, 'height': 768}),\n    dict(p={'width': 320, 'height': 240}),\n    dict(p={'width': 1440, 'height': 900})\n]", "code": "def key(p):\n    return f\"{p['width']}x{p['height']}\"\n", "func_name": "key", "exec_status": true, "example_inputs": ["\"{'p': {'width': '10', 'height': '20'}}\"", "\"{'p': {'width': '5', 'height': '30'}}\"", "\"{'p': {'width': '100', 'height': '50'}}\"", "\"{'p': {'width': '25', 'height': '75'}}\"", "\"{'p': {'width': '1', 'height': '1'}}\"", "\"{'p': {'width': '200', 'height': '100'}}\"", "\"{'p': {'width': '300', 'height': '200'}}\"", "\"{'p': {'width': '400', 'height': '300'}}\"", "\"{'p': {'width': '500', 'height': '400'}}\"", "\"{'p': {'width': '600', 'height': '500'}}\""], "example_outputs": [{"return": "\"'10x20'\""}, {"return": "\"'5x30'\""}, {"return": "\"'100x50'\""}, {"return": "\"'25x75'\""}, {"return": "\"'1x1'\""}, {"return": "\"'200x100'\""}, {"return": "\"'300x200'\""}, {"return": "\"'400x300'\""}, {"return": "\"'500x400'\""}, {"return": "\"'600x500'\""}, {"return": "\"'1920x1080'\""}, {"return": "\"'1280x720'\""}, {"return": "\"'800x600'\""}, {"return": "\"'1024x768'\""}, {"return": "\"'2560x1440'\""}, {"return": "\"'3840x2160'\""}, {"return": "\"'1600x900'\""}, {"return": "\"'1366x768'\""}, {"return": "\"'320x240'\""}, {"return": "\"'1440x900'\""}], "parsed_inputs": [[["p", "{'width': '10', 'height': '20'}"]], [["p", "{'width': '5', 'height': '30'}"]], [["p", "{'width': '100', 'height': '50'}"]], [["p", "{'width': '25', 'height': '75'}"]], [["p", "{'width': '1', 'height': '1'}"]], [["p", "{'width': '200', 'height': '100'}"]], [["p", "{'width': '300', 'height': '200'}"]], [["p", "{'width': '400', 'height': '300'}"]], [["p", "{'width': '500', 'height': '400'}"]], [["p", "{'width': '600', 'height': '500'}"]]], "exec_code": "def key(p):\n    return f\"{p['width']}x{p['height']}\"\n", "output": "The function is:\n\n```python\ndef key(p):\n    return f\"{p['width']}x{p['height']}\"\n\n```", "choosed_example_idx": [9, 6, 2, 8, 0, 1, 4, 7, 5], "prompt": "Write a function that generates the output from the input.\n\n\nInput: dict(p={'width': '600', 'height': '500'}), Output: \"'600x500'\"\nInput: dict(p={'width': '300', 'height': '200'}), Output: \"'300x200'\"\nInput: dict(p={'width': '100', 'height': '50'}), Output: \"'100x50'\"\nInput: dict(p={'width': '500', 'height': '400'}), Output: \"'500x400'\"\nInput: dict(p={'width': '10', 'height': '20'}), Output: \"'10x20'\"\nInput: dict(p={'width': '5', 'height': '30'}), Output: \"'5x30'\"\nInput: dict(p={'width': '1', 'height': '1'}), Output: \"'1x1'\"\nInput: dict(p={'width': '400', 'height': '300'}), Output: \"'400x300'\"\nInput: dict(p={'width': '200', 'height': '100'}), Output: \"'200x100'\"\n\nFunction: key\n", "id": "5628a0ffcc7c54e12eeb7bdb2034e1337bba45b8_0"}
{"example_str": "examples = [\n    dict(field='Hello World'),\n    dict(field=''),\n    dict(field=123),\n    dict(field=0),\n    dict(field=[1, 2, 3]),\n    dict(field=[]),\n    dict(field={'a': 1, 'b': 2}),\n    dict(field={}),\n    dict(field=None),\n    dict(field=True),\n]\nexamples += [\n    dict(field=\"Hello\"),  # Example with a non-empty string\n    dict(field=\"\"),       # Example with an empty string\n    dict(field=123),      # Example with a non-zero integer\n    dict(field=0),        # Example with zero\n    dict(field=[]),       # Example with an empty list\n    dict(field=[1, 2, 3]),# Example with a non-empty list\n    dict(field=None),     # Example with None\n    dict(field=False),    # Example with boolean False\n    dict(field=True),     # Example with boolean True\n    dict(field={}),       # Example with an empty dictionary\n]\nexamples += [\n    dict(field='Hello'),      # Non-empty string, truthy\n    dict(field=''),           # Empty string, falsy\n    dict(field=123),          # Non-zero integer, truthy\n    dict(field=0),            # Zero, falsy\n    dict(field=[1, 2, 3]),    # Non-empty list, truthy\n    dict(field=[]),           # Empty list, falsy\n    dict(field={'key': 'value'}),  # Non-empty dictionary, truthy\n    dict(field={}),           # Empty dictionary, falsy\n    dict(field=None),         # None, falsy\n    dict(field=True)          # Boolean True, truthy\n]", "code": "def validate_field(field):\n    if field:\n        return field\n    else:\n        field = 'No results'\n        return field\n", "func_name": "validate_field", "exec_status": true, "example_inputs": ["\"{'field': 'Hello World'}\"", "\"{'field': ''}\"", "\"{'field': 123}\"", "\"{'field': 0}\"", "\"{'field': [1, 2, 3]}\"", "\"{'field': []}\"", "\"{'field': {'a': 1, 'b': 2}}\"", "\"{'field': {}}\"", "\"{'field': None}\"", "\"{'field': True}\""], "example_outputs": [{"return": "\"'Hello World'\""}, {"return": "\"'No results'\""}, {"return": "\"123\""}, {"return": "\"'No results'\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"'No results'\""}, {"return": "\"{'a': 1, 'b': 2}\""}, {"return": "\"'No results'\""}, {"return": "\"'No results'\""}, {"return": "\"True\""}, {"return": "\"'Hello'\""}, {"return": "\"'No results'\""}, {"return": "\"123\""}, {"return": "\"'No results'\""}, {"return": "\"'No results'\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"'No results'\""}, {"return": "\"'No results'\""}, {"return": "\"True\""}, {"return": "\"'No results'\""}, {"return": "\"'Hello'\""}, {"return": "\"'No results'\""}, {"return": "\"123\""}, {"return": "\"'No results'\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"'No results'\""}, {"return": "\"{'key': 'value'}\""}, {"return": "\"'No results'\""}, {"return": "\"'No results'\""}, {"return": "\"True\""}], "parsed_inputs": [[["field", "\"Hello World\""]], [["field", "\"\""]], [["field", "123"]], [["field", "0"]], [["field", "[1, 2, 3]"]], [["field", "[]"]], [["field", "{'a': 1, 'b': 2}"]], [["field", "{}"]], [["field", "None"]], [["field", "True"]]], "exec_code": "def validate_field(field):\n    if field:\n        return field\n    else:\n        field = 'No results'\n        return field\n", "output": "The function is:\n\n```python\ndef validate_field(field):\n    if field:\n        return field\n    else:\n        field = 'No results'\n        return field\n\n```", "choosed_example_idx": [1, 5, 0, 3, 8, 6, 4, 2, 9], "prompt": "Write a function that generates the output from the input.\n\nFunction: validate_field\nInput: dict(field=\"\"), Output: \"'No results'\"\nInput: dict(field=[]), Output: \"'No results'\"\nInput: dict(field=\"Hello World\"), Output: \"'Hello World'\"\nInput: dict(field=0), Output: \"'No results'\"\nInput: dict(field=None), Output: \"'No results'\"\nInput: dict(field={'a': 1, 'b': 2}), Output: \"{'a': 1, 'b': 2}\"\nInput: dict(field=[1, 2, 3]), Output: \"[1, 2, 3]\"\nInput: dict(field=123), Output: \"123\"\nInput: dict(field=True), Output: \"True\"\n\n", "id": "fdc4a9a4fd98893fff26e53aa86b63592a752795_0"}
{"example_str": "examples = [\n    dict(z=5),\n    dict(z=-3),\n    dict(z=0),\n    dict(z=3.14),\n    dict(z=-0.5),\n    dict(z=[1, 2, 3, 4, 5]),\n    dict(z=[-1, -2, -3, -4, -5]),\n    dict(z=[0, 0, 0, 0, 0]),\n    dict(z=[-1, 0, 1, 2, 3]),\n    dict(z=[-10, -5, 0, 5, 10]),\n]\nexamples += [\n    dict(z=0),\n    dict(z=-1),\n    dict(z=1),\n    dict(z=-10),\n    dict(z=10),\n    dict(z=0.5),\n    dict(z=-0.5),\n    dict(z=100),\n    dict(z=-100),\n    dict(z=3.14159)\n]\nexamples += [\n    dict(z=0),\n    dict(z=-1),\n    dict(z=1),\n    dict(z=-10),\n    dict(z=10),\n    dict(z=0.5),\n    dict(z=-0.5),\n    dict(z=100),\n    dict(z=-100),\n    dict(z=0.1)\n]", "code": "def relu(z):\n    return (z > 0) * z\n", "func_name": "relu", "exec_status": true, "example_inputs": ["\"{'z': 5}\"", "\"{'z': -3}\"", "\"{'z': 0}\"", "\"{'z': 3.14}\"", "\"{'z': -0.5}\"", "\"{'z': [1, 2, 3, 4, 5]}\"", "\"{'z': [-1, -2, -3, -4, -5]}\"", "\"{'z': [0, 0, 0, 0, 0]}\"", "\"{'z': [-1, 0, 1, 2, 3]}\"", "\"{'z': [-10, -5, 0, 5, 10]}\""], "example_outputs": [{"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"3.14\""}, {"return": "\"-0.0\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: '>' not supported between instances of 'list' and 'int'\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: '>' not supported between instances of 'list' and 'int'\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: '>' not supported between instances of 'list' and 'int'\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: '>' not supported between instances of 'list' and 'int'\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: '>' not supported between instances of 'list' and 'int'\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"10\""}, {"return": "\"0.5\""}, {"return": "\"-0.0\""}, {"return": "\"100\""}, {"return": "\"0\""}, {"return": "\"3.14159\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"10\""}, {"return": "\"0.5\""}, {"return": "\"-0.0\""}, {"return": "\"100\""}, {"return": "\"0\""}, {"return": "\"0.1\""}], "parsed_inputs": [[["z", "5"]], [["z", "-3"]], [["z", "0"]], [["z", "3.14"]], [["z", "-0.5"]], [["z", "[1, 2, 3, 4, 5]"]], [["z", "[-1, -2, -3, -4, -5]"]], [["z", "[0, 0, 0, 0, 0]"]], [["z", "[-1, 0, 1, 2, 3]"]], [["z", "[-10, -5, 0, 5, 10]"]]], "exec_code": "def relu(z):\n    return (z > 0) * z\n", "output": "The function is:\n\n```python\ndef relu(z):\n    return (z > 0) * z\n\n```", "choosed_example_idx": [2, 9, 6, 1, 0, 4], "prompt": "Write a function that generates the output from the input.\nInput: dict(z=0), Output: \"0\"\nInput: dict(z=[-10, -5, 0, 5, 10]), Output: \"<class 'TypeError'>: '>' not supported between instances of 'list' and 'int'\"\nInput: dict(z=[-1, -2, -3, -4, -5]), Output: \"<class 'TypeError'>: '>' not supported between instances of 'list' and 'int'\"\nInput: dict(z=-3), Output: \"0\"\nInput: dict(z=5), Output: \"5\"\nInput: dict(z=-0.5), Output: \"-0.0\"\n\nFunction: relu\n", "id": "2fb5f7d541acf70b716167b023f675bdf9ba5198_0"}
{"example_str": "examples = [\n    {'a': 2, 'b': 3},\n    {'a': 4.5, 'b': 1.2},\n    {'a': 0, 'b': 0},\n    {'a': -1, 'b': 1},\n    {'a': 10, 'b': -5},\n    {'a': 3, 'b': 3},\n    {'a': 2.5, 'b': 0.5},\n    {'a': 100, 'b': 200},\n    {'a': -10, 'b': 10},\n    {'a': 0.1, 'b': 0.2}\n]\nexamples += [\n    dict(a=5, b=3),\n    dict(a=10, b=20),\n    dict(a=-1, b=-1),\n    dict(a=0, b=0),\n    dict(a=100, b=200),\n    dict(a=-50, b=50),\n    dict(a=0.5, b=0.5),\n    dict(a=-10, b=5),\n    dict(a=1.5, b=2.5),\n    dict(a=999, b=1)\n]", "code": "def add(a, b):\n    return a + b\n", "func_name": "add", "exec_status": true, "example_inputs": ["\"{'a': 2, 'b': 3}\"", "\"{'a': 4.5, 'b': 1.2}\"", "\"{'a': 0, 'b': 0}\"", "\"{'a': -1, 'b': 1}\"", "\"{'a': 10, 'b': -5}\"", "\"{'a': 3, 'b': 3}\"", "\"{'a': 2.5, 'b': 0.5}\"", "\"{'a': 100, 'b': 200}\"", "\"{'a': -10, 'b': 10}\"", "\"{'a': 0.1, 'b': 0.2}\""], "example_outputs": [{"return": "\"5\""}, {"return": "\"5.7\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"5\""}, {"return": "\"6\""}, {"return": "\"3.0\""}, {"return": "\"300\""}, {"return": "\"0\""}, {"return": "\"0.30000000000000004\""}, {"return": "\"8\""}, {"return": "\"30\""}, {"return": "\"-2\""}, {"return": "\"0\""}, {"return": "\"300\""}, {"return": "\"0\""}, {"return": "\"1.0\""}, {"return": "\"-5\""}, {"return": "\"4.0\""}, {"return": "\"1000\""}], "parsed_inputs": [[["a", "2"], ["b", "3"]], [["a", "4.5"], ["b", "1.2"]], [["a", "0"], ["b", "0"]], [["a", "-1"], ["b", "1"]], [["a", "10"], ["b", "-5"]], [["a", "3"], ["b", "3"]], [["a", "2.5"], ["b", "0.5"]], [["a", "100"], ["b", "200"]], [["a", "-10"], ["b", "10"]], [["a", "0.1"], ["b", "0.2"]]], "exec_code": "def add(a, b):\n    return a + b\n", "output": "The function is:\n\n```python\ndef add(a, b):\n    return a + b\n\n```", "choosed_example_idx": [4, 2, 0, 8, 3, 1, 6, 9, 5, 7], "prompt": "Input: dict(a=10, b=-5), Output: \"5\"\nInput: dict(a=0, b=0), Output: \"0\"\nInput: dict(a=2, b=3), Output: \"5\"\nInput: dict(a=-10, b=10), Output: \"0\"\nInput: dict(a=-1, b=1), Output: \"0\"\nInput: dict(a=4.5, b=1.2), Output: \"5.7\"\nInput: dict(a=2.5, b=0.5), Output: \"3.0\"\nInput: dict(a=0.1, b=0.2), Output: \"0.30000000000000004\"\nInput: dict(a=3, b=3), Output: \"6\"\nInput: dict(a=100, b=200), Output: \"300\"\n\nFunction: add\nWrite a function that generates the output from the input.\n\n\n", "id": "33c50578b3013fd447853ff742a06e054a2db928_0"}
{"example_str": "examples = [\n    dict(n=0),\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n]\nexamples += [\n    {\"n\": 0},  # Base case, should return 1\n    {\"n\": 1},  # Base case, should return 1\n    {\"n\": 2},  # Should return 2 (1+1)\n    {\"n\": 3},  # Should return 3 (1+2)\n    {\"n\": 4},  # Should return 5 (2+3)\n    {\"n\": 5},  # Should return 8 (3+5)\n    {\"n\": 6},  # Should return 13 (5+8)\n    {\"n\": 7},  # Should return 21 (8+13)\n    {\"n\": 8},  # Should return 34 (13+21)\n    {\"n\": 9},  # Should return 55 (21+34)\n    {\"n\": 10}  # Should return 89 (34+55)\n]\nexamples += [\n    dict(n=0),\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9)\n]", "code": "def fib(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n", "func_name": "fib", "exec_status": true, "example_inputs": ["\"{'n': 0}\"", "\"{'n': 1}\"", "\"{'n': 2}\"", "\"{'n': 3}\"", "\"{'n': 4}\"", "\"{'n': 5}\"", "\"{'n': 6}\"", "\"{'n': 7}\"", "\"{'n': 8}\"", "\"{'n': 9}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"5\""}, {"return": "\"8\""}, {"return": "\"13\""}, {"return": "\"21\""}, {"return": "\"34\""}, {"return": "\"55\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"5\""}, {"return": "\"8\""}, {"return": "\"13\""}, {"return": "\"21\""}, {"return": "\"34\""}, {"return": "\"55\""}, {"return": "\"89\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"5\""}, {"return": "\"8\""}, {"return": "\"13\""}, {"return": "\"21\""}, {"return": "\"34\""}, {"return": "\"55\""}], "parsed_inputs": [[["n", "0"]], [["n", "1"]], [["n", "2"]], [["n", "3"]], [["n", "4"]], [["n", "5"]], [["n", "6"]], [["n", "7"]], [["n", "8"]], [["n", "9"]]], "exec_code": "def fib(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n", "output": "The function is:\n\n```python\ndef fib(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n```", "choosed_example_idx": [2, 5, 8, 3, 9, 4, 0], "prompt": "Write a function that generates the output from the input.\nInput: dict(n=2), Output: \"2\"\nInput: dict(n=5), Output: \"8\"\nInput: dict(n=8), Output: \"34\"\nInput: dict(n=3), Output: \"3\"\nInput: dict(n=9), Output: \"55\"\nInput: dict(n=4), Output: \"5\"\nInput: dict(n=0), Output: \"1\"\n\nFunction: fib\n\n", "id": "ebc876c81c644eed8bac923889d3983408220000_0"}
{"example_str": "examples = [\n    dict(url=\"https://www.example.com\"),\n    dict(url=\"http://example.com\"),\n    dict(url=\"ftp://example.com\"),\n    dict(url=\"www.example.com\"),\n    dict(url=\"example.com\"),\n    dict(url=\"https://example.com\"),\n    dict(url=\"http://www.example.com/path\"),\n    dict(url=\"ftp://user:password@example.com\"),\n    dict(url=\"://example.com\"),\n    dict(url=\"https:///example.com\"),\n]\nexamples += [\n    dict(url=\"http://example.com\"),  # '//': pos 5, returns 0\n    dict(url=\"https://example.com\"),  # '//': pos 6, returns 0\n    dict(url=\"ftp://example.com\"),  # '//': pos 3, returns 0\n    dict(url=\"http://www.example.com\"),  # '//': pos 5, returns 0\n    dict(url=\"https://www.example.com\"),  # '//': pos 6, returns 0\n    dict(url=\"ftp://www.example.com\"),  # '//': pos 3, returns 0\n    dict(url=\"http://subdomain.example.com\"),  # '//': pos 5, returns 0\n    dict(url=\"https://subdomain.example.com\"),  # '//': pos 6, returns 0\n    dict(url=\"ftp://subdomain.example.com\"),  # '//': pos 3, returns 0\n    dict(url=\"http://example.com/path//directory\"),  # '//': pos 22, returns 1\n]\nexamples += [\n    dict(url=\"http://example.com\"),  # Typical http URL\n    dict(url=\"https://example.com\"),  # Typical https URL\n    dict(url=\"ftp://example.com\"),  # URL with different protocol\n    dict(url=\"http://example.com//redirect\"),  # URL with '//' in path\n    dict(url=\"https://example.com//redirect\"),  # URL with '//' in path using https\n    dict(url=\"ftp://example.com//path\"),  # URL with '//' in path using ftp\n    dict(url=\"http://example.com/path//subpath\"),  # URL with '//' deep in path\n    dict(url=\"https://example.com/path//subpath\"),  # URL with '//' deep in path using https\n    dict(url=\"ftp://example.com/path//subpath\"),  # URL with '//' deep in path using ftp\n    dict(url=\"http://example.com:8080//service\")  # URL with port and '//' in path\n]", "code": "def redirection(url):\n    pos = url.rfind('//')\n    if pos > 6:\n        if pos > 7:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n", "func_name": "redirection", "exec_status": true, "example_inputs": ["\"{'url': 'https://www.example.com'}\"", "\"{'url': 'http://example.com'}\"", "\"{'url': 'ftp://example.com'}\"", "\"{'url': 'www.example.com'}\"", "\"{'url': 'example.com'}\"", "\"{'url': 'https://example.com'}\"", "\"{'url': 'http://www.example.com/path'}\"", "\"{'url': 'ftp://user:password@example.com'}\"", "\"{'url': '://example.com'}\"", "\"{'url': 'https:///example.com'}\""], "example_outputs": [{"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}], "parsed_inputs": [[["url", "\"https://www.example.com\""]], [["url", "\"http://example.com\""]], [["url", "\"ftp://example.com\""]], [["url", "\"www.example.com\""]], [["url", "\"example.com\""]], [["url", "\"https://example.com\""]], [["url", "\"http://www.example.com/path\""]], [["url", "\"ftp://user:password@example.com\""]], [["url", "\"://example.com\""]], [["url", "\"https:///example.com\""]]], "exec_code": "def redirection(url):\n    pos = url.rfind('//')\n    if pos > 6:\n        if pos > 7:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n", "output": "The function is:\n\n```python\ndef redirection(url):\n    pos = url.rfind('//')\n    if pos > 6:\n        if pos > 7:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n\n```", "choosed_example_idx": [9, 1, 2, 6, 7, 5, 0, 4, 3], "prompt": "Input: dict(url=\"https:///example.com\"), Output: \"0\"\nInput: dict(url=\"http://example.com\"), Output: \"0\"\nInput: dict(url=\"ftp://example.com\"), Output: \"0\"\nInput: dict(url=\"http://www.example.com/path\"), Output: \"0\"\nInput: dict(url=\"ftp://user:password@example.com\"), Output: \"0\"\nInput: dict(url=\"https://example.com\"), Output: \"0\"\nInput: dict(url=\"https://www.example.com\"), Output: \"0\"\nInput: dict(url=\"example.com\"), Output: \"0\"\nInput: dict(url=\"www.example.com\"), Output: \"0\"\n\nWrite a function that generates the output from the input.\n\n\nFunction: redirection\n\n\n", "id": "890ad1f890d3a29d6734f1fcfacb3363d973e89f_0"}
{"example_str": "examples = [\n    dict(coords=10, scale=2),\n    dict(coords=[1, 2, 3], scale=3),\n    dict(coords=(4, 5), scale=2.5),\n    dict(coords=20, scale=0.5),\n    dict(coords=[10, 20, 30], scale=1),\n    dict(coords=(1, 1), scale=1),\n    dict(coords=5, scale=-1),\n    dict(coords=[-1, -2, -3], scale=-2),\n    dict(coords=(10, 20, 30), scale=0),\n    dict(coords=0, scale=10)\n]\nexamples += [\n    dict(coords=[1, 2, 3], scale=2),\n    dict(coords=[4, 5, 6], scale=0.5),\n    dict(coords=[7, 8, 9], scale=3),\n    dict(coords=[10, 11, 12], scale=-1),\n    dict(coords=[0.5, 1.5, 2.5], scale=2),\n    dict(coords=[-1, -2, -3], scale=3),\n    dict(coords=(1, 2, 3), scale=4),  # Using a tuple for coords\n    dict(coords=5, scale=5),          # Single integer for coords\n    dict(coords=3.5, scale=1.5),      # Single float for coords\n    dict(coords=[1, 2, 3, 4, 5], scale=0)\n]", "code": "def scale_coords(coords, scale):\n    return coords * scale\n", "func_name": "scale_coords", "exec_status": true, "example_inputs": ["\"{'coords': 10, 'scale': 2}\"", "\"{'coords': [1, 2, 3], 'scale': 3}\"", "\"{'coords': (4, 5), 'scale': 2.5}\"", "\"{'coords': 20, 'scale': 0.5}\"", "\"{'coords': [10, 20, 30], 'scale': 1}\"", "\"{'coords': (1, 1), 'scale': 1}\"", "\"{'coords': 5, 'scale': -1}\"", "\"{'coords': [-1, -2, -3], 'scale': -2}\"", "\"{'coords': (10, 20, 30), 'scale': 0}\"", "\"{'coords': 0, 'scale': 10}\""], "example_outputs": [{"return": "\"20\""}, {"return": "\"[1, 2, 3, 1, 2, 3, 1, 2, 3]\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: can't multiply sequence by non-int of type 'float'\""}, {"return": "\"10.0\""}, {"return": "\"[10, 20, 30]\""}, {"return": "\"(1, 1)\""}, {"return": "\"-5\""}, {"return": "\"[]\""}, {"return": "\"()\""}, {"return": "\"0\""}, {"return": "\"[1, 2, 3, 1, 2, 3]\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: can't multiply sequence by non-int of type 'float'\""}, {"return": "\"[7, 8, 9, 7, 8, 9, 7, 8, 9]\""}, {"return": "\"[]\""}, {"return": "\"[0.5, 1.5, 2.5, 0.5, 1.5, 2.5]\""}, {"return": "\"[-1, -2, -3, -1, -2, -3, -1, -2, -3]\""}, {"return": "\"(1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)\""}, {"return": "\"25\""}, {"return": "\"5.25\""}, {"return": "\"[]\""}], "parsed_inputs": [[["coords", "10"], ["scale", "2"]], [["coords", "[1, 2, 3]"], ["scale", "3"]], [["coords", "(4, 5)"], ["scale", "2.5"]], [["coords", "20"], ["scale", "0.5"]], [["coords", "[10, 20, 30]"], ["scale", "1"]], [["coords", "(1, 1)"], ["scale", "1"]], [["coords", "5"], ["scale", "-1"]], [["coords", "[-1, -2, -3]"], ["scale", "-2"]], [["coords", "(10, 20, 30)"], ["scale", "0"]], [["coords", "0"], ["scale", "10"]]], "exec_code": "def scale_coords(coords, scale):\n    return coords * scale\n", "output": "The function is:\n\n```python\ndef scale_coords(coords, scale):\n    return coords * scale\n\n```", "choosed_example_idx": [6, 4, 3, 2, 7, 0, 5, 9], "prompt": "Input: dict(coords=5, scale=-1), Output: \"-5\"\nInput: dict(coords=[10, 20, 30], scale=1), Output: \"[10, 20, 30]\"\nInput: dict(coords=20, scale=0.5), Output: \"10.0\"\nInput: dict(coords=(4, 5), scale=2.5), Output: \"<class 'TypeError'>: can't multiply sequence by non-int of type 'float'\"\nInput: dict(coords=[-1, -2, -3], scale=-2), Output: \"[]\"\nInput: dict(coords=10, scale=2), Output: \"20\"\nInput: dict(coords=(1, 1), scale=1), Output: \"(1, 1)\"\nInput: dict(coords=0, scale=10), Output: \"0\"\n\nWrite a function that generates the output from the input.\nFunction: scale_coords\n\n\n", "id": "bbb22e72eae61b72661f2c596434d5cc73ba7fc5_0"}
{"example_str": "examples = [\n    dict(example=\"\"),\n    dict(example=\"a\"),\n    dict(example=\"aa\"),\n    dict(example=\"ab\"),\n    dict(example=\"abc\"),\n    dict(example=\"aab\"),\n    dict(example=\"aaa\"),\n    dict(example=\"abcd\"),\n    dict(example=\"aabb\"),\n    dict(example=\"abcdefghij\"),\n]\nexamples += [\n    dict(example=\"aabbcc\"),  # True: each character appears twice\n    dict(example=\"abcabc\"),  # True: each character appears twice\n    dict(example=\"aabc\"),    # False: 'a' appears twice, 'b' and 'c' once\n    dict(example=\"xyz\"),     # True: each character appears once\n    dict(example=\"aaabbb\"),  # False: 'a' and 'b' appear three times each\n    dict(example=\"\"),        # True: no characters, no frequency issues\n    dict(example=\"aaaa\"),    # True: 'a' appears four times\n    dict(example=\"aabbb\"),   # False: 'a' appears twice, 'b' three times\n    dict(example=\"112233\"),  # True: each number appears twice\n    dict(example=\"hello\"),   # False: different frequencies for each character\n]\nexamples += [\n    dict(example=\"aabbcc\"),  # True: a, b, c all appear twice\n    dict(example=\"abcabc\"),  # True: a, b, c all appear twice\n    dict(example=\"aabb\"),    # False: a, b appear twice, but only two types of characters\n    dict(example=\"xyz\"),     # True: x, y, z all appear once\n    dict(example=\"aabbccc\"), # False: a, b appear twice, c appears three times\n    dict(example=\"aaabbb\"),  # True: a, b both appear three times\n    dict(example=\"abcd\"),    # True: a, b, c, d all appear once\n    dict(example=\"aaaabb\"),  # False: a appears four times, b appears twice\n    dict(example=\"a\"),       # True: a appears once\n    dict(example=\"aabbbcccc\")# False: a appears twice, b appears three times, c appears four times\n]", "code": "def balanced_bonus(example):\n    chars_split = list(example)\n    letter_count = {}\n    for c in chars_split:\n        if c in letter_count:\n            letter_count[c] += 1\n        else:\n            letter_count[c] = 1\n    return len(set(letter_count.values())) <= 1\n", "func_name": "balanced_bonus", "exec_status": true, "example_inputs": ["\"{'example': ''}\"", "\"{'example': 'a'}\"", "\"{'example': 'aa'}\"", "\"{'example': 'ab'}\"", "\"{'example': 'abc'}\"", "\"{'example': 'aab'}\"", "\"{'example': 'aaa'}\"", "\"{'example': 'abcd'}\"", "\"{'example': 'aabb'}\"", "\"{'example': 'abcdefghij'}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}], "parsed_inputs": [[["example", "\"\""]], [["example", "\"a\""]], [["example", "\"aa\""]], [["example", "\"ab\""]], [["example", "\"abc\""]], [["example", "\"aab\""]], [["example", "\"aaa\""]], [["example", "\"abcd\""]], [["example", "\"aabb\""]], [["example", "\"abcdefghij\""]]], "exec_code": "def balanced_bonus(example):\n    chars_split = list(example)\n    letter_count = {}\n    for c in chars_split:\n        if c in letter_count:\n            letter_count[c] += 1\n        else:\n            letter_count[c] = 1\n    return len(set(letter_count.values())) <= 1\n", "output": "The function is:\n\n```python\ndef balanced_bonus(example):\n    chars_split = list(example)\n    letter_count = {}\n    for c in chars_split:\n        if c in letter_count:\n            letter_count[c] += 1\n        else:\n            letter_count[c] = 1\n    return len(set(letter_count.values())) <= 1\n\n```", "choosed_example_idx": [1, 3, 6], "prompt": "Function: balanced_bonus\n\n\nInput: dict(example=\"a\"), Output: \"True\"\nInput: dict(example=\"ab\"), Output: \"True\"\nInput: dict(example=\"aaa\"), Output: \"True\"\n\nWrite a function that generates the output from the input.\n", "id": "a77feb11a3ada0cc176a822b90169c5bc661a4a4_0"}
{"example_str": "examples = [\n    dict(num_of_rolls=1),\n    dict(num_of_rolls=2),\n    dict(num_of_rolls=3),\n    dict(num_of_rolls=4),\n    dict(num_of_rolls=5),\n    dict(num_of_rolls=10),\n    dict(num_of_rolls=20),\n    dict(num_of_rolls=0),\n    dict(num_of_rolls=-1),  # This will raise an error because range() doesn't accept negative numbers\n    dict(num_of_rolls=100),\n]", "code": "def makeintid(num_of_rolls):\n    word_id = ''\n    for i in range(num_of_rolls):\n        word_id += str(rolldice())\n    return word_id\n", "func_name": "makeintid", "exec_status": true, "example_inputs": ["\"{'num_of_rolls': 1}\"", "\"{'num_of_rolls': 2}\"", "\"{'num_of_rolls': 3}\"", "\"{'num_of_rolls': 4}\"", "\"{'num_of_rolls': 5}\"", "\"{'num_of_rolls': 10}\"", "\"{'num_of_rolls': 20}\"", "\"{'num_of_rolls': 0}\"", "\"{'num_of_rolls': -1}\"", "\"{'num_of_rolls': 100}\""], "example_outputs": [{"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'rolldice' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'rolldice' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'rolldice' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'rolldice' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'rolldice' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'rolldice' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'rolldice' is not defined\""}, {"trace": "[\"{'num_of_rolls': 0}\", \"Line 1->    word_id = ''\", \"{'word_id': ''}\", \"Line 2->    for i in range(num_of_rolls):\", \"Line 4->    return word_id\"]", "return": "\"''\""}, {"trace": "[\"{'num_of_rolls': -1}\", \"Line 1->    word_id = ''\", \"{'word_id': ''}\", \"Line 2->    for i in range(num_of_rolls):\", \"Line 4->    return word_id\"]", "return": "\"''\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'rolldice' is not defined\""}], "parsed_inputs": [[["num_of_rolls", "1"]], [["num_of_rolls", "2"]], [["num_of_rolls", "3"]], [["num_of_rolls", "4"]], [["num_of_rolls", "5"]], [["num_of_rolls", "10"]], [["num_of_rolls", "20"]], [["num_of_rolls", "0"]], [["num_of_rolls", "-1"]], [["num_of_rolls", "100"]]], "exec_code": "def makeintid(num_of_rolls):\n    word_id = ''\n    for i in range(num_of_rolls):\n        word_id += str(rolldice())\n    return word_id\n", "output": "The function is:\n\n```python\ndef makeintid(num_of_rolls):\n    word_id = ''\n    for i in range(num_of_rolls):\n        word_id += str(rolldice())\n    return word_id\n\n```", "choosed_example_idx": [4, 8, 9, 1, 5, 3, 6, 7, 2, 0], "prompt": "Function: makeintid\nInput: dict(num_of_rolls=5), Output: \"<class 'NameError'>: name 'rolldice' is not defined\"\nInput: dict(num_of_rolls=-1), Output: \"''\"\nInput: dict(num_of_rolls=100), Output: \"<class 'NameError'>: name 'rolldice' is not defined\"\nInput: dict(num_of_rolls=2), Output: \"<class 'NameError'>: name 'rolldice' is not defined\"\nInput: dict(num_of_rolls=10), Output: \"<class 'NameError'>: name 'rolldice' is not defined\"\nInput: dict(num_of_rolls=4), Output: \"<class 'NameError'>: name 'rolldice' is not defined\"\nInput: dict(num_of_rolls=20), Output: \"<class 'NameError'>: name 'rolldice' is not defined\"\nInput: dict(num_of_rolls=0), Output: \"''\"\nInput: dict(num_of_rolls=3), Output: \"<class 'NameError'>: name 'rolldice' is not defined\"\nInput: dict(num_of_rolls=1), Output: \"<class 'NameError'>: name 'rolldice' is not defined\"\n\nWrite a function that generates the output from the input.\n", "id": "031ddfcc7d2bb018cacbfa8752f707fc4dfd8131_0"}
{"example_str": "examples = [\n    dict(data={'review': ['good', 'bad', 'excellent']}),\n    dict(data={'review': ['I love this product', 'This product is terrible']}),\n    dict(data={'review': ['5 stars', '1 star']}),\n    dict(data={'review': ['This product is amazing', 'I hate this product']}),\n    dict(data={'review': ['The product is okay', 'The product is great']}),\n    dict(data={'review': ['I would recommend this product', 'I would not recommend this product']}),\n    dict(data={'review': ['The product is good but expensive', 'The product is bad and cheap']}),\n    dict(data={'review': ['The product is perfect', 'The product is terrible']}),\n    dict(data={'review': ['I am satisfied with the product', 'I am not satisfied with the product']}),\n    dict(data={'review': ['The product is excellent', 'The product is bad', 'The product is okay']}),\n]\nexamples += [\n    dict(data={'review': ['Great product!', 'Fast shipping!']}),\n    dict(data={'review': ['Could be better', 'Not what I expected']}),\n    dict(data={'review': []}),  # Empty list of reviews\n    dict(data={'review': ['Five stars', 'Will buy again', 'Highly recommended']}),\n    dict(data={'review': ['Poor quality', 'Item broke after one use']}),\n    dict(data={'review': ['Excellent service', 'Very satisfied customer']}),\n    dict(data={'review': ['Not as described', 'Returning this item']}),\n    dict(data={'review': ['Okay for the price']}),\n    dict(data={'review': ['Too small', 'Looks different from the picture', 'Color is off']}),\n    dict(data={'review': ['Amazing!', 'Exceeded my expectations', 'Well worth the money']})\n]\nexamples += [\n    dict(data={'review': ['Great product!', 'Loved it!']}),\n    dict(data={'review': ['Could be better', 'Not what I expected']}),\n    dict(data={'review': ['Excellent service', 'Will buy again']}),\n    dict(data={'review': ['Poor quality', 'Broke after one use']}),\n    dict(data={'review': ['Okay, but not great', 'Mediocre at best']}),\n    dict(data={'review': ['Fast delivery', 'Well packaged']}),\n    dict(data={'review': ['Too expensive', 'Not worth the price']}),\n    dict(data={'review': ['Amazing experience', 'Highly recommend']}),\n    dict(data={'review': ['Not as described', 'Disappointed']}),\n    dict(data={'review': ['Perfect condition', 'Exactly what I needed']})\n]", "code": "def getReview(data):\n    listReview = []\n    for review in data['review']:\n        listReview.append(review)\n    return listReview\n", "func_name": "getReview", "exec_status": true, "example_inputs": ["\"{'data': {'review': ['good', 'bad', 'excellent']}}\"", "\"{'data': {'review': ['I love this product', 'This product is terrible']}}\"", "\"{'data': {'review': ['5 stars', '1 star']}}\"", "\"{'data': {'review': ['This product is amazing', 'I hate this product']}}\"", "\"{'data': {'review': ['The product is okay', 'The product is great']}}\"", "\"{'data': {'review': ['I would recommend this product', 'I would not recommend this product']}}\"", "\"{'data': {'review': ['The product is good but expensive', 'The product is bad and cheap']}}\"", "\"{'data': {'review': ['The product is perfect', 'The product is terrible']}}\"", "\"{'data': {'review': ['I am satisfied with the product', 'I am not satisfied with the product']}}\"", "\"{'data': {'review': ['The product is excellent', 'The product is bad', 'The product is okay']}}\""], "example_outputs": [{"return": "\"['good', 'bad', 'excellent']\""}, {"return": "\"['I love this product', 'This product is terrible']\""}, {"return": "\"['5 stars', '1 star']\""}, {"return": "\"['This product is amazing', 'I hate this product']\""}, {"return": "\"['The product is okay', 'The product is great']\""}, {"return": "\"['I would recommend this product', 'I would not recommend this product']\""}, {"return": "\"['The product is good but expensive', 'The product is bad and cheap']\""}, {"return": "\"['The product is perfect', 'The product is terrible']\""}, {"return": "\"['I am satisfied with the product', 'I am not satisfied with the product']\""}, {"return": "\"['The product is excellent', 'The product is bad', 'The product is okay']\""}, {"return": "\"['Great product!', 'Fast shipping!']\""}, {"return": "\"['Could be better', 'Not what I expected']\""}, {"return": "\"[]\""}, {"return": "\"['Five stars', 'Will buy again', 'Highly recommended']\""}, {"return": "\"['Poor quality', 'Item broke after one use']\""}, {"return": "\"['Excellent service', 'Very satisfied customer']\""}, {"return": "\"['Not as described', 'Returning this item']\""}, {"return": "\"['Okay for the price']\""}, {"return": "\"['Too small', 'Looks different from the picture', 'Color is off']\""}, {"return": "\"['Amazing!', 'Exceeded my expectations', 'Well worth the money']\""}, {"return": "\"['Great product!', 'Loved it!']\""}, {"return": "\"['Could be better', 'Not what I expected']\""}, {"return": "\"['Excellent service', 'Will buy again']\""}, {"return": "\"['Poor quality', 'Broke after one use']\""}, {"return": "\"['Okay, but not great', 'Mediocre at best']\""}, {"return": "\"['Fast delivery', 'Well packaged']\""}, {"return": "\"['Too expensive', 'Not worth the price']\""}, {"return": "\"['Amazing experience', 'Highly recommend']\""}, {"return": "\"['Not as described', 'Disappointed']\""}, {"return": "\"['Perfect condition', 'Exactly what I needed']\""}], "parsed_inputs": [[["data", "{'review': ['good', 'bad', 'excellent']}"]], [["data", "{'review': ['I love this product', 'This product is terrible']}"]], [["data", "{'review': ['5 stars', '1 star']}"]], [["data", "{'review': ['This product is amazing', 'I hate this product']}"]], [["data", "{'review': ['The product is okay', 'The product is great']}"]], [["data", "{'review': ['I would recommend this product', 'I would not recommend this product']}"]], [["data", "{'review': ['The product is good but expensive', 'The product is bad and cheap']}"]], [["data", "{'review': ['The product is perfect', 'The product is terrible']}"]], [["data", "{'review': ['I am satisfied with the product', 'I am not satisfied with the product']}"]], [["data", "{'review': ['The product is excellent', 'The product is bad', 'The product is okay']}"]]], "exec_code": "def getReview(data):\n    listReview = []\n    for review in data['review']:\n        listReview.append(review)\n    return listReview\n", "output": "The function is:\n\n```python\ndef getReview(data):\n    listReview = []\n    for review in data['review']:\n        listReview.append(review)\n    return listReview\n\n```", "choosed_example_idx": [3, 1, 0, 6, 8, 4, 2, 5], "prompt": "Input: dict(data={'review': ['This product is amazing', 'I hate this product']}), Output: \"['This product is amazing', 'I hate this product']\"\nInput: dict(data={'review': ['I love this product', 'This product is terrible']}), Output: \"['I love this product', 'This product is terrible']\"\nInput: dict(data={'review': ['good', 'bad', 'excellent']}), Output: \"['good', 'bad', 'excellent']\"\nInput: dict(data={'review': ['The product is good but expensive', 'The product is bad and cheap']}), Output: \"['The product is good but expensive', 'The product is bad and cheap']\"\nInput: dict(data={'review': ['I am satisfied with the product', 'I am not satisfied with the product']}), Output: \"['I am satisfied with the product', 'I am not satisfied with the product']\"\nInput: dict(data={'review': ['The product is okay', 'The product is great']}), Output: \"['The product is okay', 'The product is great']\"\nInput: dict(data={'review': ['5 stars', '1 star']}), Output: \"['5 stars', '1 star']\"\nInput: dict(data={'review': ['I would recommend this product', 'I would not recommend this product']}), Output: \"['I would recommend this product', 'I would not recommend this product']\"\n\n\nWrite a function that generates the output from the input.\nFunction: getReview\n", "id": "aee2502f16cc49eef0ce8c519e03db43dfc41a6b_0"}
{"example_str": "examples = [\n    dict(x=3.14159, d=2),\n    dict(x=2.71828, d=3),\n    dict(x=1.23456, d=1),\n    dict(x=0.98765, d=4),\n    dict(x=10.5, d=0),\n    dict(x=-3.14159, d=2),\n    dict(x=123.456, d=1),\n    dict(x=0.01234, d=3),\n    dict(x=9.8765, d=2),\n    dict(x=0.5, d=0),\n]\nexamples += [\n    dict(x=123.456, d=2),\n    dict(x=-123.456, d=1),\n    dict(x=0.987, d=3),\n    dict(x=5.5),\n    dict(x=-2.345, d=2),\n    dict(x=0.9999, d=3),\n    dict(x=100, d=0),\n    dict(x=-100.567, d=1),\n    dict(x=2.5, d=0),\n    dict(x=2.499, d=0)\n]\nexamples += [\n    dict(x=3.14159, d=2),\n    dict(x=2.71828, d=3),\n    dict(x=0.5, d=0),\n    dict(x=123.456, d=1),\n    dict(x=-0.1, d=0),\n    dict(x=-0.75, d=1),\n    dict(x=0.333333, d=3),\n    dict(x=10.49999, d=0),\n    dict(x=-3.14159, d=2),\n    dict(x=25.987654, d=4)\n]", "code": "def round(x, d=0):\n    p = 10 ** d\n    return (x * p * 2 + 1) // 2 / p\n", "func_name": "round", "exec_status": true, "example_inputs": ["\"{'x': 3.14159, 'd': 2}\"", "\"{'x': 2.71828, 'd': 3}\"", "\"{'x': 1.23456, 'd': 1}\"", "\"{'x': 0.98765, 'd': 4}\"", "\"{'x': 10.5, 'd': 0}\"", "\"{'x': -3.14159, 'd': 2}\"", "\"{'x': 123.456, 'd': 1}\"", "\"{'x': 0.01234, 'd': 3}\"", "\"{'x': 9.8765, 'd': 2}\"", "\"{'x': 0.5, 'd': 0}\""], "example_outputs": [{"return": "\"3.14\""}, {"return": "\"2.718\""}, {"return": "\"1.2\""}, {"return": "\"0.9877\""}, {"return": "\"11.0\""}, {"return": "\"-3.14\""}, {"return": "\"123.5\""}, {"return": "\"0.012\""}, {"return": "\"9.88\""}, {"return": "\"1.0\""}, {"return": "\"123.46\""}, {"return": "\"-123.5\""}, {"return": "\"0.987\""}, {"return": "\"6.0\""}, {"return": "\"-2.35\""}, {"return": "\"1.0\""}, {"return": "\"100.0\""}, {"return": "\"-100.6\""}, {"return": "\"3.0\""}, {"return": "\"2.0\""}, {"return": "\"3.14\""}, {"return": "\"2.718\""}, {"return": "\"1.0\""}, {"return": "\"123.5\""}, {"return": "\"0.0\""}, {"return": "\"-0.7\""}, {"return": "\"0.333\""}, {"return": "\"10.0\""}, {"return": "\"-3.14\""}, {"return": "\"25.9877\""}], "parsed_inputs": [[["x", "3.14159"], ["d", "2"]], [["x", "2.71828"], ["d", "3"]], [["x", "1.23456"], ["d", "1"]], [["x", "0.98765"], ["d", "4"]], [["x", "10.5"], ["d", "0"]], [["x", "-3.14159"], ["d", "2"]], [["x", "123.456"], ["d", "1"]], [["x", "0.01234"], ["d", "3"]], [["x", "9.8765"], ["d", "2"]], [["x", "0.5"], ["d", "0"]]], "exec_code": "def round(x, d=0):\n    p = 10 ** d\n    return (x * p * 2 + 1) // 2 / p\n", "output": "The function is:\n\n```python\ndef round(x, d=0):\n    p = 10 ** d\n    return (x * p * 2 + 1) // 2 / p\n\n```", "choosed_example_idx": [3, 8, 4, 7], "prompt": "Write a function that generates the output from the input.\n\nInput: dict(x=0.98765, d=4), Output: \"0.9877\"\nInput: dict(x=9.8765, d=2), Output: \"9.88\"\nInput: dict(x=10.5, d=0), Output: \"11.0\"\nInput: dict(x=0.01234, d=3), Output: \"0.012\"\n\nFunction: round\n", "id": "eacc91db14cd128b423e104eccf854a79ca593ac_0"}
{"example_str": "examples = [\n    dict(device='sda', index=1),\n    dict(device='nvme0n1', index=2),\n    dict(device='mmcblk0', index=3),\n    dict(device='sdb', index=4),\n    dict(device='nvme1n2', index=5),\n    dict(device='mmcblk1', index=6),\n    dict(device='sdc', index=7),\n    dict(device='nvme2n3', index=8),\n    dict(device='mmcblk2', index=9),\n    dict(device='nvme3n4', index=10),\n]\nexamples += [\n    dict(device='nvme0n1', index=1),\n    dict(device='nvme0n1', index=2),\n    dict(device='sda', index=1),\n    dict(device='sda', index=2),\n    dict(device='nvme1n1', index=3),\n    dict(device='sdb', index=1),\n    dict(device='sdb', index=5),\n    dict(device='nvme2n1', index=1),\n    dict(device='hda', index=1),\n    dict(device='nvme3n1', index=4)\n]\nexamples += [\n    dict(device='nvme0n1', index=1),\n    dict(device='sda', index=1),\n    dict(device='nvme0n1', index=2),\n    dict(device='sdb', index=2),\n    dict(device='nvme1n1', index=3),\n    dict(device='sdc', index=3),\n    dict(device='nvme2n1', index=4),\n    dict(device='sdd', index=4),\n    dict(device='nvme3n1', index=5),\n    dict(device='sde', index=5)\n]", "code": "def partition_index_to_name(device, index):\n    part_delimiter = ''\n    if 'nvme' in device:\n        part_delimiter = 'p'\n    return device + part_delimiter + str(index)\n", "func_name": "partition_index_to_name", "exec_status": true, "example_inputs": ["\"{'device': 'sda', 'index': 1}\"", "\"{'device': 'nvme0n1', 'index': 2}\"", "\"{'device': 'mmcblk0', 'index': 3}\"", "\"{'device': 'sdb', 'index': 4}\"", "\"{'device': 'nvme1n2', 'index': 5}\"", "\"{'device': 'mmcblk1', 'index': 6}\"", "\"{'device': 'sdc', 'index': 7}\"", "\"{'device': 'nvme2n3', 'index': 8}\"", "\"{'device': 'mmcblk2', 'index': 9}\"", "\"{'device': 'nvme3n4', 'index': 10}\""], "example_outputs": [{"return": "\"'sda1'\""}, {"return": "\"'nvme0n1p2'\""}, {"return": "\"'mmcblk03'\""}, {"return": "\"'sdb4'\""}, {"return": "\"'nvme1n2p5'\""}, {"return": "\"'mmcblk16'\""}, {"return": "\"'sdc7'\""}, {"return": "\"'nvme2n3p8'\""}, {"return": "\"'mmcblk29'\""}, {"return": "\"'nvme3n4p10'\""}, {"return": "\"'nvme0n1p1'\""}, {"return": "\"'nvme0n1p2'\""}, {"return": "\"'sda1'\""}, {"return": "\"'sda2'\""}, {"return": "\"'nvme1n1p3'\""}, {"return": "\"'sdb1'\""}, {"return": "\"'sdb5'\""}, {"return": "\"'nvme2n1p1'\""}, {"return": "\"'hda1'\""}, {"return": "\"'nvme3n1p4'\""}, {"return": "\"'nvme0n1p1'\""}, {"return": "\"'sda1'\""}, {"return": "\"'nvme0n1p2'\""}, {"return": "\"'sdb2'\""}, {"return": "\"'nvme1n1p3'\""}, {"return": "\"'sdc3'\""}, {"return": "\"'nvme2n1p4'\""}, {"return": "\"'sdd4'\""}, {"return": "\"'nvme3n1p5'\""}, {"return": "\"'sde5'\""}], "parsed_inputs": [[["device", "\"sda\""], ["index", "1"]], [["device", "\"nvme0n1\""], ["index", "2"]], [["device", "\"mmcblk0\""], ["index", "3"]], [["device", "\"sdb\""], ["index", "4"]], [["device", "\"nvme1n2\""], ["index", "5"]], [["device", "\"mmcblk1\""], ["index", "6"]], [["device", "\"sdc\""], ["index", "7"]], [["device", "\"nvme2n3\""], ["index", "8"]], [["device", "\"mmcblk2\""], ["index", "9"]], [["device", "\"nvme3n4\""], ["index", "10"]]], "exec_code": "def partition_index_to_name(device, index):\n    part_delimiter = ''\n    if 'nvme' in device:\n        part_delimiter = 'p'\n    return device + part_delimiter + str(index)\n", "output": "The function is:\n\n```python\ndef partition_index_to_name(device, index):\n    part_delimiter = ''\n    if 'nvme' in device:\n        part_delimiter = 'p'\n    return device + part_delimiter + str(index)\n\n```", "choosed_example_idx": [1, 4, 2], "prompt": "Write a function that generates the output from the input.\n\nInput: dict(device=\"nvme0n1\", index=2), Output: \"'nvme0n1p2'\"\nInput: dict(device=\"nvme1n2\", index=5), Output: \"'nvme1n2p5'\"\nInput: dict(device=\"mmcblk0\", index=3), Output: \"'mmcblk03'\"\n\nFunction: partition_index_to_name\n", "id": "29a7c501c7f6b2711e766c802afe7f3b169c1bae_0"}
{"example_str": "examples = [\n    dict(x=1),\n    dict(x=2.5),\n    dict(x=0),\n    dict(x=-3),\n    dict(x=10),\n    dict(x=0.1),\n    dict(x=-0.5),\n    dict(x=100),\n    dict(x=3.14),\n    dict(x=-20)\n]\nexamples += [\n    dict(x=2),\n    dict(x=5.5),\n    dict(x=-3),\n    dict(x=0),\n    dict(x=10),\n    dict(x=-7.2),\n    dict(x=1),\n    dict(x=100),\n    dict(x=-1),\n    dict(x=3.14159)\n]\nexamples += [\n    dict(x=1),\n    dict(x=2),\n    dict(x=3),\n    dict(x=4),\n    dict(x=5),\n    dict(x=-1),\n    dict(x=-2),\n    dict(x=0),\n    dict(x=10),\n    dict(x=0.5)\n]", "code": "def f(x):\n    return x * x\n", "func_name": "f", "exec_status": true, "example_inputs": ["\"{'x': 1}\"", "\"{'x': 2.5}\"", "\"{'x': 0}\"", "\"{'x': -3}\"", "\"{'x': 10}\"", "\"{'x': 0.1}\"", "\"{'x': -0.5}\"", "\"{'x': 100}\"", "\"{'x': 3.14}\"", "\"{'x': -20}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"6.25\""}, {"return": "\"0\""}, {"return": "\"9\""}, {"return": "\"100\""}, {"return": "\"0.010000000000000002\""}, {"return": "\"0.25\""}, {"return": "\"10000\""}, {"return": "\"9.8596\""}, {"return": "\"400\""}, {"return": "\"4\""}, {"return": "\"30.25\""}, {"return": "\"9\""}, {"return": "\"0\""}, {"return": "\"100\""}, {"return": "\"51.84\""}, {"return": "\"1\""}, {"return": "\"10000\""}, {"return": "\"1\""}, {"return": "\"9.869587728099999\""}, {"return": "\"1\""}, {"return": "\"4\""}, {"return": "\"9\""}, {"return": "\"16\""}, {"return": "\"25\""}, {"return": "\"1\""}, {"return": "\"4\""}, {"return": "\"0\""}, {"return": "\"100\""}, {"return": "\"0.25\""}], "parsed_inputs": [[["x", "1"]], [["x", "2.5"]], [["x", "0"]], [["x", "-3"]], [["x", "10"]], [["x", "0.1"]], [["x", "-0.5"]], [["x", "100"]], [["x", "3.14"]], [["x", "-20"]]], "exec_code": "def f(x):\n    return x * x\n", "output": "The function is:\n\n```python\ndef f(x):\n    return x * x\n\n```", "choosed_example_idx": [3, 9, 1], "prompt": "Input: dict(x=-3), Output: \"9\"\nInput: dict(x=-20), Output: \"400\"\nInput: dict(x=2.5), Output: \"6.25\"\n\n\n\nFunction: f\n\n\nWrite a function that generates the output from the input.\n\n", "id": "292909f62bb1b9cb2cbe2f98765a8554b82ed07a_0"}
{"example_str": "examples = [\n    dict(n=\"10\"),\n    dict(n=\"10.5\"),\n    dict(n=\"-10\"),\n    dict(n=\"0\"),\n    dict(n=\"10.0\"),\n    dict(n=\"abc\"),\n    dict(n=\"10e2\"),\n    dict(n=\"10.2e2\"),\n    dict(n=\"inf\"),\n    dict(n=\"nan\"),\n]\nexamples += [\n    dict(n=5),                # Integer input\n    dict(n=5.0),              # Float input that is an integer\n    dict(n=\"5\"),              # String input that can be converted to an integer\n    dict(n=\"5.0\"),            # String input that can be converted to a float which is an integer\n    dict(n=\"5.1\"),            # String input that can be converted to a float but not an integer\n    dict(n=\"a\"),              # String input that cannot be converted to a float\n    dict(n=None),             # None input, cannot be converted to a float\n    dict(n=[5]),              # List input, cannot be converted to a float\n    dict(n=5.5),              # Float input that is not an integer\n    dict(n=-3),               # Negative integer input\n]\nexamples += [\n    dict(n=1),             # Integer, should return True\n    dict(n=1.0),           # Float that is an integer, should return True\n    dict(n=1.5),           # Float that is not an integer, should return False\n    dict(n='2'),           # String that can be an integer, should return True\n    dict(n='2.0'),         # String that is a float integer, should return True\n    dict(n='3.5'),         # String that is a float non-integer, should return False\n    dict(n='abc'),         # String that cannot be converted, should return False\n    dict(n=None),          # None, should raise an exception or return False\n    dict(n=[1]),           # List, should raise an exception or return False\n    dict(n={'a': 1}),      # Dictionary, should raise an exception or return False\n]", "code": "def is_integer(n):\n    try:\n        float(n)\n    except ValueError:\n        return False\n    else:\n        return float(n).is_integer()\n", "func_name": "is_integer", "exec_status": true, "example_inputs": ["\"{'n': '10'}\"", "\"{'n': '10.5'}\"", "\"{'n': '-10'}\"", "\"{'n': '0'}\"", "\"{'n': '10.0'}\"", "\"{'n': 'abc'}\"", "\"{'n': '10e2'}\"", "\"{'n': '10.2e2'}\"", "\"{'n': 'inf'}\"", "\"{'n': 'nan'}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: float() argument must be a string or a number, not 'NoneType'\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: float() argument must be a string or a number, not 'list'\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: float() argument must be a string or a number, not 'NoneType'\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: float() argument must be a string or a number, not 'list'\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: float() argument must be a string or a number, not 'dict'\""}], "parsed_inputs": [[["n", "\"10\""]], [["n", "\"10.5\""]], [["n", "\"-10\""]], [["n", "\"0\""]], [["n", "\"10.0\""]], [["n", "\"abc\""]], [["n", "\"10e2\""]], [["n", "\"10.2e2\""]], [["n", "\"inf\""]], [["n", "\"nan\""]]], "exec_code": "def is_integer(n):\n    try:\n        float(n)\n    except ValueError:\n        return False\n    else:\n        return float(n).is_integer()\n", "output": "The function is:\n\n```python\ndef is_integer(n):\n    try:\n        float(n)\n    except ValueError:\n        return False\n    else:\n        return float(n).is_integer()\n\n```", "choosed_example_idx": [2, 8, 6, 7, 9, 5, 1, 3, 4, 0], "prompt": "Write a function that generates the output from the input.\nInput: dict(n=\"-10\"), Output: \"True\"\nInput: dict(n=\"inf\"), Output: \"False\"\nInput: dict(n=\"10e2\"), Output: \"True\"\nInput: dict(n=\"10.2e2\"), Output: \"True\"\nInput: dict(n=\"nan\"), Output: \"False\"\nInput: dict(n=\"abc\"), Output: \"False\"\nInput: dict(n=\"10.5\"), Output: \"False\"\nInput: dict(n=\"0\"), Output: \"True\"\nInput: dict(n=\"10.0\"), Output: \"True\"\nInput: dict(n=\"10\"), Output: \"True\"\n\nFunction: is_integer\n\n\n", "id": "8c73d357f9048096f6b3f5738c91aa1867c98bd5_0"}
{"example_str": "examples = [\n    dict(letter='a', key=1, alpha=list('abcdefghijklmnopqrstuvwxyz')),\n    dict(letter='z', key=1, alpha=list('abcdefghijklmnopqrstuvwxyz')),\n    dict(letter='m', key=5, alpha=list('abcdefghijklmnopqrstuvwxyz')),\n    dict(letter='x', key=-3, alpha=list('abcdefghijklmnopqrstuvwxyz')),\n    dict(letter='b', key=26, alpha=list('abcdefghijklmnopqrstuvwxyz')),\n    dict(letter='e', key=0, alpha=list('abcdefghijklmnopqrstuvwxyz')),\n    dict(letter='k', key=10, alpha=list('abcdefghijklmnopqrstuvwxyz')),\n    dict(letter='q', key=-10, alpha=list('abcdefghijklmnopqrstuvwxyz')),\n    dict(letter='t', key=20, alpha=list('abcdefghijklmnopqrstuvwxyz')),\n    dict(letter='j', key=15, alpha=list('abcdefghijklmnopqrstuvwxyz')),\n]\nexamples += [\n    dict(letter='a', key=1, alpha=list('abcdefghijklmnopqrstuvwxyz')),\n    dict(letter='z', key=1, alpha=list('abcdefghijklmnopqrstuvwxyz')),\n    dict(letter='a', key=26, alpha=list('abcdefghijklmnopqrstuvwxyz')),\n    dict(letter='m', key=13, alpha=list('abcdefghijklmnopqrstuvwxyz')),\n    dict(letter='y', key=3, alpha=list('abcdefghijklmnopqrstuvwxyz')),\n    dict(letter='b', key=-1, alpha=list('abcdefghijklmnopqrstuvwxyz')),\n    dict(letter='c', key=-3, alpha=list('abcdefghijklmnopqrstuvwxyz')),\n    dict(letter='z', key=-1, alpha=list('abcdefghijklmnopqrstuvwxyz')),\n    dict(letter='a', key=0, alpha=list('abcdefghijklmnopqrstuvwxyz')),\n    dict(letter='n', key=26, alpha=list('abcdefghijklmnopqrstuvwxyz'))\n]\nexamples += [\n    dict(letter='a', key=1, alpha='abcdefghijklmnopqrstuvwxyz'),\n    dict(letter='z', key=1, alpha='abcdefghijklmnopqrstuvwxyz'),\n    dict(letter='m', key=5, alpha='abcdefghijklmnopqrstuvwxyz'),\n    dict(letter='x', key=3, alpha='abcdefghijklmnopqrstuvwxyz'),\n    dict(letter='b', key=10, alpha='abcdefghijklmnopqrstuvwxyz'),\n    dict(letter='k', key=15, alpha='abcdefghijklmnopqrstuvwxyz'),\n    dict(letter='p', key=20, alpha='abcdefghijklmnopqrstuvwxyz'),\n    dict(letter='c', key=-1, alpha='abcdefghijklmnopqrstuvwxyz'),\n    dict(letter='y', key=-5, alpha='abcdefghijklmnopqrstuvwxyz'),\n    dict(letter='d', key=-10, alpha='abcdefghijklmnopqrstuvwxyz')\n]", "code": "def get_new_letter(letter, key, alpha):\n    new_letter_index = alpha.index(letter) + key\n    return alpha[new_letter_index] if new_letter_index <= 25 else alpha[-1 +\n        new_letter_index % 25]\n", "func_name": "get_new_letter", "exec_status": true, "example_inputs": ["\"{'letter': 'a', 'key': 1, 'alpha': ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']}\"", "\"{'letter': 'z', 'key': 1, 'alpha': ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']}\"", "\"{'letter': 'm', 'key': 5, 'alpha': ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']}\"", "\"{'letter': 'x', 'key': -3, 'alpha': ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']}\"", "\"{'letter': 'b', 'key': 26, 'alpha': ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']}\"", "\"{'letter': 'e', 'key': 0, 'alpha': ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']}\"", "\"{'letter': 'k', 'key': 10, 'alpha': ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']}\"", "\"{'letter': 'q', 'key': -10, 'alpha': ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']}\"", "\"{'letter': 't', 'key': 20, 'alpha': ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']}\"", "\"{'letter': 'j', 'key': 15, 'alpha': ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']}\""], "example_outputs": [{"return": "\"'b'\""}, {"return": "\"'a'\""}, {"return": "\"'r'\""}, {"return": "\"'u'\""}, {"return": "\"'b'\""}, {"return": "\"'e'\""}, {"return": "\"'u'\""}, {"return": "\"'g'\""}, {"return": "\"'n'\""}, {"return": "\"'y'\""}, {"return": "\"'b'\""}, {"return": "\"'a'\""}, {"return": "\"'a'\""}, {"return": "\"'z'\""}, {"return": "\"'b'\""}, {"return": "\"'a'\""}, {"return": "\"'z'\""}, {"return": "\"'y'\""}, {"return": "\"'a'\""}, {"return": "\"'n'\""}, {"return": "\"'b'\""}, {"return": "\"'a'\""}, {"return": "\"'r'\""}, {"return": "\"'a'\""}, {"return": "\"'l'\""}, {"return": "\"'z'\""}, {"return": "\"'j'\""}, {"return": "\"'b'\""}, {"return": "\"'t'\""}, {"return": "\"'t'\""}], "parsed_inputs": [[["letter", "\"a\""], ["key", "1"], ["alpha", "list('abcdefghijklmnopqrstuvwxyz')"]], [["letter", "\"z\""], ["key", "1"], ["alpha", "list('abcdefghijklmnopqrstuvwxyz')"]], [["letter", "\"m\""], ["key", "5"], ["alpha", "list('abcdefghijklmnopqrstuvwxyz')"]], [["letter", "\"x\""], ["key", "-3"], ["alpha", "list('abcdefghijklmnopqrstuvwxyz')"]], [["letter", "\"b\""], ["key", "26"], ["alpha", "list('abcdefghijklmnopqrstuvwxyz')"]], [["letter", "\"e\""], ["key", "0"], ["alpha", "list('abcdefghijklmnopqrstuvwxyz')"]], [["letter", "\"k\""], ["key", "10"], ["alpha", "list('abcdefghijklmnopqrstuvwxyz')"]], [["letter", "\"q\""], ["key", "-10"], ["alpha", "list('abcdefghijklmnopqrstuvwxyz')"]], [["letter", "\"t\""], ["key", "20"], ["alpha", "list('abcdefghijklmnopqrstuvwxyz')"]], [["letter", "\"j\""], ["key", "15"], ["alpha", "list('abcdefghijklmnopqrstuvwxyz')"]]], "exec_code": "def get_new_letter(letter, key, alpha):\n    new_letter_index = alpha.index(letter) + key\n    return alpha[new_letter_index] if new_letter_index <= 25 else alpha[-1 +\n        new_letter_index % 25]\n", "output": "The function is:\n\n```python\ndef get_new_letter(letter, key, alpha):\n    new_letter_index = alpha.index(letter) + key\n    return alpha[new_letter_index] if new_letter_index <= 25 else alpha[-1 +\n        new_letter_index % 25]\n\n```", "choosed_example_idx": [1, 6, 8, 4, 3, 2, 7], "prompt": "Input: dict(letter=\"z\", key=1, alpha=list('abcdefghijklmnopqrstuvwxyz')), Output: \"'a'\"\nInput: dict(letter=\"k\", key=10, alpha=list('abcdefghijklmnopqrstuvwxyz')), Output: \"'u'\"\nInput: dict(letter=\"t\", key=20, alpha=list('abcdefghijklmnopqrstuvwxyz')), Output: \"'n'\"\nInput: dict(letter=\"b\", key=26, alpha=list('abcdefghijklmnopqrstuvwxyz')), Output: \"'b'\"\nInput: dict(letter=\"x\", key=-3, alpha=list('abcdefghijklmnopqrstuvwxyz')), Output: \"'u'\"\nInput: dict(letter=\"m\", key=5, alpha=list('abcdefghijklmnopqrstuvwxyz')), Output: \"'r'\"\nInput: dict(letter=\"q\", key=-10, alpha=list('abcdefghijklmnopqrstuvwxyz')), Output: \"'g'\"\n\nWrite a function that generates the output from the input.\nFunction: get_new_letter\n", "id": "e3cc932c5abdecf87ef73ced5e763215fc03ddc5_0"}
{"example_str": "examples = [\n    dict(m_a=1e-05),\n    dict(m_a=5e-05),\n    dict(m_a=1e-04),\n    dict(m_a=2.5e-05),\n    dict(m_a=7.5e-05),\n    dict(m_a=1e-06),\n    dict(m_a=3e-05),\n    dict(m_a=9e-05),\n    dict(m_a=1.2e-05),\n    dict(m_a=4.8e-05),\n]\nexamples += [\n    dict(m_a=0.00005),   # Edge case, the base value used in the function\n    dict(m_a=0.0001),    # A value larger than the base value\n    dict(m_a=0.00001),   # A value smaller than the base value\n    dict(m_a=0.001),     # A significantly larger value\n    dict(m_a=0.000001),  # A significantly smaller value\n    dict(m_a=0.00002),   # Close to the base value, but smaller\n    dict(m_a=0.00007),   # Close to the base value, but larger\n    dict(m_a=0.0005),    # An order of magnitude larger than the base value\n    dict(m_a=0.000005),  # An order of magnitude smaller than the base value\n    dict(m_a=1e-6)       # A very small value to test the function's handling of small inputs\n]\nexamples += [\n    dict(m_a=0.00005),\n    dict(m_a=0.0001),\n    dict(m_a=0.0002),\n    dict(m_a=0.0003),\n    dict(m_a=0.0004),\n    dict(m_a=0.0005),\n    dict(m_a=0.0006),\n    dict(m_a=0.0007),\n    dict(m_a=0.0008),\n    dict(m_a=0.0009)\n]", "code": "def calc_Mchar(m_a):\n    return 6.6e-12 * (m_a / 5e-05) ** (-1 / 2)\n", "func_name": "calc_Mchar", "exec_status": true, "example_inputs": ["\"{'m_a': 1e-05}\"", "\"{'m_a': 5e-05}\"", "\"{'m_a': 0.0001}\"", "\"{'m_a': 2.5e-05}\"", "\"{'m_a': 7.5e-05}\"", "\"{'m_a': 1e-06}\"", "\"{'m_a': 3e-05}\"", "\"{'m_a': 9e-05}\"", "\"{'m_a': 1.2e-05}\"", "\"{'m_a': 4.8e-05}\""], "example_outputs": [{"return": "\"1.4758048651498614e-11\""}, {"return": "\"6.6e-12\""}, {"return": "\"4.666904755831214e-12\""}, {"return": "\"9.333809511662428e-12\""}, {"return": "\"5.388877434122993e-12\""}, {"return": "\"4.666904755831214e-11\""}, {"return": "\"8.520563361656318e-12\""}, {"return": "\"4.919349550499537e-12\""}, {"return": "\"1.347219358530748e-11\""}, {"return": "\"6.73609679265374e-12\""}, {"return": "\"6.6e-12\""}, {"return": "\"4.666904755831214e-12\""}, {"return": "\"1.4758048651498614e-11\""}, {"return": "\"1.4758048651498612e-12\""}, {"return": "\"4.666904755831214e-11\""}, {"return": "\"1.0435516278555651e-11\""}, {"return": "\"5.578018081208209e-12\""}, {"return": "\"2.0871032557111305e-12\""}, {"return": "\"2.0871032557111302e-11\""}, {"return": "\"4.666904755831214e-11\""}, {"return": "\"6.6e-12\""}, {"return": "\"4.666904755831214e-12\""}, {"return": "\"3.3e-12\""}, {"return": "\"2.6944387170614964e-12\""}, {"return": "\"2.333452377915607e-12\""}, {"return": "\"2.0871032557111305e-12\""}, {"return": "\"1.9052558883257653e-12\""}, {"return": "\"1.763924196622001e-12\""}, {"return": "\"1.65e-12\""}, {"return": "\"1.5556349186104045e-12\""}], "parsed_inputs": [[["m_a", "1e-05"]], [["m_a", "5e-05"]], [["m_a", "0.0001"]], [["m_a", "2.5e-05"]], [["m_a", "7.5e-05"]], [["m_a", "1e-06"]], [["m_a", "3e-05"]], [["m_a", "9e-05"]], [["m_a", "1.2e-05"]], [["m_a", "4.8e-05"]]], "exec_code": "def calc_Mchar(m_a):\n    return 6.6e-12 * (m_a / 5e-05) ** (-1 / 2)\n", "output": "The function is:\n\n```python\ndef calc_Mchar(m_a):\n    return 6.6e-12 * (m_a / 5e-05) ** (-1 / 2)\n\n```", "choosed_example_idx": [9, 4, 1, 2], "prompt": "Input: dict(m_a=4.8e-05), Output: \"6.73609679265374e-12\"\nInput: dict(m_a=7.5e-05), Output: \"5.388877434122993e-12\"\nInput: dict(m_a=5e-05), Output: \"6.6e-12\"\nInput: dict(m_a=0.0001), Output: \"4.666904755831214e-12\"\n\nWrite a function that generates the output from the input.\n\nFunction: calc_Mchar\n\n\n", "id": "0359e52f8fb3aa01a8d3b9fa8d6f6452c9b48526_0"}
{"example_str": "examples = [\n    dict(rgb=['10', '20', '30']),\n    dict(rgb=('40', '50', '60')),\n    dict(rgb=['70.5', '80.2', '90.1']),\n    dict(rgb=('100', '110', '120')),\n    dict(rgb=['130', '140', '150']),\n    dict(rgb=('160', '170', '180')),\n    dict(rgb=['190', '200', '210']),\n    dict(rgb=('220', '230', '240')),\n    dict(rgb=['250', '260', '270']),\n    dict(rgb=('280', '290', '300')),\n]\nexamples += [\n    dict(rgb=[255, 255, 255]),  # Example with maximum values for RGB\n    dict(rgb=[0, 0, 0]),        # Example with minimum values for RGB\n    dict(rgb=[128, 64, 32]),    # Example with mixed integer values\n    dict(rgb=[\"100\", \"150\", \"200\"]),  # Example with string values that are numbers\n    dict(rgb=[255, 0, 128]),    # Example with high contrast colors\n    dict(rgb=[45, 90, 135]),    # Example with increasing values\n    dict(rgb=[\"255\", \"0\", \"128\"]),  # Example with string and integer mix\n    dict(rgb=[0, 128, 255]),    # Example with reversed high contrast\n    dict(rgb=[123, 234, 56]),   # Example with random values\n    dict(rgb=[\"12\", \"34\", \"56\"]) # Example with low integer values as strings\n]\nexamples += [\n    dict(rgb=[255, 0, 0]),  # Bright red\n    dict(rgb=[0, 255, 0]),  # Bright green\n    dict(rgb=[0, 0, 255]),  # Bright blue\n    dict(rgb=[255, 255, 255]),  # White\n    dict(rgb=[0, 0, 0]),  # Black\n    dict(rgb=[128, 128, 128]),  # Gray\n    dict(rgb=[255, 165, 0]),  # Orange\n    dict(rgb=[255, 192, 203]),  # Pink\n    dict(rgb=[75, 0, 130]),  # Indigo\n    dict(rgb=[255, 255, 0]),  # Yellow\n]", "code": "def to_int_rgb(rgb):\n    r = int(rgb[0])\n    g = int(rgb[1])\n    b = int(rgb[2])\n    return r, g, b\n", "func_name": "to_int_rgb", "exec_status": true, "example_inputs": ["\"{'rgb': ['10', '20', '30']}\"", "\"{'rgb': ('40', '50', '60')}\"", "\"{'rgb': ['70.5', '80.2', '90.1']}\"", "\"{'rgb': ('100', '110', '120')}\"", "\"{'rgb': ['130', '140', '150']}\"", "\"{'rgb': ('160', '170', '180')}\"", "\"{'rgb': ['190', '200', '210']}\"", "\"{'rgb': ('220', '230', '240')}\"", "\"{'rgb': ['250', '260', '270']}\"", "\"{'rgb': ('280', '290', '300')}\""], "example_outputs": [{"return": "\"(10, 20, 30)\""}, {"return": "\"(40, 50, 60)\""}, {"error": "<|EXCEPTION|> \"<class 'ValueError'>: invalid literal for int() with base 10: '70.5'\""}, {"return": "\"(100, 110, 120)\""}, {"return": "\"(130, 140, 150)\""}, {"return": "\"(160, 170, 180)\""}, {"return": "\"(190, 200, 210)\""}, {"return": "\"(220, 230, 240)\""}, {"return": "\"(250, 260, 270)\""}, {"return": "\"(280, 290, 300)\""}, {"return": "\"(255, 255, 255)\""}, {"return": "\"(0, 0, 0)\""}, {"return": "\"(128, 64, 32)\""}, {"return": "\"(100, 150, 200)\""}, {"return": "\"(255, 0, 128)\""}, {"return": "\"(45, 90, 135)\""}, {"return": "\"(255, 0, 128)\""}, {"return": "\"(0, 128, 255)\""}, {"return": "\"(123, 234, 56)\""}, {"return": "\"(12, 34, 56)\""}, {"return": "\"(255, 0, 0)\""}, {"return": "\"(0, 255, 0)\""}, {"return": "\"(0, 0, 255)\""}, {"return": "\"(255, 255, 255)\""}, {"return": "\"(0, 0, 0)\""}, {"return": "\"(128, 128, 128)\""}, {"return": "\"(255, 165, 0)\""}, {"return": "\"(255, 192, 203)\""}, {"return": "\"(75, 0, 130)\""}, {"return": "\"(255, 255, 0)\""}], "parsed_inputs": [[["rgb", "['10', '20', '30']"]], [["rgb", "('40', '50', '60')"]], [["rgb", "['70.5', '80.2', '90.1']"]], [["rgb", "('100', '110', '120')"]], [["rgb", "['130', '140', '150']"]], [["rgb", "('160', '170', '180')"]], [["rgb", "['190', '200', '210']"]], [["rgb", "('220', '230', '240')"]], [["rgb", "['250', '260', '270']"]], [["rgb", "('280', '290', '300')"]]], "exec_code": "def to_int_rgb(rgb):\n    r = int(rgb[0])\n    g = int(rgb[1])\n    b = int(rgb[2])\n    return r, g, b\n", "output": "The function is:\n\n```python\ndef to_int_rgb(rgb):\n    r = int(rgb[0])\n    g = int(rgb[1])\n    b = int(rgb[2])\n    return r, g, b\n\n```", "choosed_example_idx": [2, 0, 4, 3], "prompt": "Function: to_int_rgb\nInput: dict(rgb=['70.5', '80.2', '90.1']), Output: \"<class 'ValueError'>: invalid literal for int() with base 10: '70.5'\"\nInput: dict(rgb=['10', '20', '30']), Output: \"(10, 20, 30)\"\nInput: dict(rgb=['130', '140', '150']), Output: \"(130, 140, 150)\"\nInput: dict(rgb=('100', '110', '120')), Output: \"(100, 110, 120)\"\n\nWrite a function that generates the output from the input.\n\n\n", "id": "55490999d9ae07ff2fa1e8f20c7da80e794c9335_0"}
{"example_str": "examples = [\n    dict(s=\"I have 2 dogs and 1 cat\"),\n    dict(s=\"There are 5 elephants and 3 lions\"),\n    dict(s=\"I saw 10 birds in the sky\"),\n    dict(s=\"The zoo has 20 monkeys and 15 giraffes\"),\n    dict(s=\"I have no animals\"),\n    dict(s=\"The pet store has 5 dogs 3 cats and 2 birds\"),\n    dict(s=\"The farm has 100 cows and 50 pigs\"),\n    dict(s=\"I have 1 dog and 2 cats\"),\n    dict(s=\"The aquarium has 50 fish and 20 sharks\"),\n    dict(s=\"I saw 25 rabbits and 10 squirrels in the park\"),\n]\nexamples += [\n    dict(s=\"2 cats 3 dogs\"),\n    dict(s=\"\"),\n    dict(s=\"5 lions 2 tigers 3 bears\"),\n    dict(s=\"no numbers here\"),\n    dict(s=\"123\"),\n    dict(s=\"one 1 two 2 three 3\"),\n    dict(s=\"10 20 30\"),\n    dict(s=\"Fish 100 Birds 200\"),\n    dict(s=\"0 0 0 0\"),\n    dict(s=\"1000 elephants 2000 mice\")\n]\nexamples += [\n    dict(s=\"2 cats 3 dogs\"),\n    dict(s=\"5 cows 1 horse 2 chickens\"),\n    dict(s=\"10 fish 20 birds\"),\n    dict(s=\"\"),\n    dict(s=\"no animals here\"),\n    dict(s=\"3 3 3\"),\n    dict(s=\"1 2 3 4 5\"),\n    dict(s=\"one two three\"),\n    dict(s=\"1000 mice 2000 hamsters\"),\n    dict(s=\"4 lions 6 tigers 2 bears\"),\n]", "code": "def count_animals(s):\n    lst = s.split()\n    sum = 0\n    for el in lst:\n        if el.isdigit():\n            sum = sum + int(el)\n    return sum\n", "func_name": "count_animals", "exec_status": true, "example_inputs": ["\"{'s': 'I have 2 dogs and 1 cat'}\"", "\"{'s': 'There are 5 elephants and 3 lions'}\"", "\"{'s': 'I saw 10 birds in the sky'}\"", "\"{'s': 'The zoo has 20 monkeys and 15 giraffes'}\"", "\"{'s': 'I have no animals'}\"", "\"{'s': 'The pet store has 5 dogs 3 cats and 2 birds'}\"", "\"{'s': 'The farm has 100 cows and 50 pigs'}\"", "\"{'s': 'I have 1 dog and 2 cats'}\"", "\"{'s': 'The aquarium has 50 fish and 20 sharks'}\"", "\"{'s': 'I saw 25 rabbits and 10 squirrels in the park'}\""], "example_outputs": [{"return": "\"3\""}, {"return": "\"8\""}, {"return": "\"10\""}, {"return": "\"35\""}, {"return": "\"0\""}, {"return": "\"10\""}, {"return": "\"150\""}, {"return": "\"3\""}, {"return": "\"70\""}, {"return": "\"35\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"10\""}, {"return": "\"0\""}, {"return": "\"123\""}, {"return": "\"6\""}, {"return": "\"60\""}, {"return": "\"300\""}, {"return": "\"0\""}, {"return": "\"3000\""}, {"return": "\"5\""}, {"return": "\"8\""}, {"return": "\"30\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"9\""}, {"return": "\"15\""}, {"return": "\"0\""}, {"return": "\"3000\""}, {"return": "\"12\""}], "parsed_inputs": [[["s", "\"I have 2 dogs and 1 cat\""]], [["s", "\"There are 5 elephants and 3 lions\""]], [["s", "\"I saw 10 birds in the sky\""]], [["s", "\"The zoo has 20 monkeys and 15 giraffes\""]], [["s", "\"I have no animals\""]], [["s", "\"The pet store has 5 dogs 3 cats and 2 birds\""]], [["s", "\"The farm has 100 cows and 50 pigs\""]], [["s", "\"I have 1 dog and 2 cats\""]], [["s", "\"The aquarium has 50 fish and 20 sharks\""]], [["s", "\"I saw 25 rabbits and 10 squirrels in the park\""]]], "exec_code": "def count_animals(s):\n    lst = s.split()\n    sum = 0\n    for el in lst:\n        if el.isdigit():\n            sum = sum + int(el)\n    return sum\n", "output": "The function is:\n\n```python\ndef count_animals(s):\n    lst = s.split()\n    sum = 0\n    for el in lst:\n        if el.isdigit():\n            sum = sum + int(el)\n    return sum\n\n```", "choosed_example_idx": [6, 4, 9, 8, 5, 0, 2], "prompt": "Function: count_animals\nInput: dict(s=\"The farm has 100 cows and 50 pigs\"), Output: \"150\"\nInput: dict(s=\"I have no animals\"), Output: \"0\"\nInput: dict(s=\"I saw 25 rabbits and 10 squirrels in the park\"), Output: \"35\"\nInput: dict(s=\"The aquarium has 50 fish and 20 sharks\"), Output: \"70\"\nInput: dict(s=\"The pet store has 5 dogs 3 cats and 2 birds\"), Output: \"10\"\nInput: dict(s=\"I have 2 dogs and 1 cat\"), Output: \"3\"\nInput: dict(s=\"I saw 10 birds in the sky\"), Output: \"10\"\n\n\nWrite a function that generates the output from the input.\n", "id": "ede29e26546ce73574232ef2455211a887a06819_0"}
{"example_str": "examples = [\n    dict(states=[True, True, True]),\n    dict(states=[False, False, False]),\n    dict(states=[True, False, True]),\n    dict(states=[]),\n    dict(states=[True]),\n    dict(states=[False]),\n    dict(states=[True, True, False, True]),\n    dict(states=[False, False, False, False]),\n    dict(states=[True, False, False, True, False]),\n    dict(states=[True, True, True, True, True]),\n]\nexamples += [\n    dict(states=[True, True, True]),  # All alive\n    dict(states=[False, False, False]),  # All dead\n    dict(states=[True, False, True]),  # Mixed states\n    dict(states=[False]),  # Single dead\n    dict(states=[True]),  # Single alive\n    dict(states=[]),  # Empty list\n    dict(states=[True, True, False, False]),  # Mixed states\n    dict(states=[False, False, True]),  # Mixed states with alive at the end\n    dict(states=[True, True, True, False]),  # Mixed states with dead at the end\n    dict(states=[True for _ in range(100)])  # Large list of alive states\n]\nexamples += [\n    dict(states=[True, True, True]),\n    dict(states=[False, True, True]),\n    dict(states=[False, False, False]),\n    dict(states=[True, False, True]),\n    dict(states=[True]),\n    dict(states=[False]),\n    dict(states=[True, True, True, True, True]),\n    dict(states=[False, False, True, False]),\n    dict(states=[True, False, False, False]),\n    dict(states=[True, True, False, True, True, True])\n]", "code": "def not_dead(states):\n    are_alive = True\n    for s in states:\n        if not s:\n            are_alive = False\n    return are_alive\n", "func_name": "not_dead", "exec_status": true, "example_inputs": ["\"{'states': [True, True, True]}\"", "\"{'states': [False, False, False]}\"", "\"{'states': [True, False, True]}\"", "\"{'states': []}\"", "\"{'states': [True]}\"", "\"{'states': [False]}\"", "\"{'states': [True, True, False, True]}\"", "\"{'states': [False, False, False, False]}\"", "\"{'states': [True, False, False, True, False]}\"", "\"{'states': [True, True, True, True, True]}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}], "parsed_inputs": [[["states", "[True, True, True]"]], [["states", "[False, False, False]"]], [["states", "[True, False, True]"]], [["states", "[]"]], [["states", "[True]"]], [["states", "[False]"]], [["states", "[True, True, False, True]"]], [["states", "[False, False, False, False]"]], [["states", "[True, False, False, True, False]"]], [["states", "[True, True, True, True, True]"]]], "exec_code": "def not_dead(states):\n    are_alive = True\n    for s in states:\n        if not s:\n            are_alive = False\n    return are_alive\n", "output": "The function is:\n\n```python\ndef not_dead(states):\n    are_alive = True\n    for s in states:\n        if not s:\n            are_alive = False\n    return are_alive\n\n```", "choosed_example_idx": [0, 8, 3, 6, 5, 1, 2], "prompt": "Function: not_dead\nWrite a function that generates the output from the input.\nInput: dict(states=[True, True, True]), Output: \"True\"\nInput: dict(states=[True, False, False, True, False]), Output: \"False\"\nInput: dict(states=[]), Output: \"True\"\nInput: dict(states=[True, True, False, True]), Output: \"False\"\nInput: dict(states=[False]), Output: \"False\"\nInput: dict(states=[False, False, False]), Output: \"False\"\nInput: dict(states=[True, False, True]), Output: \"False\"\n\n\n", "id": "d31433d186830df53ac016a4bfb55746560daa85_0"}
{"example_str": "examples = [\n    dict(value=153),\n    dict(value=370),\n    dict(value=371),\n    dict(value=407),\n    dict(value=1634),\n    dict(value=8208),\n    dict(value=9474),\n    dict(value=10),\n    dict(value=123),\n    dict(value=999)\n]\nexamples += [\n    dict(value=1),     # 1^1 = 1\n    dict(value=153),   # 1^3 + 5^3 + 3^3 = 153\n    dict(value=370),   # 3^3 + 7^3 + 0^3 = 370\n    dict(value=9474),  # 9^4 + 4^4 + 7^4 + 4^4 = 9474\n    dict(value=1634),  # 1^4 + 6^4 + 3^4 + 4^4 = 1634\n    dict(value=8208),  # 8^4 + 2^4 + 0^4 + 8^4 = 8208\n    dict(value=9475),  # Not a narcissistic number\n    dict(value=0),     # 0^1 = 0\n    dict(value=11),    # Not a narcissistic number\n    dict(value=407)    # 4^3 + 0^3 + 7^3 = 407\n]\nexamples += [\n    dict(value=1),    # 1^1 = 1\n    dict(value=153),  # 1^3 + 5^3 + 3^3 = 153\n    dict(value=370),  # 3^3 + 7^3 + 0^3 = 370\n    dict(value=407),  # 4^3 + 0^3 + 7^3 = 407\n    dict(value=1634), # 1^4 + 6^4 + 3^4 + 4^4 = 1634\n    dict(value=9474), # 9^4 + 4^4 + 7^4 + 4^4 = 9474\n    dict(value=9475), # Not a narcissistic number\n    dict(value=0),    # 0^1 = 0\n    dict(value=11),   # Not a narcissistic number\n    dict(value=8208)  # 8^4 + 2^4 + 0^4 + 8^4 = 8208\n]", "code": "def narcissistic(value):\n    return sum([(n ** len([int(d) for d in str(value)])) for n in [int(d) for\n        d in str(value)]]) == value\n", "func_name": "narcissistic", "exec_status": true, "example_inputs": ["\"{'value': 153}\"", "\"{'value': 370}\"", "\"{'value': 371}\"", "\"{'value': 407}\"", "\"{'value': 1634}\"", "\"{'value': 8208}\"", "\"{'value': 9474}\"", "\"{'value': 10}\"", "\"{'value': 123}\"", "\"{'value': 999}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}], "parsed_inputs": [[["value", "153"]], [["value", "370"]], [["value", "371"]], [["value", "407"]], [["value", "1634"]], [["value", "8208"]], [["value", "9474"]], [["value", "10"]], [["value", "123"]], [["value", "999"]]], "exec_code": "def narcissistic(value):\n    return sum([(n ** len([int(d) for d in str(value)])) for n in [int(d) for\n        d in str(value)]]) == value\n", "output": "The function is:\n\n```python\ndef narcissistic(value):\n    return sum([(n ** len([int(d) for d in str(value)])) for n in [int(d) for\n        d in str(value)]]) == value\n\n```", "choosed_example_idx": [1, 2, 5, 7, 8, 3, 6], "prompt": "Write a function that generates the output from the input.\nInput: dict(value=370), Output: \"True\"\nInput: dict(value=371), Output: \"True\"\nInput: dict(value=8208), Output: \"True\"\nInput: dict(value=10), Output: \"False\"\nInput: dict(value=123), Output: \"False\"\nInput: dict(value=407), Output: \"True\"\nInput: dict(value=9474), Output: \"True\"\n\nFunction: narcissistic\n", "id": "43a9040c78b4efbda0b6ed22685f5a5611013892_0"}
{"example_str": "examples = [\n    dict(n=10),\n    dict(n=20.5),\n    dict(n=0),\n    dict(n=-5),\n    dict(n=100),\n    dict(n=3.14),\n    dict(n=25),\n    dict(n=12.75),\n    dict(n=50),\n    dict(n=-10.25)\n]\nexamples += [\n    dict(n=16),\n    dict(n=32),\n    dict(n=100),\n    dict(n=0),\n    dict(n=-8),\n    dict(n=1.5),\n    dict(n=-10),\n    dict(n=256),\n    dict(n=64),\n    dict(n=0.25)\n]\nexamples += [\n    dict(n=16),\n    dict(n=32),\n    dict(n=64),\n    dict(n=128),\n    dict(n=256),\n    dict(n=512),\n    dict(n=1024),\n    dict(n=2048),\n    dict(n=4096),\n    dict(n=8192),\n]", "code": "def half_quarter_eight(n):\n    list1 = []\n    list1.append(n / 2)\n    list1.append(n / 4)\n    list1.append(n / 8)\n    return list1\n", "func_name": "half_quarter_eight", "exec_status": true, "example_inputs": ["\"{'n': 10}\"", "\"{'n': 20.5}\"", "\"{'n': 0}\"", "\"{'n': -5}\"", "\"{'n': 100}\"", "\"{'n': 3.14}\"", "\"{'n': 25}\"", "\"{'n': 12.75}\"", "\"{'n': 50}\"", "\"{'n': -10.25}\""], "example_outputs": [{"return": "\"[5.0, 2.5, 1.25]\""}, {"return": "\"[10.25, 5.125, 2.5625]\""}, {"return": "\"[0.0, 0.0, 0.0]\""}, {"return": "\"[-2.5, -1.25, -0.625]\""}, {"return": "\"[50.0, 25.0, 12.5]\""}, {"return": "\"[1.57, 0.785, 0.3925]\""}, {"return": "\"[12.5, 6.25, 3.125]\""}, {"return": "\"[6.375, 3.1875, 1.59375]\""}, {"return": "\"[25.0, 12.5, 6.25]\""}, {"return": "\"[-5.125, -2.5625, -1.28125]\""}, {"return": "\"[8.0, 4.0, 2.0]\""}, {"return": "\"[16.0, 8.0, 4.0]\""}, {"return": "\"[50.0, 25.0, 12.5]\""}, {"return": "\"[0.0, 0.0, 0.0]\""}, {"return": "\"[-4.0, -2.0, -1.0]\""}, {"return": "\"[0.75, 0.375, 0.1875]\""}, {"return": "\"[-5.0, -2.5, -1.25]\""}, {"return": "\"[128.0, 64.0, 32.0]\""}, {"return": "\"[32.0, 16.0, 8.0]\""}, {"return": "\"[0.125, 0.0625, 0.03125]\""}, {"return": "\"[8.0, 4.0, 2.0]\""}, {"return": "\"[16.0, 8.0, 4.0]\""}, {"return": "\"[32.0, 16.0, 8.0]\""}, {"return": "\"[64.0, 32.0, 16.0]\""}, {"return": "\"[128.0, 64.0, 32.0]\""}, {"return": "\"[256.0, 128.0, 64.0]\""}, {"return": "\"[512.0, 256.0, 128.0]\""}, {"return": "\"[1024.0, 512.0, 256.0]\""}, {"return": "\"[2048.0, 1024.0, 512.0]\""}, {"return": "\"[4096.0, 2048.0, 1024.0]\""}], "parsed_inputs": [[["n", "10"]], [["n", "20.5"]], [["n", "0"]], [["n", "-5"]], [["n", "100"]], [["n", "3.14"]], [["n", "25"]], [["n", "12.75"]], [["n", "50"]], [["n", "-10.25"]]], "exec_code": "def half_quarter_eight(n):\n    list1 = []\n    list1.append(n / 2)\n    list1.append(n / 4)\n    list1.append(n / 8)\n    return list1\n", "output": "The function is:\n\n```python\ndef half_quarter_eight(n):\n    list1 = []\n    list1.append(n / 2)\n    list1.append(n / 4)\n    list1.append(n / 8)\n    return list1\n\n```", "choosed_example_idx": [3, 7, 5, 0, 6, 8], "prompt": "Input: dict(n=-5), Output: \"[-2.5, -1.25, -0.625]\"\nInput: dict(n=12.75), Output: \"[6.375, 3.1875, 1.59375]\"\nInput: dict(n=3.14), Output: \"[1.57, 0.785, 0.3925]\"\nInput: dict(n=10), Output: \"[5.0, 2.5, 1.25]\"\nInput: dict(n=25), Output: \"[12.5, 6.25, 3.125]\"\nInput: dict(n=50), Output: \"[25.0, 12.5, 6.25]\"\n\nFunction: half_quarter_eight\nWrite a function that generates the output from the input.\n", "id": "72cdb538082aae1bd60ad25464c5c34311d4da48_0"}
{"example_str": "examples = [\n    dict(s=\"123\"),  # True\n    dict(s=\"123.45\"),  # True\n    dict(s=\"-123\"),  # True\n    dict(s=\"abc\"),  # False\n    dict(s=\"123abc\"),  # False\n    dict(s=\"\"),  # False\n    dict(s=\"   \"),  # False\n    dict(s=\"123e4\"),  # True\n    dict(s=\"not a number\"),  # False\n    dict(s=\"NaN\"),  # True (note: NaN is a special float value)\n]\nexamples += [\n    dict(s=\"123\"),            # String that can be converted to a number\n    dict(s=\"45.67\"),          # String of a floating-point number\n    dict(s=\"1e4\"),            # Scientific notation\n    dict(s=\"abc\"),            # String that cannot be converted to a number\n    dict(s=\"12.34.56\"),       # Invalid number format with two dots\n    dict(s=\"\"),               # Empty string\n    dict(s=\" \"),              # String with a space\n    dict(s=\"123abc\"),         # Alphanumeric string\n    dict(s=123),              # Integer\n    dict(s=45.67)             # Float\n]\nexamples += [\n    dict(s='123'),          # String that can be converted to a number\n    dict(s='45.67'),        # String of a float\n    dict(s='1e-4'),         # Scientific notation\n    dict(s='0.1'),          # Decimal string\n    dict(s='abc'),          # Non-numeric string\n    dict(s='123abc'),       # Alphanumeric string\n    dict(s=''),             # Empty string\n    dict(s=' '),            # Space (whitespace)\n    dict(s='3.14159'),      # Pi approximation\n    dict(s='-200'),         # Negative number string\n]", "code": "def is_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n", "func_name": "is_number", "exec_status": true, "example_inputs": ["\"{'s': '123'}\"", "\"{'s': '123.45'}\"", "\"{'s': '-123'}\"", "\"{'s': 'abc'}\"", "\"{'s': '123abc'}\"", "\"{'s': ''}\"", "\"{'s': '   '}\"", "\"{'s': '123e4'}\"", "\"{'s': 'not a number'}\"", "\"{'s': 'NaN'}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}], "parsed_inputs": [[["s", "\"123\""]], [["s", "\"123.45\""]], [["s", "\"-123\""]], [["s", "\"abc\""]], [["s", "\"123abc\""]], [["s", "\"\""]], [["s", "\"   \""]], [["s", "\"123e4\""]], [["s", "\"not a number\""]], [["s", "\"NaN\""]]], "exec_code": "def is_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n", "output": "The function is:\n\n```python\ndef is_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\n```", "choosed_example_idx": [2, 0, 7, 9, 4, 5, 8, 6, 1, 3], "prompt": "Write a function that generates the output from the input.\n\nInput: dict(s=\"-123\"), Output: \"True\"\nInput: dict(s=\"123\"), Output: \"True\"\nInput: dict(s=\"123e4\"), Output: \"True\"\nInput: dict(s=\"NaN\"), Output: \"True\"\nInput: dict(s=\"123abc\"), Output: \"False\"\nInput: dict(s=\"\"), Output: \"False\"\nInput: dict(s=\"not a number\"), Output: \"False\"\nInput: dict(s=\"   \"), Output: \"False\"\nInput: dict(s=\"123.45\"), Output: \"True\"\nInput: dict(s=\"abc\"), Output: \"False\"\n\n\n\nFunction: is_number\n", "id": "411625e4cc1dd6ff961f5a9ebc07b8c240d62fb7_0"}
{"example_str": "examples = [\n    dict(input_line=\"123\"),\n    dict(input_line=\"456\"),\n    dict(input_line=\"7890\"),\n    dict(input_line=\"01234\"),\n    dict(input_line=\"98765\"),\n    dict(input_line=\"11111\"),\n    dict(input_line=\"00000\"),\n    dict(input_line=\"24680\"),\n    dict(input_line=\"13579\"),\n    dict(input_line=\"96321\")\n]\nexamples += [\n    dict(input_line=\"12345\"),\n    dict(input_name=\"67890\"),\n    dict(input_line=\"24680\"),\n    dict(input_line=\"13579\"),\n    dict(input_line=\"00000\"),\n    dict(input_line=\"98765\"),\n    dict(input_line=\"54321\"),\n    dict(input_line=\"11111\"),\n    dict(input_line=\"22222\"),\n    dict(input_line=\"99999\")\n]\nexamples += [\n    dict(input_line=\"12345\"),\n    dict(input_line=\"67890\"),\n    dict(input_line=\"24680\"),\n    dict(input_line=\"13579\"),\n    dict(input_line=\"11111\"),\n    dict(input_line=\"22222\"),\n    dict(input_line=\"00000\"),\n    dict(input_line=\"98765\"),\n    dict(input_line=\"54321\"),\n    dict(input_line=\"10293\"),\n]", "code": "def read_input(input_line: str) ->list:\n    result = []\n    for ch in input_line:\n        result.append(int(ch))\n    return result\n", "func_name": "read_input", "exec_status": true, "example_inputs": ["\"{'input_line': '123'}\"", "\"{'input_line': '456'}\"", "\"{'input_line': '7890'}\"", "\"{'input_line': '01234'}\"", "\"{'input_line': '98765'}\"", "\"{'input_line': '11111'}\"", "\"{'input_line': '00000'}\"", "\"{'input_line': '24680'}\"", "\"{'input_line': '13579'}\"", "\"{'input_line': '96321'}\""], "example_outputs": [{"return": "\"[1, 2, 3]\""}, {"return": "\"[4, 5, 6]\""}, {"return": "\"[7, 8, 9, 0]\""}, {"return": "\"[0, 1, 2, 3, 4]\""}, {"return": "\"[9, 8, 7, 6, 5]\""}, {"return": "\"[1, 1, 1, 1, 1]\""}, {"return": "\"[0, 0, 0, 0, 0]\""}, {"return": "\"[2, 4, 6, 8, 0]\""}, {"return": "\"[1, 3, 5, 7, 9]\""}, {"return": "\"[9, 6, 3, 2, 1]\""}, {"return": "\"[1, 2, 3, 4, 5]\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: read_input() got an unexpected keyword argument 'input_name'\""}, {"return": "\"[2, 4, 6, 8, 0]\""}, {"return": "\"[1, 3, 5, 7, 9]\""}, {"return": "\"[0, 0, 0, 0, 0]\""}, {"return": "\"[9, 8, 7, 6, 5]\""}, {"return": "\"[5, 4, 3, 2, 1]\""}, {"return": "\"[1, 1, 1, 1, 1]\""}, {"return": "\"[2, 2, 2, 2, 2]\""}, {"return": "\"[9, 9, 9, 9, 9]\""}, {"return": "\"[1, 2, 3, 4, 5]\""}, {"return": "\"[6, 7, 8, 9, 0]\""}, {"return": "\"[2, 4, 6, 8, 0]\""}, {"return": "\"[1, 3, 5, 7, 9]\""}, {"return": "\"[1, 1, 1, 1, 1]\""}, {"return": "\"[2, 2, 2, 2, 2]\""}, {"return": "\"[0, 0, 0, 0, 0]\""}, {"return": "\"[9, 8, 7, 6, 5]\""}, {"return": "\"[5, 4, 3, 2, 1]\""}, {"return": "\"[1, 0, 2, 9, 3]\""}], "parsed_inputs": [[["input_line", "\"123\""]], [["input_line", "\"456\""]], [["input_line", "\"7890\""]], [["input_line", "\"01234\""]], [["input_line", "\"98765\""]], [["input_line", "\"11111\""]], [["input_line", "\"00000\""]], [["input_line", "\"24680\""]], [["input_line", "\"13579\""]], [["input_line", "\"96321\""]]], "exec_code": "def read_input(input_line: str) ->list:\n    result = []\n    for ch in input_line:\n        result.append(int(ch))\n    return result\n", "output": "The function is:\n\n```python\ndef read_input(input_line: str) ->list:\n    result = []\n    for ch in input_line:\n        result.append(int(ch))\n    return result\n\n```", "choosed_example_idx": [7, 1, 8, 6, 2, 0], "prompt": "Function: read_input\nInput: dict(input_line=\"24680\"), Output: \"[2, 4, 6, 8, 0]\"\nInput: dict(input_line=\"456\"), Output: \"[4, 5, 6]\"\nInput: dict(input_line=\"13579\"), Output: \"[1, 3, 5, 7, 9]\"\nInput: dict(input_line=\"00000\"), Output: \"[0, 0, 0, 0, 0]\"\nInput: dict(input_line=\"7890\"), Output: \"[7, 8, 9, 0]\"\nInput: dict(input_line=\"123\"), Output: \"[1, 2, 3]\"\n\nWrite a function that generates the output from the input.\n", "id": "40f58005959a99f1ef4b014fcb0160722f568f26_0"}
{"example_str": "examples = [\n    dict(final=5),\n    dict(final=8),\n    dict(final=10),\n    dict(final=12),\n    dict(final=15),\n    dict(final=20),\n    dict(final=25),\n    dict(final=30),\n    dict(final=35),\n    dict(final=40),\n]", "code": "def fibonacci(final):\n    first = 0\n    second = 1\n    third = 1\n    sequence = [first, second, third]\n    for number in sequence:\n        number = sequence[-1] + sequence[-2]\n        sequence.append(number)\n        if final == len(sequence):\n            break\n    return sequence\n", "func_name": "fibonacci", "exec_status": true, "example_inputs": ["\"{'final': 5}\"", "\"{'final': 8}\"", "\"{'final': 10}\"", "\"{'final': 12}\"", "\"{'final': 15}\"", "\"{'final': 20}\"", "\"{'final': 25}\"", "\"{'final': 30}\"", "\"{'final': 35}\"", "\"{'final': 40}\""], "example_outputs": [{"trace": "[\"{'final': 5}\", \"Line 1->    first = 0\", \"{'first': 0}\", \"Line 2->    second = 1\", \"{'second': 1}\", \"Line 3->    third = 1\", \"{'third': 1}\", \"Line 4->    sequence = [first, second, third]\", \"{'sequence': [0, 1, 1]}\", \"Line 5->    for number in sequence:\", \"{'number': 0}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 2}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 1}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 3}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3]}\", \"Line 8->        if final == len(sequence):\", \"Line 9->            break\", \"Line 10->    return sequence\"]", "return": "\"[0, 1, 1, 2, 3]\""}, {"trace": "[\"{'final': 8}\", \"Line 1->    first = 0\", \"{'first': 0}\", \"Line 2->    second = 1\", \"{'second': 1}\", \"Line 3->    third = 1\", \"{'third': 1}\", \"Line 4->    sequence = [first, second, third]\", \"{'sequence': [0, 1, 1]}\", \"Line 5->    for number in sequence:\", \"{'number': 0}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 2}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 1}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 3}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 1}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 5}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 2}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 8}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 3}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 13}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13]}\", \"Line 8->        if final == len(sequence):\", \"Line 9->            break\", \"Line 10->    return sequence\"]", "return": "\"[0, 1, 1, 2, 3, 5, 8, 13]\""}, {"trace": "[\"{'final': 10}\", \"Line 1->    first = 0\", \"{'first': 0}\", \"Line 2->    second = 1\", \"{'second': 1}\", \"Line 3->    third = 1\", \"{'third': 1}\", \"Line 4->    sequence = [first, second, third]\", \"{'sequence': [0, 1, 1]}\", \"Line 5->    for number in sequence:\", \"{'number': 0}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 2}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 1}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 3}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 1}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 5}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 2}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 8}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 3}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 13}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 5}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 21}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 8}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 34}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]}\", \"Line 8->        if final == len(sequence):\", \"Line 9->            break\", \"Line 10->    return sequence\"]", "return": "\"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\""}, {"trace": "[\"{'final': 12}\", \"Line 1->    first = 0\", \"{'first': 0}\", \"Line 2->    second = 1\", \"{'second': 1}\", \"Line 3->    third = 1\", \"{'third': 1}\", \"Line 4->    sequence = [first, second, third]\", \"{'sequence': [0, 1, 1]}\", \"Line 5->    for number in sequence:\", \"{'number': 0}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 2}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 1}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 3}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 1}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 5}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 2}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 8}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 3}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 13}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 5}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 21}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 8}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 34}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 13}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 55}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 21}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 89}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]}\", \"Line 8->        if final == len(sequence):\", \"Line 9->            break\", \"Line 10->    return sequence\"]", "return": "\"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\""}, {"trace": "[\"{'final': 15}\", \"Line 1->    first = 0\", \"{'first': 0}\", \"Line 2->    second = 1\", \"{'second': 1}\", \"Line 3->    third = 1\", \"{'third': 1}\", \"Line 4->    sequence = [first, second, third]\", \"{'sequence': [0, 1, 1]}\", \"Line 5->    for number in sequence:\", \"{'number': 0}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 2}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 1}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 3}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 1}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 5}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 2}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 8}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 3}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 13}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 5}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 21}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 8}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 34}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 13}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 55}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 21}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 89}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 34}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 144}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 55}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 233}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 89}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 377}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]}\", \"Line 8->        if final == len(sequence):\", \"Line 9->            break\", \"Line 10->    return sequence\"]", "return": "\"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]\""}, {"trace": "[\"{'final': 20}\", \"Line 1->    first = 0\", \"{'first': 0}\", \"Line 2->    second = 1\", \"{'second': 1}\", \"Line 3->    third = 1\", \"{'third': 1}\", \"Line 4->    sequence = [first, second, third]\", \"{'sequence': [0, 1, 1]}\", \"Line 5->    for number in sequence:\", \"{'number': 0}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 2}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 1}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 3}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 1}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 5}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 2}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 8}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 3}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 13}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 5}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 21}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 8}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 34}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 13}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 55}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 21}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 89}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 34}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 144}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 55}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 233}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 89}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 377}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 144}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 610}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 233}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 987}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 377}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 1597}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 610}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 2584}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 987}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 4181}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]}\", \"Line 8->        if final == len(sequence):\", \"Line 9->            break\", \"Line 10->    return sequence\"]", "return": "\"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]\""}, {"trace": "[\"{'final': 25}\", \"Line 1->    first = 0\", \"{'first': 0}\", \"Line 2->    second = 1\", \"{'second': 1}\", \"Line 3->    third = 1\", \"{'third': 1}\", \"Line 4->    sequence = [first, second, third]\", \"{'sequence': [0, 1, 1]}\", \"Line 5->    for number in sequence:\", \"{'number': 0}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 2}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 1}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 3}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 1}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 5}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 2}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 8}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 3}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 13}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 5}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 21}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 8}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 34}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 13}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 55}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 21}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 89}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 34}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 144}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 55}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 233}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 89}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 377}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 144}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 610}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 233}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 987}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 377}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 1597}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 610}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 2584}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 987}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 4181}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 1597}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 6765}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 2584}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 10946}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 4181}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 17711}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 6765}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 28657}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 10946}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 46368}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368]}\", \"Line 8->        if final == len(sequence):\", \"Line 9->            break\", \"Line 10->    return sequence\"]", "return": "\"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368]\""}, {"trace": "[\"{'final': 30}\", \"Line 1->    first = 0\", \"{'first': 0}\", \"Line 2->    second = 1\", \"{'second': 1}\", \"Line 3->    third = 1\", \"{'third': 1}\", \"Line 4->    sequence = [first, second, third]\", \"{'sequence': [0, 1, 1]}\", \"Line 5->    for number in sequence:\", \"{'number': 0}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 2}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 1}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 3}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 1}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 5}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 2}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 8}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 3}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 13}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 5}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 21}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 8}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 34}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 13}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 55}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 21}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 89}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 34}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 144}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 55}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 233}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 89}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 377}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 144}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 610}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 233}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 987}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 377}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 1597}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 610}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 2584}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 987}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 4181}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 1597}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 6765}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 2584}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 10946}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 4181}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 17711}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 6765}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 28657}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 10946}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 46368}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 17711}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 75025}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 28657}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 121393}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 46368}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 196418}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 75025}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 317811}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 121393}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 514229}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229]}\", \"Line 8->        if final == len(sequence):\", \"Line 9->            break\", \"Line 10->    return sequence\"]", "return": "\"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229]\""}, {"trace": "[\"{'final': 35}\", \"Line 1->    first = 0\", \"{'first': 0}\", \"Line 2->    second = 1\", \"{'second': 1}\", \"Line 3->    third = 1\", \"{'third': 1}\", \"Line 4->    sequence = [first, second, third]\", \"{'sequence': [0, 1, 1]}\", \"Line 5->    for number in sequence:\", \"{'number': 0}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 2}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 1}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 3}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 1}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 5}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 2}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 8}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 3}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 13}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 5}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 21}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 8}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 34}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 13}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 55}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 21}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 89}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 34}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 144}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 55}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 233}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 89}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 377}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 144}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 610}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 233}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 987}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 377}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 1597}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 610}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 2584}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 987}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 4181}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 1597}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 6765}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 2584}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 10946}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 4181}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 17711}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 6765}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 28657}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 10946}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 46368}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 17711}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 75025}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 28657}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 121393}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 46368}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 196418}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 75025}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 317811}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 121393}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 514229}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 196418}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 832040}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 317811}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 1346269}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 514229}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 2178309}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 832040}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 3524578}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 1346269}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 5702887}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887]}\", \"Line 8->        if final == len(sequence):\", \"Line 9->            break\", \"Line 10->    return sequence\"]", "return": "\"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887]\""}, {"trace": "[\"{'final': 40}\", \"Line 1->    first = 0\", \"{'first': 0}\", \"Line 2->    second = 1\", \"{'second': 1}\", \"Line 3->    third = 1\", \"{'third': 1}\", \"Line 4->    sequence = [first, second, third]\", \"{'sequence': [0, 1, 1]}\", \"Line 5->    for number in sequence:\", \"{'number': 0}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 2}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 1}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 3}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 1}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 5}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 2}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 8}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 3}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 13}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 5}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 21}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 8}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 34}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 13}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 55}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 21}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 89}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 34}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 144}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 55}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 233}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 89}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 377}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 144}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 610}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 233}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 987}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 377}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 1597}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 610}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 2584}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 987}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 4181}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 1597}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 6765}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 2584}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 10946}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 4181}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 17711}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 6765}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 28657}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 10946}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 46368}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 17711}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 75025}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 28657}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 121393}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 46368}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 196418}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 75025}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 317811}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 121393}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 514229}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 196418}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 832040}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 317811}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 1346269}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 514229}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 2178309}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 832040}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 3524578}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 1346269}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 5702887}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 2178309}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 9227465}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 3524578}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 14930352}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 5702887}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 24157817}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 9227465}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 39088169}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169]}\", \"Line 8->        if final == len(sequence):\", \"Line 5->    for number in sequence:\", \"{'number': 14930352}\", \"Line 6->        number = sequence[-1] + sequence[-2]\", \"{'number': 63245986}\", \"Line 7->        sequence.append(number)\", \"{'sequence': [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986]}\", \"Line 8->        if final == len(sequence):\", \"Line 9->            break\", \"Line 10->    return sequence\"]", "return": "\"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986]\""}], "parsed_inputs": [[["final", "5"]], [["final", "8"]], [["final", "10"]], [["final", "12"]], [["final", "15"]], [["final", "20"]], [["final", "25"]], [["final", "30"]], [["final", "35"]], [["final", "40"]]], "exec_code": "def fibonacci(final):\n    first = 0\n    second = 1\n    third = 1\n    sequence = [first, second, third]\n    for number in sequence:\n        number = sequence[-1] + sequence[-2]\n        sequence.append(number)\n        if final == len(sequence):\n            break\n    return sequence\n", "output": "The function is:\n\n```python\ndef fibonacci(final):\n    first = 0\n    second = 1\n    third = 1\n    sequence = [first, second, third]\n    for number in sequence:\n        number = sequence[-1] + sequence[-2]\n        sequence.append(number)\n        if final == len(sequence):\n            break\n    return sequence\n\n```", "choosed_example_idx": [6, 5, 7, 0, 1, 4, 9, 3, 8, 2], "prompt": "Write a function that generates the output from the input.\nFunction: fibonacci\n\n\nInput: dict(final=25), Output: \"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368]\"\nInput: dict(final=20), Output: \"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]\"\nInput: dict(final=30), Output: \"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229]\"\nInput: dict(final=5), Output: \"[0, 1, 1, 2, 3]\"\nInput: dict(final=8), Output: \"[0, 1, 1, 2, 3, 5, 8, 13]\"\nInput: dict(final=15), Output: \"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]\"\nInput: dict(final=40), Output: \"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986]\"\nInput: dict(final=12), Output: \"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\"\nInput: dict(final=35), Output: \"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887]\"\nInput: dict(final=10), Output: \"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\"\n\n", "id": "7f4598fd28a12a6e8efecb1228d02952f0a39763_0"}
{"example_str": "examples = [\n    dict(str=\"hello world\", tok=\"hello\"),\n    dict(str=\"hello world\", tok=\"world\"),\n    dict(str=\"hello world\", tok=\"goodbye\"),\n    dict(str=\"abcdefg\", tok=\"abc\"),\n    dict(str=\"abcdefg\", tok=\"def\"),\n    dict(str=\"abcdefg\", tok=\"xyz\"),\n    dict(str=\"hellohellohello\", tok=\"hello\"),\n    dict(str=\"hellohellohello\", tok=\"goodbye\"),\n    dict(str=\"\", tok=\"hello\"),\n    dict(str=\"hello\", tok=\"\")\n]\nexamples += [\n    dict(str=\"hello world\", tok=\"world\"),  # \"world\" is found, returns \"\"\n    dict(str=\"hello world\", tok=\"hello\"),  # \"hello\" is found, returns \" world\"\n    dict(str=\"hello world\", tok=\" \"),      # space is found, returns \"world\"\n    dict(str=\"hello world\", tok=\"x\"),      # \"x\" is not found, returns None\n    dict(str=\"1234567890\", tok=\"456\"),     # \"456\" is found, returns \"7890\"\n    dict(str=\"test@test.com\", tok=\"@test\"),# \"@test\" is found, returns \".com\"\n    dict(str=\"repeat repeat repeat\", tok=\"repeat\"),  # \"repeat\" is found, returns \" repeat repeat\"\n    dict(str=\"case sensitive\", tok=\"Case\"),# \"Case\" is not found, returns None\n    dict(str=\"end\", tok=\"end\"),            # \"end\" is found, returns \"\"\n    dict(str=\"empty token\", tok=\"\")        # empty token is found, returns \"empty token\"\n]\nexamples += [\n    dict(str=\"hello world\", tok=\"world\"),\n    dict(str=\"hello world\", tok=\"hello\"),\n    dict(str=\"abcdef\", tok=\"cd\"),\n    dict(str=\"Python programming\", tok=\"pro\"),\n    dict(str=\"case sensitive\", tok=\"Case\"),\n    dict(str=\"find the token\", tok=\"the\"),\n    dict(str=\"substring example\", tok=\"example\"),\n    dict(str=\"start middle end\", tok=\"middle\"),\n    dict(str=\"repeated repeated token\", tok=\"repeated\"),\n    dict(str=\"no occurrence\", tok=\"xyz\")\n]", "code": "def substr_rem(str, tok):\n    i = str.find(tok)\n    if i == -1:\n        return None\n    return str[i + len(tok):]\n", "func_name": "substr_rem", "exec_status": true, "example_inputs": ["\"{'str': 'hello world', 'tok': 'hello'}\"", "\"{'str': 'hello world', 'tok': 'world'}\"", "\"{'str': 'hello world', 'tok': 'goodbye'}\"", "\"{'str': 'abcdefg', 'tok': 'abc'}\"", "\"{'str': 'abcdefg', 'tok': 'def'}\"", "\"{'str': 'abcdefg', 'tok': 'xyz'}\"", "\"{'str': 'hellohellohello', 'tok': 'hello'}\"", "\"{'str': 'hellohellohello', 'tok': 'goodbye'}\"", "\"{'str': '', 'tok': 'hello'}\"", "\"{'str': 'hello', 'tok': ''}\""], "example_outputs": [{"return": "\"' world'\""}, {"return": "\"''\""}, {"return": "\"None\""}, {"return": "\"'defg'\""}, {"return": "\"'g'\""}, {"return": "\"None\""}, {"return": "\"'hellohello'\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"'hello'\""}, {"return": "\"''\""}, {"return": "\"' world'\""}, {"return": "\"'world'\""}, {"return": "\"None\""}, {"return": "\"'7890'\""}, {"return": "\"'.com'\""}, {"return": "\"' repeat repeat'\""}, {"return": "\"None\""}, {"return": "\"''\""}, {"return": "\"'empty token'\""}, {"return": "\"''\""}, {"return": "\"' world'\""}, {"return": "\"'ef'\""}, {"return": "\"'gramming'\""}, {"return": "\"None\""}, {"return": "\"' token'\""}, {"return": "\"''\""}, {"return": "\"' end'\""}, {"return": "\"' repeated token'\""}, {"return": "\"None\""}], "parsed_inputs": [[["str", "\"hello world\""], ["tok", "\"hello\""]], [["str", "\"hello world\""], ["tok", "\"world\""]], [["str", "\"hello world\""], ["tok", "\"goodbye\""]], [["str", "\"abcdefg\""], ["tok", "\"abc\""]], [["str", "\"abcdefg\""], ["tok", "\"def\""]], [["str", "\"abcdefg\""], ["tok", "\"xyz\""]], [["str", "\"hellohellohello\""], ["tok", "\"hello\""]], [["str", "\"hellohellohello\""], ["tok", "\"goodbye\""]], [["str", "\"\""], ["tok", "\"hello\""]], [["str", "\"hello\""], ["tok", "\"\""]]], "exec_code": "def substr_rem(str, tok):\n    i = str.find(tok)\n    if i == -1:\n        return None\n    return str[i + len(tok):]\n", "output": "The function is:\n\n```python\ndef substr_rem(str, tok):\n    i = str.find(tok)\n    if i == -1:\n        return None\n    return str[i + len(tok):]\n\n```", "choosed_example_idx": [0, 4, 5], "prompt": "Write a function that generates the output from the input.\nFunction: substr_rem\n\nInput: dict(str=\"hello world\", tok=\"hello\"), Output: \"' world'\"\nInput: dict(str=\"abcdefg\", tok=\"def\"), Output: \"'g'\"\nInput: dict(str=\"abcdefg\", tok=\"xyz\"), Output: \"None\"\n\n\n", "id": "74ca083178fcf912655464ab3e506b51ab9b0023_0"}
{"example_str": "examples = [\n    dict(value=-5),\n    dict(value=0),\n    dict(value=5),\n    dict(value=-10.5),\n    dict(value=3.14),\n    dict(value=-1),\n    dict(value=2),\n    dict(value=-0.1),\n    dict(value=10),\n    dict(value=-100)\n]\nexamples += [\n    dict(value=-10),\n    dict(value=0),\n    dict(value=5),\n    dict(value=-0.5),\n    dict(value=3.14),\n    dict(value=-100),\n    dict(value=50),\n    dict(value=-1),\n    dict(value=0.001),\n    dict(value=-999)\n]\nexamples += [\n    dict(value=-10),\n    dict(value=0),\n    dict(value=5),\n    dict(value=-1),\n    dict(value=100),\n    dict(value=-50),\n    dict(value=0.5),\n    dict(value=-0.1),\n    dict(value=999),\n    dict(value=-999)\n]", "code": "def clamp_to_zero(value):\n    if value < 0:\n        return 0\n    else:\n        return value\n", "func_name": "clamp_to_zero", "exec_status": true, "example_inputs": ["\"{'value': -5}\"", "\"{'value': 0}\"", "\"{'value': 5}\"", "\"{'value': -10.5}\"", "\"{'value': 3.14}\"", "\"{'value': -1}\"", "\"{'value': 2}\"", "\"{'value': -0.1}\"", "\"{'value': 10}\"", "\"{'value': -100}\""], "example_outputs": [{"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"3.14\""}, {"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"10\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"3.14\""}, {"return": "\"0\""}, {"return": "\"50\""}, {"return": "\"0\""}, {"return": "\"0.001\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"100\""}, {"return": "\"0\""}, {"return": "\"0.5\""}, {"return": "\"0\""}, {"return": "\"999\""}, {"return": "\"0\""}], "parsed_inputs": [[["value", "-5"]], [["value", "0"]], [["value", "5"]], [["value", "-10.5"]], [["value", "3.14"]], [["value", "-1"]], [["value", "2"]], [["value", "-0.1"]], [["value", "10"]], [["value", "-100"]]], "exec_code": "def clamp_to_zero(value):\n    if value < 0:\n        return 0\n    else:\n        return value\n", "output": "The function is:\n\n```python\ndef clamp_to_zero(value):\n    if value < 0:\n        return 0\n    else:\n        return value\n\n```", "choosed_example_idx": [6, 7, 1], "prompt": "Write a function that generates the output from the input.\nFunction: clamp_to_zero\n\n\nInput: dict(value=2), Output: \"2\"\nInput: dict(value=-0.1), Output: \"0\"\nInput: dict(value=0), Output: \"0\"\n\n", "id": "b605681fb39b765cebef929943629b6d0fbc30e4_0"}
{"example_str": "examples = [\n    dict(f='0.1'),\n    dict(f=0.2),\n    dict(f='0.3'),\n    dict(f=0.4),\n    dict(f='0.05'),\n    dict(f=0.06),\n    dict(f='0.007'),\n    dict(f=0.008),\n    dict(f='1.0'),\n    dict(f=0.0),\n]\nexamples += [\n    dict(f=0.1),\n    dict(f='0.2'),\n    dict(f=0.5),\n    dict(f='0.75'),\n    dict(f=1),\n    dict(f='0.03'),\n    dict(f=0.99),\n    dict(f='0.123'),\n    dict(f=0.333),\n    dict(f='0.999')\n]\nexamples += [\n    dict(f='0.01'),\n    dict(f='0.1'),\n    dict(f='0.5'),\n    dict(f='0.75'),\n    dict(f='0.99'),\n    dict(f='1.0'),\n    dict(f='1.25'),\n    dict(f='0.33'),\n    dict(f='0.66'),\n    dict(f='0.03')\n]", "code": "def ppf(f):\n    return f'{f} ({100 * float(f)}%)'\n", "func_name": "ppf", "exec_status": true, "example_inputs": ["\"{'f': '0.1'}\"", "\"{'f': 0.2}\"", "\"{'f': '0.3'}\"", "\"{'f': 0.4}\"", "\"{'f': '0.05'}\"", "\"{'f': 0.06}\"", "\"{'f': '0.007'}\"", "\"{'f': 0.008}\"", "\"{'f': '1.0'}\"", "\"{'f': 0.0}\""], "example_outputs": [{"return": "\"'0.1 (10.0%)'\""}, {"return": "\"'0.2 (20.0%)'\""}, {"return": "\"'0.3 (30.0%)'\""}, {"return": "\"'0.4 (40.0%)'\""}, {"return": "\"'0.05 (5.0%)'\""}, {"return": "\"'0.06 (6.0%)'\""}, {"return": "\"'0.007 (0.7000000000000001%)'\""}, {"return": "\"'0.008 (0.8%)'\""}, {"return": "\"'1.0 (100.0%)'\""}, {"return": "\"'0.0 (0.0%)'\""}, {"return": "\"'0.1 (10.0%)'\""}, {"return": "\"'0.2 (20.0%)'\""}, {"return": "\"'0.5 (50.0%)'\""}, {"return": "\"'0.75 (75.0%)'\""}, {"return": "\"'1 (100.0%)'\""}, {"return": "\"'0.03 (3.0%)'\""}, {"return": "\"'0.99 (99.0%)'\""}, {"return": "\"'0.123 (12.3%)'\""}, {"return": "\"'0.333 (33.300000000000004%)'\""}, {"return": "\"'0.999 (99.9%)'\""}, {"return": "\"'0.01 (1.0%)'\""}, {"return": "\"'0.1 (10.0%)'\""}, {"return": "\"'0.5 (50.0%)'\""}, {"return": "\"'0.75 (75.0%)'\""}, {"return": "\"'0.99 (99.0%)'\""}, {"return": "\"'1.0 (100.0%)'\""}, {"return": "\"'1.25 (125.0%)'\""}, {"return": "\"'0.33 (33.0%)'\""}, {"return": "\"'0.66 (66.0%)'\""}, {"return": "\"'0.03 (3.0%)'\""}], "parsed_inputs": [[["f", "\"0.1\""]], [["f", "0.2"]], [["f", "\"0.3\""]], [["f", "0.4"]], [["f", "\"0.05\""]], [["f", "0.06"]], [["f", "\"0.007\""]], [["f", "0.008"]], [["f", "\"1.0\""]], [["f", "0.0"]]], "exec_code": "def ppf(f):\n    return f'{f} ({100 * float(f)}%)'\n", "output": "The function is:\n\n```python\ndef ppf(f):\n    return f'{f} ({100 * float(f)}%)'\n\n```", "choosed_example_idx": [1, 7, 8, 6, 2, 4, 3], "prompt": "Write a function that generates the output from the input.\nFunction: ppf\n\nInput: dict(f=0.2), Output: \"'0.2 (20.0%)'\"\nInput: dict(f=0.008), Output: \"'0.008 (0.8%)'\"\nInput: dict(f=\"1.0\"), Output: \"'1.0 (100.0%)'\"\nInput: dict(f=\"0.007\"), Output: \"'0.007 (0.7000000000000001%)'\"\nInput: dict(f=\"0.3\"), Output: \"'0.3 (30.0%)'\"\nInput: dict(f=\"0.05\"), Output: \"'0.05 (5.0%)'\"\nInput: dict(f=0.4), Output: \"'0.4 (40.0%)'\"\n\n\n", "id": "76d5ab0e53a6156e16f6fab937c606a22da96024_0"}
{"example_str": "examples = [\n    dict(o=1),  # int\n    dict(o='hello'),  # str\n    dict(o=[]),  # list\n    dict(o={}),  # dict\n    dict(o=None),  # NoneType\n    dict(o=True),  # bool\n    dict(o=3.14),  # float\n    dict(o=complex(1, 2)),  # complex\n    dict(o=lambda x: x),  # function\n    dict(o=int),  # type\n]\nexamples += [\n    dict(o=int),  # int is a type\n    dict(o=str),  # str is a type\n    dict(o=float),  # float is a type\n    dict(o=dict),  # dict is a type\n    dict(o=list),  # list is a type\n    dict(o=type),  # type itself is a type\n    dict(o=3),  # 3 is not a type, it's an instance of int\n    dict(o=\"hello\"),  # \"hello\" is not a type, it's an instance of str\n    dict(o=None),  # None is not a type, it's an instance of NoneType\n    dict(o=lambda x: x)  # a lambda function is not a type, it's a function object\n]\nexamples += [\n    dict(o=int),\n    dict(o=str),\n    dict(o=float),\n    dict(o=dict),\n    dict(o=list),\n    dict(o=type),\n    dict(o=3),\n    dict(o='hello'),\n    dict(o=[1, 2, 3]),\n    dict(o={'key': 'value'}),\n]", "code": "def _is_type(o):\n    return isinstance(o, type)\n", "func_name": "_is_type", "exec_status": true, "example_inputs": ["\"{'o': 1}\"", "\"{'o': 'hello'}\"", "\"{'o': []}\"", "\"{'o': {}}\"", "\"{'o': None}\"", "\"{'o': True}\"", "\"{'o': 3.14}\"", "\"{'o': (1+2j)}\"", "\"{'o': <function <lambda> at 0x7f3790af8a60>}\"", "\"{'o': <class 'int'>}\""], "example_outputs": [{"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}], "parsed_inputs": [[["o", "1"]], [["o", "\"hello\""]], [["o", "[]"]], [["o", "{}"]], [["o", "None"]], [["o", "True"]], [["o", "3.14"]], [["o", "complex(1, 2)"]], [["o", "(lambda x: x)"]], [["o", "int"]]], "exec_code": "def _is_type(o):\n    return isinstance(o, type)\n", "output": "The function is:\n\n```python\ndef _is_type(o):\n    return isinstance(o, type)\n\n```", "choosed_example_idx": [8, 2, 9, 7, 5, 3], "prompt": "Function: _is_type\n\nInput: dict(o=(lambda x: x)), Output: \"False\"\nInput: dict(o=[]), Output: \"False\"\nInput: dict(o=int), Output: \"True\"\nInput: dict(o=complex(1, 2)), Output: \"False\"\nInput: dict(o=True), Output: \"False\"\nInput: dict(o={}), Output: \"False\"\n\n\nWrite a function that generates the output from the input.\n\n\n", "id": "ddaffa64bee4d714d00a263d43e999613d863aeb_0"}
{"example_str": "examples = [\n    dict(x=2.0, n=3),\n    dict(x=3.5, n=2),\n    dict(x=1.0, n=5),\n    dict(x=4.2, n=1),\n    dict(x=0.5, n=4),\n    dict(x=-2.0, n=3),\n    dict(x=10.0, n=0),\n    dict(x=2.5, n=-2),\n    dict(x=7.0, n=1),\n    dict(x=9.8, n=2)\n]\nexamples += [\n    dict(x=2.0, n=3),\n    dict(x=5.5, n=2),\n    dict(x=-1.2, n=4),\n    dict(x=3.14159, n=1),\n    dict(x=0.0, n=5),\n    dict(x=-2.5, n=3),\n    dict(x=10.0, n=0),\n    dict(x=1.0, n=10),\n    dict(x=-0.5, n=2),\n    dict(x=2.71828, n=-1)\n]\nexamples += [\n    dict(x=2.0, n=3),\n    dict(x=3.5, n=2),\n    dict(x=1.0, n=10),\n    dict(x=5.5, n=1),\n    dict(x=0.5, n=4),\n    dict(x=10.0, n=0),\n    dict(x=-2.0, n=3),\n    dict(x=-1.5, n=2),\n    dict(x=2.2, n=5),\n    dict(x=8.0, n=-1)\n]", "code": "def sol3(x: float, n: int) ->float:\n    return x ** n\n", "func_name": "sol3", "exec_status": true, "example_inputs": ["\"{'x': 2.0, 'n': 3}\"", "\"{'x': 3.5, 'n': 2}\"", "\"{'x': 1.0, 'n': 5}\"", "\"{'x': 4.2, 'n': 1}\"", "\"{'x': 0.5, 'n': 4}\"", "\"{'x': -2.0, 'n': 3}\"", "\"{'x': 10.0, 'n': 0}\"", "\"{'x': 2.5, 'n': -2}\"", "\"{'x': 7.0, 'n': 1}\"", "\"{'x': 9.8, 'n': 2}\""], "example_outputs": [{"return": "\"8.0\""}, {"return": "\"12.25\""}, {"return": "\"1.0\""}, {"return": "\"4.2\""}, {"return": "\"0.0625\""}, {"return": "\"-8.0\""}, {"return": "\"1.0\""}, {"return": "\"0.16\""}, {"return": "\"7.0\""}, {"return": "\"96.04000000000002\""}, {"return": "\"8.0\""}, {"return": "\"30.25\""}, {"return": "\"2.0736\""}, {"return": "\"3.14159\""}, {"return": "\"0.0\""}, {"return": "\"-15.625\""}, {"return": "\"1.0\""}, {"return": "\"1.0\""}, {"return": "\"0.25\""}, {"return": "\"0.36787968862663156\""}, {"return": "\"8.0\""}, {"return": "\"12.25\""}, {"return": "\"1.0\""}, {"return": "\"5.5\""}, {"return": "\"0.0625\""}, {"return": "\"1.0\""}, {"return": "\"-8.0\""}, {"return": "\"2.25\""}, {"return": "\"51.53632000000002\""}, {"return": "\"0.125\""}], "parsed_inputs": [[["x", "2.0"], ["n", "3"]], [["x", "3.5"], ["n", "2"]], [["x", "1.0"], ["n", "5"]], [["x", "4.2"], ["n", "1"]], [["x", "0.5"], ["n", "4"]], [["x", "-2.0"], ["n", "3"]], [["x", "10.0"], ["n", "0"]], [["x", "2.5"], ["n", "-2"]], [["x", "7.0"], ["n", "1"]], [["x", "9.8"], ["n", "2"]]], "exec_code": "def sol3(x: float, n: int) ->float:\n    return x ** n\n", "output": "The function is:\n\n```python\ndef sol3(x: float, n: int) ->float:\n    return x ** n\n\n```", "choosed_example_idx": [5, 7, 2, 9, 6, 4], "prompt": "Write a function that generates the output from the input.\nInput: dict(x=-2.0, n=3), Output: \"-8.0\"\nInput: dict(x=2.5, n=-2), Output: \"0.16\"\nInput: dict(x=1.0, n=5), Output: \"1.0\"\nInput: dict(x=9.8, n=2), Output: \"96.04000000000002\"\nInput: dict(x=10.0, n=0), Output: \"1.0\"\nInput: dict(x=0.5, n=4), Output: \"0.0625\"\n\n\n\nFunction: sol3\n", "id": "b57651380478db6f75ae6b0d80dcb6b8cb44cb72_0"}
{"example_str": "examples = [\n    dict(a=1),\n    dict(a=2),\n    dict(a=3),\n    dict(a=4),\n    dict(a=5),\n    dict(a=6),\n    dict(a=7),\n    dict(a=8),\n    dict(a=9),\n    dict(a=10),\n]\nexamples += [\n    dict(a=1),    # Factorial of 1\n    dict(a=2),    # Factorial of 2\n    dict(a=3),    # Factorial of 3\n    dict(a=4),    # Factorial of 4\n    dict(a=5),    # Factorial of 5\n    dict(a=6),    # Factorial of 6\n    dict(a=7),    # Factorial of 7\n    dict(a=8),    # Factorial of 8\n    dict(a=9),    # Factorial of 9\n    dict(a=10)    # Factorial of 10\n]\nexamples += [\n    dict(a=1),\n    dict(a=2),\n    dict(a=3),\n    dict(a=4),\n    dict(a=5),\n    dict(a=6),\n    dict(a=7),\n    dict(a=8),\n    dict(a=9),\n    dict(a=10)\n]", "code": "def factorial(a):\n    if a == 1:\n        return a\n    else:\n        return factorial(a - 1) * a\n", "func_name": "factorial", "exec_status": true, "example_inputs": ["\"{'a': 1}\"", "\"{'a': 2}\"", "\"{'a': 3}\"", "\"{'a': 4}\"", "\"{'a': 5}\"", "\"{'a': 6}\"", "\"{'a': 7}\"", "\"{'a': 8}\"", "\"{'a': 9}\"", "\"{'a': 10}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"6\""}, {"return": "\"24\""}, {"return": "\"120\""}, {"return": "\"720\""}, {"return": "\"5040\""}, {"return": "\"40320\""}, {"return": "\"362880\""}, {"return": "\"3628800\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"6\""}, {"return": "\"24\""}, {"return": "\"120\""}, {"return": "\"720\""}, {"return": "\"5040\""}, {"return": "\"40320\""}, {"return": "\"362880\""}, {"return": "\"3628800\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"6\""}, {"return": "\"24\""}, {"return": "\"120\""}, {"return": "\"720\""}, {"return": "\"5040\""}, {"return": "\"40320\""}, {"return": "\"362880\""}, {"return": "\"3628800\""}], "parsed_inputs": [[["a", "1"]], [["a", "2"]], [["a", "3"]], [["a", "4"]], [["a", "5"]], [["a", "6"]], [["a", "7"]], [["a", "8"]], [["a", "9"]], [["a", "10"]]], "exec_code": "def factorial(a):\n    if a == 1:\n        return a\n    else:\n        return factorial(a - 1) * a\n", "output": "The function is:\n\n```python\ndef factorial(a):\n    if a == 1:\n        return a\n    else:\n        return factorial(a - 1) * a\n\n```", "choosed_example_idx": [6, 1, 2, 0], "prompt": "Write a function that generates the output from the input.\n\nFunction: factorial\nInput: dict(a=7), Output: \"5040\"\nInput: dict(a=2), Output: \"2\"\nInput: dict(a=3), Output: \"6\"\nInput: dict(a=1), Output: \"1\"\n\n", "id": "6e65ec8e8ed101f8ed394d0d053fbce236c1327a_0"}
{"example_str": "examples = [\n    dict(arr=[\"1\", \"2\", \"3\"]),\n    dict(arr=(\"4\", \"5\", \"6\")),\n    dict(arr=[\"7\", \"8\", \"9\", \"10\"]),\n    dict(arr=[\"11\"]),\n    dict(arr=[]),\n    dict(arr=[\"12\", \"13\", \"14\", \"15\", \"16\"]),\n    dict(arr=(\"17\", \"18\")),\n    dict(arr=[\"19\", \"20\", \"21\", \"22\", \"23\", \"24\"]),\n    dict(arr=[\"25\", \"26\"]),\n    dict(arr=[\"27\", \"28\", \"29\", \"30\"])\n]\nexamples += [\n    dict(arr=[1, 2, 3, 4, 5]),  # List of integers\n    dict(arr=['1', '2', '3', '4', '5']),  # List of strings that are numeric\n    dict(arr=[1.1, 2.2, 3.3, 4.4, 5.5]),  # List of floats\n    dict(arr=['100', '200', '300']),  # List of string numbers\n    dict(arr=[-1, -2, -3, -4]),  # List of negative integers\n    dict(arr=['-10', '-20', '-30']),  # List of strings that are negative numbers\n    dict(arr=[0, 1, 0, 1]),  # List of zeros and ones\n    dict(arr=[1234567890]),  # List with a large number\n    dict(arr=['001', '002', '003']),  # List of strings with leading zeros\n    dict(arr=[0.99, 1.99, 2.99])  # List of floats close to integers\n]\nexamples += [\n    dict(arr=[1, 2, 3]),\n    dict(arr=['4', '5', '6']),\n    dict(arr=[7.0, 8.0, 9.0]),\n    dict(arr=['10', 11, '12']),\n    dict(arr=[13.5, '14.5', 15]),\n    dict(arr=['16', 17.0, '18']),\n    dict(arr=['19', '20', '21']),\n    dict(arr=[22, '23', 24.0]),\n    dict(arr=['25', '26', '27']),\n    dict(arr=[28, '29', 30])\n]", "code": "def vect_int(arr):\n    rtrn = []\n    for k in arr:\n        rtrn.append(int(k))\n    return rtrn\n", "func_name": "vect_int", "exec_status": true, "example_inputs": ["\"{'arr': ['1', '2', '3']}\"", "\"{'arr': ('4', '5', '6')}\"", "\"{'arr': ['7', '8', '9', '10']}\"", "\"{'arr': ['11']}\"", "\"{'arr': []}\"", "\"{'arr': ['12', '13', '14', '15', '16']}\"", "\"{'arr': ('17', '18')}\"", "\"{'arr': ['19', '20', '21', '22', '23', '24']}\"", "\"{'arr': ['25', '26']}\"", "\"{'arr': ['27', '28', '29', '30']}\""], "example_outputs": [{"return": "\"[1, 2, 3]\""}, {"return": "\"[4, 5, 6]\""}, {"return": "\"[7, 8, 9, 10]\""}, {"return": "\"[11]\""}, {"return": "\"[]\""}, {"return": "\"[12, 13, 14, 15, 16]\""}, {"return": "\"[17, 18]\""}, {"return": "\"[19, 20, 21, 22, 23, 24]\""}, {"return": "\"[25, 26]\""}, {"return": "\"[27, 28, 29, 30]\""}, {"return": "\"[1, 2, 3, 4, 5]\""}, {"return": "\"[1, 2, 3, 4, 5]\""}, {"return": "\"[1, 2, 3, 4, 5]\""}, {"return": "\"[100, 200, 300]\""}, {"return": "\"[-1, -2, -3, -4]\""}, {"return": "\"[-10, -20, -30]\""}, {"return": "\"[0, 1, 0, 1]\""}, {"return": "\"[1234567890]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[0, 1, 2]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[4, 5, 6]\""}, {"return": "\"[7, 8, 9]\""}, {"return": "\"[10, 11, 12]\""}, {"error": "<|EXCEPTION|> \"<class 'ValueError'>: invalid literal for int() with base 10: '14.5'\""}, {"return": "\"[16, 17, 18]\""}, {"return": "\"[19, 20, 21]\""}, {"return": "\"[22, 23, 24]\""}, {"return": "\"[25, 26, 27]\""}, {"return": "\"[28, 29, 30]\""}], "parsed_inputs": [[["arr", "['1', '2', '3']"]], [["arr", "('4', '5', '6')"]], [["arr", "['7', '8', '9', '10']"]], [["arr", "['11']"]], [["arr", "[]"]], [["arr", "['12', '13', '14', '15', '16']"]], [["arr", "('17', '18')"]], [["arr", "['19', '20', '21', '22', '23', '24']"]], [["arr", "['25', '26']"]], [["arr", "['27', '28', '29', '30']"]]], "exec_code": "def vect_int(arr):\n    rtrn = []\n    for k in arr:\n        rtrn.append(int(k))\n    return rtrn\n", "output": "The function is:\n\n```python\ndef vect_int(arr):\n    rtrn = []\n    for k in arr:\n        rtrn.append(int(k))\n    return rtrn\n\n```", "choosed_example_idx": [8, 9, 5, 7], "prompt": "Function: vect_int\nInput: dict(arr=['25', '26']), Output: \"[25, 26]\"\nInput: dict(arr=['27', '28', '29', '30']), Output: \"[27, 28, 29, 30]\"\nInput: dict(arr=['12', '13', '14', '15', '16']), Output: \"[12, 13, 14, 15, 16]\"\nInput: dict(arr=['19', '20', '21', '22', '23', '24']), Output: \"[19, 20, 21, 22, 23, 24]\"\n\nWrite a function that generates the output from the input.\n", "id": "a18115778f5814487f4ef040c60635a463b4019f_0"}
{"example_str": "examples = [\n    dict(text=\"Hello, World!\"),\n    dict(text=\"This is a test string.\"),\n    dict(text=u\"This string contains a unicode character: \\u2028\"),\n    dict(text=u\"Replace @ symbol: @example\"),\n    dict(text=u\"Replace : symbol: example:\"),\n    dict(text=u\"Replace \\xa0 symbol: example\\xa0\"),\n    dict(text=u\"Multiple replacements: @example\\xa0: test\\u2028\"),\n    dict(text=\"No replacements needed: abcdefg\"),\n    dict(text=u\"Unicode characters: \\u2028\\u2029\\u2030\"),\n    dict(text=u\"Mix of characters: @example: test\\u2028\\xa0\"),\n]\nexamples += [\n    dict(text=\"Hello, World!\"),  # Basic ASCII input\n    dict(text=\"Café au lait\"),  # Contains accented characters\n    dict(text=\"naïve résumé\"),  # Contains accented characters\n    dict(text=\"Español\"),  # Contains a non-ASCII character\n    dict(text=\"联合国\"),  # Chinese characters\n    dict(text=\"Привет мир\"),  # Cyrillic characters\n    dict(text=\"こんにちは\"),  # Japanese characters\n    dict(text=\"12345\"),  # Numeric input\n    dict(text=\"Hello\\u2028World\"),  # Contains line separator\n    dict(text=\"Good morning @everyone: have a great day!\"),  # Contains '@' and ':'\n]\nexamples += [\n    dict(text=\"Hello, World!\"),\n    dict(text=\"This is a test: with colon\"),\n    dict(text=\"Email@Example.com\"),\n    dict(text=\"Spacing\\u2028Line\"),\n    dict(text=\"Non-breaking\\u00a0Space\"),\n    dict(text=\"Normal text\"),\n    dict(text=\"Special chars :@\"),\n    dict(text=\"Unicode\\u2028and\\u00a0specials\"),\n    dict(text=\"Encode this @ please\"),\n    dict(text=\"Colon: and at-sign @ in text\")\n]", "code": "def uni_to_ascii(text):\n    ascii_text = text.replace(u'\\u2028', ' ')\n    ascii_text = ascii_text.replace(u'@', ' ')\n    ascii_text = ascii_text.replace(u':', ' ')\n    ascii_text = ascii_text.replace(u'\\xa0', ' ')\n    ascii_text = ascii_text.encode('ascii', 'ignore')\n    return ascii_text\n", "func_name": "uni_to_ascii", "exec_status": true, "example_inputs": ["\"{'text': 'Hello, World!'}\"", "\"{'text': 'This is a test string.'}\"", "\"{'text': 'This string contains a unicode character: \\\\u2028'}\"", "\"{'text': 'Replace @ symbol: @example'}\"", "\"{'text': 'Replace : symbol: example:'}\"", "\"{'text': 'Replace \\\\xa0 symbol: example\\\\xa0'}\"", "\"{'text': 'Multiple replacements: @example\\\\xa0: test\\\\u2028'}\"", "\"{'text': 'No replacements needed: abcdefg'}\"", "\"{'text': 'Unicode characters: \\\\u2028\\\\u2029\\u2030'}\"", "\"{'text': 'Mix of characters: @example: test\\\\u2028\\\\xa0'}\""], "example_outputs": [{"return": "\"b'Hello, World!'\""}, {"return": "\"b'This is a test string.'\""}, {"return": "\"b'This string contains a unicode character   '\""}, {"return": "\"b'Replace   symbol   example'\""}, {"return": "\"b'Replace   symbol  example '\""}, {"return": "\"b'Replace   symbol  example '\""}, {"return": "\"b'Multiple replacements   example   test '\""}, {"return": "\"b'No replacements needed  abcdefg'\""}, {"return": "\"b'Unicode characters   '\""}, {"return": "\"b'Mix of characters   example  test  '\""}, {"return": "\"b'Hello, World!'\""}, {"return": "\"b'Caf au lait'\""}, {"return": "\"b'nave rsum'\""}, {"return": "\"b'Espaol'\""}, {"return": "\"b''\""}, {"return": "\"b' '\""}, {"return": "\"b''\""}, {"return": "\"b'12345'\""}, {"return": "\"b'Hello World'\""}, {"return": "\"b'Good morning  everyone  have a great day!'\""}, {"return": "\"b'Hello, World!'\""}, {"return": "\"b'This is a test  with colon'\""}, {"return": "\"b'Email Example.com'\""}, {"return": "\"b'Spacing Line'\""}, {"return": "\"b'Non-breaking Space'\""}, {"return": "\"b'Normal text'\""}, {"return": "\"b'Special chars   '\""}, {"return": "\"b'Unicode and specials'\""}, {"return": "\"b'Encode this   please'\""}, {"return": "\"b'Colon  and at-sign   in text'\""}], "parsed_inputs": [[["text", "\"Hello, World!\""]], [["text", "\"This is a test string.\""]], [["text", "\"This string contains a unicode character: \\u2028\""]], [["text", "\"Replace @ symbol: @example\""]], [["text", "\"Replace : symbol: example:\""]], [["text", "\"Replace \\u00a0 symbol: example\\u00a0\""]], [["text", "\"Multiple replacements: @example\\u00a0: test\\u2028\""]], [["text", "\"No replacements needed: abcdefg\""]], [["text", "\"Unicode characters: \\u2028\\u2029\\u2030\""]], [["text", "\"Mix of characters: @example: test\\u2028\\u00a0\""]]], "exec_code": "def uni_to_ascii(text):\n    ascii_text = text.replace(u'\\u2028', ' ')\n    ascii_text = ascii_text.replace(u'@', ' ')\n    ascii_text = ascii_text.replace(u':', ' ')\n    ascii_text = ascii_text.replace(u'\\xa0', ' ')\n    ascii_text = ascii_text.encode('ascii', 'ignore')\n    return ascii_text\n", "output": "The function is:\n\n```python\ndef uni_to_ascii(text):\n    ascii_text = text.replace(u'\\u2028', ' ')\n    ascii_text = ascii_text.replace(u'@', ' ')\n    ascii_text = ascii_text.replace(u':', ' ')\n    ascii_text = ascii_text.replace(u'\\xa0', ' ')\n    ascii_text = ascii_text.encode('ascii', 'ignore')\n    return ascii_text\n\n```", "choosed_example_idx": [5, 7, 0, 2], "prompt": "Write a function that generates the output from the input.\nInput: dict(text=\"Replace \\u00a0 symbol: example\\u00a0\"), Output: \"b'Replace   symbol  example '\"\nInput: dict(text=\"No replacements needed: abcdefg\"), Output: \"b'No replacements needed  abcdefg'\"\nInput: dict(text=\"Hello, World!\"), Output: \"b'Hello, World!'\"\nInput: dict(text=\"This string contains a unicode character: \\u2028\"), Output: \"b'This string contains a unicode character   '\"\n\n\nFunction: uni_to_ascii\n", "id": "8268468a8468e2fb9bbf32dd03dff95d4fd7ec99_0"}
{"example_str": "examples = [\n    dict(n=121),  # True\n    dict(n=123),  # False\n    dict(n=12321),  # True\n    dict(n=10001),  # True\n    dict(n=123456),  # False\n    dict(n=111),  # True\n    dict(n=909),  # True\n    dict(n=123091),  # False\n    dict(n=1000001),  # True\n    dict(n=9876989),  # True\n]\nexamples += [\n    dict(n=121),\n    dict(n=12321),\n    dict(n=-121),\n    dict(n=123456),\n    dict(n=1),\n    dict(n=22),\n    dict(n=0),\n    dict(n=987789),\n    dict(n=-12321),\n    dict(n=1001)\n]\nexamples += [\n    dict(n=121),\n    dict(n=12321),\n    dict(n=1234321),\n    dict(n=12345),\n    dict(n=-121),\n    dict(n=0),\n    dict(n=11),\n    dict(n=101),\n    dict(n=1221),\n    dict(n=9999)\n]", "code": "def is_palindrome(n: int):\n    \"\"\"\n    Determine whether or not n is a palindrome number.\n    \"\"\"\n    test_result = True\n    fwd = list(str(n))\n    for i in range(len(fwd)):\n        if not fwd[i] == fwd[-(i + 1)]:\n            test_result = False\n            break\n    return test_result\n", "func_name": "is_palindrome", "exec_status": true, "example_inputs": ["\"{'n': 121}\"", "\"{'n': 123}\"", "\"{'n': 12321}\"", "\"{'n': 10001}\"", "\"{'n': 123456}\"", "\"{'n': 111}\"", "\"{'n': 909}\"", "\"{'n': 123091}\"", "\"{'n': 1000001}\"", "\"{'n': 9876989}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}], "parsed_inputs": [[["n", "121"]], [["n", "123"]], [["n", "12321"]], [["n", "10001"]], [["n", "123456"]], [["n", "111"]], [["n", "909"]], [["n", "123091"]], [["n", "1000001"]], [["n", "9876989"]]], "exec_code": "def is_palindrome(n: int):\n    \"\"\"\n    Determine whether or not n is a palindrome number.\n    \"\"\"\n    test_result = True\n    fwd = list(str(n))\n    for i in range(len(fwd)):\n        if not fwd[i] == fwd[-(i + 1)]:\n            test_result = False\n            break\n    return test_result\n", "output": "The function is:\n\n```python\ndef is_palindrome(n: int):\n    \"\"\"\n    Determine whether or not n is a palindrome number.\n    \"\"\"\n    test_result = True\n    fwd = list(str(n))\n    for i in range(len(fwd)):\n        if not fwd[i] == fwd[-(i + 1)]:\n            test_result = False\n            break\n    return test_result\n\n```", "choosed_example_idx": [3, 7, 2, 8, 9, 0, 1, 4], "prompt": "Write a function that generates the output from the input.\nInput: dict(n=10001), Output: \"True\"\nInput: dict(n=123091), Output: \"False\"\nInput: dict(n=12321), Output: \"True\"\nInput: dict(n=1000001), Output: \"True\"\nInput: dict(n=9876989), Output: \"False\"\nInput: dict(n=121), Output: \"True\"\nInput: dict(n=123), Output: \"False\"\nInput: dict(n=123456), Output: \"False\"\n\nFunction: is_palindrome\n", "id": "e1e70cd594cb1c7895788057161f749602fece34_0"}
{"example_str": "examples = [\n    dict(server_uri='https://example.com/'),\n    dict(server_uri='https://example.com'),\n    dict(server_uri='https://example.com/collections'),\n    dict(server_uri='https://example.com/collections/'),\n    dict(server_uri='https://example.com/some/path/'),\n    dict(server_uri='https://example.com/some/path/collections'),\n    dict(server_uri='https://example.com/some/path/collections/'),\n    dict(server_uri='https://example.com/collections/some/path'),\n    dict(server_uri='https://example.com/collections/some/path/'),\n    dict(server_uri='https://example.com/some/path/collections/some/path'),\n]\nexamples += [\n    dict(server_uri=\"http://example.com/\"),\n    dict(server_uri=\"http://example.com/collections\"),\n    dict(server_uri=\"https://example.com/collections/\"),\n    dict(server_uri=\"http://example.com/collections/items\"),\n    dict(server_uri=\"https://example.com/collections/items/\"),\n    dict(server_uri=\"http://example.com/\"),\n    dict(server_uri=\"https://example.com/\"),\n    dict(server_uri=\"ftp://example.com/collections\"),\n    dict(server_uri=\"http://example.com/collections/collections\"),\n    dict(server_uri=\"http://example.com//collections/\")\n]\nexamples += [\n    dict(server_uri='http://example.com/'),\n    dict(server_uri='https://example.com/collections'),\n    dict(server_uri='http://example.com/collections/'),\n    dict(server_uri='https://example.com/api/collections'),\n    dict(server_uri='http://example.com/api/collections/'),\n    dict(server_uri='https://example.com/api/'),\n    dict(server_uri='http://example.com/api/collections/items'),\n    dict(server_uri='https://example.com/api/collections/items/'),\n    dict(server_uri='http://example.com/api/items/'),\n    dict(server_uri='https://example.com/')\n]", "code": "def cleanup_server_name(server_uri):\n    if server_uri.endswith('/'):\n        server_uri = server_uri[:-1]\n    return server_uri.replace('/collections', '')\n", "func_name": "cleanup_server_name", "exec_status": true, "example_inputs": ["\"{'server_uri': 'https://example.com/'}\"", "\"{'server_uri': 'https://example.com'}\"", "\"{'server_uri': 'https://example.com/collections'}\"", "\"{'server_uri': 'https://example.com/collections/'}\"", "\"{'server_uri': 'https://example.com/some/path/'}\"", "\"{'server_uri': 'https://example.com/some/path/collections'}\"", "\"{'server_uri': 'https://example.com/some/path/collections/'}\"", "\"{'server_uri': 'https://example.com/collections/some/path'}\"", "\"{'server_uri': 'https://example.com/collections/some/path/'}\"", "\"{'server_uri': 'https://example.com/some/path/collections/some/path'}\""], "example_outputs": [{"return": "\"'https://example.com'\""}, {"return": "\"'https://example.com'\""}, {"return": "\"'https://example.com'\""}, {"return": "\"'https://example.com'\""}, {"return": "\"'https://example.com/some/path'\""}, {"return": "\"'https://example.com/some/path'\""}, {"return": "\"'https://example.com/some/path'\""}, {"return": "\"'https://example.com/some/path'\""}, {"return": "\"'https://example.com/some/path'\""}, {"return": "\"'https://example.com/some/path/some/path'\""}, {"return": "\"'http://example.com'\""}, {"return": "\"'http://example.com'\""}, {"return": "\"'https://example.com'\""}, {"return": "\"'http://example.com/items'\""}, {"return": "\"'https://example.com/items'\""}, {"return": "\"'http://example.com'\""}, {"return": "\"'https://example.com'\""}, {"return": "\"'ftp://example.com'\""}, {"return": "\"'http://example.com'\""}, {"return": "\"'http://example.com/'\""}, {"return": "\"'http://example.com'\""}, {"return": "\"'https://example.com'\""}, {"return": "\"'http://example.com'\""}, {"return": "\"'https://example.com/api'\""}, {"return": "\"'http://example.com/api'\""}, {"return": "\"'https://example.com/api'\""}, {"return": "\"'http://example.com/api/items'\""}, {"return": "\"'https://example.com/api/items'\""}, {"return": "\"'http://example.com/api/items'\""}, {"return": "\"'https://example.com'\""}], "parsed_inputs": [[["server_uri", "\"https://example.com/\""]], [["server_uri", "\"https://example.com\""]], [["server_uri", "\"https://example.com/collections\""]], [["server_uri", "\"https://example.com/collections/\""]], [["server_uri", "\"https://example.com/some/path/\""]], [["server_uri", "\"https://example.com/some/path/collections\""]], [["server_uri", "\"https://example.com/some/path/collections/\""]], [["server_uri", "\"https://example.com/collections/some/path\""]], [["server_uri", "\"https://example.com/collections/some/path/\""]], [["server_uri", "\"https://example.com/some/path/collections/some/path\""]]], "exec_code": "def cleanup_server_name(server_uri):\n    if server_uri.endswith('/'):\n        server_uri = server_uri[:-1]\n    return server_uri.replace('/collections', '')\n", "output": "The function is:\n\n```python\ndef cleanup_server_name(server_uri):\n    if server_uri.endswith('/'):\n        server_uri = server_uri[:-1]\n    return server_uri.replace('/collections', '')\n\n```", "choosed_example_idx": [8, 0, 4, 5], "prompt": "Write a function that generates the output from the input.\nInput: dict(server_uri=\"https://example.com/collections/some/path/\"), Output: \"'https://example.com/some/path'\"\nInput: dict(server_uri=\"https://example.com/\"), Output: \"'https://example.com'\"\nInput: dict(server_uri=\"https://example.com/some/path/\"), Output: \"'https://example.com/some/path'\"\nInput: dict(server_uri=\"https://example.com/some/path/collections\"), Output: \"'https://example.com/some/path'\"\n\nFunction: cleanup_server_name\n", "id": "edc95c1fc0ba4447ba035cd6722b0030c85f27fb_0"}
{"example_str": "examples = [\n    dict(num=1),\n    dict(num=2),\n    dict(num=3),\n    dict(num=5),\n    dict(num=8),\n    dict(num=10),\n    dict(num=0),\n    dict(num=-1),\n    dict(num=15),\n    dict(num=20),\n]\nexamples += [\n    dict(num=1),\n    dict(num=2),\n    dict(num=3),\n    dict(num=5),\n    dict(num=8),\n    dict(num=10),\n    dict(num=13),\n    dict(num=21),\n    dict(num=34),\n    dict(num=55)\n]\nexamples += [\n    dict(num=1),\n    dict(num=2),\n    dict(num=3),\n    dict(num=4),\n    dict(num=5),\n    dict(num=6),\n    dict(num=7),\n    dict(num=8),\n    dict(num=9),\n    dict(num=10)\n]", "code": "def fib(num):\n    count = 0\n    a = 1\n    b = 2\n    while count < num:\n        yield a\n        a, b = b, a + b\n        count = count + 1\n    return 'none'\n", "func_name": "fib", "exec_status": true, "example_inputs": ["\"{'num': 1}\"", "\"{'num': 2}\"", "\"{'num': 3}\"", "\"{'num': 5}\"", "\"{'num': 8}\"", "\"{'num': 10}\"", "\"{'num': 0}\"", "\"{'num': -1}\"", "\"{'num': 15}\"", "\"{'num': 20}\""], "example_outputs": [{"return": "\"<generator object fib at 0x7f980a3cf430>\""}, {"return": "\"<generator object fib at 0x7f980a3cf660>\""}, {"return": "\"<generator object fib at 0x7f980a3cf430>\""}, {"return": "\"<generator object fib at 0x7f980a3cf660>\""}, {"return": "\"<generator object fib at 0x7f980a3cf430>\""}, {"return": "\"<generator object fib at 0x7f980a3cf660>\""}, {"return": "\"<generator object fib at 0x7f980a3cf430>\""}, {"return": "\"<generator object fib at 0x7f980a3cf660>\""}, {"return": "\"<generator object fib at 0x7f980a3cf430>\""}, {"return": "\"<generator object fib at 0x7f980a3cf660>\""}, {"return": "\"<generator object fib at 0x7fc250c8c350>\""}, {"return": "\"<generator object fib at 0x7fc250c8c580>\""}, {"return": "\"<generator object fib at 0x7fc250c8c350>\""}, {"return": "\"<generator object fib at 0x7fc250c8c580>\""}, {"return": "\"<generator object fib at 0x7fc250c8c350>\""}, {"return": "\"<generator object fib at 0x7fc250c8c580>\""}, {"return": "\"<generator object fib at 0x7fc250c8c350>\""}, {"return": "\"<generator object fib at 0x7fc250c8c580>\""}, {"return": "\"<generator object fib at 0x7fc250c8c350>\""}, {"return": "\"<generator object fib at 0x7fc250c8c580>\""}, {"return": "\"<generator object fib at 0x7f71430fa350>\""}, {"return": "\"<generator object fib at 0x7f71430fa580>\""}, {"return": "\"<generator object fib at 0x7f71430fa350>\""}, {"return": "\"<generator object fib at 0x7f71430fa580>\""}, {"return": "\"<generator object fib at 0x7f71430fa350>\""}, {"return": "\"<generator object fib at 0x7f71430fa580>\""}, {"return": "\"<generator object fib at 0x7f71430fa350>\""}, {"return": "\"<generator object fib at 0x7f71430fa580>\""}, {"return": "\"<generator object fib at 0x7f71430fa350>\""}, {"return": "\"<generator object fib at 0x7f71430fa580>\""}], "parsed_inputs": [[["num", "1"]], [["num", "2"]], [["num", "3"]], [["num", "5"]], [["num", "8"]], [["num", "10"]], [["num", "0"]], [["num", "-1"]], [["num", "15"]], [["num", "20"]]], "exec_code": "def fib(num):\n    count = 0\n    a = 1\n    b = 2\n    while count < num:\n        yield a\n        a, b = b, a + b\n        count = count + 1\n    return 'none'\n", "output": "The function is:\n\n```python\ndef fib(num):\n    count = 0\n    a = 1\n    b = 2\n    while count < num:\n        yield a\n        a, b = b, a + b\n        count = count + 1\n    return 'none'\n\n```", "choosed_example_idx": [5, 1, 8, 9, 3, 4, 2, 6], "prompt": "Input: dict(num=10), Output: \"<generator object fib at 0x7f980a3cf660>\"\nInput: dict(num=2), Output: \"<generator object fib at 0x7f980a3cf660>\"\nInput: dict(num=15), Output: \"<generator object fib at 0x7f980a3cf430>\"\nInput: dict(num=20), Output: \"<generator object fib at 0x7f980a3cf660>\"\nInput: dict(num=5), Output: \"<generator object fib at 0x7f980a3cf660>\"\nInput: dict(num=8), Output: \"<generator object fib at 0x7f980a3cf430>\"\nInput: dict(num=3), Output: \"<generator object fib at 0x7f980a3cf430>\"\nInput: dict(num=0), Output: \"<generator object fib at 0x7f980a3cf430>\"\n\nFunction: fib\n\nWrite a function that generates the output from the input.\n", "id": "89da7c4dd129f46e728d8551b148951e54cff545_0"}
{"example_str": "examples = [\n    dict(list_number=[1, 2, 3, 4, 5]),\n    dict(list_number=[10, 20, 30, 40, 40]),\n    dict(list_number=[1, 1, 1, 1, 1]),\n    dict(list_number=[5]),\n    dict(list_number=[1, 2, 3, 4, 4]),\n    dict(list_number=[10, 20, 30, 40, 50]),\n    dict(list_number=[1, 1, 2, 3, 4]),\n    dict(list_number=[5, 5, 5, 5, 5]),\n    dict(list_number=[1, 2, 3, 4, 5, 6]),\n    dict(list_number=[]),\n]\nexamples += [\n    dict(list_number=[1, 2, 3, 4, 5]),\n    dict(list_number=[5, 5, 5, 5, 5]),\n    dict(list_number=[1, 2, 3, 2, 4]),\n    dict(list_number=[10, 20, 30, 40, 10]),\n    dict(list_number=[-1, -2, -3, -1]),\n    dict(list_number=[0, 0, 0, 0, 0]),\n    dict(list_number=[1.1, 2.2, 3.3, 4.4, 1.1]),\n    dict(list_number=[100, 200, 300, 400, 500]),\n    dict(list_number=[2, 4, 6, 8, 10, 2]),\n    dict(list_number=[9, 8, 7, 6, 5, 4, 3, 2, 1, 0])\n]\nexamples += [\n    dict(list_number=[1, 2, 3]),\n    dict(list_number=[1, 2, 2]),\n    dict(list_number=[3, 1, 2, 3]),\n    dict(list_number=[4, 5, 6, 7, 8, 9, 10]),\n    dict(list_number=[1, 1, 1, 1]),\n    dict(list_number=[2, 3, 4, 2]),\n    dict(list_number=[5, 6, 7, 8, 5]),\n    dict(list_number=[9, 9, 9, 9, 9]),\n    dict(list_number=[0, 0, 0, 0]),\n    dict(list_number=[10, 20, 30, 40, 50])\n]", "code": "def add_number(list_number):\n    last_number = list_number[-1]\n    for i in range(1, len(list_number)):\n        if list_number[-(i + 1)] == last_number:\n            list_number.append(i)\n            return\n    list_number.append(0)\n", "func_name": "add_number", "exec_status": true, "example_inputs": ["\"{'list_number': [1, 2, 3, 4, 5]}\"", "\"{'list_number': [10, 20, 30, 40, 40]}\"", "\"{'list_number': [1, 1, 1, 1, 1]}\"", "\"{'list_number': [5]}\"", "\"{'list_number': [1, 2, 3, 4, 4]}\"", "\"{'list_number': [10, 20, 30, 40, 50]}\"", "\"{'list_number': [1, 1, 2, 3, 4]}\"", "\"{'list_number': [5, 5, 5, 5, 5]}\"", "\"{'list_number': [1, 2, 3, 4, 5, 6]}\"", "\"{'list_number': []}\""], "example_outputs": [{"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}], "parsed_inputs": [[["list_number", "[1, 2, 3, 4, 5]"]], [["list_number", "[10, 20, 30, 40, 40]"]], [["list_number", "[1, 1, 1, 1, 1]"]], [["list_number", "[5]"]], [["list_number", "[1, 2, 3, 4, 4]"]], [["list_number", "[10, 20, 30, 40, 50]"]], [["list_number", "[1, 1, 2, 3, 4]"]], [["list_number", "[5, 5, 5, 5, 5]"]], [["list_number", "[1, 2, 3, 4, 5, 6]"]], [["list_number", "[]"]]], "exec_code": "def add_number(list_number):\n    last_number = list_number[-1]\n    for i in range(1, len(list_number)):\n        if list_number[-(i + 1)] == last_number:\n            list_number.append(i)\n            return\n    list_number.append(0)\n", "output": "The function is:\n\n```python\ndef add_number(list_number):\n    last_number = list_number[-1]\n    for i in range(1, len(list_number)):\n        if list_number[-(i + 1)] == last_number:\n            list_number.append(i)\n            return\n    list_number.append(0)\n\n```", "choosed_example_idx": [5, 1, 9, 8, 7, 3, 6, 0], "prompt": "Write a function that generates the output from the input.\nInput: dict(list_number=[10, 20, 30, 40, 50]), Output: \"None\"\nInput: dict(list_number=[10, 20, 30, 40, 40]), Output: \"None\"\nInput: dict(list_number=[]), Output: \"<class 'IndexError'>: list index out of range\"\nInput: dict(list_number=[1, 2, 3, 4, 5, 6]), Output: \"None\"\nInput: dict(list_number=[5, 5, 5, 5, 5]), Output: \"None\"\nInput: dict(list_number=[5]), Output: \"None\"\nInput: dict(list_number=[1, 1, 2, 3, 4]), Output: \"None\"\nInput: dict(list_number=[1, 2, 3, 4, 5]), Output: \"None\"\n\nFunction: add_number\n", "id": "f5a37f668b6da50d6a5b8d255dc8f1397528aa84_0"}
{"example_str": "examples = [\n    dict(x=10, base=32),  # default base\n    dict(x=10.5, base=32),  # float input\n    dict(x=20, base=16),  # different base\n    dict(x=3.14, base=32),  # pi\n    dict(x=-5, base=32),  # negative input\n    dict(x=0, base=32),  # zero input\n    dict(x=100, base=64),  # large input\n    dict(x=1.23, base=10),  # decimal base\n    dict(x=2.71, base=8),  # octal base\n    dict(x=42, base=2),  # binary base\n]\nexamples += [\n    dict(x=100),  # Using default base of 32\n    dict(x=50.5),  # Using default base, float input\n    dict(x=75, base=16),  # Non-default base\n    dict(x=-25),  # Negative number, default base\n    dict(x=-55, base=10),  # Negative number, non-default base\n    dict(x=123.456),  # Float input, default base\n    dict(x=0),  # Zero input, default base\n    dict(x=32, base=64),  # Base larger than x\n    dict(x=200, base=100),  # Base as 100\n    dict(x=1, base=1)  # Base as 1\n]\nexamples += [\n    dict(x=15),\n    dict(x=47),\n    dict(x=63),\n    dict(x=100),\n    dict(x=150),\n    dict(x=200),\n    dict(x=250),\n    dict(x=300),\n    dict(x=350),\n    dict(x=400),\n    dict(x=15, base=16),\n    dict(x=47, base=16),\n    dict(x=63, base=16),\n    dict(x=100, base=16),\n    dict(x=150, base=16),\n    dict(x=200, base=16),\n    dict(x=250, base=16),\n    dict(x=300, base=16),\n    dict(x=350, base=16),\n    dict(x=400, base=16)\n]", "code": "def roundTo32(x, base=32):\n    return int(base * round(float(x) / base))\n", "func_name": "roundTo32", "exec_status": true, "example_inputs": ["\"{'x': 10, 'base': 32}\"", "\"{'x': 10.5, 'base': 32}\"", "\"{'x': 20, 'base': 16}\"", "\"{'x': 3.14, 'base': 32}\"", "\"{'x': -5, 'base': 32}\"", "\"{'x': 0, 'base': 32}\"", "\"{'x': 100, 'base': 64}\"", "\"{'x': 1.23, 'base': 10}\"", "\"{'x': 2.71, 'base': 8}\"", "\"{'x': 42, 'base': 2}\""], "example_outputs": [{"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"16\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"128\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"42\""}, {"return": "\"96\""}, {"return": "\"64\""}, {"return": "\"80\""}, {"return": "\"-32\""}, {"return": "\"-60\""}, {"return": "\"128\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"200\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"32\""}, {"return": "\"64\""}, {"return": "\"96\""}, {"return": "\"160\""}, {"return": "\"192\""}, {"return": "\"256\""}, {"return": "\"288\""}, {"return": "\"352\""}, {"return": "\"384\""}, {"return": "\"16\""}, {"return": "\"48\""}, {"return": "\"64\""}, {"return": "\"96\""}, {"return": "\"144\""}, {"return": "\"192\""}, {"return": "\"256\""}, {"return": "\"304\""}, {"return": "\"352\""}, {"return": "\"400\""}], "parsed_inputs": [[["x", "10"], ["base", "32"]], [["x", "10.5"], ["base", "32"]], [["x", "20"], ["base", "16"]], [["x", "3.14"], ["base", "32"]], [["x", "-5"], ["base", "32"]], [["x", "0"], ["base", "32"]], [["x", "100"], ["base", "64"]], [["x", "1.23"], ["base", "10"]], [["x", "2.71"], ["base", "8"]], [["x", "42"], ["base", "2"]]], "exec_code": "def roundTo32(x, base=32):\n    return int(base * round(float(x) / base))\n", "output": "The function is:\n\n```python\ndef roundTo32(x, base=32):\n    return int(base * round(float(x) / base))\n\n```", "choosed_example_idx": [6, 8, 3, 4, 7, 9, 0, 1], "prompt": "Function: roundTo32\nInput: dict(x=100, base=64), Output: \"128\"\nInput: dict(x=2.71, base=8), Output: \"0\"\nInput: dict(x=3.14, base=32), Output: \"0\"\nInput: dict(x=-5, base=32), Output: \"0\"\nInput: dict(x=1.23, base=10), Output: \"0\"\nInput: dict(x=42, base=2), Output: \"42\"\nInput: dict(x=10, base=32), Output: \"0\"\nInput: dict(x=10.5, base=32), Output: \"0\"\n\nWrite a function that generates the output from the input.\n", "id": "f9fe510e54795cf51426e58cec67bbb38d8c148e_0"}
{"example_str": "examples = [\n    dict(param1=123, param2=456),\n    dict(param1=789, param2=234),\n    dict(param1=10, param2=20),\n    dict(param1=5, param2=5),\n    dict(param1=100, param2=200),\n    dict(param1=999, param2=1),\n    dict(param1=12345, param2=67890),\n    dict(param1=111, param2=111),\n    dict(param1=0, param2=0),\n    dict(param1=1234, param2=5678),\n]\nexamples += [\n    dict(param1=123, param2=456),\n    dict(param1=99999, param2=1),\n    dict(param1=80000, param2=19999),\n    dict(param1=0, param2=0),\n    dict(param1=12345, param2=67890),\n    dict(param1=54321, param2=12345),\n    dict(param1=11111, param2=88888),\n    dict(param1=22222, param2=33333),\n    dict(param1=50505, param2=50505),\n    dict(param1=10001, param2=90009)\n]\nexamples += [\n    dict(param1=123, param2=456),\n    dict(param1=999, param2=111),\n    dict(param1=800, param2=900),\n    dict(param1=234, param2=567),\n    dict(param1=0, param2=0),\n    dict(param1=145, param2=876),\n    dict(param1=99999, param2=1),\n    dict(param1=12345, param2=67890),\n    dict(param1=54321, param2=12345),\n    dict(param1=10000, param2=20000)\n]", "code": "def additionWithoutCarrying(param1, param2):\n    x = str(param1).zfill(5)\n    y = str(param2).zfill(5)\n    text = ''\n    for i in range(0, len(x)):\n        text += str(int(x[i]) + int(y[i]))[-1]\n    return int(text)\n", "func_name": "additionWithoutCarrying", "exec_status": true, "example_inputs": ["\"{'param1': 123, 'param2': 456}\"", "\"{'param1': 789, 'param2': 234}\"", "\"{'param1': 10, 'param2': 20}\"", "\"{'param1': 5, 'param2': 5}\"", "\"{'param1': 100, 'param2': 200}\"", "\"{'param1': 999, 'param2': 1}\"", "\"{'param1': 12345, 'param2': 67890}\"", "\"{'param1': 111, 'param2': 111}\"", "\"{'param1': 0, 'param2': 0}\"", "\"{'param1': 1234, 'param2': 5678}\""], "example_outputs": [{"return": "\"579\""}, {"return": "\"913\""}, {"return": "\"30\""}, {"return": "\"0\""}, {"return": "\"300\""}, {"return": "\"990\""}, {"return": "\"79135\""}, {"return": "\"222\""}, {"return": "\"0\""}, {"return": "\"6802\""}, {"return": "\"579\""}, {"return": "\"99990\""}, {"return": "\"99999\""}, {"return": "\"0\""}, {"return": "\"79135\""}, {"return": "\"66666\""}, {"return": "\"99999\""}, {"return": "\"55555\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"579\""}, {"return": "\"0\""}, {"return": "\"700\""}, {"return": "\"791\""}, {"return": "\"0\""}, {"return": "\"911\""}, {"return": "\"99990\""}, {"return": "\"79135\""}, {"return": "\"66666\""}, {"return": "\"30000\""}], "parsed_inputs": [[["param1", "123"], ["param2", "456"]], [["param1", "789"], ["param2", "234"]], [["param1", "10"], ["param2", "20"]], [["param1", "5"], ["param2", "5"]], [["param1", "100"], ["param2", "200"]], [["param1", "999"], ["param2", "1"]], [["param1", "12345"], ["param2", "67890"]], [["param1", "111"], ["param2", "111"]], [["param1", "0"], ["param2", "0"]], [["param1", "1234"], ["param2", "5678"]]], "exec_code": "def additionWithoutCarrying(param1, param2):\n    x = str(param1).zfill(5)\n    y = str(param2).zfill(5)\n    text = ''\n    for i in range(0, len(x)):\n        text += str(int(x[i]) + int(y[i]))[-1]\n    return int(text)\n", "output": "The function is:\n\n```python\ndef additionWithoutCarrying(param1, param2):\n    x = str(param1).zfill(5)\n    y = str(param2).zfill(5)\n    text = ''\n    for i in range(0, len(x)):\n        text += str(int(x[i]) + int(y[i]))[-1]\n    return int(text)\n\n```", "choosed_example_idx": [8, 2, 4, 0, 1, 3, 6, 5, 9, 7], "prompt": "Write a function that generates the output from the input.\nFunction: additionWithoutCarrying\nInput: dict(param1=0, param2=0), Output: \"0\"\nInput: dict(param1=10, param2=20), Output: \"30\"\nInput: dict(param1=100, param2=200), Output: \"300\"\nInput: dict(param1=123, param2=456), Output: \"579\"\nInput: dict(param1=789, param2=234), Output: \"913\"\nInput: dict(param1=5, param2=5), Output: \"0\"\nInput: dict(param1=12345, param2=67890), Output: \"79135\"\nInput: dict(param1=999, param2=1), Output: \"990\"\nInput: dict(param1=1234, param2=5678), Output: \"6802\"\nInput: dict(param1=111, param2=111), Output: \"222\"\n\n", "id": "d2518a4bfd953aa8c800de773af7ab80a5fc135f_0"}
{"example_str": "examples = [\n    dict(lst=[1, 2, 3]),\n    dict(lst=[4, 5, 6]),\n    dict(lst=[7, 8, 9]),\n    dict(lst=[10, 20, 30]),\n    dict(lst=[-1, -2, -3]),\n    dict(lst=[0, 0, 0]),\n    dict(lst=[1.1, 2.2, 3.3]),\n    dict(lst=[4, 4, 4]),\n    dict(lst=[100, 200, 300]),\n    dict(lst=[]),\n]\nexamples += [\n    dict(lst=[1, 2, 3]),  # List of integers\n    dict(lst=[0, -1, -2]),  # List of negative integers\n    dict(lst=[1.5, 2.5, 3.5]),  # List of floats\n    dict(lst=[]),  # Empty list\n    dict(lst=['a', 'b', 'c']),  # List of strings\n    dict(lst=[[1], [2], [3]]),  # List of lists\n    dict(lst=[(1,), (2,), (3,)]),  # List of tuples\n    dict(lst=[True, False, True]),  # List of booleans\n    dict(lst=[None, None, None]),  # List of NoneType, will raise an error\n    dict(lst=[{'key': 1}, {'key': 2}, {'key': 3}])  # List of dictionaries, will raise an error\n]\nexamples += [\n    dict(lst=[1, 2, 3]),\n    dict(lst=[10, 20, 30]),\n    dict(lst=[-1, -2, -3]),\n    dict(lst=[0, 0, 0]),\n    dict(lst=[1.5, 2.5, 3.5]),\n    dict(lst=[100, 200, 300]),\n    dict(lst=[-10, -20, -30]),\n    dict(lst=[0.1, 0.2, 0.3]),\n    dict(lst=[11, 22, 33]),\n    dict(lst=[-1.1, -2.2, -3.3])\n]", "code": "def function(lst):\n    result = []\n    for a in lst:\n        result.append(a * 3)\n    return result\n", "func_name": "function", "exec_status": true, "example_inputs": ["\"{'lst': [1, 2, 3]}\"", "\"{'lst': [4, 5, 6]}\"", "\"{'lst': [7, 8, 9]}\"", "\"{'lst': [10, 20, 30]}\"", "\"{'lst': [-1, -2, -3]}\"", "\"{'lst': [0, 0, 0]}\"", "\"{'lst': [1.1, 2.2, 3.3]}\"", "\"{'lst': [4, 4, 4]}\"", "\"{'lst': [100, 200, 300]}\"", "\"{'lst': []}\""], "example_outputs": [{"return": "\"[3, 6, 9]\""}, {"return": "\"[12, 15, 18]\""}, {"return": "\"[21, 24, 27]\""}, {"return": "\"[30, 60, 90]\""}, {"return": "\"[-3, -6, -9]\""}, {"return": "\"[0, 0, 0]\""}, {"return": "\"[3.3000000000000003, 6.6000000000000005, 9.899999999999999]\""}, {"return": "\"[12, 12, 12]\""}, {"return": "\"[300, 600, 900]\""}, {"return": "\"[]\""}, {"return": "\"[3, 6, 9]\""}, {"return": "\"[0, -3, -6]\""}, {"return": "\"[4.5, 7.5, 10.5]\""}, {"return": "\"[]\""}, {"return": "\"['aaa', 'bbb', 'ccc']\""}, {"return": "\"[[1, 1, 1], [2, 2, 2], [3, 3, 3]]\""}, {"return": "\"[(1, 1, 1), (2, 2, 2), (3, 3, 3)]\""}, {"return": "\"[3, 0, 3]\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: unsupported operand type(s) for *: 'NoneType' and 'int'\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: unsupported operand type(s) for *: 'dict' and 'int'\""}, {"return": "\"[3, 6, 9]\""}, {"return": "\"[30, 60, 90]\""}, {"return": "\"[-3, -6, -9]\""}, {"return": "\"[0, 0, 0]\""}, {"return": "\"[4.5, 7.5, 10.5]\""}, {"return": "\"[300, 600, 900]\""}, {"return": "\"[-30, -60, -90]\""}, {"return": "\"[0.30000000000000004, 0.6000000000000001, 0.8999999999999999]\""}, {"return": "\"[33, 66, 99]\""}, {"return": "\"[-3.3000000000000003, -6.6000000000000005, -9.899999999999999]\""}], "parsed_inputs": [[["lst", "[1, 2, 3]"]], [["lst", "[4, 5, 6]"]], [["lst", "[7, 8, 9]"]], [["lst", "[10, 20, 30]"]], [["lst", "[-1, -2, -3]"]], [["lst", "[0, 0, 0]"]], [["lst", "[1.1, 2.2, 3.3]"]], [["lst", "[4, 4, 4]"]], [["lst", "[100, 200, 300]"]], [["lst", "[]"]]], "exec_code": "def function(lst):\n    result = []\n    for a in lst:\n        result.append(a * 3)\n    return result\n", "output": "The function is:\n\n```python\ndef function(lst):\n    result = []\n    for a in lst:\n        result.append(a * 3)\n    return result\n\n```", "choosed_example_idx": [3, 0, 2, 7, 1, 9, 4, 6], "prompt": "Function: function\n\nInput: dict(lst=[10, 20, 30]), Output: \"[30, 60, 90]\"\nInput: dict(lst=[1, 2, 3]), Output: \"[3, 6, 9]\"\nInput: dict(lst=[7, 8, 9]), Output: \"[21, 24, 27]\"\nInput: dict(lst=[4, 4, 4]), Output: \"[12, 12, 12]\"\nInput: dict(lst=[4, 5, 6]), Output: \"[12, 15, 18]\"\nInput: dict(lst=[]), Output: \"[]\"\nInput: dict(lst=[-1, -2, -3]), Output: \"[-3, -6, -9]\"\nInput: dict(lst=[1.1, 2.2, 3.3]), Output: \"[3.3000000000000003, 6.6000000000000005, 9.899999999999999]\"\n\nWrite a function that generates the output from the input.\n", "id": "915435968b9e8ba22e38350fce7d04ed3858de55_0"}
{"example_str": "examples = [\n    dict(player=(0, 0), target=(1, 1)),\n    dict(player=(3, 4), target=(3, 4)),\n    dict(player=(5, 5), target=(0, 0)),\n    dict(player=(10, 20), target=(15, 25)),\n    dict(player=(0, 10), target=(0, 5)),\n    dict(player=(5, 0), target=(5, 10)),\n    dict(player=(15, 15), target=(10, 10)),\n    dict(player=(20, 20), target=(20, 15)),\n    dict(player=(0, 0), target=(10, 10)),\n    dict(player=(10, 10), target=(0, 0)),\n]\nexamples += [\n    dict(player=(0, 0), target=(1, 1)),\n    dict(player=(5, 5), target=(5, 5)),\n    dict(player=(3, 4), target=(1, 1)),\n    dict(player=(2, 2), target=(3, 1)),\n    dict(player=(10, 10), target=(10, 9)),\n    dict(player=(7, 7), target=(7, 8)),\n    dict(player=(0, 0), target=(0, 3)),\n    dict(player=(9, 5), target=(3, 5)),\n    dict(player=(1, 1), target=(1, 2)),\n    dict(player=(6, 6), target=(6, 6))\n]\nexamples += [\n    dict(player=(0, 0), target=(1, 1)),\n    dict(player=(5, 5), target=(5, 5)),\n    dict(player=(2, 3), target=(2, 1)),\n    dict(player=(1, 1), target=(0, 0)),\n    dict(player=(10, 10), target=(15, 15)),\n    dict(player=(3, 7), target=(3, 2)),\n    dict(player=(6, 2), target=(3, 2)),\n    dict(player=(8, 8), target=(5, 5)),\n    dict(player=(0, 10), target=(0, 5)),\n    dict(player=(10, 0), target=(5, 0))\n]", "code": "def moves(player, target):\n    x_moves = ''\n    y_moves = ''\n    px, py = player\n    tx, ty = target\n    if px > tx:\n        x_moves = '-X'\n    if px < tx:\n        x_moves = '+X'\n    if py < ty:\n        y_moves = '+Y'\n    if py > ty:\n        y_moves = '-Y'\n    return x_moves, y_moves\n", "func_name": "moves", "exec_status": true, "example_inputs": ["\"{'player': (0, 0), 'target': (1, 1)}\"", "\"{'player': (3, 4), 'target': (3, 4)}\"", "\"{'player': (5, 5), 'target': (0, 0)}\"", "\"{'player': (10, 20), 'target': (15, 25)}\"", "\"{'player': (0, 10), 'target': (0, 5)}\"", "\"{'player': (5, 0), 'target': (5, 10)}\"", "\"{'player': (15, 15), 'target': (10, 10)}\"", "\"{'player': (20, 20), 'target': (20, 15)}\"", "\"{'player': (0, 0), 'target': (10, 10)}\"", "\"{'player': (10, 10), 'target': (0, 0)}\""], "example_outputs": [{"return": "\"('+X', '+Y')\""}, {"return": "\"('', '')\""}, {"return": "\"('-X', '-Y')\""}, {"return": "\"('+X', '+Y')\""}, {"return": "\"('', '-Y')\""}, {"return": "\"('', '+Y')\""}, {"return": "\"('-X', '-Y')\""}, {"return": "\"('', '-Y')\""}, {"return": "\"('+X', '+Y')\""}, {"return": "\"('-X', '-Y')\""}, {"return": "\"('+X', '+Y')\""}, {"return": "\"('', '')\""}, {"return": "\"('-X', '-Y')\""}, {"return": "\"('+X', '-Y')\""}, {"return": "\"('', '-Y')\""}, {"return": "\"('', '+Y')\""}, {"return": "\"('', '+Y')\""}, {"return": "\"('-X', '')\""}, {"return": "\"('', '+Y')\""}, {"return": "\"('', '')\""}, {"return": "\"('+X', '+Y')\""}, {"return": "\"('', '')\""}, {"return": "\"('', '-Y')\""}, {"return": "\"('-X', '-Y')\""}, {"return": "\"('+X', '+Y')\""}, {"return": "\"('', '-Y')\""}, {"return": "\"('-X', '')\""}, {"return": "\"('-X', '-Y')\""}, {"return": "\"('', '-Y')\""}, {"return": "\"('-X', '')\""}], "parsed_inputs": [[["player", "(0, 0)"], ["target", "(1, 1)"]], [["player", "(3, 4)"], ["target", "(3, 4)"]], [["player", "(5, 5)"], ["target", "(0, 0)"]], [["player", "(10, 20)"], ["target", "(15, 25)"]], [["player", "(0, 10)"], ["target", "(0, 5)"]], [["player", "(5, 0)"], ["target", "(5, 10)"]], [["player", "(15, 15)"], ["target", "(10, 10)"]], [["player", "(20, 20)"], ["target", "(20, 15)"]], [["player", "(0, 0)"], ["target", "(10, 10)"]], [["player", "(10, 10)"], ["target", "(0, 0)"]]], "exec_code": "def moves(player, target):\n    x_moves = ''\n    y_moves = ''\n    px, py = player\n    tx, ty = target\n    if px > tx:\n        x_moves = '-X'\n    if px < tx:\n        x_moves = '+X'\n    if py < ty:\n        y_moves = '+Y'\n    if py > ty:\n        y_moves = '-Y'\n    return x_moves, y_moves\n", "output": "The function is:\n\n```python\ndef moves(player, target):\n    x_moves = ''\n    y_moves = ''\n    px, py = player\n    tx, ty = target\n    if px > tx:\n        x_moves = '-X'\n    if px < tx:\n        x_moves = '+X'\n    if py < ty:\n        y_moves = '+Y'\n    if py > ty:\n        y_moves = '-Y'\n    return x_moves, y_moves\n\n```", "choosed_example_idx": [9, 4, 8, 7, 3, 1, 5, 0, 2], "prompt": "Input: dict(player=(10, 10), target=(0, 0)), Output: \"('-X', '-Y')\"\nInput: dict(player=(0, 10), target=(0, 5)), Output: \"('', '-Y')\"\nInput: dict(player=(0, 0), target=(10, 10)), Output: \"('+X', '+Y')\"\nInput: dict(player=(20, 20), target=(20, 15)), Output: \"('', '-Y')\"\nInput: dict(player=(10, 20), target=(15, 25)), Output: \"('+X', '+Y')\"\nInput: dict(player=(3, 4), target=(3, 4)), Output: \"('', '')\"\nInput: dict(player=(5, 0), target=(5, 10)), Output: \"('', '+Y')\"\nInput: dict(player=(0, 0), target=(1, 1)), Output: \"('+X', '+Y')\"\nInput: dict(player=(5, 5), target=(0, 0)), Output: \"('-X', '-Y')\"\n\nFunction: moves\nWrite a function that generates the output from the input.\n", "id": "d17bf2e4541def47bb21d2fceebac80ee3c88ccf_0"}
{"example_str": "examples = [\n    dict(x=10, multiple=2),\n    dict(x=12.5, multiple=3),\n    dict(x=7, multiple=5),\n    dict(x=20, multiple=4),\n    dict(x=31, multiple=7),\n    dict(x=42.8, multiple=6),\n    dict(x=9, multiple=3),\n    dict(x=15, multiple=5),\n    dict(x=24.2, multiple=8),\n    dict(x=36, multiple=9),\n]\nexamples += [\n    dict(x=10, multiple=3),\n    dict(x=25, multiple=5),\n    dict(x=7, multiple=2),\n    dict(x=100, multiple=20),\n    dict(x=55, multiple=10),\n    dict(x=123, multiple=30),\n    dict(x=99, multiple=33),\n    dict(x=17, multiple=8),\n    dict(x=42, multiple=7),\n    dict(x=31, multiple=6)\n]\nexamples += [\n    dict(x=5, multiple=3),\n    dict(x=14, multiple=5),\n    dict(x=27, multiple=10),\n    dict(x=32.5, multiple=2),\n    dict(x=17.8, multiple=0.5),\n    dict(x=100, multiple=25),\n    dict(x=45, multiple=6),\n    dict(x=23, multiple=7),\n    dict(x=8, multiple=3),\n    dict(x=55.5, multiple=10)\n]", "code": "def _round_up(x, multiple):\n    remainder = x % multiple\n    return x if remainder == 0 else x + multiple - remainder\n", "func_name": "_round_up", "exec_status": true, "example_inputs": ["\"{'x': 10, 'multiple': 2}\"", "\"{'x': 12.5, 'multiple': 3}\"", "\"{'x': 7, 'multiple': 5}\"", "\"{'x': 20, 'multiple': 4}\"", "\"{'x': 31, 'multiple': 7}\"", "\"{'x': 42.8, 'multiple': 6}\"", "\"{'x': 9, 'multiple': 3}\"", "\"{'x': 15, 'multiple': 5}\"", "\"{'x': 24.2, 'multiple': 8}\"", "\"{'x': 36, 'multiple': 9}\""], "example_outputs": [{"return": "\"10\""}, {"return": "\"15.0\""}, {"return": "\"10\""}, {"return": "\"20\""}, {"return": "\"35\""}, {"return": "\"48.0\""}, {"return": "\"9\""}, {"return": "\"15\""}, {"return": "\"32.0\""}, {"return": "\"36\""}, {"return": "\"12\""}, {"return": "\"25\""}, {"return": "\"8\""}, {"return": "\"100\""}, {"return": "\"60\""}, {"return": "\"150\""}, {"return": "\"99\""}, {"return": "\"24\""}, {"return": "\"42\""}, {"return": "\"36\""}, {"return": "\"6\""}, {"return": "\"15\""}, {"return": "\"30\""}, {"return": "\"34.0\""}, {"return": "\"18.0\""}, {"return": "\"100\""}, {"return": "\"48\""}, {"return": "\"28\""}, {"return": "\"9\""}, {"return": "\"60.0\""}], "parsed_inputs": [[["x", "10"], ["multiple", "2"]], [["x", "12.5"], ["multiple", "3"]], [["x", "7"], ["multiple", "5"]], [["x", "20"], ["multiple", "4"]], [["x", "31"], ["multiple", "7"]], [["x", "42.8"], ["multiple", "6"]], [["x", "9"], ["multiple", "3"]], [["x", "15"], ["multiple", "5"]], [["x", "24.2"], ["multiple", "8"]], [["x", "36"], ["multiple", "9"]]], "exec_code": "def _round_up(x, multiple):\n    remainder = x % multiple\n    return x if remainder == 0 else x + multiple - remainder\n", "output": "The function is:\n\n```python\ndef _round_up(x, multiple):\n    remainder = x % multiple\n    return x if remainder == 0 else x + multiple - remainder\n\n```", "choosed_example_idx": [2, 8, 6, 5], "prompt": "Write a function that generates the output from the input.\n\nFunction: _round_up\n\n\nInput: dict(x=7, multiple=5), Output: \"10\"\nInput: dict(x=24.2, multiple=8), Output: \"32.0\"\nInput: dict(x=9, multiple=3), Output: \"9\"\nInput: dict(x=42.8, multiple=6), Output: \"48.0\"\n\n", "id": "d7986374e4136bbdaf76fa102ed409d48401f347_0"}
{"example_str": "examples = [\n    dict(x=1, y=2, z=3),\n    dict(x=5, y=4, z=4),\n    dict(x=1, y=3, z=2),\n    dict(x=10, y=10, z=7),\n    dict(x=2, y=5, z=4),\n    dict(x=1, y=1, z=1),\n    dict(x=100, y=100, z=50),\n    dict(x=20, y=20, z=20),\n    dict(x=3, y=2, z=1),\n    dict(x=7, y=8, z=6),\n]\nexamples += [\n    dict(x=1, y=2, z=3),  # Mouse C is furthest from both cats\n    dict(x=5, y=5, z=5),  # All are at the same position\n    dict(x=0, y=10, z=5),  # Mouse C is exactly in the middle of Cat A and Cat B\n    dict(x=10, y=0, z=7),  # Cat A is closer to Mouse C\n    dict(x=3, y=6, z=4),  # Cat A is closer to Mouse C\n    dict(x=7, y=7, z=1),  # Both cats are at the same distance from Mouse C\n    dict(x=2, y=8, z=5),  # Cat B is closer to Mouse C\n    dict(x=-1, y=-2, z=-3),  # Negative positions, Cat A is closer\n    dict(x=-5, y=5, z=0),  # Negative and positive mix, Cat B is closer\n    dict(x=100, y=200, z=150)  # Large numbers, Cat A is closer\n]\nexamples += [\n    dict(x=1, y=2, z=3),\n    dict(x=5, y=5, z=5),\n    dict(x=0, y=10, z=5),\n    dict(x=10, y=0, z=5),\n    dict(x=3, y=7, z=5),\n    dict(x=6, y=6, z=1),\n    dict(x=10, y=3, z=6),\n    dict(x=8, y=3, z=5),\n    dict(x=2, y=2, z=2),\n    dict(x=9, y=4, z=7)\n]", "code": "def catAndMouse(x, y, z):\n    catA = abs(x - z)\n    catB = abs(y - z)\n    if catA == catB:\n        return 'Mouse C'\n    else:\n        return 'Cat A' if catA < catB else 'Cat B'\n", "func_name": "catAndMouse", "exec_status": true, "example_inputs": ["\"{'x': 1, 'y': 2, 'z': 3}\"", "\"{'x': 5, 'y': 4, 'z': 4}\"", "\"{'x': 1, 'y': 3, 'z': 2}\"", "\"{'x': 10, 'y': 10, 'z': 7}\"", "\"{'x': 2, 'y': 5, 'z': 4}\"", "\"{'x': 1, 'y': 1, 'z': 1}\"", "\"{'x': 100, 'y': 100, 'z': 50}\"", "\"{'x': 20, 'y': 20, 'z': 20}\"", "\"{'x': 3, 'y': 2, 'z': 1}\"", "\"{'x': 7, 'y': 8, 'z': 6}\""], "example_outputs": [{"return": "\"'Cat B'\""}, {"return": "\"'Cat B'\""}, {"return": "\"'Mouse C'\""}, {"return": "\"'Mouse C'\""}, {"return": "\"'Cat B'\""}, {"return": "\"'Mouse C'\""}, {"return": "\"'Mouse C'\""}, {"return": "\"'Mouse C'\""}, {"return": "\"'Cat B'\""}, {"return": "\"'Cat A'\""}, {"return": "\"'Cat B'\""}, {"return": "\"'Mouse C'\""}, {"return": "\"'Mouse C'\""}, {"return": "\"'Cat A'\""}, {"return": "\"'Cat A'\""}, {"return": "\"'Mouse C'\""}, {"return": "\"'Mouse C'\""}, {"return": "\"'Cat B'\""}, {"return": "\"'Mouse C'\""}, {"return": "\"'Mouse C'\""}, {"return": "\"'Cat B'\""}, {"return": "\"'Mouse C'\""}, {"return": "\"'Mouse C'\""}, {"return": "\"'Mouse C'\""}, {"return": "\"'Mouse C'\""}, {"return": "\"'Mouse C'\""}, {"return": "\"'Cat B'\""}, {"return": "\"'Cat B'\""}, {"return": "\"'Mouse C'\""}, {"return": "\"'Cat A'\""}], "parsed_inputs": [[["x", "1"], ["y", "2"], ["z", "3"]], [["x", "5"], ["y", "4"], ["z", "4"]], [["x", "1"], ["y", "3"], ["z", "2"]], [["x", "10"], ["y", "10"], ["z", "7"]], [["x", "2"], ["y", "5"], ["z", "4"]], [["x", "1"], ["y", "1"], ["z", "1"]], [["x", "100"], ["y", "100"], ["z", "50"]], [["x", "20"], ["y", "20"], ["z", "20"]], [["x", "3"], ["y", "2"], ["z", "1"]], [["x", "7"], ["y", "8"], ["z", "6"]]], "exec_code": "def catAndMouse(x, y, z):\n    catA = abs(x - z)\n    catB = abs(y - z)\n    if catA == catB:\n        return 'Mouse C'\n    else:\n        return 'Cat A' if catA < catB else 'Cat B'\n", "output": "The function is:\n\n```python\ndef catAndMouse(x, y, z):\n    catA = abs(x - z)\n    catB = abs(y - z)\n    if catA == catB:\n        return 'Mouse C'\n    else:\n        return 'Cat A' if catA < catB else 'Cat B'\n\n```", "choosed_example_idx": [2, 5, 8, 6], "prompt": "Function: catAndMouse\nInput: dict(x=1, y=3, z=2), Output: \"'Mouse C'\"\nInput: dict(x=1, y=1, z=1), Output: \"'Mouse C'\"\nInput: dict(x=3, y=2, z=1), Output: \"'Cat B'\"\nInput: dict(x=100, y=100, z=50), Output: \"'Mouse C'\"\n\nWrite a function that generates the output from the input.\n\n\n", "id": "47b8dc6bb77748f7926ceae0b5dfcd648d6f5313_0"}
{"example_str": "examples = [\n    dict(x=3, y=4),\n    dict(x=6, y=2),\n    dict(x=1, y=1),\n    dict(x=10, y=3),\n    dict(x=4, y=6),\n    dict(x=2, y=8),\n    dict(x=5, y=5),\n    dict(x=7, y=1),\n    dict(x=9, y=9),\n    dict(x=8, y=7),\n]\nexamples += [\n    dict(x=3, y=3),   # Both x and y are less than 5\n    dict(x=6, y=2),   # x is greater than 5, y is less than 5\n    dict(x=4, y=6),   # x is less than 5, y is greater than 5\n    dict(x=7, y=7),   # Both x and y are greater than 5\n    dict(x=0, y=0),   # Edge case where both x and y are 0\n    dict(x=10, y=1),  # x is much greater than 5, y is less than 5\n    dict(x=1, y=10),  # x is less than 5, y is much greater than 5\n    dict(x=5, y=5),   # Both x and y are exactly 5\n    dict(x=8, y=3),   # x is greater than 5, y is less than 5, sum of x and y > 8\n    dict(x=3, y=8)    # x is less than 5, y is greater than 5, sum of x and y > 8\n]\nexamples += [\n    dict(x=3, y=2),\n    dict(x=6, y=4),\n    dict(x=1, y=7),\n    dict(x=10, y=10),\n    dict(x=5, y=5),\n    dict(x=0, y=0),\n    dict(x=8, y=3),\n    dict(x=4, y=6),\n    dict(x=7, y=1),\n    dict(x=2, y=9)\n]", "code": "def conta(x, y):\n    if x <= 5:\n        valor_m = x * 2.5\n    else:\n        valor_m = x * 2.2\n    if y <= 5:\n        valor_ma = y * 1.8\n    else:\n        valor_ma = x * 1.5\n    if x + y > 8 or valor_m + valor_ma > 25:\n        return valor_m + valor_ma - (valor_m + valor_ma) * 0.1\n    else:\n        return valor_m + valor_ma\n", "func_name": "conta", "exec_status": true, "example_inputs": ["\"{'x': 3, 'y': 4}\"", "\"{'x': 6, 'y': 2}\"", "\"{'x': 1, 'y': 1}\"", "\"{'x': 10, 'y': 3}\"", "\"{'x': 4, 'y': 6}\"", "\"{'x': 2, 'y': 8}\"", "\"{'x': 5, 'y': 5}\"", "\"{'x': 7, 'y': 1}\"", "\"{'x': 9, 'y': 9}\"", "\"{'x': 8, 'y': 7}\""], "example_outputs": [{"return": "\"14.7\""}, {"return": "\"16.8\""}, {"return": "\"4.3\""}, {"return": "\"24.659999999999997\""}, {"return": "\"14.4\""}, {"return": "\"7.2\""}, {"return": "\"19.35\""}, {"return": "\"17.200000000000003\""}, {"return": "\"29.97\""}, {"return": "\"26.64\""}, {"return": "\"12.9\""}, {"return": "\"16.8\""}, {"return": "\"14.4\""}, {"return": "\"23.310000000000002\""}, {"return": "\"0.0\""}, {"return": "\"21.42\""}, {"return": "\"3.6\""}, {"return": "\"19.35\""}, {"return": "\"20.7\""}, {"return": "\"10.8\""}, {"return": "\"11.1\""}, {"return": "\"18.360000000000003\""}, {"return": "\"4.0\""}, {"return": "\"33.3\""}, {"return": "\"19.35\""}, {"return": "\"0.0\""}, {"return": "\"20.7\""}, {"return": "\"14.4\""}, {"return": "\"17.200000000000003\""}, {"return": "\"7.2\""}], "parsed_inputs": [[["x", "3"], ["y", "4"]], [["x", "6"], ["y", "2"]], [["x", "1"], ["y", "1"]], [["x", "10"], ["y", "3"]], [["x", "4"], ["y", "6"]], [["x", "2"], ["y", "8"]], [["x", "5"], ["y", "5"]], [["x", "7"], ["y", "1"]], [["x", "9"], ["y", "9"]], [["x", "8"], ["y", "7"]]], "exec_code": "def conta(x, y):\n    if x <= 5:\n        valor_m = x * 2.5\n    else:\n        valor_m = x * 2.2\n    if y <= 5:\n        valor_ma = y * 1.8\n    else:\n        valor_ma = x * 1.5\n    if x + y > 8 or valor_m + valor_ma > 25:\n        return valor_m + valor_ma - (valor_m + valor_ma) * 0.1\n    else:\n        return valor_m + valor_ma\n", "output": "The function is:\n\n```python\ndef conta(x, y):\n    if x <= 5:\n        valor_m = x * 2.5\n    else:\n        valor_m = x * 2.2\n    if y <= 5:\n        valor_ma = y * 1.8\n    else:\n        valor_ma = x * 1.5\n    if x + y > 8 or valor_m + valor_ma > 25:\n        return valor_m + valor_ma - (valor_m + valor_ma) * 0.1\n    else:\n        return valor_m + valor_ma\n\n```", "choosed_example_idx": [1, 6, 5, 0, 2, 3, 4, 8, 9, 7], "prompt": "Function: conta\nWrite a function that generates the output from the input.\n\nInput: dict(x=6, y=2), Output: \"16.8\"\nInput: dict(x=5, y=5), Output: \"19.35\"\nInput: dict(x=2, y=8), Output: \"7.2\"\nInput: dict(x=3, y=4), Output: \"14.7\"\nInput: dict(x=1, y=1), Output: \"4.3\"\nInput: dict(x=10, y=3), Output: \"24.659999999999997\"\nInput: dict(x=4, y=6), Output: \"14.4\"\nInput: dict(x=9, y=9), Output: \"29.97\"\nInput: dict(x=8, y=7), Output: \"26.64\"\nInput: dict(x=7, y=1), Output: \"17.200000000000003\"\n\n", "id": "989ff2d6e360bf4427fd06da5cf9876a76ac250d_0"}
{"example_str": "examples = [\n    dict(strings=[\"hello\", \"world\"]),\n    dict(strings=[\"a\", \"b\", \"c\"]),\n    dict(strings=[\"\"]),\n    dict(strings=[\"path\", \"to\", \"file.txt\"]),\n    dict(strings=[\"/home\", \"user\", \"documents\"]),\n    dict(strings=[\"https:\", \"\", \"www.example.com\"]),\n    dict(strings=[\"\"]),\n    dict(strings=[\"one\", \"two\", \"three\", \"four\", \"five\"]),\n    dict(strings=[\"C:\", \"Windows\", \"System32\"]),\n    dict(strings=[\"root\", \"dir1\", \"dir2\", \"file.txt\"]),\n    dict(strings=[\"\"]),\n]\nexamples += [\n    dict(strings=[\"home\", \"user\", \"documents\"]),\n    dict(strings=[\"var\", \"log\"]),\n    dict(strings=[\"usr\", \"bin\", \"python\"]),\n    dict(strings=[\"etc\", \"nginx\", \"sites-available\"]),\n    dict(strings=[\"tmp\"]),\n    dict(strings=[\"root\", \"projects\", \"project1\", \"src\"]),\n    dict(strings=[\"opt\", \"local\", \"lib\"]),\n    dict(strings=[\"home\", \"username\", \"downloads\", \"movies\"]),\n    dict(strings=[\"\", \"usr\", \"share\", \"doc\"]),\n    dict(strings=[\"home\", \"user\", \"\", \"workspace\"])\n]\nexamples += [\n    dict(strings=[\"home\", \"user\", \"documents\"]),\n    dict(strings=[\"var\", \"log\"]),\n    dict(strings=[\"etc\", \"config\", \"settings\"]),\n    dict(strings=[\"usr\", \"bin\", \"script.sh\"]),\n    dict(strings=[\"tmp\"]),\n    dict(strings=[\"root\", \"projects\", \"project1\", \"src\"]),\n    dict(strings=[\"opt\", \"local\", \"lib\"]),\n    dict(strings=[\"home\", \"username\", \"downloads\", \"movies\"]),\n    dict(strings=[\"\", \"absolute\", \"path\", \"example\"]),\n    dict(strings=[\"multiple\", \"folders\", \"in\", \"path\", \"here\"])\n]", "code": "def pathcat(strings):\n    return '/'.join(strings)\n", "func_name": "pathcat", "exec_status": true, "example_inputs": ["\"{'strings': ['hello', 'world']}\"", "\"{'strings': ['a', 'b', 'c']}\"", "\"{'strings': ['']}\"", "\"{'strings': ['path', 'to', 'file.txt']}\"", "\"{'strings': ['/home', 'user', 'documents']}\"", "\"{'strings': ['https:', '', 'www.example.com']}\"", "\"{'strings': ['']}\"", "\"{'strings': ['one', 'two', 'three', 'four', 'five']}\"", "\"{'strings': ['C:', 'Windows', 'System32']}\"", "\"{'strings': ['root', 'dir1', 'dir2', 'file.txt']}\"", "\"{'strings': ['']}\""], "example_outputs": [{"return": "\"'hello/world'\""}, {"return": "\"'a/b/c'\""}, {"return": "\"''\""}, {"return": "\"'path/to/file.txt'\""}, {"return": "\"'/home/user/documents'\""}, {"return": "\"'https://www.example.com'\""}, {"return": "\"''\""}, {"return": "\"'one/two/three/four/five'\""}, {"return": "\"'C:/Windows/System32'\""}, {"return": "\"'root/dir1/dir2/file.txt'\""}, {"return": "\"''\""}, {"return": "\"'home/user/documents'\""}, {"return": "\"'var/log'\""}, {"return": "\"'usr/bin/python'\""}, {"return": "\"'etc/nginx/sites-available'\""}, {"return": "\"'tmp'\""}, {"return": "\"'root/projects/project1/src'\""}, {"return": "\"'opt/local/lib'\""}, {"return": "\"'home/username/downloads/movies'\""}, {"return": "\"'/usr/share/doc'\""}, {"return": "\"'home/user//workspace'\""}, {"return": "\"'home/user/documents'\""}, {"return": "\"'var/log'\""}, {"return": "\"'etc/config/settings'\""}, {"return": "\"'usr/bin/script.sh'\""}, {"return": "\"'tmp'\""}, {"return": "\"'root/projects/project1/src'\""}, {"return": "\"'opt/local/lib'\""}, {"return": "\"'home/username/downloads/movies'\""}, {"return": "\"'/absolute/path/example'\""}, {"return": "\"'multiple/folders/in/path/here'\""}], "parsed_inputs": [[["strings", "['hello', 'world']"]], [["strings", "['a', 'b', 'c']"]], [["strings", "['']"]], [["strings", "['path', 'to', 'file.txt']"]], [["strings", "['/home', 'user', 'documents']"]], [["strings", "['https:', '', 'www.example.com']"]], [["strings", "['']"]], [["strings", "['one', 'two', 'three', 'four', 'five']"]], [["strings", "['C:', 'Windows', 'System32']"]], [["strings", "['root', 'dir1', 'dir2', 'file.txt']"]], [["strings", "['']"]]], "exec_code": "def pathcat(strings):\n    return '/'.join(strings)\n", "output": "The function is:\n\n```python\ndef pathcat(strings):\n    return '/'.join(strings)\n\n```", "choosed_example_idx": [10, 1, 7, 5, 6], "prompt": "Input: dict(strings=['']), Output: \"''\"\nInput: dict(strings=['a', 'b', 'c']), Output: \"'a/b/c'\"\nInput: dict(strings=['one', 'two', 'three', 'four', 'five']), Output: \"'one/two/three/four/five'\"\nInput: dict(strings=['https:', '', 'www.example.com']), Output: \"'https://www.example.com'\"\nInput: dict(strings=['']), Output: \"''\"\n\n\nWrite a function that generates the output from the input.\n\n\nFunction: pathcat\n", "id": "5123309d18897ab0a52f66cfa16a1a5f47316f2e_0"}
{"example_str": "examples = [\n    dict(s1='abc', s2='def'),\n    dict(s1='hello', s2='world'),\n    dict(s1='short', s2='veryverylong'),\n    dict(s1='abcdefg', s2='abcd'),\n    dict(s1='xyz', s2=''),\n    dict(s1='', s2='abc'),\n    dict(s1='123', s2='456'),\n    dict(s1='abcdefgh', s2='ijklmnop'),\n    dict(s1='a', s2='b'),\n    dict(s1='veryverylong', s2='short'),\n]\nexamples += [\n    dict(s1=\"abc\", s2=\"123\"),  # Equal length\n    dict(s1=\"hello\", s2=\"world\"),  # Equal length\n    dict(s1=\"short\", s2=\"longerstring\"),  # s1 shorter than s2\n    dict(s1=\"longerstring\", s2=\"short\"),  # s1 longer than s2\n    dict(s1=\"\", s2=\"nonempty\"),  # s1 is empty\n    dict(s1=\"nonempty\", s2=\"\"),  # s2 is empty\n    dict(s1=\"123\", s2=\"abc\"),  # Equal length, different characters\n    dict(s1=\"same\", s2=\"same\"),  # Both strings are identical\n    dict(s1=\"a\", s2=\"12345\"),  # s1 much shorter than s2\n    dict(s1=\"12345\", s2=\"a\")  # s2 much shorter than s1\n]\nexamples += [\n    dict(s1=\"abc\", s2=\"123\"),\n    dict(s1=\"hello\", s2=\"world\"),\n    dict(s1=\"apple\", s2=\"pie\"),\n    dict(s1=\"data\", s2=\"science\"),\n    dict(s1=\"python\", s2=\"code\"),\n    dict(s1=\"12345\", s2=\"6789\"),\n    dict(s1=\"short\", s2=\"longerstring\"),\n    dict(s1=\"longerstring\", s2=\"short\"),\n    dict(s1=\"same\", s2=\"same\"),\n    dict(s1=\"\", s2=\"nonempty\")\n]", "code": "def laceStrings(s1, s2):\n    \"\"\"\n    s1 and s2 are strings.\n\n    Returns a new str with elements of s1 and s2 interlaced,\n    beginning with s1. If strings are not of same length, \n    then the extra elements should appear at the end.\n    \"\"\"\n    lacedString = ''\n    dif = len(s1) - len(s2)\n    if dif == 0:\n        for i in range(len(s2)):\n            lacedString = lacedString + s1[i]\n            lacedString = lacedString + s2[i]\n    if dif < 0:\n        for i in range(len(s1)):\n            lacedString = lacedString + s1[i]\n            lacedString = lacedString + s2[i]\n        for i in range(dif, 0):\n            lacedString = lacedString + s2[i]\n    if dif > 0:\n        for i in range(len(s2)):\n            lacedString = lacedString + s1[i]\n            lacedString = lacedString + s2[i]\n        for i in range(-dif, 0):\n            lacedString = lacedString + s1[i]\n    return lacedString\n", "func_name": "laceStrings", "exec_status": true, "example_inputs": ["\"{'s1': 'abc', 's2': 'def'}\"", "\"{'s1': 'hello', 's2': 'world'}\"", "\"{'s1': 'short', 's2': 'veryverylong'}\"", "\"{'s1': 'abcdefg', 's2': 'abcd'}\"", "\"{'s1': 'xyz', 's2': ''}\"", "\"{'s1': '', 's2': 'abc'}\"", "\"{'s1': '123', 's2': '456'}\"", "\"{'s1': 'abcdefgh', 's2': 'ijklmnop'}\"", "\"{'s1': 'a', 's2': 'b'}\"", "\"{'s1': 'veryverylong', 's2': 'short'}\""], "example_outputs": [{"return": "\"'adbecf'\""}, {"return": "\"'hweolrllod'\""}, {"return": "\"'svheorrytverylong'\""}, {"return": "\"'aabbccddefg'\""}, {"return": "\"'xyz'\""}, {"return": "\"'abc'\""}, {"return": "\"'142536'\""}, {"return": "\"'aibjckdlemfngohp'\""}, {"return": "\"'ab'\""}, {"return": "\"'vsehroyrvterylong'\""}, {"return": "\"'a1b2c3'\""}, {"return": "\"'hweolrllod'\""}, {"return": "\"'slhoonrgterstring'\""}, {"return": "\"'lsohnogretrstring'\""}, {"return": "\"'nonempty'\""}, {"return": "\"'nonempty'\""}, {"return": "\"'1a2b3c'\""}, {"return": "\"'ssaammee'\""}, {"return": "\"'a12345'\""}, {"return": "\"'1a2345'\""}, {"return": "\"'a1b2c3'\""}, {"return": "\"'hweolrllod'\""}, {"return": "\"'appipele'\""}, {"return": "\"'dsactiaence'\""}, {"return": "\"'pcyotdheon'\""}, {"return": "\"'162738495'\""}, {"return": "\"'slhoonrgterstring'\""}, {"return": "\"'lsohnogretrstring'\""}, {"return": "\"'ssaammee'\""}, {"return": "\"'nonempty'\""}], "parsed_inputs": [[["s1", "\"abc\""], ["s2", "\"def\""]], [["s1", "\"hello\""], ["s2", "\"world\""]], [["s1", "\"short\""], ["s2", "\"veryverylong\""]], [["s1", "\"abcdefg\""], ["s2", "\"abcd\""]], [["s1", "\"xyz\""], ["s2", "\"\""]], [["s1", "\"\""], ["s2", "\"abc\""]], [["s1", "\"123\""], ["s2", "\"456\""]], [["s1", "\"abcdefgh\""], ["s2", "\"ijklmnop\""]], [["s1", "\"a\""], ["s2", "\"b\""]], [["s1", "\"veryverylong\""], ["s2", "\"short\""]]], "exec_code": "def laceStrings(s1, s2):\n    \"\"\"\n    s1 and s2 are strings.\n\n    Returns a new str with elements of s1 and s2 interlaced,\n    beginning with s1. If strings are not of same length, \n    then the extra elements should appear at the end.\n    \"\"\"\n    lacedString = ''\n    dif = len(s1) - len(s2)\n    if dif == 0:\n        for i in range(len(s2)):\n            lacedString = lacedString + s1[i]\n            lacedString = lacedString + s2[i]\n    if dif < 0:\n        for i in range(len(s1)):\n            lacedString = lacedString + s1[i]\n            lacedString = lacedString + s2[i]\n        for i in range(dif, 0):\n            lacedString = lacedString + s2[i]\n    if dif > 0:\n        for i in range(len(s2)):\n            lacedString = lacedString + s1[i]\n            lacedString = lacedString + s2[i]\n        for i in range(-dif, 0):\n            lacedString = lacedString + s1[i]\n    return lacedString\n", "output": "The function is:\n\n```python\ndef laceStrings(s1, s2):\n    \"\"\"\n    s1 and s2 are strings.\n\n    Returns a new str with elements of s1 and s2 interlaced,\n    beginning with s1. If strings are not of same length, \n    then the extra elements should appear at the end.\n    \"\"\"\n    lacedString = ''\n    dif = len(s1) - len(s2)\n    if dif == 0:\n        for i in range(len(s2)):\n            lacedString = lacedString + s1[i]\n            lacedString = lacedString + s2[i]\n    if dif < 0:\n        for i in range(len(s1)):\n            lacedString = lacedString + s1[i]\n            lacedString = lacedString + s2[i]\n        for i in range(dif, 0):\n            lacedString = lacedString + s2[i]\n    if dif > 0:\n        for i in range(len(s2)):\n            lacedString = lacedString + s1[i]\n            lacedString = lacedString + s2[i]\n        for i in range(-dif, 0):\n            lacedString = lacedString + s1[i]\n    return lacedString\n\n```", "choosed_example_idx": [6, 0, 2, 9, 7], "prompt": "Input: dict(s1=\"123\", s2=\"456\"), Output: \"'142536'\"\nInput: dict(s1=\"abc\", s2=\"def\"), Output: \"'adbecf'\"\nInput: dict(s1=\"short\", s2=\"veryverylong\"), Output: \"'svheorrytverylong'\"\nInput: dict(s1=\"veryverylong\", s2=\"short\"), Output: \"'vsehroyrvterylong'\"\nInput: dict(s1=\"abcdefgh\", s2=\"ijklmnop\"), Output: \"'aibjckdlemfngohp'\"\n\nWrite a function that generates the output from the input.\nFunction: laceStrings\n", "id": "7bc4c81dcfc841c035b19d5c65b3f4b1d6ea9605_0"}
{"example_str": "examples = [\n    dict(num1='10', num2='5'),\n    dict(num1='20.5', num2='10.2'),\n    dict(num1='0', num2='0'),\n    dict(num1='100', num2='50'),\n    dict(num1='-10', num2='5'),\n    dict(num1='10', num2='-5'),\n    dict(num1='-10', num2='-5'),\n    dict(num1='10.5', num2='0.5'),\n    dict(num1='0.1', num2='0.05'),\n    dict(num1='100.01', num2='50.005'),\n]\nexamples += [\n    dict(num1=10, num2=5),          # Example 1: both integers\n    dict(num1=5.5, num2=3.2),       # Example 2: both floats\n    dict(num1=\"20\", num2=\"10\"),     # Example 3: both string numbers\n    dict(num1=\"15.2\", num2=\"5.1\"),  # Example 4: both string floats\n    dict(num1=0, num2=0),           # Example 5: zero subtraction\n    dict(num1=-10, num2=-5),        # Example 6: negative numbers\n    dict(num1=-5, num2=5),          # Example 7: negative and positive number\n    dict(num1=100, num2=50.5),      # Example 8: integer and float\n    dict(num1=\"100\", num2=50),      # Example 9: string integer and integer\n    dict(num1=3.333, num2=1.111)    # Example 10: float precision numbers\n]\nexamples += [\n    dict(num1=10, num2=5),\n    dict(num1=20.5, num2=10.2),\n    dict(num1='30', num2='15'),\n    dict(num1=0, num2=0),\n    dict(num1=-10, num2=-5),\n    dict(num1='100.5', num2='50.25'),\n    dict(num1=8, num2=3),\n    dict(num1=2.5, num2=1.5),\n    dict(num1='45', num2='10'),\n    dict(num1=60, num2=30)\n]", "code": "def menos(num1, num2):\n    return float(num1) - float(num2)\n", "func_name": "menos", "exec_status": true, "example_inputs": ["\"{'num1': '10', 'num2': '5'}\"", "\"{'num1': '20.5', 'num2': '10.2'}\"", "\"{'num1': '0', 'num2': '0'}\"", "\"{'num1': '100', 'num2': '50'}\"", "\"{'num1': '-10', 'num2': '5'}\"", "\"{'num1': '10', 'num2': '-5'}\"", "\"{'num1': '-10', 'num2': '-5'}\"", "\"{'num1': '10.5', 'num2': '0.5'}\"", "\"{'num1': '0.1', 'num2': '0.05'}\"", "\"{'num1': '100.01', 'num2': '50.005'}\""], "example_outputs": [{"return": "\"5.0\""}, {"return": "\"10.3\""}, {"return": "\"0.0\""}, {"return": "\"50.0\""}, {"return": "\"-15.0\""}, {"return": "\"15.0\""}, {"return": "\"-5.0\""}, {"return": "\"10.0\""}, {"return": "\"0.05\""}, {"return": "\"50.005\""}, {"return": "\"5.0\""}, {"return": "\"2.3\""}, {"return": "\"10.0\""}, {"return": "\"10.1\""}, {"return": "\"0.0\""}, {"return": "\"-5.0\""}, {"return": "\"-10.0\""}, {"return": "\"49.5\""}, {"return": "\"50.0\""}, {"return": "\"2.2220000000000004\""}, {"return": "\"5.0\""}, {"return": "\"10.3\""}, {"return": "\"15.0\""}, {"return": "\"0.0\""}, {"return": "\"-5.0\""}, {"return": "\"50.25\""}, {"return": "\"5.0\""}, {"return": "\"1.0\""}, {"return": "\"35.0\""}, {"return": "\"30.0\""}], "parsed_inputs": [[["num1", "\"10\""], ["num2", "\"5\""]], [["num1", "\"20.5\""], ["num2", "\"10.2\""]], [["num1", "\"0\""], ["num2", "\"0\""]], [["num1", "\"100\""], ["num2", "\"50\""]], [["num1", "\"-10\""], ["num2", "\"5\""]], [["num1", "\"10\""], ["num2", "\"-5\""]], [["num1", "\"-10\""], ["num2", "\"-5\""]], [["num1", "\"10.5\""], ["num2", "\"0.5\""]], [["num1", "\"0.1\""], ["num2", "\"0.05\""]], [["num1", "\"100.01\""], ["num2", "\"50.005\""]]], "exec_code": "def menos(num1, num2):\n    return float(num1) - float(num2)\n", "output": "The function is:\n\n```python\ndef menos(num1, num2):\n    return float(num1) - float(num2)\n\n```", "choosed_example_idx": [0, 6, 4, 7, 8, 2, 1, 9], "prompt": "Function: menos\nInput: dict(num1=\"10\", num2=\"5\"), Output: \"5.0\"\nInput: dict(num1=\"-10\", num2=\"-5\"), Output: \"-5.0\"\nInput: dict(num1=\"-10\", num2=\"5\"), Output: \"-15.0\"\nInput: dict(num1=\"10.5\", num2=\"0.5\"), Output: \"10.0\"\nInput: dict(num1=\"0.1\", num2=\"0.05\"), Output: \"0.05\"\nInput: dict(num1=\"0\", num2=\"0\"), Output: \"0.0\"\nInput: dict(num1=\"20.5\", num2=\"10.2\"), Output: \"10.3\"\nInput: dict(num1=\"100.01\", num2=\"50.005\"), Output: \"50.005\"\n\nWrite a function that generates the output from the input.\n", "id": "a5b7d9cf65a47864fd522195d0b8c52f4cb93ffc_0"}
{"example_str": "examples = [\n    dict(banks=[0, 2, 7, 0]),\n    dict(banks=[1, 1, 1, 1]),\n    dict(banks=[5, 5, 5, 5]),\n    dict(banks=[10, 0, 0, 0]),\n    dict(banks=[0, 3, 0, 0]),\n    dict(banks=[1, 2, 3, 4]),\n    dict(banks=[5, 0, 5, 0]),\n    dict(banks=[0, 0, 0, 12]),\n    dict(banks=[3, 3, 3, 3]),\n    dict(banks=[9, 9, 9, 9]),\n]\nexamples += [\n    dict(banks=[1, 2, 3, 4, 5]),\n    dict(banks=[10, 20, 30, 40, 50]),\n    dict(banks=[0, 0, 0, 0]),\n    dict(banks=[-1, -2, -3, -4]),\n    dict(banks=[1.5, 2.5, 3.5]),\n    dict(banks=[100, 200, 300, 400, 500]),\n    dict(banks=['a', 'b', 'c', 'd']),\n    dict(banks=[True, False, True]),\n    dict(banks=[None, None, None]),\n    dict(banks=[(1,2), [3,4], {5:6}])\n]\nexamples += [\n    dict(banks=[1, 2, 3, 4, 5]),\n    dict(banks=[10, 20, 30, 40, 50]),\n    dict(banks=[0, 0, 0, 0, 0]),\n    dict(banks=[100, 200, 300, 400, 500]),\n    dict(banks=[-1, -2, -3, -4, -5]),\n    dict(banks=[1]),\n    dict(banks=[999, 888, 777]),\n    dict(banks=[]),\n    dict(banks=[123, 456, 789]),\n    dict(banks=[111, 222, 333, 444, 555, 666])\n]", "code": "def deserialize_state(banks):\n    return ' '.join(list(map(str, banks)))\n", "func_name": "deserialize_state", "exec_status": true, "example_inputs": ["\"{'banks': [0, 2, 7, 0]}\"", "\"{'banks': [1, 1, 1, 1]}\"", "\"{'banks': [5, 5, 5, 5]}\"", "\"{'banks': [10, 0, 0, 0]}\"", "\"{'banks': [0, 3, 0, 0]}\"", "\"{'banks': [1, 2, 3, 4]}\"", "\"{'banks': [5, 0, 5, 0]}\"", "\"{'banks': [0, 0, 0, 12]}\"", "\"{'banks': [3, 3, 3, 3]}\"", "\"{'banks': [9, 9, 9, 9]}\""], "example_outputs": [{"return": "\"'0 2 7 0'\""}, {"return": "\"'1 1 1 1'\""}, {"return": "\"'5 5 5 5'\""}, {"return": "\"'10 0 0 0'\""}, {"return": "\"'0 3 0 0'\""}, {"return": "\"'1 2 3 4'\""}, {"return": "\"'5 0 5 0'\""}, {"return": "\"'0 0 0 12'\""}, {"return": "\"'3 3 3 3'\""}, {"return": "\"'9 9 9 9'\""}, {"return": "\"'1 2 3 4 5'\""}, {"return": "\"'10 20 30 40 50'\""}, {"return": "\"'0 0 0 0'\""}, {"return": "\"'-1 -2 -3 -4'\""}, {"return": "\"'1.5 2.5 3.5'\""}, {"return": "\"'100 200 300 400 500'\""}, {"return": "\"'a b c d'\""}, {"return": "\"'True False True'\""}, {"return": "\"'None None None'\""}, {"return": "\"'(1, 2) [3, 4] {5: 6}'\""}, {"return": "\"'1 2 3 4 5'\""}, {"return": "\"'10 20 30 40 50'\""}, {"return": "\"'0 0 0 0 0'\""}, {"return": "\"'100 200 300 400 500'\""}, {"return": "\"'-1 -2 -3 -4 -5'\""}, {"return": "\"'1'\""}, {"return": "\"'999 888 777'\""}, {"return": "\"''\""}, {"return": "\"'123 456 789'\""}, {"return": "\"'111 222 333 444 555 666'\""}], "parsed_inputs": [[["banks", "[0, 2, 7, 0]"]], [["banks", "[1, 1, 1, 1]"]], [["banks", "[5, 5, 5, 5]"]], [["banks", "[10, 0, 0, 0]"]], [["banks", "[0, 3, 0, 0]"]], [["banks", "[1, 2, 3, 4]"]], [["banks", "[5, 0, 5, 0]"]], [["banks", "[0, 0, 0, 12]"]], [["banks", "[3, 3, 3, 3]"]], [["banks", "[9, 9, 9, 9]"]]], "exec_code": "def deserialize_state(banks):\n    return ' '.join(list(map(str, banks)))\n", "output": "The function is:\n\n```python\ndef deserialize_state(banks):\n    return ' '.join(list(map(str, banks)))\n\n```", "choosed_example_idx": [4, 6, 0, 2, 1, 3, 5, 7], "prompt": "Function: deserialize_state\nInput: dict(banks=[0, 3, 0, 0]), Output: \"'0 3 0 0'\"\nInput: dict(banks=[5, 0, 5, 0]), Output: \"'5 0 5 0'\"\nInput: dict(banks=[0, 2, 7, 0]), Output: \"'0 2 7 0'\"\nInput: dict(banks=[5, 5, 5, 5]), Output: \"'5 5 5 5'\"\nInput: dict(banks=[1, 1, 1, 1]), Output: \"'1 1 1 1'\"\nInput: dict(banks=[10, 0, 0, 0]), Output: \"'10 0 0 0'\"\nInput: dict(banks=[1, 2, 3, 4]), Output: \"'1 2 3 4'\"\nInput: dict(banks=[0, 0, 0, 12]), Output: \"'0 0 0 12'\"\n\n\n\nWrite a function that generates the output from the input.\n", "id": "3d8966562e66230612d6886b100b97414bd606b1_0"}
{"example_str": "examples = [\n    dict(A=[]),\n    dict(A=[1]),\n    dict(A=[3, 4, 3, 2, 3, 2]),\n    dict(A=[1, 2, 3, 4, 5]),\n    dict(A=[5, 5, 5, 5, 5]),\n    dict(A=[1, 1, 1, 2, 2]),\n    dict(A=[2, 2, 3, 3, 3]),\n    dict(A=[10, 10, 10, 20, 30]),\n    dict(A=[1, 2, 3, 4, 5, 6]),\n    dict(A=[7, 7, 7, 7, 7, 7, 7]),\n    dict(A=[9, 9, 9, 8, 8, 8, 8]),\n]\nexamples += [\n    dict(A=[]),  # Empty list\n    dict(A=[1]),  # Single element list\n    dict(A=[1, 1, 2, 2, 2]),  # Majority element exists (2)\n    dict(A=[1, 2, 3, 4, 5]),  # No majority element\n    dict(A=[3, 3, 3, 3, 6, 6, 6, 6, 6]),  # Majority element exists (6)\n    dict(A=[2, 2, 2, 1, 1]),  # Majority element exists (2)\n    dict(A=[5, 5, 5, 5, 1, 1, 1, 1, 1]),  # Majority element exists (1)\n    dict(A=[1, 2, 3, 1, 2, 3, 1]),  # No majority element\n    dict(A=[-1, -1, -1, 2, 3, -1, -1]),  # Majority element exists (-1)\n    dict(A=[0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4])  # No majority element\n]\nexamples += [\n    dict(A=[]),  # Empty list\n    dict(A=[1]),  # Single element\n    dict(A=[1, 1, 2, 2, 1]),  # Majority element exists\n    dict(A=[1, 2, 3, 4, 5]),  # No majority element\n    dict(A=[2, 2, 2, 3, 3]),  # Majority element exists\n    dict(A=[5, 5, 5, 5, 1, 1, 1]),  # Majority element exists\n    dict(A=[1, 2, 2, 1, 1]),  # Majority element exists\n    dict(A=[3, 3, 4, 4, 4]),  # Majority element exists\n    dict(A=[0, 0, 0, 0, 1, 1, 2, 2, 2]),  # Majority element exists\n    dict(A=[-1, -1, -1, 2, 3, -1, 4, -1, -1, 5, 6]),  # Majority element exists\n]", "code": "def solution(A):\n    if len(A) == 0:\n        return -1\n    elif len(A) == 1:\n        return 0\n    s = list(set(A))\n    cnt = {i: (0) for i in s}\n    answer = ''\n    for i in range(len(A)):\n        cnt[A[i]] += 1\n        if cnt[A[i]] > len(A) / 2:\n            answer = A[i]\n            break\n    if answer == '':\n        return -1\n    else:\n        return A.index(answer)\n", "func_name": "solution", "exec_status": true, "example_inputs": ["\"{'A': []}\"", "\"{'A': [1]}\"", "\"{'A': [3, 4, 3, 2, 3, 2]}\"", "\"{'A': [1, 2, 3, 4, 5]}\"", "\"{'A': [5, 5, 5, 5, 5]}\"", "\"{'A': [1, 1, 1, 2, 2]}\"", "\"{'A': [2, 2, 3, 3, 3]}\"", "\"{'A': [10, 10, 10, 20, 30]}\"", "\"{'A': [1, 2, 3, 4, 5, 6]}\"", "\"{'A': [7, 7, 7, 7, 7, 7, 7]}\"", "\"{'A': [9, 9, 9, 8, 8, 8, 8]}\""], "example_outputs": [{"return": "\"-1\""}, {"return": "\"0\""}, {"return": "\"-1\""}, {"return": "\"-1\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"-1\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"-1\""}, {"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"-1\""}, {"return": "\"4\""}, {"return": "\"0\""}, {"return": "\"4\""}, {"return": "\"-1\""}, {"return": "\"0\""}, {"return": "\"-1\""}, {"return": "\"-1\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"-1\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"-1\""}, {"return": "\"0\""}], "parsed_inputs": [[["A", "[]"]], [["A", "[1]"]], [["A", "[3, 4, 3, 2, 3, 2]"]], [["A", "[1, 2, 3, 4, 5]"]], [["A", "[5, 5, 5, 5, 5]"]], [["A", "[1, 1, 1, 2, 2]"]], [["A", "[2, 2, 3, 3, 3]"]], [["A", "[10, 10, 10, 20, 30]"]], [["A", "[1, 2, 3, 4, 5, 6]"]], [["A", "[7, 7, 7, 7, 7, 7, 7]"]], [["A", "[9, 9, 9, 8, 8, 8, 8]"]]], "exec_code": "def solution(A):\n    if len(A) == 0:\n        return -1\n    elif len(A) == 1:\n        return 0\n    s = list(set(A))\n    cnt = {i: (0) for i in s}\n    answer = ''\n    for i in range(len(A)):\n        cnt[A[i]] += 1\n        if cnt[A[i]] > len(A) / 2:\n            answer = A[i]\n            break\n    if answer == '':\n        return -1\n    else:\n        return A.index(answer)\n", "output": "The function is:\n\n```python\ndef solution(A):\n    if len(A) == 0:\n        return -1\n    elif len(A) == 1:\n        return 0\n    s = list(set(A))\n    cnt = {i: (0) for i in s}\n    answer = ''\n    for i in range(len(A)):\n        cnt[A[i]] += 1\n        if cnt[A[i]] > len(A) / 2:\n            answer = A[i]\n            break\n    if answer == '':\n        return -1\n    else:\n        return A.index(answer)\n\n```", "choosed_example_idx": [7, 1, 9, 0, 4], "prompt": "Function: solution\n\nWrite a function that generates the output from the input.\n\nInput: dict(A=[10, 10, 10, 20, 30]), Output: \"0\"\nInput: dict(A=[1]), Output: \"0\"\nInput: dict(A=[7, 7, 7, 7, 7, 7, 7]), Output: \"0\"\nInput: dict(A=[]), Output: \"-1\"\nInput: dict(A=[5, 5, 5, 5, 5]), Output: \"0\"\n\n\n", "id": "de7b9f4f29632ca5a3d71cf79dd3dd7cfce6354f_0"}
{"example_str": "examples = [\n    dict(height=60, weight=100),\n    dict(height=65, weight=120),\n    dict(height=70, weight=150),\n    dict(height=58, weight=90),\n    dict(height=72, weight=180),\n    dict(height=68, weight=140),\n    dict(height=62, weight=110),\n    dict(height=75, weight=200),\n    dict(height=59, weight=95),\n    dict(height=71, weight=160)\n]\nexamples += [\n    dict(height=70, weight=150),  # Example 1: Average height and weight\n    dict(height=64, weight=120),  # Example 2: Shorter height and lighter weight\n    dict(height=76, weight=200),  # Example 3: Taller height and heavier weight\n    dict(height=0, weight=150),   # Example 4: Edge case with zero height\n    dict(height=68, weight=165),  # Example 5: Medium height and slightly above average weight\n    dict(height=72, weight=180),  # Example 6: Above average height and weight\n    dict(height=60, weight=110),  # Example 7: Short height and very light weight\n    dict(height=74, weight=240),  # Example 8: Tall height and very heavy weight\n    dict(height=66, weight=140),  # Example 9: Slightly below average height and average weight\n    dict(height=78, weight=220)   # Example 10: Very tall height and heavy weight\n]\nexamples += [\n    dict(height=68, weight=150),  # Example for a person 5'8\" tall weighing 150 lbs\n    dict(height=70, weight=200),  # Example for a person 5'10\" tall weighing 200 lbs\n    dict(height=64, weight=120),  # Example for a person 5'4\" tall weighing 120 lbs\n    dict(height=72, weight=180),  # Example for a person 6'0\" tall weighing 180 lbs\n    dict(height=60, weight=100),  # Example for a person 5'0\" tall weighing 100 lbs\n    dict(height=74, weight=240),  # Example for a person 6'2\" tall weighing 240 lbs\n    dict(height=66, weight=140),  # Example for a person 5'6\" tall weighing 140 lbs\n    dict(height=62, weight=130),  # Example for a person 5'2\" tall weighing 130 lbs\n    dict(height=76, weight=220),  # Example for a person 6'4\" tall weighing 220 lbs\n    dict(height=58, weight=90)    # Example for a person 4'10\" tall weighing 90 lbs\n]", "code": "def bmi(height, weight):\n    height_meters = height * 0.025\n    weight_kg = weight * 0.45\n    if height_meters == 0:\n        return 0\n    return round(weight_kg / height_meters ** 2, 1)\n", "func_name": "bmi", "exec_status": true, "example_inputs": ["\"{'height': 60, 'weight': 100}\"", "\"{'height': 65, 'weight': 120}\"", "\"{'height': 70, 'weight': 150}\"", "\"{'height': 58, 'weight': 90}\"", "\"{'height': 72, 'weight': 180}\"", "\"{'height': 68, 'weight': 140}\"", "\"{'height': 62, 'weight': 110}\"", "\"{'height': 75, 'weight': 200}\"", "\"{'height': 59, 'weight': 95}\"", "\"{'height': 71, 'weight': 160}\""], "example_outputs": [{"return": "\"20.0\""}, {"return": "\"20.4\""}, {"return": "\"22.0\""}, {"return": "\"19.3\""}, {"return": "\"25.0\""}, {"return": "\"21.8\""}, {"return": "\"20.6\""}, {"return": "\"25.6\""}, {"return": "\"19.6\""}, {"return": "\"22.9\""}, {"return": "\"22.0\""}, {"return": "\"21.1\""}, {"return": "\"24.9\""}, {"return": "\"0\""}, {"return": "\"25.7\""}, {"return": "\"25.0\""}, {"return": "\"22.0\""}, {"return": "\"31.6\""}, {"return": "\"23.1\""}, {"return": "\"26.0\""}, {"return": "\"23.4\""}, {"return": "\"29.4\""}, {"return": "\"21.1\""}, {"return": "\"25.0\""}, {"return": "\"20.0\""}, {"return": "\"31.6\""}, {"return": "\"23.1\""}, {"return": "\"24.3\""}, {"return": "\"27.4\""}, {"return": "\"19.3\""}], "parsed_inputs": [[["height", "60"], ["weight", "100"]], [["height", "65"], ["weight", "120"]], [["height", "70"], ["weight", "150"]], [["height", "58"], ["weight", "90"]], [["height", "72"], ["weight", "180"]], [["height", "68"], ["weight", "140"]], [["height", "62"], ["weight", "110"]], [["height", "75"], ["weight", "200"]], [["height", "59"], ["weight", "95"]], [["height", "71"], ["weight", "160"]]], "exec_code": "def bmi(height, weight):\n    height_meters = height * 0.025\n    weight_kg = weight * 0.45\n    if height_meters == 0:\n        return 0\n    return round(weight_kg / height_meters ** 2, 1)\n", "output": "The function is:\n\n```python\ndef bmi(height, weight):\n    height_meters = height * 0.025\n    weight_kg = weight * 0.45\n    if height_meters == 0:\n        return 0\n    return round(weight_kg / height_meters ** 2, 1)\n\n```", "choosed_example_idx": [4, 3, 5, 8, 7, 9, 1, 2], "prompt": "Function: bmi\nWrite a function that generates the output from the input.\nInput: dict(height=72, weight=180), Output: \"25.0\"\nInput: dict(height=58, weight=90), Output: \"19.3\"\nInput: dict(height=68, weight=140), Output: \"21.8\"\nInput: dict(height=59, weight=95), Output: \"19.6\"\nInput: dict(height=75, weight=200), Output: \"25.6\"\nInput: dict(height=71, weight=160), Output: \"22.9\"\nInput: dict(height=65, weight=120), Output: \"20.4\"\nInput: dict(height=70, weight=150), Output: \"22.0\"\n\n", "id": "0534d14aa2699c5b9512e343deb6775cda0fde4d_0"}
{"example_str": "examples = [\n    dict(wordlist=[\"hello\", \"world\", \"\"]),\n    dict(wordlist=[\"\", \"\", \"\"]),\n    dict(wordlist=[\"a\", \"b\", \"c\", \"d\"]),\n    dict(wordlist=[\"hello\", \"\", \"world\", \"\", \"python\"]),\n    dict(wordlist=[\"\"]),\n    dict(wordlist=[\"1\", \"2\", \"3\", \"4\", \"5\"]),\n    dict(wordlist=[\"apple\", \"banana\", \"\", \"cherry\"]),\n    dict(wordlist=[\"\", \"hello\", \"\", \"world\", \"\"]),\n    dict(wordlist=[\"x\", \"y\", \"z\"]),\n    dict(wordlist=[\"this\", \"\", \"is\", \"\", \"a\", \"\", \"test\"]),\n]\nexamples += [\n    dict(wordlist=[\"hello\", \"world\", \"\"]),\n    dict(wordlist=[\"\", \"\", \"test\", \"example\"]),\n    dict(wordlist=[\" \", \"space\", \"here\", \"\"]),\n    dict(wordlist=[\"\", \"\"]),\n    dict(wordlist=[\"no\", \"empty\", \"strings\"]),\n    dict(wordlist=[\"\", \" \", \"   \", \"empty\", \"spaces\"]),\n    dict(wordlist=[\"Python\", \"\", \"Java\", \"C++\", \"\"]),\n    dict(wordlist=[\"remove\", \"these\", \"\", \"empty\", \"strings\", \"\"]),\n    dict(wordlist=[\"list\", \"with\", \"multiple\", \"\", \"\", \"empties\"]),\n    dict(wordlist=[\"singleempty\", \"\"])\n]\nexamples += [\n    dict(wordlist=['hello', 'world', '']),\n    dict(wordlist=['', 'test', 'example', '']),\n    dict(wordlist=[' ', 'space', 'here', '']),\n    dict(wordlist=['one', 'two', 'three', '']),\n    dict(wordlist=['', '', '']),\n    dict(wordlist=['no', 'empty', 'strings']),\n    dict(wordlist=['', ' ', '  ', '   ']),\n    dict(wordlist=['all', 'good', '']),\n    dict(wordlist=['', 'remove', 'these', 'spaces', '']),\n    dict(wordlist=['example', '', 'list'])\n]", "code": "def remove_space_as_word(wordlist):\n    \"\"\"\n        This function just removes the space from the words\n    \"\"\"\n    return filter(lambda word: word != '', wordlist)\n", "func_name": "remove_space_as_word", "exec_status": true, "example_inputs": ["\"{'wordlist': ['hello', 'world', '']}\"", "\"{'wordlist': ['', '', '']}\"", "\"{'wordlist': ['a', 'b', 'c', 'd']}\"", "\"{'wordlist': ['hello', '', 'world', '', 'python']}\"", "\"{'wordlist': ['']}\"", "\"{'wordlist': ['1', '2', '3', '4', '5']}\"", "\"{'wordlist': ['apple', 'banana', '', 'cherry']}\"", "\"{'wordlist': ['', 'hello', '', 'world', '']}\"", "\"{'wordlist': ['x', 'y', 'z']}\"", "\"{'wordlist': ['this', '', 'is', '', 'a', '', 'test']}\""], "example_outputs": [{"return": "\"<filter object at 0x7f992628a760>\""}, {"return": "\"<filter object at 0x7f992628adf0>\""}, {"return": "\"<filter object at 0x7f992628a7f0>\""}, {"return": "\"<filter object at 0x7f992628a7c0>\""}, {"return": "\"<filter object at 0x7f992628a760>\""}, {"return": "\"<filter object at 0x7f992628adf0>\""}, {"return": "\"<filter object at 0x7f992628a7f0>\""}, {"return": "\"<filter object at 0x7f992628a7c0>\""}, {"return": "\"<filter object at 0x7f992628a760>\""}, {"return": "\"<filter object at 0x7f992628adf0>\""}, {"return": "\"<filter object at 0x7f1218993a90>\""}, {"return": "\"<filter object at 0x7f12188da400>\""}, {"return": "\"<filter object at 0x7f12189937c0>\""}, {"return": "\"<filter object at 0x7f12188da400>\""}, {"return": "\"<filter object at 0x7f1218993a90>\""}, {"return": "\"<filter object at 0x7f12188da400>\""}, {"return": "\"<filter object at 0x7f12189937c0>\""}, {"return": "\"<filter object at 0x7f12188da400>\""}, {"return": "\"<filter object at 0x7f1218993a90>\""}, {"return": "\"<filter object at 0x7f12188da400>\""}, {"return": "\"<filter object at 0x7f532abe79d0>\""}, {"return": "\"<filter object at 0x7f532ac8c7c0>\""}, {"return": "\"<filter object at 0x7f532adceb80>\""}, {"return": "\"<filter object at 0x7f532ac8c820>\""}, {"return": "\"<filter object at 0x7f532abe79d0>\""}, {"return": "\"<filter object at 0x7f532ac8c7c0>\""}, {"return": "\"<filter object at 0x7f532adceb80>\""}, {"return": "\"<filter object at 0x7f532ac8c820>\""}, {"return": "\"<filter object at 0x7f532abe79d0>\""}, {"return": "\"<filter object at 0x7f532ac8c7c0>\""}], "parsed_inputs": [[["wordlist", "['hello', 'world', '']"]], [["wordlist", "['', '', '']"]], [["wordlist", "['a', 'b', 'c', 'd']"]], [["wordlist", "['hello', '', 'world', '', 'python']"]], [["wordlist", "['']"]], [["wordlist", "['1', '2', '3', '4', '5']"]], [["wordlist", "['apple', 'banana', '', 'cherry']"]], [["wordlist", "['', 'hello', '', 'world', '']"]], [["wordlist", "['x', 'y', 'z']"]], [["wordlist", "['this', '', 'is', '', 'a', '', 'test']"]]], "exec_code": "def remove_space_as_word(wordlist):\n    \"\"\"\n        This function just removes the space from the words\n    \"\"\"\n    return filter(lambda word: word != '', wordlist)\n", "output": "The function is:\n\n```python\ndef remove_space_as_word(wordlist):\n    \"\"\"\n        This function just removes the space from the words\n    \"\"\"\n    return filter(lambda word: word != '', wordlist)\n\n```", "choosed_example_idx": [2, 8, 3, 1, 6, 0, 7, 5, 4], "prompt": "Input: dict(wordlist=['a', 'b', 'c', 'd']), Output: \"<filter object at 0x7f992628a7f0>\"\nInput: dict(wordlist=['x', 'y', 'z']), Output: \"<filter object at 0x7f992628a760>\"\nInput: dict(wordlist=['hello', '', 'world', '', 'python']), Output: \"<filter object at 0x7f992628a7c0>\"\nInput: dict(wordlist=['', '', '']), Output: \"<filter object at 0x7f992628adf0>\"\nInput: dict(wordlist=['apple', 'banana', '', 'cherry']), Output: \"<filter object at 0x7f992628a7f0>\"\nInput: dict(wordlist=['hello', 'world', '']), Output: \"<filter object at 0x7f992628a760>\"\nInput: dict(wordlist=['', 'hello', '', 'world', '']), Output: \"<filter object at 0x7f992628a7c0>\"\nInput: dict(wordlist=['1', '2', '3', '4', '5']), Output: \"<filter object at 0x7f992628adf0>\"\nInput: dict(wordlist=['']), Output: \"<filter object at 0x7f992628a760>\"\n\nFunction: remove_space_as_word\n\nWrite a function that generates the output from the input.\n", "id": "faa2662a3a921d5dd871ec6f9673665217b5c529_0"}
{"example_str": "examples = [\n    dict(a=2, b=3),\n    dict(a=-2, b=3),\n    dict(a=0, b=0),\n    dict(a=5, b=-5),\n    dict(a=-10, b=5),\n    dict(a=10, b=-15),\n    dict(a=0.5, b=0.5),\n    dict(a=-0.5, b=0.5),\n    dict(a=5.5, b=-5.5),\n    dict(a=-10.5, b=5.5)\n]\nexamples += [\n    dict(a=10, b=20),        # Example 1: Positive + Positive\n    dict(a=-5, b=3),         # Example 2: Negative + Positive\n    dict(a=0, b=0),          # Example 3: Zero + Zero\n    dict(a=-10, b=-20),      # Example 4: Negative + Negative (will raise NegativeSumError)\n    dict(a=5.5, b=4.5),      # Example 5: Float + Float\n    dict(a=-1.5, b=2),       # Example 6: Negative Float + Positive Integer\n    dict(a=100, b=-150),     # Example 7: Large Positive + Large Negative\n    dict(a=0, b=10),         # Example 8: Zero + Positive\n    dict(a=-0.1, b=0.1),     # Example 9: Small Negative Float + Small Positive Float\n    dict(a=1e9, b=-1e9)      # Example 10: Large Positive + Large Negative (will raise NegativeSumError)\n]\nexamples += [\n    dict(a=10, b=20),     # Positive integers\n    dict(a=-5, b=10),     # Mixed integers resulting in a positive sum\n    dict(a=-10, b=-5),    # Negative integers resulting in a negative sum\n    dict(a=0, b=0),       # Zero sum\n    dict(a=5.5, b=4.5),   # Positive floats\n    dict(a=-3.2, b=4.1),  # Mixed floats resulting in a positive sum\n    dict(a=0, b=5),       # Zero and positive integer\n    dict(a=-1, b=1),      # Sum to zero\n    dict(a=100, b=-150),  # Mixed integers resulting in a negative sum\n    dict(a=2.5, b=-3.0)   # Mixed floats resulting in a negative sum\n]", "code": "def sum_with_exceptions(a, b):\n    _sum = a + b\n    if _sum < 0:\n        raise NegativeSumError\n    else:\n        return _sum\n", "func_name": "sum_with_exceptions", "exec_status": true, "example_inputs": ["\"{'a': 2, 'b': 3}\"", "\"{'a': -2, 'b': 3}\"", "\"{'a': 0, 'b': 0}\"", "\"{'a': 5, 'b': -5}\"", "\"{'a': -10, 'b': 5}\"", "\"{'a': 10, 'b': -15}\"", "\"{'a': 0.5, 'b': 0.5}\"", "\"{'a': -0.5, 'b': 0.5}\"", "\"{'a': 5.5, 'b': -5.5}\"", "\"{'a': -10.5, 'b': 5.5}\""], "example_outputs": [{"return": "\"5\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'NegativeSumError' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'NegativeSumError' is not defined\""}, {"return": "\"1.0\""}, {"return": "\"0.0\""}, {"return": "\"0.0\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'NegativeSumError' is not defined\""}, {"return": "\"30\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'NegativeSumError' is not defined\""}, {"return": "\"0\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'NegativeSumError' is not defined\""}, {"return": "\"10.0\""}, {"return": "\"0.5\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'NegativeSumError' is not defined\""}, {"return": "\"10\""}, {"return": "\"0.0\""}, {"return": "\"0.0\""}, {"return": "\"30\""}, {"return": "\"5\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'NegativeSumError' is not defined\""}, {"return": "\"0\""}, {"return": "\"10.0\""}, {"return": "\"0.8999999999999995\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'NegativeSumError' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'NegativeSumError' is not defined\""}], "parsed_inputs": [[["a", "2"], ["b", "3"]], [["a", "-2"], ["b", "3"]], [["a", "0"], ["b", "0"]], [["a", "5"], ["b", "-5"]], [["a", "-10"], ["b", "5"]], [["a", "10"], ["b", "-15"]], [["a", "0.5"], ["b", "0.5"]], [["a", "-0.5"], ["b", "0.5"]], [["a", "5.5"], ["b", "-5.5"]], [["a", "-10.5"], ["b", "5.5"]]], "exec_code": "def sum_with_exceptions(a, b):\n    _sum = a + b\n    if _sum < 0:\n        raise NegativeSumError\n    else:\n        return _sum\n", "output": "The function is:\n\n```python\ndef sum_with_exceptions(a, b):\n    _sum = a + b\n    if _sum < 0:\n        raise NegativeSumError\n    else:\n        return _sum\n\n```", "choosed_example_idx": [5, 6, 9, 8, 1, 0, 7], "prompt": "Write a function that generates the output from the input.\n\n\nInput: dict(a=10, b=-15), Output: \"<class 'NameError'>: name 'NegativeSumError' is not defined\"\nInput: dict(a=0.5, b=0.5), Output: \"1.0\"\nInput: dict(a=-10.5, b=5.5), Output: \"<class 'NameError'>: name 'NegativeSumError' is not defined\"\nInput: dict(a=5.5, b=-5.5), Output: \"0.0\"\nInput: dict(a=-2, b=3), Output: \"1\"\nInput: dict(a=2, b=3), Output: \"5\"\nInput: dict(a=-0.5, b=0.5), Output: \"0.0\"\n\nFunction: sum_with_exceptions\n", "id": "8bc35212057d7aea094e75f471d839d131518a13_0"}
{"example_str": "examples = [\n    dict(item=1),\n    dict(item=[1]),\n    dict(item=[1, 2]),\n    dict(item=[[1, 2], 3]),\n    dict(item=[1, [2, 3]]),\n    dict(item=[[1, 2], [3, 4]]),\n    dict(item=[1, 2, 3, 4, 5]),\n    dict(item=[1, [2, [3, 4]], 5]),\n    dict(item=[[1, 2], [3, [4, 5]]]),\n    dict(item=[1, [2, [3, [4, 5]]]])\n]\nexamples += [\n    dict(item=5),\n    dict(item=[5]),\n    dict(item=[[5]]),\n    dict(item=[1, 2, 3]),\n    dict(item=[[1, 2], [3, 4]]),\n    dict(item=[[[1], 2], 3]),\n    dict(item=[1, [2, [3, 4], 5], 6]),\n    dict(item=[[[[1]]]]),\n    dict(item=[[], [1, 2], [[3, 4]]]),\n    dict(item=[1, [], 2])\n]\nexamples += [\n    dict(item=5),\n    dict(item=[1]),\n    dict(item=[[2]]),\n    dict(item=[1, 2, 3]),\n    dict(item=[[1, 2], [3, 4]]),\n    dict(item=[[[1], 2], 3]),\n    dict(item=[[[[1]]]]),\n    dict(item=[1, [2, [3, [4]]]]),\n    dict(item=[[1, 2, 3], [4, 5], 6]),\n    dict(item=[[[1, 2], [3, 4]], [[5, 6]]])\n]", "code": "def rec_flattener(item):\n    if isinstance(item, int):\n        return [item]\n    elif isinstance(item, list) and len(item) == 1:\n        return rec_flattener(item[0])\n    else:\n        return rec_flattener(item[0]) + rec_flattener(item[1:])\n", "func_name": "rec_flattener", "exec_status": true, "example_inputs": ["\"{'item': 1}\"", "\"{'item': [1]}\"", "\"{'item': [1, 2]}\"", "\"{'item': [[1, 2], 3]}\"", "\"{'item': [1, [2, 3]]}\"", "\"{'item': [[1, 2], [3, 4]]}\"", "\"{'item': [1, 2, 3, 4, 5]}\"", "\"{'item': [1, [2, [3, 4]], 5]}\"", "\"{'item': [[1, 2], [3, [4, 5]]]}\"", "\"{'item': [1, [2, [3, [4, 5]]]]}\""], "example_outputs": [{"return": "\"[1]\""}, {"return": "\"[1]\""}, {"return": "\"[1, 2]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[1, 2, 3, 4]\""}, {"return": "\"[1, 2, 3, 4, 5]\""}, {"return": "\"[1, 2, 3, 4, 5]\""}, {"return": "\"[1, 2, 3, 4, 5]\""}, {"return": "\"[1, 2, 3, 4, 5]\""}, {"return": "\"[5]\""}, {"return": "\"[5]\""}, {"return": "\"[5]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[1, 2, 3, 4]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[1, 2, 3, 4, 5, 6]\""}, {"return": "\"[1]\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"return": "\"[5]\""}, {"return": "\"[1]\""}, {"return": "\"[2]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[1, 2, 3, 4]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[1]\""}, {"return": "\"[1, 2, 3, 4]\""}, {"return": "\"[1, 2, 3, 4, 5, 6]\""}, {"return": "\"[1, 2, 3, 4, 5, 6]\""}], "parsed_inputs": [[["item", "1"]], [["item", "[1]"]], [["item", "[1, 2]"]], [["item", "[[1, 2], 3]"]], [["item", "[1, [2, 3]]"]], [["item", "[[1, 2], [3, 4]]"]], [["item", "[1, 2, 3, 4, 5]"]], [["item", "[1, [2, [3, 4]], 5]"]], [["item", "[[1, 2], [3, [4, 5]]]"]], [["item", "[1, [2, [3, [4, 5]]]]"]]], "exec_code": "def rec_flattener(item):\n    if isinstance(item, int):\n        return [item]\n    elif isinstance(item, list) and len(item) == 1:\n        return rec_flattener(item[0])\n    else:\n        return rec_flattener(item[0]) + rec_flattener(item[1:])\n", "output": "The function is:\n\n```python\ndef rec_flattener(item):\n    if isinstance(item, int):\n        return [item]\n    elif isinstance(item, list) and len(item) == 1:\n        return rec_flattener(item[0])\n    else:\n        return rec_flattener(item[0]) + rec_flattener(item[1:])\n\n```", "choosed_example_idx": [1, 3, 9, 8, 6, 4, 2, 0, 5], "prompt": "Write a function that generates the output from the input.\n\nInput: dict(item=[1]), Output: \"[1]\"\nInput: dict(item=[[1, 2], 3]), Output: \"[1, 2, 3]\"\nInput: dict(item=[1, [2, [3, [4, 5]]]]), Output: \"[1, 2, 3, 4, 5]\"\nInput: dict(item=[[1, 2], [3, [4, 5]]]), Output: \"[1, 2, 3, 4, 5]\"\nInput: dict(item=[1, 2, 3, 4, 5]), Output: \"[1, 2, 3, 4, 5]\"\nInput: dict(item=[1, [2, 3]]), Output: \"[1, 2, 3]\"\nInput: dict(item=[1, 2]), Output: \"[1, 2]\"\nInput: dict(item=1), Output: \"[1]\"\nInput: dict(item=[[1, 2], [3, 4]]), Output: \"[1, 2, 3, 4]\"\n\n\nFunction: rec_flattener\n\n\n", "id": "0867bda129d4bac3d22b0128ca5a9eb40447e308_0"}
{"example_str": "examples = [\n    dict(intervals=[[1, 3]]),\n    dict(intervals=[[1, 3], [4, 6]]),\n    dict(intervals=[[1, 3], [2, 4], [5, 7]]),\n    dict(intervals=[[1, 10]]),\n    dict(intervals=[[1, 3], [5, 7], [9, 11]]),\n    dict(intervals=[[1, 2], [3, 4], [5, 6]]),\n    dict(intervals=[[1, 1]]),\n    dict(intervals=[[1, 3], [3, 5]]),\n    dict(intervals=[[1, 3], [2, 4], [3, 5]]),\n    dict(intervals=[]),\n]\nexamples += [\n    dict(intervals=[(1, 3)]),\n    dict(intervals=[(1, 3), (2, 5)]),\n    dict(intervals=[(10, 15), (14, 20)]),\n    dict(intervals=[(5, 5)]),\n    dict(intervals=[(0, 1), (1, 2), (2, 3)]),\n    dict(intervals=[(-10, -5), (-8, -3)]),\n    dict(intervals=[(100, 105), (105, 110)]),\n    dict(intervals=[(50, 55), (60, 65), (70, 75)]),\n    dict(intervals=[(1, 2), (3, 4), (5, 6), (7, 8)]),\n    dict(intervals=[(0, 10), (20, 30), (40, 50)])\n]\nexamples += [\n    dict(intervals=[(1, 3)]),\n    dict(intervals=[(1, 3), (2, 5)]),\n    dict(intervals=[(1, 5), (5, 10)]),\n    dict(intervals=[(10, 15), (15, 20)]),\n    dict(intervals=[(0, 1), (1, 2), (2, 3)]),\n    dict(intervals=[(-10, -5), (-5, 0)]),\n    dict(intervals=[(100, 105), (105, 110)]),\n    dict(intervals=[(0, 0)]),\n    dict(intervals=[(1, 2), (3, 4), (5, 6)]),\n    dict(intervals=[(5, 5), (10, 10)])\n]", "code": "def sum_of_intervals(intervals):\n    numbers = []\n    for interval in intervals:\n        for i in range(interval[0], interval[1]):\n            numbers.append(i)\n    return len(set(numbers))\n", "func_name": "sum_of_intervals", "exec_status": true, "example_inputs": ["\"{'intervals': [[1, 3]]}\"", "\"{'intervals': [[1, 3], [4, 6]]}\"", "\"{'intervals': [[1, 3], [2, 4], [5, 7]]}\"", "\"{'intervals': [[1, 10]]}\"", "\"{'intervals': [[1, 3], [5, 7], [9, 11]]}\"", "\"{'intervals': [[1, 2], [3, 4], [5, 6]]}\"", "\"{'intervals': [[1, 1]]}\"", "\"{'intervals': [[1, 3], [3, 5]]}\"", "\"{'intervals': [[1, 3], [2, 4], [3, 5]]}\"", "\"{'intervals': []}\""], "example_outputs": [{"return": "\"2\""}, {"return": "\"4\""}, {"return": "\"5\""}, {"return": "\"9\""}, {"return": "\"6\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"4\""}, {"return": "\"4\""}, {"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"4\""}, {"return": "\"10\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"7\""}, {"return": "\"10\""}, {"return": "\"15\""}, {"return": "\"4\""}, {"return": "\"30\""}, {"return": "\"2\""}, {"return": "\"4\""}, {"return": "\"9\""}, {"return": "\"10\""}, {"return": "\"3\""}, {"return": "\"10\""}, {"return": "\"10\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"0\""}], "parsed_inputs": [[["intervals", "[[1, 3]]"]], [["intervals", "[[1, 3], [4, 6]]"]], [["intervals", "[[1, 3], [2, 4], [5, 7]]"]], [["intervals", "[[1, 10]]"]], [["intervals", "[[1, 3], [5, 7], [9, 11]]"]], [["intervals", "[[1, 2], [3, 4], [5, 6]]"]], [["intervals", "[[1, 1]]"]], [["intervals", "[[1, 3], [3, 5]]"]], [["intervals", "[[1, 3], [2, 4], [3, 5]]"]], [["intervals", "[]"]]], "exec_code": "def sum_of_intervals(intervals):\n    numbers = []\n    for interval in intervals:\n        for i in range(interval[0], interval[1]):\n            numbers.append(i)\n    return len(set(numbers))\n", "output": "The function is:\n\n```python\ndef sum_of_intervals(intervals):\n    numbers = []\n    for interval in intervals:\n        for i in range(interval[0], interval[1]):\n            numbers.append(i)\n    return len(set(numbers))\n\n```", "choosed_example_idx": [0, 4, 3, 6, 1, 9, 8, 5], "prompt": "Write a function that generates the output from the input.\n\nInput: dict(intervals=[[1, 3]]), Output: \"2\"\nInput: dict(intervals=[[1, 3], [5, 7], [9, 11]]), Output: \"6\"\nInput: dict(intervals=[[1, 10]]), Output: \"9\"\nInput: dict(intervals=[[1, 1]]), Output: \"0\"\nInput: dict(intervals=[[1, 3], [4, 6]]), Output: \"4\"\nInput: dict(intervals=[]), Output: \"0\"\nInput: dict(intervals=[[1, 3], [2, 4], [3, 5]]), Output: \"4\"\nInput: dict(intervals=[[1, 2], [3, 4], [5, 6]]), Output: \"3\"\n\n\n\nFunction: sum_of_intervals\n", "id": "2cdf3b8022de51da47fdfe791392a5282da4b40b_0"}
{"example_str": "examples = [\n    dict(segments=['a', 'b', 'c'], value=1),\n    dict(segments=['x', 'y'], value='hello'),\n    dict(segments=['d'], value=[1, 2, 3]),\n    dict(segments=['e', 'f', 'g'], value={'a': 1, 'b': 2}),\n    dict(segments=['h', 'i'], value=None),\n    dict(segments=['j'], value=True),\n    dict(segments=['k', 'l', 'm'], value=3.14),\n    dict(segments=['n', 'o'], value=['a', 'b', 'c']),\n    dict(segments=['p', 'q', 'r', 's'], value={'x': 1, 'y': 2, 'z': 3}),\n    dict(segments=['t'], value='goodbye'),\n]\nexamples += [\n    dict(segments=[\"user\", \"name\"], value=\"John\"),\n    dict(segments=[\"settings\", \"display\", \"brightness\"], value=70),\n    dict(segments=[\"country\", \"state\", \"city\"], value=\"New York\"),\n    dict(segments=[\"product\", \"details\", \"price\"], value=19.99),\n    dict(segments=[\"response\", \"status\"], value=\"success\"),\n    dict(segments=[\"data\", \"items\", \"count\"], value=150),\n    dict(segments=[\"network\", \"ip\"], value=\"192.168.1.1\"),\n    dict(segments=[\"user\", \"preferences\", \"notifications\", \"email\"], value=True),\n    dict(segments=[\"system\", \"memory\", \"RAM\"], value=\"8GB\"),\n    dict(segments=[\"error\", \"code\"], value=404)\n]\nexamples += [\n    dict(segments=['a'], value=1),\n    dict(segments=['a', 'b'], value=2),\n    dict(segments=['a', 'b', 'c'], value=3),\n    dict(segments=['x', 'y', 'z'], value='hello'),\n    dict(segments=['key1', 'key2'], value=[1, 2, 3]),\n    dict(segments=['level1', 'level2', 'level3', 'level4'], value={'nested': 'dict'}),\n    dict(segments=['first', 'second'], value=99.99),\n    dict(segments=['one'], value=None),\n    dict(segments=['node', 'subnode', 'subsubnode'], value=True),\n    dict(segments=['earth', 'continent', 'country', 'city'], value='New York')\n]", "code": "def _dict_from_key_path(segments, value):\n    \"\"\"Creates a nested dict out of array of keys.\"\"\"\n    ret = {}\n    for segment in reversed(segments):\n        if ret:\n            ret = {segment: ret}\n        else:\n            ret[segment] = value\n    return ret\n", "func_name": "_dict_from_key_path", "exec_status": true, "example_inputs": ["\"{'segments': ['a', 'b', 'c'], 'value': 1}\"", "\"{'segments': ['x', 'y'], 'value': 'hello'}\"", "\"{'segments': ['d'], 'value': [1, 2, 3]}\"", "\"{'segments': ['e', 'f', 'g'], 'value': {'a': 1, 'b': 2}}\"", "\"{'segments': ['h', 'i'], 'value': None}\"", "\"{'segments': ['j'], 'value': True}\"", "\"{'segments': ['k', 'l', 'm'], 'value': 3.14}\"", "\"{'segments': ['n', 'o'], 'value': ['a', 'b', 'c']}\"", "\"{'segments': ['p', 'q', 'r', 's'], 'value': {'x': 1, 'y': 2, 'z': 3}}\"", "\"{'segments': ['t'], 'value': 'goodbye'}\""], "example_outputs": [{"return": "\"{'a': {'b': {'c': 1}}}\""}, {"return": "\"{'x': {'y': 'hello'}}\""}, {"return": "\"{'d': [1, 2, 3]}\""}, {"return": "\"{'e': {'f': {'g': {'a': 1, 'b': 2}}}}\""}, {"return": "\"{'h': {'i': None}}\""}, {"return": "\"{'j': True}\""}, {"return": "\"{'k': {'l': {'m': 3.14}}}\""}, {"return": "\"{'n': {'o': ['a', 'b', 'c']}}\""}, {"return": "\"{'p': {'q': {'r': {'s': {'x': 1, 'y': 2, 'z': 3}}}}}\""}, {"return": "\"{'t': 'goodbye'}\""}, {"return": "\"{'user': {'name': 'John'}}\""}, {"return": "\"{'settings': {'display': {'brightness': 70}}}\""}, {"return": "\"{'country': {'state': {'city': 'New York'}}}\""}, {"return": "\"{'product': {'details': {'price': 19.99}}}\""}, {"return": "\"{'response': {'status': 'success'}}\""}, {"return": "\"{'data': {'items': {'count': 150}}}\""}, {"return": "\"{'network': {'ip': '192.168.1.1'}}\""}, {"return": "\"{'user': {'preferences': {'notifications': {'email': True}}}}\""}, {"return": "\"{'system': {'memory': {'RAM': '8GB'}}}\""}, {"return": "\"{'error': {'code': 404}}\""}, {"return": "\"{'a': 1}\""}, {"return": "\"{'a': {'b': 2}}\""}, {"return": "\"{'a': {'b': {'c': 3}}}\""}, {"return": "\"{'x': {'y': {'z': 'hello'}}}\""}, {"return": "\"{'key1': {'key2': [1, 2, 3]}}\""}, {"return": "\"{'level1': {'level2': {'level3': {'level4': {'nested': 'dict'}}}}}\""}, {"return": "\"{'first': {'second': 99.99}}\""}, {"return": "\"{'one': None}\""}, {"return": "\"{'node': {'subnode': {'subsubnode': True}}}\""}, {"return": "\"{'earth': {'continent': {'country': {'city': 'New York'}}}}\""}], "parsed_inputs": [[["segments", "['a', 'b', 'c']"], ["value", "1"]], [["segments", "['x', 'y']"], ["value", "\"hello\""]], [["segments", "['d']"], ["value", "[1, 2, 3]"]], [["segments", "['e', 'f', 'g']"], ["value", "{'a': 1, 'b': 2}"]], [["segments", "['h', 'i']"], ["value", "None"]], [["segments", "['j']"], ["value", "True"]], [["segments", "['k', 'l', 'm']"], ["value", "3.14"]], [["segments", "['n', 'o']"], ["value", "['a', 'b', 'c']"]], [["segments", "['p', 'q', 'r', 's']"], ["value", "{'x': 1, 'y': 2, 'z': 3}"]], [["segments", "['t']"], ["value", "\"goodbye\""]]], "exec_code": "def _dict_from_key_path(segments, value):\n    \"\"\"Creates a nested dict out of array of keys.\"\"\"\n    ret = {}\n    for segment in reversed(segments):\n        if ret:\n            ret = {segment: ret}\n        else:\n            ret[segment] = value\n    return ret\n", "output": "The function is:\n\n```python\ndef _dict_from_key_path(segments, value):\n    \"\"\"Creates a nested dict out of array of keys.\"\"\"\n    ret = {}\n    for segment in reversed(segments):\n        if ret:\n            ret = {segment: ret}\n        else:\n            ret[segment] = value\n    return ret\n\n```", "choosed_example_idx": [9, 5, 1, 8, 3, 6, 2, 4, 7, 0], "prompt": "Write a function that generates the output from the input.\nFunction: _dict_from_key_path\nInput: dict(segments=['t'], value=\"goodbye\"), Output: \"{'t': 'goodbye'}\"\nInput: dict(segments=['j'], value=True), Output: \"{'j': True}\"\nInput: dict(segments=['x', 'y'], value=\"hello\"), Output: \"{'x': {'y': 'hello'}}\"\nInput: dict(segments=['p', 'q', 'r', 's'], value={'x': 1, 'y': 2, 'z': 3}), Output: \"{'p': {'q': {'r': {'s': {'x': 1, 'y': 2, 'z': 3}}}}}\"\nInput: dict(segments=['e', 'f', 'g'], value={'a': 1, 'b': 2}), Output: \"{'e': {'f': {'g': {'a': 1, 'b': 2}}}}\"\nInput: dict(segments=['k', 'l', 'm'], value=3.14), Output: \"{'k': {'l': {'m': 3.14}}}\"\nInput: dict(segments=['d'], value=[1, 2, 3]), Output: \"{'d': [1, 2, 3]}\"\nInput: dict(segments=['h', 'i'], value=None), Output: \"{'h': {'i': None}}\"\nInput: dict(segments=['n', 'o'], value=['a', 'b', 'c']), Output: \"{'n': {'o': ['a', 'b', 'c']}}\"\nInput: dict(segments=['a', 'b', 'c'], value=1), Output: \"{'a': {'b': {'c': 1}}}\"\n\n\n\n", "id": "44c137e3fe766e07ec6be5dbedaa8d38530bfd18_0"}
{"example_str": "examples = [\n    dict(s=\":hello\"),  # leading colon\n    dict(s=\"hello\"),  # no leading colon\n    dict(s=\"::::hello\"),  # multiple leading colons\n    dict(s=\"\"),  # empty string\n    dict(s=\":\"),  # single colon\n    dict(s=\":a:b:c\"),  # leading colon with multiple colons\n    dict(s=\"a:b:c\"),  # no leading colon with multiple colons\n    dict(s=\"hello:\"),  # trailing colon\n    dict(s=\"hello:world\"),  # colon in the middle\n    dict(s=\"::::\"),  # multiple leading colons with no other characters\n]\nexamples += [\n    dict(s=\":Hello, world!\"),  # string starts with a colon\n    dict(s=\"Hello, world!\"),   # string does not start with a colon\n    dict(s=\"::Double colon\"),  # string starts with two colons\n    dict(s=\"\"),                # empty string\n    dict(s=\":12345\"),          # string starts with a colon followed by numbers\n    dict(s=\"No colon here\"),   # string with no colon at the start\n    dict(s=\":!@#$%^&*()\"),     # string starts with a colon followed by special characters\n    dict(s=\": \"),              # string starts with a colon followed by a space\n    dict(s=\":a\"),              # string starts with a colon followed by a single character\n    dict(s=\":The quick brown fox jumps over the lazy dog\")  # longer string starting with a colon\n]\nexamples += [\n    dict(s=':Hello'),\n    dict(s=':World'),\n    dict(s='NoColonHere'),\n    dict(s='::DoubleColon'),\n    dict(s=':123'),\n    dict(s=':'),\n    dict(s=''),\n    dict(s='NormalText'),\n    dict(s=':With Spaces'),\n    dict(s=':Special@#Characters')\n]", "code": "def trimcolon(s: str):\n    \"\"\"\n    :param s: string with possible leading colon.\n    :return: a copy of s with a single leading colon removed,\n             if one is found. Otherwise returns s as-is.\n    \"\"\"\n    return s[1:] if s.startswith(':') else s\n", "func_name": "trimcolon", "exec_status": true, "example_inputs": ["\"{'s': ':hello'}\"", "\"{'s': 'hello'}\"", "\"{'s': '::::hello'}\"", "\"{'s': ''}\"", "\"{'s': ':'}\"", "\"{'s': ':a:b:c'}\"", "\"{'s': 'a:b:c'}\"", "\"{'s': 'hello:'}\"", "\"{'s': 'hello:world'}\"", "\"{'s': '::::'}\""], "example_outputs": [{"return": "\"'hello'\""}, {"return": "\"'hello'\""}, {"return": "\"':::hello'\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"'a:b:c'\""}, {"return": "\"'a:b:c'\""}, {"return": "\"'hello:'\""}, {"return": "\"'hello:world'\""}, {"return": "\"':::'\""}, {"return": "\"'Hello, world!'\""}, {"return": "\"'Hello, world!'\""}, {"return": "\"':Double colon'\""}, {"return": "\"''\""}, {"return": "\"'12345'\""}, {"return": "\"'No colon here'\""}, {"return": "\"'!@#$%^&*()'\""}, {"return": "\"' '\""}, {"return": "\"'a'\""}, {"return": "\"'The quick brown fox jumps over the lazy dog'\""}, {"return": "\"'Hello'\""}, {"return": "\"'World'\""}, {"return": "\"'NoColonHere'\""}, {"return": "\"':DoubleColon'\""}, {"return": "\"'123'\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"'NormalText'\""}, {"return": "\"'With Spaces'\""}, {"return": "\"'Special@#Characters'\""}], "parsed_inputs": [[["s", "\":hello\""]], [["s", "\"hello\""]], [["s", "\"::::hello\""]], [["s", "\"\""]], [["s", "\":\""]], [["s", "\":a:b:c\""]], [["s", "\"a:b:c\""]], [["s", "\"hello:\""]], [["s", "\"hello:world\""]], [["s", "\"::::\""]]], "exec_code": "def trimcolon(s: str):\n    \"\"\"\n    :param s: string with possible leading colon.\n    :return: a copy of s with a single leading colon removed,\n             if one is found. Otherwise returns s as-is.\n    \"\"\"\n    return s[1:] if s.startswith(':') else s\n", "output": "The function is:\n\n```python\ndef trimcolon(s: str):\n    \"\"\"\n    :param s: string with possible leading colon.\n    :return: a copy of s with a single leading colon removed,\n             if one is found. Otherwise returns s as-is.\n    \"\"\"\n    return s[1:] if s.startswith(':') else s\n\n```", "choosed_example_idx": [8, 3, 5], "prompt": "Input: dict(s=\"hello:world\"), Output: \"'hello:world'\"\nInput: dict(s=\"\"), Output: \"''\"\nInput: dict(s=\":a:b:c\"), Output: \"'a:b:c'\"\n\nWrite a function that generates the output from the input.\nFunction: trimcolon\n", "id": "a1620cf4636f857f328e56350c040e21e1175ce2_0"}
{"example_str": "examples = [\n    {'x': 2, 'y': 3},\n    {'x': 4.5, 'y': 1.2},\n    {'x': 0, 'y': 0},\n    {'x': -1, 'y': 1},\n    {'x': 10, 'y': 20},\n    {'x': 3.14, 'y': 2.71},\n    {'x': 100, 'y': 50},\n    {'x': -5, 'y': -3},\n    {'x': 2.0, 'y': 4.0},\n    {'x': 1, 'y': -2}\n]\nexamples += [\n    dict(x=5, y=3),\n    dict(x=-1, y=-1),\n    dict(x=0, y=0),\n    dict(x=100, y=200),\n    dict(x=-50, y=50),\n    dict(x=0.5, y=1.5),\n    dict(x=-10, y=5),\n    dict(x=999, y=1),\n    dict(x=2.5, y=-0.5),\n    dict(x=1.1, y=2.2)\n]\nexamples += [\n    dict(x=5, y=3),          # integers\n    dict(x=2.5, y=3.5),      # floats\n    dict(x=\"Hello, \", y=\"World!\"),  # strings\n    dict(x=10, y=-2),        # integers with a negative\n    dict(x=-1.1, y=2.1),     # floats with a negative\n    dict(x=\"123\", y=\"456\"),  # numeric strings\n    dict(x=\"abc\", y=\"def\"),  # alphabetic strings\n    dict(x=0, y=0),          # zero integers\n    dict(x=0.0, y=0.0),      # zero floats\n    dict(x=\" \", y=\"space\")   # string with a space character\n]", "code": "def add(x, y):\n    return x + y\n", "func_name": "add", "exec_status": true, "example_inputs": ["\"{'x': 2, 'y': 3}\"", "\"{'x': 4.5, 'y': 1.2}\"", "\"{'x': 0, 'y': 0}\"", "\"{'x': -1, 'y': 1}\"", "\"{'x': 10, 'y': 20}\"", "\"{'x': 3.14, 'y': 2.71}\"", "\"{'x': 100, 'y': 50}\"", "\"{'x': -5, 'y': -3}\"", "\"{'x': 2.0, 'y': 4.0}\"", "\"{'x': 1, 'y': -2}\""], "example_outputs": [{"return": "\"5\""}, {"return": "\"5.7\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"30\""}, {"return": "\"5.85\""}, {"return": "\"150\""}, {"return": "\"-8\""}, {"return": "\"6.0\""}, {"return": "\"-1\""}, {"return": "\"8\""}, {"return": "\"-2\""}, {"return": "\"0\""}, {"return": "\"300\""}, {"return": "\"0\""}, {"return": "\"2.0\""}, {"return": "\"-5\""}, {"return": "\"1000\""}, {"return": "\"2.0\""}, {"return": "\"3.3000000000000003\""}, {"return": "\"8\""}, {"return": "\"6.0\""}, {"return": "\"'Hello, World!'\""}, {"return": "\"8\""}, {"return": "\"1.0\""}, {"return": "\"'123456'\""}, {"return": "\"'abcdef'\""}, {"return": "\"0\""}, {"return": "\"0.0\""}, {"return": "\"' space'\""}], "parsed_inputs": [[["x", "2"], ["y", "3"]], [["x", "4.5"], ["y", "1.2"]], [["x", "0"], ["y", "0"]], [["x", "-1"], ["y", "1"]], [["x", "10"], ["y", "20"]], [["x", "3.14"], ["y", "2.71"]], [["x", "100"], ["y", "50"]], [["x", "-5"], ["y", "-3"]], [["x", "2.0"], ["y", "4.0"]], [["x", "1"], ["y", "-2"]]], "exec_code": "def add(x, y):\n    return x + y\n", "output": "The function is:\n\n```python\ndef add(x, y):\n    return x + y\n\n```", "choosed_example_idx": [9, 1, 6, 2, 5, 4], "prompt": "Write a function that generates the output from the input.\nInput: dict(x=1, y=-2), Output: \"-1\"\nInput: dict(x=4.5, y=1.2), Output: \"5.7\"\nInput: dict(x=100, y=50), Output: \"150\"\nInput: dict(x=0, y=0), Output: \"0\"\nInput: dict(x=3.14, y=2.71), Output: \"5.85\"\nInput: dict(x=10, y=20), Output: \"30\"\n\n\nFunction: add\n", "id": "2d51a42d3c9e195c81e5b65f2125edd747c5fe48_0"}
{"example_str": "examples = [\n    dict(n=5, sequence='12345', memo=[0]*5),\n    dict(n=3, sequence='abc', memo=[0]*3),\n    dict(n=1, sequence='7', memo=[0]),\n    dict(n=4, sequence='9876', memo=[0]*4),\n    dict(n=2, sequence='45', memo=[0]*2),\n    dict(n=6, sequence='abcdef', memo=[0]*6),\n    dict(n=8, sequence='12345678', memo=[0]*8),\n    dict(n=9, sequence='987654321', memo=[0]*9),\n    dict(n=10, sequence='0123456789', memo=[0]*10),\n    dict(n=7, sequence='abcdefg', memo=[0]*7),\n]\nexamples += [\n    dict(n=5, sequence=[\"1\", \"2\", \"3\", \"4\", \"5\"], memo=[0]*5),\n    dict(n=3, sequence=[\"-1\", \"-2\", \"-3\"], memo=[0]*3),\n    dict(n=4, sequence=[\"5\", \"-1\", \"2\", \"3\"], memo=[0]*4),\n    dict(n=6, sequence=[\"-2\", \"-3\", \"4\", \"-1\", \"-2\", \"1\"], memo=[0]*6),\n    dict(n=2, sequence=[\"10\", \"20\"], memo=[0]*2),\n    dict(n=7, sequence=[\"1\", \"-2\", \"3\", \"10\", \"-4\", \"7\", \"2\"], memo=[0]*7),\n    dict(n=1, sequence=[\"100\"], memo=[0]*1),\n    dict(n=3, sequence=[\"-1\", \"5\", \"-6\"], memo=[0]*3),\n    dict(n=5, sequence=[\"0\", \"0\", \"0\", \"0\", \"0\"], memo=[0]*5),\n    dict(n=4, sequence=[\"-1\", \"3\", \"5\", \"-2\"], memo=[0]*4)\n]\nexamples += [\n    dict(n=1, sequence=\"5\", memo=[0]),\n    dict(n=2, sequence=\"45\", memo=[0, 0]),\n    dict(n=3, sequence=\"789\", memo=[0, 0, 0]),\n    dict(n=4, sequence=\"1234\", memo=[0, 0, 0, 0]),\n    dict(n=5, sequence=\"98765\", memo=[0, 0, 0, 0, 0]),\n    dict(n=3, sequence=\"010\", memo=[0, 0, 0]),\n    dict(n=4, sequence=\"9999\", memo=[0, 0, 0, 0]),\n    dict(n=5, sequence=\"12321\", memo=[0, 0, 0, 0, 0]),\n    dict(n=6, sequence=\"112233\", memo=[0, 0, 0, 0, 0, 0]),\n    dict(n=7, sequence=\"0000000\", memo=[0, 0, 0, 0, 0, 0, 0])\n]", "code": "def d(n, sequence, memo):\n    if n == 1:\n        return memo[0]\n    for i in range(1, n):\n        memo[i] = max(memo[i - 1] + int(sequence[i]), int(sequence[i]))\n    max_result = memo[0]\n    for i in range(n):\n        max_result = max(max_result, memo[i])\n    return max_result\n", "func_name": "d", "exec_status": true, "example_inputs": ["\"{'n': 5, 'sequence': '12345', 'memo': [0, 0, 0, 0, 0]}\"", "\"{'n': 3, 'sequence': 'abc', 'memo': [0, 0, 0]}\"", "\"{'n': 1, 'sequence': '7', 'memo': [0]}\"", "\"{'n': 4, 'sequence': '9876', 'memo': [0, 0, 0, 0]}\"", "\"{'n': 2, 'sequence': '45', 'memo': [0, 0]}\"", "\"{'n': 6, 'sequence': 'abcdef', 'memo': [0, 0, 0, 0, 0, 0]}\"", "\"{'n': 8, 'sequence': '12345678', 'memo': [0, 0, 0, 0, 0, 0, 0, 0]}\"", "\"{'n': 9, 'sequence': '987654321', 'memo': [0, 0, 0, 0, 0, 0, 0, 0, 0]}\"", "\"{'n': 10, 'sequence': '0123456789', 'memo': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}\"", "\"{'n': 7, 'sequence': 'abcdefg', 'memo': [0, 0, 0, 0, 0, 0, 0]}\""], "example_outputs": [{"return": "\"14\""}, {"error": "<|EXCEPTION|> \"<class 'ValueError'>: invalid literal for int() with base 10: 'b'\""}, {"return": "\"0\""}, {"return": "\"21\""}, {"return": "\"5\""}, {"error": "<|EXCEPTION|> \"<class 'ValueError'>: invalid literal for int() with base 10: 'b'\""}, {"return": "\"35\""}, {"return": "\"36\""}, {"return": "\"45\""}, {"error": "<|EXCEPTION|> \"<class 'ValueError'>: invalid literal for int() with base 10: 'b'\""}, {"return": "\"14\""}, {"return": "\"0\""}, {"return": "\"5\""}, {"return": "\"4\""}, {"return": "\"20\""}, {"return": "\"18\""}, {"return": "\"0\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"8\""}, {"return": "\"0\""}, {"return": "\"5\""}, {"return": "\"17\""}, {"return": "\"9\""}, {"return": "\"26\""}, {"return": "\"1\""}, {"return": "\"27\""}, {"return": "\"8\""}, {"return": "\"11\""}, {"return": "\"0\""}], "parsed_inputs": [[["n", "5"], ["sequence", "\"12345\""], ["memo", "([0] * 5)"]], [["n", "3"], ["sequence", "\"abc\""], ["memo", "([0] * 3)"]], [["n", "1"], ["sequence", "\"7\""], ["memo", "[0]"]], [["n", "4"], ["sequence", "\"9876\""], ["memo", "([0] * 4)"]], [["n", "2"], ["sequence", "\"45\""], ["memo", "([0] * 2)"]], [["n", "6"], ["sequence", "\"abcdef\""], ["memo", "([0] * 6)"]], [["n", "8"], ["sequence", "\"12345678\""], ["memo", "([0] * 8)"]], [["n", "9"], ["sequence", "\"987654321\""], ["memo", "([0] * 9)"]], [["n", "10"], ["sequence", "\"0123456789\""], ["memo", "([0] * 10)"]], [["n", "7"], ["sequence", "\"abcdefg\""], ["memo", "([0] * 7)"]]], "exec_code": "def d(n, sequence, memo):\n    if n == 1:\n        return memo[0]\n    for i in range(1, n):\n        memo[i] = max(memo[i - 1] + int(sequence[i]), int(sequence[i]))\n    max_result = memo[0]\n    for i in range(n):\n        max_result = max(max_result, memo[i])\n    return max_result\n", "output": "The function is:\n\n```python\ndef d(n, sequence, memo):\n    if n == 1:\n        return memo[0]\n    for i in range(1, n):\n        memo[i] = max(memo[i - 1] + int(sequence[i]), int(sequence[i]))\n    max_result = memo[0]\n    for i in range(n):\n        max_result = max(max_result, memo[i])\n    return max_result\n\n```", "choosed_example_idx": [2, 5, 4, 7, 6], "prompt": "Function: d\nWrite a function that generates the output from the input.\nInput: dict(n=1, sequence=\"7\", memo=[0]), Output: \"0\"\nInput: dict(n=6, sequence=\"abcdef\", memo=([0] * 6)), Output: \"<class 'ValueError'>: invalid literal for int() with base 10: 'b'\"\nInput: dict(n=2, sequence=\"45\", memo=([0] * 2)), Output: \"5\"\nInput: dict(n=9, sequence=\"987654321\", memo=([0] * 9)), Output: \"36\"\nInput: dict(n=8, sequence=\"12345678\", memo=([0] * 8)), Output: \"35\"\n\n", "id": "2bd78c48937e9fd618e83d24a4e6c9e8bc09b7df_0"}
{"example_str": "examples = [\n    dict(lines_numbers_list=[1]),\n    dict(lines_numbers_list=[2, 3, 4]),\n    dict(lines_numbers_list=[5]),\n    dict(lines_numbers_list=[6.7, 8.9]),\n    dict(lines_numbers_list=[10, 20, 30, 40, 50]),\n    dict(lines_numbers_list=[]),\n    dict(lines_numbers_list=[100]),\n    dict(lines_numbers_list=[200, 300, 400]),\n    dict(lines_numbers_list=[5.5, 6.6, 7.7, 8.8]),\n    dict(lines_numbers_list=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),\n]\nexamples += [\n    dict(lines_numbers_list=[1]),  # Single integer\n    dict(lines_numbers_list=[1.5]),  # Single float\n    dict(lines_numbers_list=[1, 2, 3]),  # Multiple integers\n    dict(lines_numbers_list=[1.1, 2.2, 3.3]),  # Multiple floats\n    dict(lines_numbers_list=[1, 2.2, 3]),  # Mixed integers and floats\n    dict(lines_numbers_list=[100, 200, 300, 400, 500]),  # Larger list of integers\n    dict(lines_numbers_list=[0.1, 0.2, 0.3]),  # Small floats\n    dict(lines_numbers_list=[-1, -2, -3]),  # Negative integers\n    dict(lines_numbers_list=[-1.1, -2.2, -3.3]),  # Negative floats\n    dict(lines_numbers_list=[0]),  # Zero as an integer\n]\nexamples += [\n    dict(lines_numbers_list=[1]),\n    dict(lines_numbers_list=[1, 2]),\n    dict(lines_numbers_list=[10, 20, 30]),\n    dict(lines_numbers_list=[100]),\n    dict(lines_numbers_list=[5, 10, 15, 20]),\n    dict(lines_numbers_list=[0]),\n    dict(lines_numbers_list=[-1, -2, -3]),\n    dict(lines_numbers_list=[1.5, 2.5, 3.5]),\n    dict(lines_numbers_list=[1000, 2000, 3000, 4000, 5000]),\n    dict(lines_numbers_list=[123, 456, 789])\n]", "code": "def _convert_list_of_number_to_string(lines_numbers_list):\n    if len(lines_numbers_list) == 1:\n        lines_numbers_string = str(lines_numbers_list[0])\n    else:\n        lines_numbers_string = ','.join(map(str, lines_numbers_list))\n    return lines_numbers_string\n", "func_name": "_convert_list_of_number_to_string", "exec_status": true, "example_inputs": ["\"{'lines_numbers_list': [1]}\"", "\"{'lines_numbers_list': [2, 3, 4]}\"", "\"{'lines_numbers_list': [5]}\"", "\"{'lines_numbers_list': [6.7, 8.9]}\"", "\"{'lines_numbers_list': [10, 20, 30, 40, 50]}\"", "\"{'lines_numbers_list': []}\"", "\"{'lines_numbers_list': [100]}\"", "\"{'lines_numbers_list': [200, 300, 400]}\"", "\"{'lines_numbers_list': [5.5, 6.6, 7.7, 8.8]}\"", "\"{'lines_numbers_list': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}\""], "example_outputs": [{"return": "\"'1'\""}, {"return": "\"'2,3,4'\""}, {"return": "\"'5'\""}, {"return": "\"'6.7,8.9'\""}, {"return": "\"'10,20,30,40,50'\""}, {"return": "\"''\""}, {"return": "\"'100'\""}, {"return": "\"'200,300,400'\""}, {"return": "\"'5.5,6.6,7.7,8.8'\""}, {"return": "\"'1,2,3,4,5,6,7,8,9,10'\""}, {"return": "\"'1'\""}, {"return": "\"'1.5'\""}, {"return": "\"'1,2,3'\""}, {"return": "\"'1.1,2.2,3.3'\""}, {"return": "\"'1,2.2,3'\""}, {"return": "\"'100,200,300,400,500'\""}, {"return": "\"'0.1,0.2,0.3'\""}, {"return": "\"'-1,-2,-3'\""}, {"return": "\"'-1.1,-2.2,-3.3'\""}, {"return": "\"'0'\""}, {"return": "\"'1'\""}, {"return": "\"'1,2'\""}, {"return": "\"'10,20,30'\""}, {"return": "\"'100'\""}, {"return": "\"'5,10,15,20'\""}, {"return": "\"'0'\""}, {"return": "\"'-1,-2,-3'\""}, {"return": "\"'1.5,2.5,3.5'\""}, {"return": "\"'1000,2000,3000,4000,5000'\""}, {"return": "\"'123,456,789'\""}], "parsed_inputs": [[["lines_numbers_list", "[1]"]], [["lines_numbers_list", "[2, 3, 4]"]], [["lines_numbers_list", "[5]"]], [["lines_numbers_list", "[6.7, 8.9]"]], [["lines_numbers_list", "[10, 20, 30, 40, 50]"]], [["lines_numbers_list", "[]"]], [["lines_numbers_list", "[100]"]], [["lines_numbers_list", "[200, 300, 400]"]], [["lines_numbers_list", "[5.5, 6.6, 7.7, 8.8]"]], [["lines_numbers_list", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"]]], "exec_code": "def _convert_list_of_number_to_string(lines_numbers_list):\n    if len(lines_numbers_list) == 1:\n        lines_numbers_string = str(lines_numbers_list[0])\n    else:\n        lines_numbers_string = ','.join(map(str, lines_numbers_list))\n    return lines_numbers_string\n", "output": "The function is:\n\n```python\ndef _convert_list_of_number_to_string(lines_numbers_list):\n    if len(lines_numbers_list) == 1:\n        lines_numbers_string = str(lines_numbers_list[0])\n    else:\n        lines_numbers_string = ','.join(map(str, lines_numbers_list))\n    return lines_numbers_string\n\n```", "choosed_example_idx": [8, 6, 0, 7, 2, 4, 3, 5], "prompt": "Write a function that generates the output from the input.\nFunction: _convert_list_of_number_to_string\nInput: dict(lines_numbers_list=[5.5, 6.6, 7.7, 8.8]), Output: \"'5.5,6.6,7.7,8.8'\"\nInput: dict(lines_numbers_list=[100]), Output: \"'100'\"\nInput: dict(lines_numbers_list=[1]), Output: \"'1'\"\nInput: dict(lines_numbers_list=[200, 300, 400]), Output: \"'200,300,400'\"\nInput: dict(lines_numbers_list=[5]), Output: \"'5'\"\nInput: dict(lines_numbers_list=[10, 20, 30, 40, 50]), Output: \"'10,20,30,40,50'\"\nInput: dict(lines_numbers_list=[6.7, 8.9]), Output: \"'6.7,8.9'\"\nInput: dict(lines_numbers_list=[]), Output: \"''\"\n\n\n", "id": "18d17ddd336c38dbdd26daf2a1fe15646fcfed8f_0"}
{"example_str": "examples = [\n    dict(a=[5, 2, 8, 1, 9]),\n    dict(a=[1, 2, 3, 4, 5]),\n    dict(a=[10, 9, 8, 7, 6]),\n    dict(a=[5, 5, 5, 5, 5]),\n    dict(a=[1]),\n    dict(a=[2, 1]),\n    dict(a=[1, 3, 2, 4]),\n    dict(a=[5, 4, 3, 2, 1]),\n    dict(a=[10, 20, 30, 40, 50]),\n    dict(a=[50, 40, 30, 20, 10]),\n    dict(a=[1, 1, 1, 1, 1]),\n]\nexamples += [\n    dict(a=[5, 3, 8, 6, 2]),  # unsorted list\n    dict(a=[1, 2, 3, 4, 5]),  # already sorted list\n    dict(a=[5, 4, 3, 2, 1]),  # reverse sorted list\n    dict(a=[]),               # empty list\n    dict(a=[1]),              # single element list\n    dict(a=[2, 1]),           # two elements, unsorted\n    dict(a=[1, 2]),           # two elements, sorted\n    dict(a=[9, 7, 5, 3, 1]),  # odd number of elements, reverse sorted\n    dict(a=[2, 2, 2, 2]),     # all elements the same\n    dict(a=[10, -1, 7, 4, 3]) # list with negative and positive numbers\n]\nexamples += [\n    dict(a=[3, 2, 1]),\n    dict(a=[1, 2, 3]),\n    dict(a=[5, 4, 3, 2, 1]),\n    dict(a=[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]),\n    dict(a=[1, 3, 2, 5, 4]),\n    dict(a=[100, 50, 25, 75]),\n    dict(a=[-1, -3, -2, 0, 1]),\n    dict(a=[2, 1, 4, 3, 6, 5]),\n    dict(a=[9, 7, 8, 6, 5]),\n    dict(a=[0, 0, 0, 1, 1, 1])\n]", "code": "def asc_bubble(a):\n    data = {'swap': 0, 'first': None, 'last': None}\n    n = len(a)\n    for i in range(0, n):\n        for j in range(0, n - i - 1):\n            if a[j] > a[j + 1]:\n                data['swap'] += 1\n                a[j], a[j + 1] = a[j + 1], a[j]\n    data['first'], data['last'] = a[0], a[n - 1]\n    data['a'] = a\n    return data\n", "func_name": "asc_bubble", "exec_status": true, "example_inputs": ["\"{'a': [5, 2, 8, 1, 9]}\"", "\"{'a': [1, 2, 3, 4, 5]}\"", "\"{'a': [10, 9, 8, 7, 6]}\"", "\"{'a': [5, 5, 5, 5, 5]}\"", "\"{'a': [1]}\"", "\"{'a': [2, 1]}\"", "\"{'a': [1, 3, 2, 4]}\"", "\"{'a': [5, 4, 3, 2, 1]}\"", "\"{'a': [10, 20, 30, 40, 50]}\"", "\"{'a': [50, 40, 30, 20, 10]}\"", "\"{'a': [1, 1, 1, 1, 1]}\""], "example_outputs": [{"return": "\"{'swap': 4, 'first': 1, 'last': 9, 'a': [1, 2, 5, 8, 9]}\""}, {"return": "\"{'swap': 0, 'first': 1, 'last': 5, 'a': [1, 2, 3, 4, 5]}\""}, {"return": "\"{'swap': 10, 'first': 6, 'last': 10, 'a': [6, 7, 8, 9, 10]}\""}, {"return": "\"{'swap': 0, 'first': 5, 'last': 5, 'a': [5, 5, 5, 5, 5]}\""}, {"return": "\"{'swap': 0, 'first': 1, 'last': 1, 'a': [1]}\""}, {"return": "\"{'swap': 1, 'first': 1, 'last': 2, 'a': [1, 2]}\""}, {"return": "\"{'swap': 1, 'first': 1, 'last': 4, 'a': [1, 2, 3, 4]}\""}, {"return": "\"{'swap': 10, 'first': 1, 'last': 5, 'a': [1, 2, 3, 4, 5]}\""}, {"return": "\"{'swap': 0, 'first': 10, 'last': 50, 'a': [10, 20, 30, 40, 50]}\""}, {"return": "\"{'swap': 10, 'first': 10, 'last': 50, 'a': [10, 20, 30, 40, 50]}\""}, {"return": "\"{'swap': 0, 'first': 1, 'last': 1, 'a': [1, 1, 1, 1, 1]}\""}, {"return": "\"{'swap': 6, 'first': 2, 'last': 8, 'a': [2, 3, 5, 6, 8]}\""}, {"return": "\"{'swap': 0, 'first': 1, 'last': 5, 'a': [1, 2, 3, 4, 5]}\""}, {"return": "\"{'swap': 10, 'first': 1, 'last': 5, 'a': [1, 2, 3, 4, 5]}\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"return": "\"{'swap': 0, 'first': 1, 'last': 1, 'a': [1]}\""}, {"return": "\"{'swap': 1, 'first': 1, 'last': 2, 'a': [1, 2]}\""}, {"return": "\"{'swap': 0, 'first': 1, 'last': 2, 'a': [1, 2]}\""}, {"return": "\"{'swap': 10, 'first': 1, 'last': 9, 'a': [1, 3, 5, 7, 9]}\""}, {"return": "\"{'swap': 0, 'first': 2, 'last': 2, 'a': [2, 2, 2, 2]}\""}, {"return": "\"{'swap': 7, 'first': -1, 'last': 10, 'a': [-1, 3, 4, 7, 10]}\""}, {"return": "\"{'swap': 3, 'first': 1, 'last': 3, 'a': [1, 2, 3]}\""}, {"return": "\"{'swap': 0, 'first': 1, 'last': 3, 'a': [1, 2, 3]}\""}, {"return": "\"{'swap': 10, 'first': 1, 'last': 5, 'a': [1, 2, 3, 4, 5]}\""}, {"return": "\"{'swap': 45, 'first': 1, 'last': 10, 'a': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}\""}, {"return": "\"{'swap': 2, 'first': 1, 'last': 5, 'a': [1, 2, 3, 4, 5]}\""}, {"return": "\"{'swap': 4, 'first': 25, 'last': 100, 'a': [25, 50, 75, 100]}\""}, {"return": "\"{'swap': 2, 'first': -3, 'last': 1, 'a': [-3, -2, -1, 0, 1]}\""}, {"return": "\"{'swap': 3, 'first': 1, 'last': 6, 'a': [1, 2, 3, 4, 5, 6]}\""}, {"return": "\"{'swap': 9, 'first': 5, 'last': 9, 'a': [5, 6, 7, 8, 9]}\""}, {"return": "\"{'swap': 0, 'first': 0, 'last': 1, 'a': [0, 0, 0, 1, 1, 1]}\""}], "parsed_inputs": [[["a", "[5, 2, 8, 1, 9]"]], [["a", "[1, 2, 3, 4, 5]"]], [["a", "[10, 9, 8, 7, 6]"]], [["a", "[5, 5, 5, 5, 5]"]], [["a", "[1]"]], [["a", "[2, 1]"]], [["a", "[1, 3, 2, 4]"]], [["a", "[5, 4, 3, 2, 1]"]], [["a", "[10, 20, 30, 40, 50]"]], [["a", "[50, 40, 30, 20, 10]"]], [["a", "[1, 1, 1, 1, 1]"]]], "exec_code": "def asc_bubble(a):\n    data = {'swap': 0, 'first': None, 'last': None}\n    n = len(a)\n    for i in range(0, n):\n        for j in range(0, n - i - 1):\n            if a[j] > a[j + 1]:\n                data['swap'] += 1\n                a[j], a[j + 1] = a[j + 1], a[j]\n    data['first'], data['last'] = a[0], a[n - 1]\n    data['a'] = a\n    return data\n", "output": "The function is:\n\n```python\ndef asc_bubble(a):\n    data = {'swap': 0, 'first': None, 'last': None}\n    n = len(a)\n    for i in range(0, n):\n        for j in range(0, n - i - 1):\n            if a[j] > a[j + 1]:\n                data['swap'] += 1\n                a[j], a[j + 1] = a[j + 1], a[j]\n    data['first'], data['last'] = a[0], a[n - 1]\n    data['a'] = a\n    return data\n\n```", "choosed_example_idx": [6, 9, 7, 10, 0, 4, 2, 8, 1, 3], "prompt": "Input: dict(a=[1, 3, 2, 4]), Output: \"{'swap': 1, 'first': 1, 'last': 4, 'a': [1, 2, 3, 4]}\"\nInput: dict(a=[50, 40, 30, 20, 10]), Output: \"{'swap': 10, 'first': 10, 'last': 50, 'a': [10, 20, 30, 40, 50]}\"\nInput: dict(a=[5, 4, 3, 2, 1]), Output: \"{'swap': 10, 'first': 1, 'last': 5, 'a': [1, 2, 3, 4, 5]}\"\nInput: dict(a=[1, 1, 1, 1, 1]), Output: \"{'swap': 0, 'first': 1, 'last': 1, 'a': [1, 1, 1, 1, 1]}\"\nInput: dict(a=[5, 2, 8, 1, 9]), Output: \"{'swap': 4, 'first': 1, 'last': 9, 'a': [1, 2, 5, 8, 9]}\"\nInput: dict(a=[1]), Output: \"{'swap': 0, 'first': 1, 'last': 1, 'a': [1]}\"\nInput: dict(a=[10, 9, 8, 7, 6]), Output: \"{'swap': 10, 'first': 6, 'last': 10, 'a': [6, 7, 8, 9, 10]}\"\nInput: dict(a=[10, 20, 30, 40, 50]), Output: \"{'swap': 0, 'first': 10, 'last': 50, 'a': [10, 20, 30, 40, 50]}\"\nInput: dict(a=[1, 2, 3, 4, 5]), Output: \"{'swap': 0, 'first': 1, 'last': 5, 'a': [1, 2, 3, 4, 5]}\"\nInput: dict(a=[5, 5, 5, 5, 5]), Output: \"{'swap': 0, 'first': 5, 'last': 5, 'a': [5, 5, 5, 5, 5]}\"\n\nWrite a function that generates the output from the input.\nFunction: asc_bubble\n\n\n", "id": "2340892f1526b8ed0d6c085b6509db24811e4144_0"}
{"example_str": "examples = [\n    dict(row={'y_act': 'Categorical'}),\n    dict(row={'y_act': 'NUMERIC'}),\n    dict(row={'y_act': 'EXTRA INFORMATION'}),\n    dict(row={'y_act': 'UNUSABLE DATA'}),\n    dict(row={'y_act': 'CONTEXT SPECIFIC INFO'}),\n    dict(row={'y_act': 'cAtEgOrIcAl'}),\n    dict(row={'y_act': 'nUmErIc'}),\n    dict(row={'y_act': 'eXtRa InFo'}),\n    dict(row={'y_act': 'uNUsAbLe DaTa'}),\n    dict(row={'y_act': 'CoNtExT sPeCiFiC'}),\n    dict(row={'y_act': 'Invalid input'}),\n]\nexamples += [\n    dict(row={'y_act': 'categorical data'}),\n    dict(row={'y_act': 'numeric values'}),\n    dict(row={'y_act': 'extra information'}),\n    dict(row={'y_act': 'unusable content'}),\n    dict(row={'y_act': 'context needed'}),\n    dict(row={'y_act': 'Categorical'}),\n    dict(row={'y_act': 'Numeric'}),\n    dict(row={'y_act': 'Extra'}),\n    dict(row={'y_act': 'Unusable'}),\n    dict(row={'y_act': 'Context'}),\n]", "code": "def label_mapper(row):\n    x = row['y_act']\n    try:\n        if 'categorical' in x.lower():\n            return 'Usable Directly Categorical'\n        if 'numeric' in x.lower():\n            return 'Usable Directly Numeric'\n        if 'extra' in x.lower():\n            return 'Usable With Extraction'\n        if 'unusable' in x.lower():\n            return 'Unusable'\n        if 'context' in x.lower():\n            return 'Context_Specific'\n    except:\n        print(x)\n        return 'NaN'\n", "func_name": "label_mapper", "exec_status": true, "example_inputs": ["\"{'row': {'y_act': 'Categorical'}}\"", "\"{'row': {'y_act': 'NUMERIC'}}\"", "\"{'row': {'y_act': 'EXTRA INFORMATION'}}\"", "\"{'row': {'y_act': 'UNUSABLE DATA'}}\"", "\"{'row': {'y_act': 'CONTEXT SPECIFIC INFO'}}\"", "\"{'row': {'y_act': 'cAtEgOrIcAl'}}\"", "\"{'row': {'y_act': 'nUmErIc'}}\"", "\"{'row': {'y_act': 'eXtRa InFo'}}\"", "\"{'row': {'y_act': 'uNUsAbLe DaTa'}}\"", "\"{'row': {'y_act': 'CoNtExT sPeCiFiC'}}\"", "\"{'row': {'y_act': 'Invalid input'}}\""], "example_outputs": [{"return": "\"'Usable Directly Categorical'\""}, {"return": "\"'Usable Directly Numeric'\""}, {"return": "\"'Usable With Extraction'\""}, {"return": "\"'Unusable'\""}, {"return": "\"'Context_Specific'\""}, {"return": "\"'Usable Directly Categorical'\""}, {"return": "\"'Usable Directly Numeric'\""}, {"return": "\"'Usable With Extraction'\""}, {"return": "\"'Unusable'\""}, {"return": "\"'Context_Specific'\""}, {"return": "\"None\""}, {"return": "\"'Usable Directly Categorical'\""}, {"return": "\"'Usable Directly Numeric'\""}, {"return": "\"'Usable With Extraction'\""}, {"return": "\"'Unusable'\""}, {"return": "\"'Context_Specific'\""}, {"return": "\"'Usable Directly Categorical'\""}, {"return": "\"'Usable Directly Numeric'\""}, {"return": "\"'Usable With Extraction'\""}, {"return": "\"'Unusable'\""}, {"return": "\"'Context_Specific'\""}], "parsed_inputs": [[["row", "{'y_act': 'Categorical'}"]], [["row", "{'y_act': 'NUMERIC'}"]], [["row", "{'y_act': 'EXTRA INFORMATION'}"]], [["row", "{'y_act': 'UNUSABLE DATA'}"]], [["row", "{'y_act': 'CONTEXT SPECIFIC INFO'}"]], [["row", "{'y_act': 'cAtEgOrIcAl'}"]], [["row", "{'y_act': 'nUmErIc'}"]], [["row", "{'y_act': 'eXtRa InFo'}"]], [["row", "{'y_act': 'uNUsAbLe DaTa'}"]], [["row", "{'y_act': 'CoNtExT sPeCiFiC'}"]], [["row", "{'y_act': 'Invalid input'}"]]], "exec_code": "def label_mapper(row):\n    x = row['y_act']\n    try:\n        if 'categorical' in x.lower():\n            return 'Usable Directly Categorical'\n        if 'numeric' in x.lower():\n            return 'Usable Directly Numeric'\n        if 'extra' in x.lower():\n            return 'Usable With Extraction'\n        if 'unusable' in x.lower():\n            return 'Unusable'\n        if 'context' in x.lower():\n            return 'Context_Specific'\n    except:\n        print(x)\n        return 'NaN'\n", "output": "The function is:\n\n```python\ndef label_mapper(row):\n    x = row['y_act']\n    try:\n        if 'categorical' in x.lower():\n            return 'Usable Directly Categorical'\n        if 'numeric' in x.lower():\n            return 'Usable Directly Numeric'\n        if 'extra' in x.lower():\n            return 'Usable With Extraction'\n        if 'unusable' in x.lower():\n            return 'Unusable'\n        if 'context' in x.lower():\n            return 'Context_Specific'\n    except:\n        print(x)\n        return 'NaN'\n\n```", "choosed_example_idx": [7, 1, 8, 2, 6, 0, 10], "prompt": "Input: dict(row={'y_act': 'eXtRa InFo'}), Output: \"'Usable With Extraction'\"\nInput: dict(row={'y_act': 'NUMERIC'}), Output: \"'Usable Directly Numeric'\"\nInput: dict(row={'y_act': 'uNUsAbLe DaTa'}), Output: \"'Unusable'\"\nInput: dict(row={'y_act': 'EXTRA INFORMATION'}), Output: \"'Usable With Extraction'\"\nInput: dict(row={'y_act': 'nUmErIc'}), Output: \"'Usable Directly Numeric'\"\nInput: dict(row={'y_act': 'Categorical'}), Output: \"'Usable Directly Categorical'\"\nInput: dict(row={'y_act': 'Invalid input'}), Output: \"None\"\n\nWrite a function that generates the output from the input.\n\n\nFunction: label_mapper\n", "id": "c5bd4fc8424cc003ed4ed2a9b75b684ab18fd67b_0"}
{"example_str": "examples = [\n    dict(height=5, trees=[10, 15, 8, 12]),\n    dict(height=10, trees=[5, 15, 20, 30]),\n    dict(height=0, trees=[10, 20, 30, 40]),\n    dict(height=20, trees=[10, 15, 25, 30]),\n    dict(height=15, trees=[10, 12, 15, 18]),\n    dict(height=8, trees=[5, 8, 10, 12]),\n    dict(height=12, trees=[10, 12, 15, 18]),\n    dict(height=18, trees=[15, 18, 20, 25]),\n    dict(height=25, trees=[20, 25, 30, 35]),\n    dict(height=30, trees=[25, 30, 35, 40]),\n]\nexamples += [\n    dict(height=5, trees=[3, 4, 5, 6, 7]),\n    dict(height=10, trees=[15, 20, 25, 30]),\n    dict(height=0, trees=[1, 2, 3, 4, 5]),\n    dict(height=3, trees=[2, 3, 4, 5, 6]),\n    dict(height=7, trees=[10, 7, 8, 9, 10]),\n    dict(height=2, trees=[1, 2, 3, 4, 5, 6]),\n    dict(height=15, trees=[10, 15, 20, 25, 30]),\n    dict(height=20, trees=[10, 20, 30, 40, 50]),\n    dict(height=8, trees=[8, 8, 8, 8, 8]),\n    dict(height=12, trees=[5, 10, 15, 20, 25])\n]\nexamples += [\n    dict(height=5, trees=[3, 4, 5, 6, 7]),\n    dict(height=10, trees=[15, 20, 25, 30]),\n    dict(height=0, trees=[1, 2, 3, 4, 5]),\n    dict(height=2, trees=[2, 3, 4, 5, 6]),\n    dict(height=7, trees=[10, 20, 30, 40]),\n    dict(height=3, trees=[3, 3, 3, 3, 3]),\n    dict(height=8, trees=[5, 8, 12, 15, 20]),\n    dict(height=1, trees=[1, 1, 1, 1, 1]),\n    dict(height=9, trees=[10, 11, 12, 13, 14]),\n    dict(height=4, trees=[4, 5, 6, 7, 8])\n]", "code": "def binary_search(height, trees):\n    total = 0\n    for tree in trees:\n        if tree - height > 0:\n            total += tree - height\n    return total\n", "func_name": "binary_search", "exec_status": true, "example_inputs": ["\"{'height': 5, 'trees': [10, 15, 8, 12]}\"", "\"{'height': 10, 'trees': [5, 15, 20, 30]}\"", "\"{'height': 0, 'trees': [10, 20, 30, 40]}\"", "\"{'height': 20, 'trees': [10, 15, 25, 30]}\"", "\"{'height': 15, 'trees': [10, 12, 15, 18]}\"", "\"{'height': 8, 'trees': [5, 8, 10, 12]}\"", "\"{'height': 12, 'trees': [10, 12, 15, 18]}\"", "\"{'height': 18, 'trees': [15, 18, 20, 25]}\"", "\"{'height': 25, 'trees': [20, 25, 30, 35]}\"", "\"{'height': 30, 'trees': [25, 30, 35, 40]}\""], "example_outputs": [{"return": "\"25\""}, {"return": "\"35\""}, {"return": "\"100\""}, {"return": "\"15\""}, {"return": "\"3\""}, {"return": "\"6\""}, {"return": "\"9\""}, {"return": "\"9\""}, {"return": "\"15\""}, {"return": "\"15\""}, {"return": "\"3\""}, {"return": "\"50\""}, {"return": "\"15\""}, {"return": "\"6\""}, {"return": "\"9\""}, {"return": "\"10\""}, {"return": "\"30\""}, {"return": "\"60\""}, {"return": "\"0\""}, {"return": "\"24\""}, {"return": "\"3\""}, {"return": "\"50\""}, {"return": "\"15\""}, {"return": "\"10\""}, {"return": "\"72\""}, {"return": "\"0\""}, {"return": "\"23\""}, {"return": "\"0\""}, {"return": "\"15\""}, {"return": "\"10\""}], "parsed_inputs": [[["height", "5"], ["trees", "[10, 15, 8, 12]"]], [["height", "10"], ["trees", "[5, 15, 20, 30]"]], [["height", "0"], ["trees", "[10, 20, 30, 40]"]], [["height", "20"], ["trees", "[10, 15, 25, 30]"]], [["height", "15"], ["trees", "[10, 12, 15, 18]"]], [["height", "8"], ["trees", "[5, 8, 10, 12]"]], [["height", "12"], ["trees", "[10, 12, 15, 18]"]], [["height", "18"], ["trees", "[15, 18, 20, 25]"]], [["height", "25"], ["trees", "[20, 25, 30, 35]"]], [["height", "30"], ["trees", "[25, 30, 35, 40]"]]], "exec_code": "def binary_search(height, trees):\n    total = 0\n    for tree in trees:\n        if tree - height > 0:\n            total += tree - height\n    return total\n", "output": "The function is:\n\n```python\ndef binary_search(height, trees):\n    total = 0\n    for tree in trees:\n        if tree - height > 0:\n            total += tree - height\n    return total\n\n```", "choosed_example_idx": [4, 8, 5, 2, 9, 1], "prompt": "Input: dict(height=15, trees=[10, 12, 15, 18]), Output: \"3\"\nInput: dict(height=25, trees=[20, 25, 30, 35]), Output: \"15\"\nInput: dict(height=8, trees=[5, 8, 10, 12]), Output: \"6\"\nInput: dict(height=0, trees=[10, 20, 30, 40]), Output: \"100\"\nInput: dict(height=30, trees=[25, 30, 35, 40]), Output: \"15\"\nInput: dict(height=10, trees=[5, 15, 20, 30]), Output: \"35\"\n\nFunction: binary_search\nWrite a function that generates the output from the input.\n", "id": "c103cb4eeb34df81652239b567dbd6a1bb743129_0"}
{"example_str": "examples = [\n    dict(m=70, h=175, a=30, s='male'),\n    dict(m=50, h=160, a=25, s='female'),\n    dict(m=90, h=190, a=40, s='male'),\n    dict(m=60, h=165, a=28, s='female'),\n    dict(m=80, h=180, a=35, s='male'),\n    dict(m=40, h=155, a=22, s='female'),\n    dict(m=75, h=170, a=32, s='male'),\n    dict(m=65, h=168, a=29, s='female'),\n    dict(m=85, h=185, a=38, s='male'),\n    dict(m=55, h=158, a=26, s='female'),\n]\nexamples += [\n    dict(m=70, h=175, a=25, s='male'),\n    dict(m=65, h=160, a=30, s='female'),\n    dict(m=80, h=180, a=40, s='male'),\n    dict(m=55, h=165, a=22, s='female'),\n    dict(m=90, h=190, a=55, s='male'),\n    dict(m=75, h=170, a=45, s='female'),\n    dict(m=60, h=158, a=35, s='male'),\n    dict(m=85, h=175, a=60, s='female'),\n    dict(m=68, h=165, a=28, s='male'),\n    dict(m=50, h=160, a=20, s='female')\n]\nexamples += [\n    dict(m=70, h=175, a=30, s='male'),\n    dict(m=65, h=160, a=25, s='female'),\n    dict(m=80, h=180, a=40, s='male'),\n    dict(m=55, h=165, a=50, s='female'),\n    dict(m=90, h=190, a=22, s='male'),\n    dict(m=75, h=170, a=35, s='female'),\n    dict(m=60, h=158, a=45, s='male'),\n    dict(m=85, h=185, a=55, s='female'),\n    dict(m=68, h=172, a=60, s='male'),\n    dict(m=50, h=150, a=65, s='female')\n]", "code": "def st_jeor(m, h, a, s):\n    \"\"\"\n    calculates a persons bmr given parameters\n    :param m: mass\n    :param h: height\n    :param a: age\n    :param s: sex\n    :return: total bmr\n    \"\"\"\n    m = float(m)\n    h = float(h)\n    a = float(a)\n    bmr = 10.0 * m + 6.25 * h - 5.0 * a\n    if s == 'male':\n        bmr = bmr + 5\n    else:\n        bmr = bmr - 161\n    return bmr\n", "func_name": "st_jeor", "exec_status": true, "example_inputs": ["\"{'m': 70, 'h': 175, 'a': 30, 's': 'male'}\"", "\"{'m': 50, 'h': 160, 'a': 25, 's': 'female'}\"", "\"{'m': 90, 'h': 190, 'a': 40, 's': 'male'}\"", "\"{'m': 60, 'h': 165, 'a': 28, 's': 'female'}\"", "\"{'m': 80, 'h': 180, 'a': 35, 's': 'male'}\"", "\"{'m': 40, 'h': 155, 'a': 22, 's': 'female'}\"", "\"{'m': 75, 'h': 170, 'a': 32, 's': 'male'}\"", "\"{'m': 65, 'h': 168, 'a': 29, 's': 'female'}\"", "\"{'m': 85, 'h': 185, 'a': 38, 's': 'male'}\"", "\"{'m': 55, 'h': 158, 'a': 26, 's': 'female'}\""], "example_outputs": [{"return": "\"1648.75\""}, {"return": "\"1214.0\""}, {"return": "\"1892.5\""}, {"return": "\"1330.25\""}, {"return": "\"1755.0\""}, {"return": "\"1097.75\""}, {"return": "\"1657.5\""}, {"return": "\"1394.0\""}, {"return": "\"1821.25\""}, {"return": "\"1246.5\""}, {"return": "\"1673.75\""}, {"return": "\"1339.0\""}, {"return": "\"1730.0\""}, {"return": "\"1310.25\""}, {"return": "\"1817.5\""}, {"return": "\"1426.5\""}, {"return": "\"1417.5\""}, {"return": "\"1482.75\""}, {"return": "\"1576.25\""}, {"return": "\"1239.0\""}, {"return": "\"1648.75\""}, {"return": "\"1364.0\""}, {"return": "\"1730.0\""}, {"return": "\"1170.25\""}, {"return": "\"1982.5\""}, {"return": "\"1476.5\""}, {"return": "\"1367.5\""}, {"return": "\"1570.25\""}, {"return": "\"1460.0\""}, {"return": "\"951.5\""}], "parsed_inputs": [[["m", "70"], ["h", "175"], ["a", "30"], ["s", "\"male\""]], [["m", "50"], ["h", "160"], ["a", "25"], ["s", "\"female\""]], [["m", "90"], ["h", "190"], ["a", "40"], ["s", "\"male\""]], [["m", "60"], ["h", "165"], ["a", "28"], ["s", "\"female\""]], [["m", "80"], ["h", "180"], ["a", "35"], ["s", "\"male\""]], [["m", "40"], ["h", "155"], ["a", "22"], ["s", "\"female\""]], [["m", "75"], ["h", "170"], ["a", "32"], ["s", "\"male\""]], [["m", "65"], ["h", "168"], ["a", "29"], ["s", "\"female\""]], [["m", "85"], ["h", "185"], ["a", "38"], ["s", "\"male\""]], [["m", "55"], ["h", "158"], ["a", "26"], ["s", "\"female\""]]], "exec_code": "def st_jeor(m, h, a, s):\n    \"\"\"\n    calculates a persons bmr given parameters\n    :param m: mass\n    :param h: height\n    :param a: age\n    :param s: sex\n    :return: total bmr\n    \"\"\"\n    m = float(m)\n    h = float(h)\n    a = float(a)\n    bmr = 10.0 * m + 6.25 * h - 5.0 * a\n    if s == 'male':\n        bmr = bmr + 5\n    else:\n        bmr = bmr - 161\n    return bmr\n", "output": "The function is:\n\n```python\ndef st_jeor(m, h, a, s):\n    \"\"\"\n    calculates a persons bmr given parameters\n    :param m: mass\n    :param h: height\n    :param a: age\n    :param s: sex\n    :return: total bmr\n    \"\"\"\n    m = float(m)\n    h = float(h)\n    a = float(a)\n    bmr = 10.0 * m + 6.25 * h - 5.0 * a\n    if s == 'male':\n        bmr = bmr + 5\n    else:\n        bmr = bmr - 161\n    return bmr\n\n```", "choosed_example_idx": [5, 0, 4], "prompt": "Function: st_jeor\nInput: dict(m=40, h=155, a=22, s=\"female\"), Output: \"1097.75\"\nInput: dict(m=70, h=175, a=30, s=\"male\"), Output: \"1648.75\"\nInput: dict(m=80, h=180, a=35, s=\"male\"), Output: \"1755.0\"\n\nWrite a function that generates the output from the input.\n", "id": "28c66b785fb3e17c817e8907d146a98bea331c90_0"}
{"example_str": "examples = [\n    dict(list1=[1, 2, 3, 4, 5]),\n    dict(list1=[\"a\", \"b\", \"c\", \"d\"]),\n    dict(list1=[True, False, True, False]),\n    dict(list1=[1.1, 2.2, 3.3, 4.4]),\n    dict(list1=[\"hello\", \"world\", \"python\", \"programming\"]),\n    dict(list1=[1, \"a\", True, 2.2]),\n    dict(list1=[]),\n    dict(list1=[5]),\n    dict(list1=[1, 1, 1, 1]),\n    dict(list1=[\"a\", \"a\", \"a\", \"a\"]),\n    dict(list1=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),\n]\nexamples += [\n    dict(list1=[1, 2, 3, 4, 5]),\n    dict(list1=['a', 'b', 'c', 'd']),\n    dict(list1=[True, False, True]),\n    dict(list1=[1.1, 2.2, 3.3, 4.4]),\n    dict(list1=[[], [1], [1, 2]]),\n    dict(list1=['apple', 'banana', 'cherry']),\n    dict(list1=[10, 20, 30, 40, 50]),\n    dict(list1=[None, 'None', 'null']),\n    dict(list1=[{'a': 1}, {'b': 2}]),\n    dict(list1=list(range(10)))\n]\nexamples += [\n    dict(list1=[1, 2, 3]),\n    dict(list1=['a', 'b', 'c']),\n    dict(list1=[True, False, True]),\n    dict(list1=[1.1, 2.2, 3.3]),\n    dict(list1=['apple', 'banana', 'cherry']),\n    dict(list1=[10, 20]),\n    dict(list1=[-1, -2, -3, -4]),\n    dict(list1=['x']),\n    dict(list1=[]),\n    dict(list1=[123, 'abc', True, 4.56])\n]", "code": "def rev_list(list1):\n    list1.reverse()\n    return list1\n", "func_name": "rev_list", "exec_status": true, "example_inputs": ["\"{'list1': [1, 2, 3, 4, 5]}\"", "\"{'list1': ['a', 'b', 'c', 'd']}\"", "\"{'list1': [True, False, True, False]}\"", "\"{'list1': [1.1, 2.2, 3.3, 4.4]}\"", "\"{'list1': ['hello', 'world', 'python', 'programming']}\"", "\"{'list1': [1, 'a', True, 2.2]}\"", "\"{'list1': []}\"", "\"{'list1': [5]}\"", "\"{'list1': [1, 1, 1, 1]}\"", "\"{'list1': ['a', 'a', 'a', 'a']}\"", "\"{'list1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}\""], "example_outputs": [{"return": "\"[5, 4, 3, 2, 1]\""}, {"return": "\"['d', 'c', 'b', 'a']\""}, {"return": "\"[False, True, False, True]\""}, {"return": "\"[4.4, 3.3, 2.2, 1.1]\""}, {"return": "\"['programming', 'python', 'world', 'hello']\""}, {"return": "\"[2.2, True, 'a', 1]\""}, {"return": "\"[]\""}, {"return": "\"[5]\""}, {"return": "\"[1, 1, 1, 1]\""}, {"return": "\"['a', 'a', 'a', 'a']\""}, {"return": "\"[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\""}, {"return": "\"[5, 4, 3, 2, 1]\""}, {"return": "\"['d', 'c', 'b', 'a']\""}, {"return": "\"[True, False, True]\""}, {"return": "\"[4.4, 3.3, 2.2, 1.1]\""}, {"return": "\"[[1, 2], [1], []]\""}, {"return": "\"['cherry', 'banana', 'apple']\""}, {"return": "\"[50, 40, 30, 20, 10]\""}, {"return": "\"['null', 'None', None]\""}, {"return": "\"[{'b': 2}, {'a': 1}]\""}, {"return": "\"[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\""}, {"return": "\"[3, 2, 1]\""}, {"return": "\"['c', 'b', 'a']\""}, {"return": "\"[True, False, True]\""}, {"return": "\"[3.3, 2.2, 1.1]\""}, {"return": "\"['cherry', 'banana', 'apple']\""}, {"return": "\"[20, 10]\""}, {"return": "\"[-4, -3, -2, -1]\""}, {"return": "\"['x']\""}, {"return": "\"[]\""}, {"return": "\"[4.56, True, 'abc', 123]\""}], "parsed_inputs": [[["list1", "[1, 2, 3, 4, 5]"]], [["list1", "['a', 'b', 'c', 'd']"]], [["list1", "[True, False, True, False]"]], [["list1", "[1.1, 2.2, 3.3, 4.4]"]], [["list1", "['hello', 'world', 'python', 'programming']"]], [["list1", "[1, 'a', True, 2.2]"]], [["list1", "[]"]], [["list1", "[5]"]], [["list1", "[1, 1, 1, 1]"]], [["list1", "['a', 'a', 'a', 'a']"]], [["list1", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"]]], "exec_code": "def rev_list(list1):\n    list1.reverse()\n    return list1\n", "output": "The function is:\n\n```python\ndef rev_list(list1):\n    list1.reverse()\n    return list1\n\n```", "choosed_example_idx": [7, 8, 4, 10, 0, 6, 3], "prompt": "Input: dict(list1=[5]), Output: \"[5]\"\nInput: dict(list1=[1, 1, 1, 1]), Output: \"[1, 1, 1, 1]\"\nInput: dict(list1=['hello', 'world', 'python', 'programming']), Output: \"['programming', 'python', 'world', 'hello']\"\nInput: dict(list1=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), Output: \"[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\"\nInput: dict(list1=[1, 2, 3, 4, 5]), Output: \"[5, 4, 3, 2, 1]\"\nInput: dict(list1=[]), Output: \"[]\"\nInput: dict(list1=[1.1, 2.2, 3.3, 4.4]), Output: \"[4.4, 3.3, 2.2, 1.1]\"\n\n\n\nWrite a function that generates the output from the input.\nFunction: rev_list\n", "id": "f10f5fd56e80756f5944ebccfadf059c197d17c4_0"}
{"example_str": "examples = [\n    dict(words=[\"hello\", \"world\"], order=\"hlabcdefgijkmnopqrstuvwxyz\"),\n    dict(words=[\"apple\", \"app\"], order=\"abcdefghijklmnopqrstuvwxyz\"),\n    dict(words=[\"kuvp\",\"q\"], order=\"ngxlkthsjuoqcpavbfdermiywz\"),\n    dict(words=[\"word\", \"world\", \"row\"], order=\"wlrdqkzfpnchtxijbegaymvus\"),\n    dict(words=[\"apple\", \"banana\"], order=\"abcdefghijklmnopqrstuvwxyz\"),\n    dict(words=[\"hello\", \"hello\"], order=\"abcdefghijklmnopqrstuvwxyz\"),\n    dict(words=[\"world\", \"word\"], order=\"wlrdqkzfpnchtxijbegaymvus\"),\n    dict(words=[\"kite\", \"kit\"], order=\"abcdefghijklmnopqrstuvwxyz\"),\n    dict(words=[\"t\", \"t\"], order=\"ngxlkthsjuoqcpavbfdermiywz\"),\n    dict(words=[\"\", \"\"], order=\"abcdefghijklmnopqrstuvwxyz\"),\n]\nexamples += [\n    dict(words=[\"hello\", \"leetcode\"], order=\"hlabcdefgijkmnopqrstuvwxyz\"),\n    dict(words=[\"word\", \"world\", \"row\"], order=\"worldabcefghijkmnpqstuvxyz\"),\n    dict(words=[\"apple\", \"app\"], order=\"abcdefghijklmnopqrstuvwxyz\"),\n    dict(words=[\"alien\", \"alien\"], order=\"abcdefghijklmnopqrstuvwxyz\"),\n    dict(words=[\"apple\", \"banana\", \"cherry\"], order=\"zyxwvutsrqponmlkjihgfedcba\"),\n    dict(words=[\"a\", \"b\", \"c\"], order=\"abcdeghijklmnopqrstuvwxyz\"),\n    dict(words=[\"spot\", \"spotty\", \"spotted\"], order=\"abcdefghijklmnopqrstuvwxyz\"),\n    dict(words=[\"kite\", \"kitten\"], order=\"abcdefghijklmnopqrstuvwxyz\"),\n    dict(words=[\"row\", \"rower\", \"rowest\"], order=\"zyxwvutsrqponmlkjihgfedcba\"),\n    dict(words=[\"aaa\", \"aa\", \"a\"], order=\"abcdefghijklmnopqrstuvwxyz\")\n]\nexamples += [\n    dict(words=[\"hello\", \"leetcode\"], order=\"hlabcdefgijkmnopqrstuvwxyz\"),\n    dict(words=[\"word\", \"world\", \"row\"], order=\"worldabcefghijkmnpqstuvxyz\"),\n    dict(words=[\"apple\", \"app\"], order=\"abcdefghijklmnopqrstuvwxyz\"),\n    dict(words=[\"apple\", \"banana\", \"cherry\"], order=\"abcdefghijklmnopqrstuvwxyz\"),\n    dict(words=[\"spot\", \"spotty\"], order=\"abcdefghijklmnopqrstuvwxyz\"),\n    dict(words=[\"kuvp\", \"q\"], order=\"ngxlkthsjuoqcpavbfdermiywz\"),\n    dict(words=[\"hello\", \"hallo\"], order=\"hlabcdefgijkmnopqrstuvwxyz\"),\n    dict(words=[\"race\", \"care\"], order=\"abcdefghijklmnopqrstuvwxyz\"),\n    dict(words=[\"abc\", \"ab\"], order=\"abcdefghijklmnopqrstuvwxyz\"),\n    dict(words=[\"abc\", \"abcd\"], order=\"abcdefghijklmnopqrstuvwxyz\")\n]", "code": "def isAlienSorted(words, order):\n    flag = True\n    for i in range(len(words) - 1):\n        min_num = min(len(words[i]), len(words[i + 1]))\n        if words[i + 1] in words[i] and words[i + 1] != words[i]:\n            return False\n        for t in range(min_num):\n            word_1 = words[i][t]\n            word_2 = words[i + 1][t]\n            if order.index(word_1) > order.index(word_2):\n                return False\n            elif order.index(word_1) < order.index(word_2):\n                return True\n    return flag\n", "func_name": "isAlienSorted", "exec_status": true, "example_inputs": ["\"{'words': ['hello', 'world'], 'order': 'hlabcdefgijkmnopqrstuvwxyz'}\"", "\"{'words': ['apple', 'app'], 'order': 'abcdefghijklmnopqrstuvwxyz'}\"", "\"{'words': ['kuvp', 'q'], 'order': 'ngxlkthsjuoqcpavbfdermiywz'}\"", "\"{'words': ['word', 'world', 'row'], 'order': 'wlrdqkzfpnchtxijbegaymvus'}\"", "\"{'words': ['apple', 'banana'], 'order': 'abcdefghijklmnopqrstuvwxyz'}\"", "\"{'words': ['hello', 'hello'], 'order': 'abcdefghijklmnopqrstuvwxyz'}\"", "\"{'words': ['world', 'word'], 'order': 'wlrdqkzfpnchtxijbegaymvus'}\"", "\"{'words': ['kite', 'kit'], 'order': 'abcdefghijklmnopqrstuvwxyz'}\"", "\"{'words': ['t', 't'], 'order': 'ngxlkthsjuoqcpavbfdermiywz'}\"", "\"{'words': ['', ''], 'order': 'abcdefghijklmnopqrstuvwxyz'}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"error": "<|EXCEPTION|> \"<class 'ValueError'>: substring not found\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"error": "<|EXCEPTION|> \"<class 'ValueError'>: substring not found\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}], "parsed_inputs": [[["words", "['hello', 'world']"], ["order", "\"hlabcdefgijkmnopqrstuvwxyz\""]], [["words", "['apple', 'app']"], ["order", "\"abcdefghijklmnopqrstuvwxyz\""]], [["words", "['kuvp', 'q']"], ["order", "\"ngxlkthsjuoqcpavbfdermiywz\""]], [["words", "['word', 'world', 'row']"], ["order", "\"wlrdqkzfpnchtxijbegaymvus\""]], [["words", "['apple', 'banana']"], ["order", "\"abcdefghijklmnopqrstuvwxyz\""]], [["words", "['hello', 'hello']"], ["order", "\"abcdefghijklmnopqrstuvwxyz\""]], [["words", "['world', 'word']"], ["order", "\"wlrdqkzfpnchtxijbegaymvus\""]], [["words", "['kite', 'kit']"], ["order", "\"abcdefghijklmnopqrstuvwxyz\""]], [["words", "['t', 't']"], ["order", "\"ngxlkthsjuoqcpavbfdermiywz\""]], [["words", "['', '']"], ["order", "\"abcdefghijklmnopqrstuvwxyz\""]]], "exec_code": "def isAlienSorted(words, order):\n    flag = True\n    for i in range(len(words) - 1):\n        min_num = min(len(words[i]), len(words[i + 1]))\n        if words[i + 1] in words[i] and words[i + 1] != words[i]:\n            return False\n        for t in range(min_num):\n            word_1 = words[i][t]\n            word_2 = words[i + 1][t]\n            if order.index(word_1) > order.index(word_2):\n                return False\n            elif order.index(word_1) < order.index(word_2):\n                return True\n    return flag\n", "output": "The function is:\n\n```python\ndef isAlienSorted(words, order):\n    flag = True\n    for i in range(len(words) - 1):\n        min_num = min(len(words[i]), len(words[i + 1]))\n        if words[i + 1] in words[i] and words[i + 1] != words[i]:\n            return False\n        for t in range(min_num):\n            word_1 = words[i][t]\n            word_2 = words[i + 1][t]\n            if order.index(word_1) > order.index(word_2):\n                return False\n            elif order.index(word_1) < order.index(word_2):\n                return True\n    return flag\n\n```", "choosed_example_idx": [7, 2, 8, 6, 9, 0, 3], "prompt": "Function: isAlienSorted\nInput: dict(words=['kite', 'kit'], order=\"abcdefghijklmnopqrstuvwxyz\"), Output: \"False\"\nInput: dict(words=['kuvp', 'q'], order=\"ngxlkthsjuoqcpavbfdermiywz\"), Output: \"True\"\nInput: dict(words=['t', 't'], order=\"ngxlkthsjuoqcpavbfdermiywz\"), Output: \"True\"\nInput: dict(words=['world', 'word'], order=\"wlrdqkzfpnchtxijbegaymvus\"), Output: \"<class 'ValueError'>: substring not found\"\nInput: dict(words=['', ''], order=\"abcdefghijklmnopqrstuvwxyz\"), Output: \"True\"\nInput: dict(words=['hello', 'world'], order=\"hlabcdefgijkmnopqrstuvwxyz\"), Output: \"True\"\nInput: dict(words=['word', 'world', 'row'], order=\"wlrdqkzfpnchtxijbegaymvus\"), Output: \"<class 'ValueError'>: substring not found\"\n\n\nWrite a function that generates the output from the input.\n", "id": "7dbcb51afbf09ddc45961b5cb14aa0255c47bcc6_0"}
{"example_str": "examples = [\n    dict(J=1, B=10.0, D=0.0),\n    dict(J=2, B=20.0, D=0.1),\n    dict(J=3, B=30.0),\n    dict(J=4, B=40.0, D=0.2),\n    dict(J=5, B=50.0, D=0.3),\n    dict(J=6, B=60.0),\n    dict(J=7, B=70.0, D=0.4),\n    dict(J=8, B=80.0, D=0.5),\n    dict(J=9, B=90.0),\n    dict(J=10, B=100.0, D=0.6),\n]\nexamples += [\n    dict(J=0, B=500.0, D=0.01),\n    dict(J=1, B=300.0, D=0.02),\n    dict(J=2, B=150.0),\n    dict(J=3, B=200.0, D=0.05),\n    dict(J=10, B=100.0, D=0.1),\n    dict(J=5, B=250.0),\n    dict(J=8, B=400.0, D=0.03),\n    dict(J=15, B=350.0, D=0.02),\n    dict(J=20, B=450.0),\n    dict(J=12, B=500.0, D=0.04)\n]\nexamples += [\n    dict(J=0, B=500.0, D=0.1),\n    dict(J=1, B=500.0, D=0.1),\n    dict(J=2, B=500.0, D=0.1),\n    dict(J=3, B=500.0, D=0.1),\n    dict(J=4, B=500.0, D=0.1),\n    dict(J=5, B=500.0, D=0.1),\n    dict(J=6, B=500.0, D=0.1),\n    dict(J=7, B=500.0, D=0.1),\n    dict(J=8, B=500.0, D=0.1),\n    dict(J=9, B=500.0, D=0.1)\n]", "code": "def rotor_energy(J, B, D=0.0):\n    \"\"\" Expression for a linear/prolate top with\n        centrifugal distortion.\n\n        parameters:\n        ---------------\n        J - integer quantum number\n        B - rotational constant in MHz\n        D - CD term in MHz\n\n        returns:\n        --------------\n        state energy in MHz\n    \"\"\"\n    return B * J * (J + 1) - D * J ** 2.0 * (J + 1) ** 2.0\n", "func_name": "rotor_energy", "exec_status": true, "example_inputs": ["\"{'J': 1, 'B': 10.0, 'D': 0.0}\"", "\"{'J': 2, 'B': 20.0, 'D': 0.1}\"", "\"{'J': 3, 'B': 30.0}\"", "\"{'J': 4, 'B': 40.0, 'D': 0.2}\"", "\"{'J': 5, 'B': 50.0, 'D': 0.3}\"", "\"{'J': 6, 'B': 60.0}\"", "\"{'J': 7, 'B': 70.0, 'D': 0.4}\"", "\"{'J': 8, 'B': 80.0, 'D': 0.5}\"", "\"{'J': 9, 'B': 90.0}\"", "\"{'J': 10, 'B': 100.0, 'D': 0.6}\""], "example_outputs": [{"return": "\"20.0\""}, {"return": "\"116.4\""}, {"return": "\"360.0\""}, {"return": "\"720.0\""}, {"return": "\"1230.0\""}, {"return": "\"2520.0\""}, {"return": "\"2665.6\""}, {"return": "\"3168.0\""}, {"return": "\"8100.0\""}, {"return": "\"3740.0\""}, {"return": "\"0.0\""}, {"return": "\"599.92\""}, {"return": "\"900.0\""}, {"return": "\"2392.8\""}, {"return": "\"9790.0\""}, {"return": "\"7500.0\""}, {"return": "\"28644.48\""}, {"return": "\"82848.0\""}, {"return": "\"189000.0\""}, {"return": "\"77026.56\""}, {"return": "\"0.0\""}, {"return": "\"999.6\""}, {"return": "\"2996.4\""}, {"return": "\"5985.6\""}, {"return": "\"9960.0\""}, {"return": "\"14910.0\""}, {"return": "\"20823.6\""}, {"return": "\"27686.4\""}, {"return": "\"35481.6\""}, {"return": "\"44190.0\""}], "parsed_inputs": [[["J", "1"], ["B", "10.0"], ["D", "0.0"]], [["J", "2"], ["B", "20.0"], ["D", "0.1"]], [["J", "3"], ["B", "30.0"]], [["J", "4"], ["B", "40.0"], ["D", "0.2"]], [["J", "5"], ["B", "50.0"], ["D", "0.3"]], [["J", "6"], ["B", "60.0"]], [["J", "7"], ["B", "70.0"], ["D", "0.4"]], [["J", "8"], ["B", "80.0"], ["D", "0.5"]], [["J", "9"], ["B", "90.0"]], [["J", "10"], ["B", "100.0"], ["D", "0.6"]]], "exec_code": "def rotor_energy(J, B, D=0.0):\n    \"\"\" Expression for a linear/prolate top with\n        centrifugal distortion.\n\n        parameters:\n        ---------------\n        J - integer quantum number\n        B - rotational constant in MHz\n        D - CD term in MHz\n\n        returns:\n        --------------\n        state energy in MHz\n    \"\"\"\n    return B * J * (J + 1) - D * J ** 2.0 * (J + 1) ** 2.0\n", "output": "The function is:\n\n```python\ndef rotor_energy(J, B, D=0.0):\n    \"\"\" Expression for a linear/prolate top with\n        centrifugal distortion.\n\n        parameters:\n        ---------------\n        J - integer quantum number\n        B - rotational constant in MHz\n        D - CD term in MHz\n\n        returns:\n        --------------\n        state energy in MHz\n    \"\"\"\n    return B * J * (J + 1) - D * J ** 2.0 * (J + 1) ** 2.0\n\n```", "choosed_example_idx": [9, 8, 6, 4, 7, 1, 3, 0, 5, 2], "prompt": "Write a function that generates the output from the input.\n\nFunction: rotor_energy\nInput: dict(J=10, B=100.0, D=0.6), Output: \"3740.0\"\nInput: dict(J=9, B=90.0), Output: \"8100.0\"\nInput: dict(J=7, B=70.0, D=0.4), Output: \"2665.6\"\nInput: dict(J=5, B=50.0, D=0.3), Output: \"1230.0\"\nInput: dict(J=8, B=80.0, D=0.5), Output: \"3168.0\"\nInput: dict(J=2, B=20.0, D=0.1), Output: \"116.4\"\nInput: dict(J=4, B=40.0, D=0.2), Output: \"720.0\"\nInput: dict(J=1, B=10.0, D=0.0), Output: \"20.0\"\nInput: dict(J=6, B=60.0), Output: \"2520.0\"\nInput: dict(J=3, B=30.0), Output: \"360.0\"\n\n\n", "id": "cb0a6c68fab8630a3c109f8d34d552f3e940447c_0"}
{"example_str": "examples = [\n    dict(line=\"Hello World\"),\n    dict(line=\"THIS IS ALL UPPERCASE\"),\n    dict(line=\"this is all lowercase\"),\n    dict(line=\"Mixed Case Sentence\"),\n    dict(line=\"1234567890\"),  # only digits, no letters\n    dict(line=\"!@#$%^&*()\"),  # only special characters, no letters\n    dict(line=\"   \"),  # only whitespace characters, no letters\n    dict(line=\"Hello, World!\"),  # sentence with punctuation\n    dict(line=\"Python is awesome\"),  # sentence with multiple words\n    dict(line=\"A\"),  # single uppercase letter\n]\nexamples += [\n    dict(line=\"Hello World!\"),  # Mixed case with punctuation and space\n    dict(line=\"HELLO WORLD\"),   # All uppercase with space\n    dict(line=\"hello world\"),   # All lowercase with space\n    dict(line=\"1234567890\"),    # Numbers only\n    dict(line=\"\"),              # Empty string\n    dict(line=\"H3ll0 W0rld\"),   # Mixed case with numbers\n    dict(line=\"!@#$%^&*()\"),    # Special characters only\n    dict(line=\"Python Programming\"),  # Mixed case with space\n    dict(line=\"PYTHON\"),        # All uppercase, no space\n    dict(line=\"python\"),        # All lowercase, no space\n]\nexamples += [\n    dict(line=\"Hello World!\"),\n    dict(line=\"Python Programming\"),\n    dict(line=\"HELLO\"),\n    dict(line=\"hello\"),\n    dict(line=\"12345\"),\n    dict(line=\"MixedCASE123\"),\n    dict(line=\" \"),\n    dict(line=\"UPPER lower\"),\n    dict(line=\"No Numbers123\"),\n    dict(line=\"Special #Characters!\")\n]", "code": "def percentages_upper_lower(line):\n    \"\"\"\n    Calculates the percentage of upper case and lower case letters.\n    :param line:\n    :return: upper case percentage and lower case percentage\n    \"\"\"\n    no_upper_case_letters = 0\n    no_lower_case_letters = 0\n    total_no_letters = len(line) - 1\n    for l in line[:-1]:\n        if l.islower():\n            no_lower_case_letters += 1\n        elif l.isupper():\n            no_upper_case_letters += 1\n        elif l.isspace():\n            total_no_letters -= 1\n        else:\n            pass\n    upper_case_percentage = round(no_upper_case_letters / total_no_letters *\n        100)\n    lower_case_percentage = round(no_lower_case_letters / total_no_letters *\n        100)\n    return upper_case_percentage, lower_case_percentage\n", "func_name": "percentages_upper_lower", "exec_status": true, "example_inputs": ["\"{'line': 'Hello World'}\"", "\"{'line': 'THIS IS ALL UPPERCASE'}\"", "\"{'line': 'this is all lowercase'}\"", "\"{'line': 'Mixed Case Sentence'}\"", "\"{'line': '1234567890'}\"", "\"{'line': '!@#$%^&*()'}\"", "\"{'line': '   '}\"", "\"{'line': 'Hello, World!'}\"", "\"{'line': 'Python is awesome'}\"", "\"{'line': 'A'}\""], "example_outputs": [{"return": "\"(22, 78)\""}, {"return": "\"(100, 0)\""}, {"return": "\"(0, 100)\""}, {"return": "\"(19, 81)\""}, {"return": "\"(0, 0)\""}, {"return": "\"(0, 0)\""}, {"error": "<|EXCEPTION|> \"<class 'ZeroDivisionError'>: division by zero\""}, {"return": "\"(18, 73)\""}, {"return": "\"(7, 93)\""}, {"error": "<|EXCEPTION|> \"<class 'ZeroDivisionError'>: division by zero\""}, {"return": "\"(20, 80)\""}, {"return": "\"(100, 0)\""}, {"return": "\"(0, 100)\""}, {"return": "\"(0, 0)\""}, {"return": "\"(0, 0)\""}, {"return": "\"(22, 44)\""}, {"return": "\"(0, 0)\""}, {"return": "\"(12, 88)\""}, {"return": "\"(100, 0)\""}, {"return": "\"(0, 100)\""}, {"return": "\"(20, 80)\""}, {"return": "\"(12, 88)\""}, {"return": "\"(100, 0)\""}, {"return": "\"(0, 100)\""}, {"return": "\"(0, 0)\""}, {"return": "\"(45, 36)\""}, {"error": "<|EXCEPTION|> \"<class 'ZeroDivisionError'>: division by zero\""}, {"return": "\"(56, 44)\""}, {"return": "\"(18, 64)\""}, {"return": "\"(11, 83)\""}], "parsed_inputs": [[["line", "\"Hello World\""]], [["line", "\"THIS IS ALL UPPERCASE\""]], [["line", "\"this is all lowercase\""]], [["line", "\"Mixed Case Sentence\""]], [["line", "\"1234567890\""]], [["line", "\"!@#$%^&*()\""]], [["line", "\"   \""]], [["line", "\"Hello, World!\""]], [["line", "\"Python is awesome\""]], [["line", "\"A\""]]], "exec_code": "def percentages_upper_lower(line):\n    \"\"\"\n    Calculates the percentage of upper case and lower case letters.\n    :param line:\n    :return: upper case percentage and lower case percentage\n    \"\"\"\n    no_upper_case_letters = 0\n    no_lower_case_letters = 0\n    total_no_letters = len(line) - 1\n    for l in line[:-1]:\n        if l.islower():\n            no_lower_case_letters += 1\n        elif l.isupper():\n            no_upper_case_letters += 1\n        elif l.isspace():\n            total_no_letters -= 1\n        else:\n            pass\n    upper_case_percentage = round(no_upper_case_letters / total_no_letters *\n        100)\n    lower_case_percentage = round(no_lower_case_letters / total_no_letters *\n        100)\n    return upper_case_percentage, lower_case_percentage\n", "output": "The function is:\n\n```python\ndef percentages_upper_lower(line):\n    \"\"\"\n    Calculates the percentage of upper case and lower case letters.\n    :param line:\n    :return: upper case percentage and lower case percentage\n    \"\"\"\n    no_upper_case_letters = 0\n    no_lower_case_letters = 0\n    total_no_letters = len(line) - 1\n    for l in line[:-1]:\n        if l.islower():\n            no_lower_case_letters += 1\n        elif l.isupper():\n            no_upper_case_letters += 1\n        elif l.isspace():\n            total_no_letters -= 1\n        else:\n            pass\n    upper_case_percentage = round(no_upper_case_letters / total_no_letters *\n        100)\n    lower_case_percentage = round(no_lower_case_letters / total_no_letters *\n        100)\n    return upper_case_percentage, lower_case_percentage\n\n```", "choosed_example_idx": [1, 3, 6, 0], "prompt": "Input: dict(line=\"THIS IS ALL UPPERCASE\"), Output: \"(100, 0)\"\nInput: dict(line=\"Mixed Case Sentence\"), Output: \"(19, 81)\"\nInput: dict(line=\"   \"), Output: \"<class 'ZeroDivisionError'>: division by zero\"\nInput: dict(line=\"Hello World\"), Output: \"(22, 78)\"\n\nFunction: percentages_upper_lower\n\nWrite a function that generates the output from the input.\n", "id": "489a456d0dcda18719a5b5f56f84dd64988d3728_0"}
{"example_str": "examples = [\n    dict(lis=[1, 2, 3]),\n    dict(lis=[]),\n    dict(lis=['a', 'b', 'c']),\n    dict(lis=['']),\n    dict(lis=[0, 0, 0]),\n    dict(lis=[False, False, False]),\n    dict(lis=[None, None, None]),\n    dict(lis=['a', '', 'b']),\n    dict(lis=[1, 0, 3]),\n    dict(lis=[True, False, True]),\n]\nexamples += [\n    dict(lis=[]),  # Empty list\n    dict(lis=[0, False, None]),  # List with all falsy values\n    dict(lis=[1, 2, 3]),  # List with all truthy values\n    dict(lis=[0, 0, 1]),  # List with a truthy value at the end\n    dict(lis=[False, None, True]),  # List with a truthy value in the middle\n    dict(lis=[0]),  # Single-element list with a falsy value\n    dict(lis=[1]),  # Single-element list with a truthy value\n    dict(lis=['', 0, False]),  # List with various falsy values\n    dict(lis=['a', 'b', 'c']),  # List with string elements (all truthy)\n    dict(lis=[[], [1], [2, 3]])  # List containing other lists, some empty (falsy) and some not\n]\nexamples += [\n    dict(lis=[]),\n    dict(lis=[0, 0, 0]),\n    dict(lis=[None, False, 0]),\n    dict(lis=[1, 2, 3]),\n    dict(lis=[False, False, False]),\n    dict(lis=[0]),\n    dict(lis=['', 0, False]),\n    dict(lis=[[], {}, 0]),\n    dict(lis=[True, False]),\n    dict(lis=[None])\n]", "code": "def is_empty(lis):\n    for i in lis:\n        if bool(i):\n            print('False')\n            return 0\n        else:\n            continue\n    print('True')\n", "func_name": "is_empty", "exec_status": true, "example_inputs": ["\"{'lis': [1, 2, 3]}\"", "\"{'lis': []}\"", "\"{'lis': ['a', 'b', 'c']}\"", "\"{'lis': ['']}\"", "\"{'lis': [0, 0, 0]}\"", "\"{'lis': [False, False, False]}\"", "\"{'lis': [None, None, None]}\"", "\"{'lis': ['a', '', 'b']}\"", "\"{'lis': [1, 0, 3]}\"", "\"{'lis': [True, False, True]}\""], "example_outputs": [{"return": "\"0\""}, {"return": "\"None\""}, {"return": "\"0\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"None\""}, {"return": "\"0\""}, {"return": "\"None\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"0\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"0\""}, {"return": "\"None\""}], "parsed_inputs": [[["lis", "[1, 2, 3]"]], [["lis", "[]"]], [["lis", "['a', 'b', 'c']"]], [["lis", "['']"]], [["lis", "[0, 0, 0]"]], [["lis", "[False, False, False]"]], [["lis", "[None, None, None]"]], [["lis", "['a', '', 'b']"]], [["lis", "[1, 0, 3]"]], [["lis", "[True, False, True]"]]], "exec_code": "def is_empty(lis):\n    for i in lis:\n        if bool(i):\n            print('False')\n            return 0\n        else:\n            continue\n    print('True')\n", "output": "The function is:\n\n```python\ndef is_empty(lis):\n    for i in lis:\n        if bool(i):\n            print('False')\n            return 0\n        else:\n            continue\n    print('True')\n\n```", "choosed_example_idx": [3, 6, 4, 2, 7, 1, 5, 9, 8], "prompt": "Write a function that generates the output from the input.\nInput: dict(lis=['']), Output: \"None\"\nInput: dict(lis=[None, None, None]), Output: \"None\"\nInput: dict(lis=[0, 0, 0]), Output: \"None\"\nInput: dict(lis=['a', 'b', 'c']), Output: \"0\"\nInput: dict(lis=['a', '', 'b']), Output: \"0\"\nInput: dict(lis=[]), Output: \"None\"\nInput: dict(lis=[False, False, False]), Output: \"None\"\nInput: dict(lis=[True, False, True]), Output: \"0\"\nInput: dict(lis=[1, 0, 3]), Output: \"0\"\n\nFunction: is_empty\n", "id": "99d7b8659f531647f903274cfaafb2054733b2b9_0"}
{"example_str": "examples = [\n    dict(num_lits=[1, 2, 3, 4, 5]),\n    dict(num_lits=[10, 20, 30]),\n    dict(num_lits=[-1, -2, -3, -4, -5]),\n    dict(num_lits=[0, 0, 0, 0, 0]),\n    dict(num_lits=[1.1, 2.2, 3.3, 4.4, 5.5]),\n    dict(num_lits=[]),\n    dict(num_lits=[100]),\n    dict(num_lits=[5, 5, 5, 5, 5]),\n    dict(num_lits=[-10, 0, 10]),\n    dict(num_lits=[1, 2, 4, 8, 16]),\n]\nexamples += [\n    dict(num_lits=[1, 2, 3, 4, 5]),  # Sum of first 5 natural numbers\n    dict(num_lits=[-1, -2, -3, -4, -5]),  # Sum of negative numbers\n    dict(num_lits=[10, 20, 30]),  # Sum of selected integers\n    dict(num_lits=[0.5, 1.5, 2.5]),  # Sum of floating point numbers\n    dict(num_lits=[-10, 5, 15]),  # Sum including negative and positive numbers\n    dict(num_lits=[]),  # Empty list\n    dict(num_lits=[100]),  # Single element list\n    dict(num_lits=[1, -1, 1, -1, 1, -1]),  # Alternating positive and negative numbers\n    dict(num_lits=[2**3, 3**2, 1**1]),  # Powers\n    dict(num_lits=[1/2, 1/4, 1/8, 1/16])  # Fractions\n]\nexamples += [\n    dict(num_lits=[1, 2, 3]),\n    dict(num_lits=[10, 20, 30]),\n    dict(num_lits=[-1, -2, -3]),\n    dict(num_lits=[0, 0, 0]),\n    dict(num_lits=[100, 200, 300]),\n    dict(num_lits=[0.5, 1.5, 2.5]),\n    dict(num_lits=[-10, 5, 15]),\n    dict(num_lits=[2, -2, 2]),\n    dict(num_lits=[1]),\n    dict(num_lits=[])\n]", "code": "def sum_list(num_lits):\n    sum = 0\n    for i in num_lits:\n        sum = sum + i\n    return sum\n", "func_name": "sum_list", "exec_status": true, "example_inputs": ["\"{'num_lits': [1, 2, 3, 4, 5]}\"", "\"{'num_lits': [10, 20, 30]}\"", "\"{'num_lits': [-1, -2, -3, -4, -5]}\"", "\"{'num_lits': [0, 0, 0, 0, 0]}\"", "\"{'num_lits': [1.1, 2.2, 3.3, 4.4, 5.5]}\"", "\"{'num_lits': []}\"", "\"{'num_lits': [100]}\"", "\"{'num_lits': [5, 5, 5, 5, 5]}\"", "\"{'num_lits': [-10, 0, 10]}\"", "\"{'num_lits': [1, 2, 4, 8, 16]}\""], "example_outputs": [{"return": "\"15\""}, {"return": "\"60\""}, {"return": "\"-15\""}, {"return": "\"0\""}, {"return": "\"16.5\""}, {"return": "\"0\""}, {"return": "\"100\""}, {"return": "\"25\""}, {"return": "\"0\""}, {"return": "\"31\""}, {"return": "\"15\""}, {"return": "\"-15\""}, {"return": "\"60\""}, {"return": "\"4.5\""}, {"return": "\"10\""}, {"return": "\"0\""}, {"return": "\"100\""}, {"return": "\"0\""}, {"return": "\"18\""}, {"return": "\"0.9375\""}, {"return": "\"6\""}, {"return": "\"60\""}, {"return": "\"-6\""}, {"return": "\"0\""}, {"return": "\"600\""}, {"return": "\"4.5\""}, {"return": "\"10\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"0\""}], "parsed_inputs": [[["num_lits", "[1, 2, 3, 4, 5]"]], [["num_lits", "[10, 20, 30]"]], [["num_lits", "[-1, -2, -3, -4, -5]"]], [["num_lits", "[0, 0, 0, 0, 0]"]], [["num_lits", "[1.1, 2.2, 3.3, 4.4, 5.5]"]], [["num_lits", "[]"]], [["num_lits", "[100]"]], [["num_lits", "[5, 5, 5, 5, 5]"]], [["num_lits", "[-10, 0, 10]"]], [["num_lits", "[1, 2, 4, 8, 16]"]]], "exec_code": "def sum_list(num_lits):\n    sum = 0\n    for i in num_lits:\n        sum = sum + i\n    return sum\n", "output": "The function is:\n\n```python\ndef sum_list(num_lits):\n    sum = 0\n    for i in num_lits:\n        sum = sum + i\n    return sum\n\n```", "choosed_example_idx": [5, 0, 3, 1, 7, 4, 9, 2], "prompt": "Input: dict(num_lits=[]), Output: \"0\"\nInput: dict(num_lits=[1, 2, 3, 4, 5]), Output: \"15\"\nInput: dict(num_lits=[0, 0, 0, 0, 0]), Output: \"0\"\nInput: dict(num_lits=[10, 20, 30]), Output: \"60\"\nInput: dict(num_lits=[5, 5, 5, 5, 5]), Output: \"25\"\nInput: dict(num_lits=[1.1, 2.2, 3.3, 4.4, 5.5]), Output: \"16.5\"\nInput: dict(num_lits=[1, 2, 4, 8, 16]), Output: \"31\"\nInput: dict(num_lits=[-1, -2, -3, -4, -5]), Output: \"-15\"\n\nWrite a function that generates the output from the input.\nFunction: sum_list\n", "id": "d19dda5a87078b4de0c399076c0f590a0a3ce320_0"}
{"example_str": "examples = [\n    dict(n=5, arr=[1, 2, 3, 4, 5]),\n    dict(n=10, arr=[1, 2, 3, 4, 5]),\n    dict(n='a', arr=['a', 'b', 'c']),\n    dict(n='d', arr=['a', 'b', 'c']),\n    dict(n=3.14, arr=[1, 2, 3.14, 4, 5]),\n    dict(n=6, arr=[1, 2, 3, 4, 5]),\n    dict(n=True, arr=[True, False, True]),\n    dict(n=False, arr=[True, False, True]),\n    dict(n='hello', arr=['hello', 'world']),\n    dict(n='goodbye', arr=['hello', 'world']),\n]\nexamples += [\n    dict(n=5, arr=[1, 2, 3, 4, 5]),\n    dict(n=\"hello\", arr=[\"hello\", \"world\"]),\n    dict(n=10, arr=[10, 20, 30, 40, 50]),\n    dict(n=\"apple\", arr=[\"banana\", \"cherry\", \"apple\"]),\n    dict(n=0, arr=[0, 1, 2, 3, 4, 5]),\n    dict(n=25, arr=[5, 15, 25, 35, 45]),\n    dict(n=\"test\", arr=[\"test\", \"test\", \"test\"]),\n    dict(n=7, arr=[1, 3, 5, 7, 9]),\n    dict(n=100, arr=[100, 200, 300, 400, 500]),\n    dict(n=\"world\", arr=[\"hello\", \"world\", \"python\"])\n]\nexamples += [\n    dict(n=5, arr=[1, 2, 3, 4, 5]),\n    dict(n='hello', arr=['a', 'b', 'hello', 'world']),\n    dict(n=10, arr=[10, 20, 30, 40, 50]),\n    dict(n='z', arr=['x', 'y', 'z']),\n    dict(n=0, arr=[0, 1, 2, 3, 4, 5]),\n    dict(n=3.14, arr=[2.71, 3.14, 1.41]),\n    dict(n=True, arr=[False, True, False]),\n    dict(n='apple', arr=['banana', 'cherry', 'apple', 'date']),\n    dict(n=100, arr=[100, 200, 300, 400, 500]),\n    dict(n='test', arr=['test', 'test', 'test'])\n]", "code": "def linearsearch(n, arr):\n    for x in arr:\n        if x == n:\n            return True\n    return False\n", "func_name": "linearsearch", "exec_status": true, "example_inputs": ["\"{'n': 5, 'arr': [1, 2, 3, 4, 5]}\"", "\"{'n': 10, 'arr': [1, 2, 3, 4, 5]}\"", "\"{'n': 'a', 'arr': ['a', 'b', 'c']}\"", "\"{'n': 'd', 'arr': ['a', 'b', 'c']}\"", "\"{'n': 3.14, 'arr': [1, 2, 3.14, 4, 5]}\"", "\"{'n': 6, 'arr': [1, 2, 3, 4, 5]}\"", "\"{'n': True, 'arr': [True, False, True]}\"", "\"{'n': False, 'arr': [True, False, True]}\"", "\"{'n': 'hello', 'arr': ['hello', 'world']}\"", "\"{'n': 'goodbye', 'arr': ['hello', 'world']}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}], "parsed_inputs": [[["n", "5"], ["arr", "[1, 2, 3, 4, 5]"]], [["n", "10"], ["arr", "[1, 2, 3, 4, 5]"]], [["n", "\"a\""], ["arr", "['a', 'b', 'c']"]], [["n", "\"d\""], ["arr", "['a', 'b', 'c']"]], [["n", "3.14"], ["arr", "[1, 2, 3.14, 4, 5]"]], [["n", "6"], ["arr", "[1, 2, 3, 4, 5]"]], [["n", "True"], ["arr", "[True, False, True]"]], [["n", "False"], ["arr", "[True, False, True]"]], [["n", "\"hello\""], ["arr", "['hello', 'world']"]], [["n", "\"goodbye\""], ["arr", "['hello', 'world']"]]], "exec_code": "def linearsearch(n, arr):\n    for x in arr:\n        if x == n:\n            return True\n    return False\n", "output": "The function is:\n\n```python\ndef linearsearch(n, arr):\n    for x in arr:\n        if x == n:\n            return True\n    return False\n\n```", "choosed_example_idx": [3, 2, 4, 8], "prompt": "Input: dict(n=\"d\", arr=['a', 'b', 'c']), Output: \"False\"\nInput: dict(n=\"a\", arr=['a', 'b', 'c']), Output: \"True\"\nInput: dict(n=3.14, arr=[1, 2, 3.14, 4, 5]), Output: \"True\"\nInput: dict(n=\"hello\", arr=['hello', 'world']), Output: \"True\"\n\n\nFunction: linearsearch\nWrite a function that generates the output from the input.\n\n\n", "id": "4acf038b3b7580e57720d5c1f9e8161e38cd3b96_0"}
{"example_str": "examples = [\n    dict(v=[1, 2, 3]),\n    dict(v=['a', 'b', 'c']),\n    dict(v=[(1, 2), (3, 4), (5, 6)]),\n    dict(v=['arc1', 'arc2', 'arc3']),\n    dict(v=[True, False, True]),\n    dict(v=[1.2, 3.4, 5.6]),\n    dict(v=[None, None, None]),\n    dict(v=[[], [], []]),\n    dict(v=[{'a': 1}, {'b': 2}, {'c': 3}]),\n    dict(v=[lambda x: x, lambda x: x**2, lambda x: x**3]),\n]\nexamples += [\n    dict(v=[]),  # Empty list\n    dict(v=[1, 2, 3]),  # List of integers\n    dict(v=[\"a\", \"b\", \"c\"]),  # List of strings\n    dict(v=[(1, 2), (3, 4)]),  # List of tuples\n    dict(v=[[1, 2], [3, 4]]),  # List of lists\n    dict(v=[None, True, False]),  # List with None and boolean values\n    dict(v=[\"one\", 2, \"three\", 4]),  # Mixed type list\n    dict(v=[{\"key\": \"value\"}, {\"another\": \"item\"}]),  # List of dictionaries\n    dict(v=[1.1, 2.2, 3.3]),  # List of floats\n    dict(v=[set([1]), set([2, 3])])  # List of sets\n]\nexamples += [\n    dict(v=[]),\n    dict(v=[1, 2, 3]),\n    dict(v=['a', 'b', 'c']),\n    dict(v=[(1, 2), (3, 4)]),\n    dict(v=[True, False, True]),\n    dict(v=[None, None]),\n    dict(v=['single']),\n    dict(v=[{'key': 'value'}, {'another': 'item'}]),\n    dict(v=[1.1, 2.2, 3.3]),\n    dict(v=list(range(10)))\n]", "code": "def Arcs_init(v):\n    numVars = 0\n    retval = []\n    for arc in v:\n        retval.append(arc)\n        numVars += 1\n    return retval\n", "func_name": "Arcs_init", "exec_status": true, "example_inputs": ["\"{'v': [1, 2, 3]}\"", "\"{'v': ['a', 'b', 'c']}\"", "\"{'v': [(1, 2), (3, 4), (5, 6)]}\"", "\"{'v': ['arc1', 'arc2', 'arc3']}\"", "\"{'v': [True, False, True]}\"", "\"{'v': [1.2, 3.4, 5.6]}\"", "\"{'v': [None, None, None]}\"", "\"{'v': [[], [], []]}\"", "\"{'v': [{'a': 1}, {'b': 2}, {'c': 3}]}\"", "\"{'v': [<function <lambda> at 0x7fbce94559d0>, <function <lambda> at 0x7fbce9455e50>, <function <lambda> at 0x7fbce9455dc0>]}\""], "example_outputs": [{"return": "\"[1, 2, 3]\""}, {"return": "\"['a', 'b', 'c']\""}, {"return": "\"[(1, 2), (3, 4), (5, 6)]\""}, {"return": "\"['arc1', 'arc2', 'arc3']\""}, {"return": "\"[True, False, True]\""}, {"return": "\"[1.2, 3.4, 5.6]\""}, {"return": "\"[None, None, None]\""}, {"return": "\"[[], [], []]\""}, {"return": "\"[{'a': 1}, {'b': 2}, {'c': 3}]\""}, {"return": "\"[<function <lambda> at 0x7fbce94559d0>, <function <lambda> at 0x7fbce9455e50>, <function <lambda> at 0x7fbce9455dc0>]\""}, {"return": "\"[]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"['a', 'b', 'c']\""}, {"return": "\"[(1, 2), (3, 4)]\""}, {"return": "\"[[1, 2], [3, 4]]\""}, {"return": "\"[None, True, False]\""}, {"return": "\"['one', 2, 'three', 4]\""}, {"return": "\"[{'key': 'value'}, {'another': 'item'}]\""}, {"return": "\"[1.1, 2.2, 3.3]\""}, {"return": "\"[{1}, {2, 3}]\""}, {"return": "\"[]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"['a', 'b', 'c']\""}, {"return": "\"[(1, 2), (3, 4)]\""}, {"return": "\"[True, False, True]\""}, {"return": "\"[None, None]\""}, {"return": "\"['single']\""}, {"return": "\"[{'key': 'value'}, {'another': 'item'}]\""}, {"return": "\"[1.1, 2.2, 3.3]\""}, {"return": "\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\""}], "parsed_inputs": [[["v", "[1, 2, 3]"]], [["v", "['a', 'b', 'c']"]], [["v", "[(1, 2), (3, 4), (5, 6)]"]], [["v", "['arc1', 'arc2', 'arc3']"]], [["v", "[True, False, True]"]], [["v", "[1.2, 3.4, 5.6]"]], [["v", "[None, None, None]"]], [["v", "[[], [], []]"]], [["v", "[{'a': 1}, {'b': 2}, {'c': 3}]"]], [["v", "[lambda x: x, lambda x: x ** 2, lambda x: x ** 3]"]]], "exec_code": "def Arcs_init(v):\n    numVars = 0\n    retval = []\n    for arc in v:\n        retval.append(arc)\n        numVars += 1\n    return retval\n", "output": "The function is:\n\n```python\ndef Arcs_init(v):\n    numVars = 0\n    retval = []\n    for arc in v:\n        retval.append(arc)\n        numVars += 1\n    return retval\n\n```", "choosed_example_idx": [1, 3, 9], "prompt": "Function: Arcs_init\nInput: dict(v=['a', 'b', 'c']), Output: \"['a', 'b', 'c']\"\nInput: dict(v=['arc1', 'arc2', 'arc3']), Output: \"['arc1', 'arc2', 'arc3']\"\nInput: dict(v=[lambda x: x, lambda x: x ** 2, lambda x: x ** 3]), Output: \"[<function <lambda> at 0x7fbce94559d0>, <function <lambda> at 0x7fbce9455e50>, <function <lambda> at 0x7fbce9455dc0>]\"\n\nWrite a function that generates the output from the input.\n", "id": "4271b240c33f244553179dfa8379de609706bffd_0"}
{"example_str": "examples = [\n    dict(inputlist=[\"Alice\"]),\n    dict(inputlist=[\"Alice\", \"Bob\"]),\n    dict(inputlist=[\"Alice\", \"Bob\", \"Charlie\"]),\n    dict(inputlist=[\"Alice\", \"Bob\", \"Charlie\", \"David\"]),\n    dict(inputlist=[\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"]),\n    dict(inputlist=[\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"]),\n    dict(inputlist=[\"a\", \"b\", \"c\", \"d\", \"e\"]),\n    dict(inputlist=[\"John\", \"Mary\", \"Jane\", \"Tom\", \"Lily\", \"Mike\", \"Emily\"]),\n    dict(inputlist=[\"Red\", \"Green\", \"Blue\", \"Yellow\", \"Orange\", \"Purple\"]),\n    dict(inputlist=[\"Apple\", \"Banana\", \"Cherry\", \"Date\", \"Elderberry\", \"Fig\", \"Grape\"]),\n]\nexamples += [\n    dict(inputlist=[\"Alice\"]),\n    dict(inputlist=[\"Alice\", \"Bob\"]),\n    dict(inputlist=[\"Alice\", \"Bob\", \"Charlie\"]),\n    dict(inputlist=[\"Alice\", \"Bob\", \"Charlie\", \"David\"]),\n    dict(inputlist=[\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"]),\n    dict(inputlist=[\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\"]),\n    dict(inputlist=[\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\", \"Grace\"]),\n    dict(inputlist=[\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\", \"Grace\", \"Helen\"]),\n    dict(inputlist=[\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\", \"Grace\", \"Helen\", \"Ivy\"]),\n    dict(inputlist=[\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\", \"Grace\", \"Helen\", \"Ivy\", \"Jack\"])\n]\nexamples += [\n    dict(inputlist=[\"Alice\"]),\n    dict(inputlist=[\"Alice\", \"Bob\"]),\n    dict(inputlist=[\"Alice\", \"Bob\", \"Charlie\"]),\n    dict(inputlist=[\"Alice\", \"Bob\", \"Charlie\", \"David\"]),\n    dict(inputlist=[\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"]),\n    dict(inputlist=[\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\"]),\n    dict(inputlist=[\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\", \"Grace\"]),\n    dict(inputlist=[\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\", \"Grace\", \"Helen\"]),\n    dict(inputlist=[\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\", \"Grace\", \"Helen\", \"Ivy\"]),\n    dict(inputlist=[\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\", \"Grace\", \"Helen\", \"Ivy\", \"John\"])\n]", "code": "def list_to_string(inputlist):\n    \"\"\"\n    Format a list to a string with grammar\n    Inputlist[n] (where n>3) returns \"inputlist[0], inputlist[1], ... and inputlist[n]\"\n    \"\"\"\n    outstring = ''\n    numusers = len(inputlist)\n    if numusers == 1:\n        outstring += inputlist[0]\n    if numusers == 2:\n        outstring += inputlist[0] + ' and ' + inputlist[1]\n    if numusers >= 3:\n        for x in range(numusers - 2):\n            outstring += inputlist[x] + ', '\n        outstring += inputlist[-2] + ' and ' + inputlist[-1]\n    return outstring\n", "func_name": "list_to_string", "exec_status": true, "example_inputs": ["\"{'inputlist': ['Alice']}\"", "\"{'inputlist': ['Alice', 'Bob']}\"", "\"{'inputlist': ['Alice', 'Bob', 'Charlie']}\"", "\"{'inputlist': ['Alice', 'Bob', 'Charlie', 'David']}\"", "\"{'inputlist': ['Alice', 'Bob', 'Charlie', 'David', 'Eve']}\"", "\"{'inputlist': ['One', 'Two', 'Three', 'Four', 'Five', 'Six']}\"", "\"{'inputlist': ['a', 'b', 'c', 'd', 'e']}\"", "\"{'inputlist': ['John', 'Mary', 'Jane', 'Tom', 'Lily', 'Mike', 'Emily']}\"", "\"{'inputlist': ['Red', 'Green', 'Blue', 'Yellow', 'Orange', 'Purple']}\"", "\"{'inputlist': ['Apple', 'Banana', 'Cherry', 'Date', 'Elderberry', 'Fig', 'Grape']}\""], "example_outputs": [{"return": "\"'Alice'\""}, {"return": "\"'Alice and Bob'\""}, {"return": "\"'Alice, Bob and Charlie'\""}, {"return": "\"'Alice, Bob, Charlie and David'\""}, {"return": "\"'Alice, Bob, Charlie, David and Eve'\""}, {"return": "\"'One, Two, Three, Four, Five and Six'\""}, {"return": "\"'a, b, c, d and e'\""}, {"return": "\"'John, Mary, Jane, Tom, Lily, Mike and Emily'\""}, {"return": "\"'Red, Green, Blue, Yellow, Orange and Purple'\""}, {"return": "\"'Apple, Banana, Cherry, Date, Elderberry, Fig and Grape'\""}, {"return": "\"'Alice'\""}, {"return": "\"'Alice and Bob'\""}, {"return": "\"'Alice, Bob and Charlie'\""}, {"return": "\"'Alice, Bob, Charlie and David'\""}, {"return": "\"'Alice, Bob, Charlie, David and Eve'\""}, {"return": "\"'Alice, Bob, Charlie, David, Eve and Frank'\""}, {"return": "\"'Alice, Bob, Charlie, David, Eve, Frank and Grace'\""}, {"return": "\"'Alice, Bob, Charlie, David, Eve, Frank, Grace and Helen'\""}, {"return": "\"'Alice, Bob, Charlie, David, Eve, Frank, Grace, Helen and Ivy'\""}, {"return": "\"'Alice, Bob, Charlie, David, Eve, Frank, Grace, Helen, Ivy and Jack'\""}, {"return": "\"'Alice'\""}, {"return": "\"'Alice and Bob'\""}, {"return": "\"'Alice, Bob and Charlie'\""}, {"return": "\"'Alice, Bob, Charlie and David'\""}, {"return": "\"'Alice, Bob, Charlie, David and Eve'\""}, {"return": "\"'Alice, Bob, Charlie, David, Eve and Frank'\""}, {"return": "\"'Alice, Bob, Charlie, David, Eve, Frank and Grace'\""}, {"return": "\"'Alice, Bob, Charlie, David, Eve, Frank, Grace and Helen'\""}, {"return": "\"'Alice, Bob, Charlie, David, Eve, Frank, Grace, Helen and Ivy'\""}, {"return": "\"'Alice, Bob, Charlie, David, Eve, Frank, Grace, Helen, Ivy and John'\""}], "parsed_inputs": [[["inputlist", "['Alice']"]], [["inputlist", "['Alice', 'Bob']"]], [["inputlist", "['Alice', 'Bob', 'Charlie']"]], [["inputlist", "['Alice', 'Bob', 'Charlie', 'David']"]], [["inputlist", "['Alice', 'Bob', 'Charlie', 'David', 'Eve']"]], [["inputlist", "['One', 'Two', 'Three', 'Four', 'Five', 'Six']"]], [["inputlist", "['a', 'b', 'c', 'd', 'e']"]], [["inputlist", "['John', 'Mary', 'Jane', 'Tom', 'Lily', 'Mike', 'Emily']"]], [["inputlist", "['Red', 'Green', 'Blue', 'Yellow', 'Orange', 'Purple']"]], [["inputlist", "['Apple', 'Banana', 'Cherry', 'Date', 'Elderberry', 'Fig', 'Grape']"]]], "exec_code": "def list_to_string(inputlist):\n    \"\"\"\n    Format a list to a string with grammar\n    Inputlist[n] (where n>3) returns \"inputlist[0], inputlist[1], ... and inputlist[n]\"\n    \"\"\"\n    outstring = ''\n    numusers = len(inputlist)\n    if numusers == 1:\n        outstring += inputlist[0]\n    if numusers == 2:\n        outstring += inputlist[0] + ' and ' + inputlist[1]\n    if numusers >= 3:\n        for x in range(numusers - 2):\n            outstring += inputlist[x] + ', '\n        outstring += inputlist[-2] + ' and ' + inputlist[-1]\n    return outstring\n", "output": "The function is:\n\n```python\ndef list_to_string(inputlist):\n    \"\"\"\n    Format a list to a string with grammar\n    Inputlist[n] (where n>3) returns \"inputlist[0], inputlist[1], ... and inputlist[n]\"\n    \"\"\"\n    outstring = ''\n    numusers = len(inputlist)\n    if numusers == 1:\n        outstring += inputlist[0]\n    if numusers == 2:\n        outstring += inputlist[0] + ' and ' + inputlist[1]\n    if numusers >= 3:\n        for x in range(numusers - 2):\n            outstring += inputlist[x] + ', '\n        outstring += inputlist[-2] + ' and ' + inputlist[-1]\n    return outstring\n\n```", "choosed_example_idx": [6, 8, 1, 3, 0, 7, 5, 4, 2], "prompt": "Write a function that generates the output from the input.\nInput: dict(inputlist=['a', 'b', 'c', 'd', 'e']), Output: \"'a, b, c, d and e'\"\nInput: dict(inputlist=['Red', 'Green', 'Blue', 'Yellow', 'Orange', 'Purple']), Output: \"'Red, Green, Blue, Yellow, Orange and Purple'\"\nInput: dict(inputlist=['Alice', 'Bob']), Output: \"'Alice and Bob'\"\nInput: dict(inputlist=['Alice', 'Bob', 'Charlie', 'David']), Output: \"'Alice, Bob, Charlie and David'\"\nInput: dict(inputlist=['Alice']), Output: \"'Alice'\"\nInput: dict(inputlist=['John', 'Mary', 'Jane', 'Tom', 'Lily', 'Mike', 'Emily']), Output: \"'John, Mary, Jane, Tom, Lily, Mike and Emily'\"\nInput: dict(inputlist=['One', 'Two', 'Three', 'Four', 'Five', 'Six']), Output: \"'One, Two, Three, Four, Five and Six'\"\nInput: dict(inputlist=['Alice', 'Bob', 'Charlie', 'David', 'Eve']), Output: \"'Alice, Bob, Charlie, David and Eve'\"\nInput: dict(inputlist=['Alice', 'Bob', 'Charlie']), Output: \"'Alice, Bob and Charlie'\"\n\n\nFunction: list_to_string\n", "id": "919782060f5e10aea2b32a6d6e7c454ff0ef1b4e_0"}
{"example_str": "examples = [\n    dict(value=10, percentiles=[0, 5, 10, 15, 20]),\n    dict(value=7, percentiles=[0, 5, 10, 15, 20]),\n    dict(value=25, percentiles=[0, 5, 10, 15, 20]),\n    dict(value=3, percentiles=[0, 2, 4, 6, 8]),\n    dict(value=9, percentiles=[0, 2, 4, 6, 8]),\n    dict(value=1, percentiles=[0, 1, 2, 3, 4]),\n    dict(value=3.5, percentiles=[0, 1, 2, 3, 4]),\n    dict(value=10, percentiles=[5, 10, 15, 20, 25]),\n    dict(value=12, percentiles=[5, 10, 15, 20, 25]),\n    dict(value=0, percentiles=[0, 1, 2, 3, 4]),\n]\nexamples += [\n    dict(value=50, percentiles=[10, 20, 30, 40, 50]),\n    dict(value=25, percentiles=[10, 20, 30, 40, 50]),\n    dict(value=60, percentiles=[10, 20, 30, 40, 50]),\n    dict(value=5, percentiles=[10, 20, 30, 40, 50]),\n    dict(value=100, percentiles=[25, 50, 75, 100]),\n    dict(value=75, percentiles=[25, 50, 75, 100]),\n    dict(value=50, percentiles=[50, 60, 70, 80, 90, 100]),\n    dict(value=85, percentiles=[10, 30, 50, 70, 90]),\n    dict(value=0, percentiles=[0, 10, 20, 30, 40, 50]),\n    dict(value=100, percentiles=[20, 40, 60, 80, 100])\n]\nexamples += [\n    dict(value=10, percentiles=[0, 25, 50, 75, 100]),\n    dict(value=50, percentiles=[10, 20, 30, 40, 50]),\n    dict(value=75, percentiles=[0, 20, 40, 60, 80, 100]),\n    dict(value=30, percentiles=[10, 20, 30, 40, 50]),\n    dict(value=5, percentiles=[1, 2, 3, 4, 5]),\n    dict(value=99, percentiles=[10, 30, 50, 70, 90]),\n    dict(value=0, percentiles=[0, 25, 50, 75, 100]),\n    dict(value=100, percentiles=[25, 50, 75, 100]),\n    dict(value=45, percentiles=[10, 20, 30, 40, 50]),\n    dict(value=60, percentiles=[0, 15, 30, 45, 60, 75, 90])\n]", "code": "def get_percentile_number(value, percentiles):\n    A = 0\n    for n in range(len(percentiles) - 1, 0, -1):\n        if value >= percentiles[n]:\n            A += 1\n    return A\n", "func_name": "get_percentile_number", "exec_status": true, "example_inputs": ["\"{'value': 10, 'percentiles': [0, 5, 10, 15, 20]}\"", "\"{'value': 7, 'percentiles': [0, 5, 10, 15, 20]}\"", "\"{'value': 25, 'percentiles': [0, 5, 10, 15, 20]}\"", "\"{'value': 3, 'percentiles': [0, 2, 4, 6, 8]}\"", "\"{'value': 9, 'percentiles': [0, 2, 4, 6, 8]}\"", "\"{'value': 1, 'percentiles': [0, 1, 2, 3, 4]}\"", "\"{'value': 3.5, 'percentiles': [0, 1, 2, 3, 4]}\"", "\"{'value': 10, 'percentiles': [5, 10, 15, 20, 25]}\"", "\"{'value': 12, 'percentiles': [5, 10, 15, 20, 25]}\"", "\"{'value': 0, 'percentiles': [0, 1, 2, 3, 4]}\""], "example_outputs": [{"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"4\""}, {"return": "\"1\""}, {"return": "\"4\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"4\""}, {"return": "\"1\""}, {"return": "\"4\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"4\""}, {"return": "\"0\""}, {"return": "\"4\""}, {"return": "\"3\""}, {"return": "\"2\""}, {"return": "\"4\""}, {"return": "\"4\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"4\""}], "parsed_inputs": [[["value", "10"], ["percentiles", "[0, 5, 10, 15, 20]"]], [["value", "7"], ["percentiles", "[0, 5, 10, 15, 20]"]], [["value", "25"], ["percentiles", "[0, 5, 10, 15, 20]"]], [["value", "3"], ["percentiles", "[0, 2, 4, 6, 8]"]], [["value", "9"], ["percentiles", "[0, 2, 4, 6, 8]"]], [["value", "1"], ["percentiles", "[0, 1, 2, 3, 4]"]], [["value", "3.5"], ["percentiles", "[0, 1, 2, 3, 4]"]], [["value", "10"], ["percentiles", "[5, 10, 15, 20, 25]"]], [["value", "12"], ["percentiles", "[5, 10, 15, 20, 25]"]], [["value", "0"], ["percentiles", "[0, 1, 2, 3, 4]"]]], "exec_code": "def get_percentile_number(value, percentiles):\n    A = 0\n    for n in range(len(percentiles) - 1, 0, -1):\n        if value >= percentiles[n]:\n            A += 1\n    return A\n", "output": "The function is:\n\n```python\ndef get_percentile_number(value, percentiles):\n    A = 0\n    for n in range(len(percentiles) - 1, 0, -1):\n        if value >= percentiles[n]:\n            A += 1\n    return A\n\n```", "choosed_example_idx": [0, 2, 1, 9], "prompt": "Write a function that generates the output from the input.\n\nFunction: get_percentile_number\nInput: dict(value=10, percentiles=[0, 5, 10, 15, 20]), Output: \"2\"\nInput: dict(value=25, percentiles=[0, 5, 10, 15, 20]), Output: \"4\"\nInput: dict(value=7, percentiles=[0, 5, 10, 15, 20]), Output: \"1\"\nInput: dict(value=0, percentiles=[0, 1, 2, 3, 4]), Output: \"0\"\n\n", "id": "f128c56694341d5b2e2ce8188a3972576d0c6b76_0"}
{"example_str": "examples = [\n    dict(arr=[1, 2, 3, 4, 5], k=7),\n    dict(arr=[10, 20, 30, 40, 50], k=60),\n    dict(arr=[-1, 0, 1, 2, 3], k=2),\n    dict(arr=[1, 1, 1, 1, 1], k=2),\n    dict(arr=[5, 5, 5, 5, 5], k=10),\n    dict(arr=[1, 3, 5, 7, 9], k=12),\n    dict(arr=[2, 4, 6, 8, 10], k=14),\n    dict(arr=[-5, -3, -1, 1, 3], k=-2),\n    dict(arr=[10, 20, 30, 40, 50], k=100),\n    dict(arr=[1, 2, 3, 4, 5], k=11),\n]\nexamples += [\n    dict(arr=[1, 2, 3, 4, 5], k=9),\n    dict(arr=[-5, -2, 0, 1, 3], k=-2),\n    dict(arr=[10, 20, 30, 40, 50], k=70),\n    dict(arr=[1, 1, 1, 1, 2], k=3),\n    dict(arr=[5, 10, 15, 20, 25], k=45),\n    dict(arr=[-10, -5, 0, 5, 10], k=0),\n    dict(arr=[0, 0, 0, 0, 0], k=0),\n    dict(arr=[2, 4, 6, 8, 10], k=8),\n    dict(arr=[100, 200, 300, 400, 500], k=900),\n    dict(arr=[3, 6, 9, 12, 15], k=21)\n]\nexamples += [\n    dict(arr=[1, 2, 3, 4, 5], k=9),\n    dict(arr=[-1, 0, 3, 5, 7], k=6),\n    dict(arr=[10, 20, 30, 40, 50], k=70),\n    dict(arr=[-10, -5, 0, 5, 10], k=0),\n    dict(arr=[2, 4, 6, 8, 10], k=3),\n    dict(arr=[1, 1, 1, 1, 2], k=2),\n    dict(arr=[100, 200, 300, 400, 500], k=800),\n    dict(arr=[-5, -3, -1, 1, 3, 5], k=-8),\n    dict(arr=[0, 0, 0, 0, 0], k=0),\n    dict(arr=[5, 10, 15, 20, 25], k=45)\n]", "code": "def find_pair(arr, k):\n    n = len(arr)\n    i = 0\n    j = n - 1\n    while i < j:\n        sum = arr[i] + arr[j]\n        if sum == k:\n            return True\n        elif sum < k:\n            i += 1\n        elif sum > k:\n            j -= 1\n    return False\n", "func_name": "find_pair", "exec_status": true, "example_inputs": ["\"{'arr': [1, 2, 3, 4, 5], 'k': 7}\"", "\"{'arr': [10, 20, 30, 40, 50], 'k': 60}\"", "\"{'arr': [-1, 0, 1, 2, 3], 'k': 2}\"", "\"{'arr': [1, 1, 1, 1, 1], 'k': 2}\"", "\"{'arr': [5, 5, 5, 5, 5], 'k': 10}\"", "\"{'arr': [1, 3, 5, 7, 9], 'k': 12}\"", "\"{'arr': [2, 4, 6, 8, 10], 'k': 14}\"", "\"{'arr': [-5, -3, -1, 1, 3], 'k': -2}\"", "\"{'arr': [10, 20, 30, 40, 50], 'k': 100}\"", "\"{'arr': [1, 2, 3, 4, 5], 'k': 11}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}], "parsed_inputs": [[["arr", "[1, 2, 3, 4, 5]"], ["k", "7"]], [["arr", "[10, 20, 30, 40, 50]"], ["k", "60"]], [["arr", "[-1, 0, 1, 2, 3]"], ["k", "2"]], [["arr", "[1, 1, 1, 1, 1]"], ["k", "2"]], [["arr", "[5, 5, 5, 5, 5]"], ["k", "10"]], [["arr", "[1, 3, 5, 7, 9]"], ["k", "12"]], [["arr", "[2, 4, 6, 8, 10]"], ["k", "14"]], [["arr", "[-5, -3, -1, 1, 3]"], ["k", "-2"]], [["arr", "[10, 20, 30, 40, 50]"], ["k", "100"]], [["arr", "[1, 2, 3, 4, 5]"], ["k", "11"]]], "exec_code": "def find_pair(arr, k):\n    n = len(arr)\n    i = 0\n    j = n - 1\n    while i < j:\n        sum = arr[i] + arr[j]\n        if sum == k:\n            return True\n        elif sum < k:\n            i += 1\n        elif sum > k:\n            j -= 1\n    return False\n", "output": "The function is:\n\n```python\ndef find_pair(arr, k):\n    n = len(arr)\n    i = 0\n    j = n - 1\n    while i < j:\n        sum = arr[i] + arr[j]\n        if sum == k:\n            return True\n        elif sum < k:\n            i += 1\n        elif sum > k:\n            j -= 1\n    return False\n\n```", "choosed_example_idx": [9, 1, 2], "prompt": "Function: find_pair\nInput: dict(arr=[1, 2, 3, 4, 5], k=11), Output: \"False\"\nInput: dict(arr=[10, 20, 30, 40, 50], k=60), Output: \"True\"\nInput: dict(arr=[-1, 0, 1, 2, 3], k=2), Output: \"True\"\n\n\nWrite a function that generates the output from the input.\n", "id": "71b6e96ef585e8fe002a6b5f1d5940935ab3ce56_0"}
{"example_str": "examples = [\n    dict(alist=[1, 2, 3, 4, 5], item=3),\n    dict(alist=['apple', 'banana', 'cherry'], item='banana'),\n    dict(alist=[1.1, 2.2, 3.3, 4.4], item=2.2),\n    dict(alist=[1, 2, 3, 4, 5], item=6),\n    dict(alist=['apple', 'banana', 'cherry'], item='date'),\n    dict(alist=[1, 2, 3, 4, 5], item=1),\n    dict(alist=['apple', 'banana', 'cherry'], item='apple'),\n    dict(alist=[1.1, 2.2, 3.3, 4.4], item=1.1),\n    dict(alist=[1, 2, 3, 4, 5], item=5),\n    dict(alist=['apple', 'banana', 'cherry'], item='cherry'),\n]\nexamples += [\n    dict(alist=[1, 2, 3, 4, 5], item=3),\n    dict(alist=[1, 2, 3, 4, 5], item=6),\n    dict(alist=['apple', 'banana', 'cherry'], item='banana'),\n    dict(alist=['apple', 'banana', 'cherry'], item='orange'),\n    dict(alist=[10, 20, 30, 40, 50], item=40),\n    dict(alist=[10, 20, 30, 40, 50], item=60),\n    dict(alist=[0.1, 0.2, 0.3, 0.4], item=0.3),\n    dict(alist=[0.1, 0.2, 0.3, 0.4], item=0.5),\n    dict(alist=['a', 'b', 'c', 'd', 'e'], item='c'),\n    dict(alist=['a', 'b', 'c', 'd', 'e'], item='f')\n]\nexamples += [\n    dict(alist=[1, 2, 3, 4, 5], item=3),\n    dict(alist=[1, 2, 3, 4, 5], item=6),\n    dict(alist=['apple', 'banana', 'cherry'], item='banana'),\n    dict(alist=['apple', 'banana', 'cherry'], item='date'),\n    dict(alist=[10, 20, 30, 40, 50], item=40),\n    dict(alist=[10, 20, 30, 40, 50], item=60),\n    dict(alist=['a', 'b', 'c', 'd', 'e'], item='c'),\n    dict(alist=['a', 'b', 'c', 'd', 'e'], item='f'),\n    dict(alist=[True, False, True], item=False),\n    dict(alist=[None, 'None', 'null'], item=None)\n]", "code": "def sequentialSearch(alist, item):\n    pos = 0\n    found = False\n    while pos < len(alist) and not found:\n        if alist[pos] == item:\n            found = True\n            print('Found')\n        else:\n            pos = pos + 1\n    if found == False:\n        print('Not found')\n    return found\n", "func_name": "sequentialSearch", "exec_status": true, "example_inputs": ["\"{'alist': [1, 2, 3, 4, 5], 'item': 3}\"", "\"{'alist': ['apple', 'banana', 'cherry'], 'item': 'banana'}\"", "\"{'alist': [1.1, 2.2, 3.3, 4.4], 'item': 2.2}\"", "\"{'alist': [1, 2, 3, 4, 5], 'item': 6}\"", "\"{'alist': ['apple', 'banana', 'cherry'], 'item': 'date'}\"", "\"{'alist': [1, 2, 3, 4, 5], 'item': 1}\"", "\"{'alist': ['apple', 'banana', 'cherry'], 'item': 'apple'}\"", "\"{'alist': [1.1, 2.2, 3.3, 4.4], 'item': 1.1}\"", "\"{'alist': [1, 2, 3, 4, 5], 'item': 5}\"", "\"{'alist': ['apple', 'banana', 'cherry'], 'item': 'cherry'}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}], "parsed_inputs": [[["alist", "[1, 2, 3, 4, 5]"], ["item", "3"]], [["alist", "['apple', 'banana', 'cherry']"], ["item", "\"banana\""]], [["alist", "[1.1, 2.2, 3.3, 4.4]"], ["item", "2.2"]], [["alist", "[1, 2, 3, 4, 5]"], ["item", "6"]], [["alist", "['apple', 'banana', 'cherry']"], ["item", "\"date\""]], [["alist", "[1, 2, 3, 4, 5]"], ["item", "1"]], [["alist", "['apple', 'banana', 'cherry']"], ["item", "\"apple\""]], [["alist", "[1.1, 2.2, 3.3, 4.4]"], ["item", "1.1"]], [["alist", "[1, 2, 3, 4, 5]"], ["item", "5"]], [["alist", "['apple', 'banana', 'cherry']"], ["item", "\"cherry\""]]], "exec_code": "def sequentialSearch(alist, item):\n    pos = 0\n    found = False\n    while pos < len(alist) and not found:\n        if alist[pos] == item:\n            found = True\n            print('Found')\n        else:\n            pos = pos + 1\n    if found == False:\n        print('Not found')\n    return found\n", "output": "The function is:\n\n```python\ndef sequentialSearch(alist, item):\n    pos = 0\n    found = False\n    while pos < len(alist) and not found:\n        if alist[pos] == item:\n            found = True\n            print('Found')\n        else:\n            pos = pos + 1\n    if found == False:\n        print('Not found')\n    return found\n\n```", "choosed_example_idx": [1, 6, 5, 3], "prompt": "Input: dict(alist=['apple', 'banana', 'cherry'], item=\"banana\"), Output: \"True\"\nInput: dict(alist=['apple', 'banana', 'cherry'], item=\"apple\"), Output: \"True\"\nInput: dict(alist=[1, 2, 3, 4, 5], item=1), Output: \"True\"\nInput: dict(alist=[1, 2, 3, 4, 5], item=6), Output: \"False\"\n\nWrite a function that generates the output from the input.\nFunction: sequentialSearch\n", "id": "6180eac5ad98cecf3d22f37314f5b47115f6133a_0"}
{"example_str": "examples = [\n    dict(target=[5, 2, 8, 1, 9]),\n    dict(target=[1, 2, 3, 4, 5]),\n    dict(target=[5, 5, 5, 5, 5]),\n    dict(target=[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]),\n    dict(target=[1]),\n    dict(target=[]),\n    dict(target=[-5, 2, 8, 1, 9]),\n    dict(target=[5.5, 2.2, 8.8, 1.1, 9.9]),\n    dict(target=['e', 'b', 'a', 'd', 'c']),\n    dict(target=['apple', 'banana', 'cherry', 'date', 'elderberry']),\n]\nexamples += [\n    dict(target=[34, 21, 45, 78, 12]),  # Example with integers\n    dict(target=[-1, -3, -2, -5, -4]),  # Example with negative integers\n    dict(target=[1.5, 2.3, 0.7, 1.8, 2.1]),  # Example with floating-point numbers\n    dict(target=[]),  # Example with an empty list\n    dict(target=[5]),  # Example with a single element\n    dict(target=[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]),  # Example with a reverse-sorted list\n    dict(target=[2, 2, 2, 2, 2]),  # Example with all elements the same\n    dict(target=[100, 200, 300, 400, 500]),  # Example with an already sorted list\n    dict(target=[5, 3, 5, 3, 5]),  # Example with repeating elements\n    dict(target=[-10, 100, 0, 50, -50])  # Example with a mix of negative, positive, and zero\n]\nexamples += [\n    dict(target=[3, 1, 2]),\n    dict(target=[5, 4, 3, 2, 1]),\n    dict(target=[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]),\n    dict(target=[1, 2, 3, 4, 5]),\n    dict(target=[2, 1]),\n    dict(target=[100, 50, 75, 25, 100]),\n    dict(target=[]),\n    dict(target=[-1, -3, -2, 0, 1]),\n    dict(target=[1.5, 2.5, 0.5]),\n    dict(target=['z', 'y', 'x', 'w', 'v'])\n]", "code": "def bubble_sort(target):\n    \"\"\"\n\tbubble_sort algorithm\n\t时间复杂度: 最优时间复杂度 O(n)\n\t时间复杂度: 最坏时间复杂度 O(n^2)\n\t稳定性: 稳定\n\t:param target:\n\t:return: sorted target\n\t\"\"\"\n    flag = 0\n    lens = len(target)\n    for i in range(0, len(target) - 1, 1):\n        for j in range(0, lens - 1, 1):\n            if target[j] > target[j + 1]:\n                target[j], target[j + 1] = target[j + 1], target[j]\n                flag = 1\n            else:\n                pass\n        if flag == 0:\n            break\n        else:\n            lens -= 1\n    return target\n", "func_name": "bubble_sort", "exec_status": true, "example_inputs": ["\"{'target': [5, 2, 8, 1, 9]}\"", "\"{'target': [1, 2, 3, 4, 5]}\"", "\"{'target': [5, 5, 5, 5, 5]}\"", "\"{'target': [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]}\"", "\"{'target': [1]}\"", "\"{'target': []}\"", "\"{'target': [-5, 2, 8, 1, 9]}\"", "\"{'target': [5.5, 2.2, 8.8, 1.1, 9.9]}\"", "\"{'target': ['e', 'b', 'a', 'd', 'c']}\"", "\"{'target': ['apple', 'banana', 'cherry', 'date', 'elderberry']}\""], "example_outputs": [{"return": "\"[1, 2, 5, 8, 9]\""}, {"return": "\"[1, 2, 3, 4, 5]\""}, {"return": "\"[5, 5, 5, 5, 5]\""}, {"return": "\"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\""}, {"return": "\"[1]\""}, {"return": "\"[]\""}, {"return": "\"[-5, 1, 2, 8, 9]\""}, {"return": "\"[1.1, 2.2, 5.5, 8.8, 9.9]\""}, {"return": "\"['a', 'b', 'c', 'd', 'e']\""}, {"return": "\"['apple', 'banana', 'cherry', 'date', 'elderberry']\""}, {"return": "\"[12, 21, 34, 45, 78]\""}, {"return": "\"[-5, -4, -3, -2, -1]\""}, {"return": "\"[0.7, 1.5, 1.8, 2.1, 2.3]\""}, {"return": "\"[]\""}, {"return": "\"[5]\""}, {"return": "\"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\""}, {"return": "\"[2, 2, 2, 2, 2]\""}, {"return": "\"[100, 200, 300, 400, 500]\""}, {"return": "\"[3, 3, 5, 5, 5]\""}, {"return": "\"[-50, -10, 0, 50, 100]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[1, 2, 3, 4, 5]\""}, {"return": "\"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\""}, {"return": "\"[1, 2, 3, 4, 5]\""}, {"return": "\"[1, 2]\""}, {"return": "\"[25, 50, 75, 100, 100]\""}, {"return": "\"[]\""}, {"return": "\"[-3, -2, -1, 0, 1]\""}, {"return": "\"[0.5, 1.5, 2.5]\""}, {"return": "\"['v', 'w', 'x', 'y', 'z']\""}], "parsed_inputs": [[["target", "[5, 2, 8, 1, 9]"]], [["target", "[1, 2, 3, 4, 5]"]], [["target", "[5, 5, 5, 5, 5]"]], [["target", "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"]], [["target", "[1]"]], [["target", "[]"]], [["target", "[-5, 2, 8, 1, 9]"]], [["target", "[5.5, 2.2, 8.8, 1.1, 9.9]"]], [["target", "['e', 'b', 'a', 'd', 'c']"]], [["target", "['apple', 'banana', 'cherry', 'date', 'elderberry']"]]], "exec_code": "def bubble_sort(target):\n    \"\"\"\n\tbubble_sort algorithm\n\t时间复杂度: 最优时间复杂度 O(n)\n\t时间复杂度: 最坏时间复杂度 O(n^2)\n\t稳定性: 稳定\n\t:param target:\n\t:return: sorted target\n\t\"\"\"\n    flag = 0\n    lens = len(target)\n    for i in range(0, len(target) - 1, 1):\n        for j in range(0, lens - 1, 1):\n            if target[j] > target[j + 1]:\n                target[j], target[j + 1] = target[j + 1], target[j]\n                flag = 1\n            else:\n                pass\n        if flag == 0:\n            break\n        else:\n            lens -= 1\n    return target\n", "output": "The function is:\n\n```python\ndef bubble_sort(target):\n    \"\"\"\n\tbubble_sort algorithm\n\t时间复杂度: 最优时间复杂度 O(n)\n\t时间复杂度: 最坏时间复杂度 O(n^2)\n\t稳定性: 稳定\n\t:param target:\n\t:return: sorted target\n\t\"\"\"\n    flag = 0\n    lens = len(target)\n    for i in range(0, len(target) - 1, 1):\n        for j in range(0, lens - 1, 1):\n            if target[j] > target[j + 1]:\n                target[j], target[j + 1] = target[j + 1], target[j]\n                flag = 1\n            else:\n                pass\n        if flag == 0:\n            break\n        else:\n            lens -= 1\n    return target\n\n```", "choosed_example_idx": [5, 6, 1, 4, 7, 8, 2, 0], "prompt": "Write a function that generates the output from the input.\nFunction: bubble_sort\n\nInput: dict(target=[]), Output: \"[]\"\nInput: dict(target=[-5, 2, 8, 1, 9]), Output: \"[-5, 1, 2, 8, 9]\"\nInput: dict(target=[1, 2, 3, 4, 5]), Output: \"[1, 2, 3, 4, 5]\"\nInput: dict(target=[1]), Output: \"[1]\"\nInput: dict(target=[5.5, 2.2, 8.8, 1.1, 9.9]), Output: \"[1.1, 2.2, 5.5, 8.8, 9.9]\"\nInput: dict(target=['e', 'b', 'a', 'd', 'c']), Output: \"['a', 'b', 'c', 'd', 'e']\"\nInput: dict(target=[5, 5, 5, 5, 5]), Output: \"[5, 5, 5, 5, 5]\"\nInput: dict(target=[5, 2, 8, 1, 9]), Output: \"[1, 2, 5, 8, 9]\"\n\n", "id": "adf11cb105de82e1a54ddb7a676a1c4cbc5740cc_0"}
{"example_str": "examples = [\n    dict(bit1=True, bit2=True),\n    dict(bit1=True, bit2=False),\n    dict(bit1=False, bit2=True),\n    dict(bit1=False, bit2=False),\n    dict(bit1=True, bit2=1),\n    dict(bit1=1, bit2=True),\n    dict(bit1=0, bit2=False),\n    dict(bit1=False, bit2=0),\n    dict(bit1=\"True\", bit2=True),\n    dict(bit1=True, bit2=\"False\")\n]\nexamples += [\n    dict(bit1=True, bit2=True),\n    dict(bit1=True, bit2=False),\n    dict(bit1=False, bit2=True),\n    dict(bit1=False, bit2=False),\n    dict(bit1=1, bit2=1),\n    dict(bit1=0, bit2=1),\n    dict(bit1=1, bit2=0),\n    dict(bit1=0, bit2=0),\n    dict(bit1=1, bit2=True),\n    dict(bit1=False, bit2=0)\n]\nexamples += [\n    dict(bit1=True, bit2=True),\n    dict(bit1=True, bit2=False),\n    dict(bit1=False, bit2=True),\n    dict(bit1=False, bit2=False),\n    dict(bit1=True, bit2=True),\n    dict(bit1=False, bit2=False),\n    dict(bit1=True, bit2=False),\n    dict(bit1=False, bit2=True),\n    dict(bit1=True, bit2=True),\n    dict(bit1=False, bit2=False)\n]", "code": "def AND(bit1, bit2):\n    return bit1 and bit2\n", "func_name": "AND", "exec_status": true, "example_inputs": ["\"{'bit1': True, 'bit2': True}\"", "\"{'bit1': True, 'bit2': False}\"", "\"{'bit1': False, 'bit2': True}\"", "\"{'bit1': False, 'bit2': False}\"", "\"{'bit1': True, 'bit2': 1}\"", "\"{'bit1': 1, 'bit2': True}\"", "\"{'bit1': 0, 'bit2': False}\"", "\"{'bit1': False, 'bit2': 0}\"", "\"{'bit1': 'True', 'bit2': True}\"", "\"{'bit1': True, 'bit2': 'False'}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"1\""}, {"return": "\"True\""}, {"return": "\"0\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"'False'\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}], "parsed_inputs": [[["bit1", "True"], ["bit2", "True"]], [["bit1", "True"], ["bit2", "False"]], [["bit1", "False"], ["bit2", "True"]], [["bit1", "False"], ["bit2", "False"]], [["bit1", "True"], ["bit2", "1"]], [["bit1", "1"], ["bit2", "True"]], [["bit1", "0"], ["bit2", "False"]], [["bit1", "False"], ["bit2", "0"]], [["bit1", "\"True\""], ["bit2", "True"]], [["bit1", "True"], ["bit2", "\"False\""]]], "exec_code": "def AND(bit1, bit2):\n    return bit1 and bit2\n", "output": "The function is:\n\n```python\ndef AND(bit1, bit2):\n    return bit1 and bit2\n\n```", "choosed_example_idx": [8, 2, 1, 9], "prompt": "Write a function that generates the output from the input.\n\nFunction: AND\n\n\nInput: dict(bit1=\"True\", bit2=True), Output: \"True\"\nInput: dict(bit1=False, bit2=True), Output: \"False\"\nInput: dict(bit1=True, bit2=False), Output: \"False\"\nInput: dict(bit1=True, bit2=\"False\"), Output: \"'False'\"\n\n", "id": "24b757eab064974b6c9f738b81d69e9ba9279ec0_0"}
{"example_str": "examples = [\n    dict(infile='input.fasta', infile_stem='input'),\n    dict(infile='data/genome.fasta', infile_stem='data/genome'),\n    dict(infile='sequences/sequence1.fasta', infile_stem='sequences/sequence1'),\n    dict(infile='files/file1.fasta.gz', infile_stem='files/file1'),\n    dict(infile='genome_annotations/genome.fasta', infile_stem='genome_annotations/genome'),\n    dict(infile='prokka_input.fasta', infile_stem='prokka_input'),\n    dict(infile='data/sequences.fasta', infile_stem='data/sequences'),\n    dict(infile='input_files/input1.fasta', infile_stem='input_files/input1'),\n    dict(infile='fasta_files/file2.fasta', infile_stem='fasta_files/file2'),\n    dict(infile='annotation_input.fasta', infile_stem='annotation_input'),\n]\nexamples += [\n    dict(infile=\"path/to/input1.fasta\", infile_stem=\"input1.fasta\"),\n    dict(infile=\"data/genome2.fna\", infile_stem=\"genome2.fna\"),\n    dict(infile=\"samples/sample3.gb\", infile_stem=\"sample3.gb\"),\n    dict(infile=\"uploads/upload4.gbk\", infile_stem=\"upload4.gbk\"),\n    dict(infile=\"sequences/seq5.fa\", infile_stem=\"seq5.fa\"),\n    dict(infile=\"example/path6.fasta\", infile_stem=\"path6.fasta\"),\n    dict(infile=\"folder/subfolder7.fna\", infile_stem=\"subfolder7.fna\"),\n    dict(infile=\"test/input8.gb\", infile_stem=\"input8.gb\"),\n    dict(infile=\"genome/files9.gbk\", infile_stem=\"files9.gbk\"),\n    dict(infile=\"path/to/data10.fa\", infile_stem=\"data10.fa\")\n]\nexamples += [\n    dict(infile=\"sample1.fasta\", infile_stem=\"sample1.fasta\"),\n    dict(infile=\"genome_data.fasta\", infile_stem=\"genome_data.fasta\"),\n    dict(infile=\"bacteria_genome.fa\", infile_stem=\"bacteria_genome.fa\"),\n    dict(infile=\"virus_sequence.fasta\", infile_stem=\"virus_sequence.fasta\"),\n    dict(infile=\"sample2.fa\", infile_stem=\"sample2.fa\"),\n    dict(infile=\"experiment1_genome.fasta\", infile_stem=\"experiment1_genome.fasta\"),\n    dict(infile=\"sample3.fasta\", infile_stem=\"sample3.fasta\"),\n    dict(infile=\"pathogen.fa\", infile_stem=\"pathogen.fa\"),\n    dict(infile=\"isolateA.fasta\", infile_stem=\"isolateA.fasta\"),\n    dict(infile=\"sample4_genome.fa\", infile_stem=\"sample4_genome.fa\")\n]", "code": "def prokka(infile, infile_stem):\n    prefix = '.'.join(infile_stem.split('.')[:-1])\n    inputs = [infile]\n    outputs = ['output/' + prefix + '/completed.txt']\n    options = {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime':\n        '03:00:00', 'account': 'ClinicalMicrobio'}\n    spec = (\n        \"\"\"\nprokka --cpu 8 --outdir output/{prefix} --prefix {prefix} {infile} && echo $(date) $SLURM_JOBID {infile} >> output/{prefix}/completed.txt\necho $SLURM_JOBID\n\necho -e \"\n\n\" >> completed.txt\necho $SLURM_JOBID >> completed.txt\njobinfo $SLURM_JOBID >> completed.txt\n\n\n\"\"\"\n        .format(infile=infile, infile_stem=infile_stem, prefix=prefix))\n    return inputs, outputs, options, spec\n", "func_name": "prokka", "exec_status": true, "example_inputs": ["\"{'infile': 'input.fasta', 'infile_stem': 'input'}\"", "\"{'infile': 'data/genome.fasta', 'infile_stem': 'data/genome'}\"", "\"{'infile': 'sequences/sequence1.fasta', 'infile_stem': 'sequences/sequence1'}\"", "\"{'infile': 'files/file1.fasta.gz', 'infile_stem': 'files/file1'}\"", "\"{'infile': 'genome_annotations/genome.fasta', 'infile_stem': 'genome_annotations/genome'}\"", "\"{'infile': 'prokka_input.fasta', 'infile_stem': 'prokka_input'}\"", "\"{'infile': 'data/sequences.fasta', 'infile_stem': 'data/sequences'}\"", "\"{'infile': 'input_files/input1.fasta', 'infile_stem': 'input_files/input1'}\"", "\"{'infile': 'fasta_files/file2.fasta', 'infile_stem': 'fasta_files/file2'}\"", "\"{'infile': 'annotation_input.fasta', 'infile_stem': 'annotation_input'}\""], "example_outputs": [{"return": "\"(['input.fasta'], ['output//completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/ --prefix  input.fasta && echo $(date) $SLURM_JOBID input.fasta >> output//completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['data/genome.fasta'], ['output//completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/ --prefix  data/genome.fasta && echo $(date) $SLURM_JOBID data/genome.fasta >> output//completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['sequences/sequence1.fasta'], ['output//completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/ --prefix  sequences/sequence1.fasta && echo $(date) $SLURM_JOBID sequences/sequence1.fasta >> output//completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['files/file1.fasta.gz'], ['output//completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/ --prefix  files/file1.fasta.gz && echo $(date) $SLURM_JOBID files/file1.fasta.gz >> output//completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['genome_annotations/genome.fasta'], ['output//completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/ --prefix  genome_annotations/genome.fasta && echo $(date) $SLURM_JOBID genome_annotations/genome.fasta >> output//completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['prokka_input.fasta'], ['output//completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/ --prefix  prokka_input.fasta && echo $(date) $SLURM_JOBID prokka_input.fasta >> output//completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['data/sequences.fasta'], ['output//completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/ --prefix  data/sequences.fasta && echo $(date) $SLURM_JOBID data/sequences.fasta >> output//completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['input_files/input1.fasta'], ['output//completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/ --prefix  input_files/input1.fasta && echo $(date) $SLURM_JOBID input_files/input1.fasta >> output//completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['fasta_files/file2.fasta'], ['output//completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/ --prefix  fasta_files/file2.fasta && echo $(date) $SLURM_JOBID fasta_files/file2.fasta >> output//completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['annotation_input.fasta'], ['output//completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/ --prefix  annotation_input.fasta && echo $(date) $SLURM_JOBID annotation_input.fasta >> output//completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['path/to/input1.fasta'], ['output/input1/completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/input1 --prefix input1 path/to/input1.fasta && echo $(date) $SLURM_JOBID path/to/input1.fasta >> output/input1/completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['data/genome2.fna'], ['output/genome2/completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/genome2 --prefix genome2 data/genome2.fna && echo $(date) $SLURM_JOBID data/genome2.fna >> output/genome2/completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['samples/sample3.gb'], ['output/sample3/completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/sample3 --prefix sample3 samples/sample3.gb && echo $(date) $SLURM_JOBID samples/sample3.gb >> output/sample3/completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['uploads/upload4.gbk'], ['output/upload4/completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/upload4 --prefix upload4 uploads/upload4.gbk && echo $(date) $SLURM_JOBID uploads/upload4.gbk >> output/upload4/completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['sequences/seq5.fa'], ['output/seq5/completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/seq5 --prefix seq5 sequences/seq5.fa && echo $(date) $SLURM_JOBID sequences/seq5.fa >> output/seq5/completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['example/path6.fasta'], ['output/path6/completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/path6 --prefix path6 example/path6.fasta && echo $(date) $SLURM_JOBID example/path6.fasta >> output/path6/completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['folder/subfolder7.fna'], ['output/subfolder7/completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/subfolder7 --prefix subfolder7 folder/subfolder7.fna && echo $(date) $SLURM_JOBID folder/subfolder7.fna >> output/subfolder7/completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['test/input8.gb'], ['output/input8/completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/input8 --prefix input8 test/input8.gb && echo $(date) $SLURM_JOBID test/input8.gb >> output/input8/completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['genome/files9.gbk'], ['output/files9/completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/files9 --prefix files9 genome/files9.gbk && echo $(date) $SLURM_JOBID genome/files9.gbk >> output/files9/completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['path/to/data10.fa'], ['output/data10/completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/data10 --prefix data10 path/to/data10.fa && echo $(date) $SLURM_JOBID path/to/data10.fa >> output/data10/completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['sample1.fasta'], ['output/sample1/completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/sample1 --prefix sample1 sample1.fasta && echo $(date) $SLURM_JOBID sample1.fasta >> output/sample1/completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['genome_data.fasta'], ['output/genome_data/completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/genome_data --prefix genome_data genome_data.fasta && echo $(date) $SLURM_JOBID genome_data.fasta >> output/genome_data/completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['bacteria_genome.fa'], ['output/bacteria_genome/completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/bacteria_genome --prefix bacteria_genome bacteria_genome.fa && echo $(date) $SLURM_JOBID bacteria_genome.fa >> output/bacteria_genome/completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['virus_sequence.fasta'], ['output/virus_sequence/completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/virus_sequence --prefix virus_sequence virus_sequence.fasta && echo $(date) $SLURM_JOBID virus_sequence.fasta >> output/virus_sequence/completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['sample2.fa'], ['output/sample2/completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/sample2 --prefix sample2 sample2.fa && echo $(date) $SLURM_JOBID sample2.fa >> output/sample2/completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['experiment1_genome.fasta'], ['output/experiment1_genome/completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/experiment1_genome --prefix experiment1_genome experiment1_genome.fasta && echo $(date) $SLURM_JOBID experiment1_genome.fasta >> output/experiment1_genome/completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['sample3.fasta'], ['output/sample3/completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/sample3 --prefix sample3 sample3.fasta && echo $(date) $SLURM_JOBID sample3.fasta >> output/sample3/completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['pathogen.fa'], ['output/pathogen/completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/pathogen --prefix pathogen pathogen.fa && echo $(date) $SLURM_JOBID pathogen.fa >> output/pathogen/completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['isolateA.fasta'], ['output/isolateA/completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/isolateA --prefix isolateA isolateA.fasta && echo $(date) $SLURM_JOBID isolateA.fasta >> output/isolateA/completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}, {"return": "\"(['sample4_genome.fa'], ['output/sample4_genome/completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/sample4_genome --prefix sample4_genome sample4_genome.fa && echo $(date) $SLURM_JOBID sample4_genome.fa >> output/sample4_genome/completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\""}], "parsed_inputs": [[["infile", "\"input.fasta\""], ["infile_stem", "\"input\""]], [["infile", "\"data/genome.fasta\""], ["infile_stem", "\"data/genome\""]], [["infile", "\"sequences/sequence1.fasta\""], ["infile_stem", "\"sequences/sequence1\""]], [["infile", "\"files/file1.fasta.gz\""], ["infile_stem", "\"files/file1\""]], [["infile", "\"genome_annotations/genome.fasta\""], ["infile_stem", "\"genome_annotations/genome\""]], [["infile", "\"prokka_input.fasta\""], ["infile_stem", "\"prokka_input\""]], [["infile", "\"data/sequences.fasta\""], ["infile_stem", "\"data/sequences\""]], [["infile", "\"input_files/input1.fasta\""], ["infile_stem", "\"input_files/input1\""]], [["infile", "\"fasta_files/file2.fasta\""], ["infile_stem", "\"fasta_files/file2\""]], [["infile", "\"annotation_input.fasta\""], ["infile_stem", "\"annotation_input\""]]], "exec_code": "def prokka(infile, infile_stem):\n    prefix = '.'.join(infile_stem.split('.')[:-1])\n    inputs = [infile]\n    outputs = ['output/' + prefix + '/completed.txt']\n    options = {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime':\n        '03:00:00', 'account': 'ClinicalMicrobio'}\n    spec = (\n        \"\"\"\nprokka --cpu 8 --outdir output/{prefix} --prefix {prefix} {infile} && echo $(date) $SLURM_JOBID {infile} >> output/{prefix}/completed.txt\necho $SLURM_JOBID\n\necho -e \"\n\n\" >> completed.txt\necho $SLURM_JOBID >> completed.txt\njobinfo $SLURM_JOBID >> completed.txt\n\n\n\"\"\"\n        .format(infile=infile, infile_stem=infile_stem, prefix=prefix))\n    return inputs, outputs, options, spec\n", "output": "The function is:\n\n```python\ndef prokka(infile, infile_stem):\n    prefix = '.'.join(infile_stem.split('.')[:-1])\n    inputs = [infile]\n    outputs = ['output/' + prefix + '/completed.txt']\n    options = {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime':\n        '03:00:00', 'account': 'ClinicalMicrobio'}\n    spec = (\n        \"\"\"\nprokka --cpu 8 --outdir output/{prefix} --prefix {prefix} {infile} && echo $(date) $SLURM_JOBID {infile} >> output/{prefix}/completed.txt\necho $SLURM_JOBID\n\necho -e \"\n\n\" >> completed.txt\necho $SLURM_JOBID >> completed.txt\njobinfo $SLURM_JOBID >> completed.txt\n\n\n\"\"\"\n        .format(infile=infile, infile_stem=infile_stem, prefix=prefix))\n    return inputs, outputs, options, spec\n\n```", "choosed_example_idx": [2, 6, 1, 9, 7, 4], "prompt": "Input: dict(infile=\"sequences/sequence1.fasta\", infile_stem=\"sequences/sequence1\"), Output: \"(['sequences/sequence1.fasta'], ['output//completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/ --prefix  sequences/sequence1.fasta && echo $(date) $SLURM_JOBID sequences/sequence1.fasta >> output//completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\"\nInput: dict(infile=\"data/sequences.fasta\", infile_stem=\"data/sequences\"), Output: \"(['data/sequences.fasta'], ['output//completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/ --prefix  data/sequences.fasta && echo $(date) $SLURM_JOBID data/sequences.fasta >> output//completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\"\nInput: dict(infile=\"data/genome.fasta\", infile_stem=\"data/genome\"), Output: \"(['data/genome.fasta'], ['output//completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/ --prefix  data/genome.fasta && echo $(date) $SLURM_JOBID data/genome.fasta >> output//completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\"\nInput: dict(infile=\"annotation_input.fasta\", infile_stem=\"annotation_input\"), Output: \"(['annotation_input.fasta'], ['output//completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/ --prefix  annotation_input.fasta && echo $(date) $SLURM_JOBID annotation_input.fasta >> output//completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\"\nInput: dict(infile=\"input_files/input1.fasta\", infile_stem=\"input_files/input1\"), Output: \"(['input_files/input1.fasta'], ['output//completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/ --prefix  input_files/input1.fasta && echo $(date) $SLURM_JOBID input_files/input1.fasta >> output//completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\"\nInput: dict(infile=\"genome_annotations/genome.fasta\", infile_stem=\"genome_annotations/genome\"), Output: \"(['genome_annotations/genome.fasta'], ['output//completed.txt'], {'nodes': 1, 'cores': 8, 'memory': '2g', 'walltime': '03:00:00', 'account': 'ClinicalMicrobio'}, '\\\\nprokka --cpu 8 --outdir output/ --prefix  genome_annotations/genome.fasta && echo $(date) $SLURM_JOBID genome_annotations/genome.fasta >> output//completed.txt\\\\necho $SLURM_JOBID\\\\n\\\\necho -e \\\"\\\\n\\\\n\\\" >> completed.txt\\\\necho $SLURM_JOBID >> completed.txt\\\\njobinfo $SLURM_JOBID >> completed.txt\\\\n\\\\n\\\\n')\"\n\nFunction: prokka\nWrite a function that generates the output from the input.\n", "id": "7c0c347905a20446c309198cec50c36262e2642f_0"}
{"example_str": "examples = [\n    dict(P=[0, 0], Q=[3, 4]),\n    dict(P=[1, 2], Q=[4, 6]),\n    dict(P=[-1, -1], Q=[1, 1]),\n    dict(P=[10, 20], Q=[15, 25]),\n    dict(P=[0, 5], Q=[0, 10]),\n    dict(P=[3, 3], Q=[6, 6]),\n    dict(P=[-5, 0], Q=[5, 0]),\n    dict(P=[1, 1], Q=[2, 2]),\n    dict(P=[7, 8], Q=[11, 12]),\n    dict(P=[-2, -3], Q=[4, 5]),\n]\nexamples += [\n    dict(P=(0, 0), Q=(1, 1)),\n    dict(P=(2, 3), Q=(5, 7)),\n    dict(P=(-1, -1), Q=(2, 2)),\n    dict(P=(0, 0), Q=(0, 0)),\n    dict(P=(1.5, 2.5), Q=(3.5, 6.5)),\n    dict(P=(-3, -7), Q=(-1, -2)),\n    dict(P=(100, 200), Q=(300, 400)),\n    dict(P=(0.1, 0.2), Q=(0.3, 0.4)),\n    dict(P=(10, 10), Q=(10, 10)),\n    dict(P=(123, 456), Q=(789, 1011))\n]\nexamples += [\n    dict(P=(0, 0), Q=(1, 1)),\n    dict(P=(2, 2), Q=(5, 6)),\n    dict(P=(-1, -1), Q=(1, 1)),\n    dict(P=(10, 10), Q=(10, 10)),\n    dict(P=(0, 0), Q=(0, 5)),\n    dict(P=(3, 4), Q=(7, 1)),\n    dict(P=(-5, -5), Q=(5, 5)),\n    dict(P=(100, 100), Q=(100, 200)),\n    dict(P=(1.5, 2.5), Q=(3.5, 6.5)),\n    dict(P=(0, 0), Q=(0, 0))\n]", "code": "def calculate_distance(P, Q):\n    X = (Q[0] - P[0]) ** 2\n    Y = (Q[1] - P[1]) ** 2\n    return (X + Y) ** 0.5\n", "func_name": "calculate_distance", "exec_status": true, "example_inputs": ["\"{'P': [0, 0], 'Q': [3, 4]}\"", "\"{'P': [1, 2], 'Q': [4, 6]}\"", "\"{'P': [-1, -1], 'Q': [1, 1]}\"", "\"{'P': [10, 20], 'Q': [15, 25]}\"", "\"{'P': [0, 5], 'Q': [0, 10]}\"", "\"{'P': [3, 3], 'Q': [6, 6]}\"", "\"{'P': [-5, 0], 'Q': [5, 0]}\"", "\"{'P': [1, 1], 'Q': [2, 2]}\"", "\"{'P': [7, 8], 'Q': [11, 12]}\"", "\"{'P': [-2, -3], 'Q': [4, 5]}\""], "example_outputs": [{"return": "\"5.0\""}, {"return": "\"5.0\""}, {"return": "\"2.8284271247461903\""}, {"return": "\"7.0710678118654755\""}, {"return": "\"5.0\""}, {"return": "\"4.242640687119285\""}, {"return": "\"10.0\""}, {"return": "\"1.4142135623730951\""}, {"return": "\"5.656854249492381\""}, {"return": "\"10.0\""}, {"return": "\"1.4142135623730951\""}, {"return": "\"5.0\""}, {"return": "\"4.242640687119285\""}, {"return": "\"0.0\""}, {"return": "\"4.47213595499958\""}, {"return": "\"5.385164807134504\""}, {"return": "\"282.842712474619\""}, {"return": "\"0.282842712474619\""}, {"return": "\"0.0\""}, {"return": "\"866.9377140256387\""}, {"return": "\"1.4142135623730951\""}, {"return": "\"5.0\""}, {"return": "\"2.8284271247461903\""}, {"return": "\"0.0\""}, {"return": "\"5.0\""}, {"return": "\"5.0\""}, {"return": "\"14.142135623730951\""}, {"return": "\"100.0\""}, {"return": "\"4.47213595499958\""}, {"return": "\"0.0\""}], "parsed_inputs": [[["P", "[0, 0]"], ["Q", "[3, 4]"]], [["P", "[1, 2]"], ["Q", "[4, 6]"]], [["P", "[-1, -1]"], ["Q", "[1, 1]"]], [["P", "[10, 20]"], ["Q", "[15, 25]"]], [["P", "[0, 5]"], ["Q", "[0, 10]"]], [["P", "[3, 3]"], ["Q", "[6, 6]"]], [["P", "[-5, 0]"], ["Q", "[5, 0]"]], [["P", "[1, 1]"], ["Q", "[2, 2]"]], [["P", "[7, 8]"], ["Q", "[11, 12]"]], [["P", "[-2, -3]"], ["Q", "[4, 5]"]]], "exec_code": "def calculate_distance(P, Q):\n    X = (Q[0] - P[0]) ** 2\n    Y = (Q[1] - P[1]) ** 2\n    return (X + Y) ** 0.5\n", "output": "The function is:\n\n```python\ndef calculate_distance(P, Q):\n    X = (Q[0] - P[0]) ** 2\n    Y = (Q[1] - P[1]) ** 2\n    return (X + Y) ** 0.5\n\n```", "choosed_example_idx": [4, 8, 7], "prompt": "Function: calculate_distance\nWrite a function that generates the output from the input.\nInput: dict(P=[0, 5], Q=[0, 10]), Output: \"5.0\"\nInput: dict(P=[7, 8], Q=[11, 12]), Output: \"5.656854249492381\"\nInput: dict(P=[1, 1], Q=[2, 2]), Output: \"1.4142135623730951\"\n\n", "id": "d996fe65ddad19ab8f9f8a4332ac64f9e80724e3_0"}
{"example_str": "examples = [\n    dict(word='hello', doc='hello world hello'),\n    dict(word='python', doc='I love programming in python'),\n    dict(word='apple', doc='I love eating apple'),\n    dict(word='the', doc='the quick brown fox jumps over the lazy dog'),\n    dict(word='fox', doc='the quick brown fox jumps over the lazy dog'),\n    dict(word='lazy', doc='the quick brown fox jumps over the lazy dog'),\n    dict(word='hello', doc='hello hello hello'),\n    dict(word='world', doc='hello world'),\n    dict(word='programming', doc='I love programming in python'),\n    dict(word='dog', doc='the quick brown fox jumps over the lazy dog')\n]\nexamples += [\n    dict(word=\"apple\", doc=\"apple banana apple cherry\"),\n    dict(word=\"test\", doc=\"this is a test of the test function test\"),\n    dict(word=\"hello\", doc=\"hello hello world\"),\n    dict(word=\" \", doc=\"how many spaces are there\"),\n    dict(word=\"Python\", doc=\"Python is great because Python is readable\"),\n    dict(word=\"data\", doc=\"data in data out but no other data\"),\n    dict(word=\"2023\", doc=\"The year 2023 started on a Sunday\"),\n    dict(word=\"!\", doc=\"Wow! Really! Are you sure!\"),\n    dict(word=\"the\", doc=\"The quick brown fox jumps over the lazy dog\"),\n    dict(word=\"moon\", doc=\"moonlight over the moonlit mountains\")\n]\nexamples += [\n    dict(word='apple', doc='apple banana apple cherry'),\n    dict(word='test', doc='this is a test of the test function test'),\n    dict(word='hello', doc='hello hello who is there'),\n    dict(word='data', doc='data and more data everywhere'),\n    dict(word='Python', doc='Python is great, Python is everywhere'),\n    dict(word='space', doc='space the final frontier'),\n    dict(word='code', doc='we write code, we read code, we live code'),\n    dict(word='function', doc='a function to test another function'),\n    dict(word='example', doc='this is an example of an example'),\n    dict(word='word', doc='word in a word within a word')\n]", "code": "def freq(word, doc):\n    return doc.count(word)\n", "func_name": "freq", "exec_status": true, "example_inputs": ["\"{'word': 'hello', 'doc': 'hello world hello'}\"", "\"{'word': 'python', 'doc': 'I love programming in python'}\"", "\"{'word': 'apple', 'doc': 'I love eating apple'}\"", "\"{'word': 'the', 'doc': 'the quick brown fox jumps over the lazy dog'}\"", "\"{'word': 'fox', 'doc': 'the quick brown fox jumps over the lazy dog'}\"", "\"{'word': 'lazy', 'doc': 'the quick brown fox jumps over the lazy dog'}\"", "\"{'word': 'hello', 'doc': 'hello hello hello'}\"", "\"{'word': 'world', 'doc': 'hello world'}\"", "\"{'word': 'programming', 'doc': 'I love programming in python'}\"", "\"{'word': 'dog', 'doc': 'the quick brown fox jumps over the lazy dog'}\""], "example_outputs": [{"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"2\""}, {"return": "\"4\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"3\""}], "parsed_inputs": [[["word", "\"hello\""], ["doc", "\"hello world hello\""]], [["word", "\"python\""], ["doc", "\"I love programming in python\""]], [["word", "\"apple\""], ["doc", "\"I love eating apple\""]], [["word", "\"the\""], ["doc", "\"the quick brown fox jumps over the lazy dog\""]], [["word", "\"fox\""], ["doc", "\"the quick brown fox jumps over the lazy dog\""]], [["word", "\"lazy\""], ["doc", "\"the quick brown fox jumps over the lazy dog\""]], [["word", "\"hello\""], ["doc", "\"hello hello hello\""]], [["word", "\"world\""], ["doc", "\"hello world\""]], [["word", "\"programming\""], ["doc", "\"I love programming in python\""]], [["word", "\"dog\""], ["doc", "\"the quick brown fox jumps over the lazy dog\""]]], "exec_code": "def freq(word, doc):\n    return doc.count(word)\n", "output": "The function is:\n\n```python\ndef freq(word, doc):\n    return doc.count(word)\n\n```", "choosed_example_idx": [4, 8, 2, 5, 7, 3, 0, 9, 6], "prompt": "Input: dict(word=\"fox\", doc=\"the quick brown fox jumps over the lazy dog\"), Output: \"1\"\nInput: dict(word=\"programming\", doc=\"I love programming in python\"), Output: \"1\"\nInput: dict(word=\"apple\", doc=\"I love eating apple\"), Output: \"1\"\nInput: dict(word=\"lazy\", doc=\"the quick brown fox jumps over the lazy dog\"), Output: \"1\"\nInput: dict(word=\"world\", doc=\"hello world\"), Output: \"1\"\nInput: dict(word=\"the\", doc=\"the quick brown fox jumps over the lazy dog\"), Output: \"2\"\nInput: dict(word=\"hello\", doc=\"hello world hello\"), Output: \"2\"\nInput: dict(word=\"dog\", doc=\"the quick brown fox jumps over the lazy dog\"), Output: \"1\"\nInput: dict(word=\"hello\", doc=\"hello hello hello\"), Output: \"3\"\n\nWrite a function that generates the output from the input.\nFunction: freq\n", "id": "90eef4cf2482598d2e383b33f24c0e7d5afc9a01_0"}
{"example_str": "examples = [\n    dict(sequence=[1, 2, 3, 4, 5], sub_sequence=[1, 3, 5]),\n    dict(sequence=\"hello\", sub_sequence=\"ell\"),\n    dict(sequence=[1, 2, 3, 4, 5], sub_sequence=[6, 7, 8]),\n    dict(sequence=\"abcdefg\", sub_sequence=\"aceg\"),\n    dict(sequence=[1, 2, 3, 4, 5], sub_sequence=[1, 2, 3, 4, 5]),\n    dict(sequence=\"hello\", sub_sequence=\"hlo\"),\n    dict(sequence=[1, 2, 3, 4, 5], sub_sequence=[]),\n    dict(sequence=\"abcdefg\", sub_sequence=\"\"),\n    dict(sequence=[1, 2, 3, 4, 5], sub_sequence=[1, 1, 1]),\n    dict(sequence=\"abcdefg\", sub_sequence=\"xyz\")\n]\nexamples += [\n    dict(sequence=[1, 2, 3, 4], sub_sequence=[1, 3, 4]),\n    dict(sequence=[1, 2, 3, 4], sub_sequence=[2, 4]),\n    dict(sequence=[1, 2, 3, 4], sub_sequence=[4, 3]),\n    dict(sequence=['a', 'b', 'c', 'd'], sub_sequence=['a', 'c']),\n    dict(sequence=['a', 'b', 'c', 'd'], sub_sequence=['b', 'd']),\n    dict(sequence=['a', 'b', 'c', 'd'], sub_sequence=['d', 'b']),\n    dict(sequence=[10, 20, 30, 40], sub_sequence=[10, 30]),\n    dict(sequence=[10, 20, 30, 40], sub_sequence=[20, 40]),\n    dict(sequence=[10, 20, 30, 40], sub_sequence=[40, 30]),\n    dict(sequence=[True, False, True, False], sub_sequence=[True, False])\n]\nexamples += [\n    dict(sequence=[1, 2, 3, 4], sub_sequence=[1, 3]),\n    dict(sequence=[5, 6, 7, 8, 9], sub_sequence=[5, 7, 9]),\n    dict(sequence=['a', 'b', 'c', 'd'], sub_sequence=['a', 'd']),\n    dict(sequence=[10, 20, 30, 40, 50], sub_sequence=[10, 30, 50]),\n    dict(sequence=['x', 'y', 'z'], sub_sequence=['x', 'z']),\n    dict(sequence=[100, 200, 300, 400], sub_sequence=[200, 400]),\n    dict(sequence=['apple', 'banana', 'cherry'], sub_sequence=['apple', 'cherry']),\n    dict(sequence=[0, 1, 2, 3, 4, 5], sub_sequence=[1, 2, 3]),\n    dict(sequence=['cat', 'dog', 'bird', 'fish'], sub_sequence=['cat', 'fish']),\n    dict(sequence=[1, 3, 5, 7, 9], sub_sequence=[3, 7])\n]", "code": "def validateSubsequence(sequence, sub_sequence):\n    seqIndx = 0\n    subseqIndx = 0\n    while seqIndx < len(sequence) and subseqIndx < len(sub_sequence):\n        if sequence[seqIndx] == sub_sequence[subseqIndx]:\n            subseqIndx += 1\n        seqIndx += 1\n    return subseqIndx == len(sub_sequence)\n", "func_name": "validateSubsequence", "exec_status": true, "example_inputs": ["\"{'sequence': [1, 2, 3, 4, 5], 'sub_sequence': [1, 3, 5]}\"", "\"{'sequence': 'hello', 'sub_sequence': 'ell'}\"", "\"{'sequence': [1, 2, 3, 4, 5], 'sub_sequence': [6, 7, 8]}\"", "\"{'sequence': 'abcdefg', 'sub_sequence': 'aceg'}\"", "\"{'sequence': [1, 2, 3, 4, 5], 'sub_sequence': [1, 2, 3, 4, 5]}\"", "\"{'sequence': 'hello', 'sub_sequence': 'hlo'}\"", "\"{'sequence': [1, 2, 3, 4, 5], 'sub_sequence': []}\"", "\"{'sequence': 'abcdefg', 'sub_sequence': ''}\"", "\"{'sequence': [1, 2, 3, 4, 5], 'sub_sequence': [1, 1, 1]}\"", "\"{'sequence': 'abcdefg', 'sub_sequence': 'xyz'}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}], "parsed_inputs": [[["sequence", "[1, 2, 3, 4, 5]"], ["sub_sequence", "[1, 3, 5]"]], [["sequence", "\"hello\""], ["sub_sequence", "\"ell\""]], [["sequence", "[1, 2, 3, 4, 5]"], ["sub_sequence", "[6, 7, 8]"]], [["sequence", "\"abcdefg\""], ["sub_sequence", "\"aceg\""]], [["sequence", "[1, 2, 3, 4, 5]"], ["sub_sequence", "[1, 2, 3, 4, 5]"]], [["sequence", "\"hello\""], ["sub_sequence", "\"hlo\""]], [["sequence", "[1, 2, 3, 4, 5]"], ["sub_sequence", "[]"]], [["sequence", "\"abcdefg\""], ["sub_sequence", "\"\""]], [["sequence", "[1, 2, 3, 4, 5]"], ["sub_sequence", "[1, 1, 1]"]], [["sequence", "\"abcdefg\""], ["sub_sequence", "\"xyz\""]]], "exec_code": "def validateSubsequence(sequence, sub_sequence):\n    seqIndx = 0\n    subseqIndx = 0\n    while seqIndx < len(sequence) and subseqIndx < len(sub_sequence):\n        if sequence[seqIndx] == sub_sequence[subseqIndx]:\n            subseqIndx += 1\n        seqIndx += 1\n    return subseqIndx == len(sub_sequence)\n", "output": "The function is:\n\n```python\ndef validateSubsequence(sequence, sub_sequence):\n    seqIndx = 0\n    subseqIndx = 0\n    while seqIndx < len(sequence) and subseqIndx < len(sub_sequence):\n        if sequence[seqIndx] == sub_sequence[subseqIndx]:\n            subseqIndx += 1\n        seqIndx += 1\n    return subseqIndx == len(sub_sequence)\n\n```", "choosed_example_idx": [3, 1, 5, 8], "prompt": "Write a function that generates the output from the input.\nFunction: validateSubsequence\nInput: dict(sequence=\"abcdefg\", sub_sequence=\"aceg\"), Output: \"True\"\nInput: dict(sequence=\"hello\", sub_sequence=\"ell\"), Output: \"True\"\nInput: dict(sequence=\"hello\", sub_sequence=\"hlo\"), Output: \"True\"\nInput: dict(sequence=[1, 2, 3, 4, 5], sub_sequence=[1, 1, 1]), Output: \"False\"\n\n", "id": "1681845a8dd7349480e5b42a6e9ae3c0637b0cd6_0"}
{"example_str": "examples = [\n    dict(n=2, k=1),\n    dict(n=3, k=2),\n    dict(n=4, k=3),\n    dict(n=5, k=2),\n    dict(n=6, k=3),\n    dict(n=7, k=4),\n    dict(n=8, k=5),\n    dict(n=9, k=3),\n    dict(n=10, k=4),\n    dict(n=11, k=5),\n]\nexamples += [\n    dict(n=5, k=2),\n    dict(n=10, k=3),\n    dict(n=15, k=4),\n    dict(n=20, k=5),\n    dict(n=25, k=6),\n    dict(n=30, k=7),\n    dict(n=8, k=3),\n    dict(n=12, k=4),\n    dict(n=18, k=5),\n    dict(n=22, k=6)\n]\nexamples += [\n    dict(n=5, k=2),\n    dict(n=10, k=3),\n    dict(n=15, k=4),\n    dict(n=20, k=5),\n    dict(n=25, k=6),\n    dict(n=30, k=7),\n    dict(n=35, k=8),\n    dict(n=40, k=9),\n    dict(n=45, k=10),\n    dict(n=50, k=11)\n]", "code": "def climb(n: int, k: int) ->int:\n    dp = [0] * k\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, k):\n            if i < j:\n                break\n            dp[i % k] += dp[(i - j) % k]\n    return dp[n % k]\n", "func_name": "climb", "exec_status": true, "example_inputs": ["\"{'n': 2, 'k': 1}\"", "\"{'n': 3, 'k': 2}\"", "\"{'n': 4, 'k': 3}\"", "\"{'n': 5, 'k': 2}\"", "\"{'n': 6, 'k': 3}\"", "\"{'n': 7, 'k': 4}\"", "\"{'n': 8, 'k': 5}\"", "\"{'n': 9, 'k': 3}\"", "\"{'n': 10, 'k': 4}\"", "\"{'n': 11, 'k': 5}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"7\""}, {"return": "\"8\""}, {"return": "\"24\""}, {"return": "\"56\""}, {"return": "\"120\""}, {"return": "\"149\""}, {"return": "\"401\""}, {"return": "\"912\""}, {"return": "\"8\""}, {"return": "\"274\""}, {"return": "\"10671\""}, {"return": "\"400096\""}, {"return": "\"14247536\""}, {"return": "\"487641600\""}, {"return": "\"81\""}, {"return": "\"1490\""}, {"return": "\"103519\""}, {"return": "\"1825529\""}, {"return": "\"8\""}, {"return": "\"274\""}, {"return": "\"10671\""}, {"return": "\"400096\""}, {"return": "\"14247536\""}, {"return": "\"487641600\""}, {"return": "\"16252704512\""}, {"return": "\"532707885057\""}, {"return": "\"17284306235401\""}, {"return": "\"557465978273842\""}], "parsed_inputs": [[["n", "2"], ["k", "1"]], [["n", "3"], ["k", "2"]], [["n", "4"], ["k", "3"]], [["n", "5"], ["k", "2"]], [["n", "6"], ["k", "3"]], [["n", "7"], ["k", "4"]], [["n", "8"], ["k", "5"]], [["n", "9"], ["k", "3"]], [["n", "10"], ["k", "4"]], [["n", "11"], ["k", "5"]]], "exec_code": "def climb(n: int, k: int) ->int:\n    dp = [0] * k\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, k):\n            if i < j:\n                break\n            dp[i % k] += dp[(i - j) % k]\n    return dp[n % k]\n", "output": "The function is:\n\n```python\ndef climb(n: int, k: int) ->int:\n    dp = [0] * k\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, k):\n            if i < j:\n                break\n            dp[i % k] += dp[(i - j) % k]\n    return dp[n % k]\n\n```", "choosed_example_idx": [3, 8, 2, 9, 7, 6, 4], "prompt": "Function: climb\nInput: dict(n=5, k=2), Output: \"8\"\nInput: dict(n=10, k=4), Output: \"401\"\nInput: dict(n=4, k=3), Output: \"7\"\nInput: dict(n=11, k=5), Output: \"912\"\nInput: dict(n=9, k=3), Output: \"149\"\nInput: dict(n=8, k=5), Output: \"120\"\nInput: dict(n=6, k=3), Output: \"24\"\n\nWrite a function that generates the output from the input.\n", "id": "122e5e9141047113ed93cd33a6144d3df16a451b_0"}
{"example_str": "examples = [\n    dict(d={'a': 1, 'b': 2}, separator=': '),\n    dict(d={'name': 'John', 'age': 30}, separator=' - '),\n    dict(d={'x': 10, 'y': 20}, separator=', '),\n    dict(d={'fruit': 'apple', 'color': 'red'}, separator=' => '),\n    dict(d={'city': 'New York', 'state': 'NY'}, separator=' / '),\n    dict(d={'book': 'To Kill a Mockingbird', 'author': 'Harper Lee'}, separator=' by '),\n    dict(d={'car': 'Toyota', 'model': 'Camry'}, separator=' - '),\n    dict(d={'country': 'USA', 'capital': 'Washington D.C.'}, separator=' : '),\n    dict(d={'sport': 'football', 'team': 'Patriots'}, separator=' - '),\n    dict(d={'movie': 'The Shawshank Redemption', 'year': 1994}, separator=' released in '),\n]\nexamples += [\n    dict(d={'apple': 1, 'banana': 2, 'cherry': 3}, separator=': '),\n    dict(d={'key1': 'value1', 'key2': 'value2'}, separator=' = '),\n    dict(d={1: 'one', 2: 'two', 3: 'three'}, separator=' -> '),\n    dict(d={}, separator=' - '),\n    dict(d={'a': 100, 'b': 200}, separator=' > '),\n    dict(d={'name': 'Alice', 'age': 30}, separator=': '),\n    dict(d={'x': 5.5, 'y': 10.1}, separator='='),\n    dict(d={'USA': 'Washington', 'France': 'Paris'}, separator=': '),\n    dict(d={'hello': 'world', 'foo': 'bar', 'baz': 'qux'}, separator=' -> '),\n    dict(d={True: False, False: True}, separator=' equals ')\n]\nexamples += [\n    dict(d={'key1': 'value1', 'key2': 'value2'}, separator=': '),\n    dict(d={'name': 'Alice', 'age': 30}, separator=' = '),\n    dict(d={1: 100, 2: 200}, separator=' -> '),\n    dict(d={}, separator=' - '),\n    dict(d={'a': 1, 'b': 2, 'c': 3}, separator='=>'),\n    dict(d={'x': 10, 'y': 20, 'z': 30}, separator=':'),\n    dict(d={'apple': 'red', 'banana': 'yellow'}, separator=' is '),\n    dict(d={'true': True, 'false': False}, separator='='),\n    dict(d={'pi': 3.14, 'e': 2.71}, separator=' approx '),\n    dict(d={'hello': 'world', 'foo': 'bar'}, separator=' - ')\n]", "code": "def print_dictionary(d, separator):\n    s = ''\n    first = True\n    for k, v in sorted(d.items()):\n        if not first:\n            s += ', '\n        s += u'{0}{1}{2}'.format(k, separator, v)\n        first = False\n    return s\n", "func_name": "print_dictionary", "exec_status": true, "example_inputs": ["\"{'d': {'a': 1, 'b': 2}, 'separator': ': '}\"", "\"{'d': {'name': 'John', 'age': 30}, 'separator': ' - '}\"", "\"{'d': {'x': 10, 'y': 20}, 'separator': ', '}\"", "\"{'d': {'fruit': 'apple', 'color': 'red'}, 'separator': ' => '}\"", "\"{'d': {'city': 'New York', 'state': 'NY'}, 'separator': ' / '}\"", "\"{'d': {'book': 'To Kill a Mockingbird', 'author': 'Harper Lee'}, 'separator': ' by '}\"", "\"{'d': {'car': 'Toyota', 'model': 'Camry'}, 'separator': ' - '}\"", "\"{'d': {'country': 'USA', 'capital': 'Washington D.C.'}, 'separator': ' : '}\"", "\"{'d': {'sport': 'football', 'team': 'Patriots'}, 'separator': ' - '}\"", "\"{'d': {'movie': 'The Shawshank Redemption', 'year': 1994}, 'separator': ' released in '}\""], "example_outputs": [{"return": "\"'a: 1, b: 2'\""}, {"return": "\"'age - 30, name - John'\""}, {"return": "\"'x, 10, y, 20'\""}, {"return": "\"'color => red, fruit => apple'\""}, {"return": "\"'city / New York, state / NY'\""}, {"return": "\"'author by Harper Lee, book by To Kill a Mockingbird'\""}, {"return": "\"'car - Toyota, model - Camry'\""}, {"return": "\"'capital : Washington D.C., country : USA'\""}, {"return": "\"'sport - football, team - Patriots'\""}, {"return": "\"'movie released in The Shawshank Redemption, year released in 1994'\""}, {"return": "\"'apple: 1, banana: 2, cherry: 3'\""}, {"return": "\"'key1 = value1, key2 = value2'\""}, {"return": "\"'1 -> one, 2 -> two, 3 -> three'\""}, {"return": "\"''\""}, {"return": "\"'a > 100, b > 200'\""}, {"return": "\"'age: 30, name: Alice'\""}, {"return": "\"'x=5.5, y=10.1'\""}, {"return": "\"'France: Paris, USA: Washington'\""}, {"return": "\"'baz -> qux, foo -> bar, hello -> world'\""}, {"return": "\"'False equals True, True equals False'\""}, {"return": "\"'key1: value1, key2: value2'\""}, {"return": "\"'age = 30, name = Alice'\""}, {"return": "\"'1 -> 100, 2 -> 200'\""}, {"return": "\"''\""}, {"return": "\"'a=>1, b=>2, c=>3'\""}, {"return": "\"'x:10, y:20, z:30'\""}, {"return": "\"'apple is red, banana is yellow'\""}, {"return": "\"'false=False, true=True'\""}, {"return": "\"'e approx 2.71, pi approx 3.14'\""}, {"return": "\"'foo - bar, hello - world'\""}], "parsed_inputs": [[["d", "{'a': 1, 'b': 2}"], ["separator", "\": \""]], [["d", "{'name': 'John', 'age': 30}"], ["separator", "\" - \""]], [["d", "{'x': 10, 'y': 20}"], ["separator", "\", \""]], [["d", "{'fruit': 'apple', 'color': 'red'}"], ["separator", "\" => \""]], [["d", "{'city': 'New York', 'state': 'NY'}"], ["separator", "\" / \""]], [["d", "{'book': 'To Kill a Mockingbird', 'author': 'Harper Lee'}"], ["separator", "\" by \""]], [["d", "{'car': 'Toyota', 'model': 'Camry'}"], ["separator", "\" - \""]], [["d", "{'country': 'USA', 'capital': 'Washington D.C.'}"], ["separator", "\" : \""]], [["d", "{'sport': 'football', 'team': 'Patriots'}"], ["separator", "\" - \""]], [["d", "{'movie': 'The Shawshank Redemption', 'year': 1994}"], ["separator", "\" released in \""]]], "exec_code": "def print_dictionary(d, separator):\n    s = ''\n    first = True\n    for k, v in sorted(d.items()):\n        if not first:\n            s += ', '\n        s += u'{0}{1}{2}'.format(k, separator, v)\n        first = False\n    return s\n", "output": "The function is:\n\n```python\ndef print_dictionary(d, separator):\n    s = ''\n    first = True\n    for k, v in sorted(d.items()):\n        if not first:\n            s += ', '\n        s += u'{0}{1}{2}'.format(k, separator, v)\n        first = False\n    return s\n\n```", "choosed_example_idx": [4, 7, 6, 3], "prompt": "Input: dict(d={'city': 'New York', 'state': 'NY'}, separator=\" / \"), Output: \"'city / New York, state / NY'\"\nInput: dict(d={'country': 'USA', 'capital': 'Washington D.C.'}, separator=\" : \"), Output: \"'capital : Washington D.C., country : USA'\"\nInput: dict(d={'car': 'Toyota', 'model': 'Camry'}, separator=\" - \"), Output: \"'car - Toyota, model - Camry'\"\nInput: dict(d={'fruit': 'apple', 'color': 'red'}, separator=\" => \"), Output: \"'color => red, fruit => apple'\"\n\n\nWrite a function that generates the output from the input.\nFunction: print_dictionary\n", "id": "4ca07760315519037acb8f813ed7e2ec8c3b0fc5_0"}
{"example_str": "examples = [\n    dict(f=-5),\n    dict(f=0),\n    dict(f=5),\n    dict(f=-3.14),\n    dict(f=0.0),\n    dict(f=10.5),\n    dict(f=-1),\n    dict(f=1),\n    dict(f=-0.1),\n    dict(f=0.01),\n]\nexamples += [\n    dict(f=-10),\n    dict(f=0),\n    dict(f=10),\n    dict(f=-3.5),\n    dict(f=2.7),\n    dict(f=-0.0001),\n    dict(f=100),\n    dict(f=-100),\n    dict(f=0.9999),\n    dict(f=-1.2345)\n]\nexamples += [\n    dict(f=-10),\n    dict(f=0),\n    dict(f=10),\n    dict(f=-5.5),\n    dict(f=5.5),\n    dict(f=-0.0001),\n    dict(f=0.0001),\n    dict(f=-999),\n    dict(f=999),\n    dict(f=-1)\n]", "code": "def sgn(f):\n    return -1 if f < 0 else 1\n", "func_name": "sgn", "exec_status": true, "example_inputs": ["\"{'f': -5}\"", "\"{'f': 0}\"", "\"{'f': 5}\"", "\"{'f': -3.14}\"", "\"{'f': 0.0}\"", "\"{'f': 10.5}\"", "\"{'f': -1}\"", "\"{'f': 1}\"", "\"{'f': -0.1}\"", "\"{'f': 0.01}\""], "example_outputs": [{"return": "\"-1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"-1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"-1\""}, {"return": "\"1\""}, {"return": "\"-1\""}, {"return": "\"1\""}, {"return": "\"-1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"-1\""}, {"return": "\"1\""}, {"return": "\"-1\""}, {"return": "\"1\""}, {"return": "\"-1\""}, {"return": "\"1\""}, {"return": "\"-1\""}, {"return": "\"-1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"-1\""}, {"return": "\"1\""}, {"return": "\"-1\""}, {"return": "\"1\""}, {"return": "\"-1\""}, {"return": "\"1\""}, {"return": "\"-1\""}], "parsed_inputs": [[["f", "-5"]], [["f", "0"]], [["f", "5"]], [["f", "-3.14"]], [["f", "0.0"]], [["f", "10.5"]], [["f", "-1"]], [["f", "1"]], [["f", "-0.1"]], [["f", "0.01"]]], "exec_code": "def sgn(f):\n    return -1 if f < 0 else 1\n", "output": "The function is:\n\n```python\ndef sgn(f):\n    return -1 if f < 0 else 1\n\n```", "choosed_example_idx": [3, 5, 7], "prompt": "Input: dict(f=-3.14), Output: \"-1\"\nInput: dict(f=10.5), Output: \"1\"\nInput: dict(f=1), Output: \"1\"\n\n\n\nWrite a function that generates the output from the input.\n\n\nFunction: sgn\n", "id": "c99c2a956bcfa624f3834b5ad3e924cf82489875_0"}
{"example_str": "examples = [\n    dict(shoes_size=['7', '7.5', '8']),\n    dict(shoes_size=['9', '9.5', '9']),\n    dict(shoes_size=['7', '7', '7', '7']),\n    dict(shoes_size=['8.5', '8.5', '8.5']),\n    dict(shoes_size=['7', '7.5', '8', '8.5', '9', '9.5']),\n    dict(shoes_size=['9.5', '9.5', '9.5', '9.5']),\n    dict(shoes_size=['7.5', '7.5', '7.5']),\n    dict(shoes_size=['8', '8', '8', '8']),\n    dict(shoes_size=['9', '8.5', '8', '7.5', '7']),\n    dict(shoes_size=[]),\n]\nexamples += [\n    dict(shoes_size=[]),\n    dict(shoes_size=['7', '7', '8', '9.5', '9', '9']),\n    dict(shoes_size=['7.5', '8.5', '9', '9.5']),\n    dict(shoes_size=['8', '8', '8', '8', '8']),\n    dict(shoes_size=['7.5', '7.5', '7.5']),\n    dict(shoes_size=['9.5', '9.5', '9.5', '9.5', '9.5']),\n    dict(shoes_size=['7', '8', '9', '9.5', '7', '8', '9', '9.5']),\n    dict(shoes_size=['8.5', '8.5', '8.5', '8.5', '8.5', '8.5']),\n    dict(shoes_size=['7', '7', '7', '7', '7', '7', '7']),\n    dict(shoes_size=['7', '7.5', '8', '8.5', '9', '9.5', '7', '7.5', '8', '8.5', '9', '9.5'])\n]\nexamples += [\n    dict(shoes_size=['7', '8', '9', '9.5', '7', '8.5']),\n    dict(shoes_size=['7.5', '7.5', '8', '9', '9', '9.5']),\n    dict(shoes_size=['8', '8', '8', '8', '8', '8']),\n    dict(shoes_size=['9.5', '9.5', '9.5', '9.5']),\n    dict(shoes_size=[]),\n    dict(shoes_size=['7', '7', '7', '7', '7']),\n    dict(shoes_size=['8.5', '9', '9.5', '7', '7.5', '8']),\n    dict(shoes_size=['9', '9', '9', '9', '9', '9']),\n    dict(shoes_size=['7.5', '8.5', '9.5', '7.5', '8.5', '9.5']),\n    dict(shoes_size=['7', '8', '9', '7', '8', '9'])\n]", "code": "def solution(shoes_size):\n    answer = []\n    answer = [(0) for _ in range(6)]\n    for s in shoes_size:\n        if s == '7':\n            answer[0] += 1\n        elif s == '7.5':\n            answer[1] += 1\n        elif s == '8':\n            answer[2] += 1\n        elif s == '8.5':\n            answer[3] += 1\n        elif s == '9':\n            answer[4] += 1\n        elif s == '9.5':\n            answer[5] += 1\n    return answer\n", "func_name": "solution", "exec_status": true, "example_inputs": ["\"{'shoes_size': ['7', '7.5', '8']}\"", "\"{'shoes_size': ['9', '9.5', '9']}\"", "\"{'shoes_size': ['7', '7', '7', '7']}\"", "\"{'shoes_size': ['8.5', '8.5', '8.5']}\"", "\"{'shoes_size': ['7', '7.5', '8', '8.5', '9', '9.5']}\"", "\"{'shoes_size': ['9.5', '9.5', '9.5', '9.5']}\"", "\"{'shoes_size': ['7.5', '7.5', '7.5']}\"", "\"{'shoes_size': ['8', '8', '8', '8']}\"", "\"{'shoes_size': ['9', '8.5', '8', '7.5', '7']}\"", "\"{'shoes_size': []}\""], "example_outputs": [{"return": "\"[1, 1, 1, 0, 0, 0]\""}, {"return": "\"[0, 0, 0, 0, 2, 1]\""}, {"return": "\"[4, 0, 0, 0, 0, 0]\""}, {"return": "\"[0, 0, 0, 3, 0, 0]\""}, {"return": "\"[1, 1, 1, 1, 1, 1]\""}, {"return": "\"[0, 0, 0, 0, 0, 4]\""}, {"return": "\"[0, 3, 0, 0, 0, 0]\""}, {"return": "\"[0, 0, 4, 0, 0, 0]\""}, {"return": "\"[1, 1, 1, 1, 1, 0]\""}, {"return": "\"[0, 0, 0, 0, 0, 0]\""}, {"return": "\"[0, 0, 0, 0, 0, 0]\""}, {"return": "\"[2, 0, 1, 0, 2, 1]\""}, {"return": "\"[0, 1, 0, 1, 1, 1]\""}, {"return": "\"[0, 0, 5, 0, 0, 0]\""}, {"return": "\"[0, 3, 0, 0, 0, 0]\""}, {"return": "\"[0, 0, 0, 0, 0, 5]\""}, {"return": "\"[2, 0, 2, 0, 2, 2]\""}, {"return": "\"[0, 0, 0, 6, 0, 0]\""}, {"return": "\"[7, 0, 0, 0, 0, 0]\""}, {"return": "\"[2, 2, 2, 2, 2, 2]\""}, {"return": "\"[2, 0, 1, 1, 1, 1]\""}, {"return": "\"[0, 2, 1, 0, 2, 1]\""}, {"return": "\"[0, 0, 6, 0, 0, 0]\""}, {"return": "\"[0, 0, 0, 0, 0, 4]\""}, {"return": "\"[0, 0, 0, 0, 0, 0]\""}, {"return": "\"[5, 0, 0, 0, 0, 0]\""}, {"return": "\"[1, 1, 1, 1, 1, 1]\""}, {"return": "\"[0, 0, 0, 0, 6, 0]\""}, {"return": "\"[0, 2, 0, 2, 0, 2]\""}, {"return": "\"[2, 0, 2, 0, 2, 0]\""}], "parsed_inputs": [[["shoes_size", "['7', '7.5', '8']"]], [["shoes_size", "['9', '9.5', '9']"]], [["shoes_size", "['7', '7', '7', '7']"]], [["shoes_size", "['8.5', '8.5', '8.5']"]], [["shoes_size", "['7', '7.5', '8', '8.5', '9', '9.5']"]], [["shoes_size", "['9.5', '9.5', '9.5', '9.5']"]], [["shoes_size", "['7.5', '7.5', '7.5']"]], [["shoes_size", "['8', '8', '8', '8']"]], [["shoes_size", "['9', '8.5', '8', '7.5', '7']"]], [["shoes_size", "[]"]]], "exec_code": "def solution(shoes_size):\n    answer = []\n    answer = [(0) for _ in range(6)]\n    for s in shoes_size:\n        if s == '7':\n            answer[0] += 1\n        elif s == '7.5':\n            answer[1] += 1\n        elif s == '8':\n            answer[2] += 1\n        elif s == '8.5':\n            answer[3] += 1\n        elif s == '9':\n            answer[4] += 1\n        elif s == '9.5':\n            answer[5] += 1\n    return answer\n", "output": "The function is:\n\n```python\ndef solution(shoes_size):\n    answer = []\n    answer = [(0) for _ in range(6)]\n    for s in shoes_size:\n        if s == '7':\n            answer[0] += 1\n        elif s == '7.5':\n            answer[1] += 1\n        elif s == '8':\n            answer[2] += 1\n        elif s == '8.5':\n            answer[3] += 1\n        elif s == '9':\n            answer[4] += 1\n        elif s == '9.5':\n            answer[5] += 1\n    return answer\n\n```", "choosed_example_idx": [9, 3, 8, 0, 4, 1], "prompt": "Write a function that generates the output from the input.\nInput: dict(shoes_size=[]), Output: \"[0, 0, 0, 0, 0, 0]\"\nInput: dict(shoes_size=['8.5', '8.5', '8.5']), Output: \"[0, 0, 0, 3, 0, 0]\"\nInput: dict(shoes_size=['9', '8.5', '8', '7.5', '7']), Output: \"[1, 1, 1, 1, 1, 0]\"\nInput: dict(shoes_size=['7', '7.5', '8']), Output: \"[1, 1, 1, 0, 0, 0]\"\nInput: dict(shoes_size=['7', '7.5', '8', '8.5', '9', '9.5']), Output: \"[1, 1, 1, 1, 1, 1]\"\nInput: dict(shoes_size=['9', '9.5', '9']), Output: \"[0, 0, 0, 0, 2, 1]\"\n\nFunction: solution\n", "id": "da7f2ccce155139f9cc1624bd4f50a4f0750b43e_0"}
{"example_str": "examples = [\n    dict(params={}, field_list=[]),\n    dict(params={'a': 1}, field_list=['b', 'c']),\n    dict(params={'x': 10, 'y': 20}, field_list=('x', 'y')),\n    dict(params={}, field_list=['field1', 'field2', 'field3']),\n    dict(params={'name': 'John'}, field_list=['age', 'city']),\n    dict(params={'id': 1, 'name': 'Product1'}, field_list=['price', 'description']),\n    dict(params={}, field_list=('field_a', 'field_b')),\n    dict(params={'key1': 'value1', 'key2': 'value2'}, field_list=['field1', 'field2']),\n    dict(params={'user': 'admin'}, field_list=['password', 'email']),\n    dict(params={'category': 'electronics'}, field_list=['product', 'price']),\n]\nexamples += [\n    dict(params={'user_id': 1, 'active': True}, field_list=['name', 'email']),\n    dict(params={'session_id': 'xyz', 'timeout': 30}, field_list='id'),\n    dict(params={}, field_list=['age', 'gender', 'location']),\n    dict(params={'page': 2, 'limit': 10}, field_list='date_created'),\n    dict(params={'sort_by': 'name', 'order': 'asc'}, field_list=['first_name', 'last_name']),\n    dict(params={'filter': 'new'}, field_list='status'),\n    dict(params={'user_id': 5, 'verified': False}, field_list=['email', 'phone']),\n    dict(params={'country': 'US', 'language': 'en'}, field_list=['city', 'state']),\n    dict(params={'max_results': 50}, field_list='score'),\n    dict(params={'query': 'select *', 'cache': True}, field_list=['query_time', 'result_count'])\n]\nexamples += [\n    dict(params={'user': 'Alice', 'age': 30}, field_list='name,age'),\n    dict(params={'session_id': 'xyz123'}, field_list=['user_id', 'session_start', 'session_end']),\n    dict(params={}, field_list='*'),\n    dict(params={'query': 'select * from users'}, field_list='user_id'),\n    dict(params={'user': 'Bob', 'permissions': ['read', 'write']}, field_list=['permissions']),\n    dict(params={'product_id': 101, 'category': 'electronics'}, field_list='product_name,price,category'),\n    dict(params={'order_id': 2001}, field_list='order_id,customer_id,status'),\n    dict(params={'active': True, 'admin': False}, field_list='active'),\n    dict(params={'country': 'USA', 'state': 'CA'}, field_list='state'),\n    dict(params={'date': '2023-01-01'}, field_list='date,events')\n]", "code": "def build_field_list(params, field_list):\n    new_params = {'field_list': field_list}\n    new_params.update(params)\n    return new_params\n", "func_name": "build_field_list", "exec_status": true, "example_inputs": ["\"{'params': {}, 'field_list': []}\"", "\"{'params': {'a': 1}, 'field_list': ['b', 'c']}\"", "\"{'params': {'x': 10, 'y': 20}, 'field_list': ('x', 'y')}\"", "\"{'params': {}, 'field_list': ['field1', 'field2', 'field3']}\"", "\"{'params': {'name': 'John'}, 'field_list': ['age', 'city']}\"", "\"{'params': {'id': 1, 'name': 'Product1'}, 'field_list': ['price', 'description']}\"", "\"{'params': {}, 'field_list': ('field_a', 'field_b')}\"", "\"{'params': {'key1': 'value1', 'key2': 'value2'}, 'field_list': ['field1', 'field2']}\"", "\"{'params': {'user': 'admin'}, 'field_list': ['password', 'email']}\"", "\"{'params': {'category': 'electronics'}, 'field_list': ['product', 'price']}\""], "example_outputs": [{"return": "\"{'field_list': []}\""}, {"return": "\"{'field_list': ['b', 'c'], 'a': 1}\""}, {"return": "\"{'field_list': ('x', 'y'), 'x': 10, 'y': 20}\""}, {"return": "\"{'field_list': ['field1', 'field2', 'field3']}\""}, {"return": "\"{'field_list': ['age', 'city'], 'name': 'John'}\""}, {"return": "\"{'field_list': ['price', 'description'], 'id': 1, 'name': 'Product1'}\""}, {"return": "\"{'field_list': ('field_a', 'field_b')}\""}, {"return": "\"{'field_list': ['field1', 'field2'], 'key1': 'value1', 'key2': 'value2'}\""}, {"return": "\"{'field_list': ['password', 'email'], 'user': 'admin'}\""}, {"return": "\"{'field_list': ['product', 'price'], 'category': 'electronics'}\""}, {"return": "\"{'field_list': ['name', 'email'], 'user_id': 1, 'active': True}\""}, {"return": "\"{'field_list': 'id', 'session_id': 'xyz', 'timeout': 30}\""}, {"return": "\"{'field_list': ['age', 'gender', 'location']}\""}, {"return": "\"{'field_list': 'date_created', 'page': 2, 'limit': 10}\""}, {"return": "\"{'field_list': ['first_name', 'last_name'], 'sort_by': 'name', 'order': 'asc'}\""}, {"return": "\"{'field_list': 'status', 'filter': 'new'}\""}, {"return": "\"{'field_list': ['email', 'phone'], 'user_id': 5, 'verified': False}\""}, {"return": "\"{'field_list': ['city', 'state'], 'country': 'US', 'language': 'en'}\""}, {"return": "\"{'field_list': 'score', 'max_results': 50}\""}, {"return": "\"{'field_list': ['query_time', 'result_count'], 'query': 'select *', 'cache': True}\""}, {"return": "\"{'field_list': 'name,age', 'user': 'Alice', 'age': 30}\""}, {"return": "\"{'field_list': ['user_id', 'session_start', 'session_end'], 'session_id': 'xyz123'}\""}, {"return": "\"{'field_list': '*'}\""}, {"return": "\"{'field_list': 'user_id', 'query': 'select * from users'}\""}, {"return": "\"{'field_list': ['permissions'], 'user': 'Bob', 'permissions': ['read', 'write']}\""}, {"return": "\"{'field_list': 'product_name,price,category', 'product_id': 101, 'category': 'electronics'}\""}, {"return": "\"{'field_list': 'order_id,customer_id,status', 'order_id': 2001}\""}, {"return": "\"{'field_list': 'active', 'active': True, 'admin': False}\""}, {"return": "\"{'field_list': 'state', 'country': 'USA', 'state': 'CA'}\""}, {"return": "\"{'field_list': 'date,events', 'date': '2023-01-01'}\""}], "parsed_inputs": [[["params", "{}"], ["field_list", "[]"]], [["params", "{'a': 1}"], ["field_list", "['b', 'c']"]], [["params", "{'x': 10, 'y': 20}"], ["field_list", "('x', 'y')"]], [["params", "{}"], ["field_list", "['field1', 'field2', 'field3']"]], [["params", "{'name': 'John'}"], ["field_list", "['age', 'city']"]], [["params", "{'id': 1, 'name': 'Product1'}"], ["field_list", "['price', 'description']"]], [["params", "{}"], ["field_list", "('field_a', 'field_b')"]], [["params", "{'key1': 'value1', 'key2': 'value2'}"], ["field_list", "['field1', 'field2']"]], [["params", "{'user': 'admin'}"], ["field_list", "['password', 'email']"]], [["params", "{'category': 'electronics'}"], ["field_list", "['product', 'price']"]]], "exec_code": "def build_field_list(params, field_list):\n    new_params = {'field_list': field_list}\n    new_params.update(params)\n    return new_params\n", "output": "The function is:\n\n```python\ndef build_field_list(params, field_list):\n    new_params = {'field_list': field_list}\n    new_params.update(params)\n    return new_params\n\n```", "choosed_example_idx": [6, 8, 2, 0, 7, 1, 9, 3, 5], "prompt": "Function: build_field_list\n\nWrite a function that generates the output from the input.\nInput: dict(params={}, field_list=('field_a', 'field_b')), Output: \"{'field_list': ('field_a', 'field_b')}\"\nInput: dict(params={'user': 'admin'}, field_list=['password', 'email']), Output: \"{'field_list': ['password', 'email'], 'user': 'admin'}\"\nInput: dict(params={'x': 10, 'y': 20}, field_list=('x', 'y')), Output: \"{'field_list': ('x', 'y'), 'x': 10, 'y': 20}\"\nInput: dict(params={}, field_list=[]), Output: \"{'field_list': []}\"\nInput: dict(params={'key1': 'value1', 'key2': 'value2'}, field_list=['field1', 'field2']), Output: \"{'field_list': ['field1', 'field2'], 'key1': 'value1', 'key2': 'value2'}\"\nInput: dict(params={'a': 1}, field_list=['b', 'c']), Output: \"{'field_list': ['b', 'c'], 'a': 1}\"\nInput: dict(params={'category': 'electronics'}, field_list=['product', 'price']), Output: \"{'field_list': ['product', 'price'], 'category': 'electronics'}\"\nInput: dict(params={}, field_list=['field1', 'field2', 'field3']), Output: \"{'field_list': ['field1', 'field2', 'field3']}\"\nInput: dict(params={'id': 1, 'name': 'Product1'}, field_list=['price', 'description']), Output: \"{'field_list': ['price', 'description'], 'id': 1, 'name': 'Product1'}\"\n\n\n", "id": "f8b08098356e197a8c81fe34073f2f9312b9785a_0"}
{"example_str": "examples = [\n    dict(xy1=(0, 0), xy2=(3, 4)),\n    dict(xy1=(1, 2), xy2=(4, 6)),\n    dict(xy1=(-1, 1), xy2=(2, -3)),\n    dict(xy1=(10, 20), xy2=(15, 25)),\n    dict(xy1=(0, 5), xy2=(0, 10)),\n    dict(xy1=(3, 3), xy2=(3, 3)),\n    dict(xy1=(-5, 0), xy2=(5, 0)),\n    dict(xy1=(7, 8), xy2=(12, 15)),\n    dict(xy1=(20, 30), xy2=(25, 35)),\n    dict(xy1=(11, 13), xy2=(16, 18)),\n]\nexamples += [\n    dict(xy1=(0, 0), xy2=(1, 1)),\n    dict(xy1=(2, 3), xy2=(5, 1)),\n    dict(xy1=(-1, -1), xy2=(-2, -2)),\n    dict(xy1=(10, 10), xy2=(10, 10)),\n    dict(xy1=(0, 0), xy2=(0, 0)),\n    dict(xy1=(100, 200), xy2=(100, 200)),\n    dict(xy1=(1, 2), xy2=(3, 4)),\n    dict(xy1=(-5, -10), xy2=(5, 10)),\n    dict(xy1=(123, 456), xy2=(789, 1011)),\n    dict(xy1=(0, 100), xy2=(100, 0))\n]\nexamples += [\n    dict(xy1=(0, 0), xy2=(1, 1)),\n    dict(xy1=(2, 3), xy2=(5, 1)),\n    dict(xy1=(-1, -1), xy2=(1, 1)),\n    dict(xy1=(10, 10), xy2=(10, 10)),\n    dict(xy1=(100, 200), xy2=(100, 300)),\n    dict(xy1=(0, 0), xy2=(0, 0)),\n    dict(xy1=(-5, -5), xy2=(-1, -2)),\n    dict(xy1=(23, 45), xy2=(23, 44)),\n    dict(xy1=(1, 2), xy2=(3, 4)),\n    dict(xy1=(50, 50), xy2=(50, 60))\n]", "code": "def get_manhattan_dist(xy1, xy2):\n    return abs(xy1[0] - xy2[0]) + abs(xy1[1] - xy2[1])\n", "func_name": "get_manhattan_dist", "exec_status": true, "example_inputs": ["\"{'xy1': (0, 0), 'xy2': (3, 4)}\"", "\"{'xy1': (1, 2), 'xy2': (4, 6)}\"", "\"{'xy1': (-1, 1), 'xy2': (2, -3)}\"", "\"{'xy1': (10, 20), 'xy2': (15, 25)}\"", "\"{'xy1': (0, 5), 'xy2': (0, 10)}\"", "\"{'xy1': (3, 3), 'xy2': (3, 3)}\"", "\"{'xy1': (-5, 0), 'xy2': (5, 0)}\"", "\"{'xy1': (7, 8), 'xy2': (12, 15)}\"", "\"{'xy1': (20, 30), 'xy2': (25, 35)}\"", "\"{'xy1': (11, 13), 'xy2': (16, 18)}\""], "example_outputs": [{"return": "\"7\""}, {"return": "\"7\""}, {"return": "\"7\""}, {"return": "\"10\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"10\""}, {"return": "\"12\""}, {"return": "\"10\""}, {"return": "\"10\""}, {"return": "\"2\""}, {"return": "\"5\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"4\""}, {"return": "\"30\""}, {"return": "\"1221\""}, {"return": "\"200\""}, {"return": "\"2\""}, {"return": "\"5\""}, {"return": "\"4\""}, {"return": "\"0\""}, {"return": "\"100\""}, {"return": "\"0\""}, {"return": "\"7\""}, {"return": "\"1\""}, {"return": "\"4\""}, {"return": "\"10\""}], "parsed_inputs": [[["xy1", "(0, 0)"], ["xy2", "(3, 4)"]], [["xy1", "(1, 2)"], ["xy2", "(4, 6)"]], [["xy1", "(-1, 1)"], ["xy2", "(2, -3)"]], [["xy1", "(10, 20)"], ["xy2", "(15, 25)"]], [["xy1", "(0, 5)"], ["xy2", "(0, 10)"]], [["xy1", "(3, 3)"], ["xy2", "(3, 3)"]], [["xy1", "(-5, 0)"], ["xy2", "(5, 0)"]], [["xy1", "(7, 8)"], ["xy2", "(12, 15)"]], [["xy1", "(20, 30)"], ["xy2", "(25, 35)"]], [["xy1", "(11, 13)"], ["xy2", "(16, 18)"]]], "exec_code": "def get_manhattan_dist(xy1, xy2):\n    return abs(xy1[0] - xy2[0]) + abs(xy1[1] - xy2[1])\n", "output": "The function is:\n\n```python\ndef get_manhattan_dist(xy1, xy2):\n    return abs(xy1[0] - xy2[0]) + abs(xy1[1] - xy2[1])\n\n```", "choosed_example_idx": [7, 6, 1, 8, 9, 0, 4, 3, 5], "prompt": "Write a function that generates the output from the input.\nFunction: get_manhattan_dist\nInput: dict(xy1=(7, 8), xy2=(12, 15)), Output: \"12\"\nInput: dict(xy1=(-5, 0), xy2=(5, 0)), Output: \"10\"\nInput: dict(xy1=(1, 2), xy2=(4, 6)), Output: \"7\"\nInput: dict(xy1=(20, 30), xy2=(25, 35)), Output: \"10\"\nInput: dict(xy1=(11, 13), xy2=(16, 18)), Output: \"10\"\nInput: dict(xy1=(0, 0), xy2=(3, 4)), Output: \"7\"\nInput: dict(xy1=(0, 5), xy2=(0, 10)), Output: \"5\"\nInput: dict(xy1=(10, 20), xy2=(15, 25)), Output: \"10\"\nInput: dict(xy1=(3, 3), xy2=(3, 3)), Output: \"0\"\n\n", "id": "a294902625e3859016b1b66e12fcb94fb4d094a1_0"}
{"example_str": "examples = [\n    dict(counter={'N': 3, 'S': 2, 'E': 1}),\n    dict(counter={'N': 5, 'W': 3}),\n    dict(counter={'E': 2, 'W': 2, 'N': 1}),\n    dict(counter={'S': 4, 'N': 4}),\n    dict(counter={'E': 1, 'W': 1, 'N': 1, 'S': 1}),\n    dict(counter={'N': 2, 'S': 2}),\n    dict(counter={'E': 3, 'W': 3}),\n    dict(counter={'N': 1, 'S': 1, 'E': 1, 'W': 1}),\n    dict(counter={'N': 6, 'S': 3, 'E': 2}),\n    dict(counter={'E': 4, 'W': 4, 'N': 2})\n]\nexamples += [\n    dict(counter={\"north\": 5, \"south\": 3, \"east\": 0, \"west\": 0}),\n    dict(counter={\"north\": 0, \"south\": 0, \"east\": 7, \"west\": 4}),\n    dict(counter={\"north\": 2, \"south\": 2, \"east\": 2, \"west\": 2}),\n    dict(counter={\"north\": 10, \"south\": 5, \"east\": 0, \"west\": 0}),\n    dict(counter={\"north\": 3, \"south\": 7, \"east\": 5, \"west\": 2}),\n    dict(counter={\"north\": 0, \"south\": 0, \"east\": 0, \"west\": 0}),\n    dict(counter={\"north\": 1, \"south\": 1, \"east\": 1, \"west\": 1}),\n    dict(counter={\"north\": 8, \"south\": 3, \"east\": 5, \"west\": 2}),\n    dict(counter={\"north\": 6, \"south\": 6, \"east\": 3, \"west\": 3}),\n    dict(counter={\"north\": 4, \"south\": 1, \"east\": 2, \"west\": 3})\n]", "code": "def do_hard_cancel(counter):\n    \"\"\"\n    After taking out the easy cancels on all three axes, figure out the remaining steps. NB: This moves things into\n    potentially the wrong counter spots, this is just meant to give an accurate count at the end\n    :param counter: dict counting number of moves by direction\n    :return: None (but there are side effects on counter\n    \"\"\"\n    leftovers = [k for k in counter.keys() if counter[k]]\n    assert len(leftovers) <= 3, f'leftovers={leftovers!r}'\n    if len(leftovers) <= 1:\n        return\n    elif len(leftovers) == 2:\n        if counter[leftovers[0]] > counter[leftovers[1]]:\n            big_key, small_key = leftovers\n        else:\n            small_key, big_key = leftovers\n        spaces_apart = DIRECTION_MAP[leftovers[0]] - DIRECTION_MAP[leftovers[1]\n            ]\n        if spaces_apart == 3:\n            counter[big_key] -= counter[small_key]\n            counter[small_key] = 0\n        elif spaces_apart == 2:\n            counter[small_key] = 0\n        elif spaces_apart == 1:\n            pass\n        else:\n            raise AssertionError(f'spaces_apart={spaces_apart!r}')\n    else:\n        leftovers_with_values = [(k, counter[k]) for k in leftovers]\n        leftovers_with_values.sort(key=lambda x: x[1])\n        small_key, mid_key, big_key = [tpl[0] for tpl in leftovers_with_values]\n        counter[big_key] -= counter[small_key]\n        counter[mid_key] += counter[small_key]\n        counter[small_key] = 0\n", "func_name": "do_hard_cancel", "exec_status": true, "example_inputs": ["\"{'counter': {'N': 3, 'S': 2, 'E': 1}}\"", "\"{'counter': {'N': 5, 'W': 3}}\"", "\"{'counter': {'E': 2, 'W': 2, 'N': 1}}\"", "\"{'counter': {'S': 4, 'N': 4}}\"", "\"{'counter': {'E': 1, 'W': 1, 'N': 1, 'S': 1}}\"", "\"{'counter': {'N': 2, 'S': 2}}\"", "\"{'counter': {'E': 3, 'W': 3}}\"", "\"{'counter': {'N': 1, 'S': 1, 'E': 1, 'W': 1}}\"", "\"{'counter': {'N': 6, 'S': 3, 'E': 2}}\"", "\"{'counter': {'E': 4, 'W': 4, 'N': 2}}\""], "example_outputs": [{"return": "\"None\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'DIRECTION_MAP' is not defined\""}, {"return": "\"None\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'DIRECTION_MAP' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'AssertionError'>: leftovers=['E', 'W', 'N', 'S']\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'DIRECTION_MAP' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'DIRECTION_MAP' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'AssertionError'>: leftovers=['N', 'S', 'E', 'W']\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'DIRECTION_MAP' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'DIRECTION_MAP' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'AssertionError'>: leftovers=['north', 'south', 'east', 'west']\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'DIRECTION_MAP' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'AssertionError'>: leftovers=['north', 'south', 'east', 'west']\""}, {"return": "\"None\""}, {"error": "<|EXCEPTION|> \"<class 'AssertionError'>: leftovers=['north', 'south', 'east', 'west']\""}, {"error": "<|EXCEPTION|> \"<class 'AssertionError'>: leftovers=['north', 'south', 'east', 'west']\""}, {"error": "<|EXCEPTION|> \"<class 'AssertionError'>: leftovers=['north', 'south', 'east', 'west']\""}, {"error": "<|EXCEPTION|> \"<class 'AssertionError'>: leftovers=['north', 'south', 'east', 'west']\""}], "parsed_inputs": [[["counter", "{'N': 3, 'S': 2, 'E': 1}"]], [["counter", "{'N': 5, 'W': 3}"]], [["counter", "{'E': 2, 'W': 2, 'N': 1}"]], [["counter", "{'S': 4, 'N': 4}"]], [["counter", "{'E': 1, 'W': 1, 'N': 1, 'S': 1}"]], [["counter", "{'N': 2, 'S': 2}"]], [["counter", "{'E': 3, 'W': 3}"]], [["counter", "{'N': 1, 'S': 1, 'E': 1, 'W': 1}"]], [["counter", "{'N': 6, 'S': 3, 'E': 2}"]], [["counter", "{'E': 4, 'W': 4, 'N': 2}"]]], "exec_code": "def do_hard_cancel(counter):\n    \"\"\"\n    After taking out the easy cancels on all three axes, figure out the remaining steps. NB: This moves things into\n    potentially the wrong counter spots, this is just meant to give an accurate count at the end\n    :param counter: dict counting number of moves by direction\n    :return: None (but there are side effects on counter\n    \"\"\"\n    leftovers = [k for k in counter.keys() if counter[k]]\n    assert len(leftovers) <= 3, f'leftovers={leftovers!r}'\n    if len(leftovers) <= 1:\n        return\n    elif len(leftovers) == 2:\n        if counter[leftovers[0]] > counter[leftovers[1]]:\n            big_key, small_key = leftovers\n        else:\n            small_key, big_key = leftovers\n        spaces_apart = DIRECTION_MAP[leftovers[0]] - DIRECTION_MAP[leftovers[1]\n            ]\n        if spaces_apart == 3:\n            counter[big_key] -= counter[small_key]\n            counter[small_key] = 0\n        elif spaces_apart == 2:\n            counter[small_key] = 0\n        elif spaces_apart == 1:\n            pass\n        else:\n            raise AssertionError(f'spaces_apart={spaces_apart!r}')\n    else:\n        leftovers_with_values = [(k, counter[k]) for k in leftovers]\n        leftovers_with_values.sort(key=lambda x: x[1])\n        small_key, mid_key, big_key = [tpl[0] for tpl in leftovers_with_values]\n        counter[big_key] -= counter[small_key]\n        counter[mid_key] += counter[small_key]\n        counter[small_key] = 0\n", "output": "The function is:\n\n```python\ndef do_hard_cancel(counter):\n    \"\"\"\n    After taking out the easy cancels on all three axes, figure out the remaining steps. NB: This moves things into\n    potentially the wrong counter spots, this is just meant to give an accurate count at the end\n    :param counter: dict counting number of moves by direction\n    :return: None (but there are side effects on counter\n    \"\"\"\n    leftovers = [k for k in counter.keys() if counter[k]]\n    assert len(leftovers) <= 3, f'leftovers={leftovers!r}'\n    if len(leftovers) <= 1:\n        return\n    elif len(leftovers) == 2:\n        if counter[leftovers[0]] > counter[leftovers[1]]:\n            big_key, small_key = leftovers\n        else:\n            small_key, big_key = leftovers\n        spaces_apart = DIRECTION_MAP[leftovers[0]] - DIRECTION_MAP[leftovers[1]\n            ]\n        if spaces_apart == 3:\n            counter[big_key] -= counter[small_key]\n            counter[small_key] = 0\n        elif spaces_apart == 2:\n            counter[small_key] = 0\n        elif spaces_apart == 1:\n            pass\n        else:\n            raise AssertionError(f'spaces_apart={spaces_apart!r}')\n    else:\n        leftovers_with_values = [(k, counter[k]) for k in leftovers]\n        leftovers_with_values.sort(key=lambda x: x[1])\n        small_key, mid_key, big_key = [tpl[0] for tpl in leftovers_with_values]\n        counter[big_key] -= counter[small_key]\n        counter[mid_key] += counter[small_key]\n        counter[small_key] = 0\n\n```", "choosed_example_idx": [1, 2, 7, 9, 8, 5, 4], "prompt": "Function: do_hard_cancel\nWrite a function that generates the output from the input.\n\nInput: dict(counter={'N': 5, 'W': 3}), Output: \"<class 'NameError'>: name 'DIRECTION_MAP' is not defined\"\nInput: dict(counter={'E': 2, 'W': 2, 'N': 1}), Output: \"None\"\nInput: dict(counter={'N': 1, 'S': 1, 'E': 1, 'W': 1}), Output: \"<class 'AssertionError'>: leftovers=['N', 'S', 'E', 'W']\"\nInput: dict(counter={'E': 4, 'W': 4, 'N': 2}), Output: \"None\"\nInput: dict(counter={'N': 6, 'S': 3, 'E': 2}), Output: \"None\"\nInput: dict(counter={'N': 2, 'S': 2}), Output: \"<class 'NameError'>: name 'DIRECTION_MAP' is not defined\"\nInput: dict(counter={'E': 1, 'W': 1, 'N': 1, 'S': 1}), Output: \"<class 'AssertionError'>: leftovers=['E', 'W', 'N', 'S']\"\n\n\n", "id": "2f2d9aa0af6552e7823b12d1618598f0e8f48aa7_0"}
{"example_str": "examples = [\n    dict(t=\"hello world\"),\n    dict(t='\"hello\"'),\n    dict(t='a_b-c+d*e/f:g<h>i>j@k$l$m%n$o$p?q;r>s?t=u>v&w;x*y(z)'),\n    dict(t='\"this is a test string\"'),\n    dict(t='a1_b2-c3+d4*e5/f6:g7<h8>i9>j10@k11$l12%m13$n14$o15%p16?q17;r18>s19?t20=u21>v22&w23;x24*y25(z26)'),\n    dict(t='\"abcdefghijklmnopqrstuvwxyz\"'),\n    dict(t='\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"'),\n    dict(t='\"0123456789\"'),\n    dict(t='\"!@#$%^&*()_+-={}:<>?,./;\"'),\n    dict(t='\"[]{}|~`\"')\n]\nexamples += [\n    dict(t=\"Hello, World!\"),\n    dict(t=\"1234567890\"),\n    dict(t=\"username@example.com\"),\n    dict(t=\"password123!@#\"),\n    dict(t=\"The quick brown fox jumps over the lazy dog.\"),\n    dict(t=\"!@#$%^&*()_+-=[]{};':\\\",.<>/?\"),\n    dict(t=\"2023-01-01T12:00:00\"),\n    dict(t=\"\"),\n    dict(t=\"Line 1\\nLine 2\"),\n    dict(t=\"Tab\\tseparated\")\n]\nexamples += [\n    dict(t='\"Hello, world!\"'),\n    dict(t='\"1234567890\"'),\n    dict(t='\"!@#$%^&*()_+\"'),\n    dict(t='\"[This] {is} (a) test:;,\"'),\n    dict(t='\"<html> <!DOCTYPE>\"'),\n    dict(t='\"user@example.com\"'),\n    dict(t='\"path/to/some/file.txt\"'),\n    dict(t='\"2023-01-01T12:00:00\"'),\n    dict(t='\"John\\'s laptop\"'),\n    dict(t='\"Escape\\\\ sequences\\\\ inside\"')\n]", "code": "def t_STRING(t):\n    \"\"\"\\\\\"[a-zA-Z0-9\\\\_\\\\-\\\\+={\\\\[\\\\]}';:/?>\\\\.,<!@\\\\#$%^&\\\\*()|\\\\~` ]*\\\\\\\"\"\"\"\n    return t\n", "func_name": "t_STRING", "exec_status": true, "example_inputs": ["\"{'t': 'hello world'}\"", "\"{'t': '\\\"hello\\\"'}\"", "\"{'t': 'a_b-c+d*e/f:g<h>i>j@k$l$m%n$o$p?q;r>s?t=u>v&w;x*y(z)'}\"", "\"{'t': '\\\"this is a test string\\\"'}\"", "\"{'t': 'a1_b2-c3+d4*e5/f6:g7<h8>i9>j10@k11$l12%m13$n14$o15%p16?q17;r18>s19?t20=u21>v22&w23;x24*y25(z26)'}\"", "\"{'t': '\\\"abcdefghijklmnopqrstuvwxyz\\\"'}\"", "\"{'t': '\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\"'}\"", "\"{'t': '\\\"0123456789\\\"'}\"", "\"{'t': '\\\"!@#$%^&*()_+-={}:<>?,./;\\\"'}\"", "\"{'t': '\\\"[]{}|~`\\\"'}\""], "example_outputs": [{"return": "\"'hello world'\""}, {"return": "\"'\\\"hello\\\"'\""}, {"return": "\"'a_b-c+d*e/f:g<h>i>j@k$l$m%n$o$p?q;r>s?t=u>v&w;x*y(z)'\""}, {"return": "\"'\\\"this is a test string\\\"'\""}, {"return": "\"'a1_b2-c3+d4*e5/f6:g7<h8>i9>j10@k11$l12%m13$n14$o15%p16?q17;r18>s19?t20=u21>v22&w23;x24*y25(z26)'\""}, {"return": "\"'\\\"abcdefghijklmnopqrstuvwxyz\\\"'\""}, {"return": "\"'\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\"'\""}, {"return": "\"'\\\"0123456789\\\"'\""}, {"return": "\"'\\\"!@#$%^&*()_+-={}:<>?,./;\\\"'\""}, {"return": "\"'\\\"[]{}|~`\\\"'\""}, {"return": "\"'Hello, World!'\""}, {"return": "\"'1234567890'\""}, {"return": "\"'username@example.com'\""}, {"return": "\"'password123!@#'\""}, {"return": "\"'The quick brown fox jumps over the lazy dog.'\""}, {"return": "\"'!@#$%^&*()_+-=[]{};\\\\':\\\",.<>/?'\""}, {"return": "\"'2023-01-01T12:00:00'\""}, {"return": "\"''\""}, {"return": "\"'Line 1\\\\nLine 2'\""}, {"return": "\"'Tab\\\\tseparated'\""}, {"return": "\"'\\\"Hello, world!\\\"'\""}, {"return": "\"'\\\"1234567890\\\"'\""}, {"return": "\"'\\\"!@#$%^&*()_+\\\"'\""}, {"return": "\"'\\\"[This] {is} (a) test:;,\\\"'\""}, {"return": "\"'\\\"<html> <!DOCTYPE>\\\"'\""}, {"return": "\"'\\\"user@example.com\\\"'\""}, {"return": "\"'\\\"path/to/some/file.txt\\\"'\""}, {"return": "\"'\\\"2023-01-01T12:00:00\\\"'\""}, {"return": "\"'\\\"John\\\\'s laptop\\\"'\""}, {"return": "\"'\\\"Escape\\\\\\\\ sequences\\\\\\\\ inside\\\"'\""}], "parsed_inputs": [[["t", "\"hello world\""]], [["t", "\"\\\"hello\\\"\""]], [["t", "\"a_b-c+d*e/f:g<h>i>j@k$l$m%n$o$p?q;r>s?t=u>v&w;x*y(z)\""]], [["t", "\"\\\"this is a test string\\\"\""]], [["t", "\"a1_b2-c3+d4*e5/f6:g7<h8>i9>j10@k11$l12%m13$n14$o15%p16?q17;r18>s19?t20=u21>v22&w23;x24*y25(z26)\""]], [["t", "\"\\\"abcdefghijklmnopqrstuvwxyz\\\"\""]], [["t", "\"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\"\""]], [["t", "\"\\\"0123456789\\\"\""]], [["t", "\"\\\"!@#$%^&*()_+-={}:<>?,./;\\\"\""]], [["t", "\"\\\"[]{}|~`\\\"\""]]], "exec_code": "def t_STRING(t):\n    \"\"\"\\\\\"[a-zA-Z0-9\\\\_\\\\-\\\\+={\\\\[\\\\]}';:/?>\\\\.,<!@\\\\#$%^&\\\\*()|\\\\~` ]*\\\\\\\"\"\"\"\n    return t\n", "output": "The function is:\n\n```python\ndef t_STRING(t):\n    \"\"\"\\\\\"[a-zA-Z0-9\\\\_\\\\-\\\\+={\\\\[\\\\]}';:/?>\\\\.,<!@\\\\#$%^&\\\\*()|\\\\~` ]*\\\\\\\"\"\"\"\n    return t\n\n```", "choosed_example_idx": [4, 1, 0, 7, 5, 9, 2], "prompt": "Write a function that generates the output from the input.\n\nFunction: t_STRING\n\nInput: dict(t=\"a1_b2-c3+d4*e5/f6:g7<h8>i9>j10@k11$l12%m13$n14$o15%p16?q17;r18>s19?t20=u21>v22&w23;x24*y25(z26)\"), Output: \"'a1_b2-c3+d4*e5/f6:g7<h8>i9>j10@k11$l12%m13$n14$o15%p16?q17;r18>s19?t20=u21>v22&w23;x24*y25(z26)'\"\nInput: dict(t=\"\\\"hello\\\"\"), Output: \"'\\\"hello\\\"'\"\nInput: dict(t=\"hello world\"), Output: \"'hello world'\"\nInput: dict(t=\"\\\"0123456789\\\"\"), Output: \"'\\\"0123456789\\\"'\"\nInput: dict(t=\"\\\"abcdefghijklmnopqrstuvwxyz\\\"\"), Output: \"'\\\"abcdefghijklmnopqrstuvwxyz\\\"'\"\nInput: dict(t=\"\\\"[]{}|~`\\\"\"), Output: \"'\\\"[]{}|~`\\\"'\"\nInput: dict(t=\"a_b-c+d*e/f:g<h>i>j@k$l$m%n$o$p?q;r>s?t=u>v&w;x*y(z)\"), Output: \"'a_b-c+d*e/f:g<h>i>j@k$l$m%n$o$p?q;r>s?t=u>v&w;x*y(z)'\"\n\n\n", "id": "eebdf625507fd020316de06dec2559b9511dd9a3_0"}
{"example_str": "examples = [\n    dict(arr=[1, 2, 3, 4, 5], ele=3),\n    dict(arr=[\"apple\", \"banana\", \"cherry\"], ele=\"banana\"),\n    dict(arr=[1.2, 3.4, 5.6, 7.8], ele=5.6),\n    dict(arr=[\"hello\", \"world\"], ele=\"goodbye\"),\n    dict(arr=[True, False, True], ele=False),\n    dict(arr=[1, 2, 3, 4, 5], ele=6),\n    dict(arr=[\"a\", \"b\", \"c\", \"d\"], ele=\"c\"),\n    dict(arr=[10, 20, 30, 40], ele=20),\n    dict(arr=[\"x\", \"y\", \"z\"], ele=\"y\"),\n    dict(arr=[1, 2, 3, 4, 5], ele=1),\n]\nexamples += [\n    dict(arr=[1, 2, 3, 4, 5], ele=3),\n    dict(arr=[1, 2, 3, 4, 5], ele=6),\n    dict(arr=['a', 'b', 'c', 'd'], ele='c'),\n    dict(arr=['a', 'b', 'c', 'd'], ele='z'),\n    dict(arr=[10, 20, 30, 40, 50], ele=40),\n    dict(arr=[True, False, True], ele=False),\n    dict(arr=[None, 'None', 'null'], ele=None),\n    dict(arr=[5.5, 3.3, 2.1, 4.4], ele=2.1),\n    dict(arr=[(1, 2), (3, 4)], ele=(1, 2)),\n    dict(arr=['apple', 'banana', 'cherry'], ele='banana')\n]\nexamples += [\n    dict(arr=[1, 2, 3, 4, 5], ele=3),\n    dict(arr=[1, 2, 3, 4, 5], ele=6),\n    dict(arr=['a', 'b', 'c', 'd'], ele='c'),\n    dict(arr=['a', 'b', 'c', 'd'], ele='e'),\n    dict(arr=[10, 20, 30, 40, 50], ele=40),\n    dict(arr=[10, 20, 30, 40, 50], ele=60),\n    dict(arr=[True, False, True], ele=False),\n    dict(arr=[None, 'None', 'none'], ele=None),\n    dict(arr=[0.1, 0.2, 0.3, 0.4], ele=0.3),\n    dict(arr=[0.1, 0.2, 0.3, 0.4], ele=0.5)\n]", "code": "def seq_search(arr, ele):\n    pos = 0\n    found = False\n    while pos < len(arr) and not found:\n        if arr[pos] == ele:\n            found = True\n        else:\n            pos += 1\n    return found\n", "func_name": "seq_search", "exec_status": true, "example_inputs": ["\"{'arr': [1, 2, 3, 4, 5], 'ele': 3}\"", "\"{'arr': ['apple', 'banana', 'cherry'], 'ele': 'banana'}\"", "\"{'arr': [1.2, 3.4, 5.6, 7.8], 'ele': 5.6}\"", "\"{'arr': ['hello', 'world'], 'ele': 'goodbye'}\"", "\"{'arr': [True, False, True], 'ele': False}\"", "\"{'arr': [1, 2, 3, 4, 5], 'ele': 6}\"", "\"{'arr': ['a', 'b', 'c', 'd'], 'ele': 'c'}\"", "\"{'arr': [10, 20, 30, 40], 'ele': 20}\"", "\"{'arr': ['x', 'y', 'z'], 'ele': 'y'}\"", "\"{'arr': [1, 2, 3, 4, 5], 'ele': 1}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}], "parsed_inputs": [[["arr", "[1, 2, 3, 4, 5]"], ["ele", "3"]], [["arr", "['apple', 'banana', 'cherry']"], ["ele", "\"banana\""]], [["arr", "[1.2, 3.4, 5.6, 7.8]"], ["ele", "5.6"]], [["arr", "['hello', 'world']"], ["ele", "\"goodbye\""]], [["arr", "[True, False, True]"], ["ele", "False"]], [["arr", "[1, 2, 3, 4, 5]"], ["ele", "6"]], [["arr", "['a', 'b', 'c', 'd']"], ["ele", "\"c\""]], [["arr", "[10, 20, 30, 40]"], ["ele", "20"]], [["arr", "['x', 'y', 'z']"], ["ele", "\"y\""]], [["arr", "[1, 2, 3, 4, 5]"], ["ele", "1"]]], "exec_code": "def seq_search(arr, ele):\n    pos = 0\n    found = False\n    while pos < len(arr) and not found:\n        if arr[pos] == ele:\n            found = True\n        else:\n            pos += 1\n    return found\n", "output": "The function is:\n\n```python\ndef seq_search(arr, ele):\n    pos = 0\n    found = False\n    while pos < len(arr) and not found:\n        if arr[pos] == ele:\n            found = True\n        else:\n            pos += 1\n    return found\n\n```", "choosed_example_idx": [4, 1, 5, 3, 2, 0, 7, 6, 9], "prompt": "Function: seq_search\nWrite a function that generates the output from the input.\nInput: dict(arr=[True, False, True], ele=False), Output: \"True\"\nInput: dict(arr=['apple', 'banana', 'cherry'], ele=\"banana\"), Output: \"True\"\nInput: dict(arr=[1, 2, 3, 4, 5], ele=6), Output: \"False\"\nInput: dict(arr=['hello', 'world'], ele=\"goodbye\"), Output: \"False\"\nInput: dict(arr=[1.2, 3.4, 5.6, 7.8], ele=5.6), Output: \"True\"\nInput: dict(arr=[1, 2, 3, 4, 5], ele=3), Output: \"True\"\nInput: dict(arr=[10, 20, 30, 40], ele=20), Output: \"True\"\nInput: dict(arr=['a', 'b', 'c', 'd'], ele=\"c\"), Output: \"True\"\nInput: dict(arr=[1, 2, 3, 4, 5], ele=1), Output: \"True\"\n\n\n", "id": "3ce30080087ebc63ef92c4318aea3ea8d4b6e837_0"}
{"example_str": "examples = [\n    dict(ls=[1, 2, 3, 4, 5]),\n    dict(ls=[10, 20, 30, 40, 50]),\n    dict(ls=[500, 600, 700, 800, 900]),\n    dict(ls=[1000, 1100, 1200, 1300, 1400]),\n    dict(ls=[-1, -2, -3, -4, -5]),\n    dict(ls=[0, 0, 0, 0, 0]),\n    dict(ls=[34, 34, 34, 34, 34]),\n    dict(ls=[41, 82, 123, 164, 205]),\n    dict(ls=[5000, 6000, 7000, 8000, 9000]),\n    dict(ls=[1.5, 2.5, 3.5, 4.5, 5.5]),\n]\nexamples += [\n    dict(ls=[100, 200, 300]),  # Example with integers below the threshold after scaling\n    dict(ls=[1000, 2000, 3000]),  # Example with integers above the threshold after scaling\n    dict(ls=[150.5, 245.7, 345.8]),  # Example with floats below the threshold after scaling\n    dict(ls=[1500.5, 2450.7, 3450.8]),  # Example with floats above the threshold after scaling\n    dict(ls=[-100, -200, -300]),  # Example with negative integers\n    dict(ls=[-1000, -2000, -3000]),  # Example with large negative integers\n    dict(ls=[0, 0, 0]),  # Example with zeros\n    dict(ls=[500, 600, 700]),  # Edge cases around the threshold\n    dict(ls=[499, 501]),  # Close to the threshold\n    dict(ls=[12345]),  # Single large number\n]\nexamples += [\n    dict(ls=[0, 1, 2, 3, 4, 5]),\n    dict(ls=[10, 20, 30, 40, 50]),\n    dict(ls=[100, 200, 300, 400, 500]),\n    dict(ls=[600, 700, 800, 900, 1000]),\n    dict(ls=[34, 68, 102, 136, 170]),\n    dict(ls=[0.5, 1.5, 2.5, 3.5, 4.5]),\n    dict(ls=[-10, -20, -30, -40, -50]),\n    dict(ls=[123, 456, 789]),\n    dict(ls=[250, 500, 750]),\n    dict(ls=[10000, 20000, 30000])\n]", "code": "def create_random_list(ls):\n    result = []\n    for x in ls:\n        x = x / 34 * 41\n        if x > 500:\n            x = x ** 10\n        result.append(x)\n    return result\n", "func_name": "create_random_list", "exec_status": true, "example_inputs": ["\"{'ls': [1, 2, 3, 4, 5]}\"", "\"{'ls': [10, 20, 30, 40, 50]}\"", "\"{'ls': [500, 600, 700, 800, 900]}\"", "\"{'ls': [1000, 1100, 1200, 1300, 1400]}\"", "\"{'ls': [-1, -2, -3, -4, -5]}\"", "\"{'ls': [0, 0, 0, 0, 0]}\"", "\"{'ls': [34, 34, 34, 34, 34]}\"", "\"{'ls': [41, 82, 123, 164, 205]}\"", "\"{'ls': [5000, 6000, 7000, 8000, 9000]}\"", "\"{'ls': [1.5, 2.5, 3.5, 4.5, 5.5]}\""], "example_outputs": [{"return": "\"[1.2058823529411764, 2.411764705882353, 3.6176470588235294, 4.823529411764706, 6.029411764705882]\""}, {"return": "\"[12.058823529411764, 24.11764705882353, 36.17647058823529, 48.23529411764706, 60.294117647058826]\""}, {"return": "\"[6.349644926560827e+27, 3.931532776109413e+28, 1.8366643524524627e+29, 6.981508429002525e+29, 2.2671199110984801e+30]\""}, {"return": "\"[6.502036404798287e+30, 1.6864607900241288e+31, 4.025889562736039e+31, 8.96360932712786e+31, 1.880744296911322e+32]\""}, {"return": "\"[-1.2058823529411764, -2.411764705882353, -3.6176470588235294, -4.823529411764706, -6.029411764705882]\""}, {"return": "\"[0.0, 0.0, 0.0, 0.0, 0.0]\""}, {"return": "\"[41.0, 41.0, 41.0, 41.0, 41.0]\""}, {"return": "\"[49.44117647058823, 98.88235294117646, 148.3235294117647, 197.76470588235293, 247.20588235294116]\""}, {"return": "\"[6.349644926560838e+37, 3.9315327761094066e+38, 1.8366643524524603e+39, 6.981508429002515e+39, 2.267119911098479e+40]\""}, {"return": "\"[1.8088235294117647, 3.014705882352941, 4.220588235294118, 5.426470588235294, 6.632352941176471]\""}, {"return": "\"[120.58823529411765, 241.1764705882353, 361.764705882353]\""}, {"return": "\"[6.502036404798287e+30, 6.658085278513446e+33, 3.8393874766693424e+35]\""}, {"return": "\"[181.48529411764707, 296.2852941176471, 416.9941176470589]\""}, {"return": "\"[3.7619186024767535e+32, 5.081020002064778e+34, 1.5568518620291872e+36]\""}, {"return": "\"[-120.58823529411765, -241.1764705882353, -361.764705882353]\""}, {"return": "\"[-1205.8823529411764, -2411.7647058823527, -3617.6470588235293]\""}, {"return": "\"[0.0, 0.0, 0.0]\""}, {"return": "\"[6.349644926560827e+27, 3.931532776109413e+28, 1.8366643524524627e+29]\""}, {"return": "\"[6.223788889740958e+27, 6.477786878224054e+27]\""}, {"return": "\"[5.345155442564419e+41]\""}, {"return": "\"[0.0, 1.2058823529411764, 2.411764705882353, 3.6176470588235294, 4.823529411764706, 6.029411764705882]\""}, {"return": "\"[12.058823529411764, 24.11764705882353, 36.17647058823529, 48.23529411764706, 60.294117647058826]\""}, {"return": "\"[120.58823529411765, 241.1764705882353, 361.764705882353, 482.3529411764706, 6.349644926560827e+27]\""}, {"return": "\"[3.931532776109413e+28, 1.8366643524524627e+29, 6.981508429002525e+29, 2.2671199110984801e+30, 6.502036404798287e+30]\""}, {"return": "\"[41.0, 82.0, 123.0, 164.0, 205.0]\""}, {"return": "\"[0.6029411764705882, 1.8088235294117647, 3.014705882352941, 4.220588235294118, 5.426470588235294]\""}, {"return": "\"[-12.058823529411764, -24.11764705882353, -36.17647058823529, -48.23529411764706, -60.294117647058826]\""}, {"return": "\"[148.3235294117647, 2.5275387551461495e+27, 6.078822032258866e+29]\""}, {"return": "\"[301.4705882352941, 6.349644926560827e+27, 3.661525227231352e+29]\""}, {"return": "\"[6.502036404798299e+40, 6.658085278513458e+43, 3.839387476669344e+45]\""}], "parsed_inputs": [[["ls", "[1, 2, 3, 4, 5]"]], [["ls", "[10, 20, 30, 40, 50]"]], [["ls", "[500, 600, 700, 800, 900]"]], [["ls", "[1000, 1100, 1200, 1300, 1400]"]], [["ls", "[-1, -2, -3, -4, -5]"]], [["ls", "[0, 0, 0, 0, 0]"]], [["ls", "[34, 34, 34, 34, 34]"]], [["ls", "[41, 82, 123, 164, 205]"]], [["ls", "[5000, 6000, 7000, 8000, 9000]"]], [["ls", "[1.5, 2.5, 3.5, 4.5, 5.5]"]]], "exec_code": "def create_random_list(ls):\n    result = []\n    for x in ls:\n        x = x / 34 * 41\n        if x > 500:\n            x = x ** 10\n        result.append(x)\n    return result\n", "output": "The function is:\n\n```python\ndef create_random_list(ls):\n    result = []\n    for x in ls:\n        x = x / 34 * 41\n        if x > 500:\n            x = x ** 10\n        result.append(x)\n    return result\n\n```", "choosed_example_idx": [7, 1, 2, 4, 0], "prompt": "Function: create_random_list\nInput: dict(ls=[41, 82, 123, 164, 205]), Output: \"[49.44117647058823, 98.88235294117646, 148.3235294117647, 197.76470588235293, 247.20588235294116]\"\nInput: dict(ls=[10, 20, 30, 40, 50]), Output: \"[12.058823529411764, 24.11764705882353, 36.17647058823529, 48.23529411764706, 60.294117647058826]\"\nInput: dict(ls=[500, 600, 700, 800, 900]), Output: \"[6.349644926560827e+27, 3.931532776109413e+28, 1.8366643524524627e+29, 6.981508429002525e+29, 2.2671199110984801e+30]\"\nInput: dict(ls=[-1, -2, -3, -4, -5]), Output: \"[-1.2058823529411764, -2.411764705882353, -3.6176470588235294, -4.823529411764706, -6.029411764705882]\"\nInput: dict(ls=[1, 2, 3, 4, 5]), Output: \"[1.2058823529411764, 2.411764705882353, 3.6176470588235294, 4.823529411764706, 6.029411764705882]\"\n\nWrite a function that generates the output from the input.\n", "id": "0a80e3be65a0c8015c82eb5bd96069b55c6996e6_0"}
{"example_str": "examples = [\n    dict(a_start=1, a_end=10, b_start=1, b_end=10),\n    dict(a_start=10, a_end=20, b_start=10, b_end=20),\n    dict(a_start=1, a_end=5, b_start=5, b_end=10),\n    dict(a_start=20, a_end=30, b_start=30, b_end=40),\n    dict(a_start=1, a_end=2, b_start=1, b_end=2),\n    dict(a_start=5, a_end=10, b_start=10, b_end=15),\n    dict(a_start=10, a_end=15, b_start=15, b_end=20),\n    dict(a_start=2, a_end=5, b_start=5, b_end=8),\n    dict(a_start=15, a_end=20, b_start=20, b_end=25),\n    dict(a_start=1, a_end=100, b_start=100, b_end=200),\n]\nexamples += [\n    dict(a_start=1, a_end=10, b_start=1, b_end=10),\n    dict(a_start=10, a_end=20, b_start=10, b_end=20),\n    dict(a_start=100, a_end=110, b_start=100, b_end=110),\n    dict(a_start=0, a_end=5, b_start=0, b_end=5),\n    dict(a_start=50, a_end=60, b_start=50, b_end=60),\n    dict(a_start=21, a_end=30, b_start=21, b_end=30),\n    dict(a_start=11, a_end=15, b_start=11, b_end=15),\n    dict(a_start=90, a_end=100, b_start=90, b_end=100),\n    dict(a_start=200, a_end=210, b_start=200, b_end=210),\n    dict(a_start=5, a_end=15, b_start=5, b_end=15)\n]\nexamples += [\n    dict(a_start=1, a_end=10, b_start=1, b_end=10),\n    dict(a_start=10, a_end=20, b_start=10, b_end=20),\n    dict(a_start=100, a_end=110, b_start=100, b_end=110),\n    dict(a_start=50, a_end=60, b_start=1, b_end=10),\n    dict(a_start=1, a_end=100, b_start=1, b_end=100),\n    dict(a_start=11, a_end=20, b_start=11, b_end=20),\n    dict(a_start=21, a_end=30, b_start=21, b_end=30),\n    dict(a_start=31, a_end=40, b_start=31, b_end=40),\n    dict(a_start=41, a_end=50, b_start=41, b_end=50),\n    dict(a_start=51, a_end=60, b_start=51, b_end=60),\n]", "code": "def find_palindrome(a_start, a_end, b_start, b_end):\n    a = range(a_start, a_end + 1)\n    b = range(b_start, b_end + 1)\n    return [(i * j) for i in a for j in b if str(i * j) == str(i * j)[::-1]]\n", "func_name": "find_palindrome", "exec_status": true, "example_inputs": ["\"{'a_start': 1, 'a_end': 10, 'b_start': 1, 'b_end': 10}\"", "\"{'a_start': 10, 'a_end': 20, 'b_start': 10, 'b_end': 20}\"", "\"{'a_start': 1, 'a_end': 5, 'b_start': 5, 'b_end': 10}\"", "\"{'a_start': 20, 'a_end': 30, 'b_start': 30, 'b_end': 40}\"", "\"{'a_start': 1, 'a_end': 2, 'b_start': 1, 'b_end': 2}\"", "\"{'a_start': 5, 'a_end': 10, 'b_start': 10, 'b_end': 15}\"", "\"{'a_start': 10, 'a_end': 15, 'b_start': 15, 'b_end': 20}\"", "\"{'a_start': 2, 'a_end': 5, 'b_start': 5, 'b_end': 8}\"", "\"{'a_start': 15, 'a_end': 20, 'b_start': 20, 'b_end': 25}\"", "\"{'a_start': 1, 'a_end': 100, 'b_start': 100, 'b_end': 200}\""], "example_outputs": [{"return": "\"[1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 4, 6, 8, 3, 6, 9, 4, 8, 5, 6, 7, 8, 9]\""}, {"return": "\"[121, 252, 272, 272, 323, 252, 323]\""}, {"return": "\"[5, 6, 7, 8, 9]\""}, {"return": "\"[777, 858, 828, 888, 858, 999, 868]\""}, {"return": "\"[1, 2, 2, 4]\""}, {"return": "\"[55, 66, 77, 88, 99]\""}, {"return": "\"[252]\""}, {"return": "\"[]\""}, {"return": "\"[414]\""}, {"return": "\"[101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 333, 363, 393, 414, 444, 474, 525, 555, 585, 404, 424, 444, 464, 484, 616, 636, 656, 676, 696, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 636, 666, 696, 828, 858, 888, 707, 777, 868, 959, 1001, 808, 848, 888, 909, 999, 1111, 1221, 1331, 1441, 1551, 1661, 1771, 1881, 1991, 2002, 2112, 2112, 2002, 2002, 2772, 2112, 2992, 2992, 2772, 3553, 2772, 3003, 2222, 2332, 2442, 2552, 2662, 2772, 2882, 2992, 4004, 4114, 4224, 4334, 4554, 4224, 4004, 4004, 4774, 5115, 4224, 6336, 3333, 3663, 3993, 4224, 4554, 4884, 5115, 5445, 5775, 6006, 6336, 4114, 5005, 5775, 6336, 4884, 6006, 7667, 8118, 6006, 4444, 4664, 4884, 6116, 6336, 6556, 6776, 6996, 8008, 8228, 8448, 8668, 5445, 6336, 8448, 7007, 8008, 6996, 5555, 5665, 5775, 5885, 5995, 6776, 8008, 8778, 9009, 8448, 6666, 6996, 8118, 8448, 8778, 8228, 13731, 10001, 12921, 7777, 8008, 8778, 9009, 9779, 11011, 9559, 14141, 13031, 10701, 15051, 8888, 10101, 11011, 11811, 16461, 14841, 9999]\""}, {"return": "\"[1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 4, 6, 8, 3, 6, 9, 4, 8, 5, 6, 7, 8, 9]\""}, {"return": "\"[121, 252, 272, 272, 323, 252, 323]\""}, {"return": "\"[10201]\""}, {"return": "\"[0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 0, 2, 4, 6, 8, 0, 3, 6, 9, 0, 4, 8, 0, 5]\""}, {"return": "\"[]\""}, {"return": "\"[525, 484, 616, 575, 696, 525, 575, 676, 616, 696]\""}, {"return": "\"[121]\""}, {"return": "\"[9009, 9009]\""}, {"return": "\"[40804, 41814, 42224, 42024, 42024, 41814, 42224]\""}, {"return": "\"[55, 66, 77, 88, 99, 55, 66, 77, 88, 99, 121]\""}, {"return": "\"[1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 4, 6, 8, 3, 6, 9, 4, 8, 5, 6, 7, 8, 9]\""}, {"return": "\"[121, 252, 272, 272, 323, 252, 323]\""}, {"return": "\"[10201]\""}, {"return": "\"[212, 424, 55, 171, 232, 464]\""}, {"return": "\"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 2, 4, 6, 8, 22, 44, 66, 88, 3, 6, 9, 33, 66, 99, 111, 141, 171, 222, 252, 282, 4, 8, 44, 88, 212, 232, 252, 272, 292, 5, 55, 6, 66, 222, 252, 282, 414, 444, 474, 7, 77, 161, 252, 343, 434, 525, 595, 616, 686, 8, 88, 232, 272, 424, 464, 616, 656, 696, 9, 99, 171, 252, 333, 414, 585, 666, 747, 828, 11, 22, 33, 44, 55, 66, 77, 88, 99, 121, 242, 363, 484, 616, 737, 858, 979, 1001, 252, 444, 636, 696, 828, 888, 494, 585, 676, 767, 858, 949, 1001, 252, 434, 616, 686, 868, 525, 555, 585, 272, 464, 656, 848, 272, 323, 595, 646, 969, 252, 414, 666, 828, 171, 323, 494, 646, 969, 1881, 252, 525, 777, 22, 44, 66, 88, 242, 484, 616, 858, 2002, 2112, 161, 414, 575, 828, 989, 1771, 696, 888, 2112, 525, 575, 494, 676, 858, 2002, 999, 252, 616, 868, 2772, 232, 464, 696, 2552, 434, 868, 2112, 33, 66, 99, 363, 858, 1221, 1551, 1881, 2112, 2442, 2772, 3003, 272, 646, 2992, 525, 595, 252, 828, 2772, 111, 222, 333, 444, 555, 666, 777, 888, 999, 1221, 2442, 3663, 494, 646, 585, 858, 3003, 656, 252, 2772, 989, 44, 88, 484, 616, 2112, 2332, 2552, 2772, 2992, 4004, 4224, 585, 414, 828, 4554, 141, 282, 1551, 2112, 4224, 343, 686, 3773, 969, 676, 4004, 212, 424, 636, 848, 2332, 4664, 55, 5005, 5115, 5225, 5335, 5445, 616, 171, 969, 1881, 232, 464, 696, 2552, 767, 434, 868, 4774, 252, 2772, 2112, 4224, 6336, 585, 5005, 66, 858, 2112, 2442, 2772, 4224, 4554, 4884, 6006, 6336, 737, 272, 2992, 414, 828, 4554, 6336, 292, 949, 7227, 222, 444, 666, 888, 2442, 4884, 525, 5775, 77, 616, 1001, 1771, 2002, 2772, 3003, 3773, 4004, 4774, 5005, 5775, 6006, 6776, 7007, 858, 6006, 474, 656, 8118, 747, 252, 2772, 595, 696, 88, 616, 2112, 2552, 2992, 4224, 4664, 6336, 6776, 8008, 8448, 979, 1001, 2002, 3003, 4004, 5005, 6006, 7007, 8008, 9009, 828, 5115, 282, 5225, 2112, 4224, 6336, 8448, 5335, 686, 99, 1881, 2772, 3663, 4554, 5445, 6336, 7227, 8118, 9009]\""}, {"return": "\"[121, 252, 272, 272, 323, 252, 323]\""}, {"return": "\"[525, 484, 616, 575, 696, 525, 575, 676, 616, 696]\""}, {"return": "\"[1221, 1221]\""}, {"return": "\"[2112, 2112]\""}, {"return": "\"[]\""}], "parsed_inputs": [[["a_start", "1"], ["a_end", "10"], ["b_start", "1"], ["b_end", "10"]], [["a_start", "10"], ["a_end", "20"], ["b_start", "10"], ["b_end", "20"]], [["a_start", "1"], ["a_end", "5"], ["b_start", "5"], ["b_end", "10"]], [["a_start", "20"], ["a_end", "30"], ["b_start", "30"], ["b_end", "40"]], [["a_start", "1"], ["a_end", "2"], ["b_start", "1"], ["b_end", "2"]], [["a_start", "5"], ["a_end", "10"], ["b_start", "10"], ["b_end", "15"]], [["a_start", "10"], ["a_end", "15"], ["b_start", "15"], ["b_end", "20"]], [["a_start", "2"], ["a_end", "5"], ["b_start", "5"], ["b_end", "8"]], [["a_start", "15"], ["a_end", "20"], ["b_start", "20"], ["b_end", "25"]], [["a_start", "1"], ["a_end", "100"], ["b_start", "100"], ["b_end", "200"]]], "exec_code": "def find_palindrome(a_start, a_end, b_start, b_end):\n    a = range(a_start, a_end + 1)\n    b = range(b_start, b_end + 1)\n    return [(i * j) for i in a for j in b if str(i * j) == str(i * j)[::-1]]\n", "output": "The function is:\n\n```python\ndef find_palindrome(a_start, a_end, b_start, b_end):\n    a = range(a_start, a_end + 1)\n    b = range(b_start, b_end + 1)\n    return [(i * j) for i in a for j in b if str(i * j) == str(i * j)[::-1]]\n\n```", "choosed_example_idx": [6, 8, 0, 5], "prompt": "Input: dict(a_start=10, a_end=15, b_start=15, b_end=20), Output: \"[252]\"\nInput: dict(a_start=15, a_end=20, b_start=20, b_end=25), Output: \"[414]\"\nInput: dict(a_start=1, a_end=10, b_start=1, b_end=10), Output: \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 4, 6, 8, 3, 6, 9, 4, 8, 5, 6, 7, 8, 9]\"\nInput: dict(a_start=5, a_end=10, b_start=10, b_end=15), Output: \"[55, 66, 77, 88, 99]\"\n\n\n\nFunction: find_palindrome\nWrite a function that generates the output from the input.\n", "id": "d8a968c85bf1036c00518945c4b51d7bd0f02399_0"}
{"example_str": "examples = [\n    dict(passport_field=\"pid:123456789\"),\n    dict(passport_field=\"hgt:193cm\"),\n    dict(passport_field=\"hcl:#602927\"),\n    dict(passport_field=\"ecl:gry\"),\n    dict(passport_field=\"eyr:2029\"),\n    dict(passport_field=\"iyr:2015\"),\n    dict(passport_field=\"cid:350\"),\n    dict(passport_field=\"byr:2002\"),\n    dict(passport_field=\"hgt:60in\"),\n    dict(passport_field=\"ecl:blu\"),\n]\nexamples += [\n    dict(passport_field=\"name:John Doe\"),\n    dict(passport_field=\"age:30\"),\n    dict(passport_field=\"country:USA\"),\n    dict(passport_field=\"email:john.doe@example.com\"),\n    dict(passport_field=\"passport_number:123456789\"),\n    dict(passport_field=\"issue_date:2021-01-01\"),\n    dict(passport_field=\"expiration_date:2031-01-01\"),\n    dict(passport_field=\"gender:M\"),\n    dict(passport_field=\"height:180cm\"),\n    dict(passport_field=\"eye_color:blue\")\n]\nexamples += [\n    dict(passport_field=\"name:John\"),\n    dict(passport_field=\"age:30\"),\n    dict(passport_field=\"country:USA\"),\n    dict(passport_field=\"email:john@example.com\"),\n    dict(passport_field=\"passportID:123456789\"),\n    dict(passport_field=\"birthdate:1990-01-01\"),\n    dict(passport_field=\"gender:male\"),\n    dict(passport_field=\"height:180cm\"),\n    dict(passport_field=\"weight:70kg\"),\n    dict(passport_field=\"eyeColor:brown\")\n]", "code": "def find_key(passport_field):\n    return passport_field.split(':')[0]\n", "func_name": "find_key", "exec_status": true, "example_inputs": ["\"{'passport_field': 'pid:123456789'}\"", "\"{'passport_field': 'hgt:193cm'}\"", "\"{'passport_field': 'hcl:#602927'}\"", "\"{'passport_field': 'ecl:gry'}\"", "\"{'passport_field': 'eyr:2029'}\"", "\"{'passport_field': 'iyr:2015'}\"", "\"{'passport_field': 'cid:350'}\"", "\"{'passport_field': 'byr:2002'}\"", "\"{'passport_field': 'hgt:60in'}\"", "\"{'passport_field': 'ecl:blu'}\""], "example_outputs": [{"return": "\"'pid'\""}, {"return": "\"'hgt'\""}, {"return": "\"'hcl'\""}, {"return": "\"'ecl'\""}, {"return": "\"'eyr'\""}, {"return": "\"'iyr'\""}, {"return": "\"'cid'\""}, {"return": "\"'byr'\""}, {"return": "\"'hgt'\""}, {"return": "\"'ecl'\""}, {"return": "\"'name'\""}, {"return": "\"'age'\""}, {"return": "\"'country'\""}, {"return": "\"'email'\""}, {"return": "\"'passport_number'\""}, {"return": "\"'issue_date'\""}, {"return": "\"'expiration_date'\""}, {"return": "\"'gender'\""}, {"return": "\"'height'\""}, {"return": "\"'eye_color'\""}, {"return": "\"'name'\""}, {"return": "\"'age'\""}, {"return": "\"'country'\""}, {"return": "\"'email'\""}, {"return": "\"'passportID'\""}, {"return": "\"'birthdate'\""}, {"return": "\"'gender'\""}, {"return": "\"'height'\""}, {"return": "\"'weight'\""}, {"return": "\"'eyeColor'\""}], "parsed_inputs": [[["passport_field", "\"pid:123456789\""]], [["passport_field", "\"hgt:193cm\""]], [["passport_field", "\"hcl:#602927\""]], [["passport_field", "\"ecl:gry\""]], [["passport_field", "\"eyr:2029\""]], [["passport_field", "\"iyr:2015\""]], [["passport_field", "\"cid:350\""]], [["passport_field", "\"byr:2002\""]], [["passport_field", "\"hgt:60in\""]], [["passport_field", "\"ecl:blu\""]]], "exec_code": "def find_key(passport_field):\n    return passport_field.split(':')[0]\n", "output": "The function is:\n\n```python\ndef find_key(passport_field):\n    return passport_field.split(':')[0]\n\n```", "choosed_example_idx": [5, 7, 4, 8, 6, 2, 9, 0], "prompt": "Input: dict(passport_field=\"iyr:2015\"), Output: \"'iyr'\"\nInput: dict(passport_field=\"byr:2002\"), Output: \"'byr'\"\nInput: dict(passport_field=\"eyr:2029\"), Output: \"'eyr'\"\nInput: dict(passport_field=\"hgt:60in\"), Output: \"'hgt'\"\nInput: dict(passport_field=\"cid:350\"), Output: \"'cid'\"\nInput: dict(passport_field=\"hcl:#602927\"), Output: \"'hcl'\"\nInput: dict(passport_field=\"ecl:blu\"), Output: \"'ecl'\"\nInput: dict(passport_field=\"pid:123456789\"), Output: \"'pid'\"\n\nFunction: find_key\n\n\nWrite a function that generates the output from the input.\n\n", "id": "26e67debc2c89dcc3ef76ff9ce2ec1a4c40d2bc3_0"}
{"example_str": "examples = [\n    dict(f=0.0),\n    dict(f=1.23),\n    dict(f=-4.56),\n    dict(f=1.234e5),\n    dict(f=-9.876e-3),\n    dict(f=1.0),\n    dict(f=-0.5),\n    dict(f=123.456),\n    dict(f=-0.000012),\n    dict(f=123456.789),\n]\nexamples += [\n    dict(f=0.000123),  # very small positive number\n    dict(f=-0.000456),  # very small negative number\n    dict(f=123456.0),  # large positive number\n    dict(f=-123456.0),  # large negative number\n    dict(f=1.2345e-10),  # positive number in scientific notation, small\n    dict(f=-1.2345e-10),  # negative number in scientific notation, small\n    dict(f=1.2345e+6),  # positive number in scientific notation, large\n    dict(f=-1.2345e+6),  # negative number in scientific notation, large\n    dict(f=0.0),  # zero\n    dict(f=3.141592653589793)  # pi, a common mathematical constant\n]\nexamples += [\n    dict(f=0.000123),  # very small positive number\n    dict(f=-0.000456),  # very small negative number\n    dict(f=123456.0),  # large positive number\n    dict(f=-123456.0),  # large negative number\n    dict(f=1.2345e-10),  # positive number in scientific notation, small\n    dict(f=-1.2345e-10),  # negative number in scientific notation, small\n    dict(f=1.2345e+6),  # positive number in scientific notation, large\n    dict(f=-1.2345e+6),  # negative number in scientific notation, large\n    dict(f=0.0),  # zero\n    dict(f=3.141592653589793),  # pi\n]", "code": "def cc1(f):\n    float_string = repr(f)\n    if 'e' in float_string:\n        digits, exp = float_string.split('e')\n        digits = digits.replace('.', '').replace('-', '')\n        exp = int(exp)\n        zero_padding = '0' * (abs(int(exp)) - 1)\n        sign = '-' if f < 0 else ''\n        if exp > 0:\n            float_string = '{}{}{}.0'.format(sign, digits, zero_padding)\n        else:\n            float_string = '{}0.{}{}'.format(sign, zero_padding, digits)\n    return float_string\n", "func_name": "cc1", "exec_status": true, "example_inputs": ["\"{'f': 0.0}\"", "\"{'f': 1.23}\"", "\"{'f': -4.56}\"", "\"{'f': 123400.0}\"", "\"{'f': -0.009876}\"", "\"{'f': 1.0}\"", "\"{'f': -0.5}\"", "\"{'f': 123.456}\"", "\"{'f': -1.2e-05}\"", "\"{'f': 123456.789}\""], "example_outputs": [{"return": "\"'0.0'\""}, {"return": "\"'1.23'\""}, {"return": "\"'-4.56'\""}, {"return": "\"'123400.0'\""}, {"return": "\"'-0.009876'\""}, {"return": "\"'1.0'\""}, {"return": "\"'-0.5'\""}, {"return": "\"'123.456'\""}, {"return": "\"'-0.000012'\""}, {"return": "\"'123456.789'\""}, {"return": "\"'0.000123'\""}, {"return": "\"'-0.000456'\""}, {"return": "\"'123456.0'\""}, {"return": "\"'-123456.0'\""}, {"return": "\"'0.00000000012345'\""}, {"return": "\"'-0.00000000012345'\""}, {"return": "\"'1234500.0'\""}, {"return": "\"'-1234500.0'\""}, {"return": "\"'0.0'\""}, {"return": "\"'3.141592653589793'\""}, {"return": "\"'0.000123'\""}, {"return": "\"'-0.000456'\""}, {"return": "\"'123456.0'\""}, {"return": "\"'-123456.0'\""}, {"return": "\"'0.00000000012345'\""}, {"return": "\"'-0.00000000012345'\""}, {"return": "\"'1234500.0'\""}, {"return": "\"'-1234500.0'\""}, {"return": "\"'0.0'\""}, {"return": "\"'3.141592653589793'\""}], "parsed_inputs": [[["f", "0.0"]], [["f", "1.23"]], [["f", "-4.56"]], [["f", "123400.0"]], [["f", "-0.009876"]], [["f", "1.0"]], [["f", "-0.5"]], [["f", "123.456"]], [["f", "-1.2e-05"]], [["f", "123456.789"]]], "exec_code": "def cc1(f):\n    float_string = repr(f)\n    if 'e' in float_string:\n        digits, exp = float_string.split('e')\n        digits = digits.replace('.', '').replace('-', '')\n        exp = int(exp)\n        zero_padding = '0' * (abs(int(exp)) - 1)\n        sign = '-' if f < 0 else ''\n        if exp > 0:\n            float_string = '{}{}{}.0'.format(sign, digits, zero_padding)\n        else:\n            float_string = '{}0.{}{}'.format(sign, zero_padding, digits)\n    return float_string\n", "output": "The function is:\n\n```python\ndef cc1(f):\n    float_string = repr(f)\n    if 'e' in float_string:\n        digits, exp = float_string.split('e')\n        digits = digits.replace('.', '').replace('-', '')\n        exp = int(exp)\n        zero_padding = '0' * (abs(int(exp)) - 1)\n        sign = '-' if f < 0 else ''\n        if exp > 0:\n            float_string = '{}{}{}.0'.format(sign, digits, zero_padding)\n        else:\n            float_string = '{}0.{}{}'.format(sign, zero_padding, digits)\n    return float_string\n\n```", "choosed_example_idx": [8, 1, 0, 6, 3], "prompt": "Function: cc1\nWrite a function that generates the output from the input.\nInput: dict(f=-1.2e-05), Output: \"'-0.000012'\"\nInput: dict(f=1.23), Output: \"'1.23'\"\nInput: dict(f=0.0), Output: \"'0.0'\"\nInput: dict(f=-0.5), Output: \"'-0.5'\"\nInput: dict(f=123400.0), Output: \"'123400.0'\"\n\n", "id": "50b3783277d88b392ebffa8781fc72b5370b8f9b_0"}
{"example_str": "examples = [\n    dict(data=[1, 2, 3, 4, 5]),\n    dict(data=(\"apple\", \"banana\", \"cherry\")),\n    dict(data=[\"hello\", \"world\", 1, 2, 3]),\n    dict(data=(\"a\", 1, \"b\", 2)),\n    dict(data=123),\n    dict(data=\"hello\"),\n    dict(data=True),\n    dict(data=[1, \"a\", 2, \"b\"]),\n    dict(data=(\"x\", \"y\", \"z\", 1, 2, 3)),\n    dict(data=[\"x\", \"y\", \"z\"]),\n]\nexamples += [\n    dict(data=[1, 2, 3]),  # All elements are integers\n    dict(data=(1, \"two\", 3.0)),  # Elements are of types int, str, and float\n    dict(data=\"hello\"),  # A single string, not a list or tuple\n    dict(data=[1, 1.0, 1+0j]),  # Int, float, and complex which are considered different types\n    dict(data=[]),  # An empty list\n    dict(data=(True, False)),  # Tuple with boolean values\n    dict(data=[None, None, None]),  # List with NoneType elements\n    dict(data=[{\"key\": \"value\"}, {\"key\": \"value\"}]),  # List of dictionaries\n    dict(data=(1.0, 2.0, 3.0)),  # Tuple with all floats\n    dict(data=[set([1]), frozenset([1])])  # List with set and frozenset\n]\nexamples += [\n    dict(data=(1, 2, 3)),  # Tuple of integers\n    dict(data=[1, 'a', 3.5]),  # List with an integer, string, and float\n    dict(data='Hello'),  # String\n    dict(data=123),  # Integer\n    dict(data=[1, 1, 1]),  # List of integers\n    dict(data=(1.1, 2.2, 3.3)),  # Tuple of floats\n    dict(data={'key': 'value'}),  # Dictionary\n    dict(data=[True, False, True]),  # List of booleans\n    dict(data=(None, None)),  # Tuple with NoneType\n    dict(data=[(1, 2), [3, 4], {5, 6}])  # List with tuple, list, and set\n]", "code": "def TypeAnalize(data):\n    lst = []\n    if type(data) is tuple or type(data) is list:\n        for i in data:\n            if type(i) not in lst:\n                lst.append(type(i))\n        return len(lst)\n    else:\n        return type(data)\n", "func_name": "TypeAnalize", "exec_status": true, "example_inputs": ["\"{'data': [1, 2, 3, 4, 5]}\"", "\"{'data': ('apple', 'banana', 'cherry')}\"", "\"{'data': ['hello', 'world', 1, 2, 3]}\"", "\"{'data': ('a', 1, 'b', 2)}\"", "\"{'data': 123}\"", "\"{'data': 'hello'}\"", "\"{'data': True}\"", "\"{'data': [1, 'a', 2, 'b']}\"", "\"{'data': ('x', 'y', 'z', 1, 2, 3)}\"", "\"{'data': ['x', 'y', 'z']}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"<class 'int'>\""}, {"return": "\"<class 'str'>\""}, {"return": "\"<class 'bool'>\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"<class 'str'>\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"<class 'str'>\""}, {"return": "\"<class 'int'>\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"<class 'dict'>\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"3\""}], "parsed_inputs": [[["data", "[1, 2, 3, 4, 5]"]], [["data", "('apple', 'banana', 'cherry')"]], [["data", "['hello', 'world', 1, 2, 3]"]], [["data", "('a', 1, 'b', 2)"]], [["data", "123"]], [["data", "\"hello\""]], [["data", "True"]], [["data", "[1, 'a', 2, 'b']"]], [["data", "('x', 'y', 'z', 1, 2, 3)"]], [["data", "['x', 'y', 'z']"]]], "exec_code": "def TypeAnalize(data):\n    lst = []\n    if type(data) is tuple or type(data) is list:\n        for i in data:\n            if type(i) not in lst:\n                lst.append(type(i))\n        return len(lst)\n    else:\n        return type(data)\n", "output": "The function is:\n\n```python\ndef TypeAnalize(data):\n    lst = []\n    if type(data) is tuple or type(data) is list:\n        for i in data:\n            if type(i) not in lst:\n                lst.append(type(i))\n        return len(lst)\n    else:\n        return type(data)\n\n```", "choosed_example_idx": [9, 3, 4, 6, 2], "prompt": "Function: TypeAnalize\nInput: dict(data=['x', 'y', 'z']), Output: \"1\"\nInput: dict(data=('a', 1, 'b', 2)), Output: \"2\"\nInput: dict(data=123), Output: \"<class 'int'>\"\nInput: dict(data=True), Output: \"<class 'bool'>\"\nInput: dict(data=['hello', 'world', 1, 2, 3]), Output: \"2\"\n\nWrite a function that generates the output from the input.\n", "id": "03ac05ab323fc7d5d57d89093a5ed35245e8bb26_0"}
{"example_str": "examples = [\n    dict(rcvpkt=[1, 2, 3], expectedSeqnum=1),\n    dict(rcvpkt=[2, 3, 4], expectedSeqnum=2),\n    dict(rcvpkt=[5], expectedSeqnum=5),\n    dict(rcvpkt=[10, 20, 30], expectedSeqnum=10),\n    dict(rcvpkt=[1, 2, 3], expectedSeqnum=2),\n    dict(rcvpkt=[4, 5, 6], expectedSeqnum=3),\n    dict(rcvpkt=[7, 8, 9], expectedSeqnum=7),\n    dict(rcvpkt=[11, 12, 13], expectedSeqnum=12),\n    dict(rcvpkt=[15], expectedSeqnum=15),\n    dict(rcvpkt=[20, 21, 22], expectedSeqnum=21),\n]\nexamples += [\n    dict(rcvpkt=[1], expectedSeqnum=1),\n    dict(rcvpkt=[2], expectedSeqnum=1),\n    dict(rcvpkt=[1, 2, 3], expectedSeqnum=1),\n    dict(rcvpkt=[0], expectedSeqnum=1),\n    dict(rcvpkt=['a'], expectedSeqnum='a'),\n    dict(rcvpkt=['a', 'b'], expectedSeqnum='b'),\n    dict(rcvpkt=[True], expectedSeqnum=True),\n    dict(rcvpkt=[None], expectedSeqnum=None),\n    dict(rcvpkt=[5.5], expectedSeqnum=5.5),\n    dict(rcvpkt=[10, 20, 30], expectedSeqnum=10)\n]\nexamples += [\n    dict(rcvpkt=[1], expectedSeqnum=1),\n    dict(rcvpkt=[2], expectedSeqnum=1),\n    dict(rcvpkt=[3], expectedSeqnum=3),\n    dict(rcvpkt=[4, 5, 6], expectedSeqnum=4),\n    dict(rcvpkt=[0, 1, 2], expectedSeqnum=0),\n    dict(rcvpkt=[10, 20, 30], expectedSeqnum=10),\n    dict(rcvpkt=[99], expectedSeqnum=99),\n    dict(rcvpkt=[-1, -2, -3], expectedSeqnum=-1),\n    dict(rcvpkt=[100, 200, 300], expectedSeqnum=100),\n    dict(rcvpkt=[5, 10, 15], expectedSeqnum=5)\n]", "code": "def hasSeqnum(rcvpkt, expectedSeqnum):\n    if rcvpkt[0] == expectedSeqnum:\n        return True\n    else:\n        return False\n", "func_name": "hasSeqnum", "exec_status": true, "example_inputs": ["\"{'rcvpkt': [1, 2, 3], 'expectedSeqnum': 1}\"", "\"{'rcvpkt': [2, 3, 4], 'expectedSeqnum': 2}\"", "\"{'rcvpkt': [5], 'expectedSeqnum': 5}\"", "\"{'rcvpkt': [10, 20, 30], 'expectedSeqnum': 10}\"", "\"{'rcvpkt': [1, 2, 3], 'expectedSeqnum': 2}\"", "\"{'rcvpkt': [4, 5, 6], 'expectedSeqnum': 3}\"", "\"{'rcvpkt': [7, 8, 9], 'expectedSeqnum': 7}\"", "\"{'rcvpkt': [11, 12, 13], 'expectedSeqnum': 12}\"", "\"{'rcvpkt': [15], 'expectedSeqnum': 15}\"", "\"{'rcvpkt': [20, 21, 22], 'expectedSeqnum': 21}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}], "parsed_inputs": [[["rcvpkt", "[1, 2, 3]"], ["expectedSeqnum", "1"]], [["rcvpkt", "[2, 3, 4]"], ["expectedSeqnum", "2"]], [["rcvpkt", "[5]"], ["expectedSeqnum", "5"]], [["rcvpkt", "[10, 20, 30]"], ["expectedSeqnum", "10"]], [["rcvpkt", "[1, 2, 3]"], ["expectedSeqnum", "2"]], [["rcvpkt", "[4, 5, 6]"], ["expectedSeqnum", "3"]], [["rcvpkt", "[7, 8, 9]"], ["expectedSeqnum", "7"]], [["rcvpkt", "[11, 12, 13]"], ["expectedSeqnum", "12"]], [["rcvpkt", "[15]"], ["expectedSeqnum", "15"]], [["rcvpkt", "[20, 21, 22]"], ["expectedSeqnum", "21"]]], "exec_code": "def hasSeqnum(rcvpkt, expectedSeqnum):\n    if rcvpkt[0] == expectedSeqnum:\n        return True\n    else:\n        return False\n", "output": "The function is:\n\n```python\ndef hasSeqnum(rcvpkt, expectedSeqnum):\n    if rcvpkt[0] == expectedSeqnum:\n        return True\n    else:\n        return False\n\n```", "choosed_example_idx": [7, 3, 5, 9, 6, 2, 4, 1, 8], "prompt": "Function: hasSeqnum\nWrite a function that generates the output from the input.\n\nInput: dict(rcvpkt=[11, 12, 13], expectedSeqnum=12), Output: \"False\"\nInput: dict(rcvpkt=[10, 20, 30], expectedSeqnum=10), Output: \"True\"\nInput: dict(rcvpkt=[4, 5, 6], expectedSeqnum=3), Output: \"False\"\nInput: dict(rcvpkt=[20, 21, 22], expectedSeqnum=21), Output: \"False\"\nInput: dict(rcvpkt=[7, 8, 9], expectedSeqnum=7), Output: \"True\"\nInput: dict(rcvpkt=[5], expectedSeqnum=5), Output: \"True\"\nInput: dict(rcvpkt=[1, 2, 3], expectedSeqnum=2), Output: \"False\"\nInput: dict(rcvpkt=[2, 3, 4], expectedSeqnum=2), Output: \"True\"\nInput: dict(rcvpkt=[15], expectedSeqnum=15), Output: \"True\"\n\n", "id": "6d13da457fe6544fb3ff3a63fdb07a9498e90821_0"}
{"example_str": "examples = [\n    dict(actions=[\"hello\", \"WORLD\", \"abc\"]),\n    dict(actions=[\"Hello\", \"World\", \"ABC\"]),\n    dict(actions=[\"hello\", \"world\", \"abc\"]),\n    dict(actions=[\"HELLO\", \"WORLD\", \"ABC\"]),\n    dict(actions=[\"hElLo\", \"wOrLd\", \"aBc\"]),\n    dict(actions=[\"hello\"]),\n    dict(actions=[\"WORLD\"]),\n    dict(actions=[\"\"]),\n    dict(actions=[\"hello\", \"world\"]),\n    dict(actions=[\"HELLO\", \"WORLD\"]),\n    dict(actions=[]),\n]\nexamples += [\n    dict(actions=\"helloWorld\"),  # Contains 9 lowercase letters\n    dict(actions=\"HELLOWORLD\"),  # Contains 0 lowercase letters\n    dict(actions=\"123abcXYZ\"),   # Contains 3 lowercase letters\n    dict(actions=\"\"),            # Contains 0 lowercase letters (empty string)\n    dict(actions=\"Python3.8\"),   # Contains 5 lowercase letters\n    dict(actions=\"lowerCASE\"),   # Contains 5 lowercase letters\n    dict(actions=\"1234567890\"),  # Contains 0 lowercase letters\n    dict(actions=\"!@#$%^&*()\"),  # Contains 0 lowercase letters\n    dict(actions=\"camelCaseIsUsed\"),  # Contains 11 lowercase letters\n    dict(actions=\"ALLUPPERCASE\"),  # Contains 0 lowercase letters\n]\nexamples += [\n    dict(actions=\"abcDEF\"),\n    dict(actions=\"123abc\"),\n    dict(actions=\"XYZ\"),\n    dict(actions=\"helloWorld\"),\n    dict(actions=\"\"),\n    dict(actions=\"Python3\"),\n    dict(actions=\"lowerCASE\"),\n    dict(actions=\"UPPERlower\"),\n    dict(actions=\"1234567890\"),\n    dict(actions=\"mixedUP123\")\n]", "code": "def cost(actions):\n    \"\"\"A cost function\"\"\"\n    return len([x for x in actions if x.islower()])\n", "func_name": "cost", "exec_status": true, "example_inputs": ["\"{'actions': ['hello', 'WORLD', 'abc']}\"", "\"{'actions': ['Hello', 'World', 'ABC']}\"", "\"{'actions': ['hello', 'world', 'abc']}\"", "\"{'actions': ['HELLO', 'WORLD', 'ABC']}\"", "\"{'actions': ['hElLo', 'wOrLd', 'aBc']}\"", "\"{'actions': ['hello']}\"", "\"{'actions': ['WORLD']}\"", "\"{'actions': ['']}\"", "\"{'actions': ['hello', 'world']}\"", "\"{'actions': ['HELLO', 'WORLD']}\"", "\"{'actions': []}\""], "example_outputs": [{"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"9\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"12\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"9\""}, {"return": "\"0\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"5\""}], "parsed_inputs": [[["actions", "['hello', 'WORLD', 'abc']"]], [["actions", "['Hello', 'World', 'ABC']"]], [["actions", "['hello', 'world', 'abc']"]], [["actions", "['HELLO', 'WORLD', 'ABC']"]], [["actions", "['hElLo', 'wOrLd', 'aBc']"]], [["actions", "['hello']"]], [["actions", "['WORLD']"]], [["actions", "['']"]], [["actions", "['hello', 'world']"]], [["actions", "['HELLO', 'WORLD']"]], [["actions", "[]"]]], "exec_code": "def cost(actions):\n    \"\"\"A cost function\"\"\"\n    return len([x for x in actions if x.islower()])\n", "output": "The function is:\n\n```python\ndef cost(actions):\n    \"\"\"A cost function\"\"\"\n    return len([x for x in actions if x.islower()])\n\n```", "choosed_example_idx": [6, 2, 5, 3], "prompt": "Input: dict(actions=['WORLD']), Output: \"0\"\nInput: dict(actions=['hello', 'world', 'abc']), Output: \"3\"\nInput: dict(actions=['hello']), Output: \"1\"\nInput: dict(actions=['HELLO', 'WORLD', 'ABC']), Output: \"0\"\n\nFunction: cost\nWrite a function that generates the output from the input.\n", "id": "91998d01ca3ea7c84a51204278da575eef13597d_0"}
{"example_str": "examples = [\n    dict(tmp={'2020': 10, '2021': 20, '2022': 30}),\n    dict(tmp={'2010': 5, '2011': 10, '2012': 15}),\n    dict(tmp={'2000': 100, '2001': 200, '2002': 300}),\n    dict(tmp={'1990': 50, '1991': 60, '1992': 70}),\n    dict(tmp={'1980': 1, '1981': 2, '1982': 3}),\n    dict(tmp={'1970': 400, '1971': 500, '1972': 600}),\n    dict(tmp={'1960': 7, '1961': 8, '1962': 9}),\n    dict(tmp={'1950': 11, '1951': 12, '1952': 13}),\n    dict(tmp={'1940': 14, '1941': 15, '1942': 16}),\n    dict(tmp={'1930': 17, '1931': 18, '1932': 19}),\n]\nexamples += [\n    dict(tmp={2020: 100, 2021: 200, 2022: 300}),\n    dict(tmp={\"1990\": 150, \"1991\": 250}),\n    dict(tmp={2000: \"low\", 2001: \"medium\", 2002: \"high\"}),\n    dict(tmp={}),\n    dict(tmp={1980: 50.5, 1981: 60.75}),\n    dict(tmp={\"year1\": 10, \"year2\": 20}),\n    dict(tmp={1995: None, 1996: None}),\n    dict(tmp={2010: [10, 20], 2011: [30, 40]}),\n    dict(tmp={2023: {\"sales\": 500, \"profit\": 50}}),\n    dict(tmp={1700: True, 1800: False})\n]\nexamples += [\n    dict(tmp={2020: 100, 2021: 200}),\n    dict(tmp={'2019': 'low', '2020': 'high'}),\n    dict(tmp={2015: 150, 2016: 160, 2017: 170}),\n    dict(tmp={'1990': 300, '1991': 310, '1992': 320, '1993': 330}),\n    dict(tmp={2001: 'a', 2002: 'b', 2003: 'c'}),\n    dict(tmp={1980: 50, 1981: 60, 1982: 70, 1983: 80, 1984: 90}),\n    dict(tmp={'2005': 500}),\n    dict(tmp={2010: 1000, 2011: 1100, 2012: 1200, 2013: 1300, 2014: 1400}),\n    dict(tmp={'2000': 'X', '2001': 'Y', '2002': 'Z'}),\n    dict(tmp={1995: 95, 1996: 96, 1997: 97, 1998: 98, 1999: 99})\n]", "code": "def convert_to_payload(tmp):\n    payload = []\n    for year, value in zip(tmp.keys(), tmp.values()):\n        payload.append({'year': year, 'value': value})\n    return payload\n", "func_name": "convert_to_payload", "exec_status": true, "example_inputs": ["\"{'tmp': {'2020': 10, '2021': 20, '2022': 30}}\"", "\"{'tmp': {'2010': 5, '2011': 10, '2012': 15}}\"", "\"{'tmp': {'2000': 100, '2001': 200, '2002': 300}}\"", "\"{'tmp': {'1990': 50, '1991': 60, '1992': 70}}\"", "\"{'tmp': {'1980': 1, '1981': 2, '1982': 3}}\"", "\"{'tmp': {'1970': 400, '1971': 500, '1972': 600}}\"", "\"{'tmp': {'1960': 7, '1961': 8, '1962': 9}}\"", "\"{'tmp': {'1950': 11, '1951': 12, '1952': 13}}\"", "\"{'tmp': {'1940': 14, '1941': 15, '1942': 16}}\"", "\"{'tmp': {'1930': 17, '1931': 18, '1932': 19}}\""], "example_outputs": [{"return": "\"[{'year': '2020', 'value': 10}, {'year': '2021', 'value': 20}, {'year': '2022', 'value': 30}]\""}, {"return": "\"[{'year': '2010', 'value': 5}, {'year': '2011', 'value': 10}, {'year': '2012', 'value': 15}]\""}, {"return": "\"[{'year': '2000', 'value': 100}, {'year': '2001', 'value': 200}, {'year': '2002', 'value': 300}]\""}, {"return": "\"[{'year': '1990', 'value': 50}, {'year': '1991', 'value': 60}, {'year': '1992', 'value': 70}]\""}, {"return": "\"[{'year': '1980', 'value': 1}, {'year': '1981', 'value': 2}, {'year': '1982', 'value': 3}]\""}, {"return": "\"[{'year': '1970', 'value': 400}, {'year': '1971', 'value': 500}, {'year': '1972', 'value': 600}]\""}, {"return": "\"[{'year': '1960', 'value': 7}, {'year': '1961', 'value': 8}, {'year': '1962', 'value': 9}]\""}, {"return": "\"[{'year': '1950', 'value': 11}, {'year': '1951', 'value': 12}, {'year': '1952', 'value': 13}]\""}, {"return": "\"[{'year': '1940', 'value': 14}, {'year': '1941', 'value': 15}, {'year': '1942', 'value': 16}]\""}, {"return": "\"[{'year': '1930', 'value': 17}, {'year': '1931', 'value': 18}, {'year': '1932', 'value': 19}]\""}, {"return": "\"[{'year': 2020, 'value': 100}, {'year': 2021, 'value': 200}, {'year': 2022, 'value': 300}]\""}, {"return": "\"[{'year': '1990', 'value': 150}, {'year': '1991', 'value': 250}]\""}, {"return": "\"[{'year': 2000, 'value': 'low'}, {'year': 2001, 'value': 'medium'}, {'year': 2002, 'value': 'high'}]\""}, {"return": "\"[]\""}, {"return": "\"[{'year': 1980, 'value': 50.5}, {'year': 1981, 'value': 60.75}]\""}, {"return": "\"[{'year': 'year1', 'value': 10}, {'year': 'year2', 'value': 20}]\""}, {"return": "\"[{'year': 1995, 'value': None}, {'year': 1996, 'value': None}]\""}, {"return": "\"[{'year': 2010, 'value': [10, 20]}, {'year': 2011, 'value': [30, 40]}]\""}, {"return": "\"[{'year': 2023, 'value': {'sales': 500, 'profit': 50}}]\""}, {"return": "\"[{'year': 1700, 'value': True}, {'year': 1800, 'value': False}]\""}, {"return": "\"[{'year': 2020, 'value': 100}, {'year': 2021, 'value': 200}]\""}, {"return": "\"[{'year': '2019', 'value': 'low'}, {'year': '2020', 'value': 'high'}]\""}, {"return": "\"[{'year': 2015, 'value': 150}, {'year': 2016, 'value': 160}, {'year': 2017, 'value': 170}]\""}, {"return": "\"[{'year': '1990', 'value': 300}, {'year': '1991', 'value': 310}, {'year': '1992', 'value': 320}, {'year': '1993', 'value': 330}]\""}, {"return": "\"[{'year': 2001, 'value': 'a'}, {'year': 2002, 'value': 'b'}, {'year': 2003, 'value': 'c'}]\""}, {"return": "\"[{'year': 1980, 'value': 50}, {'year': 1981, 'value': 60}, {'year': 1982, 'value': 70}, {'year': 1983, 'value': 80}, {'year': 1984, 'value': 90}]\""}, {"return": "\"[{'year': '2005', 'value': 500}]\""}, {"return": "\"[{'year': 2010, 'value': 1000}, {'year': 2011, 'value': 1100}, {'year': 2012, 'value': 1200}, {'year': 2013, 'value': 1300}, {'year': 2014, 'value': 1400}]\""}, {"return": "\"[{'year': '2000', 'value': 'X'}, {'year': '2001', 'value': 'Y'}, {'year': '2002', 'value': 'Z'}]\""}, {"return": "\"[{'year': 1995, 'value': 95}, {'year': 1996, 'value': 96}, {'year': 1997, 'value': 97}, {'year': 1998, 'value': 98}, {'year': 1999, 'value': 99}]\""}], "parsed_inputs": [[["tmp", "{'2020': 10, '2021': 20, '2022': 30}"]], [["tmp", "{'2010': 5, '2011': 10, '2012': 15}"]], [["tmp", "{'2000': 100, '2001': 200, '2002': 300}"]], [["tmp", "{'1990': 50, '1991': 60, '1992': 70}"]], [["tmp", "{'1980': 1, '1981': 2, '1982': 3}"]], [["tmp", "{'1970': 400, '1971': 500, '1972': 600}"]], [["tmp", "{'1960': 7, '1961': 8, '1962': 9}"]], [["tmp", "{'1950': 11, '1951': 12, '1952': 13}"]], [["tmp", "{'1940': 14, '1941': 15, '1942': 16}"]], [["tmp", "{'1930': 17, '1931': 18, '1932': 19}"]]], "exec_code": "def convert_to_payload(tmp):\n    payload = []\n    for year, value in zip(tmp.keys(), tmp.values()):\n        payload.append({'year': year, 'value': value})\n    return payload\n", "output": "The function is:\n\n```python\ndef convert_to_payload(tmp):\n    payload = []\n    for year, value in zip(tmp.keys(), tmp.values()):\n        payload.append({'year': year, 'value': value})\n    return payload\n\n```", "choosed_example_idx": [0, 5, 6, 3, 8, 9], "prompt": "Function: convert_to_payload\nInput: dict(tmp={'2020': 10, '2021': 20, '2022': 30}), Output: \"[{'year': '2020', 'value': 10}, {'year': '2021', 'value': 20}, {'year': '2022', 'value': 30}]\"\nInput: dict(tmp={'1970': 400, '1971': 500, '1972': 600}), Output: \"[{'year': '1970', 'value': 400}, {'year': '1971', 'value': 500}, {'year': '1972', 'value': 600}]\"\nInput: dict(tmp={'1960': 7, '1961': 8, '1962': 9}), Output: \"[{'year': '1960', 'value': 7}, {'year': '1961', 'value': 8}, {'year': '1962', 'value': 9}]\"\nInput: dict(tmp={'1990': 50, '1991': 60, '1992': 70}), Output: \"[{'year': '1990', 'value': 50}, {'year': '1991', 'value': 60}, {'year': '1992', 'value': 70}]\"\nInput: dict(tmp={'1940': 14, '1941': 15, '1942': 16}), Output: \"[{'year': '1940', 'value': 14}, {'year': '1941', 'value': 15}, {'year': '1942', 'value': 16}]\"\nInput: dict(tmp={'1930': 17, '1931': 18, '1932': 19}), Output: \"[{'year': '1930', 'value': 17}, {'year': '1931', 'value': 18}, {'year': '1932', 'value': 19}]\"\n\n\n\nWrite a function that generates the output from the input.\n", "id": "b8cbe2b42726f8855e49b8fd44fd250f444dc93d_0"}
{"example_str": "examples = [\n    dict(brown=10, yellow=2),\n    dict(brown=8, yellow=1),\n    dict(brown=24, yellow=12),\n    dict(brown=18, yellow=6),\n    dict(brown=12, yellow=4),\n    dict(brown=20, yellow=8),\n    dict(brown=16, yellow=6),\n    dict(brown=22, yellow=10),\n    dict(brown=14, yellow=5),\n    dict(brown=30, yellow=20),\n]\nexamples += [\n    dict(brown=10, yellow=2),\n    dict(brown=24, yellow=24),\n    dict(brown=12, yellow=4),\n    dict(brown=8, yellow=1),\n    dict(brown=18, yellow=6),\n    dict(brown=26, yellow=24),\n    dict(brown=14, yellow=4),\n    dict(brown=22, yellow=15),\n    dict(brown=30, yellow=36),\n    dict(brown=32, yellow=64)\n]\nexamples += [\n    dict(brown=10, yellow=2),\n    dict(brown=24, yellow=24),\n    dict(brown=12, yellow=4),\n    dict(brown=8, yellow=1),\n    dict(brown=18, yellow=6),\n    dict(brown=14, yellow=4),\n    dict(brown=26, yellow=10),\n    dict(brown=22, yellow=8),\n    dict(brown=30, yellow=16),\n    dict(brown=50, yellow=22)\n]", "code": "def solution(brown, yellow):\n    for a in range(1, int(yellow ** 0.5) + 1):\n        if not yellow % a:\n            b = yellow // a\n            if 2 * a + 2 * b + 4 == brown:\n                return [b + 2, a + 2]\n", "func_name": "solution", "exec_status": true, "example_inputs": ["\"{'brown': 10, 'yellow': 2}\"", "\"{'brown': 8, 'yellow': 1}\"", "\"{'brown': 24, 'yellow': 12}\"", "\"{'brown': 18, 'yellow': 6}\"", "\"{'brown': 12, 'yellow': 4}\"", "\"{'brown': 20, 'yellow': 8}\"", "\"{'brown': 16, 'yellow': 6}\"", "\"{'brown': 22, 'yellow': 10}\"", "\"{'brown': 14, 'yellow': 5}\"", "\"{'brown': 30, 'yellow': 20}\""], "example_outputs": [{"return": "\"[4, 3]\""}, {"return": "\"[3, 3]\""}, {"return": "\"None\""}, {"return": "\"[8, 3]\""}, {"return": "\"[4, 4]\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"[4, 3]\""}, {"return": "\"[8, 6]\""}, {"return": "\"[4, 4]\""}, {"return": "\"[3, 3]\""}, {"return": "\"[8, 3]\""}, {"return": "\"[10, 5]\""}, {"return": "\"[6, 3]\""}, {"return": "\"None\""}, {"return": "\"[11, 6]\""}, {"return": "\"None\""}, {"return": "\"[4, 3]\""}, {"return": "\"[8, 6]\""}, {"return": "\"[4, 4]\""}, {"return": "\"[3, 3]\""}, {"return": "\"[8, 3]\""}, {"return": "\"[6, 3]\""}, {"return": "\"[12, 3]\""}, {"return": "\"[10, 3]\""}, {"return": "\"None\""}, {"return": "\"[24, 3]\""}], "parsed_inputs": [[["brown", "10"], ["yellow", "2"]], [["brown", "8"], ["yellow", "1"]], [["brown", "24"], ["yellow", "12"]], [["brown", "18"], ["yellow", "6"]], [["brown", "12"], ["yellow", "4"]], [["brown", "20"], ["yellow", "8"]], [["brown", "16"], ["yellow", "6"]], [["brown", "22"], ["yellow", "10"]], [["brown", "14"], ["yellow", "5"]], [["brown", "30"], ["yellow", "20"]]], "exec_code": "def solution(brown, yellow):\n    for a in range(1, int(yellow ** 0.5) + 1):\n        if not yellow % a:\n            b = yellow // a\n            if 2 * a + 2 * b + 4 == brown:\n                return [b + 2, a + 2]\n", "output": "The function is:\n\n```python\ndef solution(brown, yellow):\n    for a in range(1, int(yellow ** 0.5) + 1):\n        if not yellow % a:\n            b = yellow // a\n            if 2 * a + 2 * b + 4 == brown:\n                return [b + 2, a + 2]\n\n```", "choosed_example_idx": [8, 1, 2, 5, 7, 0], "prompt": "Input: dict(brown=14, yellow=5), Output: \"None\"\nInput: dict(brown=8, yellow=1), Output: \"[3, 3]\"\nInput: dict(brown=24, yellow=12), Output: \"None\"\nInput: dict(brown=20, yellow=8), Output: \"None\"\nInput: dict(brown=22, yellow=10), Output: \"None\"\nInput: dict(brown=10, yellow=2), Output: \"[4, 3]\"\n\n\nWrite a function that generates the output from the input.\n\nFunction: solution\n", "id": "89242524d12acbfd6c7aec79954166b896692755_0"}
{"example_str": "examples = [\n    dict(o1=1, o2=2),  # valid integers\n    dict(o1=3, o2=4),  # valid integers\n    dict(o1=\"a\", o2=2),  # invalid type for o1\n    dict(o1=1, o2=\"b\"),  # invalid type for o2\n    dict(o1=5, o2=6),  # valid integers\n    dict(o1=None, o2=2),  # invalid type for o1\n    dict(o1=1, o2=None),  # invalid type for o2\n    dict(o1=7, o2=8),  # valid integers\n    dict(o1=\"c\", o2=\"d\"),  # invalid types for both o1 and o2\n    dict(o1=9, o2=10.5),  # invalid type for o2 (float instead of int)\n]\nexamples += [\n    dict(o1=5, o2=10),  # Both are integers\n    dict(o1=3, o2=-1),  # Both are integers, including a negative\n    dict(o1=0, o2=0),   # Both are zero\n    dict(o1=100, o2=200),  # Large integers\n    dict(o1=-50, o2=-100),  # Negative integers\n    dict(o1=7, o2=\"text\"),  # Second argument is a string\n    dict(o1=\"hello\", o2=5),  # First argument is a string\n    dict(o1=3.5, o2=2),  # First argument is a float\n    dict(o1=1, o2=2.5),  # Second argument is a float\n    dict(o1=None, o2=8)   # First argument is None\n]\nexamples += [\n    dict(o1=10, o2=20),  # valid integers\n    dict(o1=15, o2=25),  # valid integers\n    dict(o1=0, o2=0),    # valid integers, edge case of zero\n    dict(o1=-1, o2=-1),  # valid integers, negative numbers\n    dict(o1=100, o2=200), # valid integers, larger numbers\n    dict(o1=3, o2='a'),  # invalid, second argument is not an integer\n    dict(o1='b', o2=4),  # invalid, first argument is not an integer\n    dict(o1='5', o2='6'), # invalid, both arguments are strings\n    dict(o1=1.5, o2=2.5), # invalid, both arguments are floats\n    dict(o1=None, o2=10)  # invalid, first argument is None\n]", "code": "def int_check(o1, o2):\n    global MEASURE\n    if not (isinstance(o1, int) and isinstance(o2, int)):\n        MEASURE += 1\n        if MEASURE == 10:\n            return \"\"\" MAXIMUM CORE PUNCTUTIONS:\n\t\t\t\t\t\tusage: python .\\\\ex36.py ...\n\t\t\t\t\t\t\n\t\t\t\t\t\t*-> (extern __main__, class_alpha)\n\t\t\t\t\t\t*-> int_check(o1, o2):\n\t\t\t\t\t\t*-> print(recursive(__ main *& object*alpha __, __ main *& object*beta __))\n\t\t\t\t\t\t\n\t\t\t\t\t\tPROTOCOL MEASURES THREATENED:\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tCORE CONTAMINATION SIGMA ACTIVATE:\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t-----------------------------------\n\t\t\t\t\t\t\t-----------------------------------\n\t\t\t\t\t\t\t===================================\n\t\t\t\t\t\t\t===================================\n\t\t\t\t\t\t\t-----------------------------------\n\t\t\t\t\t\t\t-----------------------------------\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tCORE CONTAMINATION SIGMA NEUTRALIZED $$\n\t\t\t\t\t\t\n\t\t\t\t\t\t%% END SYSTEM REHABILIATATION \n\t\t\t\t\t\t%% END THREAT ANALYSIS POINTER\n\t\t\t\"\"\"\n        elif MEASURE == 11:\n            quit()\n        return \"\"\" FATAL ERROR OVERLOADED:\n\t\t\t\t\tusage: python .\\\\ex36.py ...\n\t\t\t\t\t\n\t\t\t\t\t*-> (extern __main__, class_alpha)\n\t\t\t\t\t*-> int_check(o1, o2):\n\t\t\t\t\t*-> print(recursive(__ main *& object*alpha __, __ main *& object*beta __))\n\t\t\t\t\n\t\t\t\t\tPROTOCOL MEASURSES BYPASSED:\n\t\t\t\t\t\tERROR CODE 11-34XZ-QT7:\n\t\t\t\t\t\t\tBYPASS MEASURES 1 times\n\t\t\t\t\t\n\t\t\t\t\t%% POWER GENERATION CATARCONIATION END %%\n\t\t\"\"\"\n    return o1 + o2\n", "func_name": "int_check", "exec_status": true, "example_inputs": ["\"{'o1': 1, 'o2': 2}\"", "\"{'o1': 3, 'o2': 4}\"", "\"{'o1': 'a', 'o2': 2}\"", "\"{'o1': 1, 'o2': 'b'}\"", "\"{'o1': 5, 'o2': 6}\"", "\"{'o1': None, 'o2': 2}\"", "\"{'o1': 1, 'o2': None}\"", "\"{'o1': 7, 'o2': 8}\"", "\"{'o1': 'c', 'o2': 'd'}\"", "\"{'o1': 9, 'o2': 10.5}\""], "example_outputs": [{"return": "\"3\""}, {"return": "\"7\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'MEASURE' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'MEASURE' is not defined\""}, {"return": "\"11\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'MEASURE' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'MEASURE' is not defined\""}, {"return": "\"15\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'MEASURE' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'MEASURE' is not defined\""}, {"return": "\"15\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"300\""}, {"return": "\"-150\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'MEASURE' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'MEASURE' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'MEASURE' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'MEASURE' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'MEASURE' is not defined\""}, {"return": "\"30\""}, {"return": "\"40\""}, {"return": "\"0\""}, {"return": "\"-2\""}, {"return": "\"300\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'MEASURE' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'MEASURE' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'MEASURE' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'MEASURE' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'MEASURE' is not defined\""}], "parsed_inputs": [[["o1", "1"], ["o2", "2"]], [["o1", "3"], ["o2", "4"]], [["o1", "\"a\""], ["o2", "2"]], [["o1", "1"], ["o2", "\"b\""]], [["o1", "5"], ["o2", "6"]], [["o1", "None"], ["o2", "2"]], [["o1", "1"], ["o2", "None"]], [["o1", "7"], ["o2", "8"]], [["o1", "\"c\""], ["o2", "\"d\""]], [["o1", "9"], ["o2", "10.5"]]], "exec_code": "def int_check(o1, o2):\n    global MEASURE\n    if not (isinstance(o1, int) and isinstance(o2, int)):\n        MEASURE += 1\n        if MEASURE == 10:\n            return \"\"\" MAXIMUM CORE PUNCTUTIONS:\n\t\t\t\t\t\tusage: python .\\\\ex36.py ...\n\t\t\t\t\t\t\n\t\t\t\t\t\t*-> (extern __main__, class_alpha)\n\t\t\t\t\t\t*-> int_check(o1, o2):\n\t\t\t\t\t\t*-> print(recursive(__ main *& object*alpha __, __ main *& object*beta __))\n\t\t\t\t\t\t\n\t\t\t\t\t\tPROTOCOL MEASURES THREATENED:\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tCORE CONTAMINATION SIGMA ACTIVATE:\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t-----------------------------------\n\t\t\t\t\t\t\t-----------------------------------\n\t\t\t\t\t\t\t===================================\n\t\t\t\t\t\t\t===================================\n\t\t\t\t\t\t\t-----------------------------------\n\t\t\t\t\t\t\t-----------------------------------\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tCORE CONTAMINATION SIGMA NEUTRALIZED $$\n\t\t\t\t\t\t\n\t\t\t\t\t\t%% END SYSTEM REHABILIATATION \n\t\t\t\t\t\t%% END THREAT ANALYSIS POINTER\n\t\t\t\"\"\"\n        elif MEASURE == 11:\n            quit()\n        return \"\"\" FATAL ERROR OVERLOADED:\n\t\t\t\t\tusage: python .\\\\ex36.py ...\n\t\t\t\t\t\n\t\t\t\t\t*-> (extern __main__, class_alpha)\n\t\t\t\t\t*-> int_check(o1, o2):\n\t\t\t\t\t*-> print(recursive(__ main *& object*alpha __, __ main *& object*beta __))\n\t\t\t\t\n\t\t\t\t\tPROTOCOL MEASURSES BYPASSED:\n\t\t\t\t\t\tERROR CODE 11-34XZ-QT7:\n\t\t\t\t\t\t\tBYPASS MEASURES 1 times\n\t\t\t\t\t\n\t\t\t\t\t%% POWER GENERATION CATARCONIATION END %%\n\t\t\"\"\"\n    return o1 + o2\n", "output": "The function is:\n\n```python\ndef int_check(o1, o2):\n    global MEASURE\n    if not (isinstance(o1, int) and isinstance(o2, int)):\n        MEASURE += 1\n        if MEASURE == 10:\n            return \"\"\" MAXIMUM CORE PUNCTUTIONS:\n\t\t\t\t\t\tusage: python .\\\\ex36.py ...\n\t\t\t\t\t\t\n\t\t\t\t\t\t*-> (extern __main__, class_alpha)\n\t\t\t\t\t\t*-> int_check(o1, o2):\n\t\t\t\t\t\t*-> print(recursive(__ main *& object*alpha __, __ main *& object*beta __))\n\t\t\t\t\t\t\n\t\t\t\t\t\tPROTOCOL MEASURES THREATENED:\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tCORE CONTAMINATION SIGMA ACTIVATE:\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t-----------------------------------\n\t\t\t\t\t\t\t-----------------------------------\n\t\t\t\t\t\t\t===================================\n\t\t\t\t\t\t\t===================================\n\t\t\t\t\t\t\t-----------------------------------\n\t\t\t\t\t\t\t-----------------------------------\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tCORE CONTAMINATION SIGMA NEUTRALIZED $$\n\t\t\t\t\t\t\n\t\t\t\t\t\t%% END SYSTEM REHABILIATATION \n\t\t\t\t\t\t%% END THREAT ANALYSIS POINTER\n\t\t\t\"\"\"\n        elif MEASURE == 11:\n            quit()\n        return \"\"\" FATAL ERROR OVERLOADED:\n\t\t\t\t\tusage: python .\\\\ex36.py ...\n\t\t\t\t\t\n\t\t\t\t\t*-> (extern __main__, class_alpha)\n\t\t\t\t\t*-> int_check(o1, o2):\n\t\t\t\t\t*-> print(recursive(__ main *& object*alpha __, __ main *& object*beta __))\n\t\t\t\t\n\t\t\t\t\tPROTOCOL MEASURSES BYPASSED:\n\t\t\t\t\t\tERROR CODE 11-34XZ-QT7:\n\t\t\t\t\t\t\tBYPASS MEASURES 1 times\n\t\t\t\t\t\n\t\t\t\t\t%% POWER GENERATION CATARCONIATION END %%\n\t\t\"\"\"\n    return o1 + o2\n\n```", "choosed_example_idx": [9, 8, 5, 0, 6, 4, 7], "prompt": "Input: dict(o1=9, o2=10.5), Output: \"<class 'NameError'>: name 'MEASURE' is not defined\"\nInput: dict(o1=\"c\", o2=\"d\"), Output: \"<class 'NameError'>: name 'MEASURE' is not defined\"\nInput: dict(o1=None, o2=2), Output: \"<class 'NameError'>: name 'MEASURE' is not defined\"\nInput: dict(o1=1, o2=2), Output: \"3\"\nInput: dict(o1=1, o2=None), Output: \"<class 'NameError'>: name 'MEASURE' is not defined\"\nInput: dict(o1=5, o2=6), Output: \"11\"\nInput: dict(o1=7, o2=8), Output: \"15\"\n\n\nWrite a function that generates the output from the input.\nFunction: int_check\n", "id": "f5c8f7b94e1cae63464d90f879be0adad87c1233_0"}
{"example_str": "examples = [\n    dict(n=8),\n    dict(n=16),\n    dict(n=32),\n    dict(n=64),\n    dict(n=128),\n    dict(n=1),\n    dict(n=3),\n    dict(n=5),\n    dict(n=10),\n    dict(n=0),\n]\nexamples += [\n    dict(n=1),    # 2^0\n    dict(n=2),    # 2^1\n    dict(n=8),    # 2^3\n    dict(n=16),   # 2^4\n    dict(n=1024), # 2^10\n    dict(n=0),    # Not a power of two, special case\n    dict(n=-2),   # Negative number, not a power of two\n    dict(n=31),   # Not a power of two\n    dict(n=64),   # 2^6\n    dict(n=127)   # Not a power of two\n]\nexamples += [\n    dict(n=1),\n    dict(n=2),\n    dict(n=4),\n    dict(n=8),\n    dict(n=16),\n    dict(n=32),\n    dict(n=64),\n    dict(n=128),\n    dict(n=256),\n    dict(n=512)\n]", "code": "def check_number_is_power_of_2(n):\n    return n & n - 1 == 0\n", "func_name": "check_number_is_power_of_2", "exec_status": true, "example_inputs": ["\"{'n': 8}\"", "\"{'n': 16}\"", "\"{'n': 32}\"", "\"{'n': 64}\"", "\"{'n': 128}\"", "\"{'n': 1}\"", "\"{'n': 3}\"", "\"{'n': 5}\"", "\"{'n': 10}\"", "\"{'n': 0}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}], "parsed_inputs": [[["n", "8"]], [["n", "16"]], [["n", "32"]], [["n", "64"]], [["n", "128"]], [["n", "1"]], [["n", "3"]], [["n", "5"]], [["n", "10"]], [["n", "0"]]], "exec_code": "def check_number_is_power_of_2(n):\n    return n & n - 1 == 0\n", "output": "The function is:\n\n```python\ndef check_number_is_power_of_2(n):\n    return n & n - 1 == 0\n\n```", "choosed_example_idx": [3, 9, 1, 2, 7], "prompt": "Function: check_number_is_power_of_2\nWrite a function that generates the output from the input.\nInput: dict(n=64), Output: \"True\"\nInput: dict(n=0), Output: \"True\"\nInput: dict(n=16), Output: \"True\"\nInput: dict(n=32), Output: \"True\"\nInput: dict(n=5), Output: \"False\"\n\n\n", "id": "b2b3cd713ab7ae7e7e5247c9278e5db9fe4dc6a2_0"}
{"example_str": "examples = [\n    dict(equation=\"2x + 3 = 5\", var='x'),\n    dict(equation=\"x - 2 = 3\", var='x'),\n    dict(equation=\"4y + 2 = 10\", var='y'),\n    dict(equation=\"z - 1 = 2\", var='z'),\n    dict(equation=\"3x + 2 = 11\", var='x'),\n    dict(equation=\"x + 5 = 9\", var='x'),\n    dict(equation=\"2t - 3 = 7\", var='t'),\n    dict(equation=\"s + 2 = 9\", var='s'),\n    dict(equation=\"5x - 2 = 13\", var='x'),\n    dict(equation=\"r - 4 = 2\", var='r'),\n]\nexamples += [\n    dict(equation=\"2x + 3 = 9\"),  # Simple linear equation\n    dict(equation=\"5x - 2 = 3\"),  # Negative constant on the left\n    dict(equation=\"x + 4 = 12\"),  # Coefficient of x is 1\n    dict(equation=\"-3x + 6 = 0\"), # Negative coefficient of x\n    dict(equation=\"10 = 2x + 4\"), # Equation with variable on the right\n    dict(equation=\"3y - 9 = 0\", var='y'),  # Different variable 'y'\n    dict(equation=\"z + 1 = 10\", var='z'),  # Different variable 'z'\n    dict(equation=\"0 = t - 5\", var='t'),   # Variable on the right, zero on left\n    dict(equation=\"4x = 8\"),               # No constant term, just variable term and result\n    dict(equation=\"s - 7 = -2\", var='s')   # Negative result on the right\n]\nexamples += [\n    dict(equation=\"2x+3=5\"),\n    dict(equation=\"x-4=10\"),\n    dict(equation=\"3x=9\"),\n    dict(equation=\"5x+2=12\"),\n    dict(equation=\"10x-7=3\"),\n    dict(equation=\"x+1=0\"),\n    dict(equation=\"4x-8=16\"),\n    dict(equation=\"7x=21\"),\n    dict(equation=\"x/2=4\"),\n    dict(equation=\"3x+5=2x+10\", var=\"x\")\n]", "code": "def solve_linear(equation, var='x'):\n    expression = equation.replace('=', '-(') + ')'\n    grouped = eval(expression.replace(var, '1j'))\n    return -grouped.real / grouped.imag\n", "func_name": "solve_linear", "exec_status": true, "example_inputs": ["\"{'equation': '2x + 3 = 5', 'var': 'x'}\"", "\"{'equation': 'x - 2 = 3', 'var': 'x'}\"", "\"{'equation': '4y + 2 = 10', 'var': 'y'}\"", "\"{'equation': 'z - 1 = 2', 'var': 'z'}\"", "\"{'equation': '3x + 2 = 11', 'var': 'x'}\"", "\"{'equation': 'x + 5 = 9', 'var': 'x'}\"", "\"{'equation': '2t - 3 = 7', 'var': 't'}\"", "\"{'equation': 's + 2 = 9', 'var': 's'}\"", "\"{'equation': '5x - 2 = 13', 'var': 'x'}\"", "\"{'equation': 'r - 4 = 2', 'var': 'r'}\""], "example_outputs": [{"return": "\"0.09523809523809523\""}, {"return": "\"5.0\""}, {"return": "\"0.1951219512195122\""}, {"return": "\"3.0\""}, {"return": "\"0.2903225806451613\""}, {"return": "\"4.0\""}, {"return": "\"0.47619047619047616\""}, {"return": "\"7.0\""}, {"return": "\"0.29411764705882354\""}, {"return": "\"6.0\""}, {"return": "\"0.2857142857142857\""}, {"return": "\"0.09803921568627451\""}, {"return": "\"8.0\""}, {"return": "\"0.1935483870967742\""}, {"return": "\"0.2857142857142857\""}, {"return": "\"0.2903225806451613\""}, {"return": "\"9.0\""}, {"return": "\"5.0\""}, {"return": "\"0.1951219512195122\""}, {"return": "\"5.0\""}, {"return": "\"0.09523809523809523\""}, {"return": "\"14.0\""}, {"return": "\"0.2903225806451613\""}, {"return": "\"0.19607843137254902\""}, {"return": "\"0.09900990099009901\""}, {"return": "\"-1.0\""}, {"return": "\"0.5853658536585366\""}, {"return": "\"0.29577464788732394\""}, {"return": "\"8.0\""}, {"return": "\"0.5\""}], "parsed_inputs": [[["equation", "\"2x + 3 = 5\""], ["var", "\"x\""]], [["equation", "\"x - 2 = 3\""], ["var", "\"x\""]], [["equation", "\"4y + 2 = 10\""], ["var", "\"y\""]], [["equation", "\"z - 1 = 2\""], ["var", "\"z\""]], [["equation", "\"3x + 2 = 11\""], ["var", "\"x\""]], [["equation", "\"x + 5 = 9\""], ["var", "\"x\""]], [["equation", "\"2t - 3 = 7\""], ["var", "\"t\""]], [["equation", "\"s + 2 = 9\""], ["var", "\"s\""]], [["equation", "\"5x - 2 = 13\""], ["var", "\"x\""]], [["equation", "\"r - 4 = 2\""], ["var", "\"r\""]]], "exec_code": "def solve_linear(equation, var='x'):\n    expression = equation.replace('=', '-(') + ')'\n    grouped = eval(expression.replace(var, '1j'))\n    return -grouped.real / grouped.imag\n", "output": "The function is:\n\n```python\ndef solve_linear(equation, var='x'):\n    expression = equation.replace('=', '-(') + ')'\n    grouped = eval(expression.replace(var, '1j'))\n    return -grouped.real / grouped.imag\n\n```", "choosed_example_idx": [4, 3, 9], "prompt": "Function: solve_linear\n\nWrite a function that generates the output from the input.\nInput: dict(equation=\"3x + 2 = 11\", var=\"x\"), Output: \"0.2903225806451613\"\nInput: dict(equation=\"z - 1 = 2\", var=\"z\"), Output: \"3.0\"\nInput: dict(equation=\"r - 4 = 2\", var=\"r\"), Output: \"6.0\"\n\n\n\n", "id": "25249fa0c516af6ff8eb682d456835fac22047a9_0"}
{"example_str": "examples = [\n    dict(pokemon='pikachu', gender_diff=True, sprites=[]),\n    dict(pokemon='charizard', gender_diff=False, sprites=[]),\n    dict(pokemon='jolteon', gender_diff=True, sprites=[{'foo': 'bar'}]),\n    dict(pokemon='squirtle', gender_diff=False, sprites=[{'baz': 'qux'}]),\n    dict(pokemon='meowth', gender_diff=True, sprites=[]),\n    dict(pokemon='mr_mime', gender_diff=False, sprites=[]),\n    dict(pokemon='articuno', gender_diff=True, sprites=[{'a': 'b'}]),\n    dict(pokemon='zapdos', gender_diff=False, sprites=[{'c': 'd'}]),\n    dict(pokemon='moltres', gender_diff=True, sprites=[]),\n    dict(pokemon='dragonite', gender_diff=False, sprites=[{'e': 'f'}]),\n]\nexamples += [\n    dict(pokemon=\"Pikachu\", gender_diff=True, sprites=[]),\n    dict(pokemon=\"Charizard\", gender_diff=False, sprites=[]),\n    dict(pokemon=\"Bulbasaur\", gender_diff=True, sprites=[]),\n    dict(pokemon=\"Eevee\", gender_diff=False, sprites=[]),\n    dict(pokemon=\"Jigglypuff\", gender_diff=True, sprites=[]),\n    dict(pokemon=\"Gengar\", gender_diff=False, sprites=[]),\n    dict(pokemon=\"Mewtwo\", gender_diff=True, sprites=[]),\n    dict(pokemon=\"Snorlax\", gender_diff=False, sprites=[]),\n    dict(pokemon=\"Lucario\", gender_diff=True, sprites=[]),\n    dict(pokemon=\"Gardevoir\", gender_diff=False, sprites=[])\n]\nexamples += [\n    dict(pokemon='Pikachu', gender_diff=True, sprites=[]),\n    dict(pokemon='Charizard', gender_diff=False, sprites=[]),\n    dict(pokemon='Bulbasaur', gender_diff=True, sprites=[]),\n    dict(pokemon='Eevee', gender_diff=True, sprites=[]),\n    dict(pokemon='Mewtwo', gender_diff=False, sprites=[]),\n    dict(pokemon='Jigglypuff', gender_diff=True, sprites=[]),\n    dict(pokemon='Gengar', gender_diff=False, sprites=[]),\n    dict(pokemon='Snorlax', gender_diff=False, sprites=[]),\n    dict(pokemon='Lucario', gender_diff=True, sprites=[]),\n    dict(pokemon='Gardevoir', gender_diff=True, sprites=[])\n]", "code": "def getSpriteLinks(pokemon, gender_diff, sprites=[]):\n    if gender_diff:\n        sprites.append({'male': '{}.gif'.format(pokemon), 'female':\n            '{}-female.gif'.format(pokemon), 'male_shiny': 'shiny/{}.gif'.\n            format(pokemon), 'female_shiny': 'shiny/{}-female.gif'.format(\n            pokemon)})\n    else:\n        sprites.append({'sprite': '{}.gif'.format(pokemon), 'sprite_shiny':\n            'shiny/{}.gif'.format(pokemon)})\n    return sprites\n", "func_name": "getSpriteLinks", "exec_status": true, "example_inputs": ["\"{'pokemon': 'pikachu', 'gender_diff': True, 'sprites': []}\"", "\"{'pokemon': 'charizard', 'gender_diff': False, 'sprites': []}\"", "\"{'pokemon': 'jolteon', 'gender_diff': True, 'sprites': [{'foo': 'bar'}]}\"", "\"{'pokemon': 'squirtle', 'gender_diff': False, 'sprites': [{'baz': 'qux'}]}\"", "\"{'pokemon': 'meowth', 'gender_diff': True, 'sprites': []}\"", "\"{'pokemon': 'mr_mime', 'gender_diff': False, 'sprites': []}\"", "\"{'pokemon': 'articuno', 'gender_diff': True, 'sprites': [{'a': 'b'}]}\"", "\"{'pokemon': 'zapdos', 'gender_diff': False, 'sprites': [{'c': 'd'}]}\"", "\"{'pokemon': 'moltres', 'gender_diff': True, 'sprites': []}\"", "\"{'pokemon': 'dragonite', 'gender_diff': False, 'sprites': [{'e': 'f'}]}\""], "example_outputs": [{"return": "\"[{'male': 'pikachu.gif', 'female': 'pikachu-female.gif', 'male_shiny': 'shiny/pikachu.gif', 'female_shiny': 'shiny/pikachu-female.gif'}]\""}, {"return": "\"[{'sprite': 'charizard.gif', 'sprite_shiny': 'shiny/charizard.gif'}]\""}, {"return": "\"[{'foo': 'bar'}, {'male': 'jolteon.gif', 'female': 'jolteon-female.gif', 'male_shiny': 'shiny/jolteon.gif', 'female_shiny': 'shiny/jolteon-female.gif'}]\""}, {"return": "\"[{'baz': 'qux'}, {'sprite': 'squirtle.gif', 'sprite_shiny': 'shiny/squirtle.gif'}]\""}, {"return": "\"[{'male': 'meowth.gif', 'female': 'meowth-female.gif', 'male_shiny': 'shiny/meowth.gif', 'female_shiny': 'shiny/meowth-female.gif'}]\""}, {"return": "\"[{'sprite': 'mr_mime.gif', 'sprite_shiny': 'shiny/mr_mime.gif'}]\""}, {"return": "\"[{'a': 'b'}, {'male': 'articuno.gif', 'female': 'articuno-female.gif', 'male_shiny': 'shiny/articuno.gif', 'female_shiny': 'shiny/articuno-female.gif'}]\""}, {"return": "\"[{'c': 'd'}, {'sprite': 'zapdos.gif', 'sprite_shiny': 'shiny/zapdos.gif'}]\""}, {"return": "\"[{'male': 'moltres.gif', 'female': 'moltres-female.gif', 'male_shiny': 'shiny/moltres.gif', 'female_shiny': 'shiny/moltres-female.gif'}]\""}, {"return": "\"[{'e': 'f'}, {'sprite': 'dragonite.gif', 'sprite_shiny': 'shiny/dragonite.gif'}]\""}, {"return": "\"[{'male': 'Pikachu.gif', 'female': 'Pikachu-female.gif', 'male_shiny': 'shiny/Pikachu.gif', 'female_shiny': 'shiny/Pikachu-female.gif'}]\""}, {"return": "\"[{'sprite': 'Charizard.gif', 'sprite_shiny': 'shiny/Charizard.gif'}]\""}, {"return": "\"[{'male': 'Bulbasaur.gif', 'female': 'Bulbasaur-female.gif', 'male_shiny': 'shiny/Bulbasaur.gif', 'female_shiny': 'shiny/Bulbasaur-female.gif'}]\""}, {"return": "\"[{'sprite': 'Eevee.gif', 'sprite_shiny': 'shiny/Eevee.gif'}]\""}, {"return": "\"[{'male': 'Jigglypuff.gif', 'female': 'Jigglypuff-female.gif', 'male_shiny': 'shiny/Jigglypuff.gif', 'female_shiny': 'shiny/Jigglypuff-female.gif'}]\""}, {"return": "\"[{'sprite': 'Gengar.gif', 'sprite_shiny': 'shiny/Gengar.gif'}]\""}, {"return": "\"[{'male': 'Mewtwo.gif', 'female': 'Mewtwo-female.gif', 'male_shiny': 'shiny/Mewtwo.gif', 'female_shiny': 'shiny/Mewtwo-female.gif'}]\""}, {"return": "\"[{'sprite': 'Snorlax.gif', 'sprite_shiny': 'shiny/Snorlax.gif'}]\""}, {"return": "\"[{'male': 'Lucario.gif', 'female': 'Lucario-female.gif', 'male_shiny': 'shiny/Lucario.gif', 'female_shiny': 'shiny/Lucario-female.gif'}]\""}, {"return": "\"[{'sprite': 'Gardevoir.gif', 'sprite_shiny': 'shiny/Gardevoir.gif'}]\""}, {"return": "\"[{'male': 'Pikachu.gif', 'female': 'Pikachu-female.gif', 'male_shiny': 'shiny/Pikachu.gif', 'female_shiny': 'shiny/Pikachu-female.gif'}]\""}, {"return": "\"[{'sprite': 'Charizard.gif', 'sprite_shiny': 'shiny/Charizard.gif'}]\""}, {"return": "\"[{'male': 'Bulbasaur.gif', 'female': 'Bulbasaur-female.gif', 'male_shiny': 'shiny/Bulbasaur.gif', 'female_shiny': 'shiny/Bulbasaur-female.gif'}]\""}, {"return": "\"[{'male': 'Eevee.gif', 'female': 'Eevee-female.gif', 'male_shiny': 'shiny/Eevee.gif', 'female_shiny': 'shiny/Eevee-female.gif'}]\""}, {"return": "\"[{'sprite': 'Mewtwo.gif', 'sprite_shiny': 'shiny/Mewtwo.gif'}]\""}, {"return": "\"[{'male': 'Jigglypuff.gif', 'female': 'Jigglypuff-female.gif', 'male_shiny': 'shiny/Jigglypuff.gif', 'female_shiny': 'shiny/Jigglypuff-female.gif'}]\""}, {"return": "\"[{'sprite': 'Gengar.gif', 'sprite_shiny': 'shiny/Gengar.gif'}]\""}, {"return": "\"[{'sprite': 'Snorlax.gif', 'sprite_shiny': 'shiny/Snorlax.gif'}]\""}, {"return": "\"[{'male': 'Lucario.gif', 'female': 'Lucario-female.gif', 'male_shiny': 'shiny/Lucario.gif', 'female_shiny': 'shiny/Lucario-female.gif'}]\""}, {"return": "\"[{'male': 'Gardevoir.gif', 'female': 'Gardevoir-female.gif', 'male_shiny': 'shiny/Gardevoir.gif', 'female_shiny': 'shiny/Gardevoir-female.gif'}]\""}], "parsed_inputs": [[["pokemon", "\"pikachu\""], ["gender_diff", "True"], ["sprites", "[]"]], [["pokemon", "\"charizard\""], ["gender_diff", "False"], ["sprites", "[]"]], [["pokemon", "\"jolteon\""], ["gender_diff", "True"], ["sprites", "[{'foo': 'bar'}]"]], [["pokemon", "\"squirtle\""], ["gender_diff", "False"], ["sprites", "[{'baz': 'qux'}]"]], [["pokemon", "\"meowth\""], ["gender_diff", "True"], ["sprites", "[]"]], [["pokemon", "\"mr_mime\""], ["gender_diff", "False"], ["sprites", "[]"]], [["pokemon", "\"articuno\""], ["gender_diff", "True"], ["sprites", "[{'a': 'b'}]"]], [["pokemon", "\"zapdos\""], ["gender_diff", "False"], ["sprites", "[{'c': 'd'}]"]], [["pokemon", "\"moltres\""], ["gender_diff", "True"], ["sprites", "[]"]], [["pokemon", "\"dragonite\""], ["gender_diff", "False"], ["sprites", "[{'e': 'f'}]"]]], "exec_code": "def getSpriteLinks(pokemon, gender_diff, sprites=[]):\n    if gender_diff:\n        sprites.append({'male': '{}.gif'.format(pokemon), 'female':\n            '{}-female.gif'.format(pokemon), 'male_shiny': 'shiny/{}.gif'.\n            format(pokemon), 'female_shiny': 'shiny/{}-female.gif'.format(\n            pokemon)})\n    else:\n        sprites.append({'sprite': '{}.gif'.format(pokemon), 'sprite_shiny':\n            'shiny/{}.gif'.format(pokemon)})\n    return sprites\n", "output": "The function is:\n\n```python\ndef getSpriteLinks(pokemon, gender_diff, sprites=[]):\n    if gender_diff:\n        sprites.append({'male': '{}.gif'.format(pokemon), 'female':\n            '{}-female.gif'.format(pokemon), 'male_shiny': 'shiny/{}.gif'.\n            format(pokemon), 'female_shiny': 'shiny/{}-female.gif'.format(\n            pokemon)})\n    else:\n        sprites.append({'sprite': '{}.gif'.format(pokemon), 'sprite_shiny':\n            'shiny/{}.gif'.format(pokemon)})\n    return sprites\n\n```", "choosed_example_idx": [4, 1, 0, 8, 2, 6, 5, 9, 7], "prompt": "Function: getSpriteLinks\nWrite a function that generates the output from the input.\nInput: dict(pokemon=\"meowth\", gender_diff=True, sprites=[]), Output: \"[{'male': 'meowth.gif', 'female': 'meowth-female.gif', 'male_shiny': 'shiny/meowth.gif', 'female_shiny': 'shiny/meowth-female.gif'}]\"\nInput: dict(pokemon=\"charizard\", gender_diff=False, sprites=[]), Output: \"[{'sprite': 'charizard.gif', 'sprite_shiny': 'shiny/charizard.gif'}]\"\nInput: dict(pokemon=\"pikachu\", gender_diff=True, sprites=[]), Output: \"[{'male': 'pikachu.gif', 'female': 'pikachu-female.gif', 'male_shiny': 'shiny/pikachu.gif', 'female_shiny': 'shiny/pikachu-female.gif'}]\"\nInput: dict(pokemon=\"moltres\", gender_diff=True, sprites=[]), Output: \"[{'male': 'moltres.gif', 'female': 'moltres-female.gif', 'male_shiny': 'shiny/moltres.gif', 'female_shiny': 'shiny/moltres-female.gif'}]\"\nInput: dict(pokemon=\"jolteon\", gender_diff=True, sprites=[{'foo': 'bar'}]), Output: \"[{'foo': 'bar'}, {'male': 'jolteon.gif', 'female': 'jolteon-female.gif', 'male_shiny': 'shiny/jolteon.gif', 'female_shiny': 'shiny/jolteon-female.gif'}]\"\nInput: dict(pokemon=\"articuno\", gender_diff=True, sprites=[{'a': 'b'}]), Output: \"[{'a': 'b'}, {'male': 'articuno.gif', 'female': 'articuno-female.gif', 'male_shiny': 'shiny/articuno.gif', 'female_shiny': 'shiny/articuno-female.gif'}]\"\nInput: dict(pokemon=\"mr_mime\", gender_diff=False, sprites=[]), Output: \"[{'sprite': 'mr_mime.gif', 'sprite_shiny': 'shiny/mr_mime.gif'}]\"\nInput: dict(pokemon=\"dragonite\", gender_diff=False, sprites=[{'e': 'f'}]), Output: \"[{'e': 'f'}, {'sprite': 'dragonite.gif', 'sprite_shiny': 'shiny/dragonite.gif'}]\"\nInput: dict(pokemon=\"zapdos\", gender_diff=False, sprites=[{'c': 'd'}]), Output: \"[{'c': 'd'}, {'sprite': 'zapdos.gif', 'sprite_shiny': 'shiny/zapdos.gif'}]\"\n\n\n", "id": "f2f63e5fdf9c78fbf770a435098d1cf1a8f4b262_0"}
{"example_str": "examples = [\n    dict(array=[1, 2, 3, 4, 5]),\n    dict(array=[10, 20, 30, 40, 50]),\n    dict(array=[1.1, 2.2, 3.3, 4.4, 5.5]),\n    dict(array=[-1, -2, -3, -4, -5]),\n    dict(array=[1, 1, 1, 1, 1]),\n    dict(array=[5, 5, 5, 5, 5]),\n    dict(array=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),\n    dict(array=[10, 10, 10, 10, 10, 10, 10, 10, 10, 10]),\n    dict(array=[1, 2, 3, 4, 5, 6, 7, 8, 9]),\n    dict(array=[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]),\n]\nexamples += [\n    dict(array=[1, 2, 3, 4, 5]),  # Example with consecutive integers\n    dict(array=[10, 10, 10, 10, 10]),  # Example where all elements are the same\n    dict(array=[-1, 0, 1]),  # Example with negative, zero and positive\n    dict(array=[2.5, 3.5, 2.5, 3.5, 4.5]),  # Example with floating point numbers\n    dict(array=[100]),  # Example with a single element\n    dict(array=[]),  # Example with an empty list\n    dict(array=[-10, -20, -30]),  # Example with all negative numbers\n    dict(array=[1, 1, 1, 2, 2, 2, 3, 3, 3]),  # Example with duplicates\n    dict(array=[0, 0, 0, 0]),  # Example with zeros\n    dict(array=[1.1, 2.2, 3.3, 4.4, 5.5])  # Example with decimal numbers\n]\nexamples += [\n    dict(array=[1, 2, 3, 4, 5]),\n    dict(array=[1, 1, 1, 1, 1]),\n    dict(array=[5, 5, 5, 5, 5]),\n    dict(array=[10, 20, 30, 40, 50]),\n    dict(array=[-1, -2, -3, -4, -5]),\n    dict(array=[100, 200, 300, 400, 500]),\n    dict(array=[1.5, 2.5, 3.5, 4.5, 5.5]),\n    dict(array=[0, 0, 0, 0, 0]),\n    dict(array=[-10, 0, 10, 20, -20]),\n    dict(array=[2, 2, 4, 4, 6, 6, 8, 8])\n]", "code": "def average(array):\n    arr = set(array)\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum / len(arr)\n", "func_name": "average", "exec_status": true, "example_inputs": ["\"{'array': [1, 2, 3, 4, 5]}\"", "\"{'array': [10, 20, 30, 40, 50]}\"", "\"{'array': [1.1, 2.2, 3.3, 4.4, 5.5]}\"", "\"{'array': [-1, -2, -3, -4, -5]}\"", "\"{'array': [1, 1, 1, 1, 1]}\"", "\"{'array': [5, 5, 5, 5, 5]}\"", "\"{'array': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}\"", "\"{'array': [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]}\"", "\"{'array': [1, 2, 3, 4, 5, 6, 7, 8, 9]}\"", "\"{'array': [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]}\""], "example_outputs": [{"return": "\"3.0\""}, {"return": "\"30.0\""}, {"return": "\"3.3\""}, {"return": "\"-3.0\""}, {"return": "\"1.0\""}, {"return": "\"5.0\""}, {"return": "\"5.5\""}, {"return": "\"10.0\""}, {"return": "\"5.0\""}, {"return": "\"-5.5\""}, {"return": "\"3.0\""}, {"return": "\"10.0\""}, {"return": "\"0.0\""}, {"return": "\"3.5\""}, {"return": "\"100.0\""}, {"error": "<|EXCEPTION|> \"<class 'ZeroDivisionError'>: division by zero\""}, {"return": "\"-20.0\""}, {"return": "\"2.0\""}, {"return": "\"0.0\""}, {"return": "\"3.3\""}, {"return": "\"3.0\""}, {"return": "\"1.0\""}, {"return": "\"5.0\""}, {"return": "\"30.0\""}, {"return": "\"-3.0\""}, {"return": "\"300.0\""}, {"return": "\"3.5\""}, {"return": "\"0.0\""}, {"return": "\"0.0\""}, {"return": "\"5.0\""}], "parsed_inputs": [[["array", "[1, 2, 3, 4, 5]"]], [["array", "[10, 20, 30, 40, 50]"]], [["array", "[1.1, 2.2, 3.3, 4.4, 5.5]"]], [["array", "[-1, -2, -3, -4, -5]"]], [["array", "[1, 1, 1, 1, 1]"]], [["array", "[5, 5, 5, 5, 5]"]], [["array", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"]], [["array", "[10, 10, 10, 10, 10, 10, 10, 10, 10, 10]"]], [["array", "[1, 2, 3, 4, 5, 6, 7, 8, 9]"]], [["array", "[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]"]]], "exec_code": "def average(array):\n    arr = set(array)\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum / len(arr)\n", "output": "The function is:\n\n```python\ndef average(array):\n    arr = set(array)\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum / len(arr)\n\n```", "choosed_example_idx": [6, 5, 1, 4], "prompt": "Function: average\nInput: dict(array=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), Output: \"5.5\"\nInput: dict(array=[5, 5, 5, 5, 5]), Output: \"5.0\"\nInput: dict(array=[10, 20, 30, 40, 50]), Output: \"30.0\"\nInput: dict(array=[1, 1, 1, 1, 1]), Output: \"1.0\"\n\n\nWrite a function that generates the output from the input.\n\n", "id": "27fe5687de431b1e1ae22e4f8dcb7a18a6c451f3_0"}
{"example_str": "examples = [\n    dict(x=371),\n    dict(x=123),\n    dict(x=407),\n    dict(x=8208),\n    dict(x=9474),\n    dict(x=153),\n    dict(x=370),\n    dict(x=1634),\n    dict(x=820),\n    dict(x=947)\n]\nexamples += [\n    dict(x=153),   # 153 is an Armstrong number: 1^3 + 5^3 + 3^3 = 153\n    dict(x=370),   # 370 is an Armstrong number: 3^3 + 7^3 + 0^3 = 370\n    dict(x=371),   # 371 is an Armstrong number: 3^3 + 7^3 + 1^3 = 371\n    dict(x=407),   # 407 is an Armstrong number: 4^3 + 0^3 + 7^3 = 407\n    dict(x=0),     # 0 is an Armstrong number: 0^3 = 0\n    dict(x=9474),  # 9474 is an Armstrong number: 9^4 + 4^4 + 7^4 + 4^4 = 9474\n    dict(x=10),    # 10 is not an Armstrong number: 1^3 + 0^3 = 1\n    dict(x=100),   # 100 is not an Armstrong number: 1^3 + 0^3 + 0^3 = 1\n    dict(x=9475),  # 9475 is not an Armstrong number\n    dict(x=8208)   # 8208 is an Armstrong number: 8^3 + 2^3 + 0^3 + 8^3 = 8208\n]\nexamples += [\n    dict(x=153),  # 153 is an Armstrong number (1^3 + 5^3 + 3^3 = 153)\n    dict(x=370),  # 370 is an Armstrong number (3^3 + 7^3 + 0^3 = 370)\n    dict(x=371),  # 371 is an Armstrong number (3^3 + 7^3 + 1^3 = 371)\n    dict(x=407),  # 407 is an Armstrong number (4^3 + 0^3 + 7^3 = 407)\n    dict(x=123),  # Not an Armstrong number\n    dict(x=9474), # Not a three-digit Armstrong number, but is a four-digit one\n    dict(x=0),    # 0 is technically an Armstrong number as 0^3 = 0\n    dict(x=999),  # Not an Armstrong number\n    dict(x=100),  # Not an Armstrong number\n    dict(x=9475)  # Not an Armstrong number\n]", "code": "def armn(x):\n    sum = 0\n    a = x\n    while a > 0:\n        l = a % 10\n        sum += l ** 3\n        a = a // 10\n    if sum == x:\n        return 'Armstrong No'\n    else:\n        return 'NOT armstrong no'\n", "func_name": "armn", "exec_status": true, "example_inputs": ["\"{'x': 371}\"", "\"{'x': 123}\"", "\"{'x': 407}\"", "\"{'x': 8208}\"", "\"{'x': 9474}\"", "\"{'x': 153}\"", "\"{'x': 370}\"", "\"{'x': 1634}\"", "\"{'x': 820}\"", "\"{'x': 947}\""], "example_outputs": [{"return": "\"'Armstrong No'\""}, {"return": "\"'NOT armstrong no'\""}, {"return": "\"'Armstrong No'\""}, {"return": "\"'NOT armstrong no'\""}, {"return": "\"'NOT armstrong no'\""}, {"return": "\"'Armstrong No'\""}, {"return": "\"'Armstrong No'\""}, {"return": "\"'NOT armstrong no'\""}, {"return": "\"'NOT armstrong no'\""}, {"return": "\"'NOT armstrong no'\""}, {"return": "\"'Armstrong No'\""}, {"return": "\"'Armstrong No'\""}, {"return": "\"'Armstrong No'\""}, {"return": "\"'Armstrong No'\""}, {"return": "\"'Armstrong No'\""}, {"return": "\"'NOT armstrong no'\""}, {"return": "\"'NOT armstrong no'\""}, {"return": "\"'NOT armstrong no'\""}, {"return": "\"'NOT armstrong no'\""}, {"return": "\"'NOT armstrong no'\""}, {"return": "\"'Armstrong No'\""}, {"return": "\"'Armstrong No'\""}, {"return": "\"'Armstrong No'\""}, {"return": "\"'Armstrong No'\""}, {"return": "\"'NOT armstrong no'\""}, {"return": "\"'NOT armstrong no'\""}, {"return": "\"'Armstrong No'\""}, {"return": "\"'NOT armstrong no'\""}, {"return": "\"'NOT armstrong no'\""}, {"return": "\"'NOT armstrong no'\""}], "parsed_inputs": [[["x", "371"]], [["x", "123"]], [["x", "407"]], [["x", "8208"]], [["x", "9474"]], [["x", "153"]], [["x", "370"]], [["x", "1634"]], [["x", "820"]], [["x", "947"]]], "exec_code": "def armn(x):\n    sum = 0\n    a = x\n    while a > 0:\n        l = a % 10\n        sum += l ** 3\n        a = a // 10\n    if sum == x:\n        return 'Armstrong No'\n    else:\n        return 'NOT armstrong no'\n", "output": "The function is:\n\n```python\ndef armn(x):\n    sum = 0\n    a = x\n    while a > 0:\n        l = a % 10\n        sum += l ** 3\n        a = a // 10\n    if sum == x:\n        return 'Armstrong No'\n    else:\n        return 'NOT armstrong no'\n\n```", "choosed_example_idx": [3, 9, 1, 6, 8, 0, 4, 5], "prompt": "Input: dict(x=8208), Output: \"'NOT armstrong no'\"\nInput: dict(x=947), Output: \"'NOT armstrong no'\"\nInput: dict(x=123), Output: \"'NOT armstrong no'\"\nInput: dict(x=370), Output: \"'Armstrong No'\"\nInput: dict(x=820), Output: \"'NOT armstrong no'\"\nInput: dict(x=371), Output: \"'Armstrong No'\"\nInput: dict(x=9474), Output: \"'NOT armstrong no'\"\nInput: dict(x=153), Output: \"'Armstrong No'\"\n\n\n\nFunction: armn\nWrite a function that generates the output from the input.\n", "id": "93be2b3afe43138d73769b848b038f02afc21734_0"}
{"example_str": "examples = [\n    dict(depth=1, cols=3),\n    dict(depth=2),\n    dict(cols=4),\n    dict(depth=0, cols=2),\n    dict(depth=-1, cols=5),\n    dict(depth=3, cols=1),\n    dict(depth=4),\n    dict(cols=6),\n    dict(depth=0),\n    dict(depth=5, cols=2)\n]\nexamples += [\n    dict(depth=0, cols=3),       # depth is 0, expect an empty string\n    dict(depth=1, cols=3),       # depth is 1 and cols is 3, expect '   '\n    dict(depth=2, cols=3),       # depth is 2 and cols is 3, expect '      '\n    dict(depth=3, cols=4),       # depth is 3 and cols is 4, expect '         '\n    dict(depth=1, cols=5),       # depth is 1 and cols is 5, expect '     '\n    dict(depth=4, cols=2),       # depth is 4 and cols is 2, expect '        '\n    dict(depth=5, cols=1),       # depth is 5 and cols is 1, expect '     '\n    dict(depth=0, cols=10),      # depth is 0 with any cols, expect an empty string\n    dict(depth=-1, cols=3),      # negative depth, expect an empty string\n    dict(depth=3, cols=0)        # depth is 3 but cols is 0, expect an empty string\n]\nexamples += [\n    dict(depth=0, cols=3),\n    dict(depth=1, cols=3),\n    dict(depth=2, cols=3),\n    dict(depth=3, cols=3),\n    dict(depth=4, cols=3),\n    dict(depth=5, cols=3),\n    dict(depth=0, cols=4),\n    dict(depth=1, cols=4),\n    dict(depth=2, cols=4),\n    dict(depth=3, cols=4)\n]", "code": "def getindent(depth=0, cols=3):\n    if depth > 0:\n        s = ' ' * cols * depth\n        return s\n    else:\n        return ''\n", "func_name": "getindent", "exec_status": true, "example_inputs": ["\"{'depth': 1, 'cols': 3}\"", "\"{'depth': 2}\"", "\"{'cols': 4}\"", "\"{'depth': 0, 'cols': 2}\"", "\"{'depth': -1, 'cols': 5}\"", "\"{'depth': 3, 'cols': 1}\"", "\"{'depth': 4}\"", "\"{'cols': 6}\"", "\"{'depth': 0}\"", "\"{'depth': 5, 'cols': 2}\""], "example_outputs": [{"return": "\"'   '\""}, {"return": "\"'      '\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"'   '\""}, {"return": "\"'            '\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"'          '\""}, {"return": "\"''\""}, {"return": "\"'   '\""}, {"return": "\"'      '\""}, {"return": "\"'            '\""}, {"return": "\"'     '\""}, {"return": "\"'        '\""}, {"return": "\"'     '\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"'   '\""}, {"return": "\"'      '\""}, {"return": "\"'         '\""}, {"return": "\"'            '\""}, {"return": "\"'               '\""}, {"return": "\"''\""}, {"return": "\"'    '\""}, {"return": "\"'        '\""}, {"return": "\"'            '\""}], "parsed_inputs": [[["depth", "1"], ["cols", "3"]], [["depth", "2"]], [["cols", "4"]], [["depth", "0"], ["cols", "2"]], [["depth", "-1"], ["cols", "5"]], [["depth", "3"], ["cols", "1"]], [["depth", "4"]], [["cols", "6"]], [["depth", "0"]], [["depth", "5"], ["cols", "2"]]], "exec_code": "def getindent(depth=0, cols=3):\n    if depth > 0:\n        s = ' ' * cols * depth\n        return s\n    else:\n        return ''\n", "output": "The function is:\n\n```python\ndef getindent(depth=0, cols=3):\n    if depth > 0:\n        s = ' ' * cols * depth\n        return s\n    else:\n        return ''\n\n```", "choosed_example_idx": [6, 8, 5, 3, 4], "prompt": "Input: dict(depth=4), Output: \"'            '\"\nInput: dict(depth=0), Output: \"''\"\nInput: dict(depth=3, cols=1), Output: \"'   '\"\nInput: dict(depth=0, cols=2), Output: \"''\"\nInput: dict(depth=-1, cols=5), Output: \"''\"\n\nWrite a function that generates the output from the input.\nFunction: getindent\n\n", "id": "aed39c1aac36854767ca83c74f41aaadf435ed35_0"}
{"example_str": "examples = [\n    dict(html='<p>Hello World!</p>'),\n    dict(html='<span>This is a span element</span>'),\n    dict(html='<div>This is a div element</div>'),\n    dict(html='<a href=\"#\">This is a link</a>'),\n    dict(html='<h1>This is a heading</h1>'),\n    dict(html='<b>This is a bold text</b>'),\n    dict(html='<i>This is an italic text</i>'),\n    dict(html='<u>This is an underlined text</u>'),\n    dict(html='<strike>This is a struck-through text</strike>'),\n    dict(html='<font color=\"red\">This is a red text</font>'),\n]\nexamples += [\n    dict(html=\"<div>Hello World</div>\"),\n    dict(html=\"<p>Another example</p>\"),\n    dict(html=\"<span>Sample text</span>\"),\n    dict(html=\"<a href='link'>Link text</a>\"),\n    dict(html=\"<h1>Header Text</h1>\"),\n    dict(html=\"<title>Page Title</title>\"),\n    dict(html=\"<b>Bold text</b>\"),\n    dict(html=\"<div>Nested <span>text</span> example</div>\"),\n    dict(html=\"<div class='class'>Text with class</div>\"),\n    dict(html=\"<div id='id'>Text with ID</div>\")\n]\nexamples += [\n    dict(html='<div>Hello World</div>'),\n    dict(html='<p>Paragraph content</p>'),\n    dict(html='<span>Span text</span>'),\n    dict(html='<a href=\"link\">Link text</a>'),\n    dict(html='<h1>Header text</h1>'),\n    dict(html='<title>Page Title</title>'),\n    dict(html='<b>Bold text</b>'),\n    dict(html='<i>Italic text</i>'),\n    dict(html='<em>Emphasized text</em>'),\n    dict(html='<strong>Strong text</strong>')\n]", "code": "def parse_html_value(html):\n    return html[html.find('>') + 1:html.rfind('<')]\n", "func_name": "parse_html_value", "exec_status": true, "example_inputs": ["\"{'html': '<p>Hello World!</p>'}\"", "\"{'html': '<span>This is a span element</span>'}\"", "\"{'html': '<div>This is a div element</div>'}\"", "\"{'html': '<a href=\\\"#\\\">This is a link</a>'}\"", "\"{'html': '<h1>This is a heading</h1>'}\"", "\"{'html': '<b>This is a bold text</b>'}\"", "\"{'html': '<i>This is an italic text</i>'}\"", "\"{'html': '<u>This is an underlined text</u>'}\"", "\"{'html': '<strike>This is a struck-through text</strike>'}\"", "\"{'html': '<font color=\\\"red\\\">This is a red text</font>'}\""], "example_outputs": [{"return": "\"'Hello World!'\""}, {"return": "\"'This is a span element'\""}, {"return": "\"'This is a div element'\""}, {"return": "\"'This is a link'\""}, {"return": "\"'This is a heading'\""}, {"return": "\"'This is a bold text'\""}, {"return": "\"'This is an italic text'\""}, {"return": "\"'This is an underlined text'\""}, {"return": "\"'This is a struck-through text'\""}, {"return": "\"'This is a red text'\""}, {"return": "\"'Hello World'\""}, {"return": "\"'Another example'\""}, {"return": "\"'Sample text'\""}, {"return": "\"'Link text'\""}, {"return": "\"'Header Text'\""}, {"return": "\"'Page Title'\""}, {"return": "\"'Bold text'\""}, {"return": "\"'Nested <span>text</span> example'\""}, {"return": "\"'Text with class'\""}, {"return": "\"'Text with ID'\""}, {"return": "\"'Hello World'\""}, {"return": "\"'Paragraph content'\""}, {"return": "\"'Span text'\""}, {"return": "\"'Link text'\""}, {"return": "\"'Header text'\""}, {"return": "\"'Page Title'\""}, {"return": "\"'Bold text'\""}, {"return": "\"'Italic text'\""}, {"return": "\"'Emphasized text'\""}, {"return": "\"'Strong text'\""}], "parsed_inputs": [[["html", "\"<p>Hello World!</p>\""]], [["html", "\"<span>This is a span element</span>\""]], [["html", "\"<div>This is a div element</div>\""]], [["html", "\"<a href=\\\"#\\\">This is a link</a>\""]], [["html", "\"<h1>This is a heading</h1>\""]], [["html", "\"<b>This is a bold text</b>\""]], [["html", "\"<i>This is an italic text</i>\""]], [["html", "\"<u>This is an underlined text</u>\""]], [["html", "\"<strike>This is a struck-through text</strike>\""]], [["html", "\"<font color=\\\"red\\\">This is a red text</font>\""]]], "exec_code": "def parse_html_value(html):\n    return html[html.find('>') + 1:html.rfind('<')]\n", "output": "The function is:\n\n```python\ndef parse_html_value(html):\n    return html[html.find('>') + 1:html.rfind('<')]\n\n```", "choosed_example_idx": [0, 8, 2, 7, 1, 9, 6, 4, 3], "prompt": "Input: dict(html=\"<p>Hello World!</p>\"), Output: \"'Hello World!'\"\nInput: dict(html=\"<strike>This is a struck-through text</strike>\"), Output: \"'This is a struck-through text'\"\nInput: dict(html=\"<div>This is a div element</div>\"), Output: \"'This is a div element'\"\nInput: dict(html=\"<u>This is an underlined text</u>\"), Output: \"'This is an underlined text'\"\nInput: dict(html=\"<span>This is a span element</span>\"), Output: \"'This is a span element'\"\nInput: dict(html=\"<font color=\\\"red\\\">This is a red text</font>\"), Output: \"'This is a red text'\"\nInput: dict(html=\"<i>This is an italic text</i>\"), Output: \"'This is an italic text'\"\nInput: dict(html=\"<h1>This is a heading</h1>\"), Output: \"'This is a heading'\"\nInput: dict(html=\"<a href=\\\"#\\\">This is a link</a>\"), Output: \"'This is a link'\"\n\n\nFunction: parse_html_value\nWrite a function that generates the output from the input.\n", "id": "e5d2a5ed917e41223881c24b69c330cd96f7a67a_0"}
{"example_str": "examples = [\n    dict(c='a'),\n    dict(c='Z'),\n    dict(c='9'),\n    dict(c='b'),\n    dict(c='K'),\n    dict(c='5'),\n    dict(c='f'),\n    dict(c='F'),\n    dict(c='0'),\n    dict(c='x'),\n]\nexamples += [\n    dict(c='a'),  # Lowercase hex, should return 10\n    dict(c='f'),  # Lowercase hex, should return 15\n    dict(c='A'),  # Uppercase hex, should return 10\n    dict(c='F'),  # Uppercase hex, should return 15\n    dict(c='0'),  # Numeric, should return 0\n    dict(c='9'),  # Numeric, should return 9\n    dict(c='b'),  # Lowercase hex, should return 11\n    dict(c='E'),  # Uppercase hex, should return 14\n    dict(c='1'),  # Numeric, should return 1\n    dict(c='5')   # Numeric, should return 5\n]\nexamples += [\n    dict(c='0'),\n    dict(c='1'),\n    dict(c='2'),\n    dict(c='3'),\n    dict(c='4'),\n    dict(c='5'),\n    dict(c='6'),\n    dict(c='7'),\n    dict(c='8'),\n    dict(c='9'),\n    dict(c='a'),\n    dict(c='b'),\n    dict(c='c'),\n    dict(c='d'),\n    dict(c='e'),\n    dict(c='f'),\n    dict(c='A'),\n    dict(c='B'),\n    dict(c='C'),\n    dict(c='D'),\n    dict(c='E'),\n    dict(c='F')\n]", "code": "def mapcode(c):\n    if ord(c) >= 97 and ord(c) <= 102:\n        return ord(c) - 87\n    if ord(c) >= 65 and ord(c) <= 70:\n        return ord(c) - 55\n    if ord(c) >= 48 and ord(c) <= 57:\n        return ord(c) - 48\n", "func_name": "mapcode", "exec_status": true, "example_inputs": ["\"{'c': 'a'}\"", "\"{'c': 'Z'}\"", "\"{'c': '9'}\"", "\"{'c': 'b'}\"", "\"{'c': 'K'}\"", "\"{'c': '5'}\"", "\"{'c': 'f'}\"", "\"{'c': 'F'}\"", "\"{'c': '0'}\"", "\"{'c': 'x'}\""], "example_outputs": [{"return": "\"10\""}, {"return": "\"None\""}, {"return": "\"9\""}, {"return": "\"11\""}, {"return": "\"None\""}, {"return": "\"5\""}, {"return": "\"15\""}, {"return": "\"15\""}, {"return": "\"0\""}, {"return": "\"None\""}, {"return": "\"10\""}, {"return": "\"15\""}, {"return": "\"10\""}, {"return": "\"15\""}, {"return": "\"0\""}, {"return": "\"9\""}, {"return": "\"11\""}, {"return": "\"14\""}, {"return": "\"1\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"4\""}, {"return": "\"5\""}, {"return": "\"6\""}, {"return": "\"7\""}, {"return": "\"8\""}, {"return": "\"9\""}, {"return": "\"10\""}, {"return": "\"11\""}, {"return": "\"12\""}, {"return": "\"13\""}, {"return": "\"14\""}, {"return": "\"15\""}, {"return": "\"10\""}, {"return": "\"11\""}, {"return": "\"12\""}, {"return": "\"13\""}, {"return": "\"14\""}, {"return": "\"15\""}], "parsed_inputs": [[["c", "\"a\""]], [["c", "\"Z\""]], [["c", "\"9\""]], [["c", "\"b\""]], [["c", "\"K\""]], [["c", "\"5\""]], [["c", "\"f\""]], [["c", "\"F\""]], [["c", "\"0\""]], [["c", "\"x\""]]], "exec_code": "def mapcode(c):\n    if ord(c) >= 97 and ord(c) <= 102:\n        return ord(c) - 87\n    if ord(c) >= 65 and ord(c) <= 70:\n        return ord(c) - 55\n    if ord(c) >= 48 and ord(c) <= 57:\n        return ord(c) - 48\n", "output": "The function is:\n\n```python\ndef mapcode(c):\n    if ord(c) >= 97 and ord(c) <= 102:\n        return ord(c) - 87\n    if ord(c) >= 65 and ord(c) <= 70:\n        return ord(c) - 55\n    if ord(c) >= 48 and ord(c) <= 57:\n        return ord(c) - 48\n\n```", "choosed_example_idx": [9, 2, 3, 4, 0, 1, 8, 5, 7], "prompt": "Write a function that generates the output from the input.\nInput: dict(c=\"x\"), Output: \"None\"\nInput: dict(c=\"9\"), Output: \"9\"\nInput: dict(c=\"b\"), Output: \"11\"\nInput: dict(c=\"K\"), Output: \"None\"\nInput: dict(c=\"a\"), Output: \"10\"\nInput: dict(c=\"Z\"), Output: \"None\"\nInput: dict(c=\"0\"), Output: \"0\"\nInput: dict(c=\"5\"), Output: \"5\"\nInput: dict(c=\"F\"), Output: \"15\"\n\nFunction: mapcode\n", "id": "e8171f533f23c3cd3e008f8e44c5348f1cbbe08f_0"}
{"example_str": "from datetime import datetime\n\nexamples = [\n    dict(date=datetime(2022, 1, 1)),\n    dict(date=datetime(2020, 12, 31)),\n    dict(date=datetime(1999, 12, 31)),\n    dict(date=datetime(2000, 1, 1)),\n    dict(date=datetime(2022, 2, 28)),\n    dict(date=datetime(2020, 2, 29)),\n    dict(date=datetime(1996, 6, 15)),\n    dict(date=datetime(2022, 8, 15)),\n    dict(date=datetime(2010, 10, 10)),\n    dict(date=datetime(2015, 11, 11)),\n]\nfrom datetime import datetime\n\nexamples += [\n    dict(date=datetime(2023, 1, 1)),\n    dict(date=datetime(2022, 12, 31)),\n    dict(date=datetime(2021, 6, 15)),\n    dict(date=datetime(2020, 2, 29)),\n    dict(date=datetime(2019, 8, 23)),\n    dict(date=datetime(2018, 4, 1)),\n    dict(date=datetime(2017, 11, 30)),\n    dict(date=datetime(2016, 7, 4)),\n    dict(date=datetime(2015, 3, 14)),\n    dict(date=datetime(2014, 10, 31))\n]\nfrom datetime import datetime\n\nexamples += [\n    dict(date=datetime(2023, 1, 1)),\n    dict(date=datetime(2022, 12, 25)),\n    dict(date=datetime(2021, 7, 4)),\n    dict(date=datetime(2020, 2, 29)),\n    dict(date=datetime(2019, 10, 31)),\n    dict(date=datetime(2018, 5, 15)),\n    dict(date=datetime(2017, 8, 23)),\n    dict(date=datetime(2016, 3, 1)),\n    dict(date=datetime(2015, 9, 9)),\n    dict(date=datetime(2014, 4, 20))\n]", "code": "def end_of_day(date):\n    \"\"\"Return the last hour second and microsecond for the current day.\"\"\"\n    return date.replace(hour=23, minute=59, second=59, microsecond=99999)\n", "func_name": "end_of_day", "exec_status": true, "example_inputs": ["\"{'date': datetime.datetime(2022, 1, 1, 0, 0)}\"", "\"{'date': datetime.datetime(2020, 12, 31, 0, 0)}\"", "\"{'date': datetime.datetime(1999, 12, 31, 0, 0)}\"", "\"{'date': datetime.datetime(2000, 1, 1, 0, 0)}\"", "\"{'date': datetime.datetime(2022, 2, 28, 0, 0)}\"", "\"{'date': datetime.datetime(2020, 2, 29, 0, 0)}\"", "\"{'date': datetime.datetime(1996, 6, 15, 0, 0)}\"", "\"{'date': datetime.datetime(2022, 8, 15, 0, 0)}\"", "\"{'date': datetime.datetime(2010, 10, 10, 0, 0)}\"", "\"{'date': datetime.datetime(2015, 11, 11, 0, 0)}\""], "example_outputs": [{"return": "\"datetime.datetime(2022, 1, 1, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2020, 12, 31, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(1999, 12, 31, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2000, 1, 1, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2022, 2, 28, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2020, 2, 29, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(1996, 6, 15, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2022, 8, 15, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2010, 10, 10, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2015, 11, 11, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2023, 1, 1, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2022, 12, 31, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2021, 6, 15, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2020, 2, 29, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2019, 8, 23, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2018, 4, 1, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2017, 11, 30, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2016, 7, 4, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2015, 3, 14, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2014, 10, 31, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2023, 1, 1, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2022, 12, 25, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2021, 7, 4, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2020, 2, 29, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2019, 10, 31, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2018, 5, 15, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2017, 8, 23, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2016, 3, 1, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2015, 9, 9, 23, 59, 59, 99999)\""}, {"return": "\"datetime.datetime(2014, 4, 20, 23, 59, 59, 99999)\""}], "parsed_inputs": [[["date", "datetime(2022, 1, 1)"]], [["date", "datetime(2020, 12, 31)"]], [["date", "datetime(1999, 12, 31)"]], [["date", "datetime(2000, 1, 1)"]], [["date", "datetime(2022, 2, 28)"]], [["date", "datetime(2020, 2, 29)"]], [["date", "datetime(1996, 6, 15)"]], [["date", "datetime(2022, 8, 15)"]], [["date", "datetime(2010, 10, 10)"]], [["date", "datetime(2015, 11, 11)"]]], "exec_code": "def end_of_day(date):\n    \"\"\"Return the last hour second and microsecond for the current day.\"\"\"\n    return date.replace(hour=23, minute=59, second=59, microsecond=99999)\n", "output": "The function is:\n\n```python\ndef end_of_day(date):\n    \"\"\"Return the last hour second and microsecond for the current day.\"\"\"\n    return date.replace(hour=23, minute=59, second=59, microsecond=99999)\n\n```", "choosed_example_idx": [4, 8, 5, 6, 9, 2, 7, 0], "prompt": "Input: dict(date=datetime(2022, 2, 28)), Output: \"datetime.datetime(2022, 2, 28, 23, 59, 59, 99999)\"\nInput: dict(date=datetime(2010, 10, 10)), Output: \"datetime.datetime(2010, 10, 10, 23, 59, 59, 99999)\"\nInput: dict(date=datetime(2020, 2, 29)), Output: \"datetime.datetime(2020, 2, 29, 23, 59, 59, 99999)\"\nInput: dict(date=datetime(1996, 6, 15)), Output: \"datetime.datetime(1996, 6, 15, 23, 59, 59, 99999)\"\nInput: dict(date=datetime(2015, 11, 11)), Output: \"datetime.datetime(2015, 11, 11, 23, 59, 59, 99999)\"\nInput: dict(date=datetime(1999, 12, 31)), Output: \"datetime.datetime(1999, 12, 31, 23, 59, 59, 99999)\"\nInput: dict(date=datetime(2022, 8, 15)), Output: \"datetime.datetime(2022, 8, 15, 23, 59, 59, 99999)\"\nInput: dict(date=datetime(2022, 1, 1)), Output: \"datetime.datetime(2022, 1, 1, 23, 59, 59, 99999)\"\n\nWrite a function that generates the output from the input.\n\n\nFunction: end_of_day\n\n", "id": "46a8f163c03d30ff211dfab193504cd31f312f03_0"}
{"example_str": "examples = [\n    dict(List=[1, 2, 3, 0, 4, 5], col=3),\n    dict(List=[0, 1, 2, 3, 4, 5], col=0),\n    dict(List=[1, 2, 3, 4, 5], col=3),\n    dict(List=[1, 2, 0, 3, 4, 5], col=2),\n    dict(List=[0, 0, 0, 0, 0], col=0),\n    dict(List=[1, 1, 1, 1, 1], col=4),\n    dict(List=[5, 4, 3, 2, 1], col=2),\n    dict(List=[0, 1, 2, 3, 4, 5, 0], col=6),\n    dict(List=[1, 2, 3, 4, 5, 0, 0], col=5),\n    dict(List=[0, 0, 1, 2, 3, 4, 5], col=2)\n]\nexamples += [\n    dict(List=[0, 1, 2, 3, 0], col=2),\n    dict(List=[1, 2, 3, 4, 5], col=1),\n    dict(List=[0, 0, 0, 0, 0], col=0),\n    dict(List=[1, 2, 0, 4, 0], col=3),\n    dict(List=[5, 4, 3, 2, 1], col=4),\n    dict(List=[0], col=0),\n    dict(List=[1, 0, 1, 0, 1, 0], col=2),\n    dict(List=[0, 1, 2, 3, 4], col=4),\n    dict(List=[1, 2, 3, 0, 0, 0], col=3),\n    dict(List=[0, 1, 2, 3, 0, 0], col=1)\n]\nexamples += [\n    dict(List=[0, 1, 2, 0, 4], col=2),\n    dict(List=[1, 2, 3, 4, 5], col=1),\n    dict(List=[0, 0, 0, 0, 0], col=0),\n    dict(List=[1, 2, 0, 4, 0], col=3),\n    dict(List=[5, 4, 3, 2, 1], col=4),\n    dict(List=[0, 1, 0, 1, 0], col=1),\n    dict(List=[1, 2, 3, 0, 0], col=2),\n    dict(List=[0, 1, 2, 3, 0], col=0),\n    dict(List=[1, 0, 1, 0, 1], col=2),\n    dict(List=[0, 0, 0, 0, 0], col=4)\n]", "code": "def getAfter(List, col):\n    if 0 in List:\n        if list(reversed(List)).index(0) == 0:\n            return 0\n    return List[col:].count(0)\n", "func_name": "getAfter", "exec_status": true, "example_inputs": ["\"{'List': [1, 2, 3, 0, 4, 5], 'col': 3}\"", "\"{'List': [0, 1, 2, 3, 4, 5], 'col': 0}\"", "\"{'List': [1, 2, 3, 4, 5], 'col': 3}\"", "\"{'List': [1, 2, 0, 3, 4, 5], 'col': 2}\"", "\"{'List': [0, 0, 0, 0, 0], 'col': 0}\"", "\"{'List': [1, 1, 1, 1, 1], 'col': 4}\"", "\"{'List': [5, 4, 3, 2, 1], 'col': 2}\"", "\"{'List': [0, 1, 2, 3, 4, 5, 0], 'col': 6}\"", "\"{'List': [1, 2, 3, 4, 5, 0, 0], 'col': 5}\"", "\"{'List': [0, 0, 1, 2, 3, 4, 5], 'col': 2}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}], "parsed_inputs": [[["List", "[1, 2, 3, 0, 4, 5]"], ["col", "3"]], [["List", "[0, 1, 2, 3, 4, 5]"], ["col", "0"]], [["List", "[1, 2, 3, 4, 5]"], ["col", "3"]], [["List", "[1, 2, 0, 3, 4, 5]"], ["col", "2"]], [["List", "[0, 0, 0, 0, 0]"], ["col", "0"]], [["List", "[1, 1, 1, 1, 1]"], ["col", "4"]], [["List", "[5, 4, 3, 2, 1]"], ["col", "2"]], [["List", "[0, 1, 2, 3, 4, 5, 0]"], ["col", "6"]], [["List", "[1, 2, 3, 4, 5, 0, 0]"], ["col", "5"]], [["List", "[0, 0, 1, 2, 3, 4, 5]"], ["col", "2"]]], "exec_code": "def getAfter(List, col):\n    if 0 in List:\n        if list(reversed(List)).index(0) == 0:\n            return 0\n    return List[col:].count(0)\n", "output": "The function is:\n\n```python\ndef getAfter(List, col):\n    if 0 in List:\n        if list(reversed(List)).index(0) == 0:\n            return 0\n    return List[col:].count(0)\n\n```", "choosed_example_idx": [3, 2, 0], "prompt": "Write a function that generates the output from the input.\n\n\nInput: dict(List=[1, 2, 0, 3, 4, 5], col=2), Output: \"1\"\nInput: dict(List=[1, 2, 3, 4, 5], col=3), Output: \"0\"\nInput: dict(List=[1, 2, 3, 0, 4, 5], col=3), Output: \"1\"\n\n\n\nFunction: getAfter\n", "id": "4b3a7d7be39a38fc9abc12879147c705b19aeabc_0"}
{"example_str": "examples = [\n    dict(chars=['a', 'a', 'b', 'b', 'c', 'c', 'c']),\n    dict(chars=['a']),\n    dict(chars=['a', 'b', 'c']),\n    dict(chars=['a', 'a', 'a', 'a', 'a', 'b', 'b', 'b', 'b']),\n    dict(chars=['a', 'b', 'c', 'd', 'e', 'f']),\n    dict(chars=['a', 'a', 'a', 'b', 'b', 'a', 'a']),\n    dict(chars=['']),\n    dict(chars=['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']),\n    dict(chars=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']),\n    dict(chars=['a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'e', 'e']),\n]\nexamples += [\n    dict(chars=['a', 'a', 'b', 'b', 'c', 'c', 'c']),\n    dict(chars=['x', 'x', 'x', 'x', 'y', 'z', 'z']),\n    dict(chars=['p', 'q', 'r']),\n    dict(chars=['a']),\n    dict(chars=['m', 'm', 'm', 'n', 'n', 'o', 'p', 'p', 'p']),\n    dict(chars=[]),\n    dict(chars=['z', 'z', 'z', 'z', 'z', 'z']),\n    dict(chars=['a', 'b', 'c', 'd', 'e', 'f', 'g']),\n    dict(chars=['g', 'g', 'h', 'h', 'h', 'i', 'i', 'i', 'i']),\n    dict(chars=['1', '1', '2', '2', '2', '3', '3', '3', '3'])\n]\nexamples += [\n    dict(chars=list(\"aaabbc\")),\n    dict(chars=list(\"aaaa\")),\n    dict(chars=list(\"abc\")),\n    dict(chars=list(\"aabbaa\")),\n    dict(chars=list(\"\")),\n    dict(chars=list(\"cccccc\")),\n    dict(chars=list(\"aabcccccaaa\")),\n    dict(chars=list(\"xyz\")),\n    dict(chars=list(\"a\")),\n    dict(chars=list(\"bbbbb\"))\n]", "code": "def compress_string(chars):\n    index = write_index = 0\n    while index < len(chars):\n        count = 1\n        char_at_index = chars[index]\n        while index + 1 < len(chars) and chars[index] == chars[index + 1]:\n            index += 1\n            count += 1\n        index += 1\n        chars[write_index] = char_at_index\n        write_index += 1\n        if count > 1:\n            for char in str(count):\n                chars[write_index] = char\n                write_index += 1\n    return write_index\n", "func_name": "compress_string", "exec_status": true, "example_inputs": ["\"{'chars': ['a', 'a', 'b', 'b', 'c', 'c', 'c']}\"", "\"{'chars': ['a']}\"", "\"{'chars': ['a', 'b', 'c']}\"", "\"{'chars': ['a', 'a', 'a', 'a', 'a', 'b', 'b', 'b', 'b']}\"", "\"{'chars': ['a', 'b', 'c', 'd', 'e', 'f']}\"", "\"{'chars': ['a', 'a', 'a', 'b', 'b', 'a', 'a']}\"", "\"{'chars': ['']}\"", "\"{'chars': ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']}\"", "\"{'chars': ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']}\"", "\"{'chars': ['a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'e', 'e']}\""], "example_outputs": [{"return": "\"6\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"4\""}, {"return": "\"6\""}, {"return": "\"6\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"10\""}, {"return": "\"10\""}, {"return": "\"6\""}, {"return": "\"5\""}, {"return": "\"3\""}, {"return": "\"1\""}, {"return": "\"7\""}, {"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"7\""}, {"return": "\"6\""}, {"return": "\"6\""}, {"return": "\"5\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"6\""}, {"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"7\""}, {"return": "\"3\""}, {"return": "\"1\""}, {"return": "\"2\""}], "parsed_inputs": [[["chars", "['a', 'a', 'b', 'b', 'c', 'c', 'c']"]], [["chars", "['a']"]], [["chars", "['a', 'b', 'c']"]], [["chars", "['a', 'a', 'a', 'a', 'a', 'b', 'b', 'b', 'b']"]], [["chars", "['a', 'b', 'c', 'd', 'e', 'f']"]], [["chars", "['a', 'a', 'a', 'b', 'b', 'a', 'a']"]], [["chars", "['']"]], [["chars", "['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']"]], [["chars", "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']"]], [["chars", "['a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'e', 'e']"]]], "exec_code": "def compress_string(chars):\n    index = write_index = 0\n    while index < len(chars):\n        count = 1\n        char_at_index = chars[index]\n        while index + 1 < len(chars) and chars[index] == chars[index + 1]:\n            index += 1\n            count += 1\n        index += 1\n        chars[write_index] = char_at_index\n        write_index += 1\n        if count > 1:\n            for char in str(count):\n                chars[write_index] = char\n                write_index += 1\n    return write_index\n", "output": "The function is:\n\n```python\ndef compress_string(chars):\n    index = write_index = 0\n    while index < len(chars):\n        count = 1\n        char_at_index = chars[index]\n        while index + 1 < len(chars) and chars[index] == chars[index + 1]:\n            index += 1\n            count += 1\n        index += 1\n        chars[write_index] = char_at_index\n        write_index += 1\n        if count > 1:\n            for char in str(count):\n                chars[write_index] = char\n                write_index += 1\n    return write_index\n\n```", "choosed_example_idx": [3, 7, 6, 4, 5], "prompt": "Function: compress_string\n\nWrite a function that generates the output from the input.\nInput: dict(chars=['a', 'a', 'a', 'a', 'a', 'b', 'b', 'b', 'b']), Output: \"4\"\nInput: dict(chars=['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']), Output: \"3\"\nInput: dict(chars=['']), Output: \"1\"\nInput: dict(chars=['a', 'b', 'c', 'd', 'e', 'f']), Output: \"6\"\nInput: dict(chars=['a', 'a', 'a', 'b', 'b', 'a', 'a']), Output: \"6\"\n\n\n\n", "id": "54b89cb60b6edebaa4a78c39ec984f91ffdfe27c_0"}
{"example_str": "examples = [\n    dict(list=[{'time_taken': 10}, {'time_taken': 20}, {'time_taken': 30}], time=20),\n    dict(list=[{'time_taken': 5}, {'time_taken': 10}, {'time_taken': 15}], time=10),\n    dict(list=[{'time_taken': 1}, {'time_taken': 2}, {'time_taken': 3}], time=2),\n    dict(list=[{'time_taken': 100}, {'time_taken': 200}, {'time_taken': 300}], time=200),\n    dict(list=[{'time_taken': 0.5}, {'time_taken': 1.0}, {'time_taken': 1.5}], time=1.0),\n    dict(list=[], time=10),\n    dict(list=[{'time_taken': 10}], time=10),\n    dict(list=[{'time_taken': 10}, {'time_taken': 20}], time=15),\n    dict(list=[{'time_taken': 10}, {'time_taken': 20}, {'time_taken': 30}, {'time_taken': 40}], time=25),\n    dict(list=[{'time_taken': 1000}, {'time_taken': 2000}, {'time_taken': 3000}], time=2500),\n]\nexamples += [\n    dict(list=[{'time_taken': 30}, {'time_taken': 45}], time=20),\n    dict(list=[{'time_taken': 10}, {'time_taken': 15}], time=5),\n    dict(list=[{'time_taken': 60}, {'time_taken': 70}, {'time_taken': 80}], time=65),\n    dict(list=[{'time_taken': 120}, {'time_taken': 30}], time=100),\n    dict(list=[{'time_taken': 5}, {'time_taken': 10}], time=3),\n    dict(list=[{'time_taken': 200}, {'time_taken': 150}], time=120),\n    dict(list=[{'time_taken': 25}, {'time_taken': 35}, {'time_taken': 45}], time=30),\n    dict(list=[{'time_taken': 90}, {'time_taken': 110}], time=85),\n    dict(list=[{'time_taken': 2}, {'time_taken': 3}, {'time_taken': 4}], time=1),\n    dict(list=[{'time_taken': 55}, {'time_taken': 65}], time=50)\n]\nexamples += [\n    dict(list=[{'time_taken': 30}, {'time_taken': 45}], time=20),\n    dict(list=[{'time_taken': 10}, {'time_taken': 15}], time=5),\n    dict(list=[{'time_taken': 60}, {'time_taken': 70}], time=50),\n    dict(list=[{'time_taken': 25}, {'time_taken': 35}], time=30),\n    dict(list=[{'time_taken': 5}, {'time_taken': 10}], time=3),\n    dict(list=[{'time_taken': 120}, {'time_taken': 150}], time=100),\n    dict(list=[{'time_taken': 200}, {'time_taken': 180}], time=150),\n    dict(list=[{'time_taken': 90}, {'time_taken': 95}], time=85),\n    dict(list=[{'time_taken': 40}, {'time_taken': 55}], time=35),\n    dict(list=[{'time_taken': 75}, {'time_taken': 85}], time=70)\n]", "code": "def get_tasks_longer_than(list, time):\n    tasks = []\n    for task in list:\n        if task['time_taken'] > time:\n            tasks.append(task)\n    return tasks\n", "func_name": "get_tasks_longer_than", "exec_status": true, "example_inputs": ["\"{'list': [{'time_taken': 10}, {'time_taken': 20}, {'time_taken': 30}], 'time': 20}\"", "\"{'list': [{'time_taken': 5}, {'time_taken': 10}, {'time_taken': 15}], 'time': 10}\"", "\"{'list': [{'time_taken': 1}, {'time_taken': 2}, {'time_taken': 3}], 'time': 2}\"", "\"{'list': [{'time_taken': 100}, {'time_taken': 200}, {'time_taken': 300}], 'time': 200}\"", "\"{'list': [{'time_taken': 0.5}, {'time_taken': 1.0}, {'time_taken': 1.5}], 'time': 1.0}\"", "\"{'list': [], 'time': 10}\"", "\"{'list': [{'time_taken': 10}], 'time': 10}\"", "\"{'list': [{'time_taken': 10}, {'time_taken': 20}], 'time': 15}\"", "\"{'list': [{'time_taken': 10}, {'time_taken': 20}, {'time_taken': 30}, {'time_taken': 40}], 'time': 25}\"", "\"{'list': [{'time_taken': 1000}, {'time_taken': 2000}, {'time_taken': 3000}], 'time': 2500}\""], "example_outputs": [{"return": "\"[{'time_taken': 30}]\""}, {"return": "\"[{'time_taken': 15}]\""}, {"return": "\"[{'time_taken': 3}]\""}, {"return": "\"[{'time_taken': 300}]\""}, {"return": "\"[{'time_taken': 1.5}]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[{'time_taken': 20}]\""}, {"return": "\"[{'time_taken': 30}, {'time_taken': 40}]\""}, {"return": "\"[{'time_taken': 3000}]\""}, {"return": "\"[{'time_taken': 30}, {'time_taken': 45}]\""}, {"return": "\"[{'time_taken': 10}, {'time_taken': 15}]\""}, {"return": "\"[{'time_taken': 70}, {'time_taken': 80}]\""}, {"return": "\"[{'time_taken': 120}]\""}, {"return": "\"[{'time_taken': 5}, {'time_taken': 10}]\""}, {"return": "\"[{'time_taken': 200}, {'time_taken': 150}]\""}, {"return": "\"[{'time_taken': 35}, {'time_taken': 45}]\""}, {"return": "\"[{'time_taken': 90}, {'time_taken': 110}]\""}, {"return": "\"[{'time_taken': 2}, {'time_taken': 3}, {'time_taken': 4}]\""}, {"return": "\"[{'time_taken': 55}, {'time_taken': 65}]\""}, {"return": "\"[{'time_taken': 30}, {'time_taken': 45}]\""}, {"return": "\"[{'time_taken': 10}, {'time_taken': 15}]\""}, {"return": "\"[{'time_taken': 60}, {'time_taken': 70}]\""}, {"return": "\"[{'time_taken': 35}]\""}, {"return": "\"[{'time_taken': 5}, {'time_taken': 10}]\""}, {"return": "\"[{'time_taken': 120}, {'time_taken': 150}]\""}, {"return": "\"[{'time_taken': 200}, {'time_taken': 180}]\""}, {"return": "\"[{'time_taken': 90}, {'time_taken': 95}]\""}, {"return": "\"[{'time_taken': 40}, {'time_taken': 55}]\""}, {"return": "\"[{'time_taken': 75}, {'time_taken': 85}]\""}], "parsed_inputs": [[["list", "[{'time_taken': 10}, {'time_taken': 20}, {'time_taken': 30}]"], ["time", "20"]], [["list", "[{'time_taken': 5}, {'time_taken': 10}, {'time_taken': 15}]"], ["time", "10"]], [["list", "[{'time_taken': 1}, {'time_taken': 2}, {'time_taken': 3}]"], ["time", "2"]], [["list", "[{'time_taken': 100}, {'time_taken': 200}, {'time_taken': 300}]"], ["time", "200"]], [["list", "[{'time_taken': 0.5}, {'time_taken': 1.0}, {'time_taken': 1.5}]"], ["time", "1.0"]], [["list", "[]"], ["time", "10"]], [["list", "[{'time_taken': 10}]"], ["time", "10"]], [["list", "[{'time_taken': 10}, {'time_taken': 20}]"], ["time", "15"]], [["list", "[{'time_taken': 10}, {'time_taken': 20}, {'time_taken': 30}, {'time_taken': 40}]"], ["time", "25"]], [["list", "[{'time_taken': 1000}, {'time_taken': 2000}, {'time_taken': 3000}]"], ["time", "2500"]]], "exec_code": "def get_tasks_longer_than(list, time):\n    tasks = []\n    for task in list:\n        if task['time_taken'] > time:\n            tasks.append(task)\n    return tasks\n", "output": "The function is:\n\n```python\ndef get_tasks_longer_than(list, time):\n    tasks = []\n    for task in list:\n        if task['time_taken'] > time:\n            tasks.append(task)\n    return tasks\n\n```", "choosed_example_idx": [5, 4, 0, 2, 7, 1, 8, 3], "prompt": "Write a function that generates the output from the input.\n\nFunction: get_tasks_longer_than\n\nInput: dict(list=[], time=10), Output: \"[]\"\nInput: dict(list=[{'time_taken': 0.5}, {'time_taken': 1.0}, {'time_taken': 1.5}], time=1.0), Output: \"[{'time_taken': 1.5}]\"\nInput: dict(list=[{'time_taken': 10}, {'time_taken': 20}, {'time_taken': 30}], time=20), Output: \"[{'time_taken': 30}]\"\nInput: dict(list=[{'time_taken': 1}, {'time_taken': 2}, {'time_taken': 3}], time=2), Output: \"[{'time_taken': 3}]\"\nInput: dict(list=[{'time_taken': 10}, {'time_taken': 20}], time=15), Output: \"[{'time_taken': 20}]\"\nInput: dict(list=[{'time_taken': 5}, {'time_taken': 10}, {'time_taken': 15}], time=10), Output: \"[{'time_taken': 15}]\"\nInput: dict(list=[{'time_taken': 10}, {'time_taken': 20}, {'time_taken': 30}, {'time_taken': 40}], time=25), Output: \"[{'time_taken': 30}, {'time_taken': 40}]\"\nInput: dict(list=[{'time_taken': 100}, {'time_taken': 200}, {'time_taken': 300}], time=200), Output: \"[{'time_taken': 300}]\"\n\n", "id": "69fe44e494903a85fda5530383f0224afe0527a3_0"}
{"example_str": "examples = [\n    dict(res_dict={'name': 'Company A', 'headCompany': ['Head 1', 'Head 2']}),\n    dict(res_dict={'name': 'Company B', 'branchCompany': ['Branch 1', 'Branch 2']}),\n    dict(res_dict={'name': 'Company C', 'parentCompany': ['Parent 1', 'Parent 2']}),\n    dict(res_dict={'name': 'Company D', 'childCompany': ['Child 1', 'Child 2']}),\n    dict(res_dict={'name': 'Company E'}),\n    dict(res_dict={'headCompany': ['Head 1', 'Head 2']}),\n    dict(res_dict={'branchCompany': ['Branch 1', 'Branch 2']}),\n    dict(res_dict={'parentCompany': ['Parent 1', 'Parent 2']}),\n    dict(res_dict={'childCompany': ['Child 1', 'Child 2']}),\n    dict(res_dict={}),\n]", "code": "def filter_relation_data(res_dict):\n    \"\"\"\n    过滤出可提取出公司关系的数据\n    :param res_dict:\n    :return:\n    \"\"\"\n    name = res_dict.get('name')\n    heads = res_dict.get('headCompany')\n    branchs = res_dict.get('branchCompany')\n    parents = res_dict.get('parentCompany')\n    children = res_dict.get('childCompany')\n    if not name:\n        return False\n    if heads or branchs or parents or children:\n        return True\n    else:\n        return False\n", "func_name": "filter_relation_data", "exec_status": true, "example_inputs": ["\"{'res_dict': {'name': 'Company A', 'headCompany': ['Head 1', 'Head 2']}}\"", "\"{'res_dict': {'name': 'Company B', 'branchCompany': ['Branch 1', 'Branch 2']}}\"", "\"{'res_dict': {'name': 'Company C', 'parentCompany': ['Parent 1', 'Parent 2']}}\"", "\"{'res_dict': {'name': 'Company D', 'childCompany': ['Child 1', 'Child 2']}}\"", "\"{'res_dict': {'name': 'Company E'}}\"", "\"{'res_dict': {'headCompany': ['Head 1', 'Head 2']}}\"", "\"{'res_dict': {'branchCompany': ['Branch 1', 'Branch 2']}}\"", "\"{'res_dict': {'parentCompany': ['Parent 1', 'Parent 2']}}\"", "\"{'res_dict': {'childCompany': ['Child 1', 'Child 2']}}\"", "\"{'res_dict': {}}\""], "example_outputs": [{"trace": "[\"{'res_dict': {'name': 'Company A', 'headCompany': ['Head 1', 'Head 2']}}\", \"Line 6->    name = res_dict.get('name')\", \"{'name': 'Company A'}\", \"Line 7->    heads = res_dict.get('headCompany')\", \"{'heads': ['Head 1', 'Head 2']}\", \"Line 8->    branchs = res_dict.get('branchCompany')\", \"{'branchs': None}\", \"Line 9->    parents = res_dict.get('parentCompany')\", \"{'parents': None}\", \"Line 10->    children = res_dict.get('childCompany')\", \"{'children': None}\", \"Line 11->    if not name:\", \"Line 13->    if heads or branchs or parents or children:\", \"Line 14->        return True\"]", "return": "\"True\""}, {"trace": "[\"{'res_dict': {'name': 'Company B', 'branchCompany': ['Branch 1', 'Branch 2']}}\", \"Line 6->    name = res_dict.get('name')\", \"{'name': 'Company B'}\", \"Line 7->    heads = res_dict.get('headCompany')\", \"{'heads': None}\", \"Line 8->    branchs = res_dict.get('branchCompany')\", \"{'branchs': ['Branch 1', 'Branch 2']}\", \"Line 9->    parents = res_dict.get('parentCompany')\", \"{'parents': None}\", \"Line 10->    children = res_dict.get('childCompany')\", \"{'children': None}\", \"Line 11->    if not name:\", \"Line 13->    if heads or branchs or parents or children:\", \"Line 14->        return True\"]", "return": "\"True\""}, {"trace": "[\"{'res_dict': {'name': 'Company C', 'parentCompany': ['Parent 1', 'Parent 2']}}\", \"Line 6->    name = res_dict.get('name')\", \"{'name': 'Company C'}\", \"Line 7->    heads = res_dict.get('headCompany')\", \"{'heads': None}\", \"Line 8->    branchs = res_dict.get('branchCompany')\", \"{'branchs': None}\", \"Line 9->    parents = res_dict.get('parentCompany')\", \"{'parents': ['Parent 1', 'Parent 2']}\", \"Line 10->    children = res_dict.get('childCompany')\", \"{'children': None}\", \"Line 11->    if not name:\", \"Line 13->    if heads or branchs or parents or children:\", \"Line 14->        return True\"]", "return": "\"True\""}, {"trace": "[\"{'res_dict': {'name': 'Company D', 'childCompany': ['Child 1', 'Child 2']}}\", \"Line 6->    name = res_dict.get('name')\", \"{'name': 'Company D'}\", \"Line 7->    heads = res_dict.get('headCompany')\", \"{'heads': None}\", \"Line 8->    branchs = res_dict.get('branchCompany')\", \"{'branchs': None}\", \"Line 9->    parents = res_dict.get('parentCompany')\", \"{'parents': None}\", \"Line 10->    children = res_dict.get('childCompany')\", \"{'children': ['Child 1', 'Child 2']}\", \"Line 11->    if not name:\", \"Line 13->    if heads or branchs or parents or children:\", \"Line 14->        return True\"]", "return": "\"True\""}, {"trace": "[\"{'res_dict': {'name': 'Company E'}}\", \"Line 6->    name = res_dict.get('name')\", \"{'name': 'Company E'}\", \"Line 7->    heads = res_dict.get('headCompany')\", \"{'heads': None}\", \"Line 8->    branchs = res_dict.get('branchCompany')\", \"{'branchs': None}\", \"Line 9->    parents = res_dict.get('parentCompany')\", \"{'parents': None}\", \"Line 10->    children = res_dict.get('childCompany')\", \"{'children': None}\", \"Line 11->    if not name:\", \"Line 13->    if heads or branchs or parents or children:\", \"Line 16->        return False\"]", "return": "\"False\""}, {"trace": "[\"{'res_dict': {'headCompany': ['Head 1', 'Head 2']}}\", \"Line 6->    name = res_dict.get('name')\", \"{'name': None}\", \"Line 7->    heads = res_dict.get('headCompany')\", \"{'heads': ['Head 1', 'Head 2']}\", \"Line 8->    branchs = res_dict.get('branchCompany')\", \"{'branchs': None}\", \"Line 9->    parents = res_dict.get('parentCompany')\", \"{'parents': None}\", \"Line 10->    children = res_dict.get('childCompany')\", \"{'children': None}\", \"Line 11->    if not name:\", \"Line 12->        return False\"]", "return": "\"False\""}, {"trace": "[\"{'res_dict': {'branchCompany': ['Branch 1', 'Branch 2']}}\", \"Line 6->    name = res_dict.get('name')\", \"{'name': None}\", \"Line 7->    heads = res_dict.get('headCompany')\", \"{'heads': None}\", \"Line 8->    branchs = res_dict.get('branchCompany')\", \"{'branchs': ['Branch 1', 'Branch 2']}\", \"Line 9->    parents = res_dict.get('parentCompany')\", \"{'parents': None}\", \"Line 10->    children = res_dict.get('childCompany')\", \"{'children': None}\", \"Line 11->    if not name:\", \"Line 12->        return False\"]", "return": "\"False\""}, {"trace": "[\"{'res_dict': {'parentCompany': ['Parent 1', 'Parent 2']}}\", \"Line 6->    name = res_dict.get('name')\", \"{'name': None}\", \"Line 7->    heads = res_dict.get('headCompany')\", \"{'heads': None}\", \"Line 8->    branchs = res_dict.get('branchCompany')\", \"{'branchs': None}\", \"Line 9->    parents = res_dict.get('parentCompany')\", \"{'parents': ['Parent 1', 'Parent 2']}\", \"Line 10->    children = res_dict.get('childCompany')\", \"{'children': None}\", \"Line 11->    if not name:\", \"Line 12->        return False\"]", "return": "\"False\""}, {"trace": "[\"{'res_dict': {'childCompany': ['Child 1', 'Child 2']}}\", \"Line 6->    name = res_dict.get('name')\", \"{'name': None}\", \"Line 7->    heads = res_dict.get('headCompany')\", \"{'heads': None}\", \"Line 8->    branchs = res_dict.get('branchCompany')\", \"{'branchs': None}\", \"Line 9->    parents = res_dict.get('parentCompany')\", \"{'parents': None}\", \"Line 10->    children = res_dict.get('childCompany')\", \"{'children': ['Child 1', 'Child 2']}\", \"Line 11->    if not name:\", \"Line 12->        return False\"]", "return": "\"False\""}, {"trace": "[\"{'res_dict': {}}\", \"Line 6->    name = res_dict.get('name')\", \"{'name': None}\", \"Line 7->    heads = res_dict.get('headCompany')\", \"{'heads': None}\", \"Line 8->    branchs = res_dict.get('branchCompany')\", \"{'branchs': None}\", \"Line 9->    parents = res_dict.get('parentCompany')\", \"{'parents': None}\", \"Line 10->    children = res_dict.get('childCompany')\", \"{'children': None}\", \"Line 11->    if not name:\", \"Line 12->        return False\"]", "return": "\"False\""}], "parsed_inputs": [[["res_dict", "{'name': 'Company A', 'headCompany': ['Head 1', 'Head 2']}"]], [["res_dict", "{'name': 'Company B', 'branchCompany': ['Branch 1', 'Branch 2']}"]], [["res_dict", "{'name': 'Company C', 'parentCompany': ['Parent 1', 'Parent 2']}"]], [["res_dict", "{'name': 'Company D', 'childCompany': ['Child 1', 'Child 2']}"]], [["res_dict", "{'name': 'Company E'}"]], [["res_dict", "{'headCompany': ['Head 1', 'Head 2']}"]], [["res_dict", "{'branchCompany': ['Branch 1', 'Branch 2']}"]], [["res_dict", "{'parentCompany': ['Parent 1', 'Parent 2']}"]], [["res_dict", "{'childCompany': ['Child 1', 'Child 2']}"]], [["res_dict", "{}"]]], "exec_code": "def filter_relation_data(res_dict):\n    \"\"\"\n    过滤出可提取出公司关系的数据\n    :param res_dict:\n    :return:\n    \"\"\"\n    name = res_dict.get('name')\n    heads = res_dict.get('headCompany')\n    branchs = res_dict.get('branchCompany')\n    parents = res_dict.get('parentCompany')\n    children = res_dict.get('childCompany')\n    if not name:\n        return False\n    if heads or branchs or parents or children:\n        return True\n    else:\n        return False\n", "output": "The function is:\n\n```python\ndef filter_relation_data(res_dict):\n    \"\"\"\n    过滤出可提取出公司关系的数据\n    :param res_dict:\n    :return:\n    \"\"\"\n    name = res_dict.get('name')\n    heads = res_dict.get('headCompany')\n    branchs = res_dict.get('branchCompany')\n    parents = res_dict.get('parentCompany')\n    children = res_dict.get('childCompany')\n    if not name:\n        return False\n    if heads or branchs or parents or children:\n        return True\n    else:\n        return False\n\n```", "choosed_example_idx": [9, 4, 3, 5, 2, 1], "prompt": "Function: filter_relation_data\nInput: dict(res_dict={}), Output: \"False\"\nInput: dict(res_dict={'name': 'Company E'}), Output: \"False\"\nInput: dict(res_dict={'name': 'Company D', 'childCompany': ['Child 1', 'Child 2']}), Output: \"True\"\nInput: dict(res_dict={'headCompany': ['Head 1', 'Head 2']}), Output: \"False\"\nInput: dict(res_dict={'name': 'Company C', 'parentCompany': ['Parent 1', 'Parent 2']}), Output: \"True\"\nInput: dict(res_dict={'name': 'Company B', 'branchCompany': ['Branch 1', 'Branch 2']}), Output: \"True\"\n\nWrite a function that generates the output from the input.\n", "id": "4b91b8630c14baec80c9f250c22fe0476c0507c0_0"}
{"example_str": "examples = [\n    dict(mode='d'),\n    dict(mode='D'),\n    dict(mode='e'),\n    dict(mode='E'),\n    dict(mode='a'),\n    dict(mode='b'),\n    dict(mode='1'),\n    dict(mode=''),\n    dict(mode='de'),\n    dict(mode='abc'),\n]\nexamples += [\n    dict(mode='d'),        # Example 1: valid input, lowercase\n    dict(mode='e'),        # Example 2: valid input, lowercase\n    dict(mode='D'),        # Example 3: valid input, uppercase\n    dict(mode='E'),        # Example 4: valid input, uppercase\n    dict(mode='decode'),   # Example 5: invalid input, string\n    dict(mode='encode'),   # Example 6: invalid input, string\n    dict(mode='x'),        # Example 7: invalid input, single character\n    dict(mode=''),         # Example 8: invalid input, empty string\n    dict(mode=' '),        # Example 9: invalid input, space character\n    dict(mode='1'),        # Example 10: invalid input, numeric character as string\n]\nexamples += [\n    dict(mode='d'),\n    dict(mode='e'),\n    dict(mode='D'),\n    dict(mode='E'),\n    dict(mode='x'),\n    dict(mode='y'),\n    dict(mode='decode'),\n    dict(mode='encode'),\n    dict(mode='DARK'),\n    dict(mode='light')\n]", "code": "def checkValidMode(mode):\n    if mode.lower() == 'd' or mode.lower() == 'e':\n        return True\n    else:\n        return False\n", "func_name": "checkValidMode", "exec_status": true, "example_inputs": ["\"{'mode': 'd'}\"", "\"{'mode': 'D'}\"", "\"{'mode': 'e'}\"", "\"{'mode': 'E'}\"", "\"{'mode': 'a'}\"", "\"{'mode': 'b'}\"", "\"{'mode': '1'}\"", "\"{'mode': ''}\"", "\"{'mode': 'de'}\"", "\"{'mode': 'abc'}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}], "parsed_inputs": [[["mode", "\"d\""]], [["mode", "\"D\""]], [["mode", "\"e\""]], [["mode", "\"E\""]], [["mode", "\"a\""]], [["mode", "\"b\""]], [["mode", "\"1\""]], [["mode", "\"\""]], [["mode", "\"de\""]], [["mode", "\"abc\""]]], "exec_code": "def checkValidMode(mode):\n    if mode.lower() == 'd' or mode.lower() == 'e':\n        return True\n    else:\n        return False\n", "output": "The function is:\n\n```python\ndef checkValidMode(mode):\n    if mode.lower() == 'd' or mode.lower() == 'e':\n        return True\n    else:\n        return False\n\n```", "choosed_example_idx": [1, 3, 9, 6, 2, 4, 5, 0, 7], "prompt": "Input: dict(mode=\"D\"), Output: \"True\"\nInput: dict(mode=\"E\"), Output: \"True\"\nInput: dict(mode=\"abc\"), Output: \"False\"\nInput: dict(mode=\"1\"), Output: \"False\"\nInput: dict(mode=\"e\"), Output: \"True\"\nInput: dict(mode=\"a\"), Output: \"False\"\nInput: dict(mode=\"b\"), Output: \"False\"\nInput: dict(mode=\"d\"), Output: \"True\"\nInput: dict(mode=\"\"), Output: \"False\"\n\nWrite a function that generates the output from the input.\nFunction: checkValidMode\n\n\n", "id": "29b6b4f05da57ac7fdbbd2716a4e1dd11a04b409_0"}
{"example_str": "examples = [\n    dict(x=2, w=3, b=1),  # simple integer values\n    dict(x=4.5, w=2.1, b=-3),  # mixed integer and float values\n    dict(x=0, w=1, b=0),  # zero values\n    dict(x=-1, w=2, b=3),  # negative value for x\n    dict(x=10, w=0, b=5),  # zero value for w\n    dict(x=3, w=4, b=-2),  # all non-zero values\n    dict(x=1.2, w=3.4, b=2.1),  # all float values\n    dict(x=5, w=-2, b=1),  # negative value for w\n    dict(x=2, w=1, b=-4),  # negative value for b\n    dict(x=7, w=3, b=0),  # zero value for b\n]\nexamples += [\n    dict(x=1, w=2, b=3),\n    dict(x=0, w=0, b=0),\n    dict(x=-1, w=1, b=2),\n    dict(x=2.5, w=3.5, b=1.5),\n    dict(x=-3, w=0.5, b=-0.5),\n    dict(x=10, w=-2, b=5),\n    dict(x=0.1, w=0.2, b=0.3),\n    dict(x=100, w=-1, b=50),\n    dict(x=-50, w=2, b=-100),\n    dict(x=0, w=10, b=-10)\n]\nexamples += [\n    dict(x=1, w=2, b=3),\n    dict(x=0.5, w=1.5, b=0.2),\n    dict(x=-1, w=2, b=-3),\n    dict(x=10, w=0.1, b=0.5),\n    dict(x=100, w=0.01, b=1),\n    dict(x=2.5, w=3.5, b=1.5),\n    dict(x=-0.5, w=4, b=2),\n    dict(x=0, w=1, b=0),\n    dict(x=3, w=-1, b=5),\n    dict(x=7, w=3, b=-2)\n]", "code": "def predict(x, w, b):\n    return w * x + b\n", "func_name": "predict", "exec_status": true, "example_inputs": ["\"{'x': 2, 'w': 3, 'b': 1}\"", "\"{'x': 4.5, 'w': 2.1, 'b': -3}\"", "\"{'x': 0, 'w': 1, 'b': 0}\"", "\"{'x': -1, 'w': 2, 'b': 3}\"", "\"{'x': 10, 'w': 0, 'b': 5}\"", "\"{'x': 3, 'w': 4, 'b': -2}\"", "\"{'x': 1.2, 'w': 3.4, 'b': 2.1}\"", "\"{'x': 5, 'w': -2, 'b': 1}\"", "\"{'x': 2, 'w': 1, 'b': -4}\"", "\"{'x': 7, 'w': 3, 'b': 0}\""], "example_outputs": [{"return": "\"7\""}, {"return": "\"6.450000000000001\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"5\""}, {"return": "\"10\""}, {"return": "\"6.18\""}, {"return": "\"-9\""}, {"return": "\"-2\""}, {"return": "\"21\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"10.25\""}, {"return": "\"-2.0\""}, {"return": "\"-15\""}, {"return": "\"0.32\""}, {"return": "\"-50\""}, {"return": "\"-200\""}, {"return": "\"-10\""}, {"return": "\"5\""}, {"return": "\"0.95\""}, {"return": "\"-5\""}, {"return": "\"1.5\""}, {"return": "\"2.0\""}, {"return": "\"10.25\""}, {"return": "\"0.0\""}, {"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"19\""}], "parsed_inputs": [[["x", "2"], ["w", "3"], ["b", "1"]], [["x", "4.5"], ["w", "2.1"], ["b", "-3"]], [["x", "0"], ["w", "1"], ["b", "0"]], [["x", "-1"], ["w", "2"], ["b", "3"]], [["x", "10"], ["w", "0"], ["b", "5"]], [["x", "3"], ["w", "4"], ["b", "-2"]], [["x", "1.2"], ["w", "3.4"], ["b", "2.1"]], [["x", "5"], ["w", "-2"], ["b", "1"]], [["x", "2"], ["w", "1"], ["b", "-4"]], [["x", "7"], ["w", "3"], ["b", "0"]]], "exec_code": "def predict(x, w, b):\n    return w * x + b\n", "output": "The function is:\n\n```python\ndef predict(x, w, b):\n    return w * x + b\n\n```", "choosed_example_idx": [9, 2, 0, 3, 5, 8, 6], "prompt": "Function: predict\nWrite a function that generates the output from the input.\nInput: dict(x=7, w=3, b=0), Output: \"21\"\nInput: dict(x=0, w=1, b=0), Output: \"0\"\nInput: dict(x=2, w=3, b=1), Output: \"7\"\nInput: dict(x=-1, w=2, b=3), Output: \"1\"\nInput: dict(x=3, w=4, b=-2), Output: \"10\"\nInput: dict(x=2, w=1, b=-4), Output: \"-2\"\nInput: dict(x=1.2, w=3.4, b=2.1), Output: \"6.18\"\n\n\n\n", "id": "6f9b9233270895829b1ef4a1b4885b6697904dc2_0"}
{"example_str": "examples = [\n    dict(syntax=\"hello,world\"),\n    dict(syntax=\"'hello','world'\"),\n    dict(syntax=\"   'hello','world'   \"),\n    dict(syntax=\"'hello,world'\"),\n    dict(syntax=\"hello,'world'\"),\n    dict(syntax=\"'hello',world\"),\n    dict(syntax=\"hello, 'world'\"),\n    dict(syntax=\"'hello', 'world', 'python'\"),\n    dict(syntax=\"   'hello', 'world', 'python'   \"),\n    dict(syntax=\"'hello','world','python','java'\"),\n]\nexamples += [\n    dict(syntax=\"'apple','banana','cherry'\"),\n    dict(syntax=\" 'dog','cat' \"),\n    dict(syntax=\"'hello, world','test'\"),\n    dict(syntax=\"'single'\"),\n    dict(syntax=\"'multiple','entries','are','here'\"),\n    dict(syntax=\"\"),\n    dict(syntax=\"'123','456','789'\"),\n    dict(syntax=\"'data','more data','even more data'\"),\n    dict(syntax=\"'a','b','c','d','e'\"),\n    dict(syntax=\"'first','second','third'\")\n]\nexamples += [\n    dict(syntax=\" 'apple', 'banana', 'cherry' \"),\n    dict(syntax=\"'first' 'second' 'third'\"),\n    dict(syntax=\" 'single' \"),\n    dict(syntax=\"no quotes here\"),\n    dict(syntax=\"'multiple' 'entries' 'in' 'one' 'string'\"),\n    dict(syntax=\"'123' '456' '789'\"),\n    dict(syntax=\" 'spaces' ' are ' 'included' \"),\n    dict(syntax=\"'mixed'usage of quotes and no quotes\"),\n    dict(syntax=\"'single-element'\"),\n    dict(syntax=\"'a', 'list', 'of', 'words'\")\n]", "code": "def CSV(syntax):\n    syntax = syntax.strip()\n    csv = []\n    ret = []\n    counter = 1\n    while counter < len(syntax):\n        if syntax[counter].startswith(\"'\"):\n            sp = syntax.split(\"'\")\n            csv.append(sp)\n        counter += 1\n    if len(csv) > 0:\n        for i in csv[1]:\n            if i is not '':\n                ret.append(i)\n    return ret\n", "func_name": "CSV", "exec_status": true, "example_inputs": ["\"{'syntax': 'hello,world'}\"", "\"{'syntax': \\\"'hello','world'\\\"}\"", "\"{'syntax': \\\"   'hello','world'   \\\"}\"", "\"{'syntax': \\\"'hello,world'\\\"}\"", "\"{'syntax': \\\"hello,'world'\\\"}\"", "\"{'syntax': \\\"'hello',world\\\"}\"", "\"{'syntax': \\\"hello, 'world'\\\"}\"", "\"{'syntax': \\\"'hello', 'world', 'python'\\\"}\"", "\"{'syntax': \\\"   'hello', 'world', 'python'   \\\"}\"", "\"{'syntax': \\\"'hello','world','python','java'\\\"}\""], "example_outputs": [{"return": "\"[]\""}, {"return": "\"['hello', ',', 'world']\""}, {"return": "\"['hello', ',', 'world']\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"return": "\"['hello,', 'world']\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"return": "\"['hello, ', 'world']\""}, {"return": "\"['hello', ', ', 'world', ', ', 'python']\""}, {"return": "\"['hello', ', ', 'world', ', ', 'python']\""}, {"return": "\"['hello', ',', 'world', ',', 'python', ',', 'java']\""}, {"return": "\"['apple', ',', 'banana', ',', 'cherry']\""}, {"return": "\"['dog', ',', 'cat']\""}, {"return": "\"['hello, world', ',', 'test']\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"return": "\"['multiple', ',', 'entries', ',', 'are', ',', 'here']\""}, {"return": "\"[]\""}, {"return": "\"['123', ',', '456', ',', '789']\""}, {"return": "\"['data', ',', 'more data', ',', 'even more data']\""}, {"return": "\"['a', ',', 'b', ',', 'c', ',', 'd', ',', 'e']\""}, {"return": "\"['first', ',', 'second', ',', 'third']\""}, {"return": "\"['apple', ', ', 'banana', ', ', 'cherry']\""}, {"return": "\"['first', ' ', 'second', ' ', 'third']\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"return": "\"[]\""}, {"return": "\"['multiple', ' ', 'entries', ' ', 'in', ' ', 'one', ' ', 'string']\""}, {"return": "\"['123', ' ', '456', ' ', '789']\""}, {"return": "\"['spaces', ' ', ' are ', ' ', 'included']\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"return": "\"['a', ', ', 'list', ', ', 'of', ', ', 'words']\""}], "parsed_inputs": [[["syntax", "\"hello,world\""]], [["syntax", "\"'hello','world'\""]], [["syntax", "\"   'hello','world'   \""]], [["syntax", "\"'hello,world'\""]], [["syntax", "\"hello,'world'\""]], [["syntax", "\"'hello',world\""]], [["syntax", "\"hello, 'world'\""]], [["syntax", "\"'hello', 'world', 'python'\""]], [["syntax", "\"   'hello', 'world', 'python'   \""]], [["syntax", "\"'hello','world','python','java'\""]]], "exec_code": "def CSV(syntax):\n    syntax = syntax.strip()\n    csv = []\n    ret = []\n    counter = 1\n    while counter < len(syntax):\n        if syntax[counter].startswith(\"'\"):\n            sp = syntax.split(\"'\")\n            csv.append(sp)\n        counter += 1\n    if len(csv) > 0:\n        for i in csv[1]:\n            if i is not '':\n                ret.append(i)\n    return ret\n", "output": "The function is:\n\n```python\ndef CSV(syntax):\n    syntax = syntax.strip()\n    csv = []\n    ret = []\n    counter = 1\n    while counter < len(syntax):\n        if syntax[counter].startswith(\"'\"):\n            sp = syntax.split(\"'\")\n            csv.append(sp)\n        counter += 1\n    if len(csv) > 0:\n        for i in csv[1]:\n            if i is not '':\n                ret.append(i)\n    return ret\n\n```", "choosed_example_idx": [0, 3, 5, 2, 1, 8], "prompt": "Write a function that generates the output from the input.\nFunction: CSV\n\nInput: dict(syntax=\"hello,world\"), Output: \"[]\"\nInput: dict(syntax=\"'hello,world'\"), Output: \"<class 'IndexError'>: list index out of range\"\nInput: dict(syntax=\"'hello',world\"), Output: \"<class 'IndexError'>: list index out of range\"\nInput: dict(syntax=\"   'hello','world'   \"), Output: \"['hello', ',', 'world']\"\nInput: dict(syntax=\"'hello','world'\"), Output: \"['hello', ',', 'world']\"\nInput: dict(syntax=\"   'hello', 'world', 'python'   \"), Output: \"['hello', ', ', 'world', ', ', 'python']\"\n\n", "id": "5d6981f0712c817e37047c23b1c2d2c24010e417_0"}
{"example_str": "examples = [\n    dict(data=5),\n    dict(data=2.5),\n    dict(data=0),\n    dict(data=-3),\n    dict(data=10),\n    dict(data=7.7),\n    dict(data=1),\n    dict(data=-0.5),\n    dict(data=4),\n    dict(data=9.9),\n]\nexamples += [\n    dict(data=2),\n    dict(data=3.5),\n    dict(data=-1),\n    dict(data=0),\n    dict(data=10),\n    dict(data=-5.5),\n    dict(data=100),\n    dict(data=0.1),\n    dict(data=-10),\n    dict(data=1.234)\n]\nexamples += [\n    dict(data=1),\n    dict(data=2),\n    dict(data=3),\n    dict(data=4),\n    dict(data=5),\n    dict(data=6),\n    dict(data=7),\n    dict(data=8),\n    dict(data=9),\n    dict(data=10)\n]", "code": "def data_square(data):\n    return data ** 2\n", "func_name": "data_square", "exec_status": true, "example_inputs": ["\"{'data': 5}\"", "\"{'data': 2.5}\"", "\"{'data': 0}\"", "\"{'data': -3}\"", "\"{'data': 10}\"", "\"{'data': 7.7}\"", "\"{'data': 1}\"", "\"{'data': -0.5}\"", "\"{'data': 4}\"", "\"{'data': 9.9}\""], "example_outputs": [{"return": "\"25\""}, {"return": "\"6.25\""}, {"return": "\"0\""}, {"return": "\"9\""}, {"return": "\"100\""}, {"return": "\"59.290000000000006\""}, {"return": "\"1\""}, {"return": "\"0.25\""}, {"return": "\"16\""}, {"return": "\"98.01\""}, {"return": "\"4\""}, {"return": "\"12.25\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"100\""}, {"return": "\"30.25\""}, {"return": "\"10000\""}, {"return": "\"0.010000000000000002\""}, {"return": "\"100\""}, {"return": "\"1.522756\""}, {"return": "\"1\""}, {"return": "\"4\""}, {"return": "\"9\""}, {"return": "\"16\""}, {"return": "\"25\""}, {"return": "\"36\""}, {"return": "\"49\""}, {"return": "\"64\""}, {"return": "\"81\""}, {"return": "\"100\""}], "parsed_inputs": [[["data", "5"]], [["data", "2.5"]], [["data", "0"]], [["data", "-3"]], [["data", "10"]], [["data", "7.7"]], [["data", "1"]], [["data", "-0.5"]], [["data", "4"]], [["data", "9.9"]]], "exec_code": "def data_square(data):\n    return data ** 2\n", "output": "The function is:\n\n```python\ndef data_square(data):\n    return data ** 2\n\n```", "choosed_example_idx": [8, 2, 0, 3, 7], "prompt": "Write a function that generates the output from the input.\nInput: dict(data=4), Output: \"16\"\nInput: dict(data=0), Output: \"0\"\nInput: dict(data=5), Output: \"25\"\nInput: dict(data=-3), Output: \"9\"\nInput: dict(data=-0.5), Output: \"0.25\"\n\nFunction: data_square\n\n\n", "id": "5a70242a9326cb0eed780cfc9616936637776548_0"}
{"example_str": "examples = [\n    dict(start=1, end=10),\n    dict(start=5, end=15),\n    dict(start=0, end=5),\n    dict(start=-5, end=5),\n    dict(start=10, end=20),\n    dict(start=1, end=1),\n    dict(start=0, end=0),\n    dict(start=-10, end=-5),\n    dict(start=50, end=100),\n    dict(start=100, end=150),\n]\nexamples += [\n    dict(start=1, end=10),  # Sum of numbers from 1 to 10\n    dict(start=0, end=5),   # Sum of numbers from 0 to 5\n    dict(start=-5, end=5),  # Sum of numbers from -5 to 5\n    dict(start=100, end=100),  # Sum when start and end are the same\n    dict(start=10, end=1),  # Sum when start is greater than end (should handle gracefully or specify behavior)\n    dict(start=-10, end=-1),  # Sum of numbers from -10 to -1\n    dict(start=50, end=55),  # Sum of numbers from 50 to 55\n    dict(start=20, end=30),  # Sum of numbers from 20 to 30\n    dict(start=-20, end=0),  # Sum of numbers from -20 to 0\n    dict(start=0, end=0)    # Sum when both start and end are zero\n]\nexamples += [\n    dict(start=1, end=10),\n    dict(start=0, end=5),\n    dict(start=-5, end=5),\n    dict(start=100, end=110),\n    dict(start=20, end=25),\n    dict(start=50, end=60),\n    dict(start=0, end=0),\n    dict(start=-10, end=-1),\n    dict(start=10, end=10),\n    dict(start=5, end=15)\n]", "code": "def sum_all(start, end):\n    output = 0\n    for i in range(start, end + 1):\n        output += i\n    return output\n", "func_name": "sum_all", "exec_status": true, "example_inputs": ["\"{'start': 1, 'end': 10}\"", "\"{'start': 5, 'end': 15}\"", "\"{'start': 0, 'end': 5}\"", "\"{'start': -5, 'end': 5}\"", "\"{'start': 10, 'end': 20}\"", "\"{'start': 1, 'end': 1}\"", "\"{'start': 0, 'end': 0}\"", "\"{'start': -10, 'end': -5}\"", "\"{'start': 50, 'end': 100}\"", "\"{'start': 100, 'end': 150}\""], "example_outputs": [{"return": "\"55\""}, {"return": "\"110\""}, {"return": "\"15\""}, {"return": "\"0\""}, {"return": "\"165\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"-45\""}, {"return": "\"3825\""}, {"return": "\"6375\""}, {"return": "\"55\""}, {"return": "\"15\""}, {"return": "\"0\""}, {"return": "\"100\""}, {"return": "\"0\""}, {"return": "\"-55\""}, {"return": "\"315\""}, {"return": "\"275\""}, {"return": "\"-210\""}, {"return": "\"0\""}, {"return": "\"55\""}, {"return": "\"15\""}, {"return": "\"0\""}, {"return": "\"1155\""}, {"return": "\"135\""}, {"return": "\"605\""}, {"return": "\"0\""}, {"return": "\"-55\""}, {"return": "\"10\""}, {"return": "\"110\""}], "parsed_inputs": [[["start", "1"], ["end", "10"]], [["start", "5"], ["end", "15"]], [["start", "0"], ["end", "5"]], [["start", "-5"], ["end", "5"]], [["start", "10"], ["end", "20"]], [["start", "1"], ["end", "1"]], [["start", "0"], ["end", "0"]], [["start", "-10"], ["end", "-5"]], [["start", "50"], ["end", "100"]], [["start", "100"], ["end", "150"]]], "exec_code": "def sum_all(start, end):\n    output = 0\n    for i in range(start, end + 1):\n        output += i\n    return output\n", "output": "The function is:\n\n```python\ndef sum_all(start, end):\n    output = 0\n    for i in range(start, end + 1):\n        output += i\n    return output\n\n```", "choosed_example_idx": [8, 3, 9, 5, 2, 4, 6, 1, 0, 7], "prompt": "Input: dict(start=50, end=100), Output: \"3825\"\nInput: dict(start=-5, end=5), Output: \"0\"\nInput: dict(start=100, end=150), Output: \"6375\"\nInput: dict(start=1, end=1), Output: \"1\"\nInput: dict(start=0, end=5), Output: \"15\"\nInput: dict(start=10, end=20), Output: \"165\"\nInput: dict(start=0, end=0), Output: \"0\"\nInput: dict(start=5, end=15), Output: \"110\"\nInput: dict(start=1, end=10), Output: \"55\"\nInput: dict(start=-10, end=-5), Output: \"-45\"\n\nFunction: sum_all\nWrite a function that generates the output from the input.\n", "id": "0d8e12ad686867c127e76227ede4a89a5af99c8e_0"}
{"example_str": "examples = [\n    dict(a_list=[1, 2, 3, 4, 5], item=3),\n    dict(a_list=['a', 'b', 'c', 'd'], item='c'),\n    dict(a_list=[10, 20, 30, 40, 50], item=25),\n    dict(a_list=['hello', 'world', 'python'], item='world'),\n    dict(a_list=[1, 2, 3, 4, 5], item=6),\n    dict(a_list=['a', 'b', 'c', 'd'], item='e'),\n    dict(a_list=[1, 3, 5, 7, 9], item=5),\n    dict(a_list=['apple', 'banana', 'cherry'], item='banana'),\n    dict(a_list=[10, 20, 30, 40, 50], item=35),\n    dict(a_list=['hello', 'world', 'python'], item='java')\n]\nexamples += [\n    dict(a_list=[1, 2, 3, 4, 5], item=3),\n    dict(a_list=[10, 20, 30, 40, 50], item=25),\n    dict(a_list=[5, 10, 15, 20, 25], item=5),\n    dict(a_list=[100, 200, 300, 400, 500], item=500),\n    dict(a_list=[1, 3, 5, 7, 9], item=8),\n    dict(a_list=[-10, 0, 10, 20, 30], item=-10),\n    dict(a_list=[2, 4, 6, 8, 10], item=11),\n    dict(a_list=[0, 2, 4, 6, 8], item=4),\n    dict(a_list=[-5, 0, 5, 10, 15], item=-2),\n    dict(a_list=[10, 20, 30, 40, 50], item=10)\n]\nexamples += [\n    dict(a_list=[1, 2, 3, 4, 5], item=3),\n    dict(a_list=[10, 20, 30, 40, 50], item=25),\n    dict(a_list=[5, 10, 15, 20, 25], item=5),\n    dict(a_list=[100, 200, 300, 400, 500], item=500),\n    dict(a_list=[1, 3, 5, 7, 9], item=8),\n    dict(a_list=[2, 4, 6, 8, 10], item=1),\n    dict(a_list=[-5, 0, 5, 10, 15], item=0),\n    dict(a_list=[-10, -5, 0, 5, 10], item=-10),\n    dict(a_list=[0.5, 1.5, 2.5, 3.5, 4.5], item=3.5),\n    dict(a_list=[100, 200, 300, 400, 500], item=600)\n]", "code": "def ordered_sequential_search(a_list, item):\n    pos = 0\n    found = False\n    stop = False\n    while pos < len(a_list) and not found and not stop:\n        if a_list[pos] == item:\n            found = True\n        elif a_list[pos] > item:\n            stop = True\n        else:\n            pos += 1\n    return found\n", "func_name": "ordered_sequential_search", "exec_status": true, "example_inputs": ["\"{'a_list': [1, 2, 3, 4, 5], 'item': 3}\"", "\"{'a_list': ['a', 'b', 'c', 'd'], 'item': 'c'}\"", "\"{'a_list': [10, 20, 30, 40, 50], 'item': 25}\"", "\"{'a_list': ['hello', 'world', 'python'], 'item': 'world'}\"", "\"{'a_list': [1, 2, 3, 4, 5], 'item': 6}\"", "\"{'a_list': ['a', 'b', 'c', 'd'], 'item': 'e'}\"", "\"{'a_list': [1, 3, 5, 7, 9], 'item': 5}\"", "\"{'a_list': ['apple', 'banana', 'cherry'], 'item': 'banana'}\"", "\"{'a_list': [10, 20, 30, 40, 50], 'item': 35}\"", "\"{'a_list': ['hello', 'world', 'python'], 'item': 'java'}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}], "parsed_inputs": [[["a_list", "[1, 2, 3, 4, 5]"], ["item", "3"]], [["a_list", "['a', 'b', 'c', 'd']"], ["item", "\"c\""]], [["a_list", "[10, 20, 30, 40, 50]"], ["item", "25"]], [["a_list", "['hello', 'world', 'python']"], ["item", "\"world\""]], [["a_list", "[1, 2, 3, 4, 5]"], ["item", "6"]], [["a_list", "['a', 'b', 'c', 'd']"], ["item", "\"e\""]], [["a_list", "[1, 3, 5, 7, 9]"], ["item", "5"]], [["a_list", "['apple', 'banana', 'cherry']"], ["item", "\"banana\""]], [["a_list", "[10, 20, 30, 40, 50]"], ["item", "35"]], [["a_list", "['hello', 'world', 'python']"], ["item", "\"java\""]]], "exec_code": "def ordered_sequential_search(a_list, item):\n    pos = 0\n    found = False\n    stop = False\n    while pos < len(a_list) and not found and not stop:\n        if a_list[pos] == item:\n            found = True\n        elif a_list[pos] > item:\n            stop = True\n        else:\n            pos += 1\n    return found\n", "output": "The function is:\n\n```python\ndef ordered_sequential_search(a_list, item):\n    pos = 0\n    found = False\n    stop = False\n    while pos < len(a_list) and not found and not stop:\n        if a_list[pos] == item:\n            found = True\n        elif a_list[pos] > item:\n            stop = True\n        else:\n            pos += 1\n    return found\n\n```", "choosed_example_idx": [2, 7, 4, 1, 3, 5, 0, 8], "prompt": "Input: dict(a_list=[10, 20, 30, 40, 50], item=25), Output: \"False\"\nInput: dict(a_list=['apple', 'banana', 'cherry'], item=\"banana\"), Output: \"True\"\nInput: dict(a_list=[1, 2, 3, 4, 5], item=6), Output: \"False\"\nInput: dict(a_list=['a', 'b', 'c', 'd'], item=\"c\"), Output: \"True\"\nInput: dict(a_list=['hello', 'world', 'python'], item=\"world\"), Output: \"True\"\nInput: dict(a_list=['a', 'b', 'c', 'd'], item=\"e\"), Output: \"False\"\nInput: dict(a_list=[1, 2, 3, 4, 5], item=3), Output: \"True\"\nInput: dict(a_list=[10, 20, 30, 40, 50], item=35), Output: \"False\"\n\nFunction: ordered_sequential_search\nWrite a function that generates the output from the input.\n", "id": "2e9e576bf6003768df7ab0dc66c2ef6bd08f58ee_0"}
{"example_str": "examples = [\n    dict(pref=[(1, 3), (2, 4), (5, 7)], n=5),\n    dict(pref=[(10, 20), (15, 25), (30, 40)], n=10),\n    dict(pref=[(1, 1), (2, 2), (3, 3)], n=3),\n    dict(pref=[(5, 10), (7, 12), (9, 15)], n=15),\n    dict(pref=[(1, 5), (2, 6), (3, 7)], n=7),\n    dict(pref=[(10, 15), (12, 18), (15, 20)], n=20),\n    dict(pref=[(1, 2), (3, 4), (5, 6)], n=6),\n    dict(pref=[(5, 10), (7, 12), (9, 15), (11, 16)], n=16),\n    dict(pref=[(1, 10), (2, 9), (3, 8)], n=10),\n    dict(pref=[(10, 20), (15, 25), (30, 40), (35, 45)], n=45)\n]\nexamples += [\n    dict(pref=[(1, 3), (2, 5), (6, 8)], n=3),\n    dict(pref=[(1, 2), (3, 4), (5, 6)], n=3),\n    dict(pref=[(1, 10), (2, 3), (4, 5), (6, 7), (8, 9)], n=5),\n    dict(pref=[(1, 3), (3, 5), (5, 7)], n=3),\n    dict(pref=[(10, 20), (15, 25), (22, 30)], n=3),\n    dict(pref=[(1, 2)], n=1),\n    dict(pref=[(1, 5), (2, 6), (3, 7), (4, 8)], n=4),\n    dict(pref=[(5, 10), (10, 15), (15, 20)], n=3),\n    dict(pref=[(0, 1), (1, 2), (2, 3), (3, 4), (4, 5)], n=5),\n    dict(pref=[(1, 3), (4, 6), (7, 9), (10, 12)], n=4)\n]", "code": "def calculate_rooms(pref, n):\n    counter = 0\n    while pref:\n        counter += 1\n        a, b = pref.pop()\n        while pref and (a <= pref[-1][0] <= b or a <= pref[-1][1] <= b):\n            a_prime, b_prime = pref.pop()\n            a = max(a, a_prime)\n            b = min(b, b_prime)\n    return counter\n", "func_name": "calculate_rooms", "exec_status": true, "example_inputs": ["\"{'pref': [(1, 3), (2, 4), (5, 7)], 'n': 5}\"", "\"{'pref': [(10, 20), (15, 25), (30, 40)], 'n': 10}\"", "\"{'pref': [(1, 1), (2, 2), (3, 3)], 'n': 3}\"", "\"{'pref': [(5, 10), (7, 12), (9, 15)], 'n': 15}\"", "\"{'pref': [(1, 5), (2, 6), (3, 7)], 'n': 7}\"", "\"{'pref': [(10, 15), (12, 18), (15, 20)], 'n': 20}\"", "\"{'pref': [(1, 2), (3, 4), (5, 6)], 'n': 6}\"", "\"{'pref': [(5, 10), (7, 12), (9, 15), (11, 16)], 'n': 16}\"", "\"{'pref': [(1, 10), (2, 9), (3, 8)], 'n': 10}\"", "\"{'pref': [(10, 20), (15, 25), (30, 40), (35, 45)], 'n': 45}\""], "example_outputs": [{"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"5\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"4\""}], "parsed_inputs": [[["pref", "[(1, 3), (2, 4), (5, 7)]"], ["n", "5"]], [["pref", "[(10, 20), (15, 25), (30, 40)]"], ["n", "10"]], [["pref", "[(1, 1), (2, 2), (3, 3)]"], ["n", "3"]], [["pref", "[(5, 10), (7, 12), (9, 15)]"], ["n", "15"]], [["pref", "[(1, 5), (2, 6), (3, 7)]"], ["n", "7"]], [["pref", "[(10, 15), (12, 18), (15, 20)]"], ["n", "20"]], [["pref", "[(1, 2), (3, 4), (5, 6)]"], ["n", "6"]], [["pref", "[(5, 10), (7, 12), (9, 15), (11, 16)]"], ["n", "16"]], [["pref", "[(1, 10), (2, 9), (3, 8)]"], ["n", "10"]], [["pref", "[(10, 20), (15, 25), (30, 40), (35, 45)]"], ["n", "45"]]], "exec_code": "def calculate_rooms(pref, n):\n    counter = 0\n    while pref:\n        counter += 1\n        a, b = pref.pop()\n        while pref and (a <= pref[-1][0] <= b or a <= pref[-1][1] <= b):\n            a_prime, b_prime = pref.pop()\n            a = max(a, a_prime)\n            b = min(b, b_prime)\n    return counter\n", "output": "The function is:\n\n```python\ndef calculate_rooms(pref, n):\n    counter = 0\n    while pref:\n        counter += 1\n        a, b = pref.pop()\n        while pref and (a <= pref[-1][0] <= b or a <= pref[-1][1] <= b):\n            a_prime, b_prime = pref.pop()\n            a = max(a, a_prime)\n            b = min(b, b_prime)\n    return counter\n\n```", "choosed_example_idx": [3, 2, 9, 8, 4], "prompt": "Write a function that generates the output from the input.\n\n\nFunction: calculate_rooms\n\n\nInput: dict(pref=[(5, 10), (7, 12), (9, 15)], n=15), Output: \"1\"\nInput: dict(pref=[(1, 1), (2, 2), (3, 3)], n=3), Output: \"3\"\nInput: dict(pref=[(10, 20), (15, 25), (30, 40), (35, 45)], n=45), Output: \"2\"\nInput: dict(pref=[(1, 10), (2, 9), (3, 8)], n=10), Output: \"3\"\nInput: dict(pref=[(1, 5), (2, 6), (3, 7)], n=7), Output: \"1\"\n\n", "id": "97c4c2b627a54bf556f0ad9d5b01d8155eda35d1_0"}
{"example_str": "examples = [\n    dict(instance=None, filename='example.pdf'),\n    dict(instance={}, filename='document.pdf'),\n    dict(instance=[], filename='report.pdf'),\n    dict(instance='string_instance', filename='file.pdf'),\n    dict(instance=123, filename='data.pdf'),\n    dict(instance={'key': 'value'}, filename='info.pdf'),\n    dict(instance=[1, 2, 3], filename='list.pdf'),\n    dict(instance={'a': 1, 'b': 2}, filename='dict.pdf'),\n    dict(instance=(1, 2, 3), filename='tuple.pdf'),\n    dict(instance=set([1, 2, 3]), filename='set.pdf'),\n]\nexamples += [\n    dict(instance=None, filename=\"document.pdf\"),\n    dict(instance=1, filename=\"report.pdf\"),\n    dict(instance=\"User\", filename=\"profile_123.pdf\"),\n    dict(instance={\"id\": 5}, filename=\"invoice_001.pdf\"),\n    dict(instance=[1, 2, 3], filename=\"data_export.pdf\"),\n    dict(instance=(4, 5), filename=\"presentation.pdf\"),\n    dict(instance=set(), filename=\"empty_set_filename.pdf\"),\n    dict(instance=3.14, filename=\"pi_value_document.pdf\"),\n    dict(instance=True, filename=\"boolean_filename.pdf\"),\n    dict(instance=False, filename=\"false_case_filename.pdf\")\n]\nexamples += [\n    dict(instance=None, filename='document.pdf'),\n    dict(instance={'id': 1}, filename='report.pdf'),\n    dict(instance=123, filename='file.pdf'),\n    dict(instance='User', filename='profile.pdf'),\n    dict(instance=[1, 2, 3], filename='data.pdf'),\n    dict(instance=(4, 5), filename='info.pdf'),\n    dict(instance={'user': 'Alice'}, filename='alice_resume.pdf'),\n    dict(instance=5.67, filename='float_number_filename.pdf'),\n    dict(instance=True, filename='boolean_type.pdf'),\n    dict(instance={'complex': complex(1, 2)}, filename='complex_number_file.pdf')\n]", "code": "def pdf_file_path(instance, filename):\n    return f'{filename}'\n", "func_name": "pdf_file_path", "exec_status": true, "example_inputs": ["\"{'instance': None, 'filename': 'example.pdf'}\"", "\"{'instance': {}, 'filename': 'document.pdf'}\"", "\"{'instance': [], 'filename': 'report.pdf'}\"", "\"{'instance': 'string_instance', 'filename': 'file.pdf'}\"", "\"{'instance': 123, 'filename': 'data.pdf'}\"", "\"{'instance': {'key': 'value'}, 'filename': 'info.pdf'}\"", "\"{'instance': [1, 2, 3], 'filename': 'list.pdf'}\"", "\"{'instance': {'a': 1, 'b': 2}, 'filename': 'dict.pdf'}\"", "\"{'instance': (1, 2, 3), 'filename': 'tuple.pdf'}\"", "\"{'instance': {1, 2, 3}, 'filename': 'set.pdf'}\""], "example_outputs": [{"return": "\"'example.pdf'\""}, {"return": "\"'document.pdf'\""}, {"return": "\"'report.pdf'\""}, {"return": "\"'file.pdf'\""}, {"return": "\"'data.pdf'\""}, {"return": "\"'info.pdf'\""}, {"return": "\"'list.pdf'\""}, {"return": "\"'dict.pdf'\""}, {"return": "\"'tuple.pdf'\""}, {"return": "\"'set.pdf'\""}, {"return": "\"'document.pdf'\""}, {"return": "\"'report.pdf'\""}, {"return": "\"'profile_123.pdf'\""}, {"return": "\"'invoice_001.pdf'\""}, {"return": "\"'data_export.pdf'\""}, {"return": "\"'presentation.pdf'\""}, {"return": "\"'empty_set_filename.pdf'\""}, {"return": "\"'pi_value_document.pdf'\""}, {"return": "\"'boolean_filename.pdf'\""}, {"return": "\"'false_case_filename.pdf'\""}, {"return": "\"'document.pdf'\""}, {"return": "\"'report.pdf'\""}, {"return": "\"'file.pdf'\""}, {"return": "\"'profile.pdf'\""}, {"return": "\"'data.pdf'\""}, {"return": "\"'info.pdf'\""}, {"return": "\"'alice_resume.pdf'\""}, {"return": "\"'float_number_filename.pdf'\""}, {"return": "\"'boolean_type.pdf'\""}, {"return": "\"'complex_number_file.pdf'\""}], "parsed_inputs": [[["instance", "None"], ["filename", "\"example.pdf\""]], [["instance", "{}"], ["filename", "\"document.pdf\""]], [["instance", "[]"], ["filename", "\"report.pdf\""]], [["instance", "\"string_instance\""], ["filename", "\"file.pdf\""]], [["instance", "123"], ["filename", "\"data.pdf\""]], [["instance", "{'key': 'value'}"], ["filename", "\"info.pdf\""]], [["instance", "[1, 2, 3]"], ["filename", "\"list.pdf\""]], [["instance", "{'a': 1, 'b': 2}"], ["filename", "\"dict.pdf\""]], [["instance", "(1, 2, 3)"], ["filename", "\"tuple.pdf\""]], [["instance", "set([1, 2, 3])"], ["filename", "\"set.pdf\""]]], "exec_code": "def pdf_file_path(instance, filename):\n    return f'{filename}'\n", "output": "The function is:\n\n```python\ndef pdf_file_path(instance, filename):\n    return f'{filename}'\n\n```", "choosed_example_idx": [1, 6, 9, 4, 3], "prompt": "Function: pdf_file_path\nInput: dict(instance={}, filename=\"document.pdf\"), Output: \"'document.pdf'\"\nInput: dict(instance=[1, 2, 3], filename=\"list.pdf\"), Output: \"'list.pdf'\"\nInput: dict(instance=set([1, 2, 3]), filename=\"set.pdf\"), Output: \"'set.pdf'\"\nInput: dict(instance=123, filename=\"data.pdf\"), Output: \"'data.pdf'\"\nInput: dict(instance=\"string_instance\", filename=\"file.pdf\"), Output: \"'file.pdf'\"\n\nWrite a function that generates the output from the input.\n\n", "id": "7774d55e65288443702d7dca5c4f488de37b4769_0"}
{"example_str": "examples = [\n    dict(actions=['a', 'b', 'c'], aux={'categories': ['a', 'b', 'c']}),\n    dict(actions=['dog', 'cat', 'bird'], aux={'categories': ['dog', 'cat', 'bird']}),\n    dict(actions=['apple', 'banana', 'orange'], aux={'categories': ['apple', 'banana', 'orange']}),\n    dict(actions=['car', 'bike', 'plane'], aux={'categories': ['car', 'bike', 'plane']}),\n    dict(actions=['python', 'java', 'c++'], aux={'categories': ['python', 'java', 'c++']}),\n    dict(actions=['football', 'cricket', 'basketball'], aux={'categories': ['football', 'cricket', 'basketball']}),\n    dict(actions=['book', 'pen', 'paper'], aux={'categories': ['book', 'pen', 'paper']}),\n    dict(actions=['music', 'dance', 'art'], aux={'categories': ['music', 'dance', 'art']}),\n    dict(actions=['google', 'facebook', 'twitter'], aux={'categories': ['google', 'facebook', 'twitter']}),\n    dict(actions=['summer', 'winter', 'spring'], aux={'categories': ['summer', 'winter', 'spring']}),\n]\nexamples += [\n    dict(actions=['jump', 'run'], aux={'categories': ['run', 'jump', 'walk']}),\n    dict(actions=['sit', 'stand'], aux={'categories': ['sit', 'stand', 'lie']}),\n    dict(actions=['read', 'write'], aux={'categories': ['write', 'read', 'type']}),\n    dict(actions=['smile', 'frown'], aux={'categories': ['frown', 'smile', 'laugh']}),\n    dict(actions=['eat', 'cook'], aux={'categories': ['cook', 'eat', 'clean']}),\n    dict(actions=['swim', 'dive'], aux={'categories': ['dive', 'swim', 'float']}),\n    dict(actions=['click', 'scroll'], aux={'categories': ['scroll', 'click', 'type']}),\n    dict(actions=['play', 'pause'], aux={'categories': ['pause', 'play', 'stop']}),\n    dict(actions=['open', 'close'], aux={'categories': ['close', 'open', 'lock']}),\n    dict(actions=['drive', 'park'], aux={'categories': ['park', 'drive', 'reverse']})\n]\nexamples += [\n    dict(actions=['jump', 'run'], aux={'categories': ['jump', 'run', 'walk']}),\n    dict(actions=['walk'], aux={'categories': ['run', 'jump', 'walk']}),\n    dict(actions=['sit', 'stand'], aux={'categories': ['sit', 'stand', 'lie']}),\n    dict(actions=['eat', 'drink'], aux={'categories': ['drink', 'eat', 'chew']}),\n    dict(actions=['smile', 'frown'], aux={'categories': ['smile', 'frown', 'laugh']}),\n    dict(actions=['code', 'compile'], aux={'categories': ['code', 'compile', 'test']}),\n    dict(actions=['swim', 'dive'], aux={'categories': ['swim', 'dive', 'float']}),\n    dict(actions=['read', 'write'], aux={'categories': ['read', 'write', 'edit']}),\n    dict(actions=['turn', 'stop'], aux={'categories': ['turn', 'stop', 'go']}),\n    dict(actions=['listen', 'speak'], aux={'categories': ['listen', 'speak', 'hear']})\n]", "code": "def embedAux(actions, aux):\n    embedding = {}\n    for idx, act in enumerate(aux['categories']):\n        embedding[act] = idx\n    emb = []\n    for act in actions:\n        emb.append(embedding[act])\n    return emb\n", "func_name": "embedAux", "exec_status": true, "example_inputs": ["\"{'actions': ['a', 'b', 'c'], 'aux': {'categories': ['a', 'b', 'c']}}\"", "\"{'actions': ['dog', 'cat', 'bird'], 'aux': {'categories': ['dog', 'cat', 'bird']}}\"", "\"{'actions': ['apple', 'banana', 'orange'], 'aux': {'categories': ['apple', 'banana', 'orange']}}\"", "\"{'actions': ['car', 'bike', 'plane'], 'aux': {'categories': ['car', 'bike', 'plane']}}\"", "\"{'actions': ['python', 'java', 'c++'], 'aux': {'categories': ['python', 'java', 'c++']}}\"", "\"{'actions': ['football', 'cricket', 'basketball'], 'aux': {'categories': ['football', 'cricket', 'basketball']}}\"", "\"{'actions': ['book', 'pen', 'paper'], 'aux': {'categories': ['book', 'pen', 'paper']}}\"", "\"{'actions': ['music', 'dance', 'art'], 'aux': {'categories': ['music', 'dance', 'art']}}\"", "\"{'actions': ['google', 'facebook', 'twitter'], 'aux': {'categories': ['google', 'facebook', 'twitter']}}\"", "\"{'actions': ['summer', 'winter', 'spring'], 'aux': {'categories': ['summer', 'winter', 'spring']}}\""], "example_outputs": [{"return": "\"[0, 1, 2]\""}, {"return": "\"[0, 1, 2]\""}, {"return": "\"[0, 1, 2]\""}, {"return": "\"[0, 1, 2]\""}, {"return": "\"[0, 1, 2]\""}, {"return": "\"[0, 1, 2]\""}, {"return": "\"[0, 1, 2]\""}, {"return": "\"[0, 1, 2]\""}, {"return": "\"[0, 1, 2]\""}, {"return": "\"[0, 1, 2]\""}, {"return": "\"[1, 0]\""}, {"return": "\"[0, 1]\""}, {"return": "\"[1, 0]\""}, {"return": "\"[1, 0]\""}, {"return": "\"[1, 0]\""}, {"return": "\"[1, 0]\""}, {"return": "\"[1, 0]\""}, {"return": "\"[1, 0]\""}, {"return": "\"[1, 0]\""}, {"return": "\"[1, 0]\""}, {"return": "\"[0, 1]\""}, {"return": "\"[2]\""}, {"return": "\"[0, 1]\""}, {"return": "\"[1, 0]\""}, {"return": "\"[0, 1]\""}, {"return": "\"[0, 1]\""}, {"return": "\"[0, 1]\""}, {"return": "\"[0, 1]\""}, {"return": "\"[0, 1]\""}, {"return": "\"[0, 1]\""}], "parsed_inputs": [[["actions", "['a', 'b', 'c']"], ["aux", "{'categories': ['a', 'b', 'c']}"]], [["actions", "['dog', 'cat', 'bird']"], ["aux", "{'categories': ['dog', 'cat', 'bird']}"]], [["actions", "['apple', 'banana', 'orange']"], ["aux", "{'categories': ['apple', 'banana', 'orange']}"]], [["actions", "['car', 'bike', 'plane']"], ["aux", "{'categories': ['car', 'bike', 'plane']}"]], [["actions", "['python', 'java', 'c++']"], ["aux", "{'categories': ['python', 'java', 'c++']}"]], [["actions", "['football', 'cricket', 'basketball']"], ["aux", "{'categories': ['football', 'cricket', 'basketball']}"]], [["actions", "['book', 'pen', 'paper']"], ["aux", "{'categories': ['book', 'pen', 'paper']}"]], [["actions", "['music', 'dance', 'art']"], ["aux", "{'categories': ['music', 'dance', 'art']}"]], [["actions", "['google', 'facebook', 'twitter']"], ["aux", "{'categories': ['google', 'facebook', 'twitter']}"]], [["actions", "['summer', 'winter', 'spring']"], ["aux", "{'categories': ['summer', 'winter', 'spring']}"]]], "exec_code": "def embedAux(actions, aux):\n    embedding = {}\n    for idx, act in enumerate(aux['categories']):\n        embedding[act] = idx\n    emb = []\n    for act in actions:\n        emb.append(embedding[act])\n    return emb\n", "output": "The function is:\n\n```python\ndef embedAux(actions, aux):\n    embedding = {}\n    for idx, act in enumerate(aux['categories']):\n        embedding[act] = idx\n    emb = []\n    for act in actions:\n        emb.append(embedding[act])\n    return emb\n\n```", "choosed_example_idx": [7, 8, 0], "prompt": "Function: embedAux\n\n\nWrite a function that generates the output from the input.\n\n\nInput: dict(actions=['music', 'dance', 'art'], aux={'categories': ['music', 'dance', 'art']}), Output: \"[0, 1, 2]\"\nInput: dict(actions=['google', 'facebook', 'twitter'], aux={'categories': ['google', 'facebook', 'twitter']}), Output: \"[0, 1, 2]\"\nInput: dict(actions=['a', 'b', 'c'], aux={'categories': ['a', 'b', 'c']}), Output: \"[0, 1, 2]\"\n\n", "id": "c1cba63a8f766305ab6ee511ebff0411c9adee68_0"}
{"example_str": "examples = [\n    dict(arr=[[1, 2], [3, 4], [5, 6]]),\n    dict(arr=[[10, 20], [30, 40], [50, 60]]),\n    dict(arr=[[-1, -2], [-3, -4], [-5, -6]]),\n    dict(arr=[[100, 200], [300, 400], [500, 600]]),\n    dict(arr=[[1, 1], [1, 1], [1, 1]]),\n    dict(arr=[[5, 5], [10, 10], [15, 15]]),\n    dict(arr=[[1, 10], [2, 20], [3, 30]]),\n    dict(arr=[[10, 1], [20, 2], [30, 3]]),\n    dict(arr=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n    dict(arr=[[10, 20, 30], [40, 50, 60], [70, 80, 90]])\n]\nexamples += [\n    dict(arr=[(1, 2), (3, 4), (5, 6)]),\n    dict(arr=[(10, 20), (30, 40), (50, 60)]),\n    dict(arr=[(-1, -2), (-3, -4), (-5, -6)]),\n    dict(arr=[(0, 0), (0, 0), (0, 0)]),\n    dict(arr=[(100, 200), (300, 400), (500, 600)]),\n    dict(arr=[(1.5, 2.5), (3.5, 4.5), (5.5, 6.5)]),\n    dict(arr=[(10, 5), (20, 15), (30, 25)]),\n    dict(arr=[(100, 50), (150, 75), (200, 100)]),\n    dict(arr=[(0, 1), (1, 0), (2, 2)]),\n    dict(arr=[(123, 456), (789, 1011), (1213, 1415)])\n]\nexamples += [\n    dict(arr=[(1, 2), (3, 4), (5, 6)]),\n    dict(arr=[(10, 20), (30, 40), (50, 60)]),\n    dict(arr=[(-1, -2), (-3, -4), (-5, -6)]),\n    dict(arr=[(0, 0), (1, 1), (2, 2)]),\n    dict(arr=[(100, 200), (300, 400), (500, 600)]),\n    dict(arr=[(1.5, 2.5), (3.5, 4.5), (5.5, 6.5)]),\n    dict(arr=[(10, 5), (20, 15), (30, 25)]),\n    dict(arr=[(0, -1), (0, -2), (0, -3)]),\n    dict(arr=[(1000, 100), (200, 300), (400, 500)]),\n    dict(arr=[(2, 3), (5, 1), (0, 4)])\n]", "code": "def max_fn(arr):\n    maxval = float('-inf')\n    for i in range(len(arr)):\n        if arr[i][0] > maxval:\n            maxval = arr[i][0]\n            index = i\n        if arr[i][1] > maxval:\n            maxval = arr[i][1]\n            index = i\n    return arr[index]\n", "func_name": "max_fn", "exec_status": true, "example_inputs": ["\"{'arr': [[1, 2], [3, 4], [5, 6]]}\"", "\"{'arr': [[10, 20], [30, 40], [50, 60]]}\"", "\"{'arr': [[-1, -2], [-3, -4], [-5, -6]]}\"", "\"{'arr': [[100, 200], [300, 400], [500, 600]]}\"", "\"{'arr': [[1, 1], [1, 1], [1, 1]]}\"", "\"{'arr': [[5, 5], [10, 10], [15, 15]]}\"", "\"{'arr': [[1, 10], [2, 20], [3, 30]]}\"", "\"{'arr': [[10, 1], [20, 2], [30, 3]]}\"", "\"{'arr': [[1, 2, 3], [4, 5, 6], [7, 8, 9]]}\"", "\"{'arr': [[10, 20, 30], [40, 50, 60], [70, 80, 90]]}\""], "example_outputs": [{"return": "\"[5, 6]\""}, {"return": "\"[50, 60]\""}, {"return": "\"[-1, -2]\""}, {"return": "\"[500, 600]\""}, {"return": "\"[1, 1]\""}, {"return": "\"[15, 15]\""}, {"return": "\"[3, 30]\""}, {"return": "\"[30, 3]\""}, {"return": "\"[7, 8, 9]\""}, {"return": "\"[70, 80, 90]\""}, {"return": "\"(5, 6)\""}, {"return": "\"(50, 60)\""}, {"return": "\"(-1, -2)\""}, {"return": "\"(0, 0)\""}, {"return": "\"(500, 600)\""}, {"return": "\"(5.5, 6.5)\""}, {"return": "\"(30, 25)\""}, {"return": "\"(200, 100)\""}, {"return": "\"(2, 2)\""}, {"return": "\"(1213, 1415)\""}, {"return": "\"(5, 6)\""}, {"return": "\"(50, 60)\""}, {"return": "\"(-1, -2)\""}, {"return": "\"(2, 2)\""}, {"return": "\"(500, 600)\""}, {"return": "\"(5.5, 6.5)\""}, {"return": "\"(30, 25)\""}, {"return": "\"(0, -1)\""}, {"return": "\"(1000, 100)\""}, {"return": "\"(5, 1)\""}], "parsed_inputs": [[["arr", "[[1, 2], [3, 4], [5, 6]]"]], [["arr", "[[10, 20], [30, 40], [50, 60]]"]], [["arr", "[[-1, -2], [-3, -4], [-5, -6]]"]], [["arr", "[[100, 200], [300, 400], [500, 600]]"]], [["arr", "[[1, 1], [1, 1], [1, 1]]"]], [["arr", "[[5, 5], [10, 10], [15, 15]]"]], [["arr", "[[1, 10], [2, 20], [3, 30]]"]], [["arr", "[[10, 1], [20, 2], [30, 3]]"]], [["arr", "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]"]], [["arr", "[[10, 20, 30], [40, 50, 60], [70, 80, 90]]"]]], "exec_code": "def max_fn(arr):\n    maxval = float('-inf')\n    for i in range(len(arr)):\n        if arr[i][0] > maxval:\n            maxval = arr[i][0]\n            index = i\n        if arr[i][1] > maxval:\n            maxval = arr[i][1]\n            index = i\n    return arr[index]\n", "output": "The function is:\n\n```python\ndef max_fn(arr):\n    maxval = float('-inf')\n    for i in range(len(arr)):\n        if arr[i][0] > maxval:\n            maxval = arr[i][0]\n            index = i\n        if arr[i][1] > maxval:\n            maxval = arr[i][1]\n            index = i\n    return arr[index]\n\n```", "choosed_example_idx": [3, 4, 5, 9, 1, 2, 8, 0, 6], "prompt": "Write a function that generates the output from the input.\nInput: dict(arr=[[100, 200], [300, 400], [500, 600]]), Output: \"[500, 600]\"\nInput: dict(arr=[[1, 1], [1, 1], [1, 1]]), Output: \"[1, 1]\"\nInput: dict(arr=[[5, 5], [10, 10], [15, 15]]), Output: \"[15, 15]\"\nInput: dict(arr=[[10, 20, 30], [40, 50, 60], [70, 80, 90]]), Output: \"[70, 80, 90]\"\nInput: dict(arr=[[10, 20], [30, 40], [50, 60]]), Output: \"[50, 60]\"\nInput: dict(arr=[[-1, -2], [-3, -4], [-5, -6]]), Output: \"[-1, -2]\"\nInput: dict(arr=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]), Output: \"[7, 8, 9]\"\nInput: dict(arr=[[1, 2], [3, 4], [5, 6]]), Output: \"[5, 6]\"\nInput: dict(arr=[[1, 10], [2, 20], [3, 30]]), Output: \"[3, 30]\"\n\n\nFunction: max_fn\n\n", "id": "32e4079f32fdf8bdb141c1865a1332c6ac2a900a_0"}
{"example_str": "examples = [\n    dict(email=\"\", password=\"password\", users=[]),  # empty email\n    dict(email=\"user@example.com\", password=\"\", users=[]),  # empty password\n    dict(email=\"user@example.com\", password=\"password\", users=[{}, {}]),  # multiple users\n    dict(email=\"user@example.com\", password=\"password\", users=[{\"email\": \"user@example.com\", \"password\": \"password\"}]),  # valid login\n    dict(email=\"\", password=\"\", users=[]),  # both email and password empty\n    dict(email=\"user@example.com\", password=\"wrong_password\", users=[{\"email\": \"user@example.com\", \"password\": \"password\"}]),  # invalid password\n    dict(email=\"unknown@example.com\", password=\"password\", users=[{\"email\": \"user@example.com\", \"password\": \"password\"}]),  # unknown email\n    dict(email=\"user@example.com\", password=\"password\", users=[]),  # no users\n    dict(email=\"user@example.com\", password=\"password\", users=[{\"email\": \"user@example.com\", \"password\": \"password\"}, {\"email\": \"admin@example.com\", \"password\": \"admin_password\"}]),  # multiple users with different emails\n    dict(email=\"user@example.com\", password=\"password\", users=[{\"email\": \"user@example.com\", \"password\": \"wrong_password\"}]),  # invalid user\n]\nexamples += [\n    dict(email=\"user@example.com\", password=\"password123\", users=[\"user1\"]),\n    dict(email=\"\", password=\"password123\", users=[\"user1\"]),\n    dict(email=\"user@example.com\", password=\"\", users=[\"user1\"]),\n    dict(email=\"user@example.com\", password=\"password123\", users=[]),\n    dict(email=\"user@example.com\", password=\"password123\", users=[\"user1\", \"user2\"]),\n    dict(email=\"user@example.com\", password=\"password123\", users=[\"user1\", \"user1\"]),\n    dict(email=None, password=\"password123\", users=[\"user1\"]),\n    dict(email=\"user@example.com\", password=None, users=[\"user1\"]),\n    dict(email=\"user@example.com\", password=\"password123\", users=[\"user1\", \"user1\", \"user1\"]),\n    dict(email=\"user@example.com\", password=\"password123\", users=[\"user1\", \"user2\", \"user3\"])\n]\nexamples += [\n    dict(email=\"user@example.com\", password=\"password123\", users=[\"user@example.com\"]),\n    dict(email=\"alice@example.com\", password=\"alicepass\", users=[\"alice@example.com\"]),\n    dict(email=\"\", password=\"nopassword\", users=[\"user@example.com\"]),\n    dict(email=\"bob@example.com\", password=\"\", users=[\"bob@example.com\"]),\n    dict(email=\"carol@example.com\", password=\"carol123\", users=[]),\n    dict(email=\"dave@example.com\", password=\"davepass\", users=[\"dave@example.com\", \"alice@example.com\"]),\n    dict(email=\"eve@example.com\", password=\"eve123\", users=[\"eve@example.com\"]),\n    dict(email=\"frank@example.com\", password=\"frankpass\", users=[\"frank@example.com\"]),\n    dict(email=\"grace@example.com\", password=\"grace123\", users=[\"grace@example.com\"]),\n    dict(email=\"henry@example.com\", password=\"henrypass\", users=[\"henry@example.com\"]),\n]", "code": "def login_check(email, password, users):\n    if not email or not password:\n        return False\n    elif len(users) != 1:\n        return False\n    else:\n        return True\n", "func_name": "login_check", "exec_status": true, "example_inputs": ["\"{'email': '', 'password': 'password', 'users': []}\"", "\"{'email': 'user@example.com', 'password': '', 'users': []}\"", "\"{'email': 'user@example.com', 'password': 'password', 'users': [{}, {}]}\"", "\"{'email': 'user@example.com', 'password': 'password', 'users': [{'email': 'user@example.com', 'password': 'password'}]}\"", "\"{'email': '', 'password': '', 'users': []}\"", "\"{'email': 'user@example.com', 'password': 'wrong_password', 'users': [{'email': 'user@example.com', 'password': 'password'}]}\"", "\"{'email': 'unknown@example.com', 'password': 'password', 'users': [{'email': 'user@example.com', 'password': 'password'}]}\"", "\"{'email': 'user@example.com', 'password': 'password', 'users': []}\"", "\"{'email': 'user@example.com', 'password': 'password', 'users': [{'email': 'user@example.com', 'password': 'password'}, {'email': 'admin@example.com', 'password': 'admin_password'}]}\"", "\"{'email': 'user@example.com', 'password': 'password', 'users': [{'email': 'user@example.com', 'password': 'wrong_password'}]}\""], "example_outputs": [{"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}], "parsed_inputs": [[["email", "\"\""], ["password", "\"password\""], ["users", "[]"]], [["email", "\"user@example.com\""], ["password", "\"\""], ["users", "[]"]], [["email", "\"user@example.com\""], ["password", "\"password\""], ["users", "[{}, {}]"]], [["email", "\"user@example.com\""], ["password", "\"password\""], ["users", "[{'email': 'user@example.com', 'password': 'password'}]"]], [["email", "\"\""], ["password", "\"\""], ["users", "[]"]], [["email", "\"user@example.com\""], ["password", "\"wrong_password\""], ["users", "[{'email': 'user@example.com', 'password': 'password'}]"]], [["email", "\"unknown@example.com\""], ["password", "\"password\""], ["users", "[{'email': 'user@example.com', 'password': 'password'}]"]], [["email", "\"user@example.com\""], ["password", "\"password\""], ["users", "[]"]], [["email", "\"user@example.com\""], ["password", "\"password\""], ["users", "[{'email': 'user@example.com', 'password': 'password'}, {'email': 'admin@example.com', 'password': 'admin_password'}]"]], [["email", "\"user@example.com\""], ["password", "\"password\""], ["users", "[{'email': 'user@example.com', 'password': 'wrong_password'}]"]]], "exec_code": "def login_check(email, password, users):\n    if not email or not password:\n        return False\n    elif len(users) != 1:\n        return False\n    else:\n        return True\n", "output": "The function is:\n\n```python\ndef login_check(email, password, users):\n    if not email or not password:\n        return False\n    elif len(users) != 1:\n        return False\n    else:\n        return True\n\n```", "choosed_example_idx": [6, 3, 0, 9, 8, 1], "prompt": "Write a function that generates the output from the input.\nFunction: login_check\n\n\nInput: dict(email=\"unknown@example.com\", password=\"password\", users=[{'email': 'user@example.com', 'password': 'password'}]), Output: \"True\"\nInput: dict(email=\"user@example.com\", password=\"password\", users=[{'email': 'user@example.com', 'password': 'password'}]), Output: \"True\"\nInput: dict(email=\"\", password=\"password\", users=[]), Output: \"False\"\nInput: dict(email=\"user@example.com\", password=\"password\", users=[{'email': 'user@example.com', 'password': 'wrong_password'}]), Output: \"True\"\nInput: dict(email=\"user@example.com\", password=\"password\", users=[{'email': 'user@example.com', 'password': 'password'}, {'email': 'admin@example.com', 'password': 'admin_password'}]), Output: \"False\"\nInput: dict(email=\"user@example.com\", password=\"\", users=[]), Output: \"False\"\n\n", "id": "b94532a00d480baf04591990f78006c4608487d3_0"}
{"example_str": "examples = [\n    dict(valor=1),\n    dict(valor=2.5),\n    dict(valor=0),\n    dict(valor=-3),\n    dict(valor=10),\n    dict(valor=0.1),\n    dict(valor=-0.5),\n    dict(valor=100),\n    dict(valor=25),\n    dict(valor=-10)\n]\nexamples += [\n    dict(valor=2),\n    dict(valor=5),\n    dict(valor=-3),\n    dict(valor=0),\n    dict(valor=1.5),\n    dict(valor=-1.1),\n    dict(valor=10),\n    dict(valor=100),\n    dict(valor=0.5),\n    dict(valor=-10)\n]\nexamples += [\n    dict(valor=1),\n    dict(valor=2),\n    dict(valor=3),\n    dict(valor=4),\n    dict(valor=5),\n    dict(valor=10),\n    dict(valor=20),\n    dict(valor=0.5),\n    dict(valor=-1),\n    dict(valor=-10)\n]", "code": "def calcular_quadrado(valor):\n    quadrado = valor * valor\n    return quadrado\n", "func_name": "calcular_quadrado", "exec_status": true, "example_inputs": ["\"{'valor': 1}\"", "\"{'valor': 2.5}\"", "\"{'valor': 0}\"", "\"{'valor': -3}\"", "\"{'valor': 10}\"", "\"{'valor': 0.1}\"", "\"{'valor': -0.5}\"", "\"{'valor': 100}\"", "\"{'valor': 25}\"", "\"{'valor': -10}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"6.25\""}, {"return": "\"0\""}, {"return": "\"9\""}, {"return": "\"100\""}, {"return": "\"0.010000000000000002\""}, {"return": "\"0.25\""}, {"return": "\"10000\""}, {"return": "\"625\""}, {"return": "\"100\""}, {"return": "\"4\""}, {"return": "\"25\""}, {"return": "\"9\""}, {"return": "\"0\""}, {"return": "\"2.25\""}, {"return": "\"1.2100000000000002\""}, {"return": "\"100\""}, {"return": "\"10000\""}, {"return": "\"0.25\""}, {"return": "\"100\""}, {"return": "\"1\""}, {"return": "\"4\""}, {"return": "\"9\""}, {"return": "\"16\""}, {"return": "\"25\""}, {"return": "\"100\""}, {"return": "\"400\""}, {"return": "\"0.25\""}, {"return": "\"1\""}, {"return": "\"100\""}], "parsed_inputs": [[["valor", "1"]], [["valor", "2.5"]], [["valor", "0"]], [["valor", "-3"]], [["valor", "10"]], [["valor", "0.1"]], [["valor", "-0.5"]], [["valor", "100"]], [["valor", "25"]], [["valor", "-10"]]], "exec_code": "def calcular_quadrado(valor):\n    quadrado = valor * valor\n    return quadrado\n", "output": "The function is:\n\n```python\ndef calcular_quadrado(valor):\n    quadrado = valor * valor\n    return quadrado\n\n```", "choosed_example_idx": [2, 5, 8], "prompt": "Write a function that generates the output from the input.\nInput: dict(valor=0), Output: \"0\"\nInput: dict(valor=0.1), Output: \"0.010000000000000002\"\nInput: dict(valor=25), Output: \"625\"\n\n\nFunction: calcular_quadrado\n\n\n", "id": "98265541f4e5c80571f4424b74b98256d3502154_0"}
{"example_str": "examples = [\n    dict(month='January', value=100, summary={}),\n    dict(month='February', value=200, summary={'January': 100}),\n    dict(month='March', value=300, summary={'January': 100, 'February': 200}),\n    dict(month='April', value=400, summary={}),\n    dict(month='May', value=500, summary={'April': 400}),\n    dict(month='June', value=600, summary={'April': 400, 'May': 500}),\n    dict(month='July', value=700, summary={}),\n    dict(month='August', value=800, summary={'July': 700}),\n    dict(month='September', value=900, summary={'July': 700, 'August': 800}),\n    dict(month='October', value=1000, summary={}),\n]\nexamples += [\n    dict(month=\"January\", value=100, summary={}),\n    dict(month=\"February\", value=200, summary={\"January\": 100}),\n    dict(month=\"March\", value=150, summary={\"January\": 100, \"February\": 200}),\n    dict(month=\"April\", value=130, summary={\"January\": 100, \"February\": 200, \"March\": 150}),\n    dict(month=\"May\", value=220, summary={\"January\": 100, \"February\": 200, \"March\": 150, \"April\": 130}),\n    dict(month=\"June\", value=170, summary={\"January\": 100, \"February\": 200, \"March\": 150, \"April\": 130, \"May\": 220}),\n    dict(month=\"July\", value=180, summary={\"January\": 100, \"February\": 200, \"March\": 150, \"April\": 130, \"May\": 220, \"June\": 170}),\n    dict(month=\"August\", value=190, summary={\"January\": 100, \"February\": 200, \"March\": 150, \"April\": 130, \"May\": 220, \"June\": 170, \"July\": 180}),\n    dict(month=\"September\", value=210, summary={\"January\": 100, \"February\": 200, \"March\": 150, \"April\": 130, \"May\": 220, \"June\": 170, \"July\": 180, \"August\": 190}),\n    dict(month=\"October\", value=200, summary={\"January\": 100, \"February\": 200, \"March\": 150, \"April\": 130, \"May\": 220, \"June\": 170, \"July\": 180, \"August\": 190, \"September\": 210})\n]\nexamples += [\n    dict(month=\"January\", value=100, summary={}),\n    dict(month=\"February\", value=200, summary={\"January\": 100}),\n    dict(month=\"March\", value=300, summary={\"January\": 100, \"February\": 200}),\n    dict(month=\"April\", value=400, summary={\"January\": 100, \"February\": 200, \"March\": 300}),\n    dict(month=\"May\", value=500, summary={\"January\": 100, \"February\": 200, \"March\": 300, \"April\": 400}),\n    dict(month=\"June\", value=600, summary={\"January\": 100, \"February\": 200, \"March\": 300, \"April\": 400, \"May\": 500}),\n    dict(month=\"July\", value=700, summary={\"January\": 100, \"February\": 200, \"March\": 300, \"April\": 400, \"May\": 500, \"June\": 600}),\n    dict(month=\"August\", value=800, summary={\"January\": 100, \"February\": 200, \"March\": 300, \"April\": 400, \"May\": 500, \"June\": 600, \"July\": 700}),\n    dict(month=\"September\", value=900, summary={\"January\": 100, \"February\": 200, \"March\": 300, \"April\": 400, \"May\": 500, \"June\": 600, \"July\": 700, \"August\": 800}),\n    dict(month=\"October\", value=1000, summary={\"January\": 100, \"February\": 200, \"March\": 300, \"April\": 400, \"May\": 500, \"June\": 600, \"July\": 700, \"August\": 800, \"September\": 900}),\n]", "code": "def dict_monthly_recurring(month, value, summary):\n    if summary.get(month) is None:\n        summary[month] = 0\n    summary[month] = value\n    return\n", "func_name": "dict_monthly_recurring", "exec_status": true, "example_inputs": ["\"{'month': 'January', 'value': 100, 'summary': {}}\"", "\"{'month': 'February', 'value': 200, 'summary': {'January': 100}}\"", "\"{'month': 'March', 'value': 300, 'summary': {'January': 100, 'February': 200}}\"", "\"{'month': 'April', 'value': 400, 'summary': {}}\"", "\"{'month': 'May', 'value': 500, 'summary': {'April': 400}}\"", "\"{'month': 'June', 'value': 600, 'summary': {'April': 400, 'May': 500}}\"", "\"{'month': 'July', 'value': 700, 'summary': {}}\"", "\"{'month': 'August', 'value': 800, 'summary': {'July': 700}}\"", "\"{'month': 'September', 'value': 900, 'summary': {'July': 700, 'August': 800}}\"", "\"{'month': 'October', 'value': 1000, 'summary': {}}\""], "example_outputs": [{"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}], "parsed_inputs": [[["month", "\"January\""], ["value", "100"], ["summary", "{}"]], [["month", "\"February\""], ["value", "200"], ["summary", "{'January': 100}"]], [["month", "\"March\""], ["value", "300"], ["summary", "{'January': 100, 'February': 200}"]], [["month", "\"April\""], ["value", "400"], ["summary", "{}"]], [["month", "\"May\""], ["value", "500"], ["summary", "{'April': 400}"]], [["month", "\"June\""], ["value", "600"], ["summary", "{'April': 400, 'May': 500}"]], [["month", "\"July\""], ["value", "700"], ["summary", "{}"]], [["month", "\"August\""], ["value", "800"], ["summary", "{'July': 700}"]], [["month", "\"September\""], ["value", "900"], ["summary", "{'July': 700, 'August': 800}"]], [["month", "\"October\""], ["value", "1000"], ["summary", "{}"]]], "exec_code": "def dict_monthly_recurring(month, value, summary):\n    if summary.get(month) is None:\n        summary[month] = 0\n    summary[month] = value\n    return\n", "output": "The function is:\n\n```python\ndef dict_monthly_recurring(month, value, summary):\n    if summary.get(month) is None:\n        summary[month] = 0\n    summary[month] = value\n    return\n\n```", "choosed_example_idx": [3, 4, 0, 9, 1, 2, 7, 6], "prompt": "Write a function that generates the output from the input.\nInput: dict(month=\"April\", value=400, summary={}), Output: \"None\"\nInput: dict(month=\"May\", value=500, summary={'April': 400}), Output: \"None\"\nInput: dict(month=\"January\", value=100, summary={}), Output: \"None\"\nInput: dict(month=\"October\", value=1000, summary={}), Output: \"None\"\nInput: dict(month=\"February\", value=200, summary={'January': 100}), Output: \"None\"\nInput: dict(month=\"March\", value=300, summary={'January': 100, 'February': 200}), Output: \"None\"\nInput: dict(month=\"August\", value=800, summary={'July': 700}), Output: \"None\"\nInput: dict(month=\"July\", value=700, summary={}), Output: \"None\"\n\n\n\nFunction: dict_monthly_recurring\n", "id": "4575d560affcc241aadeb35034bf364c0259c7f2_0"}
{"example_str": "examples = [\n    dict(snail_map=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n    dict(snail_map=[[1, 2], [3, 4], [5, 6]]),\n    dict(snail_map=[[1]]),\n    dict(snail_map=[]),\n    dict(snail_map=[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),\n    dict(snail_map=[[1, 2], [3, 4]]),\n    dict(snail_map=[[1, 1], [1, 1]]),\n    dict(snail_map=[[5, 5, 5], [5, 5, 5], [5, 5, 5]]),\n    dict(snail_map=[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]),\n    dict(snail_map=[[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]])\n]\nexamples += [\n    dict(snail_map=[]),\n    dict(snail_map=[[1]]),\n    dict(snail_map=[[1, 2], [4, 3]]),\n    dict(snail_map=[[1, 2, 3], [8, 9, 4], [7, 6, 5]]),\n    dict(snail_map=[[1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7]]),\n    dict(snail_map=[[1, 2, 3, 4, 5], [16, 17, 18, 19, 6], [15, 24, 25, 20, 7], [14, 23, 22, 21, 8], [13, 12, 11, 10, 9]]),\n    dict(snail_map=[[1, 2, 3, 4, 5, 6], [20, 21, 22, 23, 24, 7], [19, 32, 33, 34, 25, 8], [18, 31, 36, 35, 26, 9], [17, 30, 29, 28, 27, 10], [16, 15, 14, 13, 12, 11]]),\n    dict(snail_map=[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]),\n    dict(snail_map=[[1, 2, 3], [10, 11, 4], [9, 12, 5], [8, 7, 6]]),\n    dict(snail_map=[[1, 2, 3, 4, 5, 6, 7, 8], [28, 29, 30, 31, 32, 33, 34, 9], [27, 48, 49, 50, 51, 52, 35, 10], [26, 47, 60, 61, 62, 53, 36, 11], [25, 46, 59, 64, 63, 54, 37, 12], [24, 45, 58, 57, 56, 55, 38, 13], [23, 44, 43, 42, 41, 40, 39, 14], [22, 21, 20, 19, 18, 17, 16, 15]])\n]\nexamples += [\n    dict(snail_map=[[1]]),\n    dict(snail_map=[[1, 2], [4, 3]]),\n    dict(snail_map=[[1, 2, 3], [8, 9, 4], [7, 6, 5]]),\n    dict(snail_map=[[1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7]]),\n    dict(snail_map=[[1, 2, 3, 4, 5], [16, 17, 18, 19, 6], [15, 24, 25, 20, 7], [14, 23, 22, 21, 8], [13, 12, 11, 10, 9]]),\n    dict(snail_map=[]),\n    dict(snail_map=[[7]]),\n    dict(snail_map=[[1, 2, 3], [10, 11, 4], [9, 12, 5], [8, 7, 6]]),\n    dict(snail_map=[[1, 2], [6, 3], [5, 4]]),\n    dict(snail_map=[[1, 2, 3, 4], [14, 15, 16, 5], [13, 20, 17, 6], [12, 19, 18, 7], [11, 10, 9, 8]])\n]", "code": "def snail(snail_map):\n    if len(snail_map) == 0:\n        return []\n    elif len(snail_map) == 1:\n        return snail_map[0]\n    return_list = list()\n    start_row = 0\n    end_row = len(snail_map) - 1\n    start_column = 0\n    end_column = end_row\n    while start_row <= end_row and start_column <= end_column:\n        for i in range(start_column, end_column + 1):\n            return_list.append(snail_map[start_row][i])\n        start_row += 1\n        for i in range(start_row, end_row + 1):\n            return_list.append(snail_map[i][end_column])\n        end_column -= 1\n        for i in range(end_column, start_column - 1, -1):\n            return_list.append(snail_map[end_row][i])\n        end_row -= 1\n        for i in range(end_row, start_row - 1, -1):\n            return_list.append(snail_map[i][start_column])\n        start_column += 1\n    return return_list\n", "func_name": "snail", "exec_status": true, "example_inputs": ["\"{'snail_map': [[1, 2, 3], [4, 5, 6], [7, 8, 9]]}\"", "\"{'snail_map': [[1, 2], [3, 4], [5, 6]]}\"", "\"{'snail_map': [[1]]}\"", "\"{'snail_map': []}\"", "\"{'snail_map': [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]}\"", "\"{'snail_map': [[1, 2], [3, 4]]}\"", "\"{'snail_map': [[1, 1], [1, 1]]}\"", "\"{'snail_map': [[5, 5, 5], [5, 5, 5], [5, 5, 5]]}\"", "\"{'snail_map': [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]}\"", "\"{'snail_map': [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]}\""], "example_outputs": [{"return": "\"[1, 2, 3, 6, 9, 8, 7, 4, 5]\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"return": "\"[1]\""}, {"return": "\"[]\""}, {"return": "\"[1, 2, 3, 7, 11, 10, 9, 5, 6]\""}, {"return": "\"[1, 2, 4, 3]\""}, {"return": "\"[1, 1, 1, 1]\""}, {"return": "\"[5, 5, 5, 5, 5, 5, 5, 5, 5]\""}, {"return": "\"[1, 2, 3, 8, 13, 12, 11, 6, 7]\""}, {"return": "\"[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\""}, {"return": "\"[]\""}, {"return": "\"[1]\""}, {"return": "\"[1, 2, 3, 4]\""}, {"return": "\"[1, 2, 3, 4, 5, 6, 7, 8, 9]\""}, {"return": "\"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\""}, {"return": "\"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\""}, {"return": "\"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]\""}, {"return": "\"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"return": "\"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64]\""}, {"return": "\"[1]\""}, {"return": "\"[1, 2, 3, 4]\""}, {"return": "\"[1, 2, 3, 4, 5, 6, 7, 8, 9]\""}, {"return": "\"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\""}, {"return": "\"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\""}, {"return": "\"[]\""}, {"return": "\"[7]\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}], "parsed_inputs": [[["snail_map", "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]"]], [["snail_map", "[[1, 2], [3, 4], [5, 6]]"]], [["snail_map", "[[1]]"]], [["snail_map", "[]"]], [["snail_map", "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]"]], [["snail_map", "[[1, 2], [3, 4]]"]], [["snail_map", "[[1, 1], [1, 1]]"]], [["snail_map", "[[5, 5, 5], [5, 5, 5], [5, 5, 5]]"]], [["snail_map", "[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]"]], [["snail_map", "[[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]"]]], "exec_code": "def snail(snail_map):\n    if len(snail_map) == 0:\n        return []\n    elif len(snail_map) == 1:\n        return snail_map[0]\n    return_list = list()\n    start_row = 0\n    end_row = len(snail_map) - 1\n    start_column = 0\n    end_column = end_row\n    while start_row <= end_row and start_column <= end_column:\n        for i in range(start_column, end_column + 1):\n            return_list.append(snail_map[start_row][i])\n        start_row += 1\n        for i in range(start_row, end_row + 1):\n            return_list.append(snail_map[i][end_column])\n        end_column -= 1\n        for i in range(end_column, start_column - 1, -1):\n            return_list.append(snail_map[end_row][i])\n        end_row -= 1\n        for i in range(end_row, start_row - 1, -1):\n            return_list.append(snail_map[i][start_column])\n        start_column += 1\n    return return_list\n", "output": "The function is:\n\n```python\ndef snail(snail_map):\n    if len(snail_map) == 0:\n        return []\n    elif len(snail_map) == 1:\n        return snail_map[0]\n    return_list = list()\n    start_row = 0\n    end_row = len(snail_map) - 1\n    start_column = 0\n    end_column = end_row\n    while start_row <= end_row and start_column <= end_column:\n        for i in range(start_column, end_column + 1):\n            return_list.append(snail_map[start_row][i])\n        start_row += 1\n        for i in range(start_row, end_row + 1):\n            return_list.append(snail_map[i][end_column])\n        end_column -= 1\n        for i in range(end_column, start_column - 1, -1):\n            return_list.append(snail_map[end_row][i])\n        end_row -= 1\n        for i in range(end_row, start_row - 1, -1):\n            return_list.append(snail_map[i][start_column])\n        start_column += 1\n    return return_list\n\n```", "choosed_example_idx": [6, 0, 5, 9, 4, 1, 8], "prompt": "Input: dict(snail_map=[[1, 1], [1, 1]]), Output: \"[1, 1, 1, 1]\"\nInput: dict(snail_map=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]), Output: \"[1, 2, 3, 6, 9, 8, 7, 4, 5]\"\nInput: dict(snail_map=[[1, 2], [3, 4]]), Output: \"[1, 2, 4, 3]\"\nInput: dict(snail_map=[[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]), Output: \"[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\"\nInput: dict(snail_map=[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]), Output: \"[1, 2, 3, 7, 11, 10, 9, 5, 6]\"\nInput: dict(snail_map=[[1, 2], [3, 4], [5, 6]]), Output: \"<class 'IndexError'>: list index out of range\"\nInput: dict(snail_map=[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]), Output: \"[1, 2, 3, 8, 13, 12, 11, 6, 7]\"\n\nFunction: snail\nWrite a function that generates the output from the input.\n", "id": "78949bbd90ff505efe039d9d3d5845dca6495949_0"}
{"example_str": "examples = [\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10),\n]\nexamples += [\n    dict(n=1),    # n < 2, should return \"boom\"\n    dict(n=2),    # n is even, should return \"Boom!\"\n    dict(n=3),    # n is odd, should return \"Booom\"\n    dict(n=5),    # n is multiple of 5, should return \"BOOOM!\"\n    dict(n=10),   # n is even and multiple of 5, should return \"BOOOOOOOOOM!\"\n    dict(n=15),   # n is odd and multiple of 5, should return \"BOOOOOOOOOOOM!\"\n    dict(n=4),    # n is even, should return \"Booom!\"\n    dict(n=7),    # n is odd, should return \"Booooom\"\n    dict(n=20),   # n is even and multiple of 5, should return \"BOOOOOOOOOOOOOOOOOOOM!\"\n    dict(n=25)    # n is odd and multiple of 5, should return \"BOOOOOOOOOOOOOOOOOOOOOM!\"\n]\nexamples += [\n    dict(n=1),    # \"boom\" (since n < 2)\n    dict(n=2),    # \"Boom!\" (even number, not divisible by 5)\n    dict(n=3),    # \"Booom\" (odd number, not divisible by 5)\n    dict(n=4),    # \"Boooom!\" (even number, not divisible by 5)\n    dict(n=5),    # \"BOOOOOM\" (divisible by 5)\n    dict(n=6),    # \"Booooom!\" (even number, not divisible by 5)\n    dict(n=10),   # \"BOOOOOOOOOM!\" (even number and divisible by 5)\n    dict(n=15),   # \"BOOOOOOOOOOOM\" (divisible by 5)\n    dict(n=7),    # \"Booooooom\" (odd number, not divisible by 5)\n    dict(n=9)     # \"Booooooooom\" (odd number, not divisible by 5)\n]", "code": "def boom_intensity(n):\n    boomString = 'B'\n    if n < 2:\n        return 'boom'\n    for x in range(n):\n        boomString += 'o'\n    boomString += 'm'\n    if n % 2 == 0:\n        boomString += '!'\n    if n % 5 == 0:\n        return boomString.upper()\n    else:\n        return boomString\n", "func_name": "boom_intensity", "exec_status": true, "example_inputs": ["\"{'n': 1}\"", "\"{'n': 2}\"", "\"{'n': 3}\"", "\"{'n': 4}\"", "\"{'n': 5}\"", "\"{'n': 6}\"", "\"{'n': 7}\"", "\"{'n': 8}\"", "\"{'n': 9}\"", "\"{'n': 10}\""], "example_outputs": [{"return": "\"'boom'\""}, {"return": "\"'Boom!'\""}, {"return": "\"'Booom'\""}, {"return": "\"'Boooom!'\""}, {"return": "\"'BOOOOOM'\""}, {"return": "\"'Boooooom!'\""}, {"return": "\"'Booooooom'\""}, {"return": "\"'Boooooooom!'\""}, {"return": "\"'Booooooooom'\""}, {"return": "\"'BOOOOOOOOOOM!'\""}, {"return": "\"'boom'\""}, {"return": "\"'Boom!'\""}, {"return": "\"'Booom'\""}, {"return": "\"'BOOOOOM'\""}, {"return": "\"'BOOOOOOOOOOM!'\""}, {"return": "\"'BOOOOOOOOOOOOOOOM'\""}, {"return": "\"'Boooom!'\""}, {"return": "\"'Booooooom'\""}, {"return": "\"'BOOOOOOOOOOOOOOOOOOOOM!'\""}, {"return": "\"'BOOOOOOOOOOOOOOOOOOOOOOOOOM'\""}, {"return": "\"'boom'\""}, {"return": "\"'Boom!'\""}, {"return": "\"'Booom'\""}, {"return": "\"'Boooom!'\""}, {"return": "\"'BOOOOOM'\""}, {"return": "\"'Boooooom!'\""}, {"return": "\"'BOOOOOOOOOOM!'\""}, {"return": "\"'BOOOOOOOOOOOOOOOM'\""}, {"return": "\"'Booooooom'\""}, {"return": "\"'Booooooooom'\""}], "parsed_inputs": [[["n", "1"]], [["n", "2"]], [["n", "3"]], [["n", "4"]], [["n", "5"]], [["n", "6"]], [["n", "7"]], [["n", "8"]], [["n", "9"]], [["n", "10"]]], "exec_code": "def boom_intensity(n):\n    boomString = 'B'\n    if n < 2:\n        return 'boom'\n    for x in range(n):\n        boomString += 'o'\n    boomString += 'm'\n    if n % 2 == 0:\n        boomString += '!'\n    if n % 5 == 0:\n        return boomString.upper()\n    else:\n        return boomString\n", "output": "The function is:\n\n```python\ndef boom_intensity(n):\n    boomString = 'B'\n    if n < 2:\n        return 'boom'\n    for x in range(n):\n        boomString += 'o'\n    boomString += 'm'\n    if n % 2 == 0:\n        boomString += '!'\n    if n % 5 == 0:\n        return boomString.upper()\n    else:\n        return boomString\n\n```", "choosed_example_idx": [6, 2, 9, 4], "prompt": "Write a function that generates the output from the input.\n\nInput: dict(n=7), Output: \"'Booooooom'\"\nInput: dict(n=3), Output: \"'Booom'\"\nInput: dict(n=10), Output: \"'BOOOOOOOOOOM!'\"\nInput: dict(n=5), Output: \"'BOOOOOM'\"\n\n\nFunction: boom_intensity\n\n", "id": "144ea29107cd227f565191e26f1a6c3d0e9f5c0d_0"}
{"example_str": "examples = [\n    dict(histogram={'a': 5, 'b': 3, 'c': 2}, types=['a', 'b']),\n    dict(histogram={'x': 10, 'y': 5, 'z': 3}, types=['x', 'y', 'z']),\n    dict(histogram={'apple': 5, 'banana': 3, 'orange': 2}, types=['apple', 'banana']),\n    dict(histogram={'1': 10, '2': 5, '3': 3}, types=['1', '2', '3']),\n    dict(histogram={'A': 5, 'B': 3, 'C': 2}, types=['A', 'B']),\n    dict(histogram={'dog': 10, 'cat': 5, 'bird': 3}, types=['dog', 'cat', 'bird']),\n    dict(histogram={'car': 5, 'bike': 3, 'plane': 2}, types=['car', 'bike']),\n    dict(histogram={'house': 10, 'apartment': 5, 'room': 3}, types=['house', 'apartment', 'room']),\n    dict(histogram={'book': 5, 'pen': 3, 'paper': 2}, types=['book', 'pen']),\n    dict(histogram={'phone': 10, 'laptop': 5, 'tablet': 3}, types=['phone', 'laptop', 'tablet']),\n]\nexamples += [\n    dict(histogram={'a': 5, 'b': 10, 'c': 15}, types=['a', 'b', 'c']),\n    dict(histogram={'x': 3, 'y': 7, 'z': 6}, types=['x', 'y', 'z']),\n    dict(histogram={'red': 2, 'blue': 4}, types=['red', 'blue']),\n    dict(histogram={'one': 1, 'two': 2, 'three': 3}, types=['one', 'two', 'three']),\n    dict(histogram={'apple': 10, 'banana': 20}, types=['apple', 'banana']),\n    dict(histogram={'cat': 7, 'dog': 8, 'bird': 5}, types=['cat', 'dog', 'bird']),\n    dict(histogram={'left': 4, 'right': 6}, types=['left', 'right']),\n    dict(histogram={'first': 3, 'second': 5, 'third': 7}, types=['first', 'second', 'third']),\n    dict(histogram={'alpha': 5, 'beta': 10}, types=['alpha', 'beta']),\n    dict(histogram={'jan': 31, 'feb': 28, 'mar': 31}, types=['jan', 'feb', 'mar'])\n]\nexamples += [\n    dict(histogram={'apple': 3, 'banana': 2, 'cherry': 1}, types=['apple', 'banana', 'cherry']),\n    dict(histogram={'red': 5, 'blue': 3}, types=['red', 'blue']),\n    dict(histogram={'cat': 4, 'dog': 2, 'bird': 3}, types=['cat', 'dog', 'bird']),\n    dict(histogram={'one': 1, 'two': 2, 'three': 3}, types=['one', 'two', 'three']),\n    dict(histogram={'a': 10, 'b': 5}, types=['a', 'b']),\n    dict(histogram={'x': 7, 'y': 8, 'z': 9}, types=['x', 'y', 'z']),\n    dict(histogram={'jan': 31, 'feb': 28, 'mar': 31}, types=['jan', 'feb', 'mar']),\n    dict(histogram={'gold': 3, 'silver': 1, 'bronze': 2}, types=['gold', 'silver', 'bronze']),\n    dict(histogram={'pen': 4, 'pencil': 6, 'eraser': 2}, types=['pen', 'pencil', 'eraser']),\n    dict(histogram={'monday': 5, 'tuesday': 4, 'wednesday': 3}, types=['monday', 'tuesday', 'wednesday'])\n]", "code": "def set_ranges(histogram, types):\n    index = 0\n    ranges = []\n    for i in range(len(types)):\n        temp = histogram[types[i]]\n        ranges.append((index, index + temp - 1))\n        index += temp\n    return ranges\n", "func_name": "set_ranges", "exec_status": true, "example_inputs": ["\"{'histogram': {'a': 5, 'b': 3, 'c': 2}, 'types': ['a', 'b']}\"", "\"{'histogram': {'x': 10, 'y': 5, 'z': 3}, 'types': ['x', 'y', 'z']}\"", "\"{'histogram': {'apple': 5, 'banana': 3, 'orange': 2}, 'types': ['apple', 'banana']}\"", "\"{'histogram': {'1': 10, '2': 5, '3': 3}, 'types': ['1', '2', '3']}\"", "\"{'histogram': {'A': 5, 'B': 3, 'C': 2}, 'types': ['A', 'B']}\"", "\"{'histogram': {'dog': 10, 'cat': 5, 'bird': 3}, 'types': ['dog', 'cat', 'bird']}\"", "\"{'histogram': {'car': 5, 'bike': 3, 'plane': 2}, 'types': ['car', 'bike']}\"", "\"{'histogram': {'house': 10, 'apartment': 5, 'room': 3}, 'types': ['house', 'apartment', 'room']}\"", "\"{'histogram': {'book': 5, 'pen': 3, 'paper': 2}, 'types': ['book', 'pen']}\"", "\"{'histogram': {'phone': 10, 'laptop': 5, 'tablet': 3}, 'types': ['phone', 'laptop', 'tablet']}\""], "example_outputs": [{"return": "\"[(0, 4), (5, 7)]\""}, {"return": "\"[(0, 9), (10, 14), (15, 17)]\""}, {"return": "\"[(0, 4), (5, 7)]\""}, {"return": "\"[(0, 9), (10, 14), (15, 17)]\""}, {"return": "\"[(0, 4), (5, 7)]\""}, {"return": "\"[(0, 9), (10, 14), (15, 17)]\""}, {"return": "\"[(0, 4), (5, 7)]\""}, {"return": "\"[(0, 9), (10, 14), (15, 17)]\""}, {"return": "\"[(0, 4), (5, 7)]\""}, {"return": "\"[(0, 9), (10, 14), (15, 17)]\""}, {"return": "\"[(0, 4), (5, 14), (15, 29)]\""}, {"return": "\"[(0, 2), (3, 9), (10, 15)]\""}, {"return": "\"[(0, 1), (2, 5)]\""}, {"return": "\"[(0, 0), (1, 2), (3, 5)]\""}, {"return": "\"[(0, 9), (10, 29)]\""}, {"return": "\"[(0, 6), (7, 14), (15, 19)]\""}, {"return": "\"[(0, 3), (4, 9)]\""}, {"return": "\"[(0, 2), (3, 7), (8, 14)]\""}, {"return": "\"[(0, 4), (5, 14)]\""}, {"return": "\"[(0, 30), (31, 58), (59, 89)]\""}, {"return": "\"[(0, 2), (3, 4), (5, 5)]\""}, {"return": "\"[(0, 4), (5, 7)]\""}, {"return": "\"[(0, 3), (4, 5), (6, 8)]\""}, {"return": "\"[(0, 0), (1, 2), (3, 5)]\""}, {"return": "\"[(0, 9), (10, 14)]\""}, {"return": "\"[(0, 6), (7, 14), (15, 23)]\""}, {"return": "\"[(0, 30), (31, 58), (59, 89)]\""}, {"return": "\"[(0, 2), (3, 3), (4, 5)]\""}, {"return": "\"[(0, 3), (4, 9), (10, 11)]\""}, {"return": "\"[(0, 4), (5, 8), (9, 11)]\""}], "parsed_inputs": [[["histogram", "{'a': 5, 'b': 3, 'c': 2}"], ["types", "['a', 'b']"]], [["histogram", "{'x': 10, 'y': 5, 'z': 3}"], ["types", "['x', 'y', 'z']"]], [["histogram", "{'apple': 5, 'banana': 3, 'orange': 2}"], ["types", "['apple', 'banana']"]], [["histogram", "{'1': 10, '2': 5, '3': 3}"], ["types", "['1', '2', '3']"]], [["histogram", "{'A': 5, 'B': 3, 'C': 2}"], ["types", "['A', 'B']"]], [["histogram", "{'dog': 10, 'cat': 5, 'bird': 3}"], ["types", "['dog', 'cat', 'bird']"]], [["histogram", "{'car': 5, 'bike': 3, 'plane': 2}"], ["types", "['car', 'bike']"]], [["histogram", "{'house': 10, 'apartment': 5, 'room': 3}"], ["types", "['house', 'apartment', 'room']"]], [["histogram", "{'book': 5, 'pen': 3, 'paper': 2}"], ["types", "['book', 'pen']"]], [["histogram", "{'phone': 10, 'laptop': 5, 'tablet': 3}"], ["types", "['phone', 'laptop', 'tablet']"]]], "exec_code": "def set_ranges(histogram, types):\n    index = 0\n    ranges = []\n    for i in range(len(types)):\n        temp = histogram[types[i]]\n        ranges.append((index, index + temp - 1))\n        index += temp\n    return ranges\n", "output": "The function is:\n\n```python\ndef set_ranges(histogram, types):\n    index = 0\n    ranges = []\n    for i in range(len(types)):\n        temp = histogram[types[i]]\n        ranges.append((index, index + temp - 1))\n        index += temp\n    return ranges\n\n```", "choosed_example_idx": [7, 3, 2], "prompt": "Write a function that generates the output from the input.\nFunction: set_ranges\nInput: dict(histogram={'house': 10, 'apartment': 5, 'room': 3}, types=['house', 'apartment', 'room']), Output: \"[(0, 9), (10, 14), (15, 17)]\"\nInput: dict(histogram={'1': 10, '2': 5, '3': 3}, types=['1', '2', '3']), Output: \"[(0, 9), (10, 14), (15, 17)]\"\nInput: dict(histogram={'apple': 5, 'banana': 3, 'orange': 2}, types=['apple', 'banana']), Output: \"[(0, 4), (5, 7)]\"\n\n", "id": "192c9a964c4a3e5bf7b6f45a3d100af4484544e4_0"}
{"example_str": "examples = [\n    dict(value=10, low=0, high=255),  # basic example\n    dict(value=300, low=0, high=255),  # value exceeds high bound\n    dict(value=-10, low=0, high=255),  # value below low bound\n    dict(value=128, low=0, high=255),  # value within bounds\n    dict(value=0, low=0, high=255),  # value at low bound\n    dict(value=255, low=0, high=255),  # value at high bound\n    dict(value=10, low=5, high=20),  # custom bounds\n    dict(value=10, low=-10, high=20),  # negative low bound\n    dict(value=10, low=0, high=10),  # high bound is equal to value\n    dict(value=10),  # using default bounds\n]\nexamples += [\n    dict(value=100),  # within default bounds\n    dict(value=-10),  # below default lower bound\n    dict(value=300),  # above default upper bound\n    dict(value=50, low=50, high=100),  # within custom bounds\n    dict(value=25, low=50, high=100),  # below custom lower bound\n    dict(value=150, low=50, high=100),  # above custom upper bound\n    dict(value=0),  # at default lower bound\n    dict(value=255),  # at default upper bound\n    dict(value=200, low=150, high=250),  # within custom bounds\n    dict(value=150, low=150, high=150)  # at both custom bounds\n]\nexamples += [\n    dict(value=100),  # within the default bounds\n    dict(value=-10),  # below the default lower bound\n    dict(value=300),  # above the default upper bound\n    dict(value=50, low=0, high=100),  # within custom bounds\n    dict(value=200, low=100, high=300),  # within custom bounds\n    dict(value=100, low=150, high=200),  # below custom lower bound\n    dict(value=250, low=200, high=220),  # above custom upper bound\n    dict(value=0),  # at the default lower bound\n    dict(value=255),  # at the default upper bound\n    dict(value=123, low=123, high=123)  # at both custom bounds\n]", "code": "def bound(value, low=0, high=255):\n    return max(low, min(high, value))\n", "func_name": "bound", "exec_status": true, "example_inputs": ["\"{'value': 10, 'low': 0, 'high': 255}\"", "\"{'value': 300, 'low': 0, 'high': 255}\"", "\"{'value': -10, 'low': 0, 'high': 255}\"", "\"{'value': 128, 'low': 0, 'high': 255}\"", "\"{'value': 0, 'low': 0, 'high': 255}\"", "\"{'value': 255, 'low': 0, 'high': 255}\"", "\"{'value': 10, 'low': 5, 'high': 20}\"", "\"{'value': 10, 'low': -10, 'high': 20}\"", "\"{'value': 10, 'low': 0, 'high': 10}\"", "\"{'value': 10}\""], "example_outputs": [{"return": "\"10\""}, {"return": "\"255\""}, {"return": "\"0\""}, {"return": "\"128\""}, {"return": "\"0\""}, {"return": "\"255\""}, {"return": "\"10\""}, {"return": "\"10\""}, {"return": "\"10\""}, {"return": "\"10\""}, {"return": "\"100\""}, {"return": "\"0\""}, {"return": "\"255\""}, {"return": "\"50\""}, {"return": "\"50\""}, {"return": "\"100\""}, {"return": "\"0\""}, {"return": "\"255\""}, {"return": "\"200\""}, {"return": "\"150\""}, {"return": "\"100\""}, {"return": "\"0\""}, {"return": "\"255\""}, {"return": "\"50\""}, {"return": "\"200\""}, {"return": "\"150\""}, {"return": "\"220\""}, {"return": "\"0\""}, {"return": "\"255\""}, {"return": "\"123\""}], "parsed_inputs": [[["value", "10"], ["low", "0"], ["high", "255"]], [["value", "300"], ["low", "0"], ["high", "255"]], [["value", "-10"], ["low", "0"], ["high", "255"]], [["value", "128"], ["low", "0"], ["high", "255"]], [["value", "0"], ["low", "0"], ["high", "255"]], [["value", "255"], ["low", "0"], ["high", "255"]], [["value", "10"], ["low", "5"], ["high", "20"]], [["value", "10"], ["low", "-10"], ["high", "20"]], [["value", "10"], ["low", "0"], ["high", "10"]], [["value", "10"]]], "exec_code": "def bound(value, low=0, high=255):\n    return max(low, min(high, value))\n", "output": "The function is:\n\n```python\ndef bound(value, low=0, high=255):\n    return max(low, min(high, value))\n\n```", "choosed_example_idx": [0, 2, 4, 9, 3], "prompt": "Input: dict(value=10, low=0, high=255), Output: \"10\"\nInput: dict(value=-10, low=0, high=255), Output: \"0\"\nInput: dict(value=0, low=0, high=255), Output: \"0\"\nInput: dict(value=10), Output: \"10\"\nInput: dict(value=128, low=0, high=255), Output: \"128\"\n\nFunction: bound\nWrite a function that generates the output from the input.\n\n", "id": "c71a610eff9e0a0cc0be921cd9cc6cbc635e0f16_0"}
{"example_str": "examples = [\n    dict(G={}, src_name='A', dst_name='B', stops_name=['C', 'D']),\n    dict(G=[], src_name='New York', dst_name='Los Angeles', stops_name=['Chicago', 'Denver']),\n    dict(G={'A': ['B', 'C']}, src_name='A', dst_name='C', stops_name=['B']),\n    dict(G='graph_data', src_name='Paris', dst_name='Rome', stops_name=['Berlin', 'Milan']),\n    dict(G={1: [2, 3]}, src_name=1, dst_name=3, stops_name=[2]),\n    dict(G={}, src_name='London', dst_name='Tokyo', stops_name=['Beijing', 'Seoul']),\n    dict(G=[], src_name='Sydney', dst_name='Melbourne', stops_name=['Canberra']),\n    dict(G={'A': ['B']}, src_name='A', dst_name='B', stops_name=[]),\n    dict(G='route_map', src_name='Mumbai', dst_name='Delhi', stops_name=['Bangalore', 'Chennai']),\n    dict(G={1: []}, src_name=1, dst_name=2, stops_name=[3, 4]),\n]\nexamples += [\n    dict(G={'A': {'B': 1}, 'B': {'C': 2}, 'C': {}}, src_name='A', dst_name='C', stops_name=['B']),\n    dict(G={'X': {'Y': 3}, 'Y': {'Z': 4}, 'Z': {}}, src_name='X', dst_name='Z', stops_name=['Y']),\n    dict(G={'1': {'2': 5}, '2': {'3': 6}, '3': {}}, src_name='1', dst_name='3', stops_name=['2']),\n    dict(G={'Start': {'Mid': 7}, 'Mid': {'End': 8}, 'End': {}}, src_name='Start', dst_name='End', stops_name=['Mid']),\n    dict(G={'Home': {'Office': 9}, 'Office': {'Park': 10}, 'Park': {}}, src_name='Home', dst_name='Park', stops_name=['Office']),\n    dict(G={'Earth': {'Mars': 11}, 'Mars': {'Jupiter': 12}, 'Jupiter': {}}, src_name='Earth', dst_name='Jupiter', stops_name=['Mars']),\n    dict(G={'Node1': {'Node2': 13}, 'Node2': {'Node3': 14}, 'Node3': {}}, src_name='Node1', dst_name='Node3', stops_name=['Node2']),\n    dict(G={'Alpha': {'Beta': 15}, 'Beta': {'Gamma': 16}, 'Gamma': {}}, src_name='Alpha', dst_name='Gamma', stops_name=['Beta']),\n    dict(G={'First': {'Second': 17}, 'Second': {'Third': 18}, 'Third': {}}, src_name='First', dst_name='Third', stops_name=['Second']),\n    dict(G={'One': {'Two': 19}, 'Two': {'Three': 20}, 'Three': {}}, src_name='One', dst_name='Three', stops_name=['Two'])\n]\nexamples += [\n    dict(G={'A': {'B': 1}, 'B': {'A': 1}}, src_name='A', dst_name='B', stops_name=[]),\n    dict(G={'A': {'B': 2, 'C': 3}, 'B': {'A': 2}, 'C': {'A': 3}}, src_name='A', dst_name='C', stops_name=['B']),\n    dict(G={'X': {'Y': 1, 'Z': 2}, 'Y': {'X': 1}, 'Z': {'X': 2}}, src_name='X', dst_name='Z', stops_name=['Y']),\n    dict(G={'1': {'2': 1, '3': 2}, '2': {'1': 1}, '3': {'1': 2}}, src_name='1', dst_name='3', stops_name=['2']),\n    dict(G={'Start': {'End': 5}, 'End': {'Start': 5}}, src_name='Start', dst_name='End', stops_name=[]),\n    dict(G={'Earth': {'Mars': 100}, 'Mars': {'Earth': 100}}, src_name='Earth', dst_name='Mars', stops_name=[]),\n    dict(G={'Node1': {'Node2': 10, 'Node3': 20}, 'Node2': {'Node1': 10}, 'Node3': {'Node1': 20}}, src_name='Node1', dst_name='Node3', stops_name=['Node2']),\n    dict(G={'Home': {'Work': 1}, 'Work': {'Home': 1}}, src_name='Home', dst_name='Work', stops_name=[]),\n    dict(G={'Alpha': {'Beta': 3, 'Gamma': 5}, 'Beta': {'Alpha': 3}, 'Gamma': {'Alpha': 5}}, src_name='Alpha', dst_name='Gamma', stops_name=['Beta']),\n    dict(G={'One': {'Two': 1, 'Three': 2}, 'Two': {'One': 1}, 'Three': {'One': 2}}, src_name='One', dst_name='Three', stops_name=['Two'])\n]", "code": "def noreturn_TSP(G, src_name, dst_name, stops_name):\n    return\n", "func_name": "noreturn_TSP", "exec_status": true, "example_inputs": ["\"{'G': {}, 'src_name': 'A', 'dst_name': 'B', 'stops_name': ['C', 'D']}\"", "\"{'G': [], 'src_name': 'New York', 'dst_name': 'Los Angeles', 'stops_name': ['Chicago', 'Denver']}\"", "\"{'G': {'A': ['B', 'C']}, 'src_name': 'A', 'dst_name': 'C', 'stops_name': ['B']}\"", "\"{'G': 'graph_data', 'src_name': 'Paris', 'dst_name': 'Rome', 'stops_name': ['Berlin', 'Milan']}\"", "\"{'G': {1: [2, 3]}, 'src_name': 1, 'dst_name': 3, 'stops_name': [2]}\"", "\"{'G': {}, 'src_name': 'London', 'dst_name': 'Tokyo', 'stops_name': ['Beijing', 'Seoul']}\"", "\"{'G': [], 'src_name': 'Sydney', 'dst_name': 'Melbourne', 'stops_name': ['Canberra']}\"", "\"{'G': {'A': ['B']}, 'src_name': 'A', 'dst_name': 'B', 'stops_name': []}\"", "\"{'G': 'route_map', 'src_name': 'Mumbai', 'dst_name': 'Delhi', 'stops_name': ['Bangalore', 'Chennai']}\"", "\"{'G': {1: []}, 'src_name': 1, 'dst_name': 2, 'stops_name': [3, 4]}\""], "example_outputs": [{"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}], "parsed_inputs": [[["G", "{}"], ["src_name", "\"A\""], ["dst_name", "\"B\""], ["stops_name", "['C', 'D']"]], [["G", "[]"], ["src_name", "\"New York\""], ["dst_name", "\"Los Angeles\""], ["stops_name", "['Chicago', 'Denver']"]], [["G", "{'A': ['B', 'C']}"], ["src_name", "\"A\""], ["dst_name", "\"C\""], ["stops_name", "['B']"]], [["G", "\"graph_data\""], ["src_name", "\"Paris\""], ["dst_name", "\"Rome\""], ["stops_name", "['Berlin', 'Milan']"]], [["G", "{1: [2, 3]}"], ["src_name", "1"], ["dst_name", "3"], ["stops_name", "[2]"]], [["G", "{}"], ["src_name", "\"London\""], ["dst_name", "\"Tokyo\""], ["stops_name", "['Beijing', 'Seoul']"]], [["G", "[]"], ["src_name", "\"Sydney\""], ["dst_name", "\"Melbourne\""], ["stops_name", "['Canberra']"]], [["G", "{'A': ['B']}"], ["src_name", "\"A\""], ["dst_name", "\"B\""], ["stops_name", "[]"]], [["G", "\"route_map\""], ["src_name", "\"Mumbai\""], ["dst_name", "\"Delhi\""], ["stops_name", "['Bangalore', 'Chennai']"]], [["G", "{1: []}"], ["src_name", "1"], ["dst_name", "2"], ["stops_name", "[3, 4]"]]], "exec_code": "def noreturn_TSP(G, src_name, dst_name, stops_name):\n    return\n", "output": "The function is:\n\n```python\ndef noreturn_TSP(G, src_name, dst_name, stops_name):\n    return\n\n```", "choosed_example_idx": [8, 1, 3, 6, 7], "prompt": "Write a function that generates the output from the input.\nInput: dict(G=\"route_map\", src_name=\"Mumbai\", dst_name=\"Delhi\", stops_name=['Bangalore', 'Chennai']), Output: \"None\"\nInput: dict(G=[], src_name=\"New York\", dst_name=\"Los Angeles\", stops_name=['Chicago', 'Denver']), Output: \"None\"\nInput: dict(G=\"graph_data\", src_name=\"Paris\", dst_name=\"Rome\", stops_name=['Berlin', 'Milan']), Output: \"None\"\nInput: dict(G=[], src_name=\"Sydney\", dst_name=\"Melbourne\", stops_name=['Canberra']), Output: \"None\"\nInput: dict(G={'A': ['B']}, src_name=\"A\", dst_name=\"B\", stops_name=[]), Output: \"None\"\n\nFunction: noreturn_TSP\n", "id": "9eaf39199c3c452f8a5d19974577c1ce29756346_0"}
{"example_str": "examples = [\n    dict(c={'a': 1, 'b': 2, 'c': 3}),\n    dict(c={'x': 10, 'y': 20, 'z': 10}),\n    dict(c={'one': 1, 'two': 2, 'three': 1}),\n    dict(c={'A': 5, 'B': 5, 'C': 10}),\n    dict(c={'apple': 10, 'banana': 20, 'orange': 10}),\n    dict(c={'I': 100, 'II': 200, 'III': 100}),\n    dict(c={'red': 1, 'green': 2, 'blue': 1}),\n    dict(c={'jan': 1, 'feb': 2, 'mar': 1}),\n    dict(c={'math': 90, 'sci': 80, 'eng': 90}),\n    dict(c={'python': 10, 'java': 20, 'c++': 10}),\n]\nexamples += [\n    dict(c={'a': 1, 'b': 2, 'c': 3}),\n    dict(c={'x': 10, 'y': 5, 'z': 5}),\n    dict(c={'apple': 3.5, 'banana': 2.1, 'cherry': 2.1}),\n    dict(c={'first': -10, 'second': -20, 'third': -20}),\n    dict(c={'one': 100, 'two': 200, 'three': 50, 'four': 50}),\n    dict(c={'alpha': 0, 'beta': 0, 'gamma': 0}),\n    dict(c={'jan': 31, 'feb': 28, 'mar': 31, 'apr': 30}),\n    dict(c={'dog': 5, 'cat': 3, 'bird': 3, 'fish': 6}),\n    dict(c={'red': 7, 'blue': 7, 'green': 8, 'yellow': 5}),\n    dict(c={'monday': 9, 'tuesday': 8, 'wednesday': 8, 'thursday': 10})\n]\nexamples += [\n    dict(c={'x': 5, 'y': 10, 'z': 15}),\n    dict(c={'a': 2, 'b': 3, 'c': 1}),\n    dict(c={'apple': 10, 'banana': 10, 'cherry': 10}),\n    dict(c={'first': 1, 'second': 2, 'third': 3}),\n    dict(c={'one': 100, 'two': 200, 'three': 50}),\n    dict(c={'jan': 31, 'feb': 28, 'mar': 31}),\n    dict(c={'red': 7, 'blue': 3, 'green': 5}),\n    dict(c={'cat': 9, 'dog': 5, 'bird': 5}),\n    dict(c={'alpha': 0, 'beta': 0, 'gamma': 0}),\n    dict(c={'mon': 8, 'tue': 8, 'wed': 7}),\n]", "code": "def filter_min(c):\n    min_val = min(c.values())\n    return [k for k, v in c.items() if v == min_val]\n", "func_name": "filter_min", "exec_status": true, "example_inputs": ["\"{'c': {'a': 1, 'b': 2, 'c': 3}}\"", "\"{'c': {'x': 10, 'y': 20, 'z': 10}}\"", "\"{'c': {'one': 1, 'two': 2, 'three': 1}}\"", "\"{'c': {'A': 5, 'B': 5, 'C': 10}}\"", "\"{'c': {'apple': 10, 'banana': 20, 'orange': 10}}\"", "\"{'c': {'I': 100, 'II': 200, 'III': 100}}\"", "\"{'c': {'red': 1, 'green': 2, 'blue': 1}}\"", "\"{'c': {'jan': 1, 'feb': 2, 'mar': 1}}\"", "\"{'c': {'math': 90, 'sci': 80, 'eng': 90}}\"", "\"{'c': {'python': 10, 'java': 20, 'c++': 10}}\""], "example_outputs": [{"return": "\"['a']\""}, {"return": "\"['x', 'z']\""}, {"return": "\"['one', 'three']\""}, {"return": "\"['A', 'B']\""}, {"return": "\"['apple', 'orange']\""}, {"return": "\"['I', 'III']\""}, {"return": "\"['red', 'blue']\""}, {"return": "\"['jan', 'mar']\""}, {"return": "\"['sci']\""}, {"return": "\"['python', 'c++']\""}, {"return": "\"['a']\""}, {"return": "\"['y', 'z']\""}, {"return": "\"['banana', 'cherry']\""}, {"return": "\"['second', 'third']\""}, {"return": "\"['three', 'four']\""}, {"return": "\"['alpha', 'beta', 'gamma']\""}, {"return": "\"['feb']\""}, {"return": "\"['cat', 'bird']\""}, {"return": "\"['yellow']\""}, {"return": "\"['tuesday', 'wednesday']\""}, {"return": "\"['x']\""}, {"return": "\"['c']\""}, {"return": "\"['apple', 'banana', 'cherry']\""}, {"return": "\"['first']\""}, {"return": "\"['three']\""}, {"return": "\"['feb']\""}, {"return": "\"['blue']\""}, {"return": "\"['dog', 'bird']\""}, {"return": "\"['alpha', 'beta', 'gamma']\""}, {"return": "\"['wed']\""}], "parsed_inputs": [[["c", "{'a': 1, 'b': 2, 'c': 3}"]], [["c", "{'x': 10, 'y': 20, 'z': 10}"]], [["c", "{'one': 1, 'two': 2, 'three': 1}"]], [["c", "{'A': 5, 'B': 5, 'C': 10}"]], [["c", "{'apple': 10, 'banana': 20, 'orange': 10}"]], [["c", "{'I': 100, 'II': 200, 'III': 100}"]], [["c", "{'red': 1, 'green': 2, 'blue': 1}"]], [["c", "{'jan': 1, 'feb': 2, 'mar': 1}"]], [["c", "{'math': 90, 'sci': 80, 'eng': 90}"]], [["c", "{'python': 10, 'java': 20, 'c++': 10}"]]], "exec_code": "def filter_min(c):\n    min_val = min(c.values())\n    return [k for k, v in c.items() if v == min_val]\n", "output": "The function is:\n\n```python\ndef filter_min(c):\n    min_val = min(c.values())\n    return [k for k, v in c.items() if v == min_val]\n\n```", "choosed_example_idx": [6, 3, 0], "prompt": "Input: dict(c={'red': 1, 'green': 2, 'blue': 1}), Output: \"['red', 'blue']\"\nInput: dict(c={'A': 5, 'B': 5, 'C': 10}), Output: \"['A', 'B']\"\nInput: dict(c={'a': 1, 'b': 2, 'c': 3}), Output: \"['a']\"\n\nWrite a function that generates the output from the input.\nFunction: filter_min\n", "id": "9a4b64c8e055991c9198af599571ee3031ddd29f_0"}
{"example_str": "examples = [\n    dict(x=10, y=2),\n    dict(x=17, y=3),\n    dict(x=25, y=5),\n    dict(x=7, y=1),\n    dict(x=0, y=4),\n    dict(x=11, y=11),\n    dict(x=20, y=4),\n    dict(x=36, y=6),\n    dict(x=48, y=8),\n    dict(x=99, y=9),\n]\nexamples += [\n    dict(x=10, y=2),\n    dict(x=20, y=3),\n    dict(x=15, y=4),\n    dict(x=9, y=3),\n    dict(x=100, y=10),\n    dict(x=45, y=6),\n    dict(x=27, y=5),\n    dict(x=34, y=7),\n    dict(x=56, y=8),\n    dict(x=81, y=9)\n]\nexamples += [\n    dict(x=10, y=2),\n    dict(x=20, y=3),\n    dict(x=15, y=4),\n    dict(x=9, y=2),\n    dict(x=100, y=10),\n    dict(x=45, y=6),\n    dict(x=60, y=7),\n    dict(x=0, y=1),\n    dict(x=99, y=33),\n    dict(x=81, y=9),\n]", "code": "def divisao(x, y):\n    q = x // y\n    r = x % y\n    return q, r\n", "func_name": "divisao", "exec_status": true, "example_inputs": ["\"{'x': 10, 'y': 2}\"", "\"{'x': 17, 'y': 3}\"", "\"{'x': 25, 'y': 5}\"", "\"{'x': 7, 'y': 1}\"", "\"{'x': 0, 'y': 4}\"", "\"{'x': 11, 'y': 11}\"", "\"{'x': 20, 'y': 4}\"", "\"{'x': 36, 'y': 6}\"", "\"{'x': 48, 'y': 8}\"", "\"{'x': 99, 'y': 9}\""], "example_outputs": [{"return": "\"(5, 0)\""}, {"return": "\"(5, 2)\""}, {"return": "\"(5, 0)\""}, {"return": "\"(7, 0)\""}, {"return": "\"(0, 0)\""}, {"return": "\"(1, 0)\""}, {"return": "\"(5, 0)\""}, {"return": "\"(6, 0)\""}, {"return": "\"(6, 0)\""}, {"return": "\"(11, 0)\""}, {"return": "\"(5, 0)\""}, {"return": "\"(6, 2)\""}, {"return": "\"(3, 3)\""}, {"return": "\"(3, 0)\""}, {"return": "\"(10, 0)\""}, {"return": "\"(7, 3)\""}, {"return": "\"(5, 2)\""}, {"return": "\"(4, 6)\""}, {"return": "\"(7, 0)\""}, {"return": "\"(9, 0)\""}, {"return": "\"(5, 0)\""}, {"return": "\"(6, 2)\""}, {"return": "\"(3, 3)\""}, {"return": "\"(4, 1)\""}, {"return": "\"(10, 0)\""}, {"return": "\"(7, 3)\""}, {"return": "\"(8, 4)\""}, {"return": "\"(0, 0)\""}, {"return": "\"(3, 0)\""}, {"return": "\"(9, 0)\""}], "parsed_inputs": [[["x", "10"], ["y", "2"]], [["x", "17"], ["y", "3"]], [["x", "25"], ["y", "5"]], [["x", "7"], ["y", "1"]], [["x", "0"], ["y", "4"]], [["x", "11"], ["y", "11"]], [["x", "20"], ["y", "4"]], [["x", "36"], ["y", "6"]], [["x", "48"], ["y", "8"]], [["x", "99"], ["y", "9"]]], "exec_code": "def divisao(x, y):\n    q = x // y\n    r = x % y\n    return q, r\n", "output": "The function is:\n\n```python\ndef divisao(x, y):\n    q = x // y\n    r = x % y\n    return q, r\n\n```", "choosed_example_idx": [2, 1, 0, 9, 7, 6], "prompt": "Write a function that generates the output from the input.\nFunction: divisao\nInput: dict(x=25, y=5), Output: \"(5, 0)\"\nInput: dict(x=17, y=3), Output: \"(5, 2)\"\nInput: dict(x=10, y=2), Output: \"(5, 0)\"\nInput: dict(x=99, y=9), Output: \"(11, 0)\"\nInput: dict(x=36, y=6), Output: \"(6, 0)\"\nInput: dict(x=20, y=4), Output: \"(5, 0)\"\n\n\n", "id": "a7386c415fd04d4e6f6e93544e72da79ef352ac0_0"}
{"example_str": "examples = [\n    dict(origin_str=\"hello\", index=0),\n    dict(origin_str=\"world\", index=3),\n    dict(origin_str=\"abcdefg\", index=2),\n    dict(origin_str=\"short\", index=4),\n    dict(origin_str=\"verylongstring\", index=5),\n    dict(origin_str=\"a\", index=0),\n    dict(origin_str=\"\", index=0),  # empty string\n    dict(origin_str=\"hello\", index=-1),  # out of bounds\n    dict(origin_str=\"hello\", index=10),  # out of bounds\n    dict(origin_str=\"hello world\", index=5),\n]\nexamples += [\n    dict(origin_str=\"hello\", index=1),\n    dict(origin_str=\"world\", index=2),\n    dict(origin_str=\"example\", index=0),\n    dict(origin_str=\"test\", index=3),\n    dict(origin_str=\"function\", index=4),\n    dict(origin_str=\"replace\", index=6),\n    dict(origin_str=\"character\", index=5),\n    dict(origin_str=\"position\", index=7),\n    dict(origin_str=\"index\", index=2),\n    dict(origin_str=\"string\", index=0)\n]\nexamples += [\n    dict(origin_str=\"hello\", index=1),\n    dict(origin_str=\"world\", index=2),\n    dict(origin_str=\"example\", index=3),\n    dict(origin_str=\"test\", index=0),\n    dict(origin_str=\"function\", index=4),\n    dict(origin_str=\"replace\", index=5),\n    dict(origin_str=\"character\", index=6),\n    dict(origin_str=\"index\", index=2),\n    dict(origin_str=\"python\", index=3),\n    dict(origin_str=\"assistant\", index=5)\n]", "code": "def changeStr(origin_str, index):\n    new_str = ''\n    for i in range(len(origin_str)):\n        if i == index:\n            new_str += '-'\n        else:\n            new_str += origin_str[i]\n    return new_str\n", "func_name": "changeStr", "exec_status": true, "example_inputs": ["\"{'origin_str': 'hello', 'index': 0}\"", "\"{'origin_str': 'world', 'index': 3}\"", "\"{'origin_str': 'abcdefg', 'index': 2}\"", "\"{'origin_str': 'short', 'index': 4}\"", "\"{'origin_str': 'verylongstring', 'index': 5}\"", "\"{'origin_str': 'a', 'index': 0}\"", "\"{'origin_str': '', 'index': 0}\"", "\"{'origin_str': 'hello', 'index': -1}\"", "\"{'origin_str': 'hello', 'index': 10}\"", "\"{'origin_str': 'hello world', 'index': 5}\""], "example_outputs": [{"return": "\"'-ello'\""}, {"return": "\"'wor-d'\""}, {"return": "\"'ab-defg'\""}, {"return": "\"'shor-'\""}, {"return": "\"'veryl-ngstring'\""}, {"return": "\"'-'\""}, {"return": "\"''\""}, {"return": "\"'hello'\""}, {"return": "\"'hello'\""}, {"return": "\"'hello-world'\""}, {"return": "\"'h-llo'\""}, {"return": "\"'wo-ld'\""}, {"return": "\"'-xample'\""}, {"return": "\"'tes-'\""}, {"return": "\"'func-ion'\""}, {"return": "\"'replac-'\""}, {"return": "\"'chara-ter'\""}, {"return": "\"'positio-'\""}, {"return": "\"'in-ex'\""}, {"return": "\"'-tring'\""}, {"return": "\"'h-llo'\""}, {"return": "\"'wo-ld'\""}, {"return": "\"'exa-ple'\""}, {"return": "\"'-est'\""}, {"return": "\"'func-ion'\""}, {"return": "\"'repla-e'\""}, {"return": "\"'charac-er'\""}, {"return": "\"'in-ex'\""}, {"return": "\"'pyt-on'\""}, {"return": "\"'assis-ant'\""}], "parsed_inputs": [[["origin_str", "\"hello\""], ["index", "0"]], [["origin_str", "\"world\""], ["index", "3"]], [["origin_str", "\"abcdefg\""], ["index", "2"]], [["origin_str", "\"short\""], ["index", "4"]], [["origin_str", "\"verylongstring\""], ["index", "5"]], [["origin_str", "\"a\""], ["index", "0"]], [["origin_str", "\"\""], ["index", "0"]], [["origin_str", "\"hello\""], ["index", "-1"]], [["origin_str", "\"hello\""], ["index", "10"]], [["origin_str", "\"hello world\""], ["index", "5"]]], "exec_code": "def changeStr(origin_str, index):\n    new_str = ''\n    for i in range(len(origin_str)):\n        if i == index:\n            new_str += '-'\n        else:\n            new_str += origin_str[i]\n    return new_str\n", "output": "The function is:\n\n```python\ndef changeStr(origin_str, index):\n    new_str = ''\n    for i in range(len(origin_str)):\n        if i == index:\n            new_str += '-'\n        else:\n            new_str += origin_str[i]\n    return new_str\n\n```", "choosed_example_idx": [0, 9, 1, 3, 2, 7, 5], "prompt": "Write a function that generates the output from the input.\nFunction: changeStr\n\nInput: dict(origin_str=\"hello\", index=0), Output: \"'-ello'\"\nInput: dict(origin_str=\"hello world\", index=5), Output: \"'hello-world'\"\nInput: dict(origin_str=\"world\", index=3), Output: \"'wor-d'\"\nInput: dict(origin_str=\"short\", index=4), Output: \"'shor-'\"\nInput: dict(origin_str=\"abcdefg\", index=2), Output: \"'ab-defg'\"\nInput: dict(origin_str=\"hello\", index=-1), Output: \"'hello'\"\nInput: dict(origin_str=\"a\", index=0), Output: \"'-'\"\n\n", "id": "f0c84f1de153e551d2ec17841a0294833889b6f7_0"}
{"example_str": "examples = [\n    dict(ret=[None]*5, cur_ind=0, remainders=[1, 2, 3, 4, 5]),\n    dict(ret=[None]*3, cur_ind=1, remainders=[1, 2, 3]),\n    dict(ret=[None]*7, cur_ind=0, remainders=[1, 2, 3, 4, 5, 6, 7]),\n    dict(ret=[None]*2, cur_ind=0, remainders=[1, 2]),\n    dict(ret=[None]*10, cur_ind=5, remainders=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),\n    dict(ret=[None]*8, cur_ind=3, remainders=[1, 2, 3, 4, 5, 6, 7, 8]),\n    dict(ret=[None]*4, cur_ind=2, remainders=[1, 2, 3, 4]),\n    dict(ret=[None]*6, cur_ind=1, remainders=[1, 2, 3, 4, 5, 6]),\n    dict(ret=[None]*9, cur_ind=4, remainders=[1, 2, 3, 4, 5, 6, 7, 8, 9]),\n    dict(ret=[None]*11, cur_ind=0, remainders=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),\n]\nexamples += [\n    dict(ret=[None, None, None], cur_ind=0, remainders=[1, 2]),\n    dict(ret=[None, None, None, None], cur_ind=0, remainders=[2, 2]),\n    dict(ret=[None, None, None, None, None], cur_ind=0, remainders=[1, 1, 3]),\n    dict(ret=[None, None, None, None, None, None], cur_ind=0, remainders=[1, 2, 3]),\n    dict(ret=[None, None, None, None, None, None, None], cur_ind=0, remainders=[1, 1, 1, 4]),\n    dict(ret=[None, None, None, None, None, None, None, None], cur_ind=0, remainders=[2, 2, 4]),\n    dict(ret=[None, None, None, None, None, None, None, None, None], cur_ind=0, remainders=[3, 3, 3]),\n    dict(ret=[None, None, None, None, None, None, None, None, None, None], cur_ind=0, remainders=[2, 2, 2, 4]),\n    dict(ret=[None, None, None, None, None, None, None, None, None, None, None], cur_ind=0, remainders=[1, 5, 5]),\n    dict(ret=[None, None, None, None, None, None, None, None, None, None, None, None], cur_ind=0, remainders=[3, 3, 3, 3])\n]\nexamples += [\n    dict(ret=[None, None, None, None], cur_ind=0, remainders=[2, 2]),\n    dict(ret=[None, None, None, None, None, None], cur_ind=0, remainders=[3, 3]),\n    dict(ret=[None, None, None, None, None, None, None, None], cur_ind=0, remainders=[4, 4]),\n    dict(ret=[None, None, None, None, None, None, None, None, None, None], cur_ind=0, remainders=[5, 5]),\n    dict(ret=[None, None, None, None, None, None], cur_ind=0, remainders=[1, 1, 1, 1, 1, 1]),\n    dict(ret=[None, None, None, None, None, None, None, None, None, None, None, None], cur_ind=0, remainders=[6, 6]),\n    dict(ret=[None, None, None, None, None, None, None, None, None, None, None, None, None, None], cur_ind=0, remainders=[7, 7]),\n    dict(ret=[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], cur_ind=0, remainders=[8, 8]),\n    dict(ret=[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], cur_ind=0, remainders=[9, 9]),\n    dict(ret=[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], cur_ind=0, remainders=[10, 10])\n]", "code": "def construct(ret, cur_ind, remainders):\n    if cur_ind == len(ret):\n        return True\n    if ret[cur_ind] is not None:\n        return construct(ret, cur_ind + 1, remainders)\n    for candidate in sorted(remainders, reverse=True):\n        if candidate == 1:\n            remainders.remove(1)\n            ret[cur_ind] = 1\n            if construct(ret, cur_ind + 1, remainders):\n                return True\n            ret[cur_ind] = None\n            remainders.append(1)\n        else:\n            if cur_ind + candidate >= len(ret):\n                return False\n            if ret[cur_ind + candidate] is None:\n                remainders.remove(candidate)\n                ret[cur_ind], ret[cur_ind + candidate] = candidate, candidate\n                if construct(ret, cur_ind + 1, remainders):\n                    return True\n                ret[cur_ind], ret[cur_ind + candidate] = None, None\n                remainders.append(candidate)\n", "func_name": "construct", "exec_status": true, "example_inputs": ["\"{'ret': [None, None, None, None, None], 'cur_ind': 0, 'remainders': [1, 2, 3, 4, 5]}\"", "\"{'ret': [None, None, None], 'cur_ind': 1, 'remainders': [1, 2, 3]}\"", "\"{'ret': [None, None, None, None, None, None, None], 'cur_ind': 0, 'remainders': [1, 2, 3, 4, 5, 6, 7]}\"", "\"{'ret': [None, None], 'cur_ind': 0, 'remainders': [1, 2]}\"", "\"{'ret': [None, None, None, None, None, None, None, None, None, None], 'cur_ind': 5, 'remainders': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}\"", "\"{'ret': [None, None, None, None, None, None, None, None], 'cur_ind': 3, 'remainders': [1, 2, 3, 4, 5, 6, 7, 8]}\"", "\"{'ret': [None, None, None, None], 'cur_ind': 2, 'remainders': [1, 2, 3, 4]}\"", "\"{'ret': [None, None, None, None, None, None], 'cur_ind': 1, 'remainders': [1, 2, 3, 4, 5, 6]}\"", "\"{'ret': [None, None, None, None, None, None, None, None, None], 'cur_ind': 4, 'remainders': [1, 2, 3, 4, 5, 6, 7, 8, 9]}\"", "\"{'ret': [None, None, None, None, None, None, None, None, None, None, None], 'cur_ind': 0, 'remainders': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]}\""], "example_outputs": [{"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"True\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"True\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}], "parsed_inputs": [[["ret", "([None] * 5)"], ["cur_ind", "0"], ["remainders", "[1, 2, 3, 4, 5]"]], [["ret", "([None] * 3)"], ["cur_ind", "1"], ["remainders", "[1, 2, 3]"]], [["ret", "([None] * 7)"], ["cur_ind", "0"], ["remainders", "[1, 2, 3, 4, 5, 6, 7]"]], [["ret", "([None] * 2)"], ["cur_ind", "0"], ["remainders", "[1, 2]"]], [["ret", "([None] * 10)"], ["cur_ind", "5"], ["remainders", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"]], [["ret", "([None] * 8)"], ["cur_ind", "3"], ["remainders", "[1, 2, 3, 4, 5, 6, 7, 8]"]], [["ret", "([None] * 4)"], ["cur_ind", "2"], ["remainders", "[1, 2, 3, 4]"]], [["ret", "([None] * 6)"], ["cur_ind", "1"], ["remainders", "[1, 2, 3, 4, 5, 6]"]], [["ret", "([None] * 9)"], ["cur_ind", "4"], ["remainders", "[1, 2, 3, 4, 5, 6, 7, 8, 9]"]], [["ret", "([None] * 11)"], ["cur_ind", "0"], ["remainders", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]"]]], "exec_code": "def construct(ret, cur_ind, remainders):\n    if cur_ind == len(ret):\n        return True\n    if ret[cur_ind] is not None:\n        return construct(ret, cur_ind + 1, remainders)\n    for candidate in sorted(remainders, reverse=True):\n        if candidate == 1:\n            remainders.remove(1)\n            ret[cur_ind] = 1\n            if construct(ret, cur_ind + 1, remainders):\n                return True\n            ret[cur_ind] = None\n            remainders.append(1)\n        else:\n            if cur_ind + candidate >= len(ret):\n                return False\n            if ret[cur_ind + candidate] is None:\n                remainders.remove(candidate)\n                ret[cur_ind], ret[cur_ind + candidate] = candidate, candidate\n                if construct(ret, cur_ind + 1, remainders):\n                    return True\n                ret[cur_ind], ret[cur_ind + candidate] = None, None\n                remainders.append(candidate)\n", "output": "The function is:\n\n```python\ndef construct(ret, cur_ind, remainders):\n    if cur_ind == len(ret):\n        return True\n    if ret[cur_ind] is not None:\n        return construct(ret, cur_ind + 1, remainders)\n    for candidate in sorted(remainders, reverse=True):\n        if candidate == 1:\n            remainders.remove(1)\n            ret[cur_ind] = 1\n            if construct(ret, cur_ind + 1, remainders):\n                return True\n            ret[cur_ind] = None\n            remainders.append(1)\n        else:\n            if cur_ind + candidate >= len(ret):\n                return False\n            if ret[cur_ind + candidate] is None:\n                remainders.remove(candidate)\n                ret[cur_ind], ret[cur_ind + candidate] = candidate, candidate\n                if construct(ret, cur_ind + 1, remainders):\n                    return True\n                ret[cur_ind], ret[cur_ind + candidate] = None, None\n                remainders.append(candidate)\n\n```", "choosed_example_idx": [1, 5, 8, 6, 7, 3, 0], "prompt": "Function: construct\nWrite a function that generates the output from the input.\n\n\nInput: dict(ret=([None] * 3), cur_ind=1, remainders=[1, 2, 3]), Output: \"False\"\nInput: dict(ret=([None] * 8), cur_ind=3, remainders=[1, 2, 3, 4, 5, 6, 7, 8]), Output: \"False\"\nInput: dict(ret=([None] * 9), cur_ind=4, remainders=[1, 2, 3, 4, 5, 6, 7, 8, 9]), Output: \"False\"\nInput: dict(ret=([None] * 4), cur_ind=2, remainders=[1, 2, 3, 4]), Output: \"False\"\nInput: dict(ret=([None] * 6), cur_ind=1, remainders=[1, 2, 3, 4, 5, 6]), Output: \"False\"\nInput: dict(ret=([None] * 2), cur_ind=0, remainders=[1, 2]), Output: \"False\"\nInput: dict(ret=([None] * 5), cur_ind=0, remainders=[1, 2, 3, 4, 5]), Output: \"False\"\n\n\n", "id": "860ebe5d673668236f03f5fe20b5b2d8fc30c192_0"}
{"example_str": "examples = [\n    dict(a=2, b=3),\n    dict(a=4, b=-1),\n    dict(a=0, b=0),\n    dict(a=10, b=5),\n    dict(a=-2, b=4),\n    dict(a=3.5, b=2.8),\n    dict(a=1, b=1),\n    dict(a=-5, b=-3),\n    dict(a=7, b=0),\n    dict(a=2.2, b=-1.1)\n]\nexamples += [\n    dict(a=5, b=3),                # Example with integer values\n    dict(a=10.5, b=2.3),           # Example with float values\n    dict(a=-1, b=-1),              # Example with negative integers\n    dict(a=\"Hello \", b=\"World\"),   # Example with strings\n    dict(a=[1, 2], b=[3, 4]),      # Example with lists\n    dict(a=0, b=0),                # Example with zero values\n    dict(a=100000, b=200000),      # Example with large integers\n    dict(a=-10.5, b=20.1),         # Example with negative and positive floats\n    dict(a=\"123\", b=\"456\"),        # Example with numeric strings\n    dict(a=0.1, b=0.2)             # Example with small float values\n]\nexamples += [\n    dict(a=1, b=2),\n    dict(a=10, b=20),\n    dict(a=0.5, b=0.3),\n    dict(a=-1, b=-2),\n    dict(a=100, b=200),\n    dict(a=3.14, b=2.71),\n    dict(a=-5, b=5),\n    dict(a=0, b=0),\n    dict(a=999, b=1),\n    dict(a=50.5, b=49.5)\n]", "code": "def add(a, b):\n    temp = a + b\n    sum = temp\n    return sum\n", "func_name": "add", "exec_status": true, "example_inputs": ["\"{'a': 2, 'b': 3}\"", "\"{'a': 4, 'b': -1}\"", "\"{'a': 0, 'b': 0}\"", "\"{'a': 10, 'b': 5}\"", "\"{'a': -2, 'b': 4}\"", "\"{'a': 3.5, 'b': 2.8}\"", "\"{'a': 1, 'b': 1}\"", "\"{'a': -5, 'b': -3}\"", "\"{'a': 7, 'b': 0}\"", "\"{'a': 2.2, 'b': -1.1}\""], "example_outputs": [{"return": "\"5\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"15\""}, {"return": "\"2\""}, {"return": "\"6.3\""}, {"return": "\"2\""}, {"return": "\"-8\""}, {"return": "\"7\""}, {"return": "\"1.1\""}, {"return": "\"8\""}, {"return": "\"12.8\""}, {"return": "\"-2\""}, {"return": "\"'Hello World'\""}, {"return": "\"[1, 2, 3, 4]\""}, {"return": "\"0\""}, {"return": "\"300000\""}, {"return": "\"9.600000000000001\""}, {"return": "\"'123456'\""}, {"return": "\"0.30000000000000004\""}, {"return": "\"3\""}, {"return": "\"30\""}, {"return": "\"0.8\""}, {"return": "\"-3\""}, {"return": "\"300\""}, {"return": "\"5.85\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1000\""}, {"return": "\"100.0\""}], "parsed_inputs": [[["a", "2"], ["b", "3"]], [["a", "4"], ["b", "-1"]], [["a", "0"], ["b", "0"]], [["a", "10"], ["b", "5"]], [["a", "-2"], ["b", "4"]], [["a", "3.5"], ["b", "2.8"]], [["a", "1"], ["b", "1"]], [["a", "-5"], ["b", "-3"]], [["a", "7"], ["b", "0"]], [["a", "2.2"], ["b", "-1.1"]]], "exec_code": "def add(a, b):\n    temp = a + b\n    sum = temp\n    return sum\n", "output": "The function is:\n\n```python\ndef add(a, b):\n    temp = a + b\n    sum = temp\n    return sum\n\n```", "choosed_example_idx": [0, 1, 4, 7, 5, 2, 6], "prompt": "Write a function that generates the output from the input.\nFunction: add\nInput: dict(a=2, b=3), Output: \"5\"\nInput: dict(a=4, b=-1), Output: \"3\"\nInput: dict(a=-2, b=4), Output: \"2\"\nInput: dict(a=-5, b=-3), Output: \"-8\"\nInput: dict(a=3.5, b=2.8), Output: \"6.3\"\nInput: dict(a=0, b=0), Output: \"0\"\nInput: dict(a=1, b=1), Output: \"2\"\n\n", "id": "37fc77c71080ea2ac2981e24c0fa162579b56541_0"}
{"example_str": "examples = [\n    dict(url='https://www.example.com'),\n    dict(url='http://example.com'),\n    dict(url='https://subdomain.example.co.uk'),\n    dict(url='http://www.example.io'),\n    dict(url='https://example.edu'),\n    dict(url='http://example.net'),\n    dict(url='https://www.example.org'),\n    dict(url='http://example.biz'),\n    dict(url='https://example.info'),\n    dict(url='http://example.tv'),\n]\nexamples += [\n    dict(url=\"https://www.google.com\"),\n    dict(url=\"http://www.example.com\"),\n    dict(url=\"https://github.com\"),\n    dict(url=\"http://www.yahoo.com/search\"),\n    dict(url=\"https://en.wikipedia.org/wiki/Main_Page\"),\n    dict(url=\"ftp://www.ftpserver.com/files\"),\n    dict(url=\"https://subdomain.example.com\"),\n    dict(url=\"http://localhost:8000\"),\n    dict(url=\"https://192.168.1.1\"),\n    dict(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n]\nexamples += [\n    dict(url=\"http://www.google.com\"),\n    dict(url=\"https://www.example.com\"),\n    dict(url=\"http://facebook.com\"),\n    dict(url=\"https://github.com\"),\n    dict(url=\"http://www.yahoo.com\"),\n    dict(url=\"https://stackoverflow.com\"),\n    dict(url=\"http://www.bing.com\"),\n    dict(url=\"https://www.reddit.com\"),\n    dict(url=\"http://medium.com\"),\n    dict(url=\"https://www.linkedin.com\")\n]", "code": "def _get_site_name(url):\n    url = url.split('//')[1].split('.')\n    if url[0] == 'www':\n        url = url[1]\n    else:\n        url = url[0]\n    return url\n", "func_name": "_get_site_name", "exec_status": true, "example_inputs": ["\"{'url': 'https://www.example.com'}\"", "\"{'url': 'http://example.com'}\"", "\"{'url': 'https://subdomain.example.co.uk'}\"", "\"{'url': 'http://www.example.io'}\"", "\"{'url': 'https://example.edu'}\"", "\"{'url': 'http://example.net'}\"", "\"{'url': 'https://www.example.org'}\"", "\"{'url': 'http://example.biz'}\"", "\"{'url': 'https://example.info'}\"", "\"{'url': 'http://example.tv'}\""], "example_outputs": [{"return": "\"'example'\""}, {"return": "\"'example'\""}, {"return": "\"'subdomain'\""}, {"return": "\"'example'\""}, {"return": "\"'example'\""}, {"return": "\"'example'\""}, {"return": "\"'example'\""}, {"return": "\"'example'\""}, {"return": "\"'example'\""}, {"return": "\"'example'\""}, {"return": "\"'google'\""}, {"return": "\"'example'\""}, {"return": "\"'github'\""}, {"return": "\"'yahoo'\""}, {"return": "\"'en'\""}, {"return": "\"'ftpserver'\""}, {"return": "\"'subdomain'\""}, {"return": "\"'localhost:8000'\""}, {"return": "\"'192'\""}, {"return": "\"'youtube'\""}, {"return": "\"'google'\""}, {"return": "\"'example'\""}, {"return": "\"'facebook'\""}, {"return": "\"'github'\""}, {"return": "\"'yahoo'\""}, {"return": "\"'stackoverflow'\""}, {"return": "\"'bing'\""}, {"return": "\"'reddit'\""}, {"return": "\"'medium'\""}, {"return": "\"'linkedin'\""}], "parsed_inputs": [[["url", "\"https://www.example.com\""]], [["url", "\"http://example.com\""]], [["url", "\"https://subdomain.example.co.uk\""]], [["url", "\"http://www.example.io\""]], [["url", "\"https://example.edu\""]], [["url", "\"http://example.net\""]], [["url", "\"https://www.example.org\""]], [["url", "\"http://example.biz\""]], [["url", "\"https://example.info\""]], [["url", "\"http://example.tv\""]]], "exec_code": "def _get_site_name(url):\n    url = url.split('//')[1].split('.')\n    if url[0] == 'www':\n        url = url[1]\n    else:\n        url = url[0]\n    return url\n", "output": "The function is:\n\n```python\ndef _get_site_name(url):\n    url = url.split('//')[1].split('.')\n    if url[0] == 'www':\n        url = url[1]\n    else:\n        url = url[0]\n    return url\n\n```", "choosed_example_idx": [0, 1, 4, 9, 5, 3, 8, 7], "prompt": "Input: dict(url=\"https://www.example.com\"), Output: \"'example'\"\nInput: dict(url=\"http://example.com\"), Output: \"'example'\"\nInput: dict(url=\"https://example.edu\"), Output: \"'example'\"\nInput: dict(url=\"http://example.tv\"), Output: \"'example'\"\nInput: dict(url=\"http://example.net\"), Output: \"'example'\"\nInput: dict(url=\"http://www.example.io\"), Output: \"'example'\"\nInput: dict(url=\"https://example.info\"), Output: \"'example'\"\nInput: dict(url=\"http://example.biz\"), Output: \"'example'\"\n\nWrite a function that generates the output from the input.\n\n\nFunction: _get_site_name\n\n", "id": "ef1005018864da1f14ea33af7f82611653bf39a9_0"}
{"example_str": "examples = [\n    dict(min_value=0, max_value=10, num_steps=5),\n    dict(min_value=-5, max_value=5, num_steps=10),\n    dict(min_value=10, max_value=20, num_steps=3),\n    dict(min_value=0, max_value=1, num_steps=10),\n    dict(min_value=-10, max_value=0, num_steps=5),\n    dict(min_value=5, max_value=15, num_steps=4),\n    dict(min_value=0, max_value=100, num_steps=20),\n    dict(min_value=-20, max_value=20, num_steps=10),\n    dict(min_value=1, max_value=2, num_steps=5),\n    dict(min_value=-50, max_value=50, num_steps=10),\n]\nexamples += [\n    dict(min_value=0, max_value=10, num_steps=5),\n    dict(min_value=1, max_value=2, num_steps=10),\n    dict(min_value=-10, max_value=10, num_steps=4),\n    dict(min_value=100, max_value=200, num_steps=20),\n    dict(min_value=0, max_value=1, num_steps=3),\n    dict(min_value=-50, max_value=50, num_steps=7),\n    dict(min_value=5, max_value=15, num_steps=1),\n    dict(min_value=0, max_value=100, num_steps=50),\n    dict(min_value=-100, max_value=0, num_steps=25),\n    dict(min_value=0.5, max_value=5.5, num_steps=10)\n]\nexamples += [\n    dict(min_value=0, max_value=10, num_steps=5),\n    dict(min_value=10, max_value=100, num_steps=10),\n    dict(min_value=-10, max_value=10, num_steps=4),\n    dict(min_value=1, max_value=2, num_steps=10),\n    dict(min_value=100, max_value=200, num_steps=20),\n    dict(min_value=-50, max_value=50, num_steps=5),\n    dict(min_value=0, max_value=1, num_steps=3),\n    dict(min_value=5, max_value=50, num_steps=9),\n    dict(min_value=0, max_value=100, num_steps=25),\n    dict(min_value=-100, max_value=0, num_steps=10)\n]", "code": "def make_steps(min_value, max_value, num_steps):\n    assert min_value < max_value\n    num_steps = int(num_steps)\n    assert num_steps > 0\n    interval = max_value - min_value\n    step_size = float(interval) / num_steps\n    steps = [(min_value + s * step_size) for s in range(num_steps)]\n    assert len(steps) == num_steps\n    return steps\n", "func_name": "make_steps", "exec_status": true, "example_inputs": ["\"{'min_value': 0, 'max_value': 10, 'num_steps': 5}\"", "\"{'min_value': -5, 'max_value': 5, 'num_steps': 10}\"", "\"{'min_value': 10, 'max_value': 20, 'num_steps': 3}\"", "\"{'min_value': 0, 'max_value': 1, 'num_steps': 10}\"", "\"{'min_value': -10, 'max_value': 0, 'num_steps': 5}\"", "\"{'min_value': 5, 'max_value': 15, 'num_steps': 4}\"", "\"{'min_value': 0, 'max_value': 100, 'num_steps': 20}\"", "\"{'min_value': -20, 'max_value': 20, 'num_steps': 10}\"", "\"{'min_value': 1, 'max_value': 2, 'num_steps': 5}\"", "\"{'min_value': -50, 'max_value': 50, 'num_steps': 10}\""], "example_outputs": [{"return": "\"[0.0, 2.0, 4.0, 6.0, 8.0]\""}, {"return": "\"[-5.0, -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0]\""}, {"return": "\"[10.0, 13.333333333333334, 16.666666666666668]\""}, {"return": "\"[0.0, 0.1, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9]\""}, {"return": "\"[-10.0, -8.0, -6.0, -4.0, -2.0]\""}, {"return": "\"[5.0, 7.5, 10.0, 12.5]\""}, {"return": "\"[0.0, 5.0, 10.0, 15.0, 20.0, 25.0, 30.0, 35.0, 40.0, 45.0, 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0, 85.0, 90.0, 95.0]\""}, {"return": "\"[-20.0, -16.0, -12.0, -8.0, -4.0, 0.0, 4.0, 8.0, 12.0, 16.0]\""}, {"return": "\"[1.0, 1.2, 1.4, 1.6, 1.8]\""}, {"return": "\"[-50.0, -40.0, -30.0, -20.0, -10.0, 0.0, 10.0, 20.0, 30.0, 40.0]\""}, {"return": "\"[0.0, 2.0, 4.0, 6.0, 8.0]\""}, {"return": "\"[1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7000000000000002, 1.8, 1.9]\""}, {"return": "\"[-10.0, -5.0, 0.0, 5.0]\""}, {"return": "\"[100.0, 105.0, 110.0, 115.0, 120.0, 125.0, 130.0, 135.0, 140.0, 145.0, 150.0, 155.0, 160.0, 165.0, 170.0, 175.0, 180.0, 185.0, 190.0, 195.0]\""}, {"return": "\"[0.0, 0.3333333333333333, 0.6666666666666666]\""}, {"return": "\"[-50.0, -35.714285714285715, -21.428571428571427, -7.142857142857139, 7.142857142857146, 21.42857142857143, 35.71428571428572]\""}, {"return": "\"[5.0]\""}, {"return": "\"[0.0, 2.0, 4.0, 6.0, 8.0, 10.0, 12.0, 14.0, 16.0, 18.0, 20.0, 22.0, 24.0, 26.0, 28.0, 30.0, 32.0, 34.0, 36.0, 38.0, 40.0, 42.0, 44.0, 46.0, 48.0, 50.0, 52.0, 54.0, 56.0, 58.0, 60.0, 62.0, 64.0, 66.0, 68.0, 70.0, 72.0, 74.0, 76.0, 78.0, 80.0, 82.0, 84.0, 86.0, 88.0, 90.0, 92.0, 94.0, 96.0, 98.0]\""}, {"return": "\"[-100.0, -96.0, -92.0, -88.0, -84.0, -80.0, -76.0, -72.0, -68.0, -64.0, -60.0, -56.0, -52.0, -48.0, -44.0, -40.0, -36.0, -32.0, -28.0, -24.0, -20.0, -16.0, -12.0, -8.0, -4.0]\""}, {"return": "\"[0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0]\""}, {"return": "\"[0.0, 2.0, 4.0, 6.0, 8.0]\""}, {"return": "\"[10.0, 19.0, 28.0, 37.0, 46.0, 55.0, 64.0, 73.0, 82.0, 91.0]\""}, {"return": "\"[-10.0, -5.0, 0.0, 5.0]\""}, {"return": "\"[1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7000000000000002, 1.8, 1.9]\""}, {"return": "\"[100.0, 105.0, 110.0, 115.0, 120.0, 125.0, 130.0, 135.0, 140.0, 145.0, 150.0, 155.0, 160.0, 165.0, 170.0, 175.0, 180.0, 185.0, 190.0, 195.0]\""}, {"return": "\"[-50.0, -30.0, -10.0, 10.0, 30.0]\""}, {"return": "\"[0.0, 0.3333333333333333, 0.6666666666666666]\""}, {"return": "\"[5.0, 10.0, 15.0, 20.0, 25.0, 30.0, 35.0, 40.0, 45.0]\""}, {"return": "\"[0.0, 4.0, 8.0, 12.0, 16.0, 20.0, 24.0, 28.0, 32.0, 36.0, 40.0, 44.0, 48.0, 52.0, 56.0, 60.0, 64.0, 68.0, 72.0, 76.0, 80.0, 84.0, 88.0, 92.0, 96.0]\""}, {"return": "\"[-100.0, -90.0, -80.0, -70.0, -60.0, -50.0, -40.0, -30.0, -20.0, -10.0]\""}], "parsed_inputs": [[["min_value", "0"], ["max_value", "10"], ["num_steps", "5"]], [["min_value", "-5"], ["max_value", "5"], ["num_steps", "10"]], [["min_value", "10"], ["max_value", "20"], ["num_steps", "3"]], [["min_value", "0"], ["max_value", "1"], ["num_steps", "10"]], [["min_value", "-10"], ["max_value", "0"], ["num_steps", "5"]], [["min_value", "5"], ["max_value", "15"], ["num_steps", "4"]], [["min_value", "0"], ["max_value", "100"], ["num_steps", "20"]], [["min_value", "-20"], ["max_value", "20"], ["num_steps", "10"]], [["min_value", "1"], ["max_value", "2"], ["num_steps", "5"]], [["min_value", "-50"], ["max_value", "50"], ["num_steps", "10"]]], "exec_code": "def make_steps(min_value, max_value, num_steps):\n    assert min_value < max_value\n    num_steps = int(num_steps)\n    assert num_steps > 0\n    interval = max_value - min_value\n    step_size = float(interval) / num_steps\n    steps = [(min_value + s * step_size) for s in range(num_steps)]\n    assert len(steps) == num_steps\n    return steps\n", "output": "The function is:\n\n```python\ndef make_steps(min_value, max_value, num_steps):\n    assert min_value < max_value\n    num_steps = int(num_steps)\n    assert num_steps > 0\n    interval = max_value - min_value\n    step_size = float(interval) / num_steps\n    steps = [(min_value + s * step_size) for s in range(num_steps)]\n    assert len(steps) == num_steps\n    return steps\n\n```", "choosed_example_idx": [7, 3, 8, 1, 0, 4, 5, 9], "prompt": "Function: make_steps\nWrite a function that generates the output from the input.\nInput: dict(min_value=-20, max_value=20, num_steps=10), Output: \"[-20.0, -16.0, -12.0, -8.0, -4.0, 0.0, 4.0, 8.0, 12.0, 16.0]\"\nInput: dict(min_value=0, max_value=1, num_steps=10), Output: \"[0.0, 0.1, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9]\"\nInput: dict(min_value=1, max_value=2, num_steps=5), Output: \"[1.0, 1.2, 1.4, 1.6, 1.8]\"\nInput: dict(min_value=-5, max_value=5, num_steps=10), Output: \"[-5.0, -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0]\"\nInput: dict(min_value=0, max_value=10, num_steps=5), Output: \"[0.0, 2.0, 4.0, 6.0, 8.0]\"\nInput: dict(min_value=-10, max_value=0, num_steps=5), Output: \"[-10.0, -8.0, -6.0, -4.0, -2.0]\"\nInput: dict(min_value=5, max_value=15, num_steps=4), Output: \"[5.0, 7.5, 10.0, 12.5]\"\nInput: dict(min_value=-50, max_value=50, num_steps=10), Output: \"[-50.0, -40.0, -30.0, -20.0, -10.0, 0.0, 10.0, 20.0, 30.0, 40.0]\"\n\n", "id": "83785a6647c9712a113d871956b58e0dcbf20ccd_0"}
{"example_str": "examples = [\n    dict(letter='a', word='apple'),\n    dict(letter='b', word='banana'),\n    dict(letter='c', word='cherry'),\n    dict(letter='d', word='date'),\n    dict(letter='e', word='elderberry'),\n    dict(letter='f', word='fig'),\n    dict(letter='g', word='grape'),\n    dict(letter='h', word='honeydew'),\n    dict(letter='i', word='ice cream'),\n    dict(letter='j', word='jackfruit'),\n]\nexamples += [\n    dict(letter='a', word='apple'),\n    dict(letter='b', word='banana'),\n    dict(letter='c', word='chocolate'),\n    dict(letter='d', word='doodle'),\n    dict(letter='e', word='elephant'),\n    dict(letter='f', word='fancy'),\n    dict(letter='g', word='grape'),\n    dict(letter='h', word='house'),\n    dict(letter='i', word='imagine'),\n    dict(letter='j', word='jungle')\n]", "code": "def remove_letter(letter, word):\n    without_letter = ''\n    for c in word:\n        if c not in word:\n            without_letter += c\n    return without_letter\n", "func_name": "remove_letter", "exec_status": true, "example_inputs": ["\"{'letter': 'a', 'word': 'apple'}\"", "\"{'letter': 'b', 'word': 'banana'}\"", "\"{'letter': 'c', 'word': 'cherry'}\"", "\"{'letter': 'd', 'word': 'date'}\"", "\"{'letter': 'e', 'word': 'elderberry'}\"", "\"{'letter': 'f', 'word': 'fig'}\"", "\"{'letter': 'g', 'word': 'grape'}\"", "\"{'letter': 'h', 'word': 'honeydew'}\"", "\"{'letter': 'i', 'word': 'ice cream'}\"", "\"{'letter': 'j', 'word': 'jackfruit'}\""], "example_outputs": [{"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"''\""}], "parsed_inputs": [[["letter", "\"a\""], ["word", "\"apple\""]], [["letter", "\"b\""], ["word", "\"banana\""]], [["letter", "\"c\""], ["word", "\"cherry\""]], [["letter", "\"d\""], ["word", "\"date\""]], [["letter", "\"e\""], ["word", "\"elderberry\""]], [["letter", "\"f\""], ["word", "\"fig\""]], [["letter", "\"g\""], ["word", "\"grape\""]], [["letter", "\"h\""], ["word", "\"honeydew\""]], [["letter", "\"i\""], ["word", "\"ice cream\""]], [["letter", "\"j\""], ["word", "\"jackfruit\""]]], "exec_code": "def remove_letter(letter, word):\n    without_letter = ''\n    for c in word:\n        if c not in word:\n            without_letter += c\n    return without_letter\n", "output": "The function is:\n\n```python\ndef remove_letter(letter, word):\n    without_letter = ''\n    for c in word:\n        if c not in word:\n            without_letter += c\n    return without_letter\n\n```", "choosed_example_idx": [0, 9, 3, 2, 7, 4, 5, 6, 1], "prompt": "Input: dict(letter=\"a\", word=\"apple\"), Output: \"''\"\nInput: dict(letter=\"j\", word=\"jackfruit\"), Output: \"''\"\nInput: dict(letter=\"d\", word=\"date\"), Output: \"''\"\nInput: dict(letter=\"c\", word=\"cherry\"), Output: \"''\"\nInput: dict(letter=\"h\", word=\"honeydew\"), Output: \"''\"\nInput: dict(letter=\"e\", word=\"elderberry\"), Output: \"''\"\nInput: dict(letter=\"f\", word=\"fig\"), Output: \"''\"\nInput: dict(letter=\"g\", word=\"grape\"), Output: \"''\"\nInput: dict(letter=\"b\", word=\"banana\"), Output: \"''\"\n\nWrite a function that generates the output from the input.\nFunction: remove_letter\n", "id": "fe099b453ef8bf5fb4b39f44ae7fd1aa5660fa7c_0"}
{"example_str": "examples = [\n    dict(pt=15000),\n    dict(pt=25000),\n    dict(pt=60000),\n    dict(pt=120000),\n    dict(pt=180000),\n    dict(pt=19999),\n    dict(pt=20001),\n    dict(pt=49999),\n    dict(pt=50001),\n    dict(pt=99999)\n]\nexamples += [\n    dict(pt=15000),   # Bin 0\n    dict(pt=20000),   # Bin 1\n    dict(pt=45000),   # Bin 1\n    dict(pt=50000),   # Bin 2\n    dict(pt=75000),   # Bin 2\n    dict(pt=100000),  # Bin 3\n    dict(pt=120000),  # Bin 3\n    dict(pt=19999),   # Bin 0\n    dict(pt=49999),   # Bin 1\n    dict(pt=99999)    # Bin 2\n]\nexamples += [\n    dict(pt=10000),   # Expected bin: 0\n    dict(pt=20000),   # Expected bin: 1\n    dict(pt=30000),   # Expected bin: 1\n    dict(pt=50000),   # Expected bin: 2\n    dict(pt=70000),   # Expected bin: 2\n    dict(pt=100000),  # Expected bin: 3\n    dict(pt=150000),  # Expected bin: 3\n    dict(pt=0),       # Expected bin: 0\n    dict(pt=49999),   # Expected bin: 1\n    dict(pt=99999)    # Expected bin: 2\n]", "code": "def PtBin(pt):\n    bin = 0 * (pt < 20000) + 1 * (pt >= 20000 and pt < 50000) + 2 * (pt >= \n        50000 and pt < 100000) + 3 * (pt > 100000)\n    return bin\n", "func_name": "PtBin", "exec_status": true, "example_inputs": ["\"{'pt': 15000}\"", "\"{'pt': 25000}\"", "\"{'pt': 60000}\"", "\"{'pt': 120000}\"", "\"{'pt': 180000}\"", "\"{'pt': 19999}\"", "\"{'pt': 20001}\"", "\"{'pt': 49999}\"", "\"{'pt': 50001}\"", "\"{'pt': 99999}\""], "example_outputs": [{"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"2\""}], "parsed_inputs": [[["pt", "15000"]], [["pt", "25000"]], [["pt", "60000"]], [["pt", "120000"]], [["pt", "180000"]], [["pt", "19999"]], [["pt", "20001"]], [["pt", "49999"]], [["pt", "50001"]], [["pt", "99999"]]], "exec_code": "def PtBin(pt):\n    bin = 0 * (pt < 20000) + 1 * (pt >= 20000 and pt < 50000) + 2 * (pt >= \n        50000 and pt < 100000) + 3 * (pt > 100000)\n    return bin\n", "output": "The function is:\n\n```python\ndef PtBin(pt):\n    bin = 0 * (pt < 20000) + 1 * (pt >= 20000 and pt < 50000) + 2 * (pt >= \n        50000 and pt < 100000) + 3 * (pt > 100000)\n    return bin\n\n```", "choosed_example_idx": [2, 6, 8, 7, 0, 1, 9], "prompt": "Write a function that generates the output from the input.\nFunction: PtBin\nInput: dict(pt=60000), Output: \"2\"\nInput: dict(pt=20001), Output: \"1\"\nInput: dict(pt=50001), Output: \"2\"\nInput: dict(pt=49999), Output: \"1\"\nInput: dict(pt=15000), Output: \"0\"\nInput: dict(pt=25000), Output: \"1\"\nInput: dict(pt=99999), Output: \"2\"\n\n", "id": "1033f191a1325f608775df90ee07fee15c35320a_0"}
{"example_str": "examples = [\n    dict(experiments=['exp1', 'exp2', 'exp3', 'exp4'], wells=2, prefix='test'),\n    dict(experiments=['a', 'b', 'c', 'd', 'e', 'f'], wells=3, prefix='abc'),\n    dict(experiments=['video1', 'video2', 'video3'], wells=1, prefix='vid'),\n    dict(experiments=['exp1', 'exp2', 'exp3', 'exp4', 'exp5', 'exp6'], wells=2, prefix='exp'),\n    dict(experiments=['x', 'y', 'z'], wells=1, prefix='xyz'),\n    dict(experiments=['file1', 'file2', 'file3', 'file4', 'file5'], wells=5, prefix='file'),\n    dict(experiments=['sample1', 'sample2', 'sample3', 'sample4'], wells=2, prefix='sample'),\n    dict(experiments=['data1', 'data2', 'data3', 'data4', 'data5', 'data6', 'data7'], wells=3, prefix='data'),\n    dict(experiments=['run1', 'run2', 'run3'], wells=1, prefix='run'),\n    dict(experiments=['trial1', 'trial2', 'trial3', 'trial4', 'trial5'], wells=5, prefix='trial'),\n]\nexamples += [\n    dict(experiments=[\"Exp1\", \"Exp2\", \"Exp3\", \"Exp4\"], wells=2, prefix=\"Group\"),\n    dict(experiments=[\"Test1\", \"Test2\", \"Test3\"], wells=3, prefix=\"Batch\"),\n    dict(experiments=[\"Sample1\", \"Sample2\", \"Sample3\", \"Sample4\", \"Sample5\"], wells=5, prefix=\"Set\"),\n    dict(experiments=[\"Lab1\", \"Lab2\"], wells=1, prefix=\"Experiment\"),\n    dict(experiments=[\"Trial1\", \"Trial2\", \"Trial3\", \"Trial4\", \"Trial5\", \"Trial6\"], wells=3, prefix=\"Phase\"),\n    dict(experiments=[\"Case1\", \"Case2\", \"Case3\", \"Case4\", \"Case5\", \"Case6\", \"Case7\"], wells=4, prefix=\"Scenario\"),\n    dict(experiments=[\"Observation1\", \"Observation2\", \"Observation3\", \"Observation4\", \"Observation5\", \"Observation6\", \"Observation7\", \"Observation8\"], wells=4, prefix=\"Obs\"),\n    dict(experiments=[\"Data1\", \"Data2\", \"Data3\", \"Data4\", \"Data5\", \"Data6\", \"Data7\", \"Data8\", \"Data9\", \"Data10\"], wells=5, prefix=\"DataGroup\"),\n    dict(experiments=[\"Project1\", \"Project2\", \"Project3\", \"Project4\", \"Project5\", \"Project6\", \"Project7\", \"Project8\", \"Project9\", \"Project10\", \"Project11\", \"Project12\"], wells=6, prefix=\"ProjectSet\"),\n    dict(experiments=[\"Experiment1\", \"Experiment2\", \"Experiment3\", \"Experiment4\", \"Experiment5\", \"Experiment6\", \"Experiment7\", \"Experiment8\", \"Experiment9\", \"Experiment10\", \"Experiment11\", \"Experiment12\", \"Experiment13\", \"Experiment14\", \"Experiment15\"], wells=5, prefix=\"ExpSet\")\n]\nexamples += [\n    dict(experiments=['exp1', 'exp2', 'exp3', 'exp4'], wells=2, prefix='group'),\n    dict(experiments=['test1', 'test2', 'test3'], wells=3, prefix='batch'),\n    dict(experiments=['sample1', 'sample2', 'sample3', 'sample4', 'sample5'], wells=5, prefix='set'),\n    dict(experiments=['alpha', 'beta', 'gamma', 'delta', 'epsilon'], wells=2, prefix='type'),\n    dict(experiments=['one', 'two', 'three', 'four', 'five', 'six'], wells=3, prefix='part'),\n    dict(experiments=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], wells=4, prefix='section'),\n    dict(experiments=['red', 'blue', 'green', 'yellow', 'black', 'white'], wells=2, prefix='color'),\n    dict(experiments=['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'], wells=4, prefix='month'),\n    dict(experiments=['earth', 'water', 'fire', 'air'], wells=4, prefix='element'),\n    dict(experiments=['apple', 'banana', 'cherry', 'date', 'elderberry'], wells=1, prefix='fruit')\n]", "code": "def binning(experiments, wells=4, prefix='test'):\n    \"\"\"Split set of input experiments into groups.\n\n    Parameters\n    ----------\n    experiments : list of str\n        List of experiment names.\n    wells : int\n        Number of groups to divide experiments into.\n\n    Returns\n    -------\n    slices : int\n        Number of experiments per group.\n    bins : dict of list of str\n        Dictionary, keys corresponding to group names, and elements containing\n        lists of experiments in each group.\n    bin_names : list of str\n        List of group names\n\n    \"\"\"\n    total_videos = len(experiments)\n    bins = {}\n    slices = int(total_videos / wells)\n    bin_names = []\n    for num in range(0, wells):\n        slice1 = num * slices\n        slice2 = (num + 1) * slices\n        pref = '{}_W{}'.format(prefix, num)\n        bins[pref] = experiments[slice1:slice2]\n        bin_names.append(pref)\n    return slices, bins, bin_names\n", "func_name": "binning", "exec_status": true, "example_inputs": ["\"{'experiments': ['exp1', 'exp2', 'exp3', 'exp4'], 'wells': 2, 'prefix': 'test'}\"", "\"{'experiments': ['a', 'b', 'c', 'd', 'e', 'f'], 'wells': 3, 'prefix': 'abc'}\"", "\"{'experiments': ['video1', 'video2', 'video3'], 'wells': 1, 'prefix': 'vid'}\"", "\"{'experiments': ['exp1', 'exp2', 'exp3', 'exp4', 'exp5', 'exp6'], 'wells': 2, 'prefix': 'exp'}\"", "\"{'experiments': ['x', 'y', 'z'], 'wells': 1, 'prefix': 'xyz'}\"", "\"{'experiments': ['file1', 'file2', 'file3', 'file4', 'file5'], 'wells': 5, 'prefix': 'file'}\"", "\"{'experiments': ['sample1', 'sample2', 'sample3', 'sample4'], 'wells': 2, 'prefix': 'sample'}\"", "\"{'experiments': ['data1', 'data2', 'data3', 'data4', 'data5', 'data6', 'data7'], 'wells': 3, 'prefix': 'data'}\"", "\"{'experiments': ['run1', 'run2', 'run3'], 'wells': 1, 'prefix': 'run'}\"", "\"{'experiments': ['trial1', 'trial2', 'trial3', 'trial4', 'trial5'], 'wells': 5, 'prefix': 'trial'}\""], "example_outputs": [{"return": "\"(2, {'test_W0': ['exp1', 'exp2'], 'test_W1': ['exp3', 'exp4']}, ['test_W0', 'test_W1'])\""}, {"return": "\"(2, {'abc_W0': ['a', 'b'], 'abc_W1': ['c', 'd'], 'abc_W2': ['e', 'f']}, ['abc_W0', 'abc_W1', 'abc_W2'])\""}, {"return": "\"(3, {'vid_W0': ['video1', 'video2', 'video3']}, ['vid_W0'])\""}, {"return": "\"(3, {'exp_W0': ['exp1', 'exp2', 'exp3'], 'exp_W1': ['exp4', 'exp5', 'exp6']}, ['exp_W0', 'exp_W1'])\""}, {"return": "\"(3, {'xyz_W0': ['x', 'y', 'z']}, ['xyz_W0'])\""}, {"return": "\"(1, {'file_W0': ['file1'], 'file_W1': ['file2'], 'file_W2': ['file3'], 'file_W3': ['file4'], 'file_W4': ['file5']}, ['file_W0', 'file_W1', 'file_W2', 'file_W3', 'file_W4'])\""}, {"return": "\"(2, {'sample_W0': ['sample1', 'sample2'], 'sample_W1': ['sample3', 'sample4']}, ['sample_W0', 'sample_W1'])\""}, {"return": "\"(2, {'data_W0': ['data1', 'data2'], 'data_W1': ['data3', 'data4'], 'data_W2': ['data5', 'data6']}, ['data_W0', 'data_W1', 'data_W2'])\""}, {"return": "\"(3, {'run_W0': ['run1', 'run2', 'run3']}, ['run_W0'])\""}, {"return": "\"(1, {'trial_W0': ['trial1'], 'trial_W1': ['trial2'], 'trial_W2': ['trial3'], 'trial_W3': ['trial4'], 'trial_W4': ['trial5']}, ['trial_W0', 'trial_W1', 'trial_W2', 'trial_W3', 'trial_W4'])\""}, {"return": "\"(2, {'Group_W0': ['Exp1', 'Exp2'], 'Group_W1': ['Exp3', 'Exp4']}, ['Group_W0', 'Group_W1'])\""}, {"return": "\"(1, {'Batch_W0': ['Test1'], 'Batch_W1': ['Test2'], 'Batch_W2': ['Test3']}, ['Batch_W0', 'Batch_W1', 'Batch_W2'])\""}, {"return": "\"(1, {'Set_W0': ['Sample1'], 'Set_W1': ['Sample2'], 'Set_W2': ['Sample3'], 'Set_W3': ['Sample4'], 'Set_W4': ['Sample5']}, ['Set_W0', 'Set_W1', 'Set_W2', 'Set_W3', 'Set_W4'])\""}, {"return": "\"(2, {'Experiment_W0': ['Lab1', 'Lab2']}, ['Experiment_W0'])\""}, {"return": "\"(2, {'Phase_W0': ['Trial1', 'Trial2'], 'Phase_W1': ['Trial3', 'Trial4'], 'Phase_W2': ['Trial5', 'Trial6']}, ['Phase_W0', 'Phase_W1', 'Phase_W2'])\""}, {"return": "\"(1, {'Scenario_W0': ['Case1'], 'Scenario_W1': ['Case2'], 'Scenario_W2': ['Case3'], 'Scenario_W3': ['Case4']}, ['Scenario_W0', 'Scenario_W1', 'Scenario_W2', 'Scenario_W3'])\""}, {"return": "\"(2, {'Obs_W0': ['Observation1', 'Observation2'], 'Obs_W1': ['Observation3', 'Observation4'], 'Obs_W2': ['Observation5', 'Observation6'], 'Obs_W3': ['Observation7', 'Observation8']}, ['Obs_W0', 'Obs_W1', 'Obs_W2', 'Obs_W3'])\""}, {"return": "\"(2, {'DataGroup_W0': ['Data1', 'Data2'], 'DataGroup_W1': ['Data3', 'Data4'], 'DataGroup_W2': ['Data5', 'Data6'], 'DataGroup_W3': ['Data7', 'Data8'], 'DataGroup_W4': ['Data9', 'Data10']}, ['DataGroup_W0', 'DataGroup_W1', 'DataGroup_W2', 'DataGroup_W3', 'DataGroup_W4'])\""}, {"return": "\"(2, {'ProjectSet_W0': ['Project1', 'Project2'], 'ProjectSet_W1': ['Project3', 'Project4'], 'ProjectSet_W2': ['Project5', 'Project6'], 'ProjectSet_W3': ['Project7', 'Project8'], 'ProjectSet_W4': ['Project9', 'Project10'], 'ProjectSet_W5': ['Project11', 'Project12']}, ['ProjectSet_W0', 'ProjectSet_W1', 'ProjectSet_W2', 'ProjectSet_W3', 'ProjectSet_W4', 'ProjectSet_W5'])\""}, {"return": "\"(3, {'ExpSet_W0': ['Experiment1', 'Experiment2', 'Experiment3'], 'ExpSet_W1': ['Experiment4', 'Experiment5', 'Experiment6'], 'ExpSet_W2': ['Experiment7', 'Experiment8', 'Experiment9'], 'ExpSet_W3': ['Experiment10', 'Experiment11', 'Experiment12'], 'ExpSet_W4': ['Experiment13', 'Experiment14', 'Experiment15']}, ['ExpSet_W0', 'ExpSet_W1', 'ExpSet_W2', 'ExpSet_W3', 'ExpSet_W4'])\""}, {"return": "\"(2, {'group_W0': ['exp1', 'exp2'], 'group_W1': ['exp3', 'exp4']}, ['group_W0', 'group_W1'])\""}, {"return": "\"(1, {'batch_W0': ['test1'], 'batch_W1': ['test2'], 'batch_W2': ['test3']}, ['batch_W0', 'batch_W1', 'batch_W2'])\""}, {"return": "\"(1, {'set_W0': ['sample1'], 'set_W1': ['sample2'], 'set_W2': ['sample3'], 'set_W3': ['sample4'], 'set_W4': ['sample5']}, ['set_W0', 'set_W1', 'set_W2', 'set_W3', 'set_W4'])\""}, {"return": "\"(2, {'type_W0': ['alpha', 'beta'], 'type_W1': ['gamma', 'delta']}, ['type_W0', 'type_W1'])\""}, {"return": "\"(2, {'part_W0': ['one', 'two'], 'part_W1': ['three', 'four'], 'part_W2': ['five', 'six']}, ['part_W0', 'part_W1', 'part_W2'])\""}, {"return": "\"(2, {'section_W0': ['a', 'b'], 'section_W1': ['c', 'd'], 'section_W2': ['e', 'f'], 'section_W3': ['g', 'h']}, ['section_W0', 'section_W1', 'section_W2', 'section_W3'])\""}, {"return": "\"(3, {'color_W0': ['red', 'blue', 'green'], 'color_W1': ['yellow', 'black', 'white']}, ['color_W0', 'color_W1'])\""}, {"return": "\"(3, {'month_W0': ['jan', 'feb', 'mar'], 'month_W1': ['apr', 'may', 'jun'], 'month_W2': ['jul', 'aug', 'sep'], 'month_W3': ['oct', 'nov', 'dec']}, ['month_W0', 'month_W1', 'month_W2', 'month_W3'])\""}, {"return": "\"(1, {'element_W0': ['earth'], 'element_W1': ['water'], 'element_W2': ['fire'], 'element_W3': ['air']}, ['element_W0', 'element_W1', 'element_W2', 'element_W3'])\""}, {"return": "\"(5, {'fruit_W0': ['apple', 'banana', 'cherry', 'date', 'elderberry']}, ['fruit_W0'])\""}], "parsed_inputs": [[["experiments", "['exp1', 'exp2', 'exp3', 'exp4']"], ["wells", "2"], ["prefix", "\"test\""]], [["experiments", "['a', 'b', 'c', 'd', 'e', 'f']"], ["wells", "3"], ["prefix", "\"abc\""]], [["experiments", "['video1', 'video2', 'video3']"], ["wells", "1"], ["prefix", "\"vid\""]], [["experiments", "['exp1', 'exp2', 'exp3', 'exp4', 'exp5', 'exp6']"], ["wells", "2"], ["prefix", "\"exp\""]], [["experiments", "['x', 'y', 'z']"], ["wells", "1"], ["prefix", "\"xyz\""]], [["experiments", "['file1', 'file2', 'file3', 'file4', 'file5']"], ["wells", "5"], ["prefix", "\"file\""]], [["experiments", "['sample1', 'sample2', 'sample3', 'sample4']"], ["wells", "2"], ["prefix", "\"sample\""]], [["experiments", "['data1', 'data2', 'data3', 'data4', 'data5', 'data6', 'data7']"], ["wells", "3"], ["prefix", "\"data\""]], [["experiments", "['run1', 'run2', 'run3']"], ["wells", "1"], ["prefix", "\"run\""]], [["experiments", "['trial1', 'trial2', 'trial3', 'trial4', 'trial5']"], ["wells", "5"], ["prefix", "\"trial\""]]], "exec_code": "def binning(experiments, wells=4, prefix='test'):\n    \"\"\"Split set of input experiments into groups.\n\n    Parameters\n    ----------\n    experiments : list of str\n        List of experiment names.\n    wells : int\n        Number of groups to divide experiments into.\n\n    Returns\n    -------\n    slices : int\n        Number of experiments per group.\n    bins : dict of list of str\n        Dictionary, keys corresponding to group names, and elements containing\n        lists of experiments in each group.\n    bin_names : list of str\n        List of group names\n\n    \"\"\"\n    total_videos = len(experiments)\n    bins = {}\n    slices = int(total_videos / wells)\n    bin_names = []\n    for num in range(0, wells):\n        slice1 = num * slices\n        slice2 = (num + 1) * slices\n        pref = '{}_W{}'.format(prefix, num)\n        bins[pref] = experiments[slice1:slice2]\n        bin_names.append(pref)\n    return slices, bins, bin_names\n", "output": "The function is:\n\n```python\ndef binning(experiments, wells=4, prefix='test'):\n    \"\"\"Split set of input experiments into groups.\n\n    Parameters\n    ----------\n    experiments : list of str\n        List of experiment names.\n    wells : int\n        Number of groups to divide experiments into.\n\n    Returns\n    -------\n    slices : int\n        Number of experiments per group.\n    bins : dict of list of str\n        Dictionary, keys corresponding to group names, and elements containing\n        lists of experiments in each group.\n    bin_names : list of str\n        List of group names\n\n    \"\"\"\n    total_videos = len(experiments)\n    bins = {}\n    slices = int(total_videos / wells)\n    bin_names = []\n    for num in range(0, wells):\n        slice1 = num * slices\n        slice2 = (num + 1) * slices\n        pref = '{}_W{}'.format(prefix, num)\n        bins[pref] = experiments[slice1:slice2]\n        bin_names.append(pref)\n    return slices, bins, bin_names\n\n```", "choosed_example_idx": [4, 1, 2, 7], "prompt": "Input: dict(experiments=['x', 'y', 'z'], wells=1, prefix=\"xyz\"), Output: \"(3, {'xyz_W0': ['x', 'y', 'z']}, ['xyz_W0'])\"\nInput: dict(experiments=['a', 'b', 'c', 'd', 'e', 'f'], wells=3, prefix=\"abc\"), Output: \"(2, {'abc_W0': ['a', 'b'], 'abc_W1': ['c', 'd'], 'abc_W2': ['e', 'f']}, ['abc_W0', 'abc_W1', 'abc_W2'])\"\nInput: dict(experiments=['video1', 'video2', 'video3'], wells=1, prefix=\"vid\"), Output: \"(3, {'vid_W0': ['video1', 'video2', 'video3']}, ['vid_W0'])\"\nInput: dict(experiments=['data1', 'data2', 'data3', 'data4', 'data5', 'data6', 'data7'], wells=3, prefix=\"data\"), Output: \"(2, {'data_W0': ['data1', 'data2'], 'data_W1': ['data3', 'data4'], 'data_W2': ['data5', 'data6']}, ['data_W0', 'data_W1', 'data_W2'])\"\n\n\n\nFunction: binning\n\n\nWrite a function that generates the output from the input.\n", "id": "e5b769c68f7413fc3ef43dbe370353da61e34afa_0"}
{"example_str": "examples = [\n    dict(sentence=\"Hello World\"),\n    dict(sentence=\"This is a test\"),\n    dict(sentence=\"apple apple apple\"),\n    dict(sentence=\"I love Python programming\"),\n    dict(sentence=\"The quick brown fox jumps over the lazy dog\"),\n    dict(sentence=\"one two three four five\"),\n    dict(sentence=\"hello hello hello hello\"),\n    dict(sentence=\"a b c d e f g\"),\n    dict(sentence=\"The sun was shining brightly\"),\n    dict(sentence=\"Python is fun to learn\"),\n]\nexamples += [\n    dict(sentence=\"hello world\"),\n    dict(sentence=\"\"),\n    dict(sentence=\"repeat repeat repeat\"),\n    dict(sentence=\"case Case CASE\"),\n    dict(sentence=\"punctuation, is not removed!\"),\n    dict(sentence=\"123 123 456\"),\n    dict(sentence=\"spaces    multiple\"),\n    dict(sentence=\"new\\nline\"),\n    dict(sentence=\"tabs\\tare\\there\"),\n    dict(sentence=\"Hello hello HELLO\")\n]\nexamples += [\n    dict(sentence=\"hello world\"),\n    dict(sentence=\"repeat repeat repeat\"),\n    dict(sentence=\"\"),\n    dict(sentence=\"case Case CASE\"),\n    dict(sentence=\"123 123 123 456\"),\n    dict(sentence=\"one, two, three\"),\n    dict(sentence=\"spaces    and tabs\"),\n    dict(sentence=\"new\\nline\"),\n    dict(sentence=\"punctuation! is it counted?\"),\n    dict(sentence=\"singleword\")\n]", "code": "def word_count(sentence):\n    output = {}\n    for s in sentence.split():\n        if s in output.keys():\n            output[s] += 1\n        else:\n            output[s] = 1\n    return output\n", "func_name": "word_count", "exec_status": true, "example_inputs": ["\"{'sentence': 'Hello World'}\"", "\"{'sentence': 'This is a test'}\"", "\"{'sentence': 'apple apple apple'}\"", "\"{'sentence': 'I love Python programming'}\"", "\"{'sentence': 'The quick brown fox jumps over the lazy dog'}\"", "\"{'sentence': 'one two three four five'}\"", "\"{'sentence': 'hello hello hello hello'}\"", "\"{'sentence': 'a b c d e f g'}\"", "\"{'sentence': 'The sun was shining brightly'}\"", "\"{'sentence': 'Python is fun to learn'}\""], "example_outputs": [{"return": "\"{'Hello': 1, 'World': 1}\""}, {"return": "\"{'This': 1, 'is': 1, 'a': 1, 'test': 1}\""}, {"return": "\"{'apple': 3}\""}, {"return": "\"{'I': 1, 'love': 1, 'Python': 1, 'programming': 1}\""}, {"return": "\"{'The': 1, 'quick': 1, 'brown': 1, 'fox': 1, 'jumps': 1, 'over': 1, 'the': 1, 'lazy': 1, 'dog': 1}\""}, {"return": "\"{'one': 1, 'two': 1, 'three': 1, 'four': 1, 'five': 1}\""}, {"return": "\"{'hello': 4}\""}, {"return": "\"{'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1}\""}, {"return": "\"{'The': 1, 'sun': 1, 'was': 1, 'shining': 1, 'brightly': 1}\""}, {"return": "\"{'Python': 1, 'is': 1, 'fun': 1, 'to': 1, 'learn': 1}\""}, {"return": "\"{'hello': 1, 'world': 1}\""}, {"return": "\"{}\""}, {"return": "\"{'repeat': 3}\""}, {"return": "\"{'case': 1, 'Case': 1, 'CASE': 1}\""}, {"return": "\"{'punctuation,': 1, 'is': 1, 'not': 1, 'removed!': 1}\""}, {"return": "\"{'123': 2, '456': 1}\""}, {"return": "\"{'spaces': 1, 'multiple': 1}\""}, {"return": "\"{'new': 1, 'line': 1}\""}, {"return": "\"{'tabs': 1, 'are': 1, 'here': 1}\""}, {"return": "\"{'Hello': 1, 'hello': 1, 'HELLO': 1}\""}, {"return": "\"{'hello': 1, 'world': 1}\""}, {"return": "\"{'repeat': 3}\""}, {"return": "\"{}\""}, {"return": "\"{'case': 1, 'Case': 1, 'CASE': 1}\""}, {"return": "\"{'123': 3, '456': 1}\""}, {"return": "\"{'one,': 1, 'two,': 1, 'three': 1}\""}, {"return": "\"{'spaces': 1, 'and': 1, 'tabs': 1}\""}, {"return": "\"{'new': 1, 'line': 1}\""}, {"return": "\"{'punctuation!': 1, 'is': 1, 'it': 1, 'counted?': 1}\""}, {"return": "\"{'singleword': 1}\""}], "parsed_inputs": [[["sentence", "\"Hello World\""]], [["sentence", "\"This is a test\""]], [["sentence", "\"apple apple apple\""]], [["sentence", "\"I love Python programming\""]], [["sentence", "\"The quick brown fox jumps over the lazy dog\""]], [["sentence", "\"one two three four five\""]], [["sentence", "\"hello hello hello hello\""]], [["sentence", "\"a b c d e f g\""]], [["sentence", "\"The sun was shining brightly\""]], [["sentence", "\"Python is fun to learn\""]]], "exec_code": "def word_count(sentence):\n    output = {}\n    for s in sentence.split():\n        if s in output.keys():\n            output[s] += 1\n        else:\n            output[s] = 1\n    return output\n", "output": "The function is:\n\n```python\ndef word_count(sentence):\n    output = {}\n    for s in sentence.split():\n        if s in output.keys():\n            output[s] += 1\n        else:\n            output[s] = 1\n    return output\n\n```", "choosed_example_idx": [0, 9, 5], "prompt": "Function: word_count\nInput: dict(sentence=\"Hello World\"), Output: \"{'Hello': 1, 'World': 1}\"\nInput: dict(sentence=\"Python is fun to learn\"), Output: \"{'Python': 1, 'is': 1, 'fun': 1, 'to': 1, 'learn': 1}\"\nInput: dict(sentence=\"one two three four five\"), Output: \"{'one': 1, 'two': 1, 'three': 1, 'four': 1, 'five': 1}\"\n\nWrite a function that generates the output from the input.\n\n\n", "id": "677a02c9b27e01a1011445d8fcf89848a6dbb95c_0"}
{"example_str": "examples = [\n    dict(matrix=[[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]], target=3),\n    dict(matrix=[[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]], target=13),\n    dict(matrix=[[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]], target=20),\n    dict(matrix=[[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]], target=50),\n    dict(matrix=[[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]], target=51),\n    dict(matrix=[[1, 3, 5, 7]], target=3),\n    dict(matrix=[[1, 3, 5, 7]], target=4),\n    dict(matrix=[[1], [2], [3]], target=2),\n    dict(matrix=[[1], [2], [3]], target=4),\n    dict(matrix=[[1, 2], [3, 4]], target=3),\n]\nexamples += [\n    dict(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5),\n    dict(matrix=[[10, 20, 30], [40, 50, 60], [70, 80, 90]], target=100),\n    dict(matrix=[[1]], target=1),\n    dict(matrix=[[1, 2, 3, 4, 5]], target=3),\n    dict(matrix=[[1], [2], [3], [4], [5]], target=4),\n    dict(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=10),\n    dict(matrix=[[5, 6, 7], [8, 9, 10], [11, 12, 13]], target=6),\n    dict(matrix=[[3, 4], [5, 6]], target=6),\n    dict(matrix=[[10]], target=10),\n    dict(matrix=[[1, 3, 5], [7, 9, 11], [13, 15, 17]], target=15)\n]\nexamples += [\n    dict(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5),\n    dict(matrix=[[10, 20, 30], [40, 50, 60], [70, 80, 90]], target=50),\n    dict(matrix=[[1]], target=1),\n    dict(matrix=[[1]], target=2),\n    dict(matrix=[[1, 2, 3, 4, 5]], target=3),\n    dict(matrix=[[1, 2, 3, 4, 5]], target=6),\n    dict(matrix=[[1], [2], [3], [4], [5]], target=4),\n    dict(matrix=[[1], [2], [3], [4], [5]], target=6),\n    dict(matrix=[[1, 3, 5], [7, 9, 11], [13, 15, 17]], target=13),\n    dict(matrix=[[1, 3, 5], [7, 9, 11], [13, 15, 17]], target=10)\n]", "code": "def searchMatrix(matrix, target):\n    if len(matrix) == 1:\n        if len(matrix[0]) == 1:\n            if target == matrix[0][0]:\n                return True\n            else:\n                return False\n        inIndex = len(matrix[0]) // 2\n        if target == matrix[0][inIndex]:\n            return True\n        elif target < matrix[0][inIndex]:\n            return searchMatrix([matrix[0][:inIndex]], target)\n        else:\n            return searchMatrix([matrix[0][inIndex:]], target)\n    else:\n        out = len(matrix) // 2\n        if target < matrix[out][0]:\n            return searchMatrix(matrix[:out], target)\n        else:\n            return searchMatrix(matrix[out:], target)\n", "func_name": "searchMatrix", "exec_status": true, "example_inputs": ["\"{'matrix': [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]], 'target': 3}\"", "\"{'matrix': [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]], 'target': 13}\"", "\"{'matrix': [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]], 'target': 20}\"", "\"{'matrix': [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]], 'target': 50}\"", "\"{'matrix': [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]], 'target': 51}\"", "\"{'matrix': [[1, 3, 5, 7]], 'target': 3}\"", "\"{'matrix': [[1, 3, 5, 7]], 'target': 4}\"", "\"{'matrix': [[1], [2], [3]], 'target': 2}\"", "\"{'matrix': [[1], [2], [3]], 'target': 4}\"", "\"{'matrix': [[1, 2], [3, 4]], 'target': 3}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}], "parsed_inputs": [[["matrix", "[[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]]"], ["target", "3"]], [["matrix", "[[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]]"], ["target", "13"]], [["matrix", "[[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]]"], ["target", "20"]], [["matrix", "[[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]]"], ["target", "50"]], [["matrix", "[[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]]"], ["target", "51"]], [["matrix", "[[1, 3, 5, 7]]"], ["target", "3"]], [["matrix", "[[1, 3, 5, 7]]"], ["target", "4"]], [["matrix", "[[1], [2], [3]]"], ["target", "2"]], [["matrix", "[[1], [2], [3]]"], ["target", "4"]], [["matrix", "[[1, 2], [3, 4]]"], ["target", "3"]]], "exec_code": "def searchMatrix(matrix, target):\n    if len(matrix) == 1:\n        if len(matrix[0]) == 1:\n            if target == matrix[0][0]:\n                return True\n            else:\n                return False\n        inIndex = len(matrix[0]) // 2\n        if target == matrix[0][inIndex]:\n            return True\n        elif target < matrix[0][inIndex]:\n            return searchMatrix([matrix[0][:inIndex]], target)\n        else:\n            return searchMatrix([matrix[0][inIndex:]], target)\n    else:\n        out = len(matrix) // 2\n        if target < matrix[out][0]:\n            return searchMatrix(matrix[:out], target)\n        else:\n            return searchMatrix(matrix[out:], target)\n", "output": "The function is:\n\n```python\ndef searchMatrix(matrix, target):\n    if len(matrix) == 1:\n        if len(matrix[0]) == 1:\n            if target == matrix[0][0]:\n                return True\n            else:\n                return False\n        inIndex = len(matrix[0]) // 2\n        if target == matrix[0][inIndex]:\n            return True\n        elif target < matrix[0][inIndex]:\n            return searchMatrix([matrix[0][:inIndex]], target)\n        else:\n            return searchMatrix([matrix[0][inIndex:]], target)\n    else:\n        out = len(matrix) // 2\n        if target < matrix[out][0]:\n            return searchMatrix(matrix[:out], target)\n        else:\n            return searchMatrix(matrix[out:], target)\n\n```", "choosed_example_idx": [3, 2, 1, 6, 9, 7, 8, 0, 5], "prompt": "Function: searchMatrix\nWrite a function that generates the output from the input.\nInput: dict(matrix=[[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]], target=50), Output: \"True\"\nInput: dict(matrix=[[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]], target=20), Output: \"True\"\nInput: dict(matrix=[[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]], target=13), Output: \"False\"\nInput: dict(matrix=[[1, 3, 5, 7]], target=4), Output: \"False\"\nInput: dict(matrix=[[1, 2], [3, 4]], target=3), Output: \"True\"\nInput: dict(matrix=[[1], [2], [3]], target=2), Output: \"True\"\nInput: dict(matrix=[[1], [2], [3]], target=4), Output: \"False\"\nInput: dict(matrix=[[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]], target=3), Output: \"True\"\nInput: dict(matrix=[[1, 3, 5, 7]], target=3), Output: \"True\"\n\n", "id": "b1c774b5d8fbafd2b96eb027ca67857ce6d7fe5e_0"}
{"example_str": "examples = [\n    dict(a=12, b=15),\n    dict(a=24, b=30),\n    dict(a=48, b=18),\n    dict(a=100, b=75),\n    dict(a=7, b=3),\n    dict(a=24, b=36),\n    dict(a=50, b=20),\n    dict(a=11, b=13),\n    dict(a=9, b=12),\n    dict(a=27, b=33)\n]\nexamples += [\n    dict(a=12, b=15),\n    dict(a=100, b=25),\n    dict(a=7, b=13),\n    dict(a=56, b=42),\n    dict(a=36, b=60),\n    dict(a=0, b=5),\n    dict(a=5, b=0),\n    dict(a=121, b=11),\n    dict(a=144, b=89),\n    dict(a=18, b=24)\n]\nexamples += [\n    dict(a=12, b=15),\n    dict(a=100, b=200),\n    dict(a=35, b=10),\n    dict(a=81, b=27),\n    dict(a=24, b=36),\n    dict(a=17, b=31),\n    dict(a=56, b=42),\n    dict(a=99, b=33),\n    dict(a=121, b=11),\n    dict(a=144, b=12),\n]", "code": "def gcd(a, b):\n    rem = a % b\n    if 0 == rem:\n        return b\n    else:\n        return gcd(b, rem)\n", "func_name": "gcd", "exec_status": true, "example_inputs": ["\"{'a': 12, 'b': 15}\"", "\"{'a': 24, 'b': 30}\"", "\"{'a': 48, 'b': 18}\"", "\"{'a': 100, 'b': 75}\"", "\"{'a': 7, 'b': 3}\"", "\"{'a': 24, 'b': 36}\"", "\"{'a': 50, 'b': 20}\"", "\"{'a': 11, 'b': 13}\"", "\"{'a': 9, 'b': 12}\"", "\"{'a': 27, 'b': 33}\""], "example_outputs": [{"return": "\"3\""}, {"return": "\"6\""}, {"return": "\"6\""}, {"return": "\"25\""}, {"return": "\"1\""}, {"return": "\"12\""}, {"return": "\"10\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"25\""}, {"return": "\"1\""}, {"return": "\"14\""}, {"return": "\"12\""}, {"return": "\"5\""}, {"error": "<|EXCEPTION|> \"<class 'ZeroDivisionError'>: integer division or modulo by zero\""}, {"return": "\"11\""}, {"return": "\"1\""}, {"return": "\"6\""}, {"return": "\"3\""}, {"return": "\"100\""}, {"return": "\"5\""}, {"return": "\"27\""}, {"return": "\"12\""}, {"return": "\"1\""}, {"return": "\"14\""}, {"return": "\"33\""}, {"return": "\"11\""}, {"return": "\"12\""}], "parsed_inputs": [[["a", "12"], ["b", "15"]], [["a", "24"], ["b", "30"]], [["a", "48"], ["b", "18"]], [["a", "100"], ["b", "75"]], [["a", "7"], ["b", "3"]], [["a", "24"], ["b", "36"]], [["a", "50"], ["b", "20"]], [["a", "11"], ["b", "13"]], [["a", "9"], ["b", "12"]], [["a", "27"], ["b", "33"]]], "exec_code": "def gcd(a, b):\n    rem = a % b\n    if 0 == rem:\n        return b\n    else:\n        return gcd(b, rem)\n", "output": "The function is:\n\n```python\ndef gcd(a, b):\n    rem = a % b\n    if 0 == rem:\n        return b\n    else:\n        return gcd(b, rem)\n\n```", "choosed_example_idx": [6, 2, 0, 3, 7, 5, 4, 8], "prompt": "Input: dict(a=50, b=20), Output: \"10\"\nInput: dict(a=48, b=18), Output: \"6\"\nInput: dict(a=12, b=15), Output: \"3\"\nInput: dict(a=100, b=75), Output: \"25\"\nInput: dict(a=11, b=13), Output: \"1\"\nInput: dict(a=24, b=36), Output: \"12\"\nInput: dict(a=7, b=3), Output: \"1\"\nInput: dict(a=9, b=12), Output: \"3\"\n\n\nFunction: gcd\n\nWrite a function that generates the output from the input.\n", "id": "fd6d8cb700e3e86c825a4121b0e3182a52bde111_0"}
{"example_str": "examples = [\n    dict(process={}),\n    dict(process={'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {}}),\n    dict(process={'hltIter1ClustersRefRemoval': {}}),\n    dict(process={'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {'inputTrack': 'oldTrack'}}),\n    dict(process={'hltIter1ClustersRefRemoval': {'trajectories': 'oldTrajectories'}}),\n    dict(process={'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {'inputTrack': 'oldTrack'}, 'hltIter1ClustersRefRemoval': {}}),\n    dict(process={'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {}, 'hltIter1ClustersRefRemoval': {'trajectories': 'oldTrajectories'}}),\n    dict(process={'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {'inputTrack': 'oldTrack'}, 'hltIter1ClustersRefRemoval': {'trajectories': 'oldTrajectories'}}),\n    dict(process={'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {'inputTrack': 'oldTrack', 'otherAttr': 'otherValue'}}),\n    dict(process={'hltIter1ClustersRefRemoval': {'trajectories': 'oldTrajectories', 'otherAttr': 'otherValue'}})\n]\nclass ProcessExample1:\n    hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter = type('obj', (object,), {'inputTrack': None})\n    hltIter1ClustersRefRemoval = type('obj', (object,), {'trajectories': None})\n\nclass ProcessExample2:\n    hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter = type('obj', (object,), {'inputTrack': None})\n\nclass ProcessExample3:\n    hltIter1ClustersRefRemoval = type('obj', (object,), {'trajectories': None})\n\nclass ProcessExample4:\n    pass\n\nclass ProcessExample5:\n    hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter = type('obj', (object,), {'inputTrack': 'initial'})\n\nclass ProcessExample6:\n    hltIter1ClustersRefRemoval = type('obj', (object,), {'trajectories': 'initial'})\n\nclass ProcessExample7:\n    hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter = type('obj', (object,), {'inputTrack': 'initial'})\n    hltIter1ClustersRefRemoval = type('obj', (object,), {'trajectories': 'initial'})\n\nclass ProcessExample8:\n    hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter = type('obj', (object,), {'inputTrack': 'modified'})\n\nclass ProcessExample9:\n    hltIter1ClustersRefRemoval = type('obj', (object,), {'trajectories': 'modified'})\n\nclass ProcessExample10:\n    hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter = type('obj', (object,), {'inputTrack': 'modified'})\n    hltIter1ClustersRefRemoval = type('obj', (object,), {'trajectories': 'modified'})\n\nexamples += [\n    dict(process=ProcessExample1()),\n    dict(process=ProcessExample2()),\n    dict(process=ProcessExample3()),\n    dict(process=ProcessExample4()),\n    dict(process=ProcessExample5()),\n    dict(process=ProcessExample6()),\n    dict(process=ProcessExample7()),\n    dict(process=ProcessExample8()),\n    dict(process=ProcessExample9()),\n    dict(process=ProcessExample10()),\n]", "code": "def fixMenu(process):\n    if hasattr(process, 'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter'):\n        process.hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter.inputTrack = (\n            'hltMergedTracks')\n    if hasattr(process, 'hltIter1ClustersRefRemoval'):\n        process.hltIter1ClustersRefRemoval.trajectories = 'hltMergedTracks'\n    return process\n", "func_name": "fixMenu", "exec_status": true, "example_inputs": ["\"{'process': {}}\"", "\"{'process': {'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {}}}\"", "\"{'process': {'hltIter1ClustersRefRemoval': {}}}\"", "\"{'process': {'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {'inputTrack': 'oldTrack'}}}\"", "\"{'process': {'hltIter1ClustersRefRemoval': {'trajectories': 'oldTrajectories'}}}\"", "\"{'process': {'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {'inputTrack': 'oldTrack'}, 'hltIter1ClustersRefRemoval': {}}}\"", "\"{'process': {'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {}, 'hltIter1ClustersRefRemoval': {'trajectories': 'oldTrajectories'}}}\"", "\"{'process': {'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {'inputTrack': 'oldTrack'}, 'hltIter1ClustersRefRemoval': {'trajectories': 'oldTrajectories'}}}\"", "\"{'process': {'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {'inputTrack': 'oldTrack', 'otherAttr': 'otherValue'}}}\"", "\"{'process': {'hltIter1ClustersRefRemoval': {'trajectories': 'oldTrajectories', 'otherAttr': 'otherValue'}}}\""], "example_outputs": [{"return": "\"{}\""}, {"return": "\"{'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {}}\""}, {"return": "\"{'hltIter1ClustersRefRemoval': {}}\""}, {"return": "\"{'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {'inputTrack': 'oldTrack'}}\""}, {"return": "\"{'hltIter1ClustersRefRemoval': {'trajectories': 'oldTrajectories'}}\""}, {"return": "\"{'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {'inputTrack': 'oldTrack'}, 'hltIter1ClustersRefRemoval': {}}\""}, {"return": "\"{'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {}, 'hltIter1ClustersRefRemoval': {'trajectories': 'oldTrajectories'}}\""}, {"return": "\"{'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {'inputTrack': 'oldTrack'}, 'hltIter1ClustersRefRemoval': {'trajectories': 'oldTrajectories'}}\""}, {"return": "\"{'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {'inputTrack': 'oldTrack', 'otherAttr': 'otherValue'}}\""}, {"return": "\"{'hltIter1ClustersRefRemoval': {'trajectories': 'oldTrajectories', 'otherAttr': 'otherValue'}}\""}, {"return": "\"<__main__.ProcessExample1 object at 0x7f5e691c5c10>\""}, {"return": "\"<__main__.ProcessExample2 object at 0x7f5e691c5c40>\""}, {"return": "\"<__main__.ProcessExample3 object at 0x7f5e691c5b80>\""}, {"return": "\"<__main__.ProcessExample4 object at 0x7f5e6900a100>\""}, {"return": "\"<__main__.ProcessExample5 object at 0x7f5e69083820>\""}, {"return": "\"<__main__.ProcessExample6 object at 0x7f5e690837c0>\""}, {"return": "\"<__main__.ProcessExample7 object at 0x7f5e69083f10>\""}, {"return": "\"<__main__.ProcessExample8 object at 0x7f5e69083f40>\""}, {"return": "\"<__main__.ProcessExample9 object at 0x7f5e68f160d0>\""}, {"return": "\"<__main__.ProcessExample10 object at 0x7f5e68f1ebb0>\""}], "parsed_inputs": [[["process", "{}"]], [["process", "{'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {}}"]], [["process", "{'hltIter1ClustersRefRemoval': {}}"]], [["process", "{'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {'inputTrack': 'oldTrack'}}"]], [["process", "{'hltIter1ClustersRefRemoval': {'trajectories': 'oldTrajectories'}}"]], [["process", "{'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {'inputTrack': 'oldTrack'}, 'hltIter1ClustersRefRemoval': {}}"]], [["process", "{'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {}, 'hltIter1ClustersRefRemoval': {'trajectories': 'oldTrajectories'}}"]], [["process", "{'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {'inputTrack': 'oldTrack'}, 'hltIter1ClustersRefRemoval': {'trajectories': 'oldTrajectories'}}"]], [["process", "{'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {'inputTrack': 'oldTrack', 'otherAttr': 'otherValue'}}"]], [["process", "{'hltIter1ClustersRefRemoval': {'trajectories': 'oldTrajectories', 'otherAttr': 'otherValue'}}"]]], "exec_code": "def fixMenu(process):\n    if hasattr(process, 'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter'):\n        process.hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter.inputTrack = (\n            'hltMergedTracks')\n    if hasattr(process, 'hltIter1ClustersRefRemoval'):\n        process.hltIter1ClustersRefRemoval.trajectories = 'hltMergedTracks'\n    return process\n", "output": "The function is:\n\n```python\ndef fixMenu(process):\n    if hasattr(process, 'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter'):\n        process.hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter.inputTrack = (\n            'hltMergedTracks')\n    if hasattr(process, 'hltIter1ClustersRefRemoval'):\n        process.hltIter1ClustersRefRemoval.trajectories = 'hltMergedTracks'\n    return process\n\n```", "choosed_example_idx": [3, 9, 8, 1], "prompt": "Write a function that generates the output from the input.\nInput: dict(process={'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {'inputTrack': 'oldTrack'}}), Output: \"{'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {'inputTrack': 'oldTrack'}}\"\nInput: dict(process={'hltIter1ClustersRefRemoval': {'trajectories': 'oldTrajectories', 'otherAttr': 'otherValue'}}), Output: \"{'hltIter1ClustersRefRemoval': {'trajectories': 'oldTrajectories', 'otherAttr': 'otherValue'}}\"\nInput: dict(process={'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {'inputTrack': 'oldTrack', 'otherAttr': 'otherValue'}}), Output: \"{'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {'inputTrack': 'oldTrack', 'otherAttr': 'otherValue'}}\"\nInput: dict(process={'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {}}), Output: \"{'hltEG60R9Id90CaloIdLIsoLDisplacedIdFilter': {}}\"\n\nFunction: fixMenu\n\n", "id": "081e224ed86b61e49b3239c8ab046c66f93ee7b9_0"}
{"example_str": "examples = [\n    dict(n='()'),\n    dict(n='()()'),\n    dict(n='(())'),\n    dict(n='(()'),\n    dict(n=')('),\n    dict(n='hello(world)'),\n    dict(n='(hello)world'),\n    dict(n='((()))'),\n    dict(n='(()(()))'),\n    dict(n='(hello)(world)'),\n]\nexamples += [\n    dict(n=\"()\"),  # Balanced and correct order\n    dict(n=\")(\"),  # Balanced but incorrect order\n    dict(n=\"((()))\"),  # Nested and balanced\n    dict(n=\"(()\"),  # Unbalanced, more opening\n    dict(n=\"())\"),  # Unbalanced, more closing\n    dict(n=\"\"),  # Empty string, trivially balanced\n    dict(n=\"((())())\"),  # Multiple nested balanced\n    dict(n=\"((((\"),  # All opening, unbalanced\n    dict(n=\"))))\"),  # All closing, unbalanced\n    dict(n=\"(())(())\")  # Multiple separate balanced groups\n]\nexamples += [\n    dict(n=\"()\"),\n    dict(n=\"((()))\"),\n    dict(n=\"(()())\"),\n    dict(n=\"(())()\"),\n    dict(n=\")(\"),\n    dict(n=\"(()\"),\n    dict(n=\"())\"),\n    dict(n=\"()()()\"),\n    dict(n=\"((((()))))\"),\n    dict(n=\"(()((())()))\")\n]", "code": "def matched(n):\n    p = 0\n    q = 0\n    l = []\n    m = []\n    for i in range(0, len(n)):\n        if n[i] == ')':\n            q = q + 1\n            l = l + [i]\n        if n[i] == '(':\n            p = p + 1\n            m = m + [i]\n    if p == q and l >= m:\n        return True\n    else:\n        return False\n", "func_name": "matched", "exec_status": true, "example_inputs": ["\"{'n': '()'}\"", "\"{'n': '()()'}\"", "\"{'n': '(())'}\"", "\"{'n': '(()'}\"", "\"{'n': ')('}\"", "\"{'n': 'hello(world)'}\"", "\"{'n': '(hello)world'}\"", "\"{'n': '((()))'}\"", "\"{'n': '(()(()))'}\"", "\"{'n': '(hello)(world)'}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}], "parsed_inputs": [[["n", "\"()\""]], [["n", "\"()()\""]], [["n", "\"(())\""]], [["n", "\"(()\""]], [["n", "\")(\""]], [["n", "\"hello(world)\""]], [["n", "\"(hello)world\""]], [["n", "\"((()))\""]], [["n", "\"(()(()))\""]], [["n", "\"(hello)(world)\""]]], "exec_code": "def matched(n):\n    p = 0\n    q = 0\n    l = []\n    m = []\n    for i in range(0, len(n)):\n        if n[i] == ')':\n            q = q + 1\n            l = l + [i]\n        if n[i] == '(':\n            p = p + 1\n            m = m + [i]\n    if p == q and l >= m:\n        return True\n    else:\n        return False\n", "output": "The function is:\n\n```python\ndef matched(n):\n    p = 0\n    q = 0\n    l = []\n    m = []\n    for i in range(0, len(n)):\n        if n[i] == ')':\n            q = q + 1\n            l = l + [i]\n        if n[i] == '(':\n            p = p + 1\n            m = m + [i]\n    if p == q and l >= m:\n        return True\n    else:\n        return False\n\n```", "choosed_example_idx": [2, 0, 4], "prompt": "Function: matched\n\nWrite a function that generates the output from the input.\nInput: dict(n=\"(())\"), Output: \"True\"\nInput: dict(n=\"()\"), Output: \"True\"\nInput: dict(n=\")(\"), Output: \"False\"\n\n\n", "id": "13736cf9cdf43038a8ff57c1c3f8b8bdcdcb5b6e_0"}
{"example_str": "examples = [\n    dict(pk=(3, 33), ciphertext='123456'),\n    dict(pk=(5, 77), ciphertext='abcdefg'),\n    dict(pk=(2, 17), ciphertext='hello'),\n    dict(pk=(7, 91), ciphertext='1234567890'),\n    dict(pk=(11, 143), ciphertext='abcdefghijklmnopqrstuvwxyz'),\n    dict(pk=(13, 169), ciphertext='ABCDEFGHIJKLMNOPQRSTUVWXYZ'),\n    dict(pk=(17, 221), ciphertext='!@#$%^&*()'),\n    dict(pk=(19, 247), ciphertext='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'),\n    dict(pk=(23, 299), ciphertext='1234567890abcdefghijklmnopqrstuvwxyz'),\n    dict(pk=(29, 353), ciphertext='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'),\n]\nexamples += [\n    dict(pk=(3, 33), ciphertext=[10, 22, 31]),\n    dict(pk=(5, 53), ciphertext=[15, 25, 35]),\n    dict(pk=(2, 101), ciphertext=[44, 55, 66]),\n    dict(pk=(7, 77), ciphertext=[21, 42, 63]),\n    dict(pk=(4, 44), ciphertext=[11, 22, 33]),\n    dict(pk=(6, 96), ciphertext=[16, 36, 56]),\n    dict(pk=(8, 88), ciphertext=[18, 28, 38]),\n    dict(pk=(9, 99), ciphertext=[19, 29, 39]),\n    dict(pk=(10, 110), ciphertext=[110, 220, 330]),\n    dict(pk=(11, 121), ciphertext=[121, 242, 363])\n]\nexamples += [\n    dict(pk=(3, 33), ciphertext=[10, 22, 15]),\n    dict(pk=(5, 53), ciphertext=[23, 45, 12, 9]),\n    dict(pk=(7, 77), ciphertext=[34, 56, 78, 90]),\n    dict(pk=(2, 15), ciphertext=[5, 7, 14]),\n    dict(pk=(4, 21), ciphertext=[20, 3, 18, 6]),\n    dict(pk=(6, 35), ciphertext=[25, 30, 10, 5]),\n    dict(pk=(8, 85), ciphertext=[40, 50, 60]),\n    dict(pk=(9, 91), ciphertext=[81, 72, 63, 54]),\n    dict(pk=(10, 101), ciphertext=[100, 99, 98, 97]),\n    dict(pk=(11, 111), ciphertext=[110, 105, 100, 95])\n]", "code": "def decrypt(pk, ciphertext):\n    key, n = pk\n    plain = [chr(int(char) ** key % n) for char in ciphertext]\n    return ''.join(plain)\n", "func_name": "decrypt", "exec_status": true, "example_inputs": ["\"{'pk': (3, 33), 'ciphertext': '123456'}\"", "\"{'pk': (5, 77), 'ciphertext': 'abcdefg'}\"", "\"{'pk': (2, 17), 'ciphertext': 'hello'}\"", "\"{'pk': (7, 91), 'ciphertext': '1234567890'}\"", "\"{'pk': (11, 143), 'ciphertext': 'abcdefghijklmnopqrstuvwxyz'}\"", "\"{'pk': (13, 169), 'ciphertext': 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'}\"", "\"{'pk': (17, 221), 'ciphertext': '!@#$%^&*()'}\"", "\"{'pk': (19, 247), 'ciphertext': 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'}\"", "\"{'pk': (23, 299), 'ciphertext': '1234567890abcdefghijklmnopqrstuvwxyz'}\"", "\"{'pk': (29, 353), 'ciphertext': 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'}\""], "example_outputs": [{"return": "\"'\\\\x01\\\\x08\\\\x1b\\\\x1f\\\\x1a\\\\x12'\""}, {"error": "<|EXCEPTION|> \"<class 'ValueError'>: invalid literal for int() with base 10: 'a'\""}, {"error": "<|EXCEPTION|> \"<class 'ValueError'>: invalid literal for int() with base 10: 'h'\""}, {"return": "\"'\\\\x01%\\\\x03\\\\x04/\\\\x14T9\\\\t\\\\x00'\""}, {"error": "<|EXCEPTION|> \"<class 'ValueError'>: invalid literal for int() with base 10: 'a'\""}, {"error": "<|EXCEPTION|> \"<class 'ValueError'>: invalid literal for int() with base 10: 'A'\""}, {"error": "<|EXCEPTION|> \"<class 'ValueError'>: invalid literal for int() with base 10: '!'\""}, {"error": "<|EXCEPTION|> \"<class 'ValueError'>: invalid literal for int() with base 10: 'a'\""}, {"error": "<|EXCEPTION|> \"<class 'ValueError'>: invalid literal for int() with base 10: 'a'\""}, {"error": "<|EXCEPTION|> \"<class 'ValueError'>: invalid literal for int() with base 10: 'a'\""}, {"return": "\"'\\\\n\\\\x16\\\\x19'\""}, {"return": "\"',\\\\x04)'\""}, {"return": "\"'\\\\x11`\\\\r'\""}, {"return": "\"'\\\\x15F#'\""}, {"return": "\"'!\\\\x00!'\""}, {"return": "\"'@\\\\x00@'\""}, {"return": "\"'@00'\""}, {"return": "\"'I\\\\x08Z'\""}, {"return": "\"'\\\\x00\\\\x00\\\\x00'\""}, {"return": "\"'\\\\x00\\\\x00\\\\x00'\""}, {"return": "\"'\\\\n\\\\x16\\\\t'\""}, {"return": "\"\\\"\\\\x17'2\\\\x07\\\"\""}, {"return": "\"'\\\"8\\\\x01>'\""}, {"return": "\"'\\\\n\\\\x04\\\\x01'\""}, {"return": "\"'\\\\x01\\\\x12\\\\x12\\\\x0f'\""}, {"return": "\"'\\\\x0f\\\\x0f\\\\x0f\\\\x0f'\""}, {"return": "\"'2##'\""}, {"return": "\"'\\\\x01\\\\x08\\\\x15S'\""}, {"return": "\"'\\\\x01\\\\x0eA_'\""}, {"return": "\"'n\\\\x06\\\\nM'\""}], "parsed_inputs": [[["pk", "(3, 33)"], ["ciphertext", "\"123456\""]], [["pk", "(5, 77)"], ["ciphertext", "\"abcdefg\""]], [["pk", "(2, 17)"], ["ciphertext", "\"hello\""]], [["pk", "(7, 91)"], ["ciphertext", "\"1234567890\""]], [["pk", "(11, 143)"], ["ciphertext", "\"abcdefghijklmnopqrstuvwxyz\""]], [["pk", "(13, 169)"], ["ciphertext", "\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\""]], [["pk", "(17, 221)"], ["ciphertext", "\"!@#$%^&*()\""]], [["pk", "(19, 247)"], ["ciphertext", "\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\""]], [["pk", "(23, 299)"], ["ciphertext", "\"1234567890abcdefghijklmnopqrstuvwxyz\""]], [["pk", "(29, 353)"], ["ciphertext", "\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\""]]], "exec_code": "def decrypt(pk, ciphertext):\n    key, n = pk\n    plain = [chr(int(char) ** key % n) for char in ciphertext]\n    return ''.join(plain)\n", "output": "The function is:\n\n```python\ndef decrypt(pk, ciphertext):\n    key, n = pk\n    plain = [chr(int(char) ** key % n) for char in ciphertext]\n    return ''.join(plain)\n\n```", "choosed_example_idx": [9, 1, 8, 4, 7, 2, 5, 6], "prompt": "Function: decrypt\n\nInput: dict(pk=(29, 353), ciphertext=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"), Output: \"<class 'ValueError'>: invalid literal for int() with base 10: 'a'\"\nInput: dict(pk=(5, 77), ciphertext=\"abcdefg\"), Output: \"<class 'ValueError'>: invalid literal for int() with base 10: 'a'\"\nInput: dict(pk=(23, 299), ciphertext=\"1234567890abcdefghijklmnopqrstuvwxyz\"), Output: \"<class 'ValueError'>: invalid literal for int() with base 10: 'a'\"\nInput: dict(pk=(11, 143), ciphertext=\"abcdefghijklmnopqrstuvwxyz\"), Output: \"<class 'ValueError'>: invalid literal for int() with base 10: 'a'\"\nInput: dict(pk=(19, 247), ciphertext=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"), Output: \"<class 'ValueError'>: invalid literal for int() with base 10: 'a'\"\nInput: dict(pk=(2, 17), ciphertext=\"hello\"), Output: \"<class 'ValueError'>: invalid literal for int() with base 10: 'h'\"\nInput: dict(pk=(13, 169), ciphertext=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"), Output: \"<class 'ValueError'>: invalid literal for int() with base 10: 'A'\"\nInput: dict(pk=(17, 221), ciphertext=\"!@#$%^&*()\"), Output: \"<class 'ValueError'>: invalid literal for int() with base 10: '!'\"\n\nWrite a function that generates the output from the input.\n", "id": "eb5ff7bc9fd55815faf1f4a1b7919eb87ae398f6_0"}
{"example_str": "INFINITY = float('inf')\n\nexamples = [\n    dict(a=1, b=2),\n    dict(a=INFINITY, b=3),\n    dict(a=4, b=INFINITY),\n    dict(a=INFINITY, b=INFINITY),\n    dict(a=-1, b=1),\n    dict(a=0, b=0),\n    dict(a=-INFINITY, b=1),\n    dict(a=1, b=-INFINITY),\n    dict(a=-INFINITY, b=-INFINITY),\n    dict(a=0, b=INFINITY)\n]", "code": "def addWithInfinity(a, b):\n    \"\"\"Adds a and b, with the possibility that either might be infinity.\"\"\"\n    if a == INFINITY or b == INFINITY:\n        return INFINITY\n    else:\n        return a + b\n", "func_name": "addWithInfinity", "exec_status": true, "example_inputs": ["\"{'a': 1, 'b': 2}\"", "\"{'a': inf, 'b': 3}\"", "\"{'a': 4, 'b': inf}\"", "\"{'a': inf, 'b': inf}\"", "\"{'a': -1, 'b': 1}\"", "\"{'a': 0, 'b': 0}\"", "\"{'a': -inf, 'b': 1}\"", "\"{'a': 1, 'b': -inf}\"", "\"{'a': -inf, 'b': -inf}\"", "\"{'a': 0, 'b': inf}\""], "example_outputs": [{"trace": "[\"{'a': 1, 'b': 2}\", \"Line 2->    if a == INFINITY or b == INFINITY:\", \"Line 5->        return a + b\"]", "return": "\"3\""}, {"trace": "[\"{'a': inf, 'b': 3}\", \"Line 2->    if a == INFINITY or b == INFINITY:\", \"Line 3->        return INFINITY\"]", "return": "\"inf\""}, {"trace": "[\"{'a': 4, 'b': inf}\", \"Line 2->    if a == INFINITY or b == INFINITY:\", \"Line 3->        return INFINITY\"]", "return": "\"inf\""}, {"trace": "[\"{'a': inf, 'b': inf}\", \"Line 2->    if a == INFINITY or b == INFINITY:\", \"Line 3->        return INFINITY\"]", "return": "\"inf\""}, {"trace": "[\"{'a': -1, 'b': 1}\", \"Line 2->    if a == INFINITY or b == INFINITY:\", \"Line 5->        return a + b\"]", "return": "\"0\""}, {"trace": "[\"{'a': 0, 'b': 0}\", \"Line 2->    if a == INFINITY or b == INFINITY:\", \"Line 5->        return a + b\"]", "return": "\"0\""}, {"trace": "[\"{'a': -inf, 'b': 1}\", \"Line 2->    if a == INFINITY or b == INFINITY:\", \"Line 5->        return a + b\"]", "return": "\"-inf\""}, {"trace": "[\"{'a': 1, 'b': -inf}\", \"Line 2->    if a == INFINITY or b == INFINITY:\", \"Line 5->        return a + b\"]", "return": "\"-inf\""}, {"trace": "[\"{'a': -inf, 'b': -inf}\", \"Line 2->    if a == INFINITY or b == INFINITY:\", \"Line 5->        return a + b\"]", "return": "\"-inf\""}, {"trace": "[\"{'a': 0, 'b': inf}\", \"Line 2->    if a == INFINITY or b == INFINITY:\", \"Line 3->        return INFINITY\"]", "return": "\"inf\""}], "parsed_inputs": [[["a", "1"], ["b", "2"]], [["a", "INFINITY"], ["b", "3"]], [["a", "4"], ["b", "INFINITY"]], [["a", "INFINITY"], ["b", "INFINITY"]], [["a", "-1"], ["b", "1"]], [["a", "0"], ["b", "0"]], [["a", "(-INFINITY)"], ["b", "1"]], [["a", "1"], ["b", "(-INFINITY)"]], [["a", "(-INFINITY)"], ["b", "(-INFINITY)"]], [["a", "0"], ["b", "INFINITY"]]], "exec_code": "def addWithInfinity(a, b):\n    \"\"\"Adds a and b, with the possibility that either might be infinity.\"\"\"\n    if a == INFINITY or b == INFINITY:\n        return INFINITY\n    else:\n        return a + b\n", "output": "The function is:\n\n```python\ndef addWithInfinity(a, b):\n    \"\"\"Adds a and b, with the possibility that either might be infinity.\"\"\"\n    if a == INFINITY or b == INFINITY:\n        return INFINITY\n    else:\n        return a + b\n\n```", "choosed_example_idx": [5, 0, 3, 1, 4, 8, 7], "prompt": "Input: dict(a=0, b=0), Output: \"0\"\nInput: dict(a=1, b=2), Output: \"3\"\nInput: dict(a=INFINITY, b=INFINITY), Output: \"inf\"\nInput: dict(a=INFINITY, b=3), Output: \"inf\"\nInput: dict(a=-1, b=1), Output: \"0\"\nInput: dict(a=(-INFINITY), b=(-INFINITY)), Output: \"-inf\"\nInput: dict(a=1, b=(-INFINITY)), Output: \"-inf\"\n\nWrite a function that generates the output from the input.\n\n\nFunction: addWithInfinity\n\n\n", "id": "94834b79c53897192c1781de8ed3b4c8e2b3e51a_0"}
{"example_str": "examples = [\n    dict(c=1, b=2),\n    dict(c=3.5, b=4.2),\n    dict(c=-1, b=1),\n    dict(c=0, b=0),\n    dict(c=10, b=-5),\n    dict(c=2, b=3),\n    dict(c=1.1, b=2.2),\n    dict(c=-2, b=-3),\n    dict(c=5, b=0),\n    dict(c=7, b=8)\n]\nexamples += [\n    dict(c=10, b=5),             # Example with integers\n    dict(c=3.5, b=2.1),          # Example with floats\n    dict(c=\"Hello, \", b=\"World\"), # Example with strings\n    dict(c=[1, 2], b=[3, 4]),    # Example with lists\n    dict(c=(1,), b=(2, 3)),      # Example with tuples\n    dict(c=0, b=0),              # Example with zero values\n    dict(c=-1, b=-2),            # Example with negative integers\n    dict(c=100, b=-100),         # Example with positive and negative integer\n    dict(c=\"123\", b=\"456\"),      # Example with numeric strings\n    dict(c=0.1, b=0.2)           # Example with small floats\n]\nexamples += [\n    dict(c=1, b=2),        # Both arguments are integers\n    dict(c=1.5, b=2.5),    # Both arguments are floats\n    dict(c=\"Hello, \", b=\"World!\"),  # Both arguments are strings\n    dict(c=[1, 2], b=[3, 4]),  # Both arguments are lists\n    dict(c=(1,), b=(2,)),  # Both arguments are tuples\n    dict(c=1, b=2.5),      # Mixed types: integer and float\n    dict(c=\"Number: \", b=5),  # Mixed types: string and integer\n    dict(c=\"Sum: \", b=3.5),  # Mixed types: string and float\n    dict(c=[1, 2], b=[\"three\", \"four\"]),  # Lists with different types of elements\n    dict(c=(1, 2), b=(3, \"four\")),  # Tuples with different types of elements\n]", "code": "def sum_(c, b):\n    return c + b\n", "func_name": "sum_", "exec_status": true, "example_inputs": ["\"{'c': 1, 'b': 2}\"", "\"{'c': 3.5, 'b': 4.2}\"", "\"{'c': -1, 'b': 1}\"", "\"{'c': 0, 'b': 0}\"", "\"{'c': 10, 'b': -5}\"", "\"{'c': 2, 'b': 3}\"", "\"{'c': 1.1, 'b': 2.2}\"", "\"{'c': -2, 'b': -3}\"", "\"{'c': 5, 'b': 0}\"", "\"{'c': 7, 'b': 8}\""], "example_outputs": [{"return": "\"3\""}, {"return": "\"7.7\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"3.3000000000000003\""}, {"return": "\"-5\""}, {"return": "\"5\""}, {"return": "\"15\""}, {"return": "\"15\""}, {"return": "\"5.6\""}, {"return": "\"'Hello, World'\""}, {"return": "\"[1, 2, 3, 4]\""}, {"return": "\"(1, 2, 3)\""}, {"return": "\"0\""}, {"return": "\"-3\""}, {"return": "\"0\""}, {"return": "\"'123456'\""}, {"return": "\"0.30000000000000004\""}, {"return": "\"3\""}, {"return": "\"4.0\""}, {"return": "\"'Hello, World!'\""}, {"return": "\"[1, 2, 3, 4]\""}, {"return": "\"(1, 2)\""}, {"return": "\"3.5\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: can only concatenate str (not \\\"int\\\") to str\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: can only concatenate str (not \\\"float\\\") to str\""}, {"return": "\"[1, 2, 'three', 'four']\""}, {"return": "\"(1, 2, 3, 'four')\""}], "parsed_inputs": [[["c", "1"], ["b", "2"]], [["c", "3.5"], ["b", "4.2"]], [["c", "-1"], ["b", "1"]], [["c", "0"], ["b", "0"]], [["c", "10"], ["b", "-5"]], [["c", "2"], ["b", "3"]], [["c", "1.1"], ["b", "2.2"]], [["c", "-2"], ["b", "-3"]], [["c", "5"], ["b", "0"]], [["c", "7"], ["b", "8"]]], "exec_code": "def sum_(c, b):\n    return c + b\n", "output": "The function is:\n\n```python\ndef sum_(c, b):\n    return c + b\n\n```", "choosed_example_idx": [1, 4, 5, 7, 0, 9, 3, 6, 8], "prompt": "Write a function that generates the output from the input.\nFunction: sum_\nInput: dict(c=3.5, b=4.2), Output: \"7.7\"\nInput: dict(c=10, b=-5), Output: \"5\"\nInput: dict(c=2, b=3), Output: \"5\"\nInput: dict(c=-2, b=-3), Output: \"-5\"\nInput: dict(c=1, b=2), Output: \"3\"\nInput: dict(c=7, b=8), Output: \"15\"\nInput: dict(c=0, b=0), Output: \"0\"\nInput: dict(c=1.1, b=2.2), Output: \"3.3000000000000003\"\nInput: dict(c=5, b=0), Output: \"5\"\n\n", "id": "3bf7e63819797ca809022e1db00cca63f86e27e9_0"}
{"example_str": "examples = [\n    dict(st=\"hello,world\"),\n    dict(st=\"a, b, c\"),\n    dict(st=\"1,2,3,4,5\"),\n    dict(st=\"apple, banana, orange\"),\n    dict(st=\"\"),\n    dict(st=\"   \"),\n    dict(st=\"a,b,c,d,e,f,g\"),\n    dict(st=\"hello , world\"),\n    dict(st=\"1, 2, 3, 4, 5, 6\"),\n    dict(st=\"abc,def,ghi,jkl,mno\"),\n]\nexamples += [\n    dict(st=\"apple, orange, banana\"),  # Simple case with spaces\n    dict(st=\"apple,orange,banana\"),  # No spaces\n    dict(st=\"  apple , orange , banana  \"),  # Extra spaces around elements\n    dict(st=\"apple, , banana\"),  # Includes an empty string\n    dict(st=\"\"),  # Empty input string\n    dict(st=\" , , \"),  # Only commas and spaces\n    dict(st=\"apple,orange,banana,\"),  # Trailing comma\n    dict(st=\",apple,orange,banana\"),  # Leading comma\n    dict(st=\"apple,orange,,banana\"),  # Consecutive commas\n    dict(st=\"apple,orange,banana, , \")  # Trailing comma with spaces\n]\nexamples += [\n    dict(st=\"apple, orange, banana\"),\n    dict(st=\"  dog,cat , bird  \"),\n    dict(st=\"  , , , \"),\n    dict(st=\"one, two, three, four\"),\n    dict(st=\"car,,bike, ,plane\"),\n    dict(st=\"  red, blue , green \"),\n    dict(st=\"a,b,c,d,e,f\"),\n    dict(st=\"1, 2, 3, 4, 5\"),\n    dict(st=\"hello,world\"),\n    dict(st=\"space, ,comma, ,separated\")\n]", "code": "def parse(st):\n    return list(map(lambda s: s.strip(), list(filter(lambda s: s != '', st.\n        split(',')))))\n", "func_name": "parse", "exec_status": true, "example_inputs": ["\"{'st': 'hello,world'}\"", "\"{'st': 'a, b, c'}\"", "\"{'st': '1,2,3,4,5'}\"", "\"{'st': 'apple, banana, orange'}\"", "\"{'st': ''}\"", "\"{'st': '   '}\"", "\"{'st': 'a,b,c,d,e,f,g'}\"", "\"{'st': 'hello , world'}\"", "\"{'st': '1, 2, 3, 4, 5, 6'}\"", "\"{'st': 'abc,def,ghi,jkl,mno'}\""], "example_outputs": [{"return": "\"['hello', 'world']\""}, {"return": "\"['a', 'b', 'c']\""}, {"return": "\"['1', '2', '3', '4', '5']\""}, {"return": "\"['apple', 'banana', 'orange']\""}, {"return": "\"[]\""}, {"return": "\"['']\""}, {"return": "\"['a', 'b', 'c', 'd', 'e', 'f', 'g']\""}, {"return": "\"['hello', 'world']\""}, {"return": "\"['1', '2', '3', '4', '5', '6']\""}, {"return": "\"['abc', 'def', 'ghi', 'jkl', 'mno']\""}, {"return": "\"['apple', 'orange', 'banana']\""}, {"return": "\"['apple', 'orange', 'banana']\""}, {"return": "\"['apple', 'orange', 'banana']\""}, {"return": "\"['apple', '', 'banana']\""}, {"return": "\"[]\""}, {"return": "\"['', '', '']\""}, {"return": "\"['apple', 'orange', 'banana']\""}, {"return": "\"['apple', 'orange', 'banana']\""}, {"return": "\"['apple', 'orange', 'banana']\""}, {"return": "\"['apple', 'orange', 'banana', '', '']\""}, {"return": "\"['apple', 'orange', 'banana']\""}, {"return": "\"['dog', 'cat', 'bird']\""}, {"return": "\"['', '', '', '']\""}, {"return": "\"['one', 'two', 'three', 'four']\""}, {"return": "\"['car', 'bike', '', 'plane']\""}, {"return": "\"['red', 'blue', 'green']\""}, {"return": "\"['a', 'b', 'c', 'd', 'e', 'f']\""}, {"return": "\"['1', '2', '3', '4', '5']\""}, {"return": "\"['hello', 'world']\""}, {"return": "\"['space', '', 'comma', '', 'separated']\""}], "parsed_inputs": [[["st", "\"hello,world\""]], [["st", "\"a, b, c\""]], [["st", "\"1,2,3,4,5\""]], [["st", "\"apple, banana, orange\""]], [["st", "\"\""]], [["st", "\"   \""]], [["st", "\"a,b,c,d,e,f,g\""]], [["st", "\"hello , world\""]], [["st", "\"1, 2, 3, 4, 5, 6\""]], [["st", "\"abc,def,ghi,jkl,mno\""]]], "exec_code": "def parse(st):\n    return list(map(lambda s: s.strip(), list(filter(lambda s: s != '', st.\n        split(',')))))\n", "output": "The function is:\n\n```python\ndef parse(st):\n    return list(map(lambda s: s.strip(), list(filter(lambda s: s != '', st.\n        split(',')))))\n\n```", "choosed_example_idx": [2, 6, 9], "prompt": "Function: parse\n\nInput: dict(st=\"1,2,3,4,5\"), Output: \"['1', '2', '3', '4', '5']\"\nInput: dict(st=\"a,b,c,d,e,f,g\"), Output: \"['a', 'b', 'c', 'd', 'e', 'f', 'g']\"\nInput: dict(st=\"abc,def,ghi,jkl,mno\"), Output: \"['abc', 'def', 'ghi', 'jkl', 'mno']\"\n\n\nWrite a function that generates the output from the input.\n", "id": "1f31d891f2e987129039bf7d3565d60b39049baa_0"}
{"example_str": "examples = [\n    dict(routines=['routine1']),\n    dict(routines=['routine1', 'routine2']),\n    dict(routines=['routine1', 'routine2', 'routine3']),\n    dict(routines=[]),\n    dict(routines=['']),\n    dict(routines=['routine1', '']),\n    dict(routines=['routine1', 'routine2', 'routine3', 'routine4', 'routine5']),\n    dict(routines=['a', 'b', 'c']),\n    dict(routines=['1', '2', '3']),\n    dict(routines=['routine_with_underscore', 'routine_with_hyphen']),\n]\nexamples += [\n    dict(routines=[]),\n    dict(routines=[\"main\"]),\n    dict(routines=[\"init\", \"shutdown\"]),\n    dict(routines=[\"load\", \"update\", \"draw\", \"exit\"]),\n    dict(routines=[\"start\", \"stop\"]),\n    dict(routines=[\"connect\", \"disconnect\", \"reconnect\"]),\n    dict(routines=[\"read\", \"write\", \"open\", \"close\", \"delete\"]),\n    dict(routines=[\"create_user\", \"delete_user\"]),\n    dict(routines=[\"login\", \"logout\", \"reset_password\"]),\n    dict(routines=[\"fetch_data\", \"process_data\", \"save_data\", \"log_data\"])\n]\nexamples += [\n    dict(routines=[]),\n    dict(routines=['main']),\n    dict(routines=['init', 'start']),\n    dict(routines=['load', 'save', 'exit']),\n    dict(routines=['compute', 'display', 'update', 'log']),\n    dict(routines=['read', 'write']),\n    dict(routines=['connect', 'disconnect', 'reconnect']),\n    dict(routines=['push', 'pop', 'enqueue', 'dequeue']),\n    dict(routines=['create', 'destroy']),\n    dict(routines=['begin', 'end', 'rollback', 'commit'])\n]", "code": "def _format_calls(routines):\n    \"\"\"Return source for CALL instructions to routines.\"\"\"\n    return '\\n'.join('{:8}{:8}{}'.format('', 'CALL', r) for r in routines)\n", "func_name": "_format_calls", "exec_status": true, "example_inputs": ["\"{'routines': ['routine1']}\"", "\"{'routines': ['routine1', 'routine2']}\"", "\"{'routines': ['routine1', 'routine2', 'routine3']}\"", "\"{'routines': []}\"", "\"{'routines': ['']}\"", "\"{'routines': ['routine1', '']}\"", "\"{'routines': ['routine1', 'routine2', 'routine3', 'routine4', 'routine5']}\"", "\"{'routines': ['a', 'b', 'c']}\"", "\"{'routines': ['1', '2', '3']}\"", "\"{'routines': ['routine_with_underscore', 'routine_with_hyphen']}\""], "example_outputs": [{"return": "\"'        CALL    routine1'\""}, {"return": "\"'        CALL    routine1\\\\n        CALL    routine2'\""}, {"return": "\"'        CALL    routine1\\\\n        CALL    routine2\\\\n        CALL    routine3'\""}, {"return": "\"''\""}, {"return": "\"'        CALL    '\""}, {"return": "\"'        CALL    routine1\\\\n        CALL    '\""}, {"return": "\"'        CALL    routine1\\\\n        CALL    routine2\\\\n        CALL    routine3\\\\n        CALL    routine4\\\\n        CALL    routine5'\""}, {"return": "\"'        CALL    a\\\\n        CALL    b\\\\n        CALL    c'\""}, {"return": "\"'        CALL    1\\\\n        CALL    2\\\\n        CALL    3'\""}, {"return": "\"'        CALL    routine_with_underscore\\\\n        CALL    routine_with_hyphen'\""}, {"return": "\"''\""}, {"return": "\"'        CALL    main'\""}, {"return": "\"'        CALL    init\\\\n        CALL    shutdown'\""}, {"return": "\"'        CALL    load\\\\n        CALL    update\\\\n        CALL    draw\\\\n        CALL    exit'\""}, {"return": "\"'        CALL    start\\\\n        CALL    stop'\""}, {"return": "\"'        CALL    connect\\\\n        CALL    disconnect\\\\n        CALL    reconnect'\""}, {"return": "\"'        CALL    read\\\\n        CALL    write\\\\n        CALL    open\\\\n        CALL    close\\\\n        CALL    delete'\""}, {"return": "\"'        CALL    create_user\\\\n        CALL    delete_user'\""}, {"return": "\"'        CALL    login\\\\n        CALL    logout\\\\n        CALL    reset_password'\""}, {"return": "\"'        CALL    fetch_data\\\\n        CALL    process_data\\\\n        CALL    save_data\\\\n        CALL    log_data'\""}, {"return": "\"''\""}, {"return": "\"'        CALL    main'\""}, {"return": "\"'        CALL    init\\\\n        CALL    start'\""}, {"return": "\"'        CALL    load\\\\n        CALL    save\\\\n        CALL    exit'\""}, {"return": "\"'        CALL    compute\\\\n        CALL    display\\\\n        CALL    update\\\\n        CALL    log'\""}, {"return": "\"'        CALL    read\\\\n        CALL    write'\""}, {"return": "\"'        CALL    connect\\\\n        CALL    disconnect\\\\n        CALL    reconnect'\""}, {"return": "\"'        CALL    push\\\\n        CALL    pop\\\\n        CALL    enqueue\\\\n        CALL    dequeue'\""}, {"return": "\"'        CALL    create\\\\n        CALL    destroy'\""}, {"return": "\"'        CALL    begin\\\\n        CALL    end\\\\n        CALL    rollback\\\\n        CALL    commit'\""}], "parsed_inputs": [[["routines", "['routine1']"]], [["routines", "['routine1', 'routine2']"]], [["routines", "['routine1', 'routine2', 'routine3']"]], [["routines", "[]"]], [["routines", "['']"]], [["routines", "['routine1', '']"]], [["routines", "['routine1', 'routine2', 'routine3', 'routine4', 'routine5']"]], [["routines", "['a', 'b', 'c']"]], [["routines", "['1', '2', '3']"]], [["routines", "['routine_with_underscore', 'routine_with_hyphen']"]]], "exec_code": "def _format_calls(routines):\n    \"\"\"Return source for CALL instructions to routines.\"\"\"\n    return '\\n'.join('{:8}{:8}{}'.format('', 'CALL', r) for r in routines)\n", "output": "The function is:\n\n```python\ndef _format_calls(routines):\n    \"\"\"Return source for CALL instructions to routines.\"\"\"\n    return '\\n'.join('{:8}{:8}{}'.format('', 'CALL', r) for r in routines)\n\n```", "choosed_example_idx": [1, 0, 7, 5, 8, 3, 9, 6, 4, 2], "prompt": "Function: _format_calls\n\nInput: dict(routines=['routine1', 'routine2']), Output: \"'        CALL    routine1\\\\n        CALL    routine2'\"\nInput: dict(routines=['routine1']), Output: \"'        CALL    routine1'\"\nInput: dict(routines=['a', 'b', 'c']), Output: \"'        CALL    a\\\\n        CALL    b\\\\n        CALL    c'\"\nInput: dict(routines=['routine1', '']), Output: \"'        CALL    routine1\\\\n        CALL    '\"\nInput: dict(routines=['1', '2', '3']), Output: \"'        CALL    1\\\\n        CALL    2\\\\n        CALL    3'\"\nInput: dict(routines=[]), Output: \"''\"\nInput: dict(routines=['routine_with_underscore', 'routine_with_hyphen']), Output: \"'        CALL    routine_with_underscore\\\\n        CALL    routine_with_hyphen'\"\nInput: dict(routines=['routine1', 'routine2', 'routine3', 'routine4', 'routine5']), Output: \"'        CALL    routine1\\\\n        CALL    routine2\\\\n        CALL    routine3\\\\n        CALL    routine4\\\\n        CALL    routine5'\"\nInput: dict(routines=['']), Output: \"'        CALL    '\"\nInput: dict(routines=['routine1', 'routine2', 'routine3']), Output: \"'        CALL    routine1\\\\n        CALL    routine2\\\\n        CALL    routine3'\"\n\n\nWrite a function that generates the output from the input.\n", "id": "e7cd24650bfee7d8f520b4cc290118f63183f071_0"}
{"example_str": "examples = [\n    dict(type='OPST'),\n    dict(type='APT'),\n    dict(type='OR'),\n    dict(type='HOUSE'),\n    dict(type='BUILDING'),\n    dict(type='ROOM'),\n    dict(type='OFFICE'),\n    dict(type='STORE'),\n    dict(type='FACTORY'),\n    dict(type='OTHER'),\n]\nexamples += [\n    dict(type='OPST'),\n    dict(type='APT'),\n    dict(type='OR'),\n    dict(type='APT'),\n    dict(type='OPST'),\n    dict(type='OR'),\n    dict(type='APT'),\n    dict(type='OPST'),\n    dict(type='OR'),\n    dict(type='APT')\n]\nexamples += [\n    dict(type='OPST'),\n    dict(type='APT'),\n    dict(type='OR'),\n    dict(type='APT'),\n    dict(type='OPST'),\n    dict(type='OR'),\n    dict(type='APT'),\n    dict(type='OPST'),\n    dict(type='OR'),\n    dict(type='APT')\n]", "code": "def translate_type(type):\n    if type == 'OPST':\n        return '오피스텔'\n    elif type == 'APT':\n        return '아파트'\n    elif type == 'OR':\n        return '원룸'\n", "func_name": "translate_type", "exec_status": true, "example_inputs": ["\"{'type': 'OPST'}\"", "\"{'type': 'APT'}\"", "\"{'type': 'OR'}\"", "\"{'type': 'HOUSE'}\"", "\"{'type': 'BUILDING'}\"", "\"{'type': 'ROOM'}\"", "\"{'type': 'OFFICE'}\"", "\"{'type': 'STORE'}\"", "\"{'type': 'FACTORY'}\"", "\"{'type': 'OTHER'}\""], "example_outputs": [{"return": "\"'\\uc624\\ud53c\\uc2a4\\ud154'\""}, {"return": "\"'\\uc544\\ud30c\\ud2b8'\""}, {"return": "\"'\\uc6d0\\ub8f8'\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"'\\uc624\\ud53c\\uc2a4\\ud154'\""}, {"return": "\"'\\uc544\\ud30c\\ud2b8'\""}, {"return": "\"'\\uc6d0\\ub8f8'\""}, {"return": "\"'\\uc544\\ud30c\\ud2b8'\""}, {"return": "\"'\\uc624\\ud53c\\uc2a4\\ud154'\""}, {"return": "\"'\\uc6d0\\ub8f8'\""}, {"return": "\"'\\uc544\\ud30c\\ud2b8'\""}, {"return": "\"'\\uc624\\ud53c\\uc2a4\\ud154'\""}, {"return": "\"'\\uc6d0\\ub8f8'\""}, {"return": "\"'\\uc544\\ud30c\\ud2b8'\""}, {"return": "\"'\\uc624\\ud53c\\uc2a4\\ud154'\""}, {"return": "\"'\\uc544\\ud30c\\ud2b8'\""}, {"return": "\"'\\uc6d0\\ub8f8'\""}, {"return": "\"'\\uc544\\ud30c\\ud2b8'\""}, {"return": "\"'\\uc624\\ud53c\\uc2a4\\ud154'\""}, {"return": "\"'\\uc6d0\\ub8f8'\""}, {"return": "\"'\\uc544\\ud30c\\ud2b8'\""}, {"return": "\"'\\uc624\\ud53c\\uc2a4\\ud154'\""}, {"return": "\"'\\uc6d0\\ub8f8'\""}, {"return": "\"'\\uc544\\ud30c\\ud2b8'\""}], "parsed_inputs": [[["type", "\"OPST\""]], [["type", "\"APT\""]], [["type", "\"OR\""]], [["type", "\"HOUSE\""]], [["type", "\"BUILDING\""]], [["type", "\"ROOM\""]], [["type", "\"OFFICE\""]], [["type", "\"STORE\""]], [["type", "\"FACTORY\""]], [["type", "\"OTHER\""]]], "exec_code": "def translate_type(type):\n    if type == 'OPST':\n        return '오피스텔'\n    elif type == 'APT':\n        return '아파트'\n    elif type == 'OR':\n        return '원룸'\n", "output": "The function is:\n\n```python\ndef translate_type(type):\n    if type == 'OPST':\n        return '오피스텔'\n    elif type == 'APT':\n        return '아파트'\n    elif type == 'OR':\n        return '원룸'\n\n```", "choosed_example_idx": [4, 7, 0, 2, 5, 3, 9, 8, 6], "prompt": "Write a function that generates the output from the input.\n\nFunction: translate_type\nInput: dict(type=\"BUILDING\"), Output: \"None\"\nInput: dict(type=\"STORE\"), Output: \"None\"\nInput: dict(type=\"OPST\"), Output: \"'\\uc624\\ud53c\\uc2a4\\ud154'\"\nInput: dict(type=\"OR\"), Output: \"'\\uc6d0\\ub8f8'\"\nInput: dict(type=\"ROOM\"), Output: \"None\"\nInput: dict(type=\"HOUSE\"), Output: \"None\"\nInput: dict(type=\"OTHER\"), Output: \"None\"\nInput: dict(type=\"FACTORY\"), Output: \"None\"\nInput: dict(type=\"OFFICE\"), Output: \"None\"\n\n", "id": "a374a15b9c7f357b4bfc8eeb2db564a0c52564d7_0"}
{"example_str": "examples = [\n    dict(s=\"apple\"),\n    dict(s=\"banana\"),\n    dict(s=\"\"),\n    dict(s=\"a\"),\n    dict(s=\"abcde\"),\n    dict(s=\"hello world\"),\n    dict(s=\"abcdefghijklmnopqrstuvwxyz\"),\n    dict(s=\"aaaaaa\"),\n    dict(s=\"bcdfghjklmnpqrstvwxyz\"),\n    dict(s=\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"),\n]\nexamples += [\n    dict(s=\"apple\"),        # Contains 'a', prints 1\n    dict(s=\"banana\"),       # Contains 'a', prints 3\n    dict(s=\"cherry\"),       # Contains 'a', prints 0\n    dict(s=\"avocado\"),      # Contains 'a', prints 2\n    dict(s=\"apricot\"),      # Contains 'a', prints 1\n    dict(s=\"blueberry\"),    # Contains 'a', prints 0\n    dict(s=\"\"),             # Empty string, prints 0\n    dict(s=\"aaaa\"),         # Only 'a's, prints 4\n    dict(s=\"123\"),          # No letters, prints 0\n    dict(s=\"aardvark\")      # Contains 'a', prints 3\n]\nexamples += [\n    dict(s='apple'),          # Contains 'a', length 5\n    dict(s='banana'),         # Contains 'a', length 6\n    dict(s=''),               # Empty string, length 0\n    dict(s='hello'),          # Does not contain 'a', length 5\n    dict(s='aaa'),            # Contains 'a', length 3\n    dict(s='abcabc'),         # Contains 'a', length 6\n    dict(s='no apples'),      # Contains 'a', length 9\n    dict(s='AaAa'),           # Contains 'a', length 4 (case sensitive)\n    dict(s='123'),            # Does not contain 'a', length 3\n    dict(s='a quick brown fox jumps over the lazy dog')  # Contains 'a', length 43\n]", "code": "def solution(s):\n    answer = 0\n    element = len(s)\n    print(s.count('a'))\n    return answer\n", "func_name": "solution", "exec_status": true, "example_inputs": ["\"{'s': 'apple'}\"", "\"{'s': 'banana'}\"", "\"{'s': ''}\"", "\"{'s': 'a'}\"", "\"{'s': 'abcde'}\"", "\"{'s': 'hello world'}\"", "\"{'s': 'abcdefghijklmnopqrstuvwxyz'}\"", "\"{'s': 'aaaaaa'}\"", "\"{'s': 'bcdfghjklmnpqrstvwxyz'}\"", "\"{'s': 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'}\""], "example_outputs": [{"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}], "parsed_inputs": [[["s", "\"apple\""]], [["s", "\"banana\""]], [["s", "\"\""]], [["s", "\"a\""]], [["s", "\"abcde\""]], [["s", "\"hello world\""]], [["s", "\"abcdefghijklmnopqrstuvwxyz\""]], [["s", "\"aaaaaa\""]], [["s", "\"bcdfghjklmnpqrstvwxyz\""]], [["s", "\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\""]]], "exec_code": "def solution(s):\n    answer = 0\n    element = len(s)\n    print(s.count('a'))\n    return answer\n", "output": "The function is:\n\n```python\ndef solution(s):\n    answer = 0\n    element = len(s)\n    print(s.count('a'))\n    return answer\n\n```", "choosed_example_idx": [7, 8, 4, 6, 9, 1, 5, 2, 0, 3], "prompt": "Input: dict(s=\"aaaaaa\"), Output: \"0\"\nInput: dict(s=\"bcdfghjklmnpqrstvwxyz\"), Output: \"0\"\nInput: dict(s=\"abcde\"), Output: \"0\"\nInput: dict(s=\"abcdefghijklmnopqrstuvwxyz\"), Output: \"0\"\nInput: dict(s=\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"), Output: \"0\"\nInput: dict(s=\"banana\"), Output: \"0\"\nInput: dict(s=\"hello world\"), Output: \"0\"\nInput: dict(s=\"\"), Output: \"0\"\nInput: dict(s=\"apple\"), Output: \"0\"\nInput: dict(s=\"a\"), Output: \"0\"\n\nFunction: solution\nWrite a function that generates the output from the input.\n", "id": "6d9d12b070caab638bbdf30fb49538660bbac29e_0"}
{"example_str": "examples = [\n    dict(x=5),\n    dict(x=-3),\n    dict(x=0),\n    dict(x=10.5),\n    dict(x=-0.1),\n    dict(x=2**31-1),  # large positive int\n    dict(x=-2**31),  # large negative int\n    dict(x=3.14),\n    dict(x=-float('inf')),  # negative infinity\n    dict(x=float('nan')),  # not a number (should raise an error)\n]\nexamples += [\n    dict(x=-10),\n    dict(x=0),\n    dict(x=5),\n    dict(x=-3.5),\n    dict(x=2.2),\n    dict(x=-100),\n    dict(x=50),\n    dict(x=-0.001),\n    dict(x=1),\n    dict(x=-999)\n]\nexamples += [\n    dict(x=-1),\n    dict(x=-10),\n    dict(x=0),\n    dict(x=1),\n    dict(x=-5.5),\n    dict(x=100),\n    dict(x=-0.001),\n    dict(x=50),\n    dict(x=-999),\n    dict(x=0.5)\n]", "code": "def myFilter(x):\n    return x < 0\n", "func_name": "myFilter", "exec_status": true, "example_inputs": ["\"{'x': 5}\"", "\"{'x': -3}\"", "\"{'x': 0}\"", "\"{'x': 10.5}\"", "\"{'x': -0.1}\"", "\"{'x': 2147483647}\"", "\"{'x': -2147483648}\"", "\"{'x': 3.14}\"", "\"{'x': -inf}\"", "\"{'x': nan}\""], "example_outputs": [{"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}], "parsed_inputs": [[["x", "5"]], [["x", "-3"]], [["x", "0"]], [["x", "10.5"]], [["x", "-0.1"]], [["x", "(2 ** 31 - 1)"]], [["x", "(-2 ** 31)"]], [["x", "3.14"]], [["x", "(-float('inf'))"]], [["x", "float('nan')"]]], "exec_code": "def myFilter(x):\n    return x < 0\n", "output": "The function is:\n\n```python\ndef myFilter(x):\n    return x < 0\n\n```", "choosed_example_idx": [0, 6, 1, 3, 4, 5], "prompt": "Function: myFilter\nWrite a function that generates the output from the input.\nInput: dict(x=5), Output: \"False\"\nInput: dict(x=(-2 ** 31)), Output: \"True\"\nInput: dict(x=-3), Output: \"True\"\nInput: dict(x=10.5), Output: \"False\"\nInput: dict(x=-0.1), Output: \"True\"\nInput: dict(x=(2 ** 31 - 1)), Output: \"False\"\n\n", "id": "c94326aa8925e1802d88ef801ccee36bf056ccbf_0"}
{"example_str": "examples = [\n    dict(obj={'is_alive': True, 'is_visible': True, 'isTargetable': True}),\n    dict(obj={'is_alive': False, 'is_visible': True, 'isTargetable': True}),\n    dict(obj={'is_alive': True, 'is_visible': False, 'isTargetable': True}),\n    dict(obj={'is_alive': True, 'is_visible': True, 'isTargetable': False}),\n    dict(obj={'is_alive': False, 'is_visible': False, 'isTargetable': False}),\n    dict(obj={'is_alive': True, 'is_visible': True}),\n    dict(obj={'is_alive': False, 'is_visible': False}),\n    dict(obj={'is_alive': True}),\n    dict(obj={}),\n    dict(obj=None),\n]\nexamples += [\n    dict(obj=type('Obj', (), {'is_alive': True, 'is_visible': True, 'isTargetable': True})),\n    dict(obj=type('Obj', (), {'is_alive': False, 'is_visible': True, 'isTargetable': True})),\n    dict(obj=type('Obj', (), {'is_alive': True, 'is_visible': False, 'isTargetable': True})),\n    dict(obj=type('Obj', (), {'is_alive': True, 'is_visible': True, 'isTargetable': False})),\n    dict(obj=type('Obj', (), {'is_alive': False, 'is_visible': False, 'isTargetable': True})),\n    dict(obj=type('Obj', (), {'is_alive': False, 'is_visible': True, 'isTargetable': False})),\n    dict(obj=type('Obj', (), {'is_alive': True, 'is_visible': False, 'isTargetable': False})),\n    dict(obj=type('Obj', (), {'is_alive': False, 'is_visible': False, 'isTargetable': False})),\n    dict(obj=type('Obj', (), {'is_alive': True, 'is_visible': True, 'isTargetable': True})),\n    dict(obj=type('Obj', (), {'is_alive': False, 'is_visible': False, 'isTargetable': True}))\n]", "code": "def ValidTarget(obj):\n    return obj and obj.is_alive and obj.is_visible and obj.isTargetable\n", "func_name": "ValidTarget", "exec_status": true, "example_inputs": ["\"{'obj': {'is_alive': True, 'is_visible': True, 'isTargetable': True}}\"", "\"{'obj': {'is_alive': False, 'is_visible': True, 'isTargetable': True}}\"", "\"{'obj': {'is_alive': True, 'is_visible': False, 'isTargetable': True}}\"", "\"{'obj': {'is_alive': True, 'is_visible': True, 'isTargetable': False}}\"", "\"{'obj': {'is_alive': False, 'is_visible': False, 'isTargetable': False}}\"", "\"{'obj': {'is_alive': True, 'is_visible': True}}\"", "\"{'obj': {'is_alive': False, 'is_visible': False}}\"", "\"{'obj': {'is_alive': True}}\"", "\"{'obj': {}}\"", "\"{'obj': None}\""], "example_outputs": [{"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'is_alive'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'is_alive'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'is_alive'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'is_alive'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'is_alive'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'is_alive'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'is_alive'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'is_alive'\""}, {"return": "\"{}\""}, {"return": "\"None\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}], "parsed_inputs": [[["obj", "{'is_alive': True, 'is_visible': True, 'isTargetable': True}"]], [["obj", "{'is_alive': False, 'is_visible': True, 'isTargetable': True}"]], [["obj", "{'is_alive': True, 'is_visible': False, 'isTargetable': True}"]], [["obj", "{'is_alive': True, 'is_visible': True, 'isTargetable': False}"]], [["obj", "{'is_alive': False, 'is_visible': False, 'isTargetable': False}"]], [["obj", "{'is_alive': True, 'is_visible': True}"]], [["obj", "{'is_alive': False, 'is_visible': False}"]], [["obj", "{'is_alive': True}"]], [["obj", "{}"]], [["obj", "None"]]], "exec_code": "def ValidTarget(obj):\n    return obj and obj.is_alive and obj.is_visible and obj.isTargetable\n", "output": "The function is:\n\n```python\ndef ValidTarget(obj):\n    return obj and obj.is_alive and obj.is_visible and obj.isTargetable\n\n```", "choosed_example_idx": [9, 2, 6, 4, 5], "prompt": "Function: ValidTarget\nInput: dict(obj=None), Output: \"None\"\nInput: dict(obj={'is_alive': True, 'is_visible': False, 'isTargetable': True}), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'is_alive'\"\nInput: dict(obj={'is_alive': False, 'is_visible': False}), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'is_alive'\"\nInput: dict(obj={'is_alive': False, 'is_visible': False, 'isTargetable': False}), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'is_alive'\"\nInput: dict(obj={'is_alive': True, 'is_visible': True}), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'is_alive'\"\n\nWrite a function that generates the output from the input.\n", "id": "2f806c2f031ca67c7cfd2c3a9f7c9bf153d21280_0"}
{"example_str": "examples = [\n    dict(n=5),\n    dict(n=0),\n    dict(n=-3),\n    dict(n=10),\n    dict(n=1),\n    dict(n=2.5),  # this will raise an error\n    dict(n=-1),  # this will raise an error\n    dict(n='a'),  # this will raise an error\n    dict(n=[1, 2, 3]),  # this will raise an error\n    dict(n=None),  # this will raise an error\n]\nexamples += [\n    dict(n=0),  # Factorial of 0, expected output: 1\n    dict(n=1),  # Factorial of 1, expected output: 1\n    dict(n=5),  # Factorial of 5, expected output: 120\n    dict(n=10), # Factorial of 10, expected output: 3628800\n    dict(n=20), # Factorial of 20, expected output: 2432902008176640000\n    dict(n=-1), # Negative input, expected to trigger error message\n    dict(n=3.5), # Non-integer input, expected to trigger error message\n    dict(n=\"5\"), # String input, expected to trigger error message\n    dict(n=True), # Boolean input, expected to trigger error message\n    dict(n=15)  # Factorial of 15, expected output: 1307674368000\n]\nexamples += [\n    dict(n=0),\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10)\n]", "code": "def factorial(n):\n    try:\n        if isinstance(n, int) == False or n < 0:\n            raise ValueError\n    except ValueError:\n        print('ERROR! Factorial only accepts positive integer values')\n    else:\n        x = 1\n        for i in range(1, n + 1):\n            x *= i\n        return x\n", "func_name": "factorial", "exec_status": true, "example_inputs": ["\"{'n': 5}\"", "\"{'n': 0}\"", "\"{'n': -3}\"", "\"{'n': 10}\"", "\"{'n': 1}\"", "\"{'n': 2.5}\"", "\"{'n': -1}\"", "\"{'n': 'a'}\"", "\"{'n': [1, 2, 3]}\"", "\"{'n': None}\""], "example_outputs": [{"return": "\"120\""}, {"return": "\"1\""}, {"return": "\"None\""}, {"return": "\"3628800\""}, {"return": "\"1\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"120\""}, {"return": "\"3628800\""}, {"return": "\"2432902008176640000\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"1\""}, {"return": "\"1307674368000\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"6\""}, {"return": "\"24\""}, {"return": "\"120\""}, {"return": "\"720\""}, {"return": "\"5040\""}, {"return": "\"40320\""}, {"return": "\"362880\""}, {"return": "\"3628800\""}], "parsed_inputs": [[["n", "5"]], [["n", "0"]], [["n", "-3"]], [["n", "10"]], [["n", "1"]], [["n", "2.5"]], [["n", "-1"]], [["n", "\"a\""]], [["n", "[1, 2, 3]"]], [["n", "None"]]], "exec_code": "def factorial(n):\n    try:\n        if isinstance(n, int) == False or n < 0:\n            raise ValueError\n    except ValueError:\n        print('ERROR! Factorial only accepts positive integer values')\n    else:\n        x = 1\n        for i in range(1, n + 1):\n            x *= i\n        return x\n", "output": "The function is:\n\n```python\ndef factorial(n):\n    try:\n        if isinstance(n, int) == False or n < 0:\n            raise ValueError\n    except ValueError:\n        print('ERROR! Factorial only accepts positive integer values')\n    else:\n        x = 1\n        for i in range(1, n + 1):\n            x *= i\n        return x\n\n```", "choosed_example_idx": [7, 2, 9, 5, 0, 8, 1, 4], "prompt": "Function: factorial\n\nInput: dict(n=\"a\"), Output: \"None\"\nInput: dict(n=-3), Output: \"None\"\nInput: dict(n=None), Output: \"None\"\nInput: dict(n=2.5), Output: \"None\"\nInput: dict(n=5), Output: \"120\"\nInput: dict(n=[1, 2, 3]), Output: \"None\"\nInput: dict(n=0), Output: \"1\"\nInput: dict(n=1), Output: \"1\"\n\nWrite a function that generates the output from the input.\n\n\n", "id": "54941310906e75c038cd706364586a74196c342f_0"}
{"example_str": "examples = [\n    dict(P=[[0, 0, 0], [0, 1, 0], [0, 0, 0]]),\n    dict(P=[[1, 1, 1], [1, 1, 1], [1, 1, 1]]),\n    dict(P=[[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0]]),\n    dict(P=[[1, 0, 1], [0, 1, 0], [1, 0, 1]]),\n    dict(P=[[0, 0], [0, 0], [0, 0]]),\n    dict(P=[[1, 1], [1, 1], [1, 1]]),\n    dict(P=[[0, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]]),\n    dict(P=[[1, 0, 1, 0, 1], [0, 1, 0, 1, 0], [1, 0, 1, 0, 1]]),\n    dict(P=[[0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]),\n    dict(P=[[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]),\n]\nexamples += [\n    dict(P=[[1, 0], [0, 1]]),\n    dict(P=[[0, 1], [1, 0]]),\n    dict(P=[[1, 1], [1, 1]]),\n    dict(P=[[0, 0], [0, 0]]),\n    dict(P=[[1], [0], [1]]),\n    dict(P=[[0], [1], [0]]),\n    dict(P=[[1, 0, 1], [0, 1, 0]]),\n    dict(P=[[0, 1, 0], [1, 0, 1]]),\n    dict(P=[[1, 0, 0], [0, 1, 1], [1, 1, 0]]),\n    dict(P=[[0, 0, 1], [1, 1, 0], [0, 1, 1]])\n]\nexamples += [\n    dict(P=[[1], [0, 1]]),\n    dict(P=[[1, 0], [1, 1]]),\n    dict(P=[[0, 1], [1, 0], [0, 1]]),\n    dict(P=[[1], [1, 0], [0, 1, 1, 0]]),\n    dict(P=[[0], [0, 1]]),\n    dict(P=[[1, 1], [0, 0], [1, 1, 1, 1]]),\n    dict(P=[[0, 0], [1, 1], [0, 0, 1, 1]]),\n    dict(P=[[1], [0, 1], [1, 0, 0, 1]]),\n    dict(P=[[1, 0, 1], [0, 1, 0, 1], [1, 0, 1, 0]]),\n    dict(P=[[0, 1, 0], [1, 0, 1, 0], [0, 1, 0, 1]])\n]", "code": "def make_leaf_table(P):\n    N = len(P)\n    k = len(P[0])\n    table = {}\n    current = 2\n    for level in range(k):\n        for row in range(N):\n            if P[row][level] == 1:\n                table[current] = row + 1\n                current -= 1\n        current = 2 * current + 2\n    return table\n", "func_name": "make_leaf_table", "exec_status": true, "example_inputs": ["\"{'P': [[0, 0, 0], [0, 1, 0], [0, 0, 0]]}\"", "\"{'P': [[1, 1, 1], [1, 1, 1], [1, 1, 1]]}\"", "\"{'P': [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0]]}\"", "\"{'P': [[1, 0, 1], [0, 1, 0], [1, 0, 1]]}\"", "\"{'P': [[0, 0], [0, 0], [0, 0]]}\"", "\"{'P': [[1, 1], [1, 1], [1, 1]]}\"", "\"{'P': [[0, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]]}\"", "\"{'P': [[1, 0, 1, 0, 1], [0, 1, 0, 1, 0], [1, 0, 1, 0, 1]]}\"", "\"{'P': [[0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]}\"", "\"{'P': [[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]}\""], "example_outputs": [{"return": "\"{6: 2}\""}, {"return": "\"{2: 1, 1: 2, 0: 1, -1: 2, -2: 3, -4: 1, -5: 2, -6: 3}\""}, {"return": "\"{6: 2}\""}, {"return": "\"{2: 2, 1: 3, 4: 1, 3: 3}\""}, {"return": "\"{}\""}, {"return": "\"{2: 1, 1: 2, 0: 1, -1: 2, -2: 3}\""}, {"return": "\"{6: 2}\""}, {"return": "\"{2: 2, 1: 3, 4: 1, 3: 3, 6: 2, 12: 1, 11: 3}\""}, {"return": "\"{6: 2}\""}, {"return": "\"{2: 1, 1: 2, 0: 1, -1: 2, -2: 3, -4: 1, -5: 2, -6: 3, -12: 1, -13: 2, -14: 3, -28: 1, -29: 2, -30: 3, -60: 1, -61: 2, -62: 3}\""}, {"return": "\"{2: 1, 4: 2}\""}, {"return": "\"{2: 2, 4: 1}\""}, {"return": "\"{2: 1, 1: 2}\""}, {"return": "\"{}\""}, {"return": "\"{2: 1, 1: 3}\""}, {"return": "\"{2: 2}\""}, {"return": "\"{2: 1, 4: 2, 8: 1}\""}, {"return": "\"{2: 2, 4: 1, 8: 2}\""}, {"return": "\"{2: 2, 1: 3}\""}, {"return": "\"{2: 2, 4: 2, 3: 3, 6: 1, 5: 3}\""}, {"return": "\"{2: 1}\""}, {"return": "\"{2: 2, 1: 2}\""}, {"return": "\"{2: 2, 4: 1, 3: 3}\""}, {"return": "\"{2: 1, 1: 2}\""}, {"return": "\"{}\""}, {"return": "\"{2: 1, 1: 3}\""}, {"return": "\"{2: 2, 4: 2}\""}, {"return": "\"{2: 1, 1: 3}\""}, {"return": "\"{2: 2, 1: 3, 4: 1, 3: 3}\""}, {"return": "\"{2: 2, 4: 1, 3: 3, 6: 2}\""}], "parsed_inputs": [[["P", "[[0, 0, 0], [0, 1, 0], [0, 0, 0]]"]], [["P", "[[1, 1, 1], [1, 1, 1], [1, 1, 1]]"]], [["P", "[[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0]]"]], [["P", "[[1, 0, 1], [0, 1, 0], [1, 0, 1]]"]], [["P", "[[0, 0], [0, 0], [0, 0]]"]], [["P", "[[1, 1], [1, 1], [1, 1]]"]], [["P", "[[0, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]]"]], [["P", "[[1, 0, 1, 0, 1], [0, 1, 0, 1, 0], [1, 0, 1, 0, 1]]"]], [["P", "[[0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]"]], [["P", "[[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]"]]], "exec_code": "def make_leaf_table(P):\n    N = len(P)\n    k = len(P[0])\n    table = {}\n    current = 2\n    for level in range(k):\n        for row in range(N):\n            if P[row][level] == 1:\n                table[current] = row + 1\n                current -= 1\n        current = 2 * current + 2\n    return table\n", "output": "The function is:\n\n```python\ndef make_leaf_table(P):\n    N = len(P)\n    k = len(P[0])\n    table = {}\n    current = 2\n    for level in range(k):\n        for row in range(N):\n            if P[row][level] == 1:\n                table[current] = row + 1\n                current -= 1\n        current = 2 * current + 2\n    return table\n\n```", "choosed_example_idx": [2, 3, 8, 4, 5, 7, 0], "prompt": "Input: dict(P=[[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0]]), Output: \"{6: 2}\"\nInput: dict(P=[[1, 0, 1], [0, 1, 0], [1, 0, 1]]), Output: \"{2: 2, 1: 3, 4: 1, 3: 3}\"\nInput: dict(P=[[0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]), Output: \"{6: 2}\"\nInput: dict(P=[[0, 0], [0, 0], [0, 0]]), Output: \"{}\"\nInput: dict(P=[[1, 1], [1, 1], [1, 1]]), Output: \"{2: 1, 1: 2, 0: 1, -1: 2, -2: 3}\"\nInput: dict(P=[[1, 0, 1, 0, 1], [0, 1, 0, 1, 0], [1, 0, 1, 0, 1]]), Output: \"{2: 2, 1: 3, 4: 1, 3: 3, 6: 2, 12: 1, 11: 3}\"\nInput: dict(P=[[0, 0, 0], [0, 1, 0], [0, 0, 0]]), Output: \"{6: 2}\"\n\n\n\nFunction: make_leaf_table\n\n\nWrite a function that generates the output from the input.\n", "id": "dbd9f33eab3f261bdef3c814292dcc650222f809_0"}
{"example_str": "examples = [\n    dict(a=12, b=15),\n    dict(a=24, b=30),\n    dict(a=48, b=18),\n    dict(a=100, b=75),\n    dict(a=-12, b=15),\n    dict(a=12, b=-15),\n    dict(a=-12, b=-15),\n    dict(a=0, b=10),\n    dict(a=10, b=0),\n    dict(a=0, b=0),\n]\nexamples += [\n    dict(a=12, b=15),\n    dict(a=100, b=25),\n    dict(a=-24, b=36),\n    dict(a=0, b=5),\n    dict(a=7, b=0),\n    dict(a=-8, b=-12),\n    dict(a=21, b=28),\n    dict(a=17, b=17),\n    dict(a=120, b=35),\n    dict(a=101, b=103)\n]\nexamples += [\n    dict(a=12, b=15),\n    dict(a=100, b=85),\n    dict(a=36, b=60),\n    dict(a=49, b=14),\n    dict(a=0, b=5),\n    dict(a=17, b=23),\n    dict(a=-24, b=18),\n    dict(a=81, b=-54),\n    dict(a=25, b=100),\n    dict(a=7, b=21),\n]", "code": "def gcd(a, b):\n    a, b = abs(a), abs(b)\n    while b > 0:\n        a, b = b, a % b\n    return a\n", "func_name": "gcd", "exec_status": true, "example_inputs": ["\"{'a': 12, 'b': 15}\"", "\"{'a': 24, 'b': 30}\"", "\"{'a': 48, 'b': 18}\"", "\"{'a': 100, 'b': 75}\"", "\"{'a': -12, 'b': 15}\"", "\"{'a': 12, 'b': -15}\"", "\"{'a': -12, 'b': -15}\"", "\"{'a': 0, 'b': 10}\"", "\"{'a': 10, 'b': 0}\"", "\"{'a': 0, 'b': 0}\""], "example_outputs": [{"return": "\"3\""}, {"return": "\"6\""}, {"return": "\"6\""}, {"return": "\"25\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"10\""}, {"return": "\"10\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"25\""}, {"return": "\"12\""}, {"return": "\"5\""}, {"return": "\"7\""}, {"return": "\"4\""}, {"return": "\"7\""}, {"return": "\"17\""}, {"return": "\"5\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"5\""}, {"return": "\"12\""}, {"return": "\"7\""}, {"return": "\"5\""}, {"return": "\"1\""}, {"return": "\"6\""}, {"return": "\"27\""}, {"return": "\"25\""}, {"return": "\"7\""}], "parsed_inputs": [[["a", "12"], ["b", "15"]], [["a", "24"], ["b", "30"]], [["a", "48"], ["b", "18"]], [["a", "100"], ["b", "75"]], [["a", "-12"], ["b", "15"]], [["a", "12"], ["b", "-15"]], [["a", "-12"], ["b", "-15"]], [["a", "0"], ["b", "10"]], [["a", "10"], ["b", "0"]], [["a", "0"], ["b", "0"]]], "exec_code": "def gcd(a, b):\n    a, b = abs(a), abs(b)\n    while b > 0:\n        a, b = b, a % b\n    return a\n", "output": "The function is:\n\n```python\ndef gcd(a, b):\n    a, b = abs(a), abs(b)\n    while b > 0:\n        a, b = b, a % b\n    return a\n\n```", "choosed_example_idx": [9, 0, 3, 2], "prompt": "Input: dict(a=0, b=0), Output: \"0\"\nInput: dict(a=12, b=15), Output: \"3\"\nInput: dict(a=100, b=75), Output: \"25\"\nInput: dict(a=48, b=18), Output: \"6\"\n\nWrite a function that generates the output from the input.\n\nFunction: gcd\n", "id": "1f8b72a61b1c8946e475bee7c78583fc1b76bf8a_0"}
{"example_str": "examples = [\n    dict(targetSum=7, numbers=[2, 3], memo={}),\n    dict(targetSum=10, numbers=[2, 5, 3], memo={}),\n    dict(targetSum=15, numbers=[5, 3, 2], memo={}),\n    dict(targetSum=25, numbers=[10, 5, 2], memo={}),\n    dict(targetSum=0, numbers=[2, 3], memo={}),\n    dict(targetSum=1, numbers=[2, 3], memo={}),\n    dict(targetSum=7, numbers=[2, 3, 5], memo={7: True}),\n    dict(targetSum=10, numbers=[2, 5], memo={5: True}),\n    dict(targetSum=15, numbers=[5, 3], memo={10: False}),\n    dict(targetSum=20, numbers=[10, 5, 2], memo={15: True}),\n]\nexamples += [\n    dict(targetSum=7, numbers=[2, 3]),\n    dict(targetSum=7, numbers=[5, 3, 4, 7]),\n    dict(targetSum=7, numbers=[2, 4]),\n    dict(targetSum=8, numbers=[2, 3, 5]),\n    dict(targetSum=0, numbers=[1, 2, 3]),\n    dict(targetSum=1, numbers=[]),\n    dict(targetSum=300, numbers=[7, 14]),\n    dict(targetSum=10, numbers=[5, 5, 5]),\n    dict(targetSum=11, numbers=[1, 5, 6, 8]),\n    dict(targetSum=15, numbers=[3, 4, 5, 6, 7], memo={15: True})\n]\nexamples += [\n    dict(targetSum=7, numbers=[2, 3]),\n    dict(targetSum=7, numbers=[5, 3, 4, 7]),\n    dict(targetSum=7, numbers=[2, 4]),\n    dict(targetSum=8, numbers=[2, 3, 5]),\n    dict(targetSum=8, numbers=[1, 4, 5]),\n    dict(targetSum=0, numbers=[1, 2, 3]),\n    dict(targetSum=1, numbers=[]),\n    dict(targetSum=300, numbers=[7, 14]),\n    dict(targetSum=10, numbers=[5, 5]),\n    dict(targetSum=11, numbers=[5, 3, 6, 8])\n]", "code": "def can_sum(targetSum: int, numbers: list, memo: dict={}) ->bool:\n    \"\"\"check whether or not the element in numbers can sum up to targetSum\n\n    Args:\n        targetSum (int): the target to sum up\n        numbers (list): the array of element to sum\n        memo (dict, optional): dict to store memory. Defaults to {}.\n\n    Returns:\n        bool: if can sum up to targetSum return true, otherwise false\n    \"\"\"\n    if targetSum in memo:\n        return memo[targetSum]\n    if targetSum == 0:\n        return True\n    if targetSum < 0:\n        return False\n    for number in numbers:\n        remainder = targetSum - number\n        if can_sum(remainder, numbers, memo) == True:\n            memo[targetSum] = True\n            return True\n    memo[targetSum] = False\n    return False\n", "func_name": "can_sum", "exec_status": true, "example_inputs": ["\"{'targetSum': 7, 'numbers': [2, 3], 'memo': {}}\"", "\"{'targetSum': 10, 'numbers': [2, 5, 3], 'memo': {}}\"", "\"{'targetSum': 15, 'numbers': [5, 3, 2], 'memo': {}}\"", "\"{'targetSum': 25, 'numbers': [10, 5, 2], 'memo': {}}\"", "\"{'targetSum': 0, 'numbers': [2, 3], 'memo': {}}\"", "\"{'targetSum': 1, 'numbers': [2, 3], 'memo': {}}\"", "\"{'targetSum': 7, 'numbers': [2, 3, 5], 'memo': {7: True}}\"", "\"{'targetSum': 10, 'numbers': [2, 5], 'memo': {5: True}}\"", "\"{'targetSum': 15, 'numbers': [5, 3], 'memo': {10: False}}\"", "\"{'targetSum': 20, 'numbers': [10, 5, 2], 'memo': {15: True}}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}], "parsed_inputs": [[["targetSum", "7"], ["numbers", "[2, 3]"], ["memo", "{}"]], [["targetSum", "10"], ["numbers", "[2, 5, 3]"], ["memo", "{}"]], [["targetSum", "15"], ["numbers", "[5, 3, 2]"], ["memo", "{}"]], [["targetSum", "25"], ["numbers", "[10, 5, 2]"], ["memo", "{}"]], [["targetSum", "0"], ["numbers", "[2, 3]"], ["memo", "{}"]], [["targetSum", "1"], ["numbers", "[2, 3]"], ["memo", "{}"]], [["targetSum", "7"], ["numbers", "[2, 3, 5]"], ["memo", "{7: True}"]], [["targetSum", "10"], ["numbers", "[2, 5]"], ["memo", "{5: True}"]], [["targetSum", "15"], ["numbers", "[5, 3]"], ["memo", "{10: False}"]], [["targetSum", "20"], ["numbers", "[10, 5, 2]"], ["memo", "{15: True}"]]], "exec_code": "def can_sum(targetSum: int, numbers: list, memo: dict={}) ->bool:\n    \"\"\"check whether or not the element in numbers can sum up to targetSum\n\n    Args:\n        targetSum (int): the target to sum up\n        numbers (list): the array of element to sum\n        memo (dict, optional): dict to store memory. Defaults to {}.\n\n    Returns:\n        bool: if can sum up to targetSum return true, otherwise false\n    \"\"\"\n    if targetSum in memo:\n        return memo[targetSum]\n    if targetSum == 0:\n        return True\n    if targetSum < 0:\n        return False\n    for number in numbers:\n        remainder = targetSum - number\n        if can_sum(remainder, numbers, memo) == True:\n            memo[targetSum] = True\n            return True\n    memo[targetSum] = False\n    return False\n", "output": "The function is:\n\n```python\ndef can_sum(targetSum: int, numbers: list, memo: dict={}) ->bool:\n    \"\"\"check whether or not the element in numbers can sum up to targetSum\n\n    Args:\n        targetSum (int): the target to sum up\n        numbers (list): the array of element to sum\n        memo (dict, optional): dict to store memory. Defaults to {}.\n\n    Returns:\n        bool: if can sum up to targetSum return true, otherwise false\n    \"\"\"\n    if targetSum in memo:\n        return memo[targetSum]\n    if targetSum == 0:\n        return True\n    if targetSum < 0:\n        return False\n    for number in numbers:\n        remainder = targetSum - number\n        if can_sum(remainder, numbers, memo) == True:\n            memo[targetSum] = True\n            return True\n    memo[targetSum] = False\n    return False\n\n```", "choosed_example_idx": [8, 1, 3, 4], "prompt": "Function: can_sum\n\nWrite a function that generates the output from the input.\nInput: dict(targetSum=15, numbers=[5, 3], memo={10: False}), Output: \"True\"\nInput: dict(targetSum=10, numbers=[2, 5, 3], memo={}), Output: \"True\"\nInput: dict(targetSum=25, numbers=[10, 5, 2], memo={}), Output: \"True\"\nInput: dict(targetSum=0, numbers=[2, 3], memo={}), Output: \"True\"\n\n", "id": "e44987749858816964e8340e9ef5377ac89a9bbb_0"}
{"example_str": "examples = [\n    dict(arr=[1, 2, 3, 4, 5]),\n    dict(arr=[-1, -2, -3, -4, -5]),\n    dict(arr=[1, -2, 3, 10, -10]),\n    dict(arr=[-10, -20, -30, -40, -50]),\n    dict(arr=[5, 5, 5, 5, 5]),\n    dict(arr=[1, 2, -1, 3, 4]),\n    dict(arr=[-5, -4, -3, -2, -1]),\n    dict(arr=[10, -10, 10, -10, 10]),\n    dict(arr=[0, 0, 0, 0, 0]),\n    dict(arr=[-1, 1, -1, 1, -1]),\n]\nexamples += [\n    dict(arr=[1, 2, 3, 4, 5]),  # Simple positive numbers\n    dict(arr=[-1, -2, -3, -4, -5]),  # All negative numbers\n    dict(arr=[-2, 1, -3, 4, -1, 2, 1, -5, 4]),  # Mixed positive and negative numbers\n    dict(arr=[0, 0, 0, 0, 0]),  # All zeros\n    dict(arr=[-1, 2, 3, -4, 5, 6]),  # Mixed with positive sum\n    dict(arr=[2, -8, 3, -2, 4, -10]),  # Mixed with negative numbers leading\n    dict(arr=[10, -3, 1, 2, 8, -1]),  # Mixed with a strong positive start\n    dict(arr=[1]),  # Single element positive\n    dict(arr=[-1]),  # Single element negative\n    dict(arr=[100, -1, 2, 3, -4, 5, 6, -7, 8, 9, 10])  # Larger array with mixed numbers\n]\nexamples += [\n    dict(arr=[1, 2, 3]),\n    dict(arr=[-2, 1, -3, 4, -1, 2, 1, -5, 4]),\n    dict(arr=[-1, -2, -3]),\n    dict(arr=[5, 4, -1, 7, 8]),\n    dict(arr=[10, -3, 1, 2, 8]),\n    dict(arr=[-1, 3, 5, -2, 8, -4]),\n    dict(arr=[1, 2, -1, 3, 4, 10, 10, -10, -1]),\n    dict(arr=[0, 0, 0, 0, 0]),\n    dict(arr=[-2, -3, 4, -1, -2, 1, 5, -3]),\n    dict(arr=[100, -1000, 500, -200, 300])\n]", "code": "def large_cont_sum(arr):\n    max_sum = cur_sum = arr[0]\n    for num in arr[1:]:\n        cur_sum = max(cur_sum + num, num)\n        max_sum = max(cur_sum, max_sum)\n    return max_sum\n", "func_name": "large_cont_sum", "exec_status": true, "example_inputs": ["\"{'arr': [1, 2, 3, 4, 5]}\"", "\"{'arr': [-1, -2, -3, -4, -5]}\"", "\"{'arr': [1, -2, 3, 10, -10]}\"", "\"{'arr': [-10, -20, -30, -40, -50]}\"", "\"{'arr': [5, 5, 5, 5, 5]}\"", "\"{'arr': [1, 2, -1, 3, 4]}\"", "\"{'arr': [-5, -4, -3, -2, -1]}\"", "\"{'arr': [10, -10, 10, -10, 10]}\"", "\"{'arr': [0, 0, 0, 0, 0]}\"", "\"{'arr': [-1, 1, -1, 1, -1]}\""], "example_outputs": [{"return": "\"15\""}, {"return": "\"-1\""}, {"return": "\"13\""}, {"return": "\"-10\""}, {"return": "\"25\""}, {"return": "\"9\""}, {"return": "\"-1\""}, {"return": "\"10\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"15\""}, {"return": "\"-1\""}, {"return": "\"6\""}, {"return": "\"0\""}, {"return": "\"12\""}, {"return": "\"5\""}, {"return": "\"18\""}, {"return": "\"1\""}, {"return": "\"-1\""}, {"return": "\"131\""}, {"return": "\"6\""}, {"return": "\"6\""}, {"return": "\"-1\""}, {"return": "\"23\""}, {"return": "\"18\""}, {"return": "\"14\""}, {"return": "\"29\""}, {"return": "\"0\""}, {"return": "\"7\""}, {"return": "\"600\""}], "parsed_inputs": [[["arr", "[1, 2, 3, 4, 5]"]], [["arr", "[-1, -2, -3, -4, -5]"]], [["arr", "[1, -2, 3, 10, -10]"]], [["arr", "[-10, -20, -30, -40, -50]"]], [["arr", "[5, 5, 5, 5, 5]"]], [["arr", "[1, 2, -1, 3, 4]"]], [["arr", "[-5, -4, -3, -2, -1]"]], [["arr", "[10, -10, 10, -10, 10]"]], [["arr", "[0, 0, 0, 0, 0]"]], [["arr", "[-1, 1, -1, 1, -1]"]]], "exec_code": "def large_cont_sum(arr):\n    max_sum = cur_sum = arr[0]\n    for num in arr[1:]:\n        cur_sum = max(cur_sum + num, num)\n        max_sum = max(cur_sum, max_sum)\n    return max_sum\n", "output": "The function is:\n\n```python\ndef large_cont_sum(arr):\n    max_sum = cur_sum = arr[0]\n    for num in arr[1:]:\n        cur_sum = max(cur_sum + num, num)\n        max_sum = max(cur_sum, max_sum)\n    return max_sum\n\n```", "choosed_example_idx": [1, 2, 0, 8], "prompt": "Function: large_cont_sum\nInput: dict(arr=[-1, -2, -3, -4, -5]), Output: \"-1\"\nInput: dict(arr=[1, -2, 3, 10, -10]), Output: \"13\"\nInput: dict(arr=[1, 2, 3, 4, 5]), Output: \"15\"\nInput: dict(arr=[0, 0, 0, 0, 0]), Output: \"0\"\n\nWrite a function that generates the output from the input.\n\n", "id": "3507c81643ef99d7838a96ea3d2f2ddf9f91b8fb_0"}
{"example_str": "examples = [\n    dict(alist=[]),\n    dict(alist=[5]),\n    dict(alist=[5, 2, 8, 1, 9]),\n    dict(alist=[10, 20, 30, 40, 50]),\n    dict(alist=[50, 40, 30, 20, 10]),\n    dict(alist=[1, 2, 3, 4, 5]),\n    dict(alist=[5, 5, 5, 5, 5]),\n    dict(alist=[-5, -4, -3, -2, -1]),\n    dict(alist=[1.5, 2.5, 3.5, 4.5, 5.5]),\n    dict(alist=[100, 200, 300, 400, 500]),\n]\nexamples += [\n    dict(alist=[]),  # Example 1: Empty list\n    dict(alist=[1]),  # Example 2: Single element list\n    dict(alist=[2, 1]),  # Example 3: Two elements, unsorted\n    dict(alist=[1, 2, 3]),  # Example 4: Already sorted list\n    dict(alist=[3, 2, 1]),  # Example 5: Reverse sorted list\n    dict(alist=[5, 3, 8, 1, 2]),  # Example 6: Random order list\n    dict(alist=[10, -1, 0, 5, 3]),  # Example 7: List with negative numbers\n    dict(alist=[1.5, 2.5, 0.5]),  # Example 8: List with floating point numbers\n    dict(alist=[100, 50, 50, 100]),  # Example 9: List with duplicate numbers\n    dict(alist=[2, 3, 2, 3, 3, 2])  # Example 10: List with repeated elements\n]\nexamples += [\n    dict(alist=[]),\n    dict(alist=[1]),\n    dict(alist=[2, 1]),\n    dict(alist=[3, 1, 2]),\n    dict(alist=[4, 3, 2, 1]),\n    dict(alist=[5, 3, 1, 4, 2]),\n    dict(alist=[1, 2, 3, 4, 5, 6]),\n    dict(alist=[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]),\n    dict(alist=[-1, -2, -3, -4, -5]),\n    dict(alist=[100, 50, 25, 75, 0])\n]", "code": "def selection_sort_simple(alist):\n    if not alist:\n        return alist\n    minval = min(alist)\n    alist.remove(minval)\n    return [minval] + selection_sort(alist)\n", "func_name": "selection_sort_simple", "exec_status": true, "example_inputs": ["\"{'alist': []}\"", "\"{'alist': [5]}\"", "\"{'alist': [5, 2, 8, 1, 9]}\"", "\"{'alist': [10, 20, 30, 40, 50]}\"", "\"{'alist': [50, 40, 30, 20, 10]}\"", "\"{'alist': [1, 2, 3, 4, 5]}\"", "\"{'alist': [5, 5, 5, 5, 5]}\"", "\"{'alist': [-5, -4, -3, -2, -1]}\"", "\"{'alist': [1.5, 2.5, 3.5, 4.5, 5.5]}\"", "\"{'alist': [100, 200, 300, 400, 500]}\""], "example_outputs": [{"return": "\"[]\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"return": "\"[]\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"return": "\"[]\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'selection_sort' is not defined\""}], "parsed_inputs": [[["alist", "[]"]], [["alist", "[5]"]], [["alist", "[5, 2, 8, 1, 9]"]], [["alist", "[10, 20, 30, 40, 50]"]], [["alist", "[50, 40, 30, 20, 10]"]], [["alist", "[1, 2, 3, 4, 5]"]], [["alist", "[5, 5, 5, 5, 5]"]], [["alist", "[-5, -4, -3, -2, -1]"]], [["alist", "[1.5, 2.5, 3.5, 4.5, 5.5]"]], [["alist", "[100, 200, 300, 400, 500]"]]], "exec_code": "def selection_sort_simple(alist):\n    if not alist:\n        return alist\n    minval = min(alist)\n    alist.remove(minval)\n    return [minval] + selection_sort(alist)\n", "output": "The function is:\n\n```python\ndef selection_sort_simple(alist):\n    if not alist:\n        return alist\n    minval = min(alist)\n    alist.remove(minval)\n    return [minval] + selection_sort(alist)\n\n```", "choosed_example_idx": [2, 8, 1, 5], "prompt": "Write a function that generates the output from the input.\n\nInput: dict(alist=[5, 2, 8, 1, 9]), Output: \"<class 'NameError'>: name 'selection_sort' is not defined\"\nInput: dict(alist=[1.5, 2.5, 3.5, 4.5, 5.5]), Output: \"<class 'NameError'>: name 'selection_sort' is not defined\"\nInput: dict(alist=[5]), Output: \"<class 'NameError'>: name 'selection_sort' is not defined\"\nInput: dict(alist=[1, 2, 3, 4, 5]), Output: \"<class 'NameError'>: name 'selection_sort' is not defined\"\n\n\n\nFunction: selection_sort_simple\n\n", "id": "d1d0c9dd5136adeb38786a2a071ccda03878be2b_0"}
{"example_str": "examples = [\n    dict(sleep={1: 5, 2: 3, 3: 7, 4: 2}),\n    dict(sleep={10: 10, 20: 5, 30: 7, 40: 3}),\n    dict(sleep={0: 1, 15: 2, 30: 3, 45: 4}),\n    dict(sleep={5: 10, 10: 5, 15: 7, 20: 3}),\n    dict(sleep={1: 1, 2: 2, 3: 3, 4: 4, 5: 5}),\n    dict(sleep={45: 10, 50: 5, 55: 7, 60: 3}),\n    dict(sleep={30: 10, 35: 5, 40: 7, 45: 3}),\n    dict(sleep={20: 10, 25: 5, 30: 7, 35: 3}),\n    dict(sleep={15: 10, 20: 5, 25: 7, 30: 3}),\n    dict(sleep={5: 10, 10: 5, 15: 7, 20: 3, 25: 4}),\n]\nexamples += [\n    dict(sleep={1: 5, 2: 3, 3: 8, 4: 10}),\n    dict(sleep={'minute1': 2, 'minute2': 5, 'minute3': 1}),\n    dict(sleep={0: 0, 1: 0, 2: 0, 3: 0, 4: 1}),\n    dict(sleep={'a': 10, 'b': 20, 'c': 30}),\n    dict(sleep={10: 100, 20: 200, 30: 300, 40: 400}),\n    dict(sleep={'early': 15, 'mid': 25, 'late': 5}),\n    dict(sleep={5: 55, 6: 60, 7: 65, 8: 70}),\n    dict(sleep={'start': 3, 'middle': 5, 'end': 7}),\n    dict(sleep={100: 1, 101: 2, 102: 3}),\n    dict(sleep={'morning': 10, 'noon': 20, 'night': 30})\n]\nexamples += [\n    dict(sleep={0: 5, 1: 10, 2: 3}),\n    dict(sleep={10: 2, 20: 4, 30: 6}),\n    dict(sleep={5: 15, 10: 5, 15: 25}),\n    dict(sleep={100: 200, 200: 100, 300: 300}),\n    dict(sleep={1: 1, 2: 2, 3: 3}),\n    dict(sleep={45: 10, 30: 20, 15: 30}),\n    dict(sleep={99: 99, 100: 100, 101: 101}),\n    dict(sleep={0: 0, 1: 0, 2: 0, 3: 1}),\n    dict(sleep={-1: 10, -2: 20, -3: 5}),\n    dict(sleep={50: 50, 25: 75, 75: 25})\n]", "code": "def get_best_minute(sleep):\n    return max(sleep.items(), key=lambda kv: kv[1])[0]\n", "func_name": "get_best_minute", "exec_status": true, "example_inputs": ["\"{'sleep': {1: 5, 2: 3, 3: 7, 4: 2}}\"", "\"{'sleep': {10: 10, 20: 5, 30: 7, 40: 3}}\"", "\"{'sleep': {0: 1, 15: 2, 30: 3, 45: 4}}\"", "\"{'sleep': {5: 10, 10: 5, 15: 7, 20: 3}}\"", "\"{'sleep': {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}}\"", "\"{'sleep': {45: 10, 50: 5, 55: 7, 60: 3}}\"", "\"{'sleep': {30: 10, 35: 5, 40: 7, 45: 3}}\"", "\"{'sleep': {20: 10, 25: 5, 30: 7, 35: 3}}\"", "\"{'sleep': {15: 10, 20: 5, 25: 7, 30: 3}}\"", "\"{'sleep': {5: 10, 10: 5, 15: 7, 20: 3, 25: 4}}\""], "example_outputs": [{"return": "\"3\""}, {"return": "\"10\""}, {"return": "\"45\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"45\""}, {"return": "\"30\""}, {"return": "\"20\""}, {"return": "\"15\""}, {"return": "\"5\""}, {"return": "\"4\""}, {"return": "\"'minute2'\""}, {"return": "\"4\""}, {"return": "\"'c'\""}, {"return": "\"40\""}, {"return": "\"'mid'\""}, {"return": "\"8\""}, {"return": "\"'end'\""}, {"return": "\"102\""}, {"return": "\"'night'\""}, {"return": "\"1\""}, {"return": "\"30\""}, {"return": "\"15\""}, {"return": "\"300\""}, {"return": "\"3\""}, {"return": "\"15\""}, {"return": "\"101\""}, {"return": "\"3\""}, {"return": "\"-2\""}, {"return": "\"25\""}], "parsed_inputs": [[["sleep", "{1: 5, 2: 3, 3: 7, 4: 2}"]], [["sleep", "{10: 10, 20: 5, 30: 7, 40: 3}"]], [["sleep", "{0: 1, 15: 2, 30: 3, 45: 4}"]], [["sleep", "{5: 10, 10: 5, 15: 7, 20: 3}"]], [["sleep", "{1: 1, 2: 2, 3: 3, 4: 4, 5: 5}"]], [["sleep", "{45: 10, 50: 5, 55: 7, 60: 3}"]], [["sleep", "{30: 10, 35: 5, 40: 7, 45: 3}"]], [["sleep", "{20: 10, 25: 5, 30: 7, 35: 3}"]], [["sleep", "{15: 10, 20: 5, 25: 7, 30: 3}"]], [["sleep", "{5: 10, 10: 5, 15: 7, 20: 3, 25: 4}"]]], "exec_code": "def get_best_minute(sleep):\n    return max(sleep.items(), key=lambda kv: kv[1])[0]\n", "output": "The function is:\n\n```python\ndef get_best_minute(sleep):\n    return max(sleep.items(), key=lambda kv: kv[1])[0]\n\n```", "choosed_example_idx": [6, 1, 9, 0, 3, 5, 2, 7, 8], "prompt": "Write a function that generates the output from the input.\nInput: dict(sleep={30: 10, 35: 5, 40: 7, 45: 3}), Output: \"30\"\nInput: dict(sleep={10: 10, 20: 5, 30: 7, 40: 3}), Output: \"10\"\nInput: dict(sleep={5: 10, 10: 5, 15: 7, 20: 3, 25: 4}), Output: \"5\"\nInput: dict(sleep={1: 5, 2: 3, 3: 7, 4: 2}), Output: \"3\"\nInput: dict(sleep={5: 10, 10: 5, 15: 7, 20: 3}), Output: \"5\"\nInput: dict(sleep={45: 10, 50: 5, 55: 7, 60: 3}), Output: \"45\"\nInput: dict(sleep={0: 1, 15: 2, 30: 3, 45: 4}), Output: \"45\"\nInput: dict(sleep={20: 10, 25: 5, 30: 7, 35: 3}), Output: \"20\"\nInput: dict(sleep={15: 10, 20: 5, 25: 7, 30: 3}), Output: \"15\"\n\nFunction: get_best_minute\n\n", "id": "0b01350e0ca26de9b76d69d512c26dd2182c381a_0"}
{"example_str": "examples = [\n    dict(t=\"   Hello, World!   \"),\n    dict(t=\"Hello，World!\"),\n    dict(t=\"   \"),\n    dict(t=\"Hello\"),\n    dict(t=\"Hello, \"),\n    dict(t=\"，Hello\"),\n    dict(t=\"Hello，\"),\n    dict(t=\"Hello, World，\"),\n    dict(t=\"，Hello, World!\"),\n    dict(t=\"Hello，World，\"),\n]\nexamples += [\n    dict(t=\" Hello World \"),\n    dict(t=\"Hello，World\"),\n    dict(t=\"   Leading and trailing spaces   \"),\n    dict(t=\"No, commas, just spaces\"),\n    dict(t=\"Multiple，full-width，commas\"),\n    dict(t=\"，Leading full-width comma\"),\n    dict(t=\"Trailing full-width comma，\"),\n    dict(t=\"Mixed，commas, and spaces\"),\n    dict(t=\"\"),\n    dict(t=\"Only full-width，，，commas\")\n]\nexamples += [\n    dict(t=\"  Hello World  \"),\n    dict(t=\"Leading space\"),\n    dict(t=\"trailing space \"),\n    dict(t=\"中文，测试\"),\n    dict(t=\"Multiple，Commas，In，Sentence\"),\n    dict(t=\"，Leading Chinese Comma\"),\n    dict(t=\"Trailing Chinese Comma，\"),\n    dict(t=\"Mixed，Punctuation, and spaces\"),\n    dict(t=\"No changes needed\"),\n    dict(t=\"Empty string \")\n]", "code": "def extract_title(t):\n    t = t.strip()\n    return t.replace(u'，', u' ')\n", "func_name": "extract_title", "exec_status": true, "example_inputs": ["\"{'t': '   Hello, World!   '}\"", "\"{'t': 'Hello\\uff0cWorld!'}\"", "\"{'t': '   '}\"", "\"{'t': 'Hello'}\"", "\"{'t': 'Hello, '}\"", "\"{'t': '\\uff0cHello'}\"", "\"{'t': 'Hello\\uff0c'}\"", "\"{'t': 'Hello, World\\uff0c'}\"", "\"{'t': '\\uff0cHello, World!'}\"", "\"{'t': 'Hello\\uff0cWorld\\uff0c'}\""], "example_outputs": [{"return": "\"'Hello, World!'\""}, {"return": "\"'Hello World!'\""}, {"return": "\"''\""}, {"return": "\"'Hello'\""}, {"return": "\"'Hello,'\""}, {"return": "\"' Hello'\""}, {"return": "\"'Hello '\""}, {"return": "\"'Hello, World '\""}, {"return": "\"' Hello, World!'\""}, {"return": "\"'Hello World '\""}, {"return": "\"'Hello World'\""}, {"return": "\"'Hello World'\""}, {"return": "\"'Leading and trailing spaces'\""}, {"return": "\"'No, commas, just spaces'\""}, {"return": "\"'Multiple full-width commas'\""}, {"return": "\"' Leading full-width comma'\""}, {"return": "\"'Trailing full-width comma '\""}, {"return": "\"'Mixed commas, and spaces'\""}, {"return": "\"''\""}, {"return": "\"'Only full-width   commas'\""}, {"return": "\"'Hello World'\""}, {"return": "\"'Leading space'\""}, {"return": "\"'trailing space'\""}, {"return": "\"'\\u4e2d\\u6587 \\u6d4b\\u8bd5'\""}, {"return": "\"'Multiple Commas In Sentence'\""}, {"return": "\"' Leading Chinese Comma'\""}, {"return": "\"'Trailing Chinese Comma '\""}, {"return": "\"'Mixed Punctuation, and spaces'\""}, {"return": "\"'No changes needed'\""}, {"return": "\"'Empty string'\""}], "parsed_inputs": [[["t", "\"   Hello, World!   \""]], [["t", "\"Hello\\uff0cWorld!\""]], [["t", "\"   \""]], [["t", "\"Hello\""]], [["t", "\"Hello, \""]], [["t", "\"\\uff0cHello\""]], [["t", "\"Hello\\uff0c\""]], [["t", "\"Hello, World\\uff0c\""]], [["t", "\"\\uff0cHello, World!\""]], [["t", "\"Hello\\uff0cWorld\\uff0c\""]]], "exec_code": "def extract_title(t):\n    t = t.strip()\n    return t.replace(u'，', u' ')\n", "output": "The function is:\n\n```python\ndef extract_title(t):\n    t = t.strip()\n    return t.replace(u'，', u' ')\n\n```", "choosed_example_idx": [3, 4, 8, 0, 5, 9], "prompt": "Input: dict(t=\"Hello\"), Output: \"'Hello'\"\nInput: dict(t=\"Hello, \"), Output: \"'Hello,'\"\nInput: dict(t=\"\\uff0cHello, World!\"), Output: \"' Hello, World!'\"\nInput: dict(t=\"   Hello, World!   \"), Output: \"'Hello, World!'\"\nInput: dict(t=\"\\uff0cHello\"), Output: \"' Hello'\"\nInput: dict(t=\"Hello\\uff0cWorld\\uff0c\"), Output: \"'Hello World '\"\n\nWrite a function that generates the output from the input.\nFunction: extract_title\n\n", "id": "ab25136c8bad0d1c1dcf27bfe8c1fe1b00bf04f8_0"}
{"example_str": "examples = [\n    dict(desimal=0),\n    dict(desimal=1),\n    dict(desimal=2),\n    dict(desimal=5),\n    dict(desimal=10),\n    dict(desimal=15),\n    dict(desimal=20),\n    dict(desimal=25),\n    dict(desimal=30),\n    dict(desimal=50),\n]\nexamples += [\n    dict(desimal=0),\n    dict(desimal=1),\n    dict(desimal=2),\n    dict(desimal=3),\n    dict(desimal=10),\n    dict(desimal=16),\n    dict(desimal=31),\n    dict(desimal=64),\n    dict(desimal=127),\n    dict(desimal=255)\n]\nexamples += [\n    dict(desimal=0),\n    dict(desimal=1),\n    dict(desimal=2),\n    dict(desimal=3),\n    dict(desimal=4),\n    dict(desimal=5),\n    dict(desimal=10),\n    dict(desimal=15),\n    dict(desimal=16),\n    dict(desimal=31)\n]", "code": "def convDectoBiner(desimal):\n    num_display = desimal\n    result = []\n    while desimal > 0:\n        if desimal % 2 == 0:\n            result.insert(0, 0)\n            desimal /= 2\n        elif desimal == 1:\n            result.insert(0, 1)\n            desimal = 0\n        elif desimal % 2 == 1:\n            result.insert(0, 1)\n            desimal = desimal / 2 - 0.5\n    a = [str(integer) for integer in result]\n    b = ''.join(a)\n    return f'{num_display} desimal = {int(b)} biner'\n", "func_name": "convDectoBiner", "exec_status": true, "example_inputs": ["\"{'desimal': 0}\"", "\"{'desimal': 1}\"", "\"{'desimal': 2}\"", "\"{'desimal': 5}\"", "\"{'desimal': 10}\"", "\"{'desimal': 15}\"", "\"{'desimal': 20}\"", "\"{'desimal': 25}\"", "\"{'desimal': 30}\"", "\"{'desimal': 50}\""], "example_outputs": [{"error": "<|EXCEPTION|> \"<class 'ValueError'>: invalid literal for int() with base 10: ''\""}, {"return": "\"'1 desimal = 1 biner'\""}, {"return": "\"'2 desimal = 10 biner'\""}, {"return": "\"'5 desimal = 101 biner'\""}, {"return": "\"'10 desimal = 1010 biner'\""}, {"return": "\"'15 desimal = 1111 biner'\""}, {"return": "\"'20 desimal = 10100 biner'\""}, {"return": "\"'25 desimal = 11001 biner'\""}, {"return": "\"'30 desimal = 11110 biner'\""}, {"return": "\"'50 desimal = 110010 biner'\""}, {"error": "<|EXCEPTION|> \"<class 'ValueError'>: invalid literal for int() with base 10: ''\""}, {"return": "\"'1 desimal = 1 biner'\""}, {"return": "\"'2 desimal = 10 biner'\""}, {"return": "\"'3 desimal = 11 biner'\""}, {"return": "\"'10 desimal = 1010 biner'\""}, {"return": "\"'16 desimal = 10000 biner'\""}, {"return": "\"'31 desimal = 11111 biner'\""}, {"return": "\"'64 desimal = 1000000 biner'\""}, {"return": "\"'127 desimal = 1111111 biner'\""}, {"return": "\"'255 desimal = 11111111 biner'\""}, {"error": "<|EXCEPTION|> \"<class 'ValueError'>: invalid literal for int() with base 10: ''\""}, {"return": "\"'1 desimal = 1 biner'\""}, {"return": "\"'2 desimal = 10 biner'\""}, {"return": "\"'3 desimal = 11 biner'\""}, {"return": "\"'4 desimal = 100 biner'\""}, {"return": "\"'5 desimal = 101 biner'\""}, {"return": "\"'10 desimal = 1010 biner'\""}, {"return": "\"'15 desimal = 1111 biner'\""}, {"return": "\"'16 desimal = 10000 biner'\""}, {"return": "\"'31 desimal = 11111 biner'\""}], "parsed_inputs": [[["desimal", "0"]], [["desimal", "1"]], [["desimal", "2"]], [["desimal", "5"]], [["desimal", "10"]], [["desimal", "15"]], [["desimal", "20"]], [["desimal", "25"]], [["desimal", "30"]], [["desimal", "50"]]], "exec_code": "def convDectoBiner(desimal):\n    num_display = desimal\n    result = []\n    while desimal > 0:\n        if desimal % 2 == 0:\n            result.insert(0, 0)\n            desimal /= 2\n        elif desimal == 1:\n            result.insert(0, 1)\n            desimal = 0\n        elif desimal % 2 == 1:\n            result.insert(0, 1)\n            desimal = desimal / 2 - 0.5\n    a = [str(integer) for integer in result]\n    b = ''.join(a)\n    return f'{num_display} desimal = {int(b)} biner'\n", "output": "The function is:\n\n```python\ndef convDectoBiner(desimal):\n    num_display = desimal\n    result = []\n    while desimal > 0:\n        if desimal % 2 == 0:\n            result.insert(0, 0)\n            desimal /= 2\n        elif desimal == 1:\n            result.insert(0, 1)\n            desimal = 0\n        elif desimal % 2 == 1:\n            result.insert(0, 1)\n            desimal = desimal / 2 - 0.5\n    a = [str(integer) for integer in result]\n    b = ''.join(a)\n    return f'{num_display} desimal = {int(b)} biner'\n\n```", "choosed_example_idx": [8, 4, 2], "prompt": "Write a function that generates the output from the input.\nFunction: convDectoBiner\n\n\nInput: dict(desimal=30), Output: \"'30 desimal = 11110 biner'\"\nInput: dict(desimal=10), Output: \"'10 desimal = 1010 biner'\"\nInput: dict(desimal=2), Output: \"'2 desimal = 10 biner'\"\n\n\n", "id": "e6c6c8e140140e4f56e410994d4274f971389383_0"}
{"example_str": "examples = [\n    dict(val=None),\n    dict(val='hello'),\n    dict(val=123),\n    dict(val=3.14),\n    dict(val=True),\n    dict(val=False),\n    dict(val=[]),\n    dict(val={}),\n    dict(val=('a', 'b')),\n    dict(val=b'byte_string'),\n]\nexamples += [\n    dict(val=None),\n    dict(val=5),\n    dict(val='Hello'),\n    dict(val=[1, 2, 3]),\n    dict(val=(4, 5)),\n    dict(val={'key': 'value'}),\n    dict(val=0),\n    dict(val=0.0),\n    dict(val=True),\n    dict(val=False)\n]\nexamples += [\n    dict(val=None),\n    dict(val=0),\n    dict(val=1),\n    dict(val='Hello'),\n    dict(val=''),\n    dict(val=[]),\n    dict(val={}),\n    dict(val=[1, 2, 3]),\n    dict(val={'key': 'value'}),\n    dict(val=5.5)\n]", "code": "def blankify_nulls(val):\n    if val is None:\n        return ''\n    return val\n", "func_name": "blankify_nulls", "exec_status": true, "example_inputs": ["\"{'val': None}\"", "\"{'val': 'hello'}\"", "\"{'val': 123}\"", "\"{'val': 3.14}\"", "\"{'val': True}\"", "\"{'val': False}\"", "\"{'val': []}\"", "\"{'val': {}}\"", "\"{'val': ('a', 'b')}\"", "\"{'val': b'byte_string'}\""], "example_outputs": [{"return": "\"''\""}, {"return": "\"'hello'\""}, {"return": "\"123\""}, {"return": "\"3.14\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"[]\""}, {"return": "\"{}\""}, {"return": "\"('a', 'b')\""}, {"return": "\"b'byte_string'\""}, {"return": "\"''\""}, {"return": "\"5\""}, {"return": "\"'Hello'\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"(4, 5)\""}, {"return": "\"{'key': 'value'}\""}, {"return": "\"0\""}, {"return": "\"0.0\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"''\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"'Hello'\""}, {"return": "\"''\""}, {"return": "\"[]\""}, {"return": "\"{}\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"{'key': 'value'}\""}, {"return": "\"5.5\""}], "parsed_inputs": [[["val", "None"]], [["val", "\"hello\""]], [["val", "123"]], [["val", "3.14"]], [["val", "True"]], [["val", "False"]], [["val", "[]"]], [["val", "{}"]], [["val", "('a', 'b')"]], [["val", "b'byte_string'"]]], "exec_code": "def blankify_nulls(val):\n    if val is None:\n        return ''\n    return val\n", "output": "The function is:\n\n```python\ndef blankify_nulls(val):\n    if val is None:\n        return ''\n    return val\n\n```", "choosed_example_idx": [3, 7, 5, 4, 6, 0, 9, 2, 1], "prompt": "Function: blankify_nulls\nInput: dict(val=3.14), Output: \"3.14\"\nInput: dict(val={}), Output: \"{}\"\nInput: dict(val=False), Output: \"False\"\nInput: dict(val=True), Output: \"True\"\nInput: dict(val=[]), Output: \"[]\"\nInput: dict(val=None), Output: \"''\"\nInput: dict(val=b'byte_string'), Output: \"b'byte_string'\"\nInput: dict(val=123), Output: \"123\"\nInput: dict(val=\"hello\"), Output: \"'hello'\"\n\nWrite a function that generates the output from the input.\n\n", "id": "77361663b8fee2547e67cbe5403d81aade32683a_0"}
{"example_str": "examples = [\n    dict(square_idx=\"a1\", direction=\">\"),\n    dict(square_idx=\"h8\", direction=\"<\"),\n    dict(square_idx=\"e5\", direction=\"+\"),\n    dict(square_idx=\"c3\", direction=\"-\"),\n    dict(square_idx=\"b2\", direction=\">\"),\n    dict(square_idx=\"g7\", direction=\"<\"),\n    dict(square_idx=\"d4\", direction=\"+\"),\n    dict(square_idx=\"f6\", direction=\"-\"),\n    dict(square_idx=\"a8\", direction=\">\"),\n    dict(square_idx=\"h1\", direction=\"<\")\n]\nexamples += [\n    dict(square_idx='a1', direction='>'),\n    dict(square_idx='b2', direction='<'),\n    dict(square_idx='c3', direction='+'),\n    dict(square_idx='d4', direction='-'),\n    dict(square_idx='e5', direction='>'),\n    dict(square_idx='f6', direction='<'),\n    dict(square_idx='g7', direction='+'),\n    dict(square_idx='h8', direction='-'),\n    dict(square_idx='a8', direction='>'),\n    dict(square_idx='h1', direction='<')\n]\nexamples += [\n    dict(square_idx='a1', direction='>'),\n    dict(square_idx='b2', direction='<'),\n    dict(square_idx='c3', direction='+'),\n    dict(square_idx='d4', direction='-'),\n    dict(square_idx='e5', direction='>'),\n    dict(square_idx='f6', direction='<'),\n    dict(square_idx='g7', direction='+'),\n    dict(square_idx='h8', direction='-'),\n    dict(square_idx='a8', direction='>'),\n    dict(square_idx='h1', direction='<')\n]", "code": "def get_adjacent(square_idx: str, direction: str):\n    x = ord(square_idx[0].lower())\n    y = int(square_idx[1])\n    if direction == '>':\n        x += 1\n    elif direction == '<':\n        x -= 1\n    elif direction == '+':\n        y += 1\n    elif direction == '-':\n        y -= 1\n    res = chr(x) + str(y)\n    return res\n", "func_name": "get_adjacent", "exec_status": true, "example_inputs": ["\"{'square_idx': 'a1', 'direction': '>'}\"", "\"{'square_idx': 'h8', 'direction': '<'}\"", "\"{'square_idx': 'e5', 'direction': '+'}\"", "\"{'square_idx': 'c3', 'direction': '-'}\"", "\"{'square_idx': 'b2', 'direction': '>'}\"", "\"{'square_idx': 'g7', 'direction': '<'}\"", "\"{'square_idx': 'd4', 'direction': '+'}\"", "\"{'square_idx': 'f6', 'direction': '-'}\"", "\"{'square_idx': 'a8', 'direction': '>'}\"", "\"{'square_idx': 'h1', 'direction': '<'}\""], "example_outputs": [{"return": "\"'b1'\""}, {"return": "\"'g8'\""}, {"return": "\"'e6'\""}, {"return": "\"'c2'\""}, {"return": "\"'c2'\""}, {"return": "\"'f7'\""}, {"return": "\"'d5'\""}, {"return": "\"'f5'\""}, {"return": "\"'b8'\""}, {"return": "\"'g1'\""}, {"return": "\"'b1'\""}, {"return": "\"'a2'\""}, {"return": "\"'c4'\""}, {"return": "\"'d3'\""}, {"return": "\"'f5'\""}, {"return": "\"'e6'\""}, {"return": "\"'g8'\""}, {"return": "\"'h7'\""}, {"return": "\"'b8'\""}, {"return": "\"'g1'\""}, {"return": "\"'b1'\""}, {"return": "\"'a2'\""}, {"return": "\"'c4'\""}, {"return": "\"'d3'\""}, {"return": "\"'f5'\""}, {"return": "\"'e6'\""}, {"return": "\"'g8'\""}, {"return": "\"'h7'\""}, {"return": "\"'b8'\""}, {"return": "\"'g1'\""}], "parsed_inputs": [[["square_idx", "\"a1\""], ["direction", "\">\""]], [["square_idx", "\"h8\""], ["direction", "\"<\""]], [["square_idx", "\"e5\""], ["direction", "\"+\""]], [["square_idx", "\"c3\""], ["direction", "\"-\""]], [["square_idx", "\"b2\""], ["direction", "\">\""]], [["square_idx", "\"g7\""], ["direction", "\"<\""]], [["square_idx", "\"d4\""], ["direction", "\"+\""]], [["square_idx", "\"f6\""], ["direction", "\"-\""]], [["square_idx", "\"a8\""], ["direction", "\">\""]], [["square_idx", "\"h1\""], ["direction", "\"<\""]]], "exec_code": "def get_adjacent(square_idx: str, direction: str):\n    x = ord(square_idx[0].lower())\n    y = int(square_idx[1])\n    if direction == '>':\n        x += 1\n    elif direction == '<':\n        x -= 1\n    elif direction == '+':\n        y += 1\n    elif direction == '-':\n        y -= 1\n    res = chr(x) + str(y)\n    return res\n", "output": "The function is:\n\n```python\ndef get_adjacent(square_idx: str, direction: str):\n    x = ord(square_idx[0].lower())\n    y = int(square_idx[1])\n    if direction == '>':\n        x += 1\n    elif direction == '<':\n        x -= 1\n    elif direction == '+':\n        y += 1\n    elif direction == '-':\n        y -= 1\n    res = chr(x) + str(y)\n    return res\n\n```", "choosed_example_idx": [6, 5, 8, 2, 9, 0], "prompt": "Function: get_adjacent\n\nInput: dict(square_idx=\"d4\", direction=\"+\"), Output: \"'d5'\"\nInput: dict(square_idx=\"g7\", direction=\"<\"), Output: \"'f7'\"\nInput: dict(square_idx=\"a8\", direction=\">\"), Output: \"'b8'\"\nInput: dict(square_idx=\"e5\", direction=\"+\"), Output: \"'e6'\"\nInput: dict(square_idx=\"h1\", direction=\"<\"), Output: \"'g1'\"\nInput: dict(square_idx=\"a1\", direction=\">\"), Output: \"'b1'\"\n\n\nWrite a function that generates the output from the input.\n", "id": "edaead53ca674d5d3e67e7375e5cf3b606b4fd52_0"}
{"example_str": "examples = [\n    dict(string=\"Hello World!\"),\n    dict(string=\"Python is fun!\"),\n    dict(string=\"123 ABC 456\"),\n    dict(string=\"This is a test string.\"),\n    dict(string=\"\"),\n    dict(string=\"a\"),\n    dict(string=\"abc def ghi\"),\n    dict(string=\"Hello123World!\"),\n    dict(string=\"This is another test string.\"),\n    dict(string=\"abcdefg\"),\n]\nexamples += [\n    {\"string\": \"Hello, world!\"},  # Simple string with punctuation\n    {\"string\": \"123 456 789\"},    # String with only numbers\n    {\"string\": \"ABC def GHI\"},    # String with multiple words\n    {\"string\": \"\"},               # Empty string\n    {\"string\": \"singleword\"},     # String with a single word\n    {\"string\": \"With\\nNew\\nLine\"},# String with new lines\n    {\"string\": \"Tabs\\tare\\there\"},# String with tabs\n    {\"string\": \"123abc456def\"},   # String with mixed alphanumeric\n    {\"string\": \"UPPERCASE lower\"},# String with mixed case\n    {\"string\": \"!@#$%^&*()_+\"}    # String with special characters only\n]\nexamples += [\n    dict(string=\"hello\"),\n    dict(string=\"123abc456\"),\n    dict(string=\"!@#abcXYZ\"),\n    dict(string=\"flipThisString!\"),\n    dict(string=\"2023NewYear\"),\n    dict(string=\"Mix3d: Alph4Num3r1c\"),\n    dict(string=\"\"),\n    dict(string=\"NoChange\"),\n    dict(string=\"whitespace  \"),\n    dict(string=\"CAPSlockON\")\n]", "code": "def flipString(string):\n    newString = ''\n    i = 0\n    while i < len(string):\n        if not string[i].isalpha():\n            newString = newString + string[i]\n            i = i + 1\n        elif string[i].isalpha():\n            p1 = i\n            j = i + 1\n            found = False\n            while j < len(string) and not found:\n                if not string[j].isalpha():\n                    found = True\n                else:\n                    j = j + 1\n            p2 = j - 1\n            word = buildWord(p1, p2, string)\n            scrambledWord = scramble(word)\n            newString = newString + scrambledWord\n            i = i + (p2 - p1 + 1)\n    return newString\n", "func_name": "flipString", "exec_status": true, "example_inputs": ["\"{'string': 'Hello World!'}\"", "\"{'string': 'Python is fun!'}\"", "\"{'string': '123 ABC 456'}\"", "\"{'string': 'This is a test string.'}\"", "\"{'string': ''}\"", "\"{'string': 'a'}\"", "\"{'string': 'abc def ghi'}\"", "\"{'string': 'Hello123World!'}\"", "\"{'string': 'This is another test string.'}\"", "\"{'string': 'abcdefg'}\""], "example_outputs": [{"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'buildWord' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'buildWord' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'buildWord' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'buildWord' is not defined\""}, {"return": "\"''\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'buildWord' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'buildWord' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'buildWord' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'buildWord' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'buildWord' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'buildWord' is not defined\""}, {"return": "\"'123 456 789'\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'buildWord' is not defined\""}, {"return": "\"''\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'buildWord' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'buildWord' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'buildWord' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'buildWord' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'buildWord' is not defined\""}, {"return": "\"'!@#$%^&*()_+'\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'buildWord' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'buildWord' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'buildWord' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'buildWord' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'buildWord' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'buildWord' is not defined\""}, {"return": "\"''\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'buildWord' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'buildWord' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'buildWord' is not defined\""}], "parsed_inputs": [[["string", "\"Hello World!\""]], [["string", "\"Python is fun!\""]], [["string", "\"123 ABC 456\""]], [["string", "\"This is a test string.\""]], [["string", "\"\""]], [["string", "\"a\""]], [["string", "\"abc def ghi\""]], [["string", "\"Hello123World!\""]], [["string", "\"This is another test string.\""]], [["string", "\"abcdefg\""]]], "exec_code": "def flipString(string):\n    newString = ''\n    i = 0\n    while i < len(string):\n        if not string[i].isalpha():\n            newString = newString + string[i]\n            i = i + 1\n        elif string[i].isalpha():\n            p1 = i\n            j = i + 1\n            found = False\n            while j < len(string) and not found:\n                if not string[j].isalpha():\n                    found = True\n                else:\n                    j = j + 1\n            p2 = j - 1\n            word = buildWord(p1, p2, string)\n            scrambledWord = scramble(word)\n            newString = newString + scrambledWord\n            i = i + (p2 - p1 + 1)\n    return newString\n", "output": "The function is:\n\n```python\ndef flipString(string):\n    newString = ''\n    i = 0\n    while i < len(string):\n        if not string[i].isalpha():\n            newString = newString + string[i]\n            i = i + 1\n        elif string[i].isalpha():\n            p1 = i\n            j = i + 1\n            found = False\n            while j < len(string) and not found:\n                if not string[j].isalpha():\n                    found = True\n                else:\n                    j = j + 1\n            p2 = j - 1\n            word = buildWord(p1, p2, string)\n            scrambledWord = scramble(word)\n            newString = newString + scrambledWord\n            i = i + (p2 - p1 + 1)\n    return newString\n\n```", "choosed_example_idx": [8, 0, 7, 9, 1], "prompt": "Input: dict(string=\"This is another test string.\"), Output: \"<class 'NameError'>: name 'buildWord' is not defined\"\nInput: dict(string=\"Hello World!\"), Output: \"<class 'NameError'>: name 'buildWord' is not defined\"\nInput: dict(string=\"Hello123World!\"), Output: \"<class 'NameError'>: name 'buildWord' is not defined\"\nInput: dict(string=\"abcdefg\"), Output: \"<class 'NameError'>: name 'buildWord' is not defined\"\nInput: dict(string=\"Python is fun!\"), Output: \"<class 'NameError'>: name 'buildWord' is not defined\"\n\n\nFunction: flipString\n\n\nWrite a function that generates the output from the input.\n", "id": "27ea0e2efca5e5ce94cf9055ed23f9fdc6f835fb_0"}
{"example_str": "examples = [\n    dict(num=\"А123БВ\"),\n    dict(num=\"1234567\"),\n    dict(num=\"ABC123\"),\n    dict(num=\"123456789\"),\n    dict(num=\"12345\"),\n    dict(num=\"АБВГД123\"),\n    dict(num=\"123ABC\"),\n    dict(num=\"123456\"),\n    dict(num=\"А123456\"),\n    dict(num=\"123БВ456\"),\n]\nexamples += [\n    dict(num=\"A123BC\"),  # Example of a typical valid format\n    dict(num=\"1234567\"),  # All digits, invalid format\n    dict(num=\"ABC1234\"),  # Incorrect order of letters and digits\n    dict(num=\"A123BCD\"),  # Too many letters\n    dict(num=\"A12B34C\"),  # Letters and digits mixed incorrectly\n    dict(num=\"XYZ7890\"),  # Incorrect but valid length\n    dict(num=\"AB123CD\"),  # Another typical valid format\n    dict(num=\"A1B2C3D\"),  # Mixed but incorrect format\n    dict(num=\"123ABCD\"),  # Starts with digits, invalid\n    dict(num=\"ABCDE123\"),  # Ends with digits, invalid\n]\nexamples += [\n    dict(num=\"ABC1234\"),   # Valid format, assuming correct summation\n    dict(num=\"XYZ9876\"),   # Valid format, assuming correct summation\n    dict(num=\"A123BCD\"),   # Valid format, assuming correct summation\n    dict(num=\"1234ABC\"),   # Invalid, numbers at the start\n    dict(num=\"ABCD123\"),   # Invalid, too many letters at start\n    dict(num=\"AB12345\"),   # Invalid, missing letters at end\n    dict(num=\"ABCDE123\"),  # Too long\n    dict(num=\"A12\"),       # Too short\n    dict(num=\"1234567\"),   # All digits, no letters\n    dict(num=\"ABCDEFG\"),   # All letters, no digits\n]", "code": "def check_number(num):\n    \"\"\"\n    Функция проверки номеров.\n    :param num:\n    На вход получает гос номер, который необходимо проверить на валидность\n    :return:\n    Возвращает номер, если с ним все ок. В противном случае выходит из функции\n    \"\"\"\n    summ = 0\n    if len(num) < 8 or len(num) > 9:\n        return\n    for i in range(len(num)):\n        if i in letters_keys:\n            if num[i] in letters:\n                summ += 1\n        elif num[i] in digits:\n            summ += 100\n    if summ == 503 or summ == 603:\n        return num\n", "func_name": "check_number", "exec_status": true, "example_inputs": ["\"{'num': '\\u0410123\\u0411\\u0412'}\"", "\"{'num': '1234567'}\"", "\"{'num': 'ABC123'}\"", "\"{'num': '123456789'}\"", "\"{'num': '12345'}\"", "\"{'num': '\\u0410\\u0411\\u0412\\u0413\\u0414123'}\"", "\"{'num': '123ABC'}\"", "\"{'num': '123456'}\"", "\"{'num': '\\u0410123456'}\"", "\"{'num': '123\\u0411\\u0412456'}\""], "example_outputs": [{"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'letters_keys' is not defined\""}, {"return": "\"None\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'letters_keys' is not defined\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'letters_keys' is not defined\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'letters_keys' is not defined\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'letters_keys' is not defined\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}], "parsed_inputs": [[["num", "\"\\u0410123\\u0411\\u0412\""]], [["num", "\"1234567\""]], [["num", "\"ABC123\""]], [["num", "\"123456789\""]], [["num", "\"12345\""]], [["num", "\"\\u0410\\u0411\\u0412\\u0413\\u0414123\""]], [["num", "\"123ABC\""]], [["num", "\"123456\""]], [["num", "\"\\u0410123456\""]], [["num", "\"123\\u0411\\u0412456\""]]], "exec_code": "def check_number(num):\n    \"\"\"\n    Функция проверки номеров.\n    :param num:\n    На вход получает гос номер, который необходимо проверить на валидность\n    :return:\n    Возвращает номер, если с ним все ок. В противном случае выходит из функции\n    \"\"\"\n    summ = 0\n    if len(num) < 8 or len(num) > 9:\n        return\n    for i in range(len(num)):\n        if i in letters_keys:\n            if num[i] in letters:\n                summ += 1\n        elif num[i] in digits:\n            summ += 100\n    if summ == 503 or summ == 603:\n        return num\n", "output": "The function is:\n\n```python\ndef check_number(num):\n    \"\"\"\n    Функция проверки номеров.\n    :param num:\n    На вход получает гос номер, который необходимо проверить на валидность\n    :return:\n    Возвращает номер, если с ним все ок. В противном случае выходит из функции\n    \"\"\"\n    summ = 0\n    if len(num) < 8 or len(num) > 9:\n        return\n    for i in range(len(num)):\n        if i in letters_keys:\n            if num[i] in letters:\n                summ += 1\n        elif num[i] in digits:\n            summ += 100\n    if summ == 503 or summ == 603:\n        return num\n\n```", "choosed_example_idx": [6, 7, 0, 2, 4, 8, 9, 5], "prompt": "Input: dict(num=\"123ABC\"), Output: \"None\"\nInput: dict(num=\"123456\"), Output: \"None\"\nInput: dict(num=\"\\u0410123\\u0411\\u0412\"), Output: \"None\"\nInput: dict(num=\"ABC123\"), Output: \"None\"\nInput: dict(num=\"12345\"), Output: \"None\"\nInput: dict(num=\"\\u0410123456\"), Output: \"None\"\nInput: dict(num=\"123\\u0411\\u0412456\"), Output: \"<class 'NameError'>: name 'letters_keys' is not defined\"\nInput: dict(num=\"\\u0410\\u0411\\u0412\\u0413\\u0414123\"), Output: \"<class 'NameError'>: name 'letters_keys' is not defined\"\n\nFunction: check_number\nWrite a function that generates the output from the input.\n", "id": "ee1582b41a90284efee44f28b3eec3d83d47b857_0"}
{"example_str": "examples = [\n    dict(c='.'),\n    dict(c=','),\n    dict(c='?'),\n    dict(c='!'),\n    dict(c='。'),\n    dict(c='a'),\n    dict(c=' '),\n    dict(c='-'),\n    dict(c='、'),\n    dict(c=';'),\n]\nexamples += [\n    dict(c='.'),  # Example 1: Period\n    dict(c=','),  # Example 2: Comma\n    dict(c='?'),  # Example 3: Question mark\n    dict(c='!'),  # Example 4: Exclamation mark\n    dict(c='。'), # Example 5: Full stop (Chinese/Japanese)\n    dict(c='a'),  # Example 6: Lowercase letter\n    dict(c='1'),  # Example 7: Digit\n    dict(c='-'),  # Example 8: Dash\n    dict(c=' '),  # Example 9: Space\n    dict(c=';')   # Example 10: Semicolon\n]\nexamples += [\n    dict(c='.'),\n    dict(c=','),\n    dict(c='?'),\n    dict(c='!'),\n    dict(c='。'),\n    dict(c='a'),\n    dict(c='1'),\n    dict(c='-'),\n    dict(c=' '),\n    dict(c=';')\n]", "code": "def is_special_mark(c):\n    if c == '.' or c == ',' or c == '?' or c == '!' or c == '。':\n        return True\n    else:\n        return False\n", "func_name": "is_special_mark", "exec_status": true, "example_inputs": ["\"{'c': '.'}\"", "\"{'c': ','}\"", "\"{'c': '?'}\"", "\"{'c': '!'}\"", "\"{'c': '\\u3002'}\"", "\"{'c': 'a'}\"", "\"{'c': ' '}\"", "\"{'c': '-'}\"", "\"{'c': '\\u3001'}\"", "\"{'c': ';'}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}], "parsed_inputs": [[["c", "\".\""]], [["c", "\",\""]], [["c", "\"?\""]], [["c", "\"!\""]], [["c", "\"\\u3002\""]], [["c", "\"a\""]], [["c", "\" \""]], [["c", "\"-\""]], [["c", "\"\\u3001\""]], [["c", "\";\""]]], "exec_code": "def is_special_mark(c):\n    if c == '.' or c == ',' or c == '?' or c == '!' or c == '。':\n        return True\n    else:\n        return False\n", "output": "The function is:\n\n```python\ndef is_special_mark(c):\n    if c == '.' or c == ',' or c == '?' or c == '!' or c == '。':\n        return True\n    else:\n        return False\n\n```", "choosed_example_idx": [2, 8, 3], "prompt": "Write a function that generates the output from the input.\nInput: dict(c=\"?\"), Output: \"True\"\nInput: dict(c=\"\\u3001\"), Output: \"False\"\nInput: dict(c=\"!\"), Output: \"True\"\n\nFunction: is_special_mark\n", "id": "4178e168355021baf8cfe9ebf3e614a83daae83b_0"}
{"example_str": "examples = [\n    dict(dictname={'umi1': {'pos': [('10', 'I'), ('20', 'D')]}}),\n    dict(dictname={'umi2': {'pos': [('5', 'I'), ('30', 'I'), ('40', 'D')]}}),\n    dict(dictname={'umi3': {'pos': [('60', 'I'), ('70', 'D')]}}),\n    dict(dictname={'umi4': {'pos': [('15', 'I'), ('25', 'D'), ('35', 'I')]}}),\n    dict(dictname={'umi5': {'pos': [('45', 'I'), ('55', 'D')]}}),\n    dict(dictname={'umi6': {'pos': [('80', 'I'), ('90', 'D')]}}),\n    dict(dictname={'umi7': {'pos': [('11', 'I'), ('21', 'D'), ('31', 'I')]}}),\n    dict(dictname={'umi8': {'pos': [('51', 'I'), ('61', 'D')]}}),\n    dict(dictname={'umi9': {'pos': [('71', 'I'), ('81', 'D')]}}),\n    dict(dictname={'umi10': {'pos': [('91', 'I'), ('101', 'D')]}}),\n]\nexamples += [\n    {'dictname': {'UMI1': {'pos': [('30', 'I'), ('40', 'I')]}, 'UMI2': {'pos': [('60', 'I')]}}},\n    {'dictname': {'UMI1': {'pos': [('55', 'I'), ('70', 'I')]}}},\n    {'dictname': {'UMI1': {'pos': [('10', 'I'), ('20', 'I')]}, 'UMI2': {'pos': [('50', 'I'), ('60', 'I')]} }},\n    {'dictname': {'UMI1': {'pos': [('45', 'I')]}, 'UMI2': {'pos': [('55', 'I')]} }},\n    {'dictname': {'UMI1': {'pos': [('100', 'I')]}, 'UMI2': {'pos': [('10', 'I'), ('20', 'I')]} }},\n    {'dictname': {'UMI1': {'pos': [('30', 'I'), ('40', 'I')]}, 'UMI2': {'pos': [('30', 'I'), ('40', 'I')]} }},\n    {'dictname': {'UMI1': {'pos': [('25', 'I')]}, 'UMI2': {'pos': [('35', 'I')]} }},\n    {'dictname': {'UMI1': {'pos': [('80', 'I')]}, 'UMI2': {'pos': [('90', 'I')]} }},\n    {'dictname': {'UMI1': {'pos': [('5', 'I'), ('15', 'I')]}, 'UMI2': {'pos': [('25', 'I'), ('35', 'I')]} }},\n    {'dictname': {'UMI1': {'pos': [('50', 'I'), ('60', 'I')]}, 'UMI2': {'pos': [('70', 'I'), ('80', 'I')]} }}\n]\nexamples += [\n    dict(dictname={\n        'UMI1': {'pos': [('30', 'I'), ('40', 'I')]},\n        'UMI2': {'pos': [('60', 'I'), ('70', 'I')]}\n    }),\n    dict(dictname={\n        'UMI1': {'pos': [('30', 'I'), ('40', 'I')]},\n        'UMI2': {'pos': [('50', 'I'), ('70', 'I')]}\n    }),\n    dict(dictname={\n        'UMI1': {'pos': [('30', 'I'), ('40', 'I')]},\n        'UMI3': {'pos': [('55', 'I'), ('75', 'I')]}\n    }),\n    dict(dictname={\n        'UMI1': {'pos': [('30', 'I'), ('40', 'I')]},\n        'UMI4': {'pos': [('51', 'I'), ('71', 'I')]}\n    }),\n    dict(dictname={\n        'UMI1': {'pos': [('30', 'I'), ('40', 'I')]},\n        'UMI5': {'pos': [('52', 'I'), ('72', 'I')]}\n    }),\n    dict(dictname={\n        'UMI1': {'pos': [('30', 'I'), ('40', 'I')]},\n        'UMI6': {'pos': [('53', 'I'), ('73', 'I')]}\n    }),\n    dict(dictname={\n        'UMI1': {'pos': [('30', 'I'), ('40', 'I')]},\n        'UMI7': {'pos': [('54', 'I'), ('74', 'I')]}\n    }),\n    dict(dictname={\n        'UMI1': {'pos': [('30', 'I'), ('40', 'I')]},\n        'UMI8': {'pos': [('55', 'I'), ('75', 'I')]}\n    }),\n    dict(dictname={\n        'UMI1': {'pos': [('30', 'I'), ('40', 'I')]},\n        'UMI9': {'pos': [('56', 'I'), ('76', 'I')]}\n    }),\n    dict(dictname={\n        'UMI1': {'pos': [('30', 'I'), ('40', 'I')]},\n        'UMI10': {'pos': [('57', 'I'), ('77', 'I')]}\n    })\n]", "code": "def large_insertions(dictname):\n    umis_to_be_deleted = []\n    for umi in dictname.keys():\n        marker = 0\n        for pos in dictname[umi]['pos']:\n            if pos[1] == 'I':\n                if int(pos[0]) >= 50:\n                    marker = 1\n        if marker == 0:\n            umis_to_be_deleted.append(umi)\n    for umi in umis_to_be_deleted:\n        del dictname[umi]\n    return dictname\n", "func_name": "large_insertions", "exec_status": true, "example_inputs": ["\"{'dictname': {'umi1': {'pos': [('10', 'I'), ('20', 'D')]}}}\"", "\"{'dictname': {'umi2': {'pos': [('5', 'I'), ('30', 'I'), ('40', 'D')]}}}\"", "\"{'dictname': {'umi3': {'pos': [('60', 'I'), ('70', 'D')]}}}\"", "\"{'dictname': {'umi4': {'pos': [('15', 'I'), ('25', 'D'), ('35', 'I')]}}}\"", "\"{'dictname': {'umi5': {'pos': [('45', 'I'), ('55', 'D')]}}}\"", "\"{'dictname': {'umi6': {'pos': [('80', 'I'), ('90', 'D')]}}}\"", "\"{'dictname': {'umi7': {'pos': [('11', 'I'), ('21', 'D'), ('31', 'I')]}}}\"", "\"{'dictname': {'umi8': {'pos': [('51', 'I'), ('61', 'D')]}}}\"", "\"{'dictname': {'umi9': {'pos': [('71', 'I'), ('81', 'D')]}}}\"", "\"{'dictname': {'umi10': {'pos': [('91', 'I'), ('101', 'D')]}}}\""], "example_outputs": [{"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{'umi3': {'pos': [('60', 'I'), ('70', 'D')]}}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{'umi6': {'pos': [('80', 'I'), ('90', 'D')]}}\""}, {"return": "\"{}\""}, {"return": "\"{'umi8': {'pos': [('51', 'I'), ('61', 'D')]}}\""}, {"return": "\"{'umi9': {'pos': [('71', 'I'), ('81', 'D')]}}\""}, {"return": "\"{'umi10': {'pos': [('91', 'I'), ('101', 'D')]}}\""}, {"return": "\"{'UMI2': {'pos': [('60', 'I')]}}\""}, {"return": "\"{'UMI1': {'pos': [('55', 'I'), ('70', 'I')]}}\""}, {"return": "\"{'UMI2': {'pos': [('50', 'I'), ('60', 'I')]}}\""}, {"return": "\"{'UMI2': {'pos': [('55', 'I')]}}\""}, {"return": "\"{'UMI1': {'pos': [('100', 'I')]}}\""}, {"return": "\"{}\""}, {"return": "\"{}\""}, {"return": "\"{'UMI1': {'pos': [('80', 'I')]}, 'UMI2': {'pos': [('90', 'I')]}}\""}, {"return": "\"{}\""}, {"return": "\"{'UMI1': {'pos': [('50', 'I'), ('60', 'I')]}, 'UMI2': {'pos': [('70', 'I'), ('80', 'I')]}}\""}, {"return": "\"{'UMI2': {'pos': [('60', 'I'), ('70', 'I')]}}\""}, {"return": "\"{'UMI2': {'pos': [('50', 'I'), ('70', 'I')]}}\""}, {"return": "\"{'UMI3': {'pos': [('55', 'I'), ('75', 'I')]}}\""}, {"return": "\"{'UMI4': {'pos': [('51', 'I'), ('71', 'I')]}}\""}, {"return": "\"{'UMI5': {'pos': [('52', 'I'), ('72', 'I')]}}\""}, {"return": "\"{'UMI6': {'pos': [('53', 'I'), ('73', 'I')]}}\""}, {"return": "\"{'UMI7': {'pos': [('54', 'I'), ('74', 'I')]}}\""}, {"return": "\"{'UMI8': {'pos': [('55', 'I'), ('75', 'I')]}}\""}, {"return": "\"{'UMI9': {'pos': [('56', 'I'), ('76', 'I')]}}\""}, {"return": "\"{'UMI10': {'pos': [('57', 'I'), ('77', 'I')]}}\""}], "parsed_inputs": [[["dictname", "{'umi1': {'pos': [('10', 'I'), ('20', 'D')]}}"]], [["dictname", "{'umi2': {'pos': [('5', 'I'), ('30', 'I'), ('40', 'D')]}}"]], [["dictname", "{'umi3': {'pos': [('60', 'I'), ('70', 'D')]}}"]], [["dictname", "{'umi4': {'pos': [('15', 'I'), ('25', 'D'), ('35', 'I')]}}"]], [["dictname", "{'umi5': {'pos': [('45', 'I'), ('55', 'D')]}}"]], [["dictname", "{'umi6': {'pos': [('80', 'I'), ('90', 'D')]}}"]], [["dictname", "{'umi7': {'pos': [('11', 'I'), ('21', 'D'), ('31', 'I')]}}"]], [["dictname", "{'umi8': {'pos': [('51', 'I'), ('61', 'D')]}}"]], [["dictname", "{'umi9': {'pos': [('71', 'I'), ('81', 'D')]}}"]], [["dictname", "{'umi10': {'pos': [('91', 'I'), ('101', 'D')]}}"]]], "exec_code": "def large_insertions(dictname):\n    umis_to_be_deleted = []\n    for umi in dictname.keys():\n        marker = 0\n        for pos in dictname[umi]['pos']:\n            if pos[1] == 'I':\n                if int(pos[0]) >= 50:\n                    marker = 1\n        if marker == 0:\n            umis_to_be_deleted.append(umi)\n    for umi in umis_to_be_deleted:\n        del dictname[umi]\n    return dictname\n", "output": "The function is:\n\n```python\ndef large_insertions(dictname):\n    umis_to_be_deleted = []\n    for umi in dictname.keys():\n        marker = 0\n        for pos in dictname[umi]['pos']:\n            if pos[1] == 'I':\n                if int(pos[0]) >= 50:\n                    marker = 1\n        if marker == 0:\n            umis_to_be_deleted.append(umi)\n    for umi in umis_to_be_deleted:\n        del dictname[umi]\n    return dictname\n\n```", "choosed_example_idx": [9, 7, 6, 4, 3, 5, 0], "prompt": "Function: large_insertions\n\nWrite a function that generates the output from the input.\n\n\nInput: dict(dictname={'umi10': {'pos': [('91', 'I'), ('101', 'D')]}}), Output: \"{'umi10': {'pos': [('91', 'I'), ('101', 'D')]}}\"\nInput: dict(dictname={'umi8': {'pos': [('51', 'I'), ('61', 'D')]}}), Output: \"{'umi8': {'pos': [('51', 'I'), ('61', 'D')]}}\"\nInput: dict(dictname={'umi7': {'pos': [('11', 'I'), ('21', 'D'), ('31', 'I')]}}), Output: \"{}\"\nInput: dict(dictname={'umi5': {'pos': [('45', 'I'), ('55', 'D')]}}), Output: \"{}\"\nInput: dict(dictname={'umi4': {'pos': [('15', 'I'), ('25', 'D'), ('35', 'I')]}}), Output: \"{}\"\nInput: dict(dictname={'umi6': {'pos': [('80', 'I'), ('90', 'D')]}}), Output: \"{'umi6': {'pos': [('80', 'I'), ('90', 'D')]}}\"\nInput: dict(dictname={'umi1': {'pos': [('10', 'I'), ('20', 'D')]}}), Output: \"{}\"\n\n", "id": "e5bd5644a10f4481baf6c3d829373f0c753efff9_0"}
{"example_str": "examples = [\n    dict(num=5),\n    dict(num=10),\n    dict(num=15),\n    dict(num=20),\n    dict(num=25),\n    dict(num=3),\n    dict(num=7),\n    dict(num=11),\n    dict(num=13),\n    dict(num=22),\n]\nexamples += [\n    dict(num=5),\n    dict(num=10),\n    dict(num=15),\n    dict(num=20),\n    dict(num=25),\n    dict(num=1),\n    dict(num=2),\n    dict(num=3),\n    dict(num=4),\n    dict(num=6)\n]\nexamples += [\n    dict(num=5),\n    dict(num=10),\n    dict(num=15),\n    dict(num=20),\n    dict(num=25),\n    dict(num=30),\n    dict(num=35),\n    dict(num=40),\n    dict(num=45),\n    dict(num=50)\n]", "code": "def Buzz(num):\n    if num % 5 == 0:\n        print('Buzz')\n        return 'Buzz'\n    else:\n        return None\n", "func_name": "Buzz", "exec_status": true, "example_inputs": ["\"{'num': 5}\"", "\"{'num': 10}\"", "\"{'num': 15}\"", "\"{'num': 20}\"", "\"{'num': 25}\"", "\"{'num': 3}\"", "\"{'num': 7}\"", "\"{'num': 11}\"", "\"{'num': 13}\"", "\"{'num': 22}\""], "example_outputs": [{"return": "\"'Buzz'\""}, {"return": "\"'Buzz'\""}, {"return": "\"'Buzz'\""}, {"return": "\"'Buzz'\""}, {"return": "\"'Buzz'\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"'Buzz'\""}, {"return": "\"'Buzz'\""}, {"return": "\"'Buzz'\""}, {"return": "\"'Buzz'\""}, {"return": "\"'Buzz'\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"'Buzz'\""}, {"return": "\"'Buzz'\""}, {"return": "\"'Buzz'\""}, {"return": "\"'Buzz'\""}, {"return": "\"'Buzz'\""}, {"return": "\"'Buzz'\""}, {"return": "\"'Buzz'\""}, {"return": "\"'Buzz'\""}, {"return": "\"'Buzz'\""}, {"return": "\"'Buzz'\""}], "parsed_inputs": [[["num", "5"]], [["num", "10"]], [["num", "15"]], [["num", "20"]], [["num", "25"]], [["num", "3"]], [["num", "7"]], [["num", "11"]], [["num", "13"]], [["num", "22"]]], "exec_code": "def Buzz(num):\n    if num % 5 == 0:\n        print('Buzz')\n        return 'Buzz'\n    else:\n        return None\n", "output": "The function is:\n\n```python\ndef Buzz(num):\n    if num % 5 == 0:\n        print('Buzz')\n        return 'Buzz'\n    else:\n        return None\n\n```", "choosed_example_idx": [7, 2, 4, 9, 6, 3, 5, 0], "prompt": "Write a function that generates the output from the input.\n\nFunction: Buzz\nInput: dict(num=11), Output: \"None\"\nInput: dict(num=15), Output: \"'Buzz'\"\nInput: dict(num=25), Output: \"'Buzz'\"\nInput: dict(num=22), Output: \"None\"\nInput: dict(num=7), Output: \"None\"\nInput: dict(num=20), Output: \"'Buzz'\"\nInput: dict(num=3), Output: \"None\"\nInput: dict(num=5), Output: \"'Buzz'\"\n\n", "id": "e5fa34c7fe28c0a004586640a1d522c9a472491c_0"}
{"example_str": "examples = [\n    dict(sequence=[]),\n    dict(sequence=[0]),\n    dict(sequence=[2, 1, 0, 0, 1, 2]),\n    dict(sequence=[0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1]),\n    dict(sequence=[0, 0, 0, 1, 1, 1, 2, 2, 2]),\n    dict(sequence=[2, 2, 1, 1, 0, 0]),\n    dict(sequence=[1, 1, 1, 0, 0, 0]),\n    dict(sequence=[0, 1, 2, 0, 1, 2, 0, 1, 2]),\n    dict(sequence=[2, 1, 0, 2, 1, 0, 2, 1, 0]),\n    dict(sequence=[1, 0, 1, 0, 1, 0, 1, 0, 1]),\n]\nexamples += [\n    dict(sequence=[]),\n    dict(sequence=[0]),\n    dict(sequence=[2, 1, 0, 0, 1, 2]),\n    dict(sequence=[0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1]),\n    dict(sequence=[2, 2, 2, 1, 1, 1, 0, 0, 0]),\n    dict(sequence=[1, 0, 2, 2, 0, 1]),\n    dict(sequence=[0, 0, 0, 0]),\n    dict(sequence=[1, 1, 1, 1]),\n    dict(sequence=[2, 2, 2, 2]),\n    dict(sequence=[1, 2, 0, 1, 2, 0, 1, 2, 0])\n]\nexamples += [\n    dict(sequence=[]),\n    dict(sequence=[0]),\n    dict(sequence=[2, 1, 0]),\n    dict(sequence=[1, 2, 1, 0, 1, 2]),\n    dict(sequence=[2, 2, 2, 1, 1, 0, 0]),\n    dict(sequence=[0, 0, 0, 1, 1, 2, 2, 2]),\n    dict(sequence=[1, 0, 2, 2, 0, 1]),\n    dict(sequence=[2, 0, 1, 0, 2, 1, 1]),\n    dict(sequence=[1, 1, 1, 2, 2, 0, 0, 0]),\n    dict(sequence=[0, 1, 2, 0, 1, 2, 0, 1, 2])\n]", "code": "def dutch_national_flag_sort(sequence: list) ->list:\n    \"\"\"\n    A pure Python implementation of Dutch National Flag sort algorithm.\n    :param data: 3 unique integer values (e.g., 0, 1, 2) in an sequence\n    :return: The same collection in ascending order\n\n    >>> dutch_national_flag_sort([])\n    []\n    >>> dutch_national_flag_sort([0])\n    [0]\n    >>> dutch_national_flag_sort([2, 1, 0, 0, 1, 2])\n    [0, 0, 1, 1, 2, 2]\n    >>> dutch_national_flag_sort([0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1])\n    [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2]\n    >>> dutch_national_flag_sort(\"abacab\")\n    Traceback (most recent call last):\n      ...\n    ValueError: The elements inside the sequence must contains only (0, 1, 2) values\n    >>> dutch_national_flag_sort(\"Abacab\")\n    Traceback (most recent call last):\n      ...\n    ValueError: The elements inside the sequence must contains only (0, 1, 2) values\n    >>> dutch_national_flag_sort([3, 2, 3, 1, 3, 0, 3])\n    Traceback (most recent call last):\n      ...\n    ValueError: The elements inside the sequence must contains only (0, 1, 2) values\n    >>> dutch_national_flag_sort([-1, 2, -1, 1, -1, 0, -1])\n    Traceback (most recent call last):\n      ...\n    ValueError: The elements inside the sequence must contains only (0, 1, 2) values\n    >>> dutch_national_flag_sort([1.1, 2, 1.1, 1, 1.1, 0, 1.1])\n    Traceback (most recent call last):\n      ...\n    ValueError: The elements inside the sequence must contains only (0, 1, 2) values\n    \"\"\"\n    if not sequence:\n        return []\n    if len(sequence) == 1:\n        return list(sequence)\n    low = 0\n    high = len(sequence) - 1\n    mid = 0\n    while mid <= high:\n        if sequence[mid] == colors[0]:\n            sequence[low], sequence[mid] = sequence[mid], sequence[low]\n            low += 1\n            mid += 1\n        elif sequence[mid] == colors[1]:\n            mid += 1\n        elif sequence[mid] == colors[2]:\n            sequence[mid], sequence[high] = sequence[high], sequence[mid]\n            high -= 1\n        else:\n            msg = (\n                f'The elements inside the sequence must contains only {colors} values'\n                )\n            raise ValueError(msg)\n    return sequence\n", "func_name": "dutch_national_flag_sort", "exec_status": true, "example_inputs": ["\"{'sequence': []}\"", "\"{'sequence': [0]}\"", "\"{'sequence': [2, 1, 0, 0, 1, 2]}\"", "\"{'sequence': [0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1]}\"", "\"{'sequence': [0, 0, 0, 1, 1, 1, 2, 2, 2]}\"", "\"{'sequence': [2, 2, 1, 1, 0, 0]}\"", "\"{'sequence': [1, 1, 1, 0, 0, 0]}\"", "\"{'sequence': [0, 1, 2, 0, 1, 2, 0, 1, 2]}\"", "\"{'sequence': [2, 1, 0, 2, 1, 0, 2, 1, 0]}\"", "\"{'sequence': [1, 0, 1, 0, 1, 0, 1, 0, 1]}\""], "example_outputs": [{"return": "\"[]\""}, {"return": "\"[0]\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'colors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'colors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'colors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'colors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'colors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'colors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'colors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'colors' is not defined\""}, {"return": "\"[]\""}, {"return": "\"[0]\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'colors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'colors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'colors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'colors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'colors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'colors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'colors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'colors' is not defined\""}, {"return": "\"[]\""}, {"return": "\"[0]\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'colors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'colors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'colors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'colors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'colors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'colors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'colors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'colors' is not defined\""}], "parsed_inputs": [[["sequence", "[]"]], [["sequence", "[0]"]], [["sequence", "[2, 1, 0, 0, 1, 2]"]], [["sequence", "[0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1]"]], [["sequence", "[0, 0, 0, 1, 1, 1, 2, 2, 2]"]], [["sequence", "[2, 2, 1, 1, 0, 0]"]], [["sequence", "[1, 1, 1, 0, 0, 0]"]], [["sequence", "[0, 1, 2, 0, 1, 2, 0, 1, 2]"]], [["sequence", "[2, 1, 0, 2, 1, 0, 2, 1, 0]"]], [["sequence", "[1, 0, 1, 0, 1, 0, 1, 0, 1]"]]], "exec_code": "def dutch_national_flag_sort(sequence: list) ->list:\n    \"\"\"\n    A pure Python implementation of Dutch National Flag sort algorithm.\n    :param data: 3 unique integer values (e.g., 0, 1, 2) in an sequence\n    :return: The same collection in ascending order\n\n    >>> dutch_national_flag_sort([])\n    []\n    >>> dutch_national_flag_sort([0])\n    [0]\n    >>> dutch_national_flag_sort([2, 1, 0, 0, 1, 2])\n    [0, 0, 1, 1, 2, 2]\n    >>> dutch_national_flag_sort([0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1])\n    [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2]\n    >>> dutch_national_flag_sort(\"abacab\")\n    Traceback (most recent call last):\n      ...\n    ValueError: The elements inside the sequence must contains only (0, 1, 2) values\n    >>> dutch_national_flag_sort(\"Abacab\")\n    Traceback (most recent call last):\n      ...\n    ValueError: The elements inside the sequence must contains only (0, 1, 2) values\n    >>> dutch_national_flag_sort([3, 2, 3, 1, 3, 0, 3])\n    Traceback (most recent call last):\n      ...\n    ValueError: The elements inside the sequence must contains only (0, 1, 2) values\n    >>> dutch_national_flag_sort([-1, 2, -1, 1, -1, 0, -1])\n    Traceback (most recent call last):\n      ...\n    ValueError: The elements inside the sequence must contains only (0, 1, 2) values\n    >>> dutch_national_flag_sort([1.1, 2, 1.1, 1, 1.1, 0, 1.1])\n    Traceback (most recent call last):\n      ...\n    ValueError: The elements inside the sequence must contains only (0, 1, 2) values\n    \"\"\"\n    if not sequence:\n        return []\n    if len(sequence) == 1:\n        return list(sequence)\n    low = 0\n    high = len(sequence) - 1\n    mid = 0\n    while mid <= high:\n        if sequence[mid] == colors[0]:\n            sequence[low], sequence[mid] = sequence[mid], sequence[low]\n            low += 1\n            mid += 1\n        elif sequence[mid] == colors[1]:\n            mid += 1\n        elif sequence[mid] == colors[2]:\n            sequence[mid], sequence[high] = sequence[high], sequence[mid]\n            high -= 1\n        else:\n            msg = (\n                f'The elements inside the sequence must contains only {colors} values'\n                )\n            raise ValueError(msg)\n    return sequence\n", "output": "The function is:\n\n```python\ndef dutch_national_flag_sort(sequence: list) ->list:\n    \"\"\"\n    A pure Python implementation of Dutch National Flag sort algorithm.\n    :param data: 3 unique integer values (e.g., 0, 1, 2) in an sequence\n    :return: The same collection in ascending order\n\n    >>> dutch_national_flag_sort([])\n    []\n    >>> dutch_national_flag_sort([0])\n    [0]\n    >>> dutch_national_flag_sort([2, 1, 0, 0, 1, 2])\n    [0, 0, 1, 1, 2, 2]\n    >>> dutch_national_flag_sort([0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1])\n    [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2]\n    >>> dutch_national_flag_sort(\"abacab\")\n    Traceback (most recent call last):\n      ...\n    ValueError: The elements inside the sequence must contains only (0, 1, 2) values\n    >>> dutch_national_flag_sort(\"Abacab\")\n    Traceback (most recent call last):\n      ...\n    ValueError: The elements inside the sequence must contains only (0, 1, 2) values\n    >>> dutch_national_flag_sort([3, 2, 3, 1, 3, 0, 3])\n    Traceback (most recent call last):\n      ...\n    ValueError: The elements inside the sequence must contains only (0, 1, 2) values\n    >>> dutch_national_flag_sort([-1, 2, -1, 1, -1, 0, -1])\n    Traceback (most recent call last):\n      ...\n    ValueError: The elements inside the sequence must contains only (0, 1, 2) values\n    >>> dutch_national_flag_sort([1.1, 2, 1.1, 1, 1.1, 0, 1.1])\n    Traceback (most recent call last):\n      ...\n    ValueError: The elements inside the sequence must contains only (0, 1, 2) values\n    \"\"\"\n    if not sequence:\n        return []\n    if len(sequence) == 1:\n        return list(sequence)\n    low = 0\n    high = len(sequence) - 1\n    mid = 0\n    while mid <= high:\n        if sequence[mid] == colors[0]:\n            sequence[low], sequence[mid] = sequence[mid], sequence[low]\n            low += 1\n            mid += 1\n        elif sequence[mid] == colors[1]:\n            mid += 1\n        elif sequence[mid] == colors[2]:\n            sequence[mid], sequence[high] = sequence[high], sequence[mid]\n            high -= 1\n        else:\n            msg = (\n                f'The elements inside the sequence must contains only {colors} values'\n                )\n            raise ValueError(msg)\n    return sequence\n\n```", "choosed_example_idx": [5, 0, 9, 8, 1, 4], "prompt": "Write a function that generates the output from the input.\n\nFunction: dutch_national_flag_sort\nInput: dict(sequence=[2, 2, 1, 1, 0, 0]), Output: \"<class 'NameError'>: name 'colors' is not defined\"\nInput: dict(sequence=[]), Output: \"[]\"\nInput: dict(sequence=[1, 0, 1, 0, 1, 0, 1, 0, 1]), Output: \"<class 'NameError'>: name 'colors' is not defined\"\nInput: dict(sequence=[2, 1, 0, 2, 1, 0, 2, 1, 0]), Output: \"<class 'NameError'>: name 'colors' is not defined\"\nInput: dict(sequence=[0]), Output: \"[0]\"\nInput: dict(sequence=[0, 0, 0, 1, 1, 1, 2, 2, 2]), Output: \"<class 'NameError'>: name 'colors' is not defined\"\n\n", "id": "758e3a887b84510c78e7d606c7cc361507199f0c_0"}
{"example_str": "examples = [\n    dict(arr=[1, 2, 3, 4, 5]),\n    dict(arr=[\"a\", \"b\", \"c\", \"d\"]),\n    dict(arr=[True, False, True, False]),\n    dict(arr=[1.1, 2.2, 3.3, 4.4]),\n    dict(arr=[\"hello\", \"world\"]),\n    dict(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),\n    dict(arr=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]),\n    dict(arr=[1, 1, 1, 1, 1]),\n    dict(arr=[]),\n    dict(arr=[42]),\n]\nexamples += [\n    dict(arr=[1, 2, 3, 4, 5]),\n    dict(arr=[10, 20, 30]),\n    dict(arr=[-1, -2, -3, -4]),\n    dict(arr=['a', 'b', 'c', 'd']),\n    dict(arr=[True, False, True]),\n    dict(arr=[1.1, 2.2, 3.3, 4.4, 5.5]),\n    dict(arr=[]),\n    dict(arr=[100]),\n    dict(arr=['apple', 'banana', 'cherry']),\n    dict(arr=[None, 'None', False, 0, '0'])\n]\nexamples += [\n    dict(arr=[1, 2, 3, 4, 5]),\n    dict(arr=['a', 'b', 'c', 'd', 'e']),\n    dict(arr=[True, False, True, False]),\n    dict(arr=[1.1, 2.2, 3.3, 4.4, 5.5]),\n    dict(arr=['apple', 'banana', 'cherry']),\n    dict(arr=[10, 20]),\n    dict(arr=['x']),\n    dict(arr=[]),\n    dict(arr=[None, 'None', True, 42]),\n    dict(arr=[[1, 2], [3, 4], [5, 6]])\n]", "code": "def reverse_array_in_place(arr):\n    for num in range(0, int(len(arr) / 2)):\n        temp = arr[num]\n        arr[num] = arr[len(arr) - 1 - num]\n        arr[len(arr) - 1 - num] = temp\n    return arr\n", "func_name": "reverse_array_in_place", "exec_status": true, "example_inputs": ["\"{'arr': [1, 2, 3, 4, 5]}\"", "\"{'arr': ['a', 'b', 'c', 'd']}\"", "\"{'arr': [True, False, True, False]}\"", "\"{'arr': [1.1, 2.2, 3.3, 4.4]}\"", "\"{'arr': ['hello', 'world']}\"", "\"{'arr': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}\"", "\"{'arr': ['apple', 'banana', 'cherry', 'date', 'elderberry']}\"", "\"{'arr': [1, 1, 1, 1, 1]}\"", "\"{'arr': []}\"", "\"{'arr': [42]}\""], "example_outputs": [{"return": "\"[5, 4, 3, 2, 1]\""}, {"return": "\"['d', 'c', 'b', 'a']\""}, {"return": "\"[False, True, False, True]\""}, {"return": "\"[4.4, 3.3, 2.2, 1.1]\""}, {"return": "\"['world', 'hello']\""}, {"return": "\"[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\""}, {"return": "\"['elderberry', 'date', 'cherry', 'banana', 'apple']\""}, {"return": "\"[1, 1, 1, 1, 1]\""}, {"return": "\"[]\""}, {"return": "\"[42]\""}, {"return": "\"[5, 4, 3, 2, 1]\""}, {"return": "\"[30, 20, 10]\""}, {"return": "\"[-4, -3, -2, -1]\""}, {"return": "\"['d', 'c', 'b', 'a']\""}, {"return": "\"[True, False, True]\""}, {"return": "\"[5.5, 4.4, 3.3, 2.2, 1.1]\""}, {"return": "\"[]\""}, {"return": "\"[100]\""}, {"return": "\"['cherry', 'banana', 'apple']\""}, {"return": "\"['0', 0, False, 'None', None]\""}, {"return": "\"[5, 4, 3, 2, 1]\""}, {"return": "\"['e', 'd', 'c', 'b', 'a']\""}, {"return": "\"[False, True, False, True]\""}, {"return": "\"[5.5, 4.4, 3.3, 2.2, 1.1]\""}, {"return": "\"['cherry', 'banana', 'apple']\""}, {"return": "\"[20, 10]\""}, {"return": "\"['x']\""}, {"return": "\"[]\""}, {"return": "\"[42, True, 'None', None]\""}, {"return": "\"[[5, 6], [3, 4], [1, 2]]\""}], "parsed_inputs": [[["arr", "[1, 2, 3, 4, 5]"]], [["arr", "['a', 'b', 'c', 'd']"]], [["arr", "[True, False, True, False]"]], [["arr", "[1.1, 2.2, 3.3, 4.4]"]], [["arr", "['hello', 'world']"]], [["arr", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"]], [["arr", "['apple', 'banana', 'cherry', 'date', 'elderberry']"]], [["arr", "[1, 1, 1, 1, 1]"]], [["arr", "[]"]], [["arr", "[42]"]]], "exec_code": "def reverse_array_in_place(arr):\n    for num in range(0, int(len(arr) / 2)):\n        temp = arr[num]\n        arr[num] = arr[len(arr) - 1 - num]\n        arr[len(arr) - 1 - num] = temp\n    return arr\n", "output": "The function is:\n\n```python\ndef reverse_array_in_place(arr):\n    for num in range(0, int(len(arr) / 2)):\n        temp = arr[num]\n        arr[num] = arr[len(arr) - 1 - num]\n        arr[len(arr) - 1 - num] = temp\n    return arr\n\n```", "choosed_example_idx": [8, 5, 7, 1, 2, 9], "prompt": "Write a function that generates the output from the input.\n\nInput: dict(arr=[]), Output: \"[]\"\nInput: dict(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), Output: \"[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\"\nInput: dict(arr=[1, 1, 1, 1, 1]), Output: \"[1, 1, 1, 1, 1]\"\nInput: dict(arr=['a', 'b', 'c', 'd']), Output: \"['d', 'c', 'b', 'a']\"\nInput: dict(arr=[True, False, True, False]), Output: \"[False, True, False, True]\"\nInput: dict(arr=[42]), Output: \"[42]\"\n\n\nFunction: reverse_array_in_place\n\n", "id": "807b70346d2108d573e543a609cb89b1d6e6cb44_0"}
{"example_str": "examples = [\n    dict(math=[\"2 + 3\", \"4 - 2\"], answer=False),\n    dict(math=[\"1 + 1\", \"2 - 2\", \"3 + 3\"], answer=True),\n    dict(math=[\"10 + 5\", \"20 - 10\"], answer=False),\n    dict(math=[\"5 - 3\", \"7 + 2\"], answer=True),\n    dict(math=[\"2 + 2\", \"4 + 4\", \"6 + 6\"], answer=False),\n    dict(math=[\"1 - 1\", \"2 - 2\", \"3 - 3\"], answer=True),\n    dict(math=[\"10 - 5\", \"20 + 10\"], answer=False),\n    dict(math=[\"3 + 3\", \"4 - 4\"], answer=True),\n    dict(math=[\"2 + 2\", \"4 - 4\", \"6 + 6\"], answer=False),\n    dict(math=[\"5 + 5\", \"10 - 10\", \"15 + 15\"], answer=True),\n]\nexamples += [\n    dict(math=[\"32 + 698\", \"3801 - 2\", \"45 + 43\", \"123 + 49\"], answer=False),\n    dict(math=[\"1 + 2\", \"123 - 49\"], answer=True),\n    dict(math=[\"10 + 2\", \"8 - 3\", \"5 + 6\"], answer=False),\n    dict(math=[\"234 + 666\", \"1001 - 1000\"], answer=True),\n    dict(math=[\"9999 + 9999\"], answer=False),\n    dict(math=[\"50 - 5\", \"7 + 8\", \"300 + 4000\"], answer=True),\n    dict(math=[\"1234 - 123\", \"987 + 654\"], answer=False),\n    dict(math=[\"100 - 200\", \"50 + 25\", \"75 - 25\"], answer=True),\n    dict(math=[\"10 + 20\", \"30 - 15\", \"45 + 55\", \"60 - 30\"], answer=False),\n    dict(math=[\"5 + 3\", \"10 - 2\", \"20 + 20\", \"40 - 5\", \"55 + 5\"], answer=True)\n]\nexamples += [\n    dict(math=[\"32 + 698\", \"3801 - 2\", \"45 + 43\", \"123 + 49\"], answer=False),\n    dict(math=[\"1 + 2\", \"1 - 9380\"], answer=True),\n    dict(math=[\"3 + 855\", \"3801 - 2\", \"45 + 43\", \"123 + 49\", \"1 - 9380\"], answer=False),\n    dict(math=[\"24 + 85215\", \"1 - 2\"], answer=True),\n    dict(math=[\"9999 + 9999\"], answer=False),\n    dict(math=[\"523 - 49\"], answer=True),\n    dict(math=[\"10 + 4\", \"1000 - 1\"], answer=False),\n    dict(math=[\"999 + 999\", \"999 - 999\"], answer=True),\n    dict(math=[\"123 + 456\", \"789 - 10\", \"45 + 6\"], answer=False),\n    dict(math=[\"321 - 654\", \"204 + 119\"], answer=True)\n]", "code": "def arithmetic_arranger(math, answer=False):\n    right_alligned_1strow = None\n    right_alligned_2ndrow = None\n    dasher = None\n    right_alligned_result = None\n    arithmetics = math\n    solver = answer\n    arranged_1st_row = []\n    arranged_2nd_row = []\n    dashers = []\n    answers = []\n    for problems in arithmetics:\n        if len(arithmetics) > 5:\n            problems_lenght_error = 'Error: Too many problems.'\n            return problems_lenght_error\n        elements = problems.split()\n        first_number = elements[0]\n        second_number = elements[2]\n        operator = elements[1]\n        if operator != '+':\n            if operator != '-':\n                return \"Error: Operator must be '+' or '-'.\"\n        try:\n            number1_int = int(first_number)\n        except ValueError:\n            return 'Error: Numbers must only contain digits.'\n        try:\n            number2_int = int(second_number)\n        except ValueError:\n            return 'Error: Numbers must only contain digits.'\n        if len(first_number) > 4 or len(second_number) > 4:\n            return 'Error: Numbers cannot be more than four digits.'\n        if len(first_number) > len(second_number) and operator == '+':\n            right_alligned_1strow = first_number.rjust(len(first_number) + 2)\n            right_alligned_2ndrow = '+' + second_number.rjust(len(\n                right_alligned_1strow) - 1)\n            dasher = '-' * len(right_alligned_1strow)\n            result = str(number1_int + number2_int)\n            right_alligned_result = result.rjust(len(right_alligned_1strow))\n        elif len(first_number) < len(second_number) and operator == '+':\n            right_alligned_2ndrow = '+' + second_number.rjust(len(\n                second_number) + 1)\n            right_alligned_1strow = first_number.rjust(len(\n                right_alligned_2ndrow))\n            dasher = '-' * len(right_alligned_2ndrow)\n            result = str(number1_int + number2_int)\n            right_alligned_result = result.rjust(len(right_alligned_2ndrow))\n        elif len(first_number) > len(second_number) and operator == '-':\n            right_alligned_1strow = first_number.rjust(len(first_number) + 2)\n            right_alligned_2ndrow = '-' + second_number.rjust(len(\n                right_alligned_1strow) - 1)\n            dasher = '-' * len(right_alligned_1strow)\n            result = str(number1_int - number2_int)\n            right_alligned_result = result.rjust(len(right_alligned_1strow))\n        elif len(first_number) < len(second_number) and operator == '-':\n            right_alligned_2ndrow = '-' + second_number.rjust(len(\n                second_number) + 1)\n            right_alligned_1strow = first_number.rjust(len(\n                right_alligned_2ndrow))\n            dasher = '-' * len(right_alligned_2ndrow)\n            result = str(number1_int - number2_int)\n            right_alligned_result = result.rjust(len(right_alligned_2ndrow))\n        elif len(first_number) == len(second_number) and operator == '-':\n            right_alligned_2ndrow = '-' + second_number.rjust(len(\n                second_number) + 1)\n            right_alligned_1strow = first_number.rjust(len(\n                right_alligned_2ndrow))\n            dasher = '-' * len(right_alligned_2ndrow)\n            result = str(number1_int - number2_int)\n            right_alligned_result = result.rjust(len(right_alligned_2ndrow))\n        elif len(first_number) == len(second_number) and operator == '+':\n            right_alligned_2ndrow = '+' + second_number.rjust(len(\n                second_number) + 1)\n            right_alligned_1strow = first_number.rjust(len(\n                right_alligned_2ndrow))\n            dasher = '-' * len(right_alligned_2ndrow)\n            result = str(number1_int + number2_int)\n            right_alligned_result = result.rjust(len(right_alligned_2ndrow))\n        if len(arranged_1st_row) < 1:\n            arranged_1st_row.append(right_alligned_1strow)\n        else:\n            arranged_1st_row.append('    ')\n            arranged_1st_row.append(right_alligned_1strow)\n        if len(arranged_2nd_row) < 1:\n            arranged_2nd_row.append(right_alligned_2ndrow)\n        else:\n            arranged_2nd_row.append('    ')\n            arranged_2nd_row.append(right_alligned_2ndrow)\n        if len(dashers) < 1:\n            dashers.append(dasher)\n        else:\n            dashers.append('    ')\n            dashers.append(dasher)\n        if len(answers) < 1:\n            answers.append(right_alligned_result)\n        else:\n            answers.append('    ')\n            answers.append(right_alligned_result)\n    arranged_1st_row = ''.join(arranged_1st_row)\n    arranged_2nd_row = ''.join(arranged_2nd_row)\n    dashers = ''.join(dashers)\n    answers = ''.join(answers)\n    if not solver:\n        arranged_problems = (arranged_1st_row + '\\n' + arranged_2nd_row +\n            '\\n' + dashers)\n    else:\n        arranged_problems = (arranged_1st_row + '\\n' + arranged_2nd_row +\n            '\\n' + dashers + '\\n' + answers)\n    return arranged_problems\n", "func_name": "arithmetic_arranger", "exec_status": true, "example_inputs": ["\"{'math': ['2 + 3', '4 - 2'], 'answer': False}\"", "\"{'math': ['1 + 1', '2 - 2', '3 + 3'], 'answer': True}\"", "\"{'math': ['10 + 5', '20 - 10'], 'answer': False}\"", "\"{'math': ['5 - 3', '7 + 2'], 'answer': True}\"", "\"{'math': ['2 + 2', '4 + 4', '6 + 6'], 'answer': False}\"", "\"{'math': ['1 - 1', '2 - 2', '3 - 3'], 'answer': True}\"", "\"{'math': ['10 - 5', '20 + 10'], 'answer': False}\"", "\"{'math': ['3 + 3', '4 - 4'], 'answer': True}\"", "\"{'math': ['2 + 2', '4 - 4', '6 + 6'], 'answer': False}\"", "\"{'math': ['5 + 5', '10 - 10', '15 + 15'], 'answer': True}\""], "example_outputs": [{"return": "\"'  2      4\\\\n+ 3    - 2\\\\n---    ---'\""}, {"return": "\"'  1      2      3\\\\n+ 1    - 2    + 3\\\\n---    ---    ---\\\\n  2      0      6'\""}, {"return": "\"'  10      20\\\\n+  5    - 10\\\\n----    ----'\""}, {"return": "\"'  5      7\\\\n- 3    + 2\\\\n---    ---\\\\n  2      9'\""}, {"return": "\"'  2      4      6\\\\n+ 2    + 4    + 6\\\\n---    ---    ---'\""}, {"return": "\"'  1      2      3\\\\n- 1    - 2    - 3\\\\n---    ---    ---\\\\n  0      0      0'\""}, {"return": "\"'  10      20\\\\n-  5    + 10\\\\n----    ----'\""}, {"return": "\"'  3      4\\\\n+ 3    - 4\\\\n---    ---\\\\n  6      0'\""}, {"return": "\"'  2      4      6\\\\n+ 2    - 4    + 6\\\\n---    ---    ---'\""}, {"return": "\"'  5      10      15\\\\n+ 5    - 10    + 15\\\\n---    ----    ----\\\\n 10       0      30'\""}, {"return": "\"'   32      3801      45      123\\\\n+ 698    -    2    + 43    +  49\\\\n-----    ------    ----    -----'\""}, {"return": "\"'  1      123\\\\n+ 2    -  49\\\\n---    -----\\\\n  3       74'\""}, {"return": "\"'  10      8      5\\\\n+  2    - 3    + 6\\\\n----    ---    ---'\""}, {"return": "\"'  234      1001\\\\n+ 666    - 1000\\\\n-----    ------\\\\n  900         1'\""}, {"return": "\"'  9999\\\\n+ 9999\\\\n------'\""}, {"return": "\"'  50      7       300\\\\n-  5    + 8    + 4000\\\\n----    ---    ------\\\\n  45     15      4300'\""}, {"return": "\"'  1234      987\\\\n-  123    + 654\\\\n------    -----'\""}, {"return": "\"'  100      50      75\\\\n- 200    + 25    - 25\\\\n-----    ----    ----\\\\n -100      75      50'\""}, {"return": "\"'  10      30      45      60\\\\n+ 20    - 15    + 55    - 30\\\\n----    ----    ----    ----'\""}, {"return": "\"'  5      10      20      40      55\\\\n+ 3    -  2    + 20    -  5    +  5\\\\n---    ----    ----    ----    ----\\\\n  8       8      40      35      60'\""}, {"return": "\"'   32      3801      45      123\\\\n+ 698    -    2    + 43    +  49\\\\n-----    ------    ----    -----'\""}, {"return": "\"'  1         1\\\\n+ 2    - 9380\\\\n---    ------\\\\n  3     -9379'\""}, {"return": "\"'    3      3801      45      123         1\\\\n+ 855    -    2    + 43    +  49    - 9380\\\\n-----    ------    ----    -----    ------'\""}, {"return": "\"'Error: Numbers cannot be more than four digits.'\""}, {"return": "\"'  9999\\\\n+ 9999\\\\n------'\""}, {"return": "\"'  523\\\\n-  49\\\\n-----\\\\n  474'\""}, {"return": "\"'  10      1000\\\\n+  4    -    1\\\\n----    ------'\""}, {"return": "\"'  999      999\\\\n+ 999    - 999\\\\n-----    -----\\\\n 1998        0'\""}, {"return": "\"'  123      789      45\\\\n+ 456    -  10    +  6\\\\n-----    -----    ----'\""}, {"return": "\"'  321      204\\\\n- 654    + 119\\\\n-----    -----\\\\n -333      323'\""}], "parsed_inputs": [[["math", "['2 + 3', '4 - 2']"], ["answer", "False"]], [["math", "['1 + 1', '2 - 2', '3 + 3']"], ["answer", "True"]], [["math", "['10 + 5', '20 - 10']"], ["answer", "False"]], [["math", "['5 - 3', '7 + 2']"], ["answer", "True"]], [["math", "['2 + 2', '4 + 4', '6 + 6']"], ["answer", "False"]], [["math", "['1 - 1', '2 - 2', '3 - 3']"], ["answer", "True"]], [["math", "['10 - 5', '20 + 10']"], ["answer", "False"]], [["math", "['3 + 3', '4 - 4']"], ["answer", "True"]], [["math", "['2 + 2', '4 - 4', '6 + 6']"], ["answer", "False"]], [["math", "['5 + 5', '10 - 10', '15 + 15']"], ["answer", "True"]]], "exec_code": "def arithmetic_arranger(math, answer=False):\n    right_alligned_1strow = None\n    right_alligned_2ndrow = None\n    dasher = None\n    right_alligned_result = None\n    arithmetics = math\n    solver = answer\n    arranged_1st_row = []\n    arranged_2nd_row = []\n    dashers = []\n    answers = []\n    for problems in arithmetics:\n        if len(arithmetics) > 5:\n            problems_lenght_error = 'Error: Too many problems.'\n            return problems_lenght_error\n        elements = problems.split()\n        first_number = elements[0]\n        second_number = elements[2]\n        operator = elements[1]\n        if operator != '+':\n            if operator != '-':\n                return \"Error: Operator must be '+' or '-'.\"\n        try:\n            number1_int = int(first_number)\n        except ValueError:\n            return 'Error: Numbers must only contain digits.'\n        try:\n            number2_int = int(second_number)\n        except ValueError:\n            return 'Error: Numbers must only contain digits.'\n        if len(first_number) > 4 or len(second_number) > 4:\n            return 'Error: Numbers cannot be more than four digits.'\n        if len(first_number) > len(second_number) and operator == '+':\n            right_alligned_1strow = first_number.rjust(len(first_number) + 2)\n            right_alligned_2ndrow = '+' + second_number.rjust(len(\n                right_alligned_1strow) - 1)\n            dasher = '-' * len(right_alligned_1strow)\n            result = str(number1_int + number2_int)\n            right_alligned_result = result.rjust(len(right_alligned_1strow))\n        elif len(first_number) < len(second_number) and operator == '+':\n            right_alligned_2ndrow = '+' + second_number.rjust(len(\n                second_number) + 1)\n            right_alligned_1strow = first_number.rjust(len(\n                right_alligned_2ndrow))\n            dasher = '-' * len(right_alligned_2ndrow)\n            result = str(number1_int + number2_int)\n            right_alligned_result = result.rjust(len(right_alligned_2ndrow))\n        elif len(first_number) > len(second_number) and operator == '-':\n            right_alligned_1strow = first_number.rjust(len(first_number) + 2)\n            right_alligned_2ndrow = '-' + second_number.rjust(len(\n                right_alligned_1strow) - 1)\n            dasher = '-' * len(right_alligned_1strow)\n            result = str(number1_int - number2_int)\n            right_alligned_result = result.rjust(len(right_alligned_1strow))\n        elif len(first_number) < len(second_number) and operator == '-':\n            right_alligned_2ndrow = '-' + second_number.rjust(len(\n                second_number) + 1)\n            right_alligned_1strow = first_number.rjust(len(\n                right_alligned_2ndrow))\n            dasher = '-' * len(right_alligned_2ndrow)\n            result = str(number1_int - number2_int)\n            right_alligned_result = result.rjust(len(right_alligned_2ndrow))\n        elif len(first_number) == len(second_number) and operator == '-':\n            right_alligned_2ndrow = '-' + second_number.rjust(len(\n                second_number) + 1)\n            right_alligned_1strow = first_number.rjust(len(\n                right_alligned_2ndrow))\n            dasher = '-' * len(right_alligned_2ndrow)\n            result = str(number1_int - number2_int)\n            right_alligned_result = result.rjust(len(right_alligned_2ndrow))\n        elif len(first_number) == len(second_number) and operator == '+':\n            right_alligned_2ndrow = '+' + second_number.rjust(len(\n                second_number) + 1)\n            right_alligned_1strow = first_number.rjust(len(\n                right_alligned_2ndrow))\n            dasher = '-' * len(right_alligned_2ndrow)\n            result = str(number1_int + number2_int)\n            right_alligned_result = result.rjust(len(right_alligned_2ndrow))\n        if len(arranged_1st_row) < 1:\n            arranged_1st_row.append(right_alligned_1strow)\n        else:\n            arranged_1st_row.append('    ')\n            arranged_1st_row.append(right_alligned_1strow)\n        if len(arranged_2nd_row) < 1:\n            arranged_2nd_row.append(right_alligned_2ndrow)\n        else:\n            arranged_2nd_row.append('    ')\n            arranged_2nd_row.append(right_alligned_2ndrow)\n        if len(dashers) < 1:\n            dashers.append(dasher)\n        else:\n            dashers.append('    ')\n            dashers.append(dasher)\n        if len(answers) < 1:\n            answers.append(right_alligned_result)\n        else:\n            answers.append('    ')\n            answers.append(right_alligned_result)\n    arranged_1st_row = ''.join(arranged_1st_row)\n    arranged_2nd_row = ''.join(arranged_2nd_row)\n    dashers = ''.join(dashers)\n    answers = ''.join(answers)\n    if not solver:\n        arranged_problems = (arranged_1st_row + '\\n' + arranged_2nd_row +\n            '\\n' + dashers)\n    else:\n        arranged_problems = (arranged_1st_row + '\\n' + arranged_2nd_row +\n            '\\n' + dashers + '\\n' + answers)\n    return arranged_problems\n", "output": "The function is:\n\n```python\ndef arithmetic_arranger(math, answer=False):\n    right_alligned_1strow = None\n    right_alligned_2ndrow = None\n    dasher = None\n    right_alligned_result = None\n    arithmetics = math\n    solver = answer\n    arranged_1st_row = []\n    arranged_2nd_row = []\n    dashers = []\n    answers = []\n    for problems in arithmetics:\n        if len(arithmetics) > 5:\n            problems_lenght_error = 'Error: Too many problems.'\n            return problems_lenght_error\n        elements = problems.split()\n        first_number = elements[0]\n        second_number = elements[2]\n        operator = elements[1]\n        if operator != '+':\n            if operator != '-':\n                return \"Error: Operator must be '+' or '-'.\"\n        try:\n            number1_int = int(first_number)\n        except ValueError:\n            return 'Error: Numbers must only contain digits.'\n        try:\n            number2_int = int(second_number)\n        except ValueError:\n            return 'Error: Numbers must only contain digits.'\n        if len(first_number) > 4 or len(second_number) > 4:\n            return 'Error: Numbers cannot be more than four digits.'\n        if len(first_number) > len(second_number) and operator == '+':\n            right_alligned_1strow = first_number.rjust(len(first_number) + 2)\n            right_alligned_2ndrow = '+' + second_number.rjust(len(\n                right_alligned_1strow) - 1)\n            dasher = '-' * len(right_alligned_1strow)\n            result = str(number1_int + number2_int)\n            right_alligned_result = result.rjust(len(right_alligned_1strow))\n        elif len(first_number) < len(second_number) and operator == '+':\n            right_alligned_2ndrow = '+' + second_number.rjust(len(\n                second_number) + 1)\n            right_alligned_1strow = first_number.rjust(len(\n                right_alligned_2ndrow))\n            dasher = '-' * len(right_alligned_2ndrow)\n            result = str(number1_int + number2_int)\n            right_alligned_result = result.rjust(len(right_alligned_2ndrow))\n        elif len(first_number) > len(second_number) and operator == '-':\n            right_alligned_1strow = first_number.rjust(len(first_number) + 2)\n            right_alligned_2ndrow = '-' + second_number.rjust(len(\n                right_alligned_1strow) - 1)\n            dasher = '-' * len(right_alligned_1strow)\n            result = str(number1_int - number2_int)\n            right_alligned_result = result.rjust(len(right_alligned_1strow))\n        elif len(first_number) < len(second_number) and operator == '-':\n            right_alligned_2ndrow = '-' + second_number.rjust(len(\n                second_number) + 1)\n            right_alligned_1strow = first_number.rjust(len(\n                right_alligned_2ndrow))\n            dasher = '-' * len(right_alligned_2ndrow)\n            result = str(number1_int - number2_int)\n            right_alligned_result = result.rjust(len(right_alligned_2ndrow))\n        elif len(first_number) == len(second_number) and operator == '-':\n            right_alligned_2ndrow = '-' + second_number.rjust(len(\n                second_number) + 1)\n            right_alligned_1strow = first_number.rjust(len(\n                right_alligned_2ndrow))\n            dasher = '-' * len(right_alligned_2ndrow)\n            result = str(number1_int - number2_int)\n            right_alligned_result = result.rjust(len(right_alligned_2ndrow))\n        elif len(first_number) == len(second_number) and operator == '+':\n            right_alligned_2ndrow = '+' + second_number.rjust(len(\n                second_number) + 1)\n            right_alligned_1strow = first_number.rjust(len(\n                right_alligned_2ndrow))\n            dasher = '-' * len(right_alligned_2ndrow)\n            result = str(number1_int + number2_int)\n            right_alligned_result = result.rjust(len(right_alligned_2ndrow))\n        if len(arranged_1st_row) < 1:\n            arranged_1st_row.append(right_alligned_1strow)\n        else:\n            arranged_1st_row.append('    ')\n            arranged_1st_row.append(right_alligned_1strow)\n        if len(arranged_2nd_row) < 1:\n            arranged_2nd_row.append(right_alligned_2ndrow)\n        else:\n            arranged_2nd_row.append('    ')\n            arranged_2nd_row.append(right_alligned_2ndrow)\n        if len(dashers) < 1:\n            dashers.append(dasher)\n        else:\n            dashers.append('    ')\n            dashers.append(dasher)\n        if len(answers) < 1:\n            answers.append(right_alligned_result)\n        else:\n            answers.append('    ')\n            answers.append(right_alligned_result)\n    arranged_1st_row = ''.join(arranged_1st_row)\n    arranged_2nd_row = ''.join(arranged_2nd_row)\n    dashers = ''.join(dashers)\n    answers = ''.join(answers)\n    if not solver:\n        arranged_problems = (arranged_1st_row + '\\n' + arranged_2nd_row +\n            '\\n' + dashers)\n    else:\n        arranged_problems = (arranged_1st_row + '\\n' + arranged_2nd_row +\n            '\\n' + dashers + '\\n' + answers)\n    return arranged_problems\n\n```", "choosed_example_idx": [8, 9, 3, 0, 7, 1], "prompt": "Write a function that generates the output from the input.\n\nInput: dict(math=['2 + 2', '4 - 4', '6 + 6'], answer=False), Output: \"'  2      4      6\\\\n+ 2    - 4    + 6\\\\n---    ---    ---'\"\nInput: dict(math=['5 + 5', '10 - 10', '15 + 15'], answer=True), Output: \"'  5      10      15\\\\n+ 5    - 10    + 15\\\\n---    ----    ----\\\\n 10       0      30'\"\nInput: dict(math=['5 - 3', '7 + 2'], answer=True), Output: \"'  5      7\\\\n- 3    + 2\\\\n---    ---\\\\n  2      9'\"\nInput: dict(math=['2 + 3', '4 - 2'], answer=False), Output: \"'  2      4\\\\n+ 3    - 2\\\\n---    ---'\"\nInput: dict(math=['3 + 3', '4 - 4'], answer=True), Output: \"'  3      4\\\\n+ 3    - 4\\\\n---    ---\\\\n  6      0'\"\nInput: dict(math=['1 + 1', '2 - 2', '3 + 3'], answer=True), Output: \"'  1      2      3\\\\n+ 1    - 2    + 3\\\\n---    ---    ---\\\\n  2      0      6'\"\n\n\nFunction: arithmetic_arranger\n", "id": "f1ac5722d887cb1136e3569ba6fb35ca3887afe7_0"}
{"example_str": "examples = [\n    dict(lineList=[\"   line1   \", \"   line2   \"]),\n    dict(lineList=[\"\\tline1\\t\", \"\\tline2\\t\"]),\n    dict(lineList=[\"\\nline1\\n\", \"\\nline2\\n\"]),\n    dict(lineList=[\"line1\", \"line2\"]),\n    dict(lineList=[\"   \"]),\n    dict(lineList=[\"\"]),\n    dict(lineList=[]),\n    dict(lineList=[\"   line1   \", \"   line2   \", \"   line3   \"]),\n    dict(lineList=[\"line1\\n\", \"line2\\n\", \"line3\\n\"]),\n    dict(lineList=[\"\\tline1\\t\", \"\\tline2\\t\", \"\\tline3\\t\"]),\n    dict(lineList=[\"   line1   \", \"\", \"   line3   \"]),\n]\nexamples += [\n    dict(lineList=[\"  hello\", \"world  \", \"  test  \"]),\n    dict(lineList=[\"\\nnewline\", \"\\t tabbed\", \" normal\"]),\n    dict(lineList=[\"singleword\"]),\n    dict(lineList=[\"\", \"  \", \"\\t\", \"\\n\"]),\n    dict(lineList=[\"  mixed spaces \", \"tabs\\t\\t\", \"\\nnewlines\\n\"]),\n    dict(lineList=[\"123\", \"456\", \"789\"]),\n    dict(lineList=[\"Leading space\", \"Trailing space \"]),\n    dict(lineList=[\"NoSpaces\"]),\n    dict(lineList=[\"Multiple words in one line\", \"Another line with words\"]),\n    dict(lineList=[\"Line with special characters !@#$\", \"%^&*()_+\"])\n]\nexamples += [\n    dict(lineList=[\"  hello\", \"world  \", \" test \"]),\n    dict(lineList=[\"\\nnewline\", \"tab\\t\", \" space \"]),\n    dict(lineList=[\" no space\"]),\n    dict(lineList=[\"multiple\", \"lines\", \"in\", \"list\"]),\n    dict(lineList=[\"\", \"  \", \"\\t\\t\", \"\\n\"]),\n    dict(lineList=[\"singleline\"]),\n    dict(lineList=[\" leading space\", \"trailing space \"]),\n    dict(lineList=[\"line1\\n\", \"\\tline2\", \" line3 \"]),\n    dict(lineList=[\"mixed spaces \", \" and tabs\\t\"]),\n    dict(lineList=[\"all\", \"trimmed\", \"already\"])\n]", "code": "def stripLineList(lineList):\n    resultList = []\n    for line in lineList:\n        resultList.append(line.strip())\n    return resultList\n", "func_name": "stripLineList", "exec_status": true, "example_inputs": ["\"{'lineList': ['   line1   ', '   line2   ']}\"", "\"{'lineList': ['\\\\tline1\\\\t', '\\\\tline2\\\\t']}\"", "\"{'lineList': ['\\\\nline1\\\\n', '\\\\nline2\\\\n']}\"", "\"{'lineList': ['line1', 'line2']}\"", "\"{'lineList': ['   ']}\"", "\"{'lineList': ['']}\"", "\"{'lineList': []}\"", "\"{'lineList': ['   line1   ', '   line2   ', '   line3   ']}\"", "\"{'lineList': ['line1\\\\n', 'line2\\\\n', 'line3\\\\n']}\"", "\"{'lineList': ['\\\\tline1\\\\t', '\\\\tline2\\\\t', '\\\\tline3\\\\t']}\"", "\"{'lineList': ['   line1   ', '', '   line3   ']}\""], "example_outputs": [{"return": "\"['line1', 'line2']\""}, {"return": "\"['line1', 'line2']\""}, {"return": "\"['line1', 'line2']\""}, {"return": "\"['line1', 'line2']\""}, {"return": "\"['']\""}, {"return": "\"['']\""}, {"return": "\"[]\""}, {"return": "\"['line1', 'line2', 'line3']\""}, {"return": "\"['line1', 'line2', 'line3']\""}, {"return": "\"['line1', 'line2', 'line3']\""}, {"return": "\"['line1', '', 'line3']\""}, {"return": "\"['hello', 'world', 'test']\""}, {"return": "\"['newline', 'tabbed', 'normal']\""}, {"return": "\"['singleword']\""}, {"return": "\"['', '', '', '']\""}, {"return": "\"['mixed spaces', 'tabs', 'newlines']\""}, {"return": "\"['123', '456', '789']\""}, {"return": "\"['Leading space', 'Trailing space']\""}, {"return": "\"['NoSpaces']\""}, {"return": "\"['Multiple words in one line', 'Another line with words']\""}, {"return": "\"['Line with special characters !@#$', '%^&*()_+']\""}, {"return": "\"['hello', 'world', 'test']\""}, {"return": "\"['newline', 'tab', 'space']\""}, {"return": "\"['no space']\""}, {"return": "\"['multiple', 'lines', 'in', 'list']\""}, {"return": "\"['', '', '', '']\""}, {"return": "\"['singleline']\""}, {"return": "\"['leading space', 'trailing space']\""}, {"return": "\"['line1', 'line2', 'line3']\""}, {"return": "\"['mixed spaces', 'and tabs']\""}, {"return": "\"['all', 'trimmed', 'already']\""}], "parsed_inputs": [[["lineList", "['   line1   ', '   line2   ']"]], [["lineList", "['\\tline1\\t', '\\tline2\\t']"]], [["lineList", "['\\nline1\\n', '\\nline2\\n']"]], [["lineList", "['line1', 'line2']"]], [["lineList", "['   ']"]], [["lineList", "['']"]], [["lineList", "[]"]], [["lineList", "['   line1   ', '   line2   ', '   line3   ']"]], [["lineList", "['line1\\n', 'line2\\n', 'line3\\n']"]], [["lineList", "['\\tline1\\t', '\\tline2\\t', '\\tline3\\t']"]], [["lineList", "['   line1   ', '', '   line3   ']"]]], "exec_code": "def stripLineList(lineList):\n    resultList = []\n    for line in lineList:\n        resultList.append(line.strip())\n    return resultList\n", "output": "The function is:\n\n```python\ndef stripLineList(lineList):\n    resultList = []\n    for line in lineList:\n        resultList.append(line.strip())\n    return resultList\n\n```", "choosed_example_idx": [1, 5, 10, 4, 2], "prompt": "Function: stripLineList\nInput: dict(lineList=['\\tline1\\t', '\\tline2\\t']), Output: \"['line1', 'line2']\"\nInput: dict(lineList=['']), Output: \"['']\"\nInput: dict(lineList=['   line1   ', '', '   line3   ']), Output: \"['line1', '', 'line3']\"\nInput: dict(lineList=['   ']), Output: \"['']\"\nInput: dict(lineList=['\\nline1\\n', '\\nline2\\n']), Output: \"['line1', 'line2']\"\n\n\n\nWrite a function that generates the output from the input.\n\n", "id": "ea7b3666fb4ad41ededfab717ec12a97097bf7fe_0"}
{"example_str": "examples = [\n    dict(y_true=[1, 2, 3], loss=0.5),\n    dict(y_true=[4, 5, 6], loss=0.8),\n    dict(y_true=[7, 8, 9], loss=0.2),\n    dict(y_true=[10, 11, 12], loss=0.1),\n    dict(y_true=[13, 14, 15], loss=0.9),\n    dict(y_true=[16, 17, 18], loss=0.7),\n    dict(y_true=[19, 20, 21], loss=0.6),\n    dict(y_true=[22, 23, 24], loss=0.4),\n    dict(y_true=[25, 26, 27], loss=0.3),\n    dict(y_true=[28, 29, 30], loss=1.0),\n]\nexamples += [\n    dict(y_true=5, loss=10),\n    dict(y_true=[1, 2, 3], loss=[4, 5, 6]),\n    dict(y_true=\"input\", loss=\"output\"),\n    dict(y_true=None, loss=None),\n    dict(y_true=True, loss=False),\n    dict(y_true={\"key\": \"value\"}, loss={\"number\": 123}),\n    dict(y_true=(1, 2), loss=(3, 4)),\n    dict(y_true=0.5, loss=1.5),\n    dict(y_true=set([1, 2]), loss=set([3, 4])),\n    dict(y_true=complex(1, 2), loss=complex(3, 4))\n]\nexamples += [\n    dict(y_true=[1, 2, 3], loss=0.5),\n    dict(y_true=[0, 1, 0], loss=1.0),\n    dict(y_true=[10, 20, 30], loss=2.5),\n    dict(y_true=[-1, -2, -3], loss=0.1),\n    dict(y_true=[100, 200, 300], loss=3.0),\n    dict(y_true=[1, 1, 1], loss=0.0),\n    dict(y_true=[2, 4, 6], loss=1.5),\n    dict(y_true=[3, 6, 9], loss=2.0),\n    dict(y_true=[0, 0, 0], loss=0.3),\n    dict(y_true=[5, 10, 15], loss=2.2),\n]", "code": "def identity_loss(y_true, loss):\n    return loss\n", "func_name": "identity_loss", "exec_status": true, "example_inputs": ["\"{'y_true': [1, 2, 3], 'loss': 0.5}\"", "\"{'y_true': [4, 5, 6], 'loss': 0.8}\"", "\"{'y_true': [7, 8, 9], 'loss': 0.2}\"", "\"{'y_true': [10, 11, 12], 'loss': 0.1}\"", "\"{'y_true': [13, 14, 15], 'loss': 0.9}\"", "\"{'y_true': [16, 17, 18], 'loss': 0.7}\"", "\"{'y_true': [19, 20, 21], 'loss': 0.6}\"", "\"{'y_true': [22, 23, 24], 'loss': 0.4}\"", "\"{'y_true': [25, 26, 27], 'loss': 0.3}\"", "\"{'y_true': [28, 29, 30], 'loss': 1.0}\""], "example_outputs": [{"return": "\"0.5\""}, {"return": "\"0.8\""}, {"return": "\"0.2\""}, {"return": "\"0.1\""}, {"return": "\"0.9\""}, {"return": "\"0.7\""}, {"return": "\"0.6\""}, {"return": "\"0.4\""}, {"return": "\"0.3\""}, {"return": "\"1.0\""}, {"return": "\"10\""}, {"return": "\"[4, 5, 6]\""}, {"return": "\"'output'\""}, {"return": "\"None\""}, {"return": "\"False\""}, {"return": "\"{'number': 123}\""}, {"return": "\"(3, 4)\""}, {"return": "\"1.5\""}, {"return": "\"{3, 4}\""}, {"return": "\"(3+4j)\""}, {"return": "\"0.5\""}, {"return": "\"1.0\""}, {"return": "\"2.5\""}, {"return": "\"0.1\""}, {"return": "\"3.0\""}, {"return": "\"0.0\""}, {"return": "\"1.5\""}, {"return": "\"2.0\""}, {"return": "\"0.3\""}, {"return": "\"2.2\""}], "parsed_inputs": [[["y_true", "[1, 2, 3]"], ["loss", "0.5"]], [["y_true", "[4, 5, 6]"], ["loss", "0.8"]], [["y_true", "[7, 8, 9]"], ["loss", "0.2"]], [["y_true", "[10, 11, 12]"], ["loss", "0.1"]], [["y_true", "[13, 14, 15]"], ["loss", "0.9"]], [["y_true", "[16, 17, 18]"], ["loss", "0.7"]], [["y_true", "[19, 20, 21]"], ["loss", "0.6"]], [["y_true", "[22, 23, 24]"], ["loss", "0.4"]], [["y_true", "[25, 26, 27]"], ["loss", "0.3"]], [["y_true", "[28, 29, 30]"], ["loss", "1.0"]]], "exec_code": "def identity_loss(y_true, loss):\n    return loss\n", "output": "The function is:\n\n```python\ndef identity_loss(y_true, loss):\n    return loss\n\n```", "choosed_example_idx": [9, 2, 3, 6, 1], "prompt": "Write a function that generates the output from the input.\n\nFunction: identity_loss\n\n\nInput: dict(y_true=[28, 29, 30], loss=1.0), Output: \"1.0\"\nInput: dict(y_true=[7, 8, 9], loss=0.2), Output: \"0.2\"\nInput: dict(y_true=[10, 11, 12], loss=0.1), Output: \"0.1\"\nInput: dict(y_true=[19, 20, 21], loss=0.6), Output: \"0.6\"\nInput: dict(y_true=[4, 5, 6], loss=0.8), Output: \"0.8\"\n\n\n", "id": "2dac5d38e94106fcd9d9fb0f537f198e119d5ef3_0"}
{"example_str": "from xml.etree import ElementTree\n\nexamples = [\n    dict(p=ElementTree.fromstring('<project><state state=\"open\"/></project>')),\n    dict(p=ElementTree.fromstring('<project><state state=\"closed\"/></project>')),\n    dict(p=ElementTree.fromstring('<project><state state=\"in_progress\"/></project>')),\n    dict(p=ElementTree.fromstring('<project><state state=\"open\"><other>other element</other></state></project>')),\n    dict(p=ElementTree.fromstring('<project><state state=\"open\" other=\"other attribute\"/></project>')),\n    dict(p=ElementTree.fromstring('<project><other><state state=\"open\"/></other></project>')),\n    dict(p=ElementTree.fromstring('<project><state state=\"open\"/><other>other element</other></project>')),\n    dict(p=ElementTree.fromstring('<project><state state=\"open\"><other>other element</other><another>another element</another></state></project>')),\n    dict(p=ElementTree.fromstring('<project><state state=\"open\" other=\"other attribute\"/><other>other element</other></project>')),\n    dict(p=ElementTree.fromstring('<project><other><state state=\"open\"/><another>another element</another></other></project>')),\n]\nimport xml.etree.ElementTree as ET\n\nexamples += [\n    # Example 1: Simple open state\n    dict(p=ET.fromstring('<root><state state=\"open\"/></root>')),\n    \n    # Example 2: Simple closed state\n    dict(p=ET.fromstring('<root><state state=\"closed\"/></root>')),\n    \n    # Example 3: State open with additional attributes\n    dict(p=ET.fromstring('<root><state state=\"open\" time=\"12:00\"/></root>')),\n    \n    # Example 4: State closed with additional elements\n    dict(p=ET.fromstring('<root><state state=\"closed\"><time>12:00</time></state></root>')),\n    \n    # Example 5: Nested state open\n    dict(p=ET.fromstring('<root><container><state state=\"open\"/></container></root>')),\n    \n    # Example 6: Multiple states, first one open\n    dict(p=ET.fromstring('<root><state state=\"open\"/><state state=\"closed\"/></root>')),\n    \n    # Example 7: Multiple states, none open\n    dict(p=ET.fromstring('<root><state state=\"closed\"/><state state=\"closed\"/></root>')),\n    \n    # Example 8: No state element\n    dict(p=ET.fromstring('<root><status state=\"open\"/></root>')),\n    \n    # Example 9: State with no state attribute\n    dict(p=ET.fromstring('<root><state/></root>')),\n    \n    # Example 10: Deeply nested open state\n    dict(p=ET.fromstring('<root><level1><level2><state state=\"open\"/></level2></level1></root>'))\n]", "code": "def is_open(p):\n    state = p.find('state')\n    return state.attrib['state'] == 'open'\n", "func_name": "is_open", "exec_status": true, "example_inputs": ["\"{'p': <Element 'project' at 0x7f3cd62edc70>}\"", "\"{'p': <Element 'project' at 0x7f3cd6254cc0>}\"", "\"{'p': <Element 'project' at 0x7f3cd6262770>}\"", "\"{'p': <Element 'project' at 0x7f3cd6262810>}\"", "\"{'p': <Element 'project' at 0x7f3cd6262900>}\"", "\"{'p': <Element 'project' at 0x7f3cd62629a0>}\"", "\"{'p': <Element 'project' at 0x7f3cd6262a90>}\"", "\"{'p': <Element 'project' at 0x7f3cd6262b80>}\"", "\"{'p': <Element 'project' at 0x7f3cd6262cc0>}\"", "\"{'p': <Element 'project' at 0x7f3cd6262db0>}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'NoneType' object has no attribute 'attrib'\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'NoneType' object has no attribute 'attrib'\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'NoneType' object has no attribute 'attrib'\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'NoneType' object has no attribute 'attrib'\""}, {"error": "<|EXCEPTION|> \"<class 'KeyError'>: 'state'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'NoneType' object has no attribute 'attrib'\""}], "parsed_inputs": [[["p", "ElementTree.fromstring('<project><state state=\"open\"/></project>')"]], [["p", "ElementTree.fromstring('<project><state state=\"closed\"/></project>')"]], [["p", "ElementTree.fromstring('<project><state state=\"in_progress\"/></project>')"]], [["p", "ElementTree.fromstring(\n    '<project><state state=\"open\"><other>other element</other></state></project>'\n    )"]], [["p", "ElementTree.fromstring(\n    '<project><state state=\"open\" other=\"other attribute\"/></project>')"]], [["p", "ElementTree.fromstring(\n    '<project><other><state state=\"open\"/></other></project>')"]], [["p", "ElementTree.fromstring(\n    '<project><state state=\"open\"/><other>other element</other></project>')"]], [["p", "ElementTree.fromstring(\n    '<project><state state=\"open\"><other>other element</other><another>another element</another></state></project>'\n    )"]], [["p", "ElementTree.fromstring(\n    '<project><state state=\"open\" other=\"other attribute\"/><other>other element</other></project>'\n    )"]], [["p", "ElementTree.fromstring(\n    '<project><other><state state=\"open\"/><another>another element</another></other></project>'\n    )"]]], "exec_code": "def is_open(p):\n    state = p.find('state')\n    return state.attrib['state'] == 'open'\n", "output": "The function is:\n\n```python\ndef is_open(p):\n    state = p.find('state')\n    return state.attrib['state'] == 'open'\n\n```", "choosed_example_idx": [9, 3, 5, 4, 2, 1, 0], "prompt": "Write a function that generates the output from the input.\n\nFunction: is_open\nInput: dict(p=ElementTree.fromstring(\n    '<project><other><state state=\"open\"/><another>another element</another></other></project>'\n    )), Output: \"<class 'AttributeError'>: 'NoneType' object has no attribute 'attrib'\"\nInput: dict(p=ElementTree.fromstring(\n    '<project><state state=\"open\"><other>other element</other></state></project>'\n    )), Output: \"True\"\nInput: dict(p=ElementTree.fromstring(\n    '<project><other><state state=\"open\"/></other></project>')), Output: \"<class 'AttributeError'>: 'NoneType' object has no attribute 'attrib'\"\nInput: dict(p=ElementTree.fromstring(\n    '<project><state state=\"open\" other=\"other attribute\"/></project>')), Output: \"True\"\nInput: dict(p=ElementTree.fromstring('<project><state state=\"in_progress\"/></project>')), Output: \"False\"\nInput: dict(p=ElementTree.fromstring('<project><state state=\"closed\"/></project>')), Output: \"False\"\nInput: dict(p=ElementTree.fromstring('<project><state state=\"open\"/></project>')), Output: \"True\"\n\n\n\n", "id": "82c833e966eacae851579225e00a56b9c042974f_0"}
{"example_str": "examples = [\n    dict(num_list=[1, 2, 3, 4, 5]),\n    dict(num_list=[10, 20, 30]),\n    dict(num_list=[-1, -2, -3, -4, -5]),\n    dict(num_list=[0, 0, 0, 0, 0]),\n    dict(num_list=[1.1, 2.2, 3.3, 4.4, 5.5]),\n    dict(num_list=[100, 200, 300, 400, 500]),\n    dict(num_list=[5, 4, 3, 2, 1]),\n    dict(num_list=[1, 1, 1, 1, 1]),\n    dict(num_list=[-10, -20, -30, -40, -50]),\n    dict(num_list=[]),\n]\nexamples += [\n    dict(num_list=[1, 2, 3, 4, 5]),  # Sum of first 5 natural numbers\n    dict(num_list=[-1, -2, -3, -4, -5]),  # Sum of negative numbers\n    dict(num_list=[100, 200, 300]),  # Sum of larger numbers\n    dict(num_list=[0, 0, 0, 0]),  # Sum of zeros\n    dict(num_list=[-10, 10, -20, 20]),  # Sum of positive and negative numbers\n    dict(num_list=[1]),  # Single element list\n    dict(num_list=[]),  # Empty list\n    dict(num_list=[2, 4, 6, 8, 10]),  # Sum of even numbers\n    dict(num_list=[1, 3, 5, 7, 9]),  # Sum of odd numbers\n    dict(num_list=[-100, 0, 100, 200])  # Mixed numbers with zero\n]\nexamples += [\n    dict(num_list=[1, 2, 3]),\n    dict(num_list=[10, 20, 30]),\n    dict(num_list=[-1, -2, -3]),\n    dict(num_list=[100, 200, 300]),\n    dict(num_list=[0, 0, 0]),\n    dict(num_list=[-10, 10, -10, 10]),\n    dict(num_list=[5]),\n    dict(num_list=[1, 1, 1, 1, 1]),\n    dict(num_list=[-100, 100]),\n    dict(num_list=[25, 75, -50])\n]", "code": "def solve(num_list):\n    result = 0\n    for i in num_list:\n        result += i\n    return result\n", "func_name": "solve", "exec_status": true, "example_inputs": ["\"{'num_list': [1, 2, 3, 4, 5]}\"", "\"{'num_list': [10, 20, 30]}\"", "\"{'num_list': [-1, -2, -3, -4, -5]}\"", "\"{'num_list': [0, 0, 0, 0, 0]}\"", "\"{'num_list': [1.1, 2.2, 3.3, 4.4, 5.5]}\"", "\"{'num_list': [100, 200, 300, 400, 500]}\"", "\"{'num_list': [5, 4, 3, 2, 1]}\"", "\"{'num_list': [1, 1, 1, 1, 1]}\"", "\"{'num_list': [-10, -20, -30, -40, -50]}\"", "\"{'num_list': []}\""], "example_outputs": [{"return": "\"15\""}, {"return": "\"60\""}, {"return": "\"-15\""}, {"return": "\"0\""}, {"return": "\"16.5\""}, {"return": "\"1500\""}, {"return": "\"15\""}, {"return": "\"5\""}, {"return": "\"-150\""}, {"return": "\"0\""}, {"return": "\"15\""}, {"return": "\"-15\""}, {"return": "\"600\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"30\""}, {"return": "\"25\""}, {"return": "\"200\""}, {"return": "\"6\""}, {"return": "\"60\""}, {"return": "\"-6\""}, {"return": "\"600\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"50\""}], "parsed_inputs": [[["num_list", "[1, 2, 3, 4, 5]"]], [["num_list", "[10, 20, 30]"]], [["num_list", "[-1, -2, -3, -4, -5]"]], [["num_list", "[0, 0, 0, 0, 0]"]], [["num_list", "[1.1, 2.2, 3.3, 4.4, 5.5]"]], [["num_list", "[100, 200, 300, 400, 500]"]], [["num_list", "[5, 4, 3, 2, 1]"]], [["num_list", "[1, 1, 1, 1, 1]"]], [["num_list", "[-10, -20, -30, -40, -50]"]], [["num_list", "[]"]]], "exec_code": "def solve(num_list):\n    result = 0\n    for i in num_list:\n        result += i\n    return result\n", "output": "The function is:\n\n```python\ndef solve(num_list):\n    result = 0\n    for i in num_list:\n        result += i\n    return result\n\n```", "choosed_example_idx": [1, 0, 4, 9, 6, 7, 3, 2, 5], "prompt": "Function: solve\n\nInput: dict(num_list=[10, 20, 30]), Output: \"60\"\nInput: dict(num_list=[1, 2, 3, 4, 5]), Output: \"15\"\nInput: dict(num_list=[1.1, 2.2, 3.3, 4.4, 5.5]), Output: \"16.5\"\nInput: dict(num_list=[]), Output: \"0\"\nInput: dict(num_list=[5, 4, 3, 2, 1]), Output: \"15\"\nInput: dict(num_list=[1, 1, 1, 1, 1]), Output: \"5\"\nInput: dict(num_list=[0, 0, 0, 0, 0]), Output: \"0\"\nInput: dict(num_list=[-1, -2, -3, -4, -5]), Output: \"-15\"\nInput: dict(num_list=[100, 200, 300, 400, 500]), Output: \"1500\"\n\nWrite a function that generates the output from the input.\n", "id": "7160b2ae126f915f715ca667a84c448e9824795c_0"}
{"example_str": "examples = [\n    dict(kwarg_dict={'a': 1, 'b': 2, 'c': 3}),  # all static kwargs\n    dict(kwarg_dict={'a': [1, 2], 'b': 2, 'c': 3}),  # one dynamic kwarg\n    dict(kwarg_dict={'a': 1, 'b': [2, 3], 'c': 3}),  # one dynamic kwarg\n    dict(kwarg_dict={'a': 1, 'b': 2, 'c': [3, 4]}),  # one dynamic kwarg\n    dict(kwarg_dict={'a': [1, 2], 'b': [2, 3], 'c': 3}),  # two dynamic kwargs\n    dict(kwarg_dict={'a': [1, 2], 'b': 2, 'c': [3, 4]}),  # two dynamic kwargs\n    dict(kwarg_dict={'a': 1, 'b': [2, 3], 'c': [3, 4]}),  # two dynamic kwargs\n    dict(kwarg_dict={'a': [1, 2], 'b': [2, 3], 'c': [3, 4]}),  # three dynamic kwargs\n    dict(kwarg_dict={'a': [1, 2, 3], 'b': 2, 'c': 3}),  # one dynamic kwarg with three values\n    dict(kwarg_dict={'a': 1, 'b': [2, 3, 4], 'c': 3}),  # one dynamic kwarg with three values\n]\nexamples += [\n    # Example 1: Simple case with one static and one dynamic argument\n    dict(kwarg_dict={'name': 'Alice', 'ages': [25, 30, 35]}),\n    \n    # Example 2: Multiple dynamic arguments\n    dict(kwarg_dict={'name': 'Bob', 'ages': [20, 25], 'scores': [88, 92]}),\n    \n    # Example 3: All dynamic arguments\n    dict(kwarg_dict={'fruits': ['apple', 'banana'], 'vegetables': ['carrot', 'potato']}),\n    \n    # Example 4: All static arguments\n    dict(kwarg_dict={'city': 'New York', 'country': 'USA'}),\n    \n    # Example 5: No arguments\n    dict(kwarg_dict={}),\n    \n    # Example 6: Mixed types in dynamic arguments\n    dict(kwarg_dict={'name': 'Charlie', 'data': [1, 'two', 3.0]}),\n    \n    # Example 7: Nested lists (not ideal for this function but to see behavior)\n    dict(kwarg_dict={'name': 'Daisy', 'nested': [[1, 2], [3, 4]]}),\n    \n    # Example 8: Lists of different lengths (not ideal, may cause error)\n    dict(kwarg_dict={'name': 'Eve', 'ages': [30, 35, 40], 'scores': [85, 90]}),\n    \n    # Example 9: Static and dynamic with same key names in different cases\n    dict(kwarg_dict={'Name': 'Fred', 'name': ['Fred Jr.', 'Fred Sr.']}),\n    \n    # Example 10: Dynamic arguments with only one element in lists\n    dict(kwarg_dict={'name': 'George', 'ages': [40], 'scores': [95]})\n]\nexamples += [\n    dict(kwarg_dict={'a': 1, 'b': [10, 20, 30]}),\n    dict(kwarg_dict={'x': 'static', 'y': [1, 2, 3], 'z': [4, 5, 6]}),\n    dict(kwarg_dict={'name': 'Alice', 'age': [25, 26, 27]}),\n    dict(kwarg_dict={'country': 'Country', 'cities': ['NY', 'LA', 'SF']}),\n    dict(kwarg_dict={'number': 100, 'values': [0.1, 0.2, 0.3]}),\n    dict(kwarg_dict={'flag': True, 'options': ['opt1', 'opt2', 'opt3']}),\n    dict(kwarg_dict={'header': 'Data', 'data': [10, 20], 'footer': 'End'}),\n    dict(kwarg_dict={'model': 'ModelX', 'parameters': ['param1', 'param2', 'param3']}),\n    dict(kwarg_dict={'id': 12345, 'scores': [88, 92, 95]}),\n    dict(kwarg_dict={'type': 'TypeA', 'items': ['item1', 'item2', 'item3', 'item4']})\n]", "code": "def splitkwargs(kwarg_dict):\n    static_kwargs = {}\n    dynamic_kwargs = {}\n    for key, term in kwarg_dict.items():\n        if isinstance(term, list):\n            dynamic_kwargs[key] = term\n        else:\n            static_kwargs[key] = term\n    split_kwargs = []\n    for i in range(len(list(dynamic_kwargs.items())[0][1])):\n        single_set = static_kwargs.copy()\n        for key, term in dynamic_kwargs.items():\n            single_set[key] = term[i]\n        split_kwargs.append(single_set)\n    return split_kwargs\n", "func_name": "splitkwargs", "exec_status": true, "example_inputs": ["\"{'kwarg_dict': {'a': 1, 'b': 2, 'c': 3}}\"", "\"{'kwarg_dict': {'a': [1, 2], 'b': 2, 'c': 3}}\"", "\"{'kwarg_dict': {'a': 1, 'b': [2, 3], 'c': 3}}\"", "\"{'kwarg_dict': {'a': 1, 'b': 2, 'c': [3, 4]}}\"", "\"{'kwarg_dict': {'a': [1, 2], 'b': [2, 3], 'c': 3}}\"", "\"{'kwarg_dict': {'a': [1, 2], 'b': 2, 'c': [3, 4]}}\"", "\"{'kwarg_dict': {'a': 1, 'b': [2, 3], 'c': [3, 4]}}\"", "\"{'kwarg_dict': {'a': [1, 2], 'b': [2, 3], 'c': [3, 4]}}\"", "\"{'kwarg_dict': {'a': [1, 2, 3], 'b': 2, 'c': 3}}\"", "\"{'kwarg_dict': {'a': 1, 'b': [2, 3, 4], 'c': 3}}\""], "example_outputs": [{"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"return": "\"[{'b': 2, 'c': 3, 'a': 1}, {'b': 2, 'c': 3, 'a': 2}]\""}, {"return": "\"[{'a': 1, 'c': 3, 'b': 2}, {'a': 1, 'c': 3, 'b': 3}]\""}, {"return": "\"[{'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 2, 'c': 4}]\""}, {"return": "\"[{'c': 3, 'a': 1, 'b': 2}, {'c': 3, 'a': 2, 'b': 3}]\""}, {"return": "\"[{'b': 2, 'a': 1, 'c': 3}, {'b': 2, 'a': 2, 'c': 4}]\""}, {"return": "\"[{'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 3, 'c': 4}]\""}, {"return": "\"[{'a': 1, 'b': 2, 'c': 3}, {'a': 2, 'b': 3, 'c': 4}]\""}, {"return": "\"[{'b': 2, 'c': 3, 'a': 1}, {'b': 2, 'c': 3, 'a': 2}, {'b': 2, 'c': 3, 'a': 3}]\""}, {"return": "\"[{'a': 1, 'c': 3, 'b': 2}, {'a': 1, 'c': 3, 'b': 3}, {'a': 1, 'c': 3, 'b': 4}]\""}, {"return": "\"[{'name': 'Alice', 'ages': 25}, {'name': 'Alice', 'ages': 30}, {'name': 'Alice', 'ages': 35}]\""}, {"return": "\"[{'name': 'Bob', 'ages': 20, 'scores': 88}, {'name': 'Bob', 'ages': 25, 'scores': 92}]\""}, {"return": "\"[{'fruits': 'apple', 'vegetables': 'carrot'}, {'fruits': 'banana', 'vegetables': 'potato'}]\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"return": "\"[{'name': 'Charlie', 'data': 1}, {'name': 'Charlie', 'data': 'two'}, {'name': 'Charlie', 'data': 3.0}]\""}, {"return": "\"[{'name': 'Daisy', 'nested': [1, 2]}, {'name': 'Daisy', 'nested': [3, 4]}]\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"return": "\"[{'Name': 'Fred', 'name': 'Fred Jr.'}, {'Name': 'Fred', 'name': 'Fred Sr.'}]\""}, {"return": "\"[{'name': 'George', 'ages': 40, 'scores': 95}]\""}, {"return": "\"[{'a': 1, 'b': 10}, {'a': 1, 'b': 20}, {'a': 1, 'b': 30}]\""}, {"return": "\"[{'x': 'static', 'y': 1, 'z': 4}, {'x': 'static', 'y': 2, 'z': 5}, {'x': 'static', 'y': 3, 'z': 6}]\""}, {"return": "\"[{'name': 'Alice', 'age': 25}, {'name': 'Alice', 'age': 26}, {'name': 'Alice', 'age': 27}]\""}, {"return": "\"[{'country': 'Country', 'cities': 'NY'}, {'country': 'Country', 'cities': 'LA'}, {'country': 'Country', 'cities': 'SF'}]\""}, {"return": "\"[{'number': 100, 'values': 0.1}, {'number': 100, 'values': 0.2}, {'number': 100, 'values': 0.3}]\""}, {"return": "\"[{'flag': True, 'options': 'opt1'}, {'flag': True, 'options': 'opt2'}, {'flag': True, 'options': 'opt3'}]\""}, {"return": "\"[{'header': 'Data', 'footer': 'End', 'data': 10}, {'header': 'Data', 'footer': 'End', 'data': 20}]\""}, {"return": "\"[{'model': 'ModelX', 'parameters': 'param1'}, {'model': 'ModelX', 'parameters': 'param2'}, {'model': 'ModelX', 'parameters': 'param3'}]\""}, {"return": "\"[{'id': 12345, 'scores': 88}, {'id': 12345, 'scores': 92}, {'id': 12345, 'scores': 95}]\""}, {"return": "\"[{'type': 'TypeA', 'items': 'item1'}, {'type': 'TypeA', 'items': 'item2'}, {'type': 'TypeA', 'items': 'item3'}, {'type': 'TypeA', 'items': 'item4'}]\""}], "parsed_inputs": [[["kwarg_dict", "{'a': 1, 'b': 2, 'c': 3}"]], [["kwarg_dict", "{'a': [1, 2], 'b': 2, 'c': 3}"]], [["kwarg_dict", "{'a': 1, 'b': [2, 3], 'c': 3}"]], [["kwarg_dict", "{'a': 1, 'b': 2, 'c': [3, 4]}"]], [["kwarg_dict", "{'a': [1, 2], 'b': [2, 3], 'c': 3}"]], [["kwarg_dict", "{'a': [1, 2], 'b': 2, 'c': [3, 4]}"]], [["kwarg_dict", "{'a': 1, 'b': [2, 3], 'c': [3, 4]}"]], [["kwarg_dict", "{'a': [1, 2], 'b': [2, 3], 'c': [3, 4]}"]], [["kwarg_dict", "{'a': [1, 2, 3], 'b': 2, 'c': 3}"]], [["kwarg_dict", "{'a': 1, 'b': [2, 3, 4], 'c': 3}"]]], "exec_code": "def splitkwargs(kwarg_dict):\n    static_kwargs = {}\n    dynamic_kwargs = {}\n    for key, term in kwarg_dict.items():\n        if isinstance(term, list):\n            dynamic_kwargs[key] = term\n        else:\n            static_kwargs[key] = term\n    split_kwargs = []\n    for i in range(len(list(dynamic_kwargs.items())[0][1])):\n        single_set = static_kwargs.copy()\n        for key, term in dynamic_kwargs.items():\n            single_set[key] = term[i]\n        split_kwargs.append(single_set)\n    return split_kwargs\n", "output": "The function is:\n\n```python\ndef splitkwargs(kwarg_dict):\n    static_kwargs = {}\n    dynamic_kwargs = {}\n    for key, term in kwarg_dict.items():\n        if isinstance(term, list):\n            dynamic_kwargs[key] = term\n        else:\n            static_kwargs[key] = term\n    split_kwargs = []\n    for i in range(len(list(dynamic_kwargs.items())[0][1])):\n        single_set = static_kwargs.copy()\n        for key, term in dynamic_kwargs.items():\n            single_set[key] = term[i]\n        split_kwargs.append(single_set)\n    return split_kwargs\n\n```", "choosed_example_idx": [6, 7, 9, 5, 4], "prompt": "Write a function that generates the output from the input.\nInput: dict(kwarg_dict={'a': 1, 'b': [2, 3], 'c': [3, 4]}), Output: \"[{'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 3, 'c': 4}]\"\nInput: dict(kwarg_dict={'a': [1, 2], 'b': [2, 3], 'c': [3, 4]}), Output: \"[{'a': 1, 'b': 2, 'c': 3}, {'a': 2, 'b': 3, 'c': 4}]\"\nInput: dict(kwarg_dict={'a': 1, 'b': [2, 3, 4], 'c': 3}), Output: \"[{'a': 1, 'c': 3, 'b': 2}, {'a': 1, 'c': 3, 'b': 3}, {'a': 1, 'c': 3, 'b': 4}]\"\nInput: dict(kwarg_dict={'a': [1, 2], 'b': 2, 'c': [3, 4]}), Output: \"[{'b': 2, 'a': 1, 'c': 3}, {'b': 2, 'a': 2, 'c': 4}]\"\nInput: dict(kwarg_dict={'a': [1, 2], 'b': [2, 3], 'c': 3}), Output: \"[{'c': 3, 'a': 1, 'b': 2}, {'c': 3, 'a': 2, 'b': 3}]\"\n\nFunction: splitkwargs\n", "id": "aa6c4c0ae1fb76916351d310d41420d418ca29d4_0"}
{"example_str": "examples = [\n    dict(s='Hello World'),\n    dict(s='Python is fun'),\n    dict(s='aeiou'),\n    dict(s='bcdfghjklmnpqrstvwxyz'),\n    dict(s='1234567890'),\n    dict(s='!@#$%^&*()_+-='),\n    dict(s='Happy Anniversary!'),\n    dict(s='xyz'),\n    dict(s='AEIOU'),\n    dict(s='')\n]\nexamples += [\n    dict(s='Happy Anniversary!'),\n    dict(s='xyz'),\n    dict(s='Quick Brown Fox'),\n    dict(s='AEIOU'),\n    dict(s='aeiou'),\n    dict(s='12345'),\n    dict(s='Hello, World!'),\n    dict(s=''),\n    dict(s='Python Programming'),\n    dict(s='Case SENSITIVE')\n]\nexamples += [\n    dict(s='Hello World'),\n    dict(s='AEIOU'),\n    dict(s='abcdefghijklmnopqrstuvwxyz'),\n    dict(s='The quick brown fox jumps over the lazy dog'),\n    dict(s='12345'),\n    dict(s='!@#$%^&*()'),\n    dict(s='Python Programming'),\n    dict(s='Stream of consciousness'),\n    dict(s='No vowels here!'),\n    dict(s='Case SENSITIVITY check')\n]", "code": "def collect_vowels(s):\n    \"\"\" (str) -> str\n\n    Return the vowels (a, e, i, o, and u) from s.\n\n    >>> collect_vowels('Happy Anniversary!')\n    'aAiea'\n    >>> collect_vowels('xyz')\n    '1'\n    \"\"\"\n    vowels = ''\n    for char in s:\n        if char in 'aeiouAEIOU':\n            vowels = vowels + char\n    return vowels\n", "func_name": "collect_vowels", "exec_status": true, "example_inputs": ["\"{'s': 'Hello World'}\"", "\"{'s': 'Python is fun'}\"", "\"{'s': 'aeiou'}\"", "\"{'s': 'bcdfghjklmnpqrstvwxyz'}\"", "\"{'s': '1234567890'}\"", "\"{'s': '!@#$%^&*()_+-='}\"", "\"{'s': 'Happy Anniversary!'}\"", "\"{'s': 'xyz'}\"", "\"{'s': 'AEIOU'}\"", "\"{'s': ''}\""], "example_outputs": [{"return": "\"'eoo'\""}, {"return": "\"'oiu'\""}, {"return": "\"'aeiou'\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"'aAiea'\""}, {"return": "\"''\""}, {"return": "\"'AEIOU'\""}, {"return": "\"''\""}, {"return": "\"'aAiea'\""}, {"return": "\"''\""}, {"return": "\"'uioo'\""}, {"return": "\"'AEIOU'\""}, {"return": "\"'aeiou'\""}, {"return": "\"''\""}, {"return": "\"'eoo'\""}, {"return": "\"''\""}, {"return": "\"'ooai'\""}, {"return": "\"'aeEIIE'\""}, {"return": "\"'eoo'\""}, {"return": "\"'AEIOU'\""}, {"return": "\"'aeiou'\""}, {"return": "\"'euioouoeeao'\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"'ooai'\""}, {"return": "\"'eaooioue'\""}, {"return": "\"'ooeee'\""}, {"return": "\"'aeEIIIe'\""}], "parsed_inputs": [[["s", "\"Hello World\""]], [["s", "\"Python is fun\""]], [["s", "\"aeiou\""]], [["s", "\"bcdfghjklmnpqrstvwxyz\""]], [["s", "\"1234567890\""]], [["s", "\"!@#$%^&*()_+-=\""]], [["s", "\"Happy Anniversary!\""]], [["s", "\"xyz\""]], [["s", "\"AEIOU\""]], [["s", "\"\""]]], "exec_code": "def collect_vowels(s):\n    \"\"\" (str) -> str\n\n    Return the vowels (a, e, i, o, and u) from s.\n\n    >>> collect_vowels('Happy Anniversary!')\n    'aAiea'\n    >>> collect_vowels('xyz')\n    '1'\n    \"\"\"\n    vowels = ''\n    for char in s:\n        if char in 'aeiouAEIOU':\n            vowels = vowels + char\n    return vowels\n", "output": "The function is:\n\n```python\ndef collect_vowels(s):\n    \"\"\" (str) -> str\n\n    Return the vowels (a, e, i, o, and u) from s.\n\n    >>> collect_vowels('Happy Anniversary!')\n    'aAiea'\n    >>> collect_vowels('xyz')\n    '1'\n    \"\"\"\n    vowels = ''\n    for char in s:\n        if char in 'aeiouAEIOU':\n            vowels = vowels + char\n    return vowels\n\n```", "choosed_example_idx": [8, 7, 4, 6, 1, 9, 5, 2], "prompt": "Function: collect_vowels\nWrite a function that generates the output from the input.\nInput: dict(s=\"AEIOU\"), Output: \"'AEIOU'\"\nInput: dict(s=\"xyz\"), Output: \"''\"\nInput: dict(s=\"1234567890\"), Output: \"''\"\nInput: dict(s=\"Happy Anniversary!\"), Output: \"'aAiea'\"\nInput: dict(s=\"Python is fun\"), Output: \"'oiu'\"\nInput: dict(s=\"\"), Output: \"''\"\nInput: dict(s=\"!@#$%^&*()_+-=\"), Output: \"''\"\nInput: dict(s=\"aeiou\"), Output: \"'aeiou'\"\n\n", "id": "cfed2c90763b7f1e75cf676f24625bb77eafe006_0"}
{"example_str": "examples = [\n    dict(root_path='/home/user', filename='example.txt'),\n    dict(root_path='C:\\\\Users\\\\user', filename='document.docx'),\n    dict(root_path='/var/log', filename='syslog'),\n    dict(root_path='D:\\\\Projects', filename='project_plan.xlsx'),\n    dict(root_path='/usr/local/bin', filename='script.sh'),\n    dict(root_path='E:\\\\Videos', filename='movie.mp4'),\n    dict(root_path='/mnt/data', filename='backup.zip'),\n    dict(root_path='F:\\\\Pictures', filename='image.jpg'),\n    dict(root_path='/opt/software', filename='install.sh'),\n    dict(root_path='G:\\\\Music', filename='song.mp3'),\n]\nexamples += [\n    dict(root_path='/home/user', filename='document.txt'),\n    dict(root_path='/var/log', filename='error.log'),\n    dict(root_path='C:/Users/John', filename='image.png'),\n    dict(root_path='/tmp', filename='tempfile.tmp'),\n    dict(root_path='/etc', filename='config.ini'),\n    dict(root_path='/usr/local/bin', filename='script.sh'),\n    dict(root_path='D:/Music', filename='song.mp3'),\n    dict(root_path='/opt/software', filename='setup.exe'),\n    dict(root_path='/home/user/downloads', filename='resume.pdf'),\n    dict(root_path='/mnt/backup', filename='database_backup.sql')\n]\nexamples += [\n    dict(root_path='/home/user', filename='document.txt'),\n    dict(root_path='/var/log', filename='error.log'),\n    dict(root_path='/usr/local/bin', filename='script.sh'),\n    dict(root_path='/tmp', filename='tempfile.tmp'),\n    dict(root_path='/etc', filename='config.ini'),\n    dict(root_path='/opt/software', filename='readme.md'),\n    dict(root_path='/home/user/downloads', filename='movie.mp4'),\n    dict(root_path='/usr/share/pictures', filename='photo.jpg'),\n    dict(root_path='/mnt/backup', filename='backup.zip'),\n    dict(root_path='/home/user/music', filename='song.mp3')\n]", "code": "def output_file(root_path, filename):\n    return '{0}/{1}'.format(root_path, filename)\n", "func_name": "output_file", "exec_status": true, "example_inputs": ["\"{'root_path': '/home/user', 'filename': 'example.txt'}\"", "\"{'root_path': 'C:\\\\\\\\Users\\\\\\\\user', 'filename': 'document.docx'}\"", "\"{'root_path': '/var/log', 'filename': 'syslog'}\"", "\"{'root_path': 'D:\\\\\\\\Projects', 'filename': 'project_plan.xlsx'}\"", "\"{'root_path': '/usr/local/bin', 'filename': 'script.sh'}\"", "\"{'root_path': 'E:\\\\\\\\Videos', 'filename': 'movie.mp4'}\"", "\"{'root_path': '/mnt/data', 'filename': 'backup.zip'}\"", "\"{'root_path': 'F:\\\\\\\\Pictures', 'filename': 'image.jpg'}\"", "\"{'root_path': '/opt/software', 'filename': 'install.sh'}\"", "\"{'root_path': 'G:\\\\\\\\Music', 'filename': 'song.mp3'}\""], "example_outputs": [{"return": "\"'/home/user/example.txt'\""}, {"return": "\"'C:\\\\\\\\Users\\\\\\\\user/document.docx'\""}, {"return": "\"'/var/log/syslog'\""}, {"return": "\"'D:\\\\\\\\Projects/project_plan.xlsx'\""}, {"return": "\"'/usr/local/bin/script.sh'\""}, {"return": "\"'E:\\\\\\\\Videos/movie.mp4'\""}, {"return": "\"'/mnt/data/backup.zip'\""}, {"return": "\"'F:\\\\\\\\Pictures/image.jpg'\""}, {"return": "\"'/opt/software/install.sh'\""}, {"return": "\"'G:\\\\\\\\Music/song.mp3'\""}, {"return": "\"'/home/user/document.txt'\""}, {"return": "\"'/var/log/error.log'\""}, {"return": "\"'C:/Users/John/image.png'\""}, {"return": "\"'/tmp/tempfile.tmp'\""}, {"return": "\"'/etc/config.ini'\""}, {"return": "\"'/usr/local/bin/script.sh'\""}, {"return": "\"'D:/Music/song.mp3'\""}, {"return": "\"'/opt/software/setup.exe'\""}, {"return": "\"'/home/user/downloads/resume.pdf'\""}, {"return": "\"'/mnt/backup/database_backup.sql'\""}, {"return": "\"'/home/user/document.txt'\""}, {"return": "\"'/var/log/error.log'\""}, {"return": "\"'/usr/local/bin/script.sh'\""}, {"return": "\"'/tmp/tempfile.tmp'\""}, {"return": "\"'/etc/config.ini'\""}, {"return": "\"'/opt/software/readme.md'\""}, {"return": "\"'/home/user/downloads/movie.mp4'\""}, {"return": "\"'/usr/share/pictures/photo.jpg'\""}, {"return": "\"'/mnt/backup/backup.zip'\""}, {"return": "\"'/home/user/music/song.mp3'\""}], "parsed_inputs": [[["root_path", "\"/home/user\""], ["filename", "\"example.txt\""]], [["root_path", "\"C:\\\\Users\\\\user\""], ["filename", "\"document.docx\""]], [["root_path", "\"/var/log\""], ["filename", "\"syslog\""]], [["root_path", "\"D:\\\\Projects\""], ["filename", "\"project_plan.xlsx\""]], [["root_path", "\"/usr/local/bin\""], ["filename", "\"script.sh\""]], [["root_path", "\"E:\\\\Videos\""], ["filename", "\"movie.mp4\""]], [["root_path", "\"/mnt/data\""], ["filename", "\"backup.zip\""]], [["root_path", "\"F:\\\\Pictures\""], ["filename", "\"image.jpg\""]], [["root_path", "\"/opt/software\""], ["filename", "\"install.sh\""]], [["root_path", "\"G:\\\\Music\""], ["filename", "\"song.mp3\""]]], "exec_code": "def output_file(root_path, filename):\n    return '{0}/{1}'.format(root_path, filename)\n", "output": "The function is:\n\n```python\ndef output_file(root_path, filename):\n    return '{0}/{1}'.format(root_path, filename)\n\n```", "choosed_example_idx": [8, 7, 3, 2, 1, 9, 0, 5, 4, 6], "prompt": "Input: dict(root_path=\"/opt/software\", filename=\"install.sh\"), Output: \"'/opt/software/install.sh'\"\nInput: dict(root_path=\"F:\\\\Pictures\", filename=\"image.jpg\"), Output: \"'F:\\\\\\\\Pictures/image.jpg'\"\nInput: dict(root_path=\"D:\\\\Projects\", filename=\"project_plan.xlsx\"), Output: \"'D:\\\\\\\\Projects/project_plan.xlsx'\"\nInput: dict(root_path=\"/var/log\", filename=\"syslog\"), Output: \"'/var/log/syslog'\"\nInput: dict(root_path=\"C:\\\\Users\\\\user\", filename=\"document.docx\"), Output: \"'C:\\\\\\\\Users\\\\\\\\user/document.docx'\"\nInput: dict(root_path=\"G:\\\\Music\", filename=\"song.mp3\"), Output: \"'G:\\\\\\\\Music/song.mp3'\"\nInput: dict(root_path=\"/home/user\", filename=\"example.txt\"), Output: \"'/home/user/example.txt'\"\nInput: dict(root_path=\"E:\\\\Videos\", filename=\"movie.mp4\"), Output: \"'E:\\\\\\\\Videos/movie.mp4'\"\nInput: dict(root_path=\"/usr/local/bin\", filename=\"script.sh\"), Output: \"'/usr/local/bin/script.sh'\"\nInput: dict(root_path=\"/mnt/data\", filename=\"backup.zip\"), Output: \"'/mnt/data/backup.zip'\"\n\nWrite a function that generates the output from the input.\n\nFunction: output_file\n", "id": "8eb788357a1f04d7fa45043b4a03e9f1e784fe0f_0"}
{"example_str": "examples = [\n    dict(l=\"mxmxvkd kfkd kfkd (contains dairy)\", toCount=[\"dairy\", \"fish\"]),\n    dict(l=\"trsf kfkd kfkd (contains fish)\", toCount=[\"dairy\", \"fish\"]),\n    dict(l=\"kfkd kfkd mxmxvkd (contains dairy, fish)\", toCount=[\"dairy\", \"fish\"]),\n    dict(l=\"kfkd kfkd kfkd (contains soy)\", toCount=[\"dairy\", \"fish\"]),\n    dict(l=\"mxmxvkd kfkd kfkd (contains dairy, nuts)\", toCount=[\"dairy\", \"fish\", \"nuts\"]),\n    dict(l=\"trsf kfkd kfkd (contains fish, soy)\", toCount=[\"dairy\", \"fish\", \"soy\"]),\n    dict(l=\"kfkd kfkd mxmxvkd (contains dairy, fish, soy)\", toCount=[\"dairy\", \"fish\", \"soy\"]),\n    dict(l=\"kfkd kfkd kfkd (contains dairy, fish, soy, nuts)\", toCount=[\"dairy\", \"fish\", \"soy\", \"nuts\"]),\n    dict(l=\"mxmxvkd kfkd kfkd (contains dairy, fish, soy, nuts, eggs)\", toCount=[\"dairy\", \"fish\", \"soy\", \"nuts\", \"eggs\"]),\n    dict(l=\"trsf kfkd kfkd (contains dairy, fish, soy, nuts, eggs, wheat)\", toCount=[\"dairy\", \"fish\", \"soy\", \"nuts\", \"eggs\", \"wheat\"]),\n]\nexamples += [\n    dict(l=\"milk eggs peanuts (contains dairy nuts)\", toCount={\"milk\", \"eggs\"}),\n    dict(l=\"wheat soy (contains gluten soy)\", toCount={\"soy\"}),\n    dict(l=\"almonds cashews (contains nuts)\", toCount={\"almonds\", \"cashews\", \"peanuts\"}),\n    dict(l=\"chocolate vanilla strawberries (contains flavor)\", toCount={\"vanilla\"}),\n    dict(l=\"beef chicken pork (contains meat)\", toCount={\"tofu\"}),\n    dict(l=\"tofu beans rice (contains soy)\", toCount={\"beans\", \"rice\"}),\n    dict(l=\"apples bananas oranges (contains fruit)\", toCount={\"kiwi\", \"oranges\"}),\n    dict(l=\"carrots peas broccoli (contains vegetables)\", toCount={\"peas\", \"corn\"}),\n    dict(l=\"flour sugar eggs (contains gluten)\", toCount={\"flour\", \"sugar\"}),\n    dict(l=\"oats barley rye (contains gluten)\", toCount={\"barley\", \"wheat\"})\n]\nexamples += [\n    dict(l=\"milk eggs peanuts (contains nuts)\", toCount={\"milk\", \"eggs\"}),\n    dict(l=\"wheat soy (contains gluten)\", toCount={\"soy\"}),\n    dict(l=\"almonds cashews (contains nuts)\", toCount={\"cashews\"}),\n    dict(l=\"chocolate vanilla (contains flavor)\", toCount={\"vanilla\"}),\n    dict(l=\"fish shrimp (contains seafood)\", toCount={\"shrimp\"}),\n    dict(l=\"beef chicken (contains meat)\", toCount={\"beef\"}),\n    dict(l=\"rice beans (contains grains)\", toCount={\"beans\"}),\n    dict(l=\"apple banana (contains fruits)\", toCount={\"banana\"}),\n    dict(l=\"lettuce tomato (contains vegetables)\", toCount={\"lettuce\"}),\n    dict(l=\"pasta sauce (contains gluten)\", toCount={\"pasta\"}),\n]", "code": "def countTimePresentInLineOfInput(l, toCount):\n    totalInLine = 0\n    twoParts = l.strip().split('(contains ', 2)\n    assert len(twoParts) == 2\n    dirtyIngredients = twoParts[0].split(' ')\n    for dirty in dirtyIngredients:\n        ing = dirty.strip()\n        if ing in toCount:\n            totalInLine = totalInLine + 1\n    return totalInLine\n", "func_name": "countTimePresentInLineOfInput", "exec_status": true, "example_inputs": ["\"{'l': 'mxmxvkd kfkd kfkd (contains dairy)', 'toCount': ['dairy', 'fish']}\"", "\"{'l': 'trsf kfkd kfkd (contains fish)', 'toCount': ['dairy', 'fish']}\"", "\"{'l': 'kfkd kfkd mxmxvkd (contains dairy, fish)', 'toCount': ['dairy', 'fish']}\"", "\"{'l': 'kfkd kfkd kfkd (contains soy)', 'toCount': ['dairy', 'fish']}\"", "\"{'l': 'mxmxvkd kfkd kfkd (contains dairy, nuts)', 'toCount': ['dairy', 'fish', 'nuts']}\"", "\"{'l': 'trsf kfkd kfkd (contains fish, soy)', 'toCount': ['dairy', 'fish', 'soy']}\"", "\"{'l': 'kfkd kfkd mxmxvkd (contains dairy, fish, soy)', 'toCount': ['dairy', 'fish', 'soy']}\"", "\"{'l': 'kfkd kfkd kfkd (contains dairy, fish, soy, nuts)', 'toCount': ['dairy', 'fish', 'soy', 'nuts']}\"", "\"{'l': 'mxmxvkd kfkd kfkd (contains dairy, fish, soy, nuts, eggs)', 'toCount': ['dairy', 'fish', 'soy', 'nuts', 'eggs']}\"", "\"{'l': 'trsf kfkd kfkd (contains dairy, fish, soy, nuts, eggs, wheat)', 'toCount': ['dairy', 'fish', 'soy', 'nuts', 'eggs', 'wheat']}\""], "example_outputs": [{"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}], "parsed_inputs": [[["l", "\"mxmxvkd kfkd kfkd (contains dairy)\""], ["toCount", "['dairy', 'fish']"]], [["l", "\"trsf kfkd kfkd (contains fish)\""], ["toCount", "['dairy', 'fish']"]], [["l", "\"kfkd kfkd mxmxvkd (contains dairy, fish)\""], ["toCount", "['dairy', 'fish']"]], [["l", "\"kfkd kfkd kfkd (contains soy)\""], ["toCount", "['dairy', 'fish']"]], [["l", "\"mxmxvkd kfkd kfkd (contains dairy, nuts)\""], ["toCount", "['dairy', 'fish', 'nuts']"]], [["l", "\"trsf kfkd kfkd (contains fish, soy)\""], ["toCount", "['dairy', 'fish', 'soy']"]], [["l", "\"kfkd kfkd mxmxvkd (contains dairy, fish, soy)\""], ["toCount", "['dairy', 'fish', 'soy']"]], [["l", "\"kfkd kfkd kfkd (contains dairy, fish, soy, nuts)\""], ["toCount", "['dairy', 'fish', 'soy', 'nuts']"]], [["l", "\"mxmxvkd kfkd kfkd (contains dairy, fish, soy, nuts, eggs)\""], ["toCount", "['dairy', 'fish', 'soy', 'nuts', 'eggs']"]], [["l", "\"trsf kfkd kfkd (contains dairy, fish, soy, nuts, eggs, wheat)\""], ["toCount", "['dairy', 'fish', 'soy', 'nuts', 'eggs', 'wheat']"]]], "exec_code": "def countTimePresentInLineOfInput(l, toCount):\n    totalInLine = 0\n    twoParts = l.strip().split('(contains ', 2)\n    assert len(twoParts) == 2\n    dirtyIngredients = twoParts[0].split(' ')\n    for dirty in dirtyIngredients:\n        ing = dirty.strip()\n        if ing in toCount:\n            totalInLine = totalInLine + 1\n    return totalInLine\n", "output": "The function is:\n\n```python\ndef countTimePresentInLineOfInput(l, toCount):\n    totalInLine = 0\n    twoParts = l.strip().split('(contains ', 2)\n    assert len(twoParts) == 2\n    dirtyIngredients = twoParts[0].split(' ')\n    for dirty in dirtyIngredients:\n        ing = dirty.strip()\n        if ing in toCount:\n            totalInLine = totalInLine + 1\n    return totalInLine\n\n```", "choosed_example_idx": [5, 1, 3, 0, 7, 8], "prompt": "Input: dict(l=\"trsf kfkd kfkd (contains fish, soy)\", toCount=['dairy', 'fish', 'soy']), Output: \"0\"\nInput: dict(l=\"trsf kfkd kfkd (contains fish)\", toCount=['dairy', 'fish']), Output: \"0\"\nInput: dict(l=\"kfkd kfkd kfkd (contains soy)\", toCount=['dairy', 'fish']), Output: \"0\"\nInput: dict(l=\"mxmxvkd kfkd kfkd (contains dairy)\", toCount=['dairy', 'fish']), Output: \"0\"\nInput: dict(l=\"kfkd kfkd kfkd (contains dairy, fish, soy, nuts)\", toCount=['dairy', 'fish', 'soy', 'nuts']), Output: \"0\"\nInput: dict(l=\"mxmxvkd kfkd kfkd (contains dairy, fish, soy, nuts, eggs)\", toCount=['dairy', 'fish', 'soy', 'nuts', 'eggs']), Output: \"0\"\n\nWrite a function that generates the output from the input.\n\nFunction: countTimePresentInLineOfInput\n", "id": "66c679a09688ef906ff5cdb797ecec949c09f064_0"}
{"example_str": "examples = [\n    dict(y=46, pos=0),\n    dict(y=45, pos=1),\n    dict(y=47, pos=2),\n    dict(y=0, pos=3),\n    dict(y=90, pos=4),\n    dict(y=45.5, pos=5),\n    dict(y=-1, pos=6),\n    dict(y=180, pos=7),\n    dict(y=46.1, pos=8),\n    dict(y=100, pos=9),\n]\nexamples += [\n    dict(y=46, pos=1),\n    dict(y=45.5, pos=2),\n    dict(y=100, pos=3),\n    dict(y=-20, pos=4),\n    dict(y=0, pos=5),\n    dict(y=46.1, pos=6),\n    dict(y=22.7, pos=7),\n    dict(y=89, pos=8),\n    dict(y=45.999, pos=9),\n    dict(y=46.0001, pos=10)\n]\nexamples += [\n    dict(y=46, pos=None),\n    dict(y=45, pos=None),\n    dict(y=100, pos=0),\n    dict(y=0, pos=1),\n    dict(y=-10, pos=2),\n    dict(y=50.5, pos=3),\n    dict(y=22.7, pos=4),\n    dict(y=89, pos=5),\n    dict(y=30, pos=6),\n    dict(y=75, pos=7)\n]", "code": "def N_fmt_y(y, pos):\n    if y == 46:\n        return '%.0f' % 45 + u'°'\n    else:\n        return '%.0f' % y + u'°'\n", "func_name": "N_fmt_y", "exec_status": true, "example_inputs": ["\"{'y': 46, 'pos': 0}\"", "\"{'y': 45, 'pos': 1}\"", "\"{'y': 47, 'pos': 2}\"", "\"{'y': 0, 'pos': 3}\"", "\"{'y': 90, 'pos': 4}\"", "\"{'y': 45.5, 'pos': 5}\"", "\"{'y': -1, 'pos': 6}\"", "\"{'y': 180, 'pos': 7}\"", "\"{'y': 46.1, 'pos': 8}\"", "\"{'y': 100, 'pos': 9}\""], "example_outputs": [{"return": "\"'45\\u00b0'\""}, {"return": "\"'45\\u00b0'\""}, {"return": "\"'47\\u00b0'\""}, {"return": "\"'0\\u00b0'\""}, {"return": "\"'90\\u00b0'\""}, {"return": "\"'46\\u00b0'\""}, {"return": "\"'-1\\u00b0'\""}, {"return": "\"'180\\u00b0'\""}, {"return": "\"'46\\u00b0'\""}, {"return": "\"'100\\u00b0'\""}, {"return": "\"'45\\u00b0'\""}, {"return": "\"'46\\u00b0'\""}, {"return": "\"'100\\u00b0'\""}, {"return": "\"'-20\\u00b0'\""}, {"return": "\"'0\\u00b0'\""}, {"return": "\"'46\\u00b0'\""}, {"return": "\"'23\\u00b0'\""}, {"return": "\"'89\\u00b0'\""}, {"return": "\"'46\\u00b0'\""}, {"return": "\"'46\\u00b0'\""}, {"return": "\"'45\\u00b0'\""}, {"return": "\"'45\\u00b0'\""}, {"return": "\"'100\\u00b0'\""}, {"return": "\"'0\\u00b0'\""}, {"return": "\"'-10\\u00b0'\""}, {"return": "\"'50\\u00b0'\""}, {"return": "\"'23\\u00b0'\""}, {"return": "\"'89\\u00b0'\""}, {"return": "\"'30\\u00b0'\""}, {"return": "\"'75\\u00b0'\""}], "parsed_inputs": [[["y", "46"], ["pos", "0"]], [["y", "45"], ["pos", "1"]], [["y", "47"], ["pos", "2"]], [["y", "0"], ["pos", "3"]], [["y", "90"], ["pos", "4"]], [["y", "45.5"], ["pos", "5"]], [["y", "-1"], ["pos", "6"]], [["y", "180"], ["pos", "7"]], [["y", "46.1"], ["pos", "8"]], [["y", "100"], ["pos", "9"]]], "exec_code": "def N_fmt_y(y, pos):\n    if y == 46:\n        return '%.0f' % 45 + u'°'\n    else:\n        return '%.0f' % y + u'°'\n", "output": "The function is:\n\n```python\ndef N_fmt_y(y, pos):\n    if y == 46:\n        return '%.0f' % 45 + u'°'\n    else:\n        return '%.0f' % y + u'°'\n\n```", "choosed_example_idx": [3, 7, 9, 8, 0, 5, 6, 2, 4, 1], "prompt": "Input: dict(y=0, pos=3), Output: \"'0\\u00b0'\"\nInput: dict(y=180, pos=7), Output: \"'180\\u00b0'\"\nInput: dict(y=100, pos=9), Output: \"'100\\u00b0'\"\nInput: dict(y=46.1, pos=8), Output: \"'46\\u00b0'\"\nInput: dict(y=46, pos=0), Output: \"'45\\u00b0'\"\nInput: dict(y=45.5, pos=5), Output: \"'46\\u00b0'\"\nInput: dict(y=-1, pos=6), Output: \"'-1\\u00b0'\"\nInput: dict(y=47, pos=2), Output: \"'47\\u00b0'\"\nInput: dict(y=90, pos=4), Output: \"'90\\u00b0'\"\nInput: dict(y=45, pos=1), Output: \"'45\\u00b0'\"\n\nFunction: N_fmt_y\n\n\nWrite a function that generates the output from the input.\n", "id": "1b10bcfec5aaae61aa14ec0fd255253c87369261_0"}
{"example_str": "examples = [\n    dict(uname='johnDoe', session={'email': 'johndoe@example.com', 'first': 'John', 'last': 'Doe', 'usernames': []}),\n    dict(uname='user123', session={'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': []}),\n    dict(uname='janeDoe', session={'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': []}),\n    dict(uname='JDoe', session={'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': []}),\n    dict(uname='johndoe@example.com', session={'email': 'johndoe@example.com', 'first': 'John', 'last': 'Doe', 'usernames': []}),\n    dict(uname='username123', session={'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': []}),\n    dict(uname='existingUser', session={'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': ['existingUser']}),\n    dict(uname='janeDoe123', session={'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': []}),\n    dict(uname='jd', session={'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': []}),\n    dict(uname='validUsername', session={'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': []}),\n]\nexamples += [\n    dict(uname=\"johnsmith\", session={\"email\": \"john@example.com\", \"first\": \"John\", \"last\": \"Smith\", \"usernames\": [\"jsmith\", \"johnny\"]}),\n    dict(uname=\"john@example.com\", session={\"email\": \"john@example.com\", \"first\": \"John\", \"last\": \"Smith\", \"usernames\": [\"jsmith\", \"johnny\"]}),\n    dict(uname=\"user123\", session={\"email\": \"alice@example.com\", \"first\": \"Alice\", \"last\": \"Doe\", \"usernames\": [\"aliceD\", \"ADoe\"]}),\n    dict(uname=\"username\", session={\"email\": \"bob@example.com\", \"first\": \"Bob\", \"last\": \"Builder\", \"usernames\": [\"bobbyB\", \"builderBob\"]}),\n    dict(uname=\"AliceDoe\", session={\"email\": \"alice@example.com\", \"first\": \"Alice\", \"last\": \"Doe\", \"usernames\": [\"aliceD\", \"ADoe\"]}),\n    dict(uname=\"BD\", session={\"email\": \"bob@example.com\", \"first\": \"Bob\", \"last\": \"Dylan\", \"usernames\": [\"bobD\", \"dylanB\"]}),\n    dict(uname=\"jsmith\", session={\"email\": \"john@example.com\", \"first\": \"John\", \"last\": \"Smith\", \"usernames\": [\"jsmith\", \"johnny\"]}),\n    dict(uname=\"newuser\", session={\"email\": \"new@example.com\", \"first\": \"New\", \"last\": \"User\", \"usernames\": [\"newU\", \"userNew\"]}),\n    dict(uname=\"uniqueUser123\", session={\"email\": \"unique@example.com\", \"first\": \"Unique\", \"last\": \"User\", \"usernames\": [\"uniqueU\", \"userUnique\"]}),\n    dict(uname=\"safeUsername\", session={\"email\": \"safe@example.com\", \"first\": \"Safe\", \"last\": \"Name\", \"usernames\": [\"safeN\", \"safeUser\"]})\n]\nexamples += [\n    dict(uname='johnsmith', session={'email': 'john@example.com', 'first': 'John', 'last': 'Smith', 'usernames': ['johndoe', 'smithj']}),\n    dict(uname='john@example.com', session={'email': 'john@example.com', 'first': 'John', 'last': 'Smith', 'usernames': ['johndoe', 'smithj']}),\n    dict(uname='userjohn', session={'email': 'john@example.com', 'first': 'John', 'last': 'Smith', 'usernames': ['johndoe', 'smithj']}),\n    dict(uname='jsmith', session={'email': 'john@example.com', 'first': 'John', 'last': 'Smith', 'usernames': ['johndoe', 'smithj']}),\n    dict(uname='johndoe', session={'email': 'john@example.com', 'first': 'John', 'last': 'Smith', 'usernames': ['johndoe', 'smithj']}),\n    dict(uname='johnny', session={'email': 'john@example.com', 'first': 'John', 'last': 'Smith', 'usernames': ['johndoe', 'smithj']}),\n    dict(uname='smithy', session={'email': 'john@example.com', 'first': 'John', 'last': 'Smith', 'usernames': ['johndoe', 'smithj']}),\n    dict(uname='johnsmith2023', session={'email': 'john@example.com', 'first': 'John', 'last': 'Smith', 'usernames': ['johndoe', 'smithj']}),\n    dict(uname='js', session={'email': 'john@example.com', 'first': 'John', 'last': 'Smith', 'usernames': ['johndoe', 'smithj']}),\n    dict(uname='johns', session={'email': 'john@example.com', 'first': 'John', 'last': 'Smith', 'usernames': ['johndoe', 'smithj']})\n]", "code": "def username_validation(uname, session):\n    if uname == session['email'].lower():\n        return {'response': 'fail', 'message':\n            'You cannot use your email address.'}\n    elif 'user' in uname or 'username' in uname:\n        return {'response': 'fail', 'message':\n            'You cannot use the word user or username.'}\n    elif session['first'] in uname or session['last'] in uname:\n        return {'response': 'fail', 'message':\n            'Your username cannot contain your name.'}\n    elif session['first'][0] == uname[0] and (session['last'][0] == uname[1\n        ] or session['last'][0] == uname[2]):\n        return {'response': 'fail', 'message':\n            'Using your initials is not as safe as a more unique username.'}\n    elif uname in session['usernames']:\n        return {'response': 'fail', 'message':\n            'That username is already in use.'}\n    else:\n        return {'response': 'success'}\n", "func_name": "username_validation", "exec_status": true, "example_inputs": ["\"{'uname': 'johnDoe', 'session': {'email': 'johndoe@example.com', 'first': 'John', 'last': 'Doe', 'usernames': []}}\"", "\"{'uname': 'user123', 'session': {'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': []}}\"", "\"{'uname': 'janeDoe', 'session': {'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': []}}\"", "\"{'uname': 'JDoe', 'session': {'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': []}}\"", "\"{'uname': 'johndoe@example.com', 'session': {'email': 'johndoe@example.com', 'first': 'John', 'last': 'Doe', 'usernames': []}}\"", "\"{'uname': 'username123', 'session': {'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': []}}\"", "\"{'uname': 'existingUser', 'session': {'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': ['existingUser']}}\"", "\"{'uname': 'janeDoe123', 'session': {'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': []}}\"", "\"{'uname': 'jd', 'session': {'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': []}}\"", "\"{'uname': 'validUsername', 'session': {'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': []}}\""], "example_outputs": [{"return": "\"{'response': 'fail', 'message': 'Your username cannot contain your name.'}\""}, {"return": "\"{'response': 'fail', 'message': 'You cannot use the word user or username.'}\""}, {"return": "\"{'response': 'fail', 'message': 'Your username cannot contain your name.'}\""}, {"return": "\"{'response': 'fail', 'message': 'Your username cannot contain your name.'}\""}, {"return": "\"{'response': 'fail', 'message': 'You cannot use your email address.'}\""}, {"return": "\"{'response': 'fail', 'message': 'You cannot use the word user or username.'}\""}, {"return": "\"{'response': 'fail', 'message': 'That username is already in use.'}\""}, {"return": "\"{'response': 'fail', 'message': 'Your username cannot contain your name.'}\""}, {"return": "\"{'response': 'success'}\""}, {"return": "\"{'response': 'success'}\""}, {"return": "\"{'response': 'success'}\""}, {"return": "\"{'response': 'fail', 'message': 'You cannot use your email address.'}\""}, {"return": "\"{'response': 'fail', 'message': 'You cannot use the word user or username.'}\""}, {"return": "\"{'response': 'fail', 'message': 'You cannot use the word user or username.'}\""}, {"return": "\"{'response': 'fail', 'message': 'Your username cannot contain your name.'}\""}, {"return": "\"{'response': 'fail', 'message': 'Using your initials is not as safe as a more unique username.'}\""}, {"return": "\"{'response': 'fail', 'message': 'That username is already in use.'}\""}, {"return": "\"{'response': 'fail', 'message': 'You cannot use the word user or username.'}\""}, {"return": "\"{'response': 'fail', 'message': 'Your username cannot contain your name.'}\""}, {"return": "\"{'response': 'success'}\""}, {"return": "\"{'response': 'success'}\""}, {"return": "\"{'response': 'fail', 'message': 'You cannot use your email address.'}\""}, {"return": "\"{'response': 'fail', 'message': 'You cannot use the word user or username.'}\""}, {"return": "\"{'response': 'success'}\""}, {"return": "\"{'response': 'fail', 'message': 'That username is already in use.'}\""}, {"return": "\"{'response': 'success'}\""}, {"return": "\"{'response': 'success'}\""}, {"return": "\"{'response': 'success'}\""}, {"return": "\"{'response': 'success'}\""}, {"return": "\"{'response': 'success'}\""}], "parsed_inputs": [[["uname", "\"johnDoe\""], ["session", "{'email': 'johndoe@example.com', 'first': 'John', 'last': 'Doe', 'usernames': []}"]], [["uname", "\"user123\""], ["session", "{'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': []}"]], [["uname", "\"janeDoe\""], ["session", "{'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': []}"]], [["uname", "\"JDoe\""], ["session", "{'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': []}"]], [["uname", "\"johndoe@example.com\""], ["session", "{'email': 'johndoe@example.com', 'first': 'John', 'last': 'Doe', 'usernames': []}"]], [["uname", "\"username123\""], ["session", "{'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': []}"]], [["uname", "\"existingUser\""], ["session", "{'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': ['existingUser']}"]], [["uname", "\"janeDoe123\""], ["session", "{'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': []}"]], [["uname", "\"jd\""], ["session", "{'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': []}"]], [["uname", "\"validUsername\""], ["session", "{'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': []}"]]], "exec_code": "def username_validation(uname, session):\n    if uname == session['email'].lower():\n        return {'response': 'fail', 'message':\n            'You cannot use your email address.'}\n    elif 'user' in uname or 'username' in uname:\n        return {'response': 'fail', 'message':\n            'You cannot use the word user or username.'}\n    elif session['first'] in uname or session['last'] in uname:\n        return {'response': 'fail', 'message':\n            'Your username cannot contain your name.'}\n    elif session['first'][0] == uname[0] and (session['last'][0] == uname[1\n        ] or session['last'][0] == uname[2]):\n        return {'response': 'fail', 'message':\n            'Using your initials is not as safe as a more unique username.'}\n    elif uname in session['usernames']:\n        return {'response': 'fail', 'message':\n            'That username is already in use.'}\n    else:\n        return {'response': 'success'}\n", "output": "The function is:\n\n```python\ndef username_validation(uname, session):\n    if uname == session['email'].lower():\n        return {'response': 'fail', 'message':\n            'You cannot use your email address.'}\n    elif 'user' in uname or 'username' in uname:\n        return {'response': 'fail', 'message':\n            'You cannot use the word user or username.'}\n    elif session['first'] in uname or session['last'] in uname:\n        return {'response': 'fail', 'message':\n            'Your username cannot contain your name.'}\n    elif session['first'][0] == uname[0] and (session['last'][0] == uname[1\n        ] or session['last'][0] == uname[2]):\n        return {'response': 'fail', 'message':\n            'Using your initials is not as safe as a more unique username.'}\n    elif uname in session['usernames']:\n        return {'response': 'fail', 'message':\n            'That username is already in use.'}\n    else:\n        return {'response': 'success'}\n\n```", "choosed_example_idx": [9, 4, 7], "prompt": "Write a function that generates the output from the input.\nFunction: username_validation\nInput: dict(uname=\"validUsername\", session={'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': []}), Output: \"{'response': 'success'}\"\nInput: dict(uname=\"johndoe@example.com\", session={'email': 'johndoe@example.com', 'first': 'John', 'last': 'Doe', 'usernames': []}), Output: \"{'response': 'fail', 'message': 'You cannot use your email address.'}\"\nInput: dict(uname=\"janeDoe123\", session={'email': 'janeDoe@example.com', 'first': 'Jane', 'last': 'Doe', 'usernames': []}), Output: \"{'response': 'fail', 'message': 'Your username cannot contain your name.'}\"\n\n", "id": "6f3ab60d54e3692e5331b0818625e5eda31e507d_0"}
{"example_str": "examples = [\n    dict(x=123),\n    dict(x=-456),\n    dict(x=0),\n    dict(x=120),\n    dict(x=-100),\n    dict(x=123456789),\n    dict(x=-2147483412),\n    dict(x=150),\n    dict(x=-90),\n    dict(x=789)\n]\nexamples += [\n    dict(x=123),        # Positive number\n    dict(x=-456),       # Negative number\n    dict(x=78910),      # Positive number with more digits\n    dict(x=-1100),      # Negative number with trailing zeros\n    dict(x=0),          # Zero\n    dict(x=1),          # Single digit positive number\n    dict(x=-2),         # Single digit negative number\n    dict(x=120),        # Positive number ending in zero\n    dict(x=-340),       # Negative number ending in zero\n    dict(x=1000000001)  # Large number with zeros in between\n]\nexamples += [\n    dict(x=123),\n    dict(x=-456),\n    dict(x=7890),\n    dict(x=-12345),\n    dict(x=0),\n    dict(x=1111),\n    dict(x=-2222),\n    dict(x=10000),\n    dict(x=-300),\n    dict(x=50505)\n]", "code": "def reverseInteger(x):\n    r = 0\n    f = False if x < 0 else True\n    x = abs(x)\n    while x > 0:\n        r = r * 10 + x % 10\n        x = x // 10\n    return r if f else -r\n", "func_name": "reverseInteger", "exec_status": true, "example_inputs": ["\"{'x': 123}\"", "\"{'x': -456}\"", "\"{'x': 0}\"", "\"{'x': 120}\"", "\"{'x': -100}\"", "\"{'x': 123456789}\"", "\"{'x': -2147483412}\"", "\"{'x': 150}\"", "\"{'x': -90}\"", "\"{'x': 789}\""], "example_outputs": [{"return": "\"321\""}, {"return": "\"-654\""}, {"return": "\"0\""}, {"return": "\"21\""}, {"return": "\"-1\""}, {"return": "\"987654321\""}, {"return": "\"-2143847412\""}, {"return": "\"51\""}, {"return": "\"-9\""}, {"return": "\"987\""}, {"return": "\"321\""}, {"return": "\"-654\""}, {"return": "\"1987\""}, {"return": "\"-11\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"-2\""}, {"return": "\"21\""}, {"return": "\"-43\""}, {"return": "\"1000000001\""}, {"return": "\"321\""}, {"return": "\"-654\""}, {"return": "\"987\""}, {"return": "\"-54321\""}, {"return": "\"0\""}, {"return": "\"1111\""}, {"return": "\"-2222\""}, {"return": "\"1\""}, {"return": "\"-3\""}, {"return": "\"50505\""}], "parsed_inputs": [[["x", "123"]], [["x", "-456"]], [["x", "0"]], [["x", "120"]], [["x", "-100"]], [["x", "123456789"]], [["x", "-2147483412"]], [["x", "150"]], [["x", "-90"]], [["x", "789"]]], "exec_code": "def reverseInteger(x):\n    r = 0\n    f = False if x < 0 else True\n    x = abs(x)\n    while x > 0:\n        r = r * 10 + x % 10\n        x = x // 10\n    return r if f else -r\n", "output": "The function is:\n\n```python\ndef reverseInteger(x):\n    r = 0\n    f = False if x < 0 else True\n    x = abs(x)\n    while x > 0:\n        r = r * 10 + x % 10\n        x = x // 10\n    return r if f else -r\n\n```", "choosed_example_idx": [2, 7, 5, 1, 9, 4, 8, 6, 0], "prompt": "Write a function that generates the output from the input.\n\nFunction: reverseInteger\n\nInput: dict(x=0), Output: \"0\"\nInput: dict(x=150), Output: \"51\"\nInput: dict(x=123456789), Output: \"987654321\"\nInput: dict(x=-456), Output: \"-654\"\nInput: dict(x=789), Output: \"987\"\nInput: dict(x=-100), Output: \"-1\"\nInput: dict(x=-90), Output: \"-9\"\nInput: dict(x=-2147483412), Output: \"-2143847412\"\nInput: dict(x=123), Output: \"321\"\n\n\n\n", "id": "eef51c3dd69ec66a376381c45f28fc10a87c4735_0"}
{"example_str": "examples = [\n    dict(number=25),\n    dict(number=23),\n    dict(number=37),\n    dict(number=48),\n    dict(number=1),\n    dict(number=0),\n    dict(number=-5),\n    dict(number=2.5),  # should raise a TypeError\n    dict(number='hello'),  # should raise a TypeError\n    dict(number=None),  # should raise a TypeError\n]\nexamples += [\n    dict(number=2),\n    dict(number=3),\n    dict(number=4),\n    dict(number=5),\n    dict(number=10),\n    dict(number=13),\n    dict(number=17),\n    dict(number=20),\n    dict(number=23),\n    dict(number=29)\n]\nexamples += [\n    dict(number=2),\n    dict(number=3),\n    dict(number=4),\n    dict(number=5),\n    dict(number=6),\n    dict(number=7),\n    dict(number=8),\n    dict(number=9),\n    dict(number=10),\n    dict(number=11)\n]", "code": "def isprime(number):\n    if type(number) is not int:\n        raise TypeError('function isprime accepts an int as parameter')\n    if number < 1 or number == 1:\n        return print('{} is not prime'.format(number))\n    for i in range(2, number):\n        if number % i == 0:\n            return print('{} is not prime'.format(number))\n    print('{} is prime'.format(number))\n", "func_name": "isprime", "exec_status": true, "example_inputs": ["\"{'number': 25}\"", "\"{'number': 23}\"", "\"{'number': 37}\"", "\"{'number': 48}\"", "\"{'number': 1}\"", "\"{'number': 0}\"", "\"{'number': -5}\"", "\"{'number': 2.5}\"", "\"{'number': 'hello'}\"", "\"{'number': None}\""], "example_outputs": [{"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: function isprime accepts an int as parameter\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: function isprime accepts an int as parameter\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: function isprime accepts an int as parameter\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}], "parsed_inputs": [[["number", "25"]], [["number", "23"]], [["number", "37"]], [["number", "48"]], [["number", "1"]], [["number", "0"]], [["number", "-5"]], [["number", "2.5"]], [["number", "\"hello\""]], [["number", "None"]]], "exec_code": "def isprime(number):\n    if type(number) is not int:\n        raise TypeError('function isprime accepts an int as parameter')\n    if number < 1 or number == 1:\n        return print('{} is not prime'.format(number))\n    for i in range(2, number):\n        if number % i == 0:\n            return print('{} is not prime'.format(number))\n    print('{} is prime'.format(number))\n", "output": "The function is:\n\n```python\ndef isprime(number):\n    if type(number) is not int:\n        raise TypeError('function isprime accepts an int as parameter')\n    if number < 1 or number == 1:\n        return print('{} is not prime'.format(number))\n    for i in range(2, number):\n        if number % i == 0:\n            return print('{} is not prime'.format(number))\n    print('{} is prime'.format(number))\n\n```", "choosed_example_idx": [1, 4, 8, 7, 3, 2], "prompt": "Function: isprime\n\nWrite a function that generates the output from the input.\n\n\nInput: dict(number=23), Output: \"None\"\nInput: dict(number=1), Output: \"None\"\nInput: dict(number=\"hello\"), Output: \"<class 'TypeError'>: function isprime accepts an int as parameter\"\nInput: dict(number=2.5), Output: \"<class 'TypeError'>: function isprime accepts an int as parameter\"\nInput: dict(number=48), Output: \"None\"\nInput: dict(number=37), Output: \"None\"\n\n\n\n", "id": "3107e6794404da1e6bfc4a5cc3bac92a5601da1f_0"}
{"example_str": "examples = [\n    dict(sheet=\"C# minor\"),\n    dict(sheet=\"Hello, D# world!\"),\n    dict(sheet=\"F#unction\"),\n    dict(sheet=\"G#ood morning\"),\n    dict(sheet=\"A#lways\"),\n    dict(sheet=\"C major\"),\n    dict(sheet=\"No sharps here\"),\n    dict(sheet=\"D#ream big\"),\n    dict(sheet=\"F#antasy\"),\n    dict(sheet=\"G#ame over\"),\n]\nexamples += [\n    dict(sheet=\"C# D# F# G# A#\"),\n    dict(sheet=\"The notes are C#, D#, and F#.\"),\n    dict(sheet=\"No sharps here.\"),\n    dict(sheet=\"G# minor key includes G#, B, and D#.\"),\n    dict(sheet=\"A#C#D#F#G#\"),\n    dict(sheet=\"\"),\n    dict(sheet=\"C# major scale: C#, D#, E, F#, G#, A#, B.\"),\n    dict(sheet=\"Lowercase c# should not change: c#\"),\n    dict(sheet=\"Multiple C# D# C# G# A# F#\"),\n    dict(sheet=\"Ends with sharp: A#\")\n]\nexamples += [\n    dict(sheet=\"C# D# F# G# A#\"),\n    dict(sheet=\"C# major scale includes C# D# F# G# A#\"),\n    dict(sheet=\"No sharps here\"),\n    dict(sheet=\"G#m7 chord includes G# B D# F#\"),\n    dict(sheet=\"A# C# F# A# C# F#\"),\n    dict(sheet=\"Classical piece in D# minor\"),\n    dict(sheet=\"F# major has a lot of F# notes\"),\n    dict(sheet=\"E major scale without any sharps\"),\n    dict(sheet=\"Chord progression: C# F# G# A#\"),\n    dict(sheet=\"Melody line: A# G# F# E D# C#\")\n]", "code": "def change_sharp(sheet):\n    sheet = sheet.replace('C#', 'c')\n    sheet = sheet.replace('D#', 'd')\n    sheet = sheet.replace('F#', 'f')\n    sheet = sheet.replace('G#', 'g')\n    sheet = sheet.replace('A#', 'a')\n    return sheet\n", "func_name": "change_sharp", "exec_status": true, "example_inputs": ["\"{'sheet': 'C# minor'}\"", "\"{'sheet': 'Hello, D# world!'}\"", "\"{'sheet': 'F#unction'}\"", "\"{'sheet': 'G#ood morning'}\"", "\"{'sheet': 'A#lways'}\"", "\"{'sheet': 'C major'}\"", "\"{'sheet': 'No sharps here'}\"", "\"{'sheet': 'D#ream big'}\"", "\"{'sheet': 'F#antasy'}\"", "\"{'sheet': 'G#ame over'}\""], "example_outputs": [{"return": "\"'c minor'\""}, {"return": "\"'Hello, d world!'\""}, {"return": "\"'function'\""}, {"return": "\"'good morning'\""}, {"return": "\"'always'\""}, {"return": "\"'C major'\""}, {"return": "\"'No sharps here'\""}, {"return": "\"'dream big'\""}, {"return": "\"'fantasy'\""}, {"return": "\"'game over'\""}, {"return": "\"'c d f g a'\""}, {"return": "\"'The notes are c, d, and f.'\""}, {"return": "\"'No sharps here.'\""}, {"return": "\"'g minor key includes g, B, and d.'\""}, {"return": "\"'acdfg'\""}, {"return": "\"''\""}, {"return": "\"'c major scale: c, d, E, f, g, a, B.'\""}, {"return": "\"'Lowercase c# should not change: c#'\""}, {"return": "\"'Multiple c d c g a f'\""}, {"return": "\"'Ends with sharp: a'\""}, {"return": "\"'c d f g a'\""}, {"return": "\"'c major scale includes c d f g a'\""}, {"return": "\"'No sharps here'\""}, {"return": "\"'gm7 chord includes g B d f'\""}, {"return": "\"'a c f a c f'\""}, {"return": "\"'Classical piece in d minor'\""}, {"return": "\"'f major has a lot of f notes'\""}, {"return": "\"'E major scale without any sharps'\""}, {"return": "\"'Chord progression: c f g a'\""}, {"return": "\"'Melody line: a g f E d c'\""}], "parsed_inputs": [[["sheet", "\"C# minor\""]], [["sheet", "\"Hello, D# world!\""]], [["sheet", "\"F#unction\""]], [["sheet", "\"G#ood morning\""]], [["sheet", "\"A#lways\""]], [["sheet", "\"C major\""]], [["sheet", "\"No sharps here\""]], [["sheet", "\"D#ream big\""]], [["sheet", "\"F#antasy\""]], [["sheet", "\"G#ame over\""]]], "exec_code": "def change_sharp(sheet):\n    sheet = sheet.replace('C#', 'c')\n    sheet = sheet.replace('D#', 'd')\n    sheet = sheet.replace('F#', 'f')\n    sheet = sheet.replace('G#', 'g')\n    sheet = sheet.replace('A#', 'a')\n    return sheet\n", "output": "The function is:\n\n```python\ndef change_sharp(sheet):\n    sheet = sheet.replace('C#', 'c')\n    sheet = sheet.replace('D#', 'd')\n    sheet = sheet.replace('F#', 'f')\n    sheet = sheet.replace('G#', 'g')\n    sheet = sheet.replace('A#', 'a')\n    return sheet\n\n```", "choosed_example_idx": [7, 1, 6, 2, 0, 4], "prompt": "Write a function that generates the output from the input.\nInput: dict(sheet=\"D#ream big\"), Output: \"'dream big'\"\nInput: dict(sheet=\"Hello, D# world!\"), Output: \"'Hello, d world!'\"\nInput: dict(sheet=\"No sharps here\"), Output: \"'No sharps here'\"\nInput: dict(sheet=\"F#unction\"), Output: \"'function'\"\nInput: dict(sheet=\"C# minor\"), Output: \"'c minor'\"\nInput: dict(sheet=\"A#lways\"), Output: \"'always'\"\n\nFunction: change_sharp\n", "id": "3817564f21f33c517f0c40f92890a3f98fce2cae_0"}
{"example_str": "examples = [\n    dict(cases=300),\n    dict(cases=1500),\n    dict(cases=550),\n    dict(cases=4500),\n    dict(cases=200),\n    dict(cases=6000),\n    dict(cases=3500),\n    dict(cases=100),\n    dict(cases=4200),\n    dict(cases=800),\n]\nexamples += [\n    dict(cases=0),\n    dict(cases=500),\n    dict(cases=501),\n    dict(cases=1000),\n    dict(cases=2000),\n    dict(cases=3000),\n    dict(cases=4000),\n    dict(cases=4001),\n    dict(cases=5000),\n    dict(cases=10000)\n]\nexamples += [\n    dict(cases=100),   # Expected to return 0\n    dict(cases=500),   # Expected to return 0\n    dict(cases=501),   # Expected to return 1\n    dict(cases=2000),  # Expected to return 1\n    dict(cases=4000),  # Expected to return 1\n    dict(cases=4001),  # Expected to return 2\n    dict(cases=6000),  # Expected to return 2\n    dict(cases=0),     # Expected to return 0\n    dict(cases=-100),  # Expected to return 0\n    dict(cases=4500)   # Expected to return 2\n]", "code": "def cluster_county_manual(cases):\n    if cases <= 500:\n        return 0\n    elif cases <= 4000:\n        return 1\n    else:\n        return 2\n", "func_name": "cluster_county_manual", "exec_status": true, "example_inputs": ["\"{'cases': 300}\"", "\"{'cases': 1500}\"", "\"{'cases': 550}\"", "\"{'cases': 4500}\"", "\"{'cases': 200}\"", "\"{'cases': 6000}\"", "\"{'cases': 3500}\"", "\"{'cases': 100}\"", "\"{'cases': 4200}\"", "\"{'cases': 800}\""], "example_outputs": [{"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"2\""}], "parsed_inputs": [[["cases", "300"]], [["cases", "1500"]], [["cases", "550"]], [["cases", "4500"]], [["cases", "200"]], [["cases", "6000"]], [["cases", "3500"]], [["cases", "100"]], [["cases", "4200"]], [["cases", "800"]]], "exec_code": "def cluster_county_manual(cases):\n    if cases <= 500:\n        return 0\n    elif cases <= 4000:\n        return 1\n    else:\n        return 2\n", "output": "The function is:\n\n```python\ndef cluster_county_manual(cases):\n    if cases <= 500:\n        return 0\n    elif cases <= 4000:\n        return 1\n    else:\n        return 2\n\n```", "choosed_example_idx": [3, 2, 4, 7, 6], "prompt": "Input: dict(cases=4500), Output: \"2\"\nInput: dict(cases=550), Output: \"1\"\nInput: dict(cases=200), Output: \"0\"\nInput: dict(cases=100), Output: \"0\"\nInput: dict(cases=3500), Output: \"1\"\n\n\nWrite a function that generates the output from the input.\nFunction: cluster_county_manual\n", "id": "2851c78c71475da3f0f1efb20ab6f6535219c4b1_0"}
{"example_str": "examples = [\n    dict(people=[], zombies_dict={}),\n    dict(people=['Alice', 'Bob', 'Charlie'], zombies_dict={'Alice': True, 'Bob': False}),\n    dict(people=('Alice', 'Bob'), zombies_dict={'Alice': True}),\n    dict(people={'Alice', 'Bob', 'Charlie'}, zombies_dict={'Bob': False, 'Charlie': True}),\n    dict(people=['Alice'], zombies_dict={'Alice': True}),\n    dict(people=[], zombies_dict={'Bob': False, 'Charlie': True}),\n    dict(people=['Alice', 'Bob', 'Charlie'], zombies_dict={}),\n    dict(people=('Alice',), zombies_dict={'Alice': True}),\n    dict(people={'Alice'}, zombies_dict={'Alice': True}),\n    dict(people=['Alice', 'Bob'], zombies_dict={'Alice': True, 'Bob': False, 'Charlie': True}),\n]\nexamples += [\n    dict(people=[\"Alice\", \"Bob\", \"Charlie\"], zombies_dict={\"Alice\": True}),\n    dict(people=[\"John\", \"Doe\", \"Jane\"], zombies_dict={\"Doe\": True, \"Jane\": True}),\n    dict(people=[], zombies_dict={}),\n    dict(people=[\"Xavier\", \"Yolanda\", \"Zach\"], zombies_dict={\"Zach\": True}),\n    dict(people=[\"Tom\", \"Jerry\"], zombies_dict={\"Tom\": True, \"Jerry\": False}),\n    dict(people=[\"Ann\", \"Bob\", \"Cindy\"], zombies_dict={\"Cindy\": True}),\n    dict(people=[\"Mike\", \"Lucas\", \"Dustin\", \"Eleven\"], zombies_dict={\"Eleven\": True, \"Mike\": False}),\n    dict(people=[\"Harry\", \"Ron\", \"Hermione\"], zombies_dict={\"Voldemort\": True}),\n    dict(people=[\"Bruce\", \"Clark\", \"Diana\"], zombies_dict={\"Bruce\": True, \"Clark\": True}),\n    dict(people=[\"Tony\", \"Steve\", \"Natasha\"], zombies_dict={\"Tony\": True, \"Natasha\": True, \"Steve\": False})\n]\nexamples += [\n    dict(people=['Alice', 'Bob', 'Charlie'], zombies_dict={'Alice': True, 'Bob': False}),\n    dict(people=['Dave', 'Eve'], zombies_dict={'Dave': True, 'Eve': True}),\n    dict(people=[], zombies_dict={}),\n    dict(people=['Frank'], zombies_dict={'Frank': False}),\n    dict(people=['Grace', 'Heidi', 'Ivan'], zombies_dict={'Grace': False, 'Heidi': True, 'Ivan': True}),\n    dict(people=['Judy', 'Karl', 'Liam'], zombies_dict={'Judy': True, 'Karl': False, 'Liam': False}),\n    dict(people=['Mona', 'Ned'], zombies_dict={'Mona': True, 'Ned': True}),\n    dict(people=['Oscar', 'Pam'], zombies_dict={'Oscar': False, 'Pam': False}),\n    dict(people=['Quinn', 'Rachel', 'Sam'], zombies_dict={'Quinn': True, 'Rachel': False, 'Sam': True}),\n    dict(people=['Tina', 'Uma', 'Vince'], zombies_dict={'Tina': False, 'Uma': False, 'Vince': True}),\n]", "code": "def find_zombies(people, zombies_dict):\n    zombies = []\n    return zombies\n", "func_name": "find_zombies", "exec_status": true, "example_inputs": ["\"{'people': [], 'zombies_dict': {}}\"", "\"{'people': ['Alice', 'Bob', 'Charlie'], 'zombies_dict': {'Alice': True, 'Bob': False}}\"", "\"{'people': ('Alice', 'Bob'), 'zombies_dict': {'Alice': True}}\"", "\"{'people': {'Bob', 'Alice', 'Charlie'}, 'zombies_dict': {'Bob': False, 'Charlie': True}}\"", "\"{'people': ['Alice'], 'zombies_dict': {'Alice': True}}\"", "\"{'people': [], 'zombies_dict': {'Bob': False, 'Charlie': True}}\"", "\"{'people': ['Alice', 'Bob', 'Charlie'], 'zombies_dict': {}}\"", "\"{'people': ('Alice',), 'zombies_dict': {'Alice': True}}\"", "\"{'people': {'Alice'}, 'zombies_dict': {'Alice': True}}\"", "\"{'people': ['Alice', 'Bob'], 'zombies_dict': {'Alice': True, 'Bob': False, 'Charlie': True}}\""], "example_outputs": [{"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}], "parsed_inputs": [[["people", "[]"], ["zombies_dict", "{}"]], [["people", "['Alice', 'Bob', 'Charlie']"], ["zombies_dict", "{'Alice': True, 'Bob': False}"]], [["people", "('Alice', 'Bob')"], ["zombies_dict", "{'Alice': True}"]], [["people", "{'Charlie', 'Alice', 'Bob'}"], ["zombies_dict", "{'Bob': False, 'Charlie': True}"]], [["people", "['Alice']"], ["zombies_dict", "{'Alice': True}"]], [["people", "[]"], ["zombies_dict", "{'Bob': False, 'Charlie': True}"]], [["people", "['Alice', 'Bob', 'Charlie']"], ["zombies_dict", "{}"]], [["people", "('Alice',)"], ["zombies_dict", "{'Alice': True}"]], [["people", "{'Alice'}"], ["zombies_dict", "{'Alice': True}"]], [["people", "['Alice', 'Bob']"], ["zombies_dict", "{'Alice': True, 'Bob': False, 'Charlie': True}"]]], "exec_code": "def find_zombies(people, zombies_dict):\n    zombies = []\n    return zombies\n", "output": "The function is:\n\n```python\ndef find_zombies(people, zombies_dict):\n    zombies = []\n    return zombies\n\n```", "choosed_example_idx": [2, 5, 7, 9, 1, 0, 6, 4], "prompt": "Write a function that generates the output from the input.\n\n\nInput: dict(people=('Alice', 'Bob'), zombies_dict={'Alice': True}), Output: \"[]\"\nInput: dict(people=[], zombies_dict={'Bob': False, 'Charlie': True}), Output: \"[]\"\nInput: dict(people=('Alice',), zombies_dict={'Alice': True}), Output: \"[]\"\nInput: dict(people=['Alice', 'Bob'], zombies_dict={'Alice': True, 'Bob': False, 'Charlie': True}), Output: \"[]\"\nInput: dict(people=['Alice', 'Bob', 'Charlie'], zombies_dict={'Alice': True, 'Bob': False}), Output: \"[]\"\nInput: dict(people=[], zombies_dict={}), Output: \"[]\"\nInput: dict(people=['Alice', 'Bob', 'Charlie'], zombies_dict={}), Output: \"[]\"\nInput: dict(people=['Alice'], zombies_dict={'Alice': True}), Output: \"[]\"\n\nFunction: find_zombies\n\n\n", "id": "cb5b7e9d9d9baae65a51e93888bfff967dc1ef39_0"}
{"example_str": "examples = [\n    dict(n=5, cur_title=\"abcde\"),\n    dict(n=3, cur_title=\"ab\"),\n    dict(n=10, cur_title=\"abcdefghij\"),\n    dict(n=7, cur_title=\"abcdef\"),\n    dict(n=2, cur_title=\"a\"),\n    dict(n=15, cur_title=\"abcdefghijklmno\"),\n    dict(n=8, cur_title=\"abcdefgh\"),\n    dict(n=4, cur_title=\"abcd\"),\n    dict(n=9, cur_title=\"abcdefghi\"),\n    dict(n=6, cur_title=\"abcdefg\"),\n]\nexamples += [\n    dict(n=5, cur_title=\"Hello\"),\n    dict(n=3, cur_title=\"Hi\"),\n    dict(n=10, cur_title=\"\"),\n    dict(n=1, cur_title=\"A\"),\n    dict(n=8, cur_title=\"Example\"),\n    dict(n=4, cur_title=\"Test\"),\n    dict(n=6, cur_title=\"World\"),\n    dict(n=2, cur_title=\"No\"),\n    dict(n=7, cur_title=\"Welcome\"),\n    dict(n=9, cur_title=\"Function\")\n]\nexamples += [\n    dict(n=5, cur_title=\"Hello\"),\n    dict(n=3, cur_title=\"Hi\"),\n    dict(n=10, cur_title=\"\"),\n    dict(n=8, cur_title=\"World\"),\n    dict(n=6, cur_title=\"Python\"),\n    dict(n=4, cur_title=\"Code\"),\n    dict(n=7, cur_title=\"Example\"),\n    dict(n=2, cur_title=\"A\"),\n    dict(n=9, cur_title=\"Function\"),\n    dict(n=1, cur_title=\"B\"),\n]", "code": "def calculate_model_order_to_use(n, cur_title):\n    if len(cur_title) >= n - 1:\n        return n\n    else:\n        return n - len(cur_title)\n", "func_name": "calculate_model_order_to_use", "exec_status": true, "example_inputs": ["\"{'n': 5, 'cur_title': 'abcde'}\"", "\"{'n': 3, 'cur_title': 'ab'}\"", "\"{'n': 10, 'cur_title': 'abcdefghij'}\"", "\"{'n': 7, 'cur_title': 'abcdef'}\"", "\"{'n': 2, 'cur_title': 'a'}\"", "\"{'n': 15, 'cur_title': 'abcdefghijklmno'}\"", "\"{'n': 8, 'cur_title': 'abcdefgh'}\"", "\"{'n': 4, 'cur_title': 'abcd'}\"", "\"{'n': 9, 'cur_title': 'abcdefghi'}\"", "\"{'n': 6, 'cur_title': 'abcdefg'}\""], "example_outputs": [{"return": "\"5\""}, {"return": "\"3\""}, {"return": "\"10\""}, {"return": "\"7\""}, {"return": "\"2\""}, {"return": "\"15\""}, {"return": "\"8\""}, {"return": "\"4\""}, {"return": "\"9\""}, {"return": "\"6\""}, {"return": "\"5\""}, {"return": "\"3\""}, {"return": "\"10\""}, {"return": "\"1\""}, {"return": "\"8\""}, {"return": "\"4\""}, {"return": "\"6\""}, {"return": "\"2\""}, {"return": "\"7\""}, {"return": "\"9\""}, {"return": "\"5\""}, {"return": "\"3\""}, {"return": "\"10\""}, {"return": "\"3\""}, {"return": "\"6\""}, {"return": "\"4\""}, {"return": "\"7\""}, {"return": "\"2\""}, {"return": "\"9\""}, {"return": "\"1\""}], "parsed_inputs": [[["n", "5"], ["cur_title", "\"abcde\""]], [["n", "3"], ["cur_title", "\"ab\""]], [["n", "10"], ["cur_title", "\"abcdefghij\""]], [["n", "7"], ["cur_title", "\"abcdef\""]], [["n", "2"], ["cur_title", "\"a\""]], [["n", "15"], ["cur_title", "\"abcdefghijklmno\""]], [["n", "8"], ["cur_title", "\"abcdefgh\""]], [["n", "4"], ["cur_title", "\"abcd\""]], [["n", "9"], ["cur_title", "\"abcdefghi\""]], [["n", "6"], ["cur_title", "\"abcdefg\""]]], "exec_code": "def calculate_model_order_to_use(n, cur_title):\n    if len(cur_title) >= n - 1:\n        return n\n    else:\n        return n - len(cur_title)\n", "output": "The function is:\n\n```python\ndef calculate_model_order_to_use(n, cur_title):\n    if len(cur_title) >= n - 1:\n        return n\n    else:\n        return n - len(cur_title)\n\n```", "choosed_example_idx": [1, 7, 5, 8], "prompt": "Input: dict(n=3, cur_title=\"ab\"), Output: \"3\"\nInput: dict(n=4, cur_title=\"abcd\"), Output: \"4\"\nInput: dict(n=15, cur_title=\"abcdefghijklmno\"), Output: \"15\"\nInput: dict(n=9, cur_title=\"abcdefghi\"), Output: \"9\"\n\nFunction: calculate_model_order_to_use\n\nWrite a function that generates the output from the input.\n\n", "id": "613b1b378ad75a0f0c83c6379ea7c668e259381f_0"}
{"example_str": "examples = [\n    dict(board=[[1, 2, 3], [4, 5, 6], [7, 8, 0]]),\n    dict(board=[[0, 2, 3], [4, 5, 6], [7, 8, 9]]),\n    dict(board=[[1, 2, 3], [4, 0, 6], [7, 8, 9]]),\n    dict(board=[[1, 2, 3], [4, 5, 6], [0, 8, 9]]),\n    dict(board=[[1, 2, 0], [4, 5, 6], [7, 8, 9]]),\n    dict(board=[[1, 0, 3], [4, 5, 6], [7, 8, 9]]),\n    dict(board=[[0, 0, 3], [4, 5, 6], [7, 8, 9]]),\n    dict(board=[[1, 2, 3], [0, 5, 6], [7, 8, 9]]),\n    dict(board=[[1, 2, 3], [4, 0, 0], [7, 8, 9]]),\n    dict(board=[[1, 2, 3], [4, 5, 0], [7, 8, 9]]),\n]\nexamples += [\n    dict(board=[[1, 2, 3], [4, 5, 0], [7, 8, 9]]),\n    dict(board=[[0, 2, 3], [4, 5, 6], [7, 8, 9]]),\n    dict(board=[[1, 2, 3], [4, 0, 6], [7, 8, 9]]),\n    dict(board=[[1, 2, 3], [4, 5, 6], [0, 8, 9]]),\n    dict(board=[[1, 1, 1], [1, 1, 1], [1, 1, 0]]),\n    dict(board=[[0, 0, 0], [0, 0, 0], [0, 0, 0]]),\n    dict(board=[[1, 2, 3], [4, 5, 6], [7, 8, 0]]),\n    dict(board=[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 0, 16]]),\n    dict(board=[[1, 2], [0, 4]]),\n    dict(board=[[1], [0]])\n]\nexamples += [\n    dict(board=[[1, 2, 3], [4, 5, 0], [7, 8, 9]]),  # Zero at position (1, 2)\n    dict(board=[[0, 2, 3], [4, 5, 6], [7, 8, 9]]),  # Zero at position (0, 0)\n    dict(board=[[1, 2, 3], [4, 0, 6], [7, 8, 9]]),  # Zero at position (1, 1)\n    dict(board=[[1, 2, 3], [4, 5, 6], [0, 8, 9]]),  # Zero at position (2, 0)\n    dict(board=[[1, 2, 3], [4, 5, 6], [7, 8, 0]]),  # Zero at position (2, 2)\n    dict(board=[[1, 0, 3], [4, 5, 6], [7, 8, 9]]),  # Zero at position (0, 1)\n    dict(board=[[1, 2, 3], [0, 5, 6], [7, 8, 9]]),  # Zero at position (1, 0)\n    dict(board=[[1, 2, 3], [4, 5, 6], [7, 0, 9]]),  # Zero at position (2, 1)\n    dict(board=[[0, 0, 0], [0, 0, 0], [0, 0, 0]]),  # Zero at position (0, 0)\n    dict(board=[[1, 2, 3], [4, 5, 6], [7, 8, 9]])   # No zero present\n]", "code": "def empty_block(board):\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if board[i][j] == 0:\n                return i, j\n", "func_name": "empty_block", "exec_status": true, "example_inputs": ["\"{'board': [[1, 2, 3], [4, 5, 6], [7, 8, 0]]}\"", "\"{'board': [[0, 2, 3], [4, 5, 6], [7, 8, 9]]}\"", "\"{'board': [[1, 2, 3], [4, 0, 6], [7, 8, 9]]}\"", "\"{'board': [[1, 2, 3], [4, 5, 6], [0, 8, 9]]}\"", "\"{'board': [[1, 2, 0], [4, 5, 6], [7, 8, 9]]}\"", "\"{'board': [[1, 0, 3], [4, 5, 6], [7, 8, 9]]}\"", "\"{'board': [[0, 0, 3], [4, 5, 6], [7, 8, 9]]}\"", "\"{'board': [[1, 2, 3], [0, 5, 6], [7, 8, 9]]}\"", "\"{'board': [[1, 2, 3], [4, 0, 0], [7, 8, 9]]}\"", "\"{'board': [[1, 2, 3], [4, 5, 0], [7, 8, 9]]}\""], "example_outputs": [{"return": "\"(2, 2)\""}, {"return": "\"(0, 0)\""}, {"return": "\"(1, 1)\""}, {"return": "\"(2, 0)\""}, {"return": "\"(0, 2)\""}, {"return": "\"(0, 1)\""}, {"return": "\"(0, 0)\""}, {"return": "\"(1, 0)\""}, {"return": "\"(1, 1)\""}, {"return": "\"(1, 2)\""}, {"return": "\"(1, 2)\""}, {"return": "\"(0, 0)\""}, {"return": "\"(1, 1)\""}, {"return": "\"(2, 0)\""}, {"return": "\"(2, 2)\""}, {"return": "\"(0, 0)\""}, {"return": "\"(2, 2)\""}, {"return": "\"(3, 2)\""}, {"return": "\"(1, 0)\""}, {"return": "\"(1, 0)\""}, {"return": "\"(1, 2)\""}, {"return": "\"(0, 0)\""}, {"return": "\"(1, 1)\""}, {"return": "\"(2, 0)\""}, {"return": "\"(2, 2)\""}, {"return": "\"(0, 1)\""}, {"return": "\"(1, 0)\""}, {"return": "\"(2, 1)\""}, {"return": "\"(0, 0)\""}, {"return": "\"None\""}], "parsed_inputs": [[["board", "[[1, 2, 3], [4, 5, 6], [7, 8, 0]]"]], [["board", "[[0, 2, 3], [4, 5, 6], [7, 8, 9]]"]], [["board", "[[1, 2, 3], [4, 0, 6], [7, 8, 9]]"]], [["board", "[[1, 2, 3], [4, 5, 6], [0, 8, 9]]"]], [["board", "[[1, 2, 0], [4, 5, 6], [7, 8, 9]]"]], [["board", "[[1, 0, 3], [4, 5, 6], [7, 8, 9]]"]], [["board", "[[0, 0, 3], [4, 5, 6], [7, 8, 9]]"]], [["board", "[[1, 2, 3], [0, 5, 6], [7, 8, 9]]"]], [["board", "[[1, 2, 3], [4, 0, 0], [7, 8, 9]]"]], [["board", "[[1, 2, 3], [4, 5, 0], [7, 8, 9]]"]]], "exec_code": "def empty_block(board):\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if board[i][j] == 0:\n                return i, j\n", "output": "The function is:\n\n```python\ndef empty_block(board):\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if board[i][j] == 0:\n                return i, j\n\n```", "choosed_example_idx": [0, 8, 7, 4, 6, 1, 2, 5], "prompt": "Input: dict(board=[[1, 2, 3], [4, 5, 6], [7, 8, 0]]), Output: \"(2, 2)\"\nInput: dict(board=[[1, 2, 3], [4, 0, 0], [7, 8, 9]]), Output: \"(1, 1)\"\nInput: dict(board=[[1, 2, 3], [0, 5, 6], [7, 8, 9]]), Output: \"(1, 0)\"\nInput: dict(board=[[1, 2, 0], [4, 5, 6], [7, 8, 9]]), Output: \"(0, 2)\"\nInput: dict(board=[[0, 0, 3], [4, 5, 6], [7, 8, 9]]), Output: \"(0, 0)\"\nInput: dict(board=[[0, 2, 3], [4, 5, 6], [7, 8, 9]]), Output: \"(0, 0)\"\nInput: dict(board=[[1, 2, 3], [4, 0, 6], [7, 8, 9]]), Output: \"(1, 1)\"\nInput: dict(board=[[1, 0, 3], [4, 5, 6], [7, 8, 9]]), Output: \"(0, 1)\"\n\nWrite a function that generates the output from the input.\n\nFunction: empty_block\n", "id": "576810a1ea3e0587dbc4c4d8659d7705d0d357fc_0"}
{"example_str": "examples = [\n    dict(x=lambda: None),  # a function\n    dict(x=True),  # a boolean\n    dict(x=3.14159),  # a float\n    dict(x=None),  # None\n    dict(x='hello'),  # a string\n    dict(x=123),  # an integer\n    dict(x=[1, 2, 3]),  # a list\n    dict(x={'a': 1, 'b': 2}),  # a dictionary\n    dict(x=(1, 2, 3)),  # a tuple\n    dict(x=b'hello'),  # a bytes object\n    dict(x=object()),  # an object\n]\nexamples += [\n    dict(x=lambda x: x),  # Example of a function\n    dict(x=True),         # Example of a boolean True\n    dict(x=False),        # Example of a boolean False\n    dict(x=3.141592653589793),  # Example of a float\n    dict(x=None),         # Example of None\n    dict(x=\"Hello World\"),  # Example of a string\n    dict(x=123),          # Example of an integer\n    dict(x=[1, 2, 3]),    # Example of a list\n    dict(x={\"key\": \"value\"}),  # Example of a dictionary\n    dict(x=(1, 2, 3))     # Example of a tuple\n]\nexamples += [\n    dict(x=3.14159),             # float\n    dict(x=True),                # boolean True\n    dict(x=False),               # boolean False\n    dict(x='Hello'),             # string\n    dict(x=None),                # NoneType\n    dict(x=123),                 # integer\n    dict(x=formatr),             # function\n    dict(x=123456789.123456789), # long float\n    dict(x=[1, 2, 3]),           # list\n    dict(x={'key': 'value'}),    # dictionary\n]", "code": "def formatr(x):\n    \"\"\"Abbreviated formatting\"\"\"\n    if hasattr(x, '__name__'):\n        return x.__name__\n    if isinstance(x, bool):\n        return '1' if x else '0'\n    if isinstance(x, float):\n        return '{0:.5g}'.format(x)\n    if x is None:\n        return ''\n    return str(x)\n", "func_name": "formatr", "exec_status": true, "example_inputs": ["\"{'x': <function <lambda> at 0x7f7745db79d0>}\"", "\"{'x': True}\"", "\"{'x': 3.14159}\"", "\"{'x': None}\"", "\"{'x': 'hello'}\"", "\"{'x': 123}\"", "\"{'x': [1, 2, 3]}\"", "\"{'x': {'a': 1, 'b': 2}}\"", "\"{'x': (1, 2, 3)}\"", "\"{'x': b'hello'}\"", "\"{'x': <object object at 0x7f7745e65340>}\""], "example_outputs": [{"return": "\"'<lambda>'\""}, {"return": "\"'1'\""}, {"return": "\"'3.1416'\""}, {"return": "\"''\""}, {"return": "\"'hello'\""}, {"return": "\"'123'\""}, {"return": "\"'[1, 2, 3]'\""}, {"return": "\"\\\"{'a': 1, 'b': 2}\\\"\""}, {"return": "\"'(1, 2, 3)'\""}, {"return": "\"\\\"b'hello'\\\"\""}, {"return": "\"'<object object at 0x7f7745e65340>'\""}, {"return": "\"'<lambda>'\""}, {"return": "\"'1'\""}, {"return": "\"'0'\""}, {"return": "\"'3.1416'\""}, {"return": "\"''\""}, {"return": "\"'Hello World'\""}, {"return": "\"'123'\""}, {"return": "\"'[1, 2, 3]'\""}, {"return": "\"\\\"{'key': 'value'}\\\"\""}, {"return": "\"'(1, 2, 3)'\""}, {"return": "\"'3.1416'\""}, {"return": "\"'1'\""}, {"return": "\"'0'\""}, {"return": "\"'Hello'\""}, {"return": "\"''\""}, {"return": "\"'123'\""}, {"return": "\"'formatr'\""}, {"return": "\"'1.2346e+08'\""}, {"return": "\"'[1, 2, 3]'\""}, {"return": "\"\\\"{'key': 'value'}\\\"\""}], "parsed_inputs": [[["x", "(lambda : None)"]], [["x", "True"]], [["x", "3.14159"]], [["x", "None"]], [["x", "\"hello\""]], [["x", "123"]], [["x", "[1, 2, 3]"]], [["x", "{'a': 1, 'b': 2}"]], [["x", "(1, 2, 3)"]], [["x", "b'hello'"]], [["x", "object()"]]], "exec_code": "def formatr(x):\n    \"\"\"Abbreviated formatting\"\"\"\n    if hasattr(x, '__name__'):\n        return x.__name__\n    if isinstance(x, bool):\n        return '1' if x else '0'\n    if isinstance(x, float):\n        return '{0:.5g}'.format(x)\n    if x is None:\n        return ''\n    return str(x)\n", "output": "The function is:\n\n```python\ndef formatr(x):\n    \"\"\"Abbreviated formatting\"\"\"\n    if hasattr(x, '__name__'):\n        return x.__name__\n    if isinstance(x, bool):\n        return '1' if x else '0'\n    if isinstance(x, float):\n        return '{0:.5g}'.format(x)\n    if x is None:\n        return ''\n    return str(x)\n\n```", "choosed_example_idx": [10, 3, 8, 1, 6], "prompt": "Write a function that generates the output from the input.\nFunction: formatr\n\nInput: dict(x=object()), Output: \"'<object object at 0x7f7745e65340>'\"\nInput: dict(x=None), Output: \"''\"\nInput: dict(x=(1, 2, 3)), Output: \"'(1, 2, 3)'\"\nInput: dict(x=True), Output: \"'1'\"\nInput: dict(x=[1, 2, 3]), Output: \"'[1, 2, 3]'\"\n\n\n", "id": "f3380d7390946d9c556acbef04f0e22ff4651863_0"}
{"example_str": "examples = [\n    dict(height=1, width=2, length=3),\n    dict(height=4, width=5, length=6),\n    dict(height=7.5, width=8, length=9),\n    dict(height=10, width=10, length=10),\n    dict(height=2, width=3, length=4),\n    dict(height=5, width=5, length=5),\n    dict(height=1.2, width=3.4, length=5.6),\n    dict(height=8, width=9, length=10),\n    dict(height=6, width=7, length=8),\n    dict(height=3.14, width=2.71, length=1.62)\n]\nexamples += [\n    dict(height=10, width=5, length=8),\n    dict(height=15.5, width=20.3, length=25.1),\n    dict(height=7, width=7, length=7),\n    dict(height=0, width=5, length=10),\n    dict(height=100, width=200, length=300),\n    dict(height=1.5, width=2.5, length=3.5),\n    dict(height=50, width=25, length=75),\n    dict(height=0.5, width=0.5, length=0.5),\n    dict(height=123, width=456, length=789),\n    dict(height=10, width=20, length=30)\n]\nexamples += [\n    dict(height=10, width=5, length=3),\n    dict(height=6, width=2, length=4),\n    dict(height=8.5, width=3.2, length=2.1),\n    dict(height=15, width=10, length=5),\n    dict(height=20.5, width=15.5, length=10.5),\n    dict(height=7, width=7, length=7),\n    dict(height=12.3, width=9.8, length=6.7),\n    dict(height=25, width=10, length=15),\n    dict(height=30, width=20, length=10),\n    dict(height=50, width=25, length=30)\n]", "code": "def calculateSurfaceArea(height, width, length):\n    surfaceArea = height * width * 2 + height * length * 2 + width * length * 2\n    return surfaceArea\n", "func_name": "calculateSurfaceArea", "exec_status": true, "example_inputs": ["\"{'height': 1, 'width': 2, 'length': 3}\"", "\"{'height': 4, 'width': 5, 'length': 6}\"", "\"{'height': 7.5, 'width': 8, 'length': 9}\"", "\"{'height': 10, 'width': 10, 'length': 10}\"", "\"{'height': 2, 'width': 3, 'length': 4}\"", "\"{'height': 5, 'width': 5, 'length': 5}\"", "\"{'height': 1.2, 'width': 3.4, 'length': 5.6}\"", "\"{'height': 8, 'width': 9, 'length': 10}\"", "\"{'height': 6, 'width': 7, 'length': 8}\"", "\"{'height': 3.14, 'width': 2.71, 'length': 1.62}\""], "example_outputs": [{"return": "\"22\""}, {"return": "\"148\""}, {"return": "\"399.0\""}, {"return": "\"600\""}, {"return": "\"52\""}, {"return": "\"150\""}, {"return": "\"59.68\""}, {"return": "\"484\""}, {"return": "\"292\""}, {"return": "\"35.9728\""}, {"return": "\"340\""}, {"return": "\"2426.46\""}, {"return": "\"294\""}, {"return": "\"100\""}, {"return": "\"220000\""}, {"return": "\"35.5\""}, {"return": "\"13750\""}, {"return": "\"1.5\""}, {"return": "\"1025838\""}, {"return": "\"2200\""}, {"return": "\"190\""}, {"return": "\"88\""}, {"return": "\"103.54\""}, {"return": "\"550\""}, {"return": "\"1391.5\""}, {"return": "\"294\""}, {"return": "\"537.2200000000001\""}, {"return": "\"1550\""}, {"return": "\"2200\""}, {"return": "\"7000\""}], "parsed_inputs": [[["height", "1"], ["width", "2"], ["length", "3"]], [["height", "4"], ["width", "5"], ["length", "6"]], [["height", "7.5"], ["width", "8"], ["length", "9"]], [["height", "10"], ["width", "10"], ["length", "10"]], [["height", "2"], ["width", "3"], ["length", "4"]], [["height", "5"], ["width", "5"], ["length", "5"]], [["height", "1.2"], ["width", "3.4"], ["length", "5.6"]], [["height", "8"], ["width", "9"], ["length", "10"]], [["height", "6"], ["width", "7"], ["length", "8"]], [["height", "3.14"], ["width", "2.71"], ["length", "1.62"]]], "exec_code": "def calculateSurfaceArea(height, width, length):\n    surfaceArea = height * width * 2 + height * length * 2 + width * length * 2\n    return surfaceArea\n", "output": "The function is:\n\n```python\ndef calculateSurfaceArea(height, width, length):\n    surfaceArea = height * width * 2 + height * length * 2 + width * length * 2\n    return surfaceArea\n\n```", "choosed_example_idx": [1, 3, 4, 9, 8, 6, 2, 0, 5, 7], "prompt": "Function: calculateSurfaceArea\nInput: dict(height=4, width=5, length=6), Output: \"148\"\nInput: dict(height=10, width=10, length=10), Output: \"600\"\nInput: dict(height=2, width=3, length=4), Output: \"52\"\nInput: dict(height=3.14, width=2.71, length=1.62), Output: \"35.9728\"\nInput: dict(height=6, width=7, length=8), Output: \"292\"\nInput: dict(height=1.2, width=3.4, length=5.6), Output: \"59.68\"\nInput: dict(height=7.5, width=8, length=9), Output: \"399.0\"\nInput: dict(height=1, width=2, length=3), Output: \"22\"\nInput: dict(height=5, width=5, length=5), Output: \"150\"\nInput: dict(height=8, width=9, length=10), Output: \"484\"\n\nWrite a function that generates the output from the input.\n", "id": "cb047a2feb5d3136862cc005248ab2f26c287fc2_0"}
{"example_str": "examples = [\n    dict(s=\"Hello World\"),\n    dict(s=\"THIS IS UPPERCASE\"),\n    dict(s=\"this is lowercase\"),\n    dict(s=\"Mixed Case\"),\n    dict(s=\"12345\"),\n    dict(s=\"aBcDeF\"),\n    dict(s=\"\"),\n    dict(s=\"A\"),\n    dict(s=\"abc def\"),\n    dict(s=\"XYZ\"),\n]\nexamples += [\n    dict(s=\"Hello World\"),\n    dict(s=\"Python3.8\"),\n    dict(s=\"12345\"),\n    dict(s=\"\"),\n    dict(s=\"CASE\"),\n    dict(s=\"case\"),\n    dict(s=\"MixedCASE123\"),\n    dict(s=\"!@#$%^&*()\"),\n    dict(s=\"Line1\\nLine2\"),\n    dict(s=\"Tabs\\tAre\\tHere\")\n]\nexamples += [\n    dict(s=\"Hello World\"),\n    dict(s=\"Python\"),\n    dict(s=\"123 ABC xyz\"),\n    dict(s=\"\"),\n    dict(s=\"ALL LOWER\"),\n    dict(s=\"all upper\"),\n    dict(s=\"MiXeD CaSe\"),\n    dict(s=\"1234567890\"),\n    dict(s=\"Special #Characters!\"),\n    dict(s=\"Line\\nBreak\")\n]", "code": "def swap_case(s):\n    result = ''\n    for text in s:\n        if text.isupper():\n            result += text.lower()\n        else:\n            result += text.upper()\n    return result\n", "func_name": "swap_case", "exec_status": true, "example_inputs": ["\"{'s': 'Hello World'}\"", "\"{'s': 'THIS IS UPPERCASE'}\"", "\"{'s': 'this is lowercase'}\"", "\"{'s': 'Mixed Case'}\"", "\"{'s': '12345'}\"", "\"{'s': 'aBcDeF'}\"", "\"{'s': ''}\"", "\"{'s': 'A'}\"", "\"{'s': 'abc def'}\"", "\"{'s': 'XYZ'}\""], "example_outputs": [{"return": "\"'hELLO wORLD'\""}, {"return": "\"'this is uppercase'\""}, {"return": "\"'THIS IS LOWERCASE'\""}, {"return": "\"'mIXED cASE'\""}, {"return": "\"'12345'\""}, {"return": "\"'AbCdEf'\""}, {"return": "\"''\""}, {"return": "\"'a'\""}, {"return": "\"'ABC DEF'\""}, {"return": "\"'xyz'\""}, {"return": "\"'hELLO wORLD'\""}, {"return": "\"'pYTHON3.8'\""}, {"return": "\"'12345'\""}, {"return": "\"''\""}, {"return": "\"'case'\""}, {"return": "\"'CASE'\""}, {"return": "\"'mIXEDcase123'\""}, {"return": "\"'!@#$%^&*()'\""}, {"return": "\"'lINE1\\\\nlINE2'\""}, {"return": "\"'tABS\\\\taRE\\\\thERE'\""}, {"return": "\"'hELLO wORLD'\""}, {"return": "\"'pYTHON'\""}, {"return": "\"'123 abc XYZ'\""}, {"return": "\"''\""}, {"return": "\"'all lower'\""}, {"return": "\"'ALL UPPER'\""}, {"return": "\"'mIxEd cAsE'\""}, {"return": "\"'1234567890'\""}, {"return": "\"'sPECIAL #cHARACTERS!'\""}, {"return": "\"'lINE\\\\nbREAK'\""}], "parsed_inputs": [[["s", "\"Hello World\""]], [["s", "\"THIS IS UPPERCASE\""]], [["s", "\"this is lowercase\""]], [["s", "\"Mixed Case\""]], [["s", "\"12345\""]], [["s", "\"aBcDeF\""]], [["s", "\"\""]], [["s", "\"A\""]], [["s", "\"abc def\""]], [["s", "\"XYZ\""]]], "exec_code": "def swap_case(s):\n    result = ''\n    for text in s:\n        if text.isupper():\n            result += text.lower()\n        else:\n            result += text.upper()\n    return result\n", "output": "The function is:\n\n```python\ndef swap_case(s):\n    result = ''\n    for text in s:\n        if text.isupper():\n            result += text.lower()\n        else:\n            result += text.upper()\n    return result\n\n```", "choosed_example_idx": [4, 3, 1, 6], "prompt": "Function: swap_case\n\nWrite a function that generates the output from the input.\nInput: dict(s=\"12345\"), Output: \"'12345'\"\nInput: dict(s=\"Mixed Case\"), Output: \"'mIXED cASE'\"\nInput: dict(s=\"THIS IS UPPERCASE\"), Output: \"'this is uppercase'\"\nInput: dict(s=\"\"), Output: \"''\"\n\n", "id": "55cf17a17cf8a24291828c6e2137b93b51a40a38_0"}
{"example_str": "examples = [\n    dict(c_coor=[0, 0, 0], o_coor=[1, 1, 1]),\n    dict(c_coor=[1, 2, 3], o_coor=[4, 5, 6]),\n    dict(c_coor=[-1, 0, 0], o_coor=[0, 1, 0]),\n    dict(c_coor=[0.5, 0.5, 0.5], o_coor=[1.5, 1.5, 1.5]),\n    dict(c_coor=[10, 20, 30], o_coor=[40, 50, 60]),\n    dict(c_coor=[-5, -5, -5], o_coor=[5, 5, 5]),\n    dict(c_coor=[0.1, 0.2, 0.3], o_coor=[0.4, 0.5, 0.6]),\n    dict(c_coor=[100, 200, 300], o_coor=[400, 500, 600]),\n    dict(c_coor=[-10, -20, -30], o_coor=[-40, -50, -60]),\n    dict(c_coor=[3.14, 2.71, 1.62], o_coor=[6.28, 5.43, 4.58]),\n]\nexamples += [\n    dict(c_coor=(0, 0, 0), o_coor=(1, 1, 1)),\n    dict(c_coor=(2, 3, 4), o_coor=(5, 6, 7)),\n    dict(c_coor=(-1, -1, -1), o_coor=(1, 1, 1)),\n    dict(c_coor=(0.5, 0.5, 0.5), o_coor=(0.5, 0.5, 0.5)),\n    dict(c_coor=(10, 20, 30), o_coor=(40, 50, 60)),\n    dict(c_coor=(100, 200, 300), o_coor=(400, 500, 600)),\n    dict(c_coor=(-5, -10, -15), o_coor=(-20, -25, -30)),\n    dict(c_coor=(0.1, 0.2, 0.3), o_coor=(0.4, 0.5, 0.6)),\n    dict(c_coor=(1000, 2000, 3000), o_coor=(4000, 5000, 6000)),\n    dict(c_coor=(0, 0, 0), o_coor=(0, 0, 0))\n]\nexamples += [\n    dict(c_coor=(0, 0, 0), o_coor=(1, 1, 1)),\n    dict(c_coor=(2, 2, 2), o_coor=(3, 3, 3)),\n    dict(c_coor=(1, 0, 0), o_coor=(0, 1, 0)),\n    dict(c_coor=(0, 2, 0), o_coor=(0, 0, 2)),\n    dict(c_coor=(1, 1, 1), o_coor=(2, 2, 2)),\n    dict(c_coor=(3, 0, 3), o_coor=(1, 2, 1)),\n    dict(c_coor=(4, 4, 4), o_coor=(0, 0, 0)),\n    dict(c_coor=(5, 3, 2), o_coor=(1, 4, 3)),\n    dict(c_coor=(0, 1, 2), o_coor=(2, 0, 1)),\n    dict(c_coor=(3, 5, 1), o_coor=(1, 2, 3))\n]", "code": "def get_centerofmass_CO(c_coor, o_coor):\n    \"\"\"Return the center of mass of CO\"\"\"\n    c_mass = 12.0107\n    o_mass = 15.999\n    x_com = (c_mass * c_coor[0] + o_mass * o_coor[0]) / (c_mass + o_mass)\n    y_com = (c_mass * c_coor[1] + o_mass * o_coor[1]) / (c_mass + o_mass)\n    z_com = (c_mass * c_coor[2] + o_mass * o_coor[2]) / (c_mass + o_mass)\n    return [x_com, y_com, z_com]\n", "func_name": "get_centerofmass_CO", "exec_status": true, "example_inputs": ["\"{'c_coor': [0, 0, 0], 'o_coor': [1, 1, 1]}\"", "\"{'c_coor': [1, 2, 3], 'o_coor': [4, 5, 6]}\"", "\"{'c_coor': [-1, 0, 0], 'o_coor': [0, 1, 0]}\"", "\"{'c_coor': [0.5, 0.5, 0.5], 'o_coor': [1.5, 1.5, 1.5]}\"", "\"{'c_coor': [10, 20, 30], 'o_coor': [40, 50, 60]}\"", "\"{'c_coor': [-5, -5, -5], 'o_coor': [5, 5, 5]}\"", "\"{'c_coor': [0.1, 0.2, 0.3], 'o_coor': [0.4, 0.5, 0.6]}\"", "\"{'c_coor': [100, 200, 300], 'o_coor': [400, 500, 600]}\"", "\"{'c_coor': [-10, -20, -30], 'o_coor': [-40, -50, -60]}\"", "\"{'c_coor': [3.14, 2.71, 1.62], 'o_coor': [6.28, 5.43, 4.58]}\""], "example_outputs": [{"return": "\"[0.5711949788823157, 0.5711949788823157, 0.5711949788823157]\""}, {"return": "\"[2.713584936646947, 3.713584936646947, 4.713584936646947]\""}, {"return": "\"[-0.4288050211176842, 0.5711949788823157, 0.0]\""}, {"return": "\"[1.0711949788823156, 1.0711949788823156, 1.0711949788823156]\""}, {"return": "\"[27.135849366469472, 37.13584936646947, 47.135849366469465]\""}, {"return": "\"[0.7119497888231578, 0.7119497888231578, 0.7119497888231578]\""}, {"return": "\"[0.2713584936646947, 0.3713584936646947, 0.4713584936646947]\""}, {"return": "\"[271.3584936646947, 371.35849366469466, 471.3584936646947]\""}, {"return": "\"[-27.135849366469472, -37.13584936646947, -47.135849366469465]\""}, {"return": "\"[4.933552233690471, 4.263650342559898, 3.3107371374916545]\""}, {"return": "\"[0.5711949788823157, 0.5711949788823157, 0.5711949788823157]\""}, {"return": "\"[3.713584936646947, 4.713584936646947, 5.713584936646947]\""}, {"return": "\"[0.14238995776463154, 0.14238995776463154, 0.14238995776463154]\""}, {"return": "\"[0.5, 0.5, 0.5]\""}, {"return": "\"[27.135849366469472, 37.13584936646947, 47.135849366469465]\""}, {"return": "\"[271.3584936646947, 371.35849366469466, 471.3584936646947]\""}, {"return": "\"[-13.567924683234736, -18.567924683234736, -23.567924683234732]\""}, {"return": "\"[0.2713584936646947, 0.3713584936646947, 0.4713584936646947]\""}, {"return": "\"[2713.584936646947, 3713.584936646947, 4713.584936646947]\""}, {"return": "\"[0.0, 0.0, 0.0]\""}, {"return": "\"[0.5711949788823157, 0.5711949788823157, 0.5711949788823157]\""}, {"return": "\"[2.5711949788823154, 2.5711949788823154, 2.5711949788823154]\""}, {"return": "\"[0.4288050211176842, 0.5711949788823157, 0.0]\""}, {"return": "\"[0.0, 0.8576100422353684, 1.1423899577646315]\""}, {"return": "\"[1.5711949788823159, 1.5711949788823159, 1.5711949788823159]\""}, {"return": "\"[1.8576100422353683, 1.1423899577646315, 1.8576100422353683]\""}, {"return": "\"[1.7152200844707368, 1.7152200844707368, 1.7152200844707368]\""}, {"return": "\"[2.7152200844707366, 3.5711949788823154, 2.5711949788823154]\""}, {"return": "\"[1.1423899577646315, 0.4288050211176842, 1.4288050211176841]\""}, {"return": "\"[1.8576100422353683, 3.2864150633530524, 2.1423899577646313]\""}], "parsed_inputs": [[["c_coor", "[0, 0, 0]"], ["o_coor", "[1, 1, 1]"]], [["c_coor", "[1, 2, 3]"], ["o_coor", "[4, 5, 6]"]], [["c_coor", "[-1, 0, 0]"], ["o_coor", "[0, 1, 0]"]], [["c_coor", "[0.5, 0.5, 0.5]"], ["o_coor", "[1.5, 1.5, 1.5]"]], [["c_coor", "[10, 20, 30]"], ["o_coor", "[40, 50, 60]"]], [["c_coor", "[-5, -5, -5]"], ["o_coor", "[5, 5, 5]"]], [["c_coor", "[0.1, 0.2, 0.3]"], ["o_coor", "[0.4, 0.5, 0.6]"]], [["c_coor", "[100, 200, 300]"], ["o_coor", "[400, 500, 600]"]], [["c_coor", "[-10, -20, -30]"], ["o_coor", "[-40, -50, -60]"]], [["c_coor", "[3.14, 2.71, 1.62]"], ["o_coor", "[6.28, 5.43, 4.58]"]]], "exec_code": "def get_centerofmass_CO(c_coor, o_coor):\n    \"\"\"Return the center of mass of CO\"\"\"\n    c_mass = 12.0107\n    o_mass = 15.999\n    x_com = (c_mass * c_coor[0] + o_mass * o_coor[0]) / (c_mass + o_mass)\n    y_com = (c_mass * c_coor[1] + o_mass * o_coor[1]) / (c_mass + o_mass)\n    z_com = (c_mass * c_coor[2] + o_mass * o_coor[2]) / (c_mass + o_mass)\n    return [x_com, y_com, z_com]\n", "output": "The function is:\n\n```python\ndef get_centerofmass_CO(c_coor, o_coor):\n    \"\"\"Return the center of mass of CO\"\"\"\n    c_mass = 12.0107\n    o_mass = 15.999\n    x_com = (c_mass * c_coor[0] + o_mass * o_coor[0]) / (c_mass + o_mass)\n    y_com = (c_mass * c_coor[1] + o_mass * o_coor[1]) / (c_mass + o_mass)\n    z_com = (c_mass * c_coor[2] + o_mass * o_coor[2]) / (c_mass + o_mass)\n    return [x_com, y_com, z_com]\n\n```", "choosed_example_idx": [7, 4, 3, 6, 2, 9, 1, 0, 8], "prompt": "Input: dict(c_coor=[100, 200, 300], o_coor=[400, 500, 600]), Output: \"[271.3584936646947, 371.35849366469466, 471.3584936646947]\"\nInput: dict(c_coor=[10, 20, 30], o_coor=[40, 50, 60]), Output: \"[27.135849366469472, 37.13584936646947, 47.135849366469465]\"\nInput: dict(c_coor=[0.5, 0.5, 0.5], o_coor=[1.5, 1.5, 1.5]), Output: \"[1.0711949788823156, 1.0711949788823156, 1.0711949788823156]\"\nInput: dict(c_coor=[0.1, 0.2, 0.3], o_coor=[0.4, 0.5, 0.6]), Output: \"[0.2713584936646947, 0.3713584936646947, 0.4713584936646947]\"\nInput: dict(c_coor=[-1, 0, 0], o_coor=[0, 1, 0]), Output: \"[-0.4288050211176842, 0.5711949788823157, 0.0]\"\nInput: dict(c_coor=[3.14, 2.71, 1.62], o_coor=[6.28, 5.43, 4.58]), Output: \"[4.933552233690471, 4.263650342559898, 3.3107371374916545]\"\nInput: dict(c_coor=[1, 2, 3], o_coor=[4, 5, 6]), Output: \"[2.713584936646947, 3.713584936646947, 4.713584936646947]\"\nInput: dict(c_coor=[0, 0, 0], o_coor=[1, 1, 1]), Output: \"[0.5711949788823157, 0.5711949788823157, 0.5711949788823157]\"\nInput: dict(c_coor=[-10, -20, -30], o_coor=[-40, -50, -60]), Output: \"[-27.135849366469472, -37.13584936646947, -47.135849366469465]\"\n\nFunction: get_centerofmass_CO\nWrite a function that generates the output from the input.\n\n\n", "id": "517eb9d7128a78ca7a99b88392d6c1e9441a6004_0"}
{"example_str": "examples = [\n    dict(params={'min_child_weight': '1', 'max_depth': '3'}),\n    dict(params={'min_child_weight': '5', 'max_depth': '7'}),\n    dict(params={'min_child_weight': '10', 'max_depth': '15'}),\n    dict(params={'min_child_weight': '20', 'max_depth': '30'}),\n    dict(params={'min_child_weight': '1', 'max_depth': '5', 'other_key': 'other_value'}),\n    dict(params={'min_child_weight': '3', 'max_depth': '7', 'another_key': 'another_value'}),\n    dict(params={'min_child_weight': '5', 'max_depth': '10', 'yet_another_key': 'yet_another_value'}),\n    dict(params={'min_child_weight': '7', 'max_depth': '15', 'foo': 'bar'}),\n    dict(params={'min_child_weight': '10', 'max_depth': '20', 'baz': 'qux'}),\n    dict(params={'min_child_weight': '15', 'max_depth': '30', 'quux': 'corge'}),\n]\nexamples += [\n    dict(params={'min_child_weight': '2', 'max_depth': '3'}),\n    dict(params={'min_child_weight': 5, 'max_depth': 10}),\n    dict(params={'min_child_weight': '7', 'max_depth': '8', 'learning_rate': 0.1}),\n    dict(params={'min_child_weight': 1, 'max_depth': 4, 'n_estimators': 100}),\n    dict(params={'min_child_weight': '0', 'max_depth': '5', 'subsample': 0.8}),\n    dict(params={'min_child_weight': 3.5, 'max_depth': 6.7}),\n    dict(params={'min_child_weight': '9', 'max_depth': '11', 'gamma': 0.3}),\n    dict(params={'min_child_weight': 10, 'max_depth': 15, 'colsample_bytree': 0.5}),\n    dict(params={'min_child_weight': '4', 'max_depth': '7', 'scale_pos_weight': 1}),\n    dict(params={'min_child_weight': 2, 'max_depth': 3, 'booster': 'gbtree'})\n]", "code": "def params_append(params):\n    \"\"\"\n\n    :param params:\n    :return:\n    \"\"\"\n    params['objective'] = 'reg:squarederror'\n    params['eval_metric'] = 'rmse'\n    params['min_child_weight'] = int(params['min_child_weight'])\n    params['max_depth'] = int(params['max_depth'])\n    return params\n", "func_name": "params_append", "exec_status": true, "example_inputs": ["\"{'params': {'min_child_weight': '1', 'max_depth': '3'}}\"", "\"{'params': {'min_child_weight': '5', 'max_depth': '7'}}\"", "\"{'params': {'min_child_weight': '10', 'max_depth': '15'}}\"", "\"{'params': {'min_child_weight': '20', 'max_depth': '30'}}\"", "\"{'params': {'min_child_weight': '1', 'max_depth': '5', 'other_key': 'other_value'}}\"", "\"{'params': {'min_child_weight': '3', 'max_depth': '7', 'another_key': 'another_value'}}\"", "\"{'params': {'min_child_weight': '5', 'max_depth': '10', 'yet_another_key': 'yet_another_value'}}\"", "\"{'params': {'min_child_weight': '7', 'max_depth': '15', 'foo': 'bar'}}\"", "\"{'params': {'min_child_weight': '10', 'max_depth': '20', 'baz': 'qux'}}\"", "\"{'params': {'min_child_weight': '15', 'max_depth': '30', 'quux': 'corge'}}\""], "example_outputs": [{"return": "\"{'min_child_weight': 1, 'max_depth': 3, 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\""}, {"return": "\"{'min_child_weight': 5, 'max_depth': 7, 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\""}, {"return": "\"{'min_child_weight': 10, 'max_depth': 15, 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\""}, {"return": "\"{'min_child_weight': 20, 'max_depth': 30, 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\""}, {"return": "\"{'min_child_weight': 1, 'max_depth': 5, 'other_key': 'other_value', 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\""}, {"return": "\"{'min_child_weight': 3, 'max_depth': 7, 'another_key': 'another_value', 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\""}, {"return": "\"{'min_child_weight': 5, 'max_depth': 10, 'yet_another_key': 'yet_another_value', 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\""}, {"return": "\"{'min_child_weight': 7, 'max_depth': 15, 'foo': 'bar', 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\""}, {"return": "\"{'min_child_weight': 10, 'max_depth': 20, 'baz': 'qux', 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\""}, {"return": "\"{'min_child_weight': 15, 'max_depth': 30, 'quux': 'corge', 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\""}, {"return": "\"{'min_child_weight': 2, 'max_depth': 3, 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\""}, {"return": "\"{'min_child_weight': 5, 'max_depth': 10, 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\""}, {"return": "\"{'min_child_weight': 7, 'max_depth': 8, 'learning_rate': 0.1, 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\""}, {"return": "\"{'min_child_weight': 1, 'max_depth': 4, 'n_estimators': 100, 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\""}, {"return": "\"{'min_child_weight': 0, 'max_depth': 5, 'subsample': 0.8, 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\""}, {"return": "\"{'min_child_weight': 3, 'max_depth': 6, 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\""}, {"return": "\"{'min_child_weight': 9, 'max_depth': 11, 'gamma': 0.3, 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\""}, {"return": "\"{'min_child_weight': 10, 'max_depth': 15, 'colsample_bytree': 0.5, 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\""}, {"return": "\"{'min_child_weight': 4, 'max_depth': 7, 'scale_pos_weight': 1, 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\""}, {"return": "\"{'min_child_weight': 2, 'max_depth': 3, 'booster': 'gbtree', 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\""}], "parsed_inputs": [[["params", "{'min_child_weight': '1', 'max_depth': '3'}"]], [["params", "{'min_child_weight': '5', 'max_depth': '7'}"]], [["params", "{'min_child_weight': '10', 'max_depth': '15'}"]], [["params", "{'min_child_weight': '20', 'max_depth': '30'}"]], [["params", "{'min_child_weight': '1', 'max_depth': '5', 'other_key': 'other_value'}"]], [["params", "{'min_child_weight': '3', 'max_depth': '7', 'another_key': 'another_value'}"]], [["params", "{'min_child_weight': '5', 'max_depth': '10', 'yet_another_key': 'yet_another_value'}"]], [["params", "{'min_child_weight': '7', 'max_depth': '15', 'foo': 'bar'}"]], [["params", "{'min_child_weight': '10', 'max_depth': '20', 'baz': 'qux'}"]], [["params", "{'min_child_weight': '15', 'max_depth': '30', 'quux': 'corge'}"]]], "exec_code": "def params_append(params):\n    \"\"\"\n\n    :param params:\n    :return:\n    \"\"\"\n    params['objective'] = 'reg:squarederror'\n    params['eval_metric'] = 'rmse'\n    params['min_child_weight'] = int(params['min_child_weight'])\n    params['max_depth'] = int(params['max_depth'])\n    return params\n", "output": "The function is:\n\n```python\ndef params_append(params):\n    \"\"\"\n\n    :param params:\n    :return:\n    \"\"\"\n    params['objective'] = 'reg:squarederror'\n    params['eval_metric'] = 'rmse'\n    params['min_child_weight'] = int(params['min_child_weight'])\n    params['max_depth'] = int(params['max_depth'])\n    return params\n\n```", "choosed_example_idx": [0, 7, 5, 6, 4, 8, 3], "prompt": "Function: params_append\n\n\nInput: dict(params={'min_child_weight': '1', 'max_depth': '3'}), Output: \"{'min_child_weight': 1, 'max_depth': 3, 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\"\nInput: dict(params={'min_child_weight': '7', 'max_depth': '15', 'foo': 'bar'}), Output: \"{'min_child_weight': 7, 'max_depth': 15, 'foo': 'bar', 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\"\nInput: dict(params={'min_child_weight': '3', 'max_depth': '7', 'another_key': 'another_value'}), Output: \"{'min_child_weight': 3, 'max_depth': 7, 'another_key': 'another_value', 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\"\nInput: dict(params={'min_child_weight': '5', 'max_depth': '10', 'yet_another_key': 'yet_another_value'}), Output: \"{'min_child_weight': 5, 'max_depth': 10, 'yet_another_key': 'yet_another_value', 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\"\nInput: dict(params={'min_child_weight': '1', 'max_depth': '5', 'other_key': 'other_value'}), Output: \"{'min_child_weight': 1, 'max_depth': 5, 'other_key': 'other_value', 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\"\nInput: dict(params={'min_child_weight': '10', 'max_depth': '20', 'baz': 'qux'}), Output: \"{'min_child_weight': 10, 'max_depth': 20, 'baz': 'qux', 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\"\nInput: dict(params={'min_child_weight': '20', 'max_depth': '30'}), Output: \"{'min_child_weight': 20, 'max_depth': 30, 'objective': 'reg:squarederror', 'eval_metric': 'rmse'}\"\n\nWrite a function that generates the output from the input.\n\n", "id": "6a5aa2cb85a0c0885f9921eebc484150083361d6_0"}
{"example_str": "examples = [\n    dict(num=[1, 2, 0, 0], k=34),\n    dict(num=[2, 7, 4], k=181),\n    dict(num=[2, 1, 5], k=806),\n    dict(num=[1, 2, 3, 4, 5], k=100),\n    dict(num=[9, 9, 9, 9, 9], k=1),\n    dict(num=[1, 2, 3], k=0),\n    dict(num=[0], k=23),\n    dict(num=[9, 9], k=1),\n    dict(num=[1, 0, 2, 0, 0], k=34),\n    dict(num=[1, 2, 6, 3, 0, 7, 1, 7, 1, 9, 7, 5], k=5656),\n]\nexamples += [\n    dict(num=[1, 2, 3], k=987),\n    dict(num=[9, 9, 9], k=1),\n    dict(num=[0], k=0),\n    dict(num=[2, 3, 4, 5], k=5678),\n    dict(num=[5, 6, 7], k=4321),\n    dict(num=[0], k=999),\n    dict(num=[9, 0, 1, 2], k=88),\n    dict(num=[1], k=12345),\n    dict(num=[4, 5, 6, 7], k=3000),\n    dict(num=[8, 0, 0, 8], k=1192)\n]\nexamples += [\n    dict(num=[1, 2, 3], k=987),\n    dict(num=[9, 9, 9], k=1),\n    dict(num=[0], k=0),\n    dict(num=[2, 3, 4, 5], k=5555),\n    dict(num=[9], k=1991),\n    dict(num=[1, 0, 0, 0], k=9999),\n    dict(num=[4, 5, 6], k=3000),\n    dict(num=[1], k=12345),\n    dict(num=[0, 0, 1], k=99),\n    dict(num=[8, 7, 6, 5], k=4321)\n]", "code": "def addToArrayForm3(num, k):\n    strNum = ''\n    divmod\n    for i in num:\n        strNum += str(i)\n    result = list(str(int(strNum) + k))\n    return [int(i) for i in result]\n", "func_name": "addToArrayForm3", "exec_status": true, "example_inputs": ["\"{'num': [1, 2, 0, 0], 'k': 34}\"", "\"{'num': [2, 7, 4], 'k': 181}\"", "\"{'num': [2, 1, 5], 'k': 806}\"", "\"{'num': [1, 2, 3, 4, 5], 'k': 100}\"", "\"{'num': [9, 9, 9, 9, 9], 'k': 1}\"", "\"{'num': [1, 2, 3], 'k': 0}\"", "\"{'num': [0], 'k': 23}\"", "\"{'num': [9, 9], 'k': 1}\"", "\"{'num': [1, 0, 2, 0, 0], 'k': 34}\"", "\"{'num': [1, 2, 6, 3, 0, 7, 1, 7, 1, 9, 7, 5], 'k': 5656}\""], "example_outputs": [{"return": "\"[1, 2, 3, 4]\""}, {"return": "\"[4, 5, 5]\""}, {"return": "\"[1, 0, 2, 1]\""}, {"return": "\"[1, 2, 4, 4, 5]\""}, {"return": "\"[1, 0, 0, 0, 0, 0]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[2, 3]\""}, {"return": "\"[1, 0, 0]\""}, {"return": "\"[1, 0, 2, 3, 4]\""}, {"return": "\"[1, 2, 6, 3, 0, 7, 1, 7, 7, 6, 3, 1]\""}, {"return": "\"[1, 1, 1, 0]\""}, {"return": "\"[1, 0, 0, 0]\""}, {"return": "\"[0]\""}, {"return": "\"[8, 0, 2, 3]\""}, {"return": "\"[4, 8, 8, 8]\""}, {"return": "\"[9, 9, 9]\""}, {"return": "\"[9, 1, 0, 0]\""}, {"return": "\"[1, 2, 3, 4, 6]\""}, {"return": "\"[7, 5, 6, 7]\""}, {"return": "\"[9, 2, 0, 0]\""}, {"return": "\"[1, 1, 1, 0]\""}, {"return": "\"[1, 0, 0, 0]\""}, {"return": "\"[0]\""}, {"return": "\"[7, 9, 0, 0]\""}, {"return": "\"[2, 0, 0, 0]\""}, {"return": "\"[1, 0, 9, 9, 9]\""}, {"return": "\"[3, 4, 5, 6]\""}, {"return": "\"[1, 2, 3, 4, 6]\""}, {"return": "\"[1, 0, 0]\""}, {"return": "\"[1, 3, 0, 8, 6]\""}], "parsed_inputs": [[["num", "[1, 2, 0, 0]"], ["k", "34"]], [["num", "[2, 7, 4]"], ["k", "181"]], [["num", "[2, 1, 5]"], ["k", "806"]], [["num", "[1, 2, 3, 4, 5]"], ["k", "100"]], [["num", "[9, 9, 9, 9, 9]"], ["k", "1"]], [["num", "[1, 2, 3]"], ["k", "0"]], [["num", "[0]"], ["k", "23"]], [["num", "[9, 9]"], ["k", "1"]], [["num", "[1, 0, 2, 0, 0]"], ["k", "34"]], [["num", "[1, 2, 6, 3, 0, 7, 1, 7, 1, 9, 7, 5]"], ["k", "5656"]]], "exec_code": "def addToArrayForm3(num, k):\n    strNum = ''\n    divmod\n    for i in num:\n        strNum += str(i)\n    result = list(str(int(strNum) + k))\n    return [int(i) for i in result]\n", "output": "The function is:\n\n```python\ndef addToArrayForm3(num, k):\n    strNum = ''\n    divmod\n    for i in num:\n        strNum += str(i)\n    result = list(str(int(strNum) + k))\n    return [int(i) for i in result]\n\n```", "choosed_example_idx": [8, 0, 3, 9], "prompt": "Input: dict(num=[1, 0, 2, 0, 0], k=34), Output: \"[1, 0, 2, 3, 4]\"\nInput: dict(num=[1, 2, 0, 0], k=34), Output: \"[1, 2, 3, 4]\"\nInput: dict(num=[1, 2, 3, 4, 5], k=100), Output: \"[1, 2, 4, 4, 5]\"\nInput: dict(num=[1, 2, 6, 3, 0, 7, 1, 7, 1, 9, 7, 5], k=5656), Output: \"[1, 2, 6, 3, 0, 7, 1, 7, 7, 6, 3, 1]\"\n\nWrite a function that generates the output from the input.\n\nFunction: addToArrayForm3\n\n", "id": "3f032ad085bea0232e7a9eddeae90a8fbf61bacf_0"}
{"example_str": "examples = [\n    dict(filenames=['file1.txt', 'bckgrnd-file1.txt', 'file2.txt', 'bckgrnd-file2.txt']),\n    dict(filenames=['spe-file1.txt', 'bckgrnd-spe-file1.txt', 'spe-file2.txt']),\n    dict(filenames=['file1.txt', 'file2.txt', 'file3.txt', 'bckgrnd-file1.txt', 'bckgrnd-file2.txt', 'bckgrnd-file3.txt']),\n    dict(filenames=['bckgrnd-file1.txt', 'bckgrnd-file2.txt', 'file1.txt', 'file2.txt']),\n    dict(filenames=['file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', 'bckgrnd-file1.txt', 'bckgrnd-file2.txt']),\n    dict(filenames=['spe-file1.txt', 'spe-file2.txt', 'spe-file3.txt', 'bckgrnd-spe-file1.txt', 'bckgrnd-spe-file2.txt', 'bckgrnd-spe-file3.txt']),\n    dict(filenames=['file1.txt', 'bckgrnd-file1.txt']),\n    dict(filenames=['file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', 'file5.txt', 'bckgrnd-file1.txt', 'bckgrnd-file2.txt', 'bckgrnd-file3.txt', 'bckgrnd-file4.txt', 'bckgrnd-file5.txt']),\n    dict(filenames=['spe-file1.txt', 'spe-file2.txt', 'spe-file3.txt', 'spe-file4.txt', 'spe-file5.txt', 'bckgrnd-spe-file1.txt', 'bckgrnd-spe-file2.txt', 'bckgrnd-spe-file3.txt', 'bckgrnd-spe-file4.txt', 'bckgrnd-spe-file5.txt']),\n    dict(filenames=['file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', 'file5.txt', 'file6.txt', 'bckgrnd-file1.txt', 'bckgrnd-file2.txt', 'bckgrnd-file3.txt', 'bckgrnd-file4.txt', 'bckgrnd-file5.txt', 'bckgrnd-file6.txt']),\n]\nexamples += [\n    dict(filenames=[\"file1-spe_a1.txt\", \"file1-bckgrnd_a1_b.txt\", \"file2-spe_a2.txt\", \"file2-bckgrnd_a2_b.txt\"]),\n    dict(filenames=[\"sample1-spe_x1.dat\", \"sample1-bckgrnd_x1_y.dat\", \"sample2-spe_x2.dat\"]),\n    dict(filenames=[\"test1-spe_z1.out\", \"test1-bckgrnd_z1_z.out\", \"test2-spe_z2.out\", \"test3-spe_z3.out\"]),\n    dict(filenames=[\"experiment1-spe_m1.csv\", \"experiment1-bckgrnd_m1_n.csv\", \"experiment2-spe_m2.csv\"]),\n    dict(filenames=[\"data1-spe_v1.log\", \"data1-bckgrnd_v1_w.log\", \"data2-spe_v2.log\", \"data3-bckgrnd_v3.log\"]),\n    dict(filenames=[\"obs1-spe_t1.info\", \"obs1-bckgrnd_t1_u.info\", \"obs2-spe_t2.info\"]),\n    dict(filenames=[\"measure1-spe_p1.txt\", \"measure1-bckgrnd_p1_q.txt\", \"measure2-spe_p2.txt\"]),\n    dict(filenames=[\"result1-spe_s1.doc\", \"result1-bckgrnd_s1_r.doc\", \"result2-spe_s2.doc\", \"result3-spe_s3.doc\"]),\n    dict(filenames=[\"calc1-spe_d1.xml\", \"calc1-bckgrnd_d1_e.xml\", \"calc2-spe_d2.xml\"]),\n    dict(filenames=[\"analysis1-spe_f1.json\", \"analysis1-bckgrnd_f1_g.json\", \"analysis2-spe_f2.json\", \"analysis3-bckgrnd_f3.json\"])\n]\nexamples += [\n    dict(filenames=[\"file1-spe_a1.txt\", \"file1-bckgrnd_a1_b.txt\", \"file2-spe_a2.txt\", \"file2-bckgrnd_a2_b.txt\"]),\n    dict(filenames=[\"test-spe_x1.dat\", \"test-bckgrnd_x1_y.dat\"]),\n    dict(filenames=[\"sample1-spe_z.txt\", \"sample1-bckgrnd_z_y.txt\", \"sample2-spe_y.txt\"]),\n    dict(filenames=[\"experiment1-spe_a.txt\", \"experiment1-bckgrnd_a_b.txt\", \"experiment2-spe_b.txt\"]),\n    dict(filenames=[\"data1-spe_v1.doc\", \"data1-bckgrnd_v1_w.doc\", \"data2-spe_v2.doc\", \"data2-bckgrnd_v2_w.doc\"]),\n    dict(filenames=[\"obs1-spe_m1.csv\", \"obs1-bckgrnd_m1_n.csv\", \"obs2-spe_m2.csv\"]),\n    dict(filenames=[\"set1-spe_t1.pdf\", \"set1-bckgrnd_t1_u.pdf\", \"set2-spe_t2.pdf\"]),\n    dict(filenames=[\"run1-spe_q1.jpg\", \"run1-bckgrnd_q1_r.jpg\", \"run2-spe_q2.jpg\", \"run2-bckgrnd_q2_r.jpg\"]),\n    dict(filenames=[\"batch1-spe_f1.png\", \"batch1-bckgrnd_f1_g.png\", \"batch2-spe_f2.png\"]),\n    dict(filenames=[\"group1-spe_d1.bmp\", \"group1-bckgrnd_d1_e.bmp\", \"group2-spe_d2.bmp\", \"group2-bckgrnd_d2_e.bmp\"])\n]", "code": "def GetBckgrnds(filenames):\n    \"\"\"returns list of the bckgrnd file corresponding to each spefile.\n    (len(bckgrnds) = num spe files.)\n    \"\"\"\n    fnames = []\n    bgnames = []\n    bg_dct = dict()\n    for i in range(len(filenames)):\n        fname = filenames[i]\n        if 'bckgrnd' in fname:\n            bg = fname\n            bgnames.append(bg)\n            bglst = bg.split('-')\n            bgnm = bglst[1].split('_')\n            bglst[1] = '_'.join(bgnm[:2])\n            bgbase = '-'.join(bglst[:2])\n            if bgbase in bg_dct:\n                pass\n            else:\n                bg_dct[bgbase] = bg\n        else:\n            fnames.append(fname)\n    bckgrnds = []\n    for j in range(len(fnames)):\n        fname = fnames[j]\n        lst = fname.split('-')\n        nm = lst[1].split('_')\n        if len(nm) <= 3:\n            y = nm[-1].split('.')\n            nm[-1] = y[0]\n        lst[1] = '_'.join(nm[:2])\n        base = '-'.join(lst[:2])\n        bg = bg_dct.get(base)\n        if bg == None:\n            print('No bg file for ', fname, '?')\n        else:\n            bckgrnds.append(bg)\n    print('num fnames (', len(fnames), ') should equal num bg (', len(\n        bckgrnds), ')')\n    return fnames, bckgrnds\n", "func_name": "GetBckgrnds", "exec_status": true, "example_inputs": ["\"{'filenames': ['file1.txt', 'bckgrnd-file1.txt', 'file2.txt', 'bckgrnd-file2.txt']}\"", "\"{'filenames': ['spe-file1.txt', 'bckgrnd-spe-file1.txt', 'spe-file2.txt']}\"", "\"{'filenames': ['file1.txt', 'file2.txt', 'file3.txt', 'bckgrnd-file1.txt', 'bckgrnd-file2.txt', 'bckgrnd-file3.txt']}\"", "\"{'filenames': ['bckgrnd-file1.txt', 'bckgrnd-file2.txt', 'file1.txt', 'file2.txt']}\"", "\"{'filenames': ['file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', 'bckgrnd-file1.txt', 'bckgrnd-file2.txt']}\"", "\"{'filenames': ['spe-file1.txt', 'spe-file2.txt', 'spe-file3.txt', 'bckgrnd-spe-file1.txt', 'bckgrnd-spe-file2.txt', 'bckgrnd-spe-file3.txt']}\"", "\"{'filenames': ['file1.txt', 'bckgrnd-file1.txt']}\"", "\"{'filenames': ['file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', 'file5.txt', 'bckgrnd-file1.txt', 'bckgrnd-file2.txt', 'bckgrnd-file3.txt', 'bckgrnd-file4.txt', 'bckgrnd-file5.txt']}\"", "\"{'filenames': ['spe-file1.txt', 'spe-file2.txt', 'spe-file3.txt', 'spe-file4.txt', 'spe-file5.txt', 'bckgrnd-spe-file1.txt', 'bckgrnd-spe-file2.txt', 'bckgrnd-spe-file3.txt', 'bckgrnd-spe-file4.txt', 'bckgrnd-spe-file5.txt']}\"", "\"{'filenames': ['file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', 'file5.txt', 'file6.txt', 'bckgrnd-file1.txt', 'bckgrnd-file2.txt', 'bckgrnd-file3.txt', 'bckgrnd-file4.txt', 'bckgrnd-file5.txt', 'bckgrnd-file6.txt']}\""], "example_outputs": [{"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"return": "\"(['spe-file1.txt', 'spe-file2.txt'], [])\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"return": "\"(['spe-file1.txt', 'spe-file2.txt', 'spe-file3.txt'], [])\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"return": "\"(['spe-file1.txt', 'spe-file2.txt', 'spe-file3.txt', 'spe-file4.txt', 'spe-file5.txt'], [])\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"return": "\"(['file1-spe_a1.txt', 'file2-spe_a2.txt'], [])\""}, {"return": "\"(['sample1-spe_x1.dat', 'sample2-spe_x2.dat'], [])\""}, {"return": "\"(['test1-spe_z1.out', 'test2-spe_z2.out', 'test3-spe_z3.out'], [])\""}, {"return": "\"(['experiment1-spe_m1.csv', 'experiment2-spe_m2.csv'], [])\""}, {"return": "\"(['data1-spe_v1.log', 'data2-spe_v2.log'], [])\""}, {"return": "\"(['obs1-spe_t1.info', 'obs2-spe_t2.info'], [])\""}, {"return": "\"(['measure1-spe_p1.txt', 'measure2-spe_p2.txt'], [])\""}, {"return": "\"(['result1-spe_s1.doc', 'result2-spe_s2.doc', 'result3-spe_s3.doc'], [])\""}, {"return": "\"(['calc1-spe_d1.xml', 'calc2-spe_d2.xml'], [])\""}, {"return": "\"(['analysis1-spe_f1.json', 'analysis2-spe_f2.json'], [])\""}, {"return": "\"(['file1-spe_a1.txt', 'file2-spe_a2.txt'], [])\""}, {"return": "\"(['test-spe_x1.dat'], [])\""}, {"return": "\"(['sample1-spe_z.txt', 'sample2-spe_y.txt'], [])\""}, {"return": "\"(['experiment1-spe_a.txt', 'experiment2-spe_b.txt'], [])\""}, {"return": "\"(['data1-spe_v1.doc', 'data2-spe_v2.doc'], [])\""}, {"return": "\"(['obs1-spe_m1.csv', 'obs2-spe_m2.csv'], [])\""}, {"return": "\"(['set1-spe_t1.pdf', 'set2-spe_t2.pdf'], [])\""}, {"return": "\"(['run1-spe_q1.jpg', 'run2-spe_q2.jpg'], [])\""}, {"return": "\"(['batch1-spe_f1.png', 'batch2-spe_f2.png'], [])\""}, {"return": "\"(['group1-spe_d1.bmp', 'group2-spe_d2.bmp'], [])\""}], "parsed_inputs": [[["filenames", "['file1.txt', 'bckgrnd-file1.txt', 'file2.txt', 'bckgrnd-file2.txt']"]], [["filenames", "['spe-file1.txt', 'bckgrnd-spe-file1.txt', 'spe-file2.txt']"]], [["filenames", "['file1.txt', 'file2.txt', 'file3.txt', 'bckgrnd-file1.txt', 'bckgrnd-file2.txt', 'bckgrnd-file3.txt']"]], [["filenames", "['bckgrnd-file1.txt', 'bckgrnd-file2.txt', 'file1.txt', 'file2.txt']"]], [["filenames", "['file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', 'bckgrnd-file1.txt', 'bckgrnd-file2.txt']"]], [["filenames", "['spe-file1.txt', 'spe-file2.txt', 'spe-file3.txt', 'bckgrnd-spe-file1.txt', 'bckgrnd-spe-file2.txt', 'bckgrnd-spe-file3.txt']"]], [["filenames", "['file1.txt', 'bckgrnd-file1.txt']"]], [["filenames", "['file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', 'file5.txt', 'bckgrnd-file1.txt', 'bckgrnd-file2.txt', 'bckgrnd-file3.txt', 'bckgrnd-file4.txt', 'bckgrnd-file5.txt']"]], [["filenames", "['spe-file1.txt', 'spe-file2.txt', 'spe-file3.txt', 'spe-file4.txt', 'spe-file5.txt', 'bckgrnd-spe-file1.txt', 'bckgrnd-spe-file2.txt', 'bckgrnd-spe-file3.txt', 'bckgrnd-spe-file4.txt', 'bckgrnd-spe-file5.txt']"]], [["filenames", "['file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', 'file5.txt', 'file6.txt', 'bckgrnd-file1.txt', 'bckgrnd-file2.txt', 'bckgrnd-file3.txt', 'bckgrnd-file4.txt', 'bckgrnd-file5.txt', 'bckgrnd-file6.txt']"]]], "exec_code": "def GetBckgrnds(filenames):\n    \"\"\"returns list of the bckgrnd file corresponding to each spefile.\n    (len(bckgrnds) = num spe files.)\n    \"\"\"\n    fnames = []\n    bgnames = []\n    bg_dct = dict()\n    for i in range(len(filenames)):\n        fname = filenames[i]\n        if 'bckgrnd' in fname:\n            bg = fname\n            bgnames.append(bg)\n            bglst = bg.split('-')\n            bgnm = bglst[1].split('_')\n            bglst[1] = '_'.join(bgnm[:2])\n            bgbase = '-'.join(bglst[:2])\n            if bgbase in bg_dct:\n                pass\n            else:\n                bg_dct[bgbase] = bg\n        else:\n            fnames.append(fname)\n    bckgrnds = []\n    for j in range(len(fnames)):\n        fname = fnames[j]\n        lst = fname.split('-')\n        nm = lst[1].split('_')\n        if len(nm) <= 3:\n            y = nm[-1].split('.')\n            nm[-1] = y[0]\n        lst[1] = '_'.join(nm[:2])\n        base = '-'.join(lst[:2])\n        bg = bg_dct.get(base)\n        if bg == None:\n            print('No bg file for ', fname, '?')\n        else:\n            bckgrnds.append(bg)\n    print('num fnames (', len(fnames), ') should equal num bg (', len(\n        bckgrnds), ')')\n    return fnames, bckgrnds\n", "output": "The function is:\n\n```python\ndef GetBckgrnds(filenames):\n    \"\"\"returns list of the bckgrnd file corresponding to each spefile.\n    (len(bckgrnds) = num spe files.)\n    \"\"\"\n    fnames = []\n    bgnames = []\n    bg_dct = dict()\n    for i in range(len(filenames)):\n        fname = filenames[i]\n        if 'bckgrnd' in fname:\n            bg = fname\n            bgnames.append(bg)\n            bglst = bg.split('-')\n            bgnm = bglst[1].split('_')\n            bglst[1] = '_'.join(bgnm[:2])\n            bgbase = '-'.join(bglst[:2])\n            if bgbase in bg_dct:\n                pass\n            else:\n                bg_dct[bgbase] = bg\n        else:\n            fnames.append(fname)\n    bckgrnds = []\n    for j in range(len(fnames)):\n        fname = fnames[j]\n        lst = fname.split('-')\n        nm = lst[1].split('_')\n        if len(nm) <= 3:\n            y = nm[-1].split('.')\n            nm[-1] = y[0]\n        lst[1] = '_'.join(nm[:2])\n        base = '-'.join(lst[:2])\n        bg = bg_dct.get(base)\n        if bg == None:\n            print('No bg file for ', fname, '?')\n        else:\n            bckgrnds.append(bg)\n    print('num fnames (', len(fnames), ') should equal num bg (', len(\n        bckgrnds), ')')\n    return fnames, bckgrnds\n\n```", "choosed_example_idx": [3, 2, 8, 4, 9, 7], "prompt": "Input: dict(filenames=['bckgrnd-file1.txt', 'bckgrnd-file2.txt', 'file1.txt', 'file2.txt']), Output: \"<class 'IndexError'>: list index out of range\"\nInput: dict(filenames=['file1.txt', 'file2.txt', 'file3.txt', 'bckgrnd-file1.txt', 'bckgrnd-file2.txt', 'bckgrnd-file3.txt']), Output: \"<class 'IndexError'>: list index out of range\"\nInput: dict(filenames=['spe-file1.txt', 'spe-file2.txt', 'spe-file3.txt', 'spe-file4.txt', 'spe-file5.txt', 'bckgrnd-spe-file1.txt', 'bckgrnd-spe-file2.txt', 'bckgrnd-spe-file3.txt', 'bckgrnd-spe-file4.txt', 'bckgrnd-spe-file5.txt']), Output: \"(['spe-file1.txt', 'spe-file2.txt', 'spe-file3.txt', 'spe-file4.txt', 'spe-file5.txt'], [])\"\nInput: dict(filenames=['file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', 'bckgrnd-file1.txt', 'bckgrnd-file2.txt']), Output: \"<class 'IndexError'>: list index out of range\"\nInput: dict(filenames=['file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', 'file5.txt', 'file6.txt', 'bckgrnd-file1.txt', 'bckgrnd-file2.txt', 'bckgrnd-file3.txt', 'bckgrnd-file4.txt', 'bckgrnd-file5.txt', 'bckgrnd-file6.txt']), Output: \"<class 'IndexError'>: list index out of range\"\nInput: dict(filenames=['file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', 'file5.txt', 'bckgrnd-file1.txt', 'bckgrnd-file2.txt', 'bckgrnd-file3.txt', 'bckgrnd-file4.txt', 'bckgrnd-file5.txt']), Output: \"<class 'IndexError'>: list index out of range\"\n\nWrite a function that generates the output from the input.\nFunction: GetBckgrnds\n", "id": "67d021b45d65ecdb92f18c5620805fe13f00691e_0"}
{"example_str": "examples = [\n    dict(l=[5, 2, 8, 1, 9]),\n    dict(l=[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]),\n    dict(l=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),\n    dict(l=[5, 5, 5, 5, 5]),\n    dict(l=[1]),\n    dict(l=[2, 1]),\n    dict(l=[3, 2, 1]),\n    dict(l=[10, 5, 2, 8, 1, 9]),\n    dict(l=[1, 3, 5, 7, 9, 2, 4, 6, 8, 10]),\n    dict(l=[5, 2, 8, 3, 1, 6, 4]),\n    dict(l=[10, 9, 8, 7, 6, 5, 4, 3, 2, 0]),\n]\nexamples += [\n    dict(l=[5, 3, 8, 6, 2]),  # Mixed integers\n    dict(l=[10, 20, 30, 40, 50]),  # Sorted integers\n    dict(l=[50, 40, 30, 20, 10]),  # Reverse sorted integers\n    dict(l=[1]),  # Single element\n    dict(l=[]),  # Empty list\n    dict(l=[-1, -3, -2, -5, -4]),  # Negative integers\n    dict(l=[7, 7, 7, 7, 7]),  # All elements the same\n    dict(l=[2, 1, 2, 1, 2]),  # Repeating elements\n    dict(l=[0, 100, -100, 50, -50]),  # Mix of positive, negative, and zero\n    dict(l=[3.5, 2.1, 4.8, 3.9, 2.2])  # Floating point numbers\n]\nexamples += [\n    dict(l=[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]),\n    dict(l=[10, 20, 30, 40, 50]),\n    dict(l=[50, 40, 30, 20, 10]),\n    dict(l=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),\n    dict(l=[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]),\n    dict(l=[5, 3, 8, 6, 2, 7, 4, 1]),\n    dict(l=[25, 17, 31, 13, 2]),\n    dict(l=[100, 200, 300, 100, 200, 300]),\n    dict(l=[1, 1, 1, 1, 1]),\n    dict(l=[-1, -3, -2, -5, -4])\n]", "code": "def spl(l):\n    pivot = l[0]\n    left = 0\n    right = l.index(l[-1])\n    while left < right:\n        while l[right] > pivot:\n            print('1', right)\n            right = right - 1\n        while left < right and l[left] <= pivot:\n            print('2', left)\n            print('3', right)\n            left = left + 1\n        if left < right:\n            print('Do swap')\n            print('Left:', left, 'right:', right)\n            tmp = l[right]\n            l[right] = l[left]\n            l[left] = tmp\n    pos = right\n    l[0] = l[pos]\n    l[pos] = pivot\n    print('Pivot', pivot)\n    print('After', l)\n    return l\n", "func_name": "spl", "exec_status": true, "example_inputs": ["\"{'l': [5, 2, 8, 1, 9]}\"", "\"{'l': [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]}\"", "\"{'l': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}\"", "\"{'l': [5, 5, 5, 5, 5]}\"", "\"{'l': [1]}\"", "\"{'l': [2, 1]}\"", "\"{'l': [3, 2, 1]}\"", "\"{'l': [10, 5, 2, 8, 1, 9]}\"", "\"{'l': [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]}\"", "\"{'l': [5, 2, 8, 3, 1, 6, 4]}\"", "\"{'l': [10, 9, 8, 7, 6, 5, 4, 3, 2, 0]}\""], "example_outputs": [{"return": "\"[1, 2, 5, 8, 9]\""}, {"return": "\"[1, 9, 8, 7, 6, 5, 4, 3, 2, 10]\""}, {"return": "\"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\""}, {"return": "\"[5, 5, 5, 5, 5]\""}, {"return": "\"[1]\""}, {"return": "\"[1, 2]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[9, 5, 2, 8, 1, 10]\""}, {"return": "\"[1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\""}, {"return": "\"[1, 2, 4, 3, 5, 6, 8]\""}, {"return": "\"[0, 9, 8, 7, 6, 5, 4, 3, 2, 10]\""}, {"return": "\"[2, 3, 5, 6, 8]\""}, {"return": "\"[10, 20, 30, 40, 50]\""}, {"return": "\"[10, 40, 30, 20, 50]\""}, {"return": "\"[1]\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"return": "\"[-4, -3, -2, -5, -1]\""}, {"return": "\"[7, 7, 7, 7, 7]\""}, {"return": "\"[2, 1, 2, 1, 2]\""}, {"return": "\"[-100, -50, 0, 50, 100]\""}, {"return": "\"[2.2, 2.1, 3.5, 3.9, 4.8]\""}, {"return": "\"[1, 1, 3, 4, 5, 9, 2, 6, 5, 3, 5]\""}, {"return": "\"[10, 20, 30, 40, 50]\""}, {"return": "\"[10, 40, 30, 20, 50]\""}, {"return": "\"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\""}, {"return": "\"[1, 9, 8, 7, 6, 5, 4, 3, 2, 10]\""}, {"return": "\"[2, 3, 1, 4, 5, 7, 6, 8]\""}, {"return": "\"[13, 17, 2, 25, 31]\""}, {"return": "\"[100, 200, 300, 100, 200, 300]\""}, {"return": "\"[1, 1, 1, 1, 1]\""}, {"return": "\"[-4, -3, -2, -5, -1]\""}], "parsed_inputs": [[["l", "[5, 2, 8, 1, 9]"]], [["l", "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"]], [["l", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"]], [["l", "[5, 5, 5, 5, 5]"]], [["l", "[1]"]], [["l", "[2, 1]"]], [["l", "[3, 2, 1]"]], [["l", "[10, 5, 2, 8, 1, 9]"]], [["l", "[1, 3, 5, 7, 9, 2, 4, 6, 8, 10]"]], [["l", "[5, 2, 8, 3, 1, 6, 4]"]], [["l", "[10, 9, 8, 7, 6, 5, 4, 3, 2, 0]"]]], "exec_code": "def spl(l):\n    pivot = l[0]\n    left = 0\n    right = l.index(l[-1])\n    while left < right:\n        while l[right] > pivot:\n            print('1', right)\n            right = right - 1\n        while left < right and l[left] <= pivot:\n            print('2', left)\n            print('3', right)\n            left = left + 1\n        if left < right:\n            print('Do swap')\n            print('Left:', left, 'right:', right)\n            tmp = l[right]\n            l[right] = l[left]\n            l[left] = tmp\n    pos = right\n    l[0] = l[pos]\n    l[pos] = pivot\n    print('Pivot', pivot)\n    print('After', l)\n    return l\n", "output": "The function is:\n\n```python\ndef spl(l):\n    pivot = l[0]\n    left = 0\n    right = l.index(l[-1])\n    while left < right:\n        while l[right] > pivot:\n            print('1', right)\n            right = right - 1\n        while left < right and l[left] <= pivot:\n            print('2', left)\n            print('3', right)\n            left = left + 1\n        if left < right:\n            print('Do swap')\n            print('Left:', left, 'right:', right)\n            tmp = l[right]\n            l[right] = l[left]\n            l[left] = tmp\n    pos = right\n    l[0] = l[pos]\n    l[pos] = pivot\n    print('Pivot', pivot)\n    print('After', l)\n    return l\n\n```", "choosed_example_idx": [3, 6, 9, 10, 0, 8, 5, 1, 2, 7], "prompt": "Write a function that generates the output from the input.\nInput: dict(l=[5, 5, 5, 5, 5]), Output: \"[5, 5, 5, 5, 5]\"\nInput: dict(l=[3, 2, 1]), Output: \"[1, 2, 3]\"\nInput: dict(l=[5, 2, 8, 3, 1, 6, 4]), Output: \"[1, 2, 4, 3, 5, 6, 8]\"\nInput: dict(l=[10, 9, 8, 7, 6, 5, 4, 3, 2, 0]), Output: \"[0, 9, 8, 7, 6, 5, 4, 3, 2, 10]\"\nInput: dict(l=[5, 2, 8, 1, 9]), Output: \"[1, 2, 5, 8, 9]\"\nInput: dict(l=[1, 3, 5, 7, 9, 2, 4, 6, 8, 10]), Output: \"[1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\"\nInput: dict(l=[2, 1]), Output: \"[1, 2]\"\nInput: dict(l=[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]), Output: \"[1, 9, 8, 7, 6, 5, 4, 3, 2, 10]\"\nInput: dict(l=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), Output: \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\nInput: dict(l=[10, 5, 2, 8, 1, 9]), Output: \"[9, 5, 2, 8, 1, 10]\"\n\n\n\nFunction: spl\n", "id": "f57a137ea09340095737cef96f7b8c9956b5c93e_0"}
{"example_str": "examples = [\n    dict(n=0),\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n]\nexamples += [\n    dict(n=0),    # Factorial of 0 is 1\n    dict(n=1),    # Factorial of 1 is 1\n    dict(n=2),    # Factorial of 2 is 2\n    dict(n=3),    # Factorial of 3 is 6\n    dict(n=4),    # Factorial of 4 is 24\n    dict(n=5),    # Factorial of 5 is 120\n    dict(n=6),    # Factorial of 6 is 720\n    dict(n=7),    # Factorial of 7 is 5040\n    dict(n=8),    # Factorial of 8 is 40320\n    dict(n=10)    # Factorial of 10 is 3628800\n]\nexamples += [\n    dict(n=0),\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10)\n]", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n", "func_name": "factorial", "exec_status": true, "example_inputs": ["\"{'n': 0}\"", "\"{'n': 1}\"", "\"{'n': 2}\"", "\"{'n': 3}\"", "\"{'n': 4}\"", "\"{'n': 5}\"", "\"{'n': 6}\"", "\"{'n': 7}\"", "\"{'n': 8}\"", "\"{'n': 9}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"6\""}, {"return": "\"24\""}, {"return": "\"120\""}, {"return": "\"720\""}, {"return": "\"5040\""}, {"return": "\"40320\""}, {"return": "\"362880\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"6\""}, {"return": "\"24\""}, {"return": "\"120\""}, {"return": "\"720\""}, {"return": "\"5040\""}, {"return": "\"40320\""}, {"return": "\"3628800\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"6\""}, {"return": "\"24\""}, {"return": "\"120\""}, {"return": "\"720\""}, {"return": "\"5040\""}, {"return": "\"40320\""}, {"return": "\"362880\""}, {"return": "\"3628800\""}], "parsed_inputs": [[["n", "0"]], [["n", "1"]], [["n", "2"]], [["n", "3"]], [["n", "4"]], [["n", "5"]], [["n", "6"]], [["n", "7"]], [["n", "8"]], [["n", "9"]]], "exec_code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n", "output": "The function is:\n\n```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n```", "choosed_example_idx": [6, 8, 2, 7, 4], "prompt": "Write a function that generates the output from the input.\nFunction: factorial\nInput: dict(n=6), Output: \"720\"\nInput: dict(n=8), Output: \"40320\"\nInput: dict(n=2), Output: \"2\"\nInput: dict(n=7), Output: \"5040\"\nInput: dict(n=4), Output: \"24\"\n\n\n\n", "id": "6e2c0e47b2d63f619de764ae465e30e0d0394630_0"}
{"example_str": "examples = [\n    dict(comprimento=10),\n    dict(comprimento=20.5),\n    dict(comprimento=30),\n    dict(comprimento=40.25),\n    dict(comprimento=50),\n    dict(comprimento=60.75),\n    dict(comprimento=70),\n    dict(comprimento=80.125),\n    dict(comprimento=90),\n    dict(comprimento=100.5),\n]\nexamples += [\n    dict(comprimento=3.14),\n    dict(comprimento=6.28),\n    dict(comprimento=9.42),\n    dict(comprimento=12.56),\n    dict(comprimento=15.7),\n    dict(comprimento=18.84),\n    dict(comprimento=21.98),\n    dict(comprimento=25.12),\n    dict(comprimento=28.26),\n    dict(comprimento=31.4)\n]\nexamples += [\n    dict(comprimento=3.14),\n    dict(comprimento=6.28),\n    dict(comprimento=9.42),\n    dict(comprimento=12.56),\n    dict(comprimento=15.7),\n    dict(comprimento=18.84),\n    dict(comprimento=21.98),\n    dict(comprimento=25.12),\n    dict(comprimento=28.26),\n    dict(comprimento=31.4)\n]", "code": "def getCalcularD(comprimento):\n    diametro = comprimento / 3.14\n    return diametro\n", "func_name": "getCalcularD", "exec_status": true, "example_inputs": ["\"{'comprimento': 10}\"", "\"{'comprimento': 20.5}\"", "\"{'comprimento': 30}\"", "\"{'comprimento': 40.25}\"", "\"{'comprimento': 50}\"", "\"{'comprimento': 60.75}\"", "\"{'comprimento': 70}\"", "\"{'comprimento': 80.125}\"", "\"{'comprimento': 90}\"", "\"{'comprimento': 100.5}\""], "example_outputs": [{"return": "\"3.184713375796178\""}, {"return": "\"6.528662420382165\""}, {"return": "\"9.554140127388534\""}, {"return": "\"12.818471337579618\""}, {"return": "\"15.92356687898089\""}, {"return": "\"19.34713375796178\""}, {"return": "\"22.292993630573246\""}, {"return": "\"25.51751592356688\""}, {"return": "\"28.662420382165603\""}, {"return": "\"32.00636942675159\""}, {"return": "\"1.0\""}, {"return": "\"2.0\""}, {"return": "\"3.0\""}, {"return": "\"4.0\""}, {"return": "\"5.0\""}, {"return": "\"6.0\""}, {"return": "\"7.0\""}, {"return": "\"8.0\""}, {"return": "\"9.0\""}, {"return": "\"10.0\""}, {"return": "\"1.0\""}, {"return": "\"2.0\""}, {"return": "\"3.0\""}, {"return": "\"4.0\""}, {"return": "\"5.0\""}, {"return": "\"6.0\""}, {"return": "\"7.0\""}, {"return": "\"8.0\""}, {"return": "\"9.0\""}, {"return": "\"10.0\""}], "parsed_inputs": [[["comprimento", "10"]], [["comprimento", "20.5"]], [["comprimento", "30"]], [["comprimento", "40.25"]], [["comprimento", "50"]], [["comprimento", "60.75"]], [["comprimento", "70"]], [["comprimento", "80.125"]], [["comprimento", "90"]], [["comprimento", "100.5"]]], "exec_code": "def getCalcularD(comprimento):\n    diametro = comprimento / 3.14\n    return diametro\n", "output": "The function is:\n\n```python\ndef getCalcularD(comprimento):\n    diametro = comprimento / 3.14\n    return diametro\n\n```", "choosed_example_idx": [2, 7, 9, 8, 6, 3], "prompt": "Write a function that generates the output from the input.\nFunction: getCalcularD\nInput: dict(comprimento=30), Output: \"9.554140127388534\"\nInput: dict(comprimento=80.125), Output: \"25.51751592356688\"\nInput: dict(comprimento=100.5), Output: \"32.00636942675159\"\nInput: dict(comprimento=90), Output: \"28.662420382165603\"\nInput: dict(comprimento=70), Output: \"22.292993630573246\"\nInput: dict(comprimento=40.25), Output: \"12.818471337579618\"\n\n\n", "id": "c45060b846a507928b5ec50a63d8e9a08cd98115_0"}
{"example_str": "examples = [\n    dict(filename='example.txt'),\n    dict(filename='image.jpg'),\n    dict(filename='document.pdf'),\n    dict(filename='video.mp4'),\n    dict(filename='audio.wav'),\n    dict(filename='script.py'),\n    dict(filename='styles.css'),\n    dict(filename='hello.world'),\n    dict(filename='file'),\n    dict(filename='.hidden'),\n]\nALLOWED_EXTENSIONS = {'txt', 'jpg', 'png', 'pdf'}  # Assuming these are the allowed extensions\n\nexamples += [\n    dict(filename=\"document.txt\"),  # allowed extension\n    dict(filename=\"image.jpg\"),     # allowed extension\n    dict(filename=\"archive.zip\"),   # not allowed extension\n    dict(filename=\"report.PDF\"),    # allowed extension, testing case insensitivity\n    dict(filename=\"note.TXT\"),      # allowed extension, testing case insensitivity\n    dict(filename=\"script.py\"),     # not allowed extension\n    dict(filename=\"photo.jpeg\"),    # similar but not allowed extension\n    dict(filename=\"data.\"),         # edge case, no extension after dot\n    dict(filename=\"example\"),       # no extension\n    dict(filename=\"presentation.pptx\")  # not allowed extension\n]", "code": "def allowed_file(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1].lower(\n        ) in ALLOWED_EXTENSIONS\n", "func_name": "allowed_file", "exec_status": true, "example_inputs": ["\"{'filename': 'example.txt'}\"", "\"{'filename': 'image.jpg'}\"", "\"{'filename': 'document.pdf'}\"", "\"{'filename': 'video.mp4'}\"", "\"{'filename': 'audio.wav'}\"", "\"{'filename': 'script.py'}\"", "\"{'filename': 'styles.css'}\"", "\"{'filename': 'hello.world'}\"", "\"{'filename': 'file'}\"", "\"{'filename': '.hidden'}\""], "example_outputs": [{"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'ALLOWED_EXTENSIONS' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'ALLOWED_EXTENSIONS' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'ALLOWED_EXTENSIONS' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'ALLOWED_EXTENSIONS' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'ALLOWED_EXTENSIONS' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'ALLOWED_EXTENSIONS' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'ALLOWED_EXTENSIONS' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'ALLOWED_EXTENSIONS' is not defined\""}, {"return": "\"False\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'ALLOWED_EXTENSIONS' is not defined\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}], "parsed_inputs": [[["filename", "\"example.txt\""]], [["filename", "\"image.jpg\""]], [["filename", "\"document.pdf\""]], [["filename", "\"video.mp4\""]], [["filename", "\"audio.wav\""]], [["filename", "\"script.py\""]], [["filename", "\"styles.css\""]], [["filename", "\"hello.world\""]], [["filename", "\"file\""]], [["filename", "\".hidden\""]]], "exec_code": "def allowed_file(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1].lower(\n        ) in ALLOWED_EXTENSIONS\n", "output": "The function is:\n\n```python\ndef allowed_file(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1].lower(\n        ) in ALLOWED_EXTENSIONS\n\n```", "choosed_example_idx": [5, 2, 0, 3, 1, 6, 7, 9], "prompt": "Input: dict(filename=\"script.py\"), Output: \"<class 'NameError'>: name 'ALLOWED_EXTENSIONS' is not defined\"\nInput: dict(filename=\"document.pdf\"), Output: \"<class 'NameError'>: name 'ALLOWED_EXTENSIONS' is not defined\"\nInput: dict(filename=\"example.txt\"), Output: \"<class 'NameError'>: name 'ALLOWED_EXTENSIONS' is not defined\"\nInput: dict(filename=\"video.mp4\"), Output: \"<class 'NameError'>: name 'ALLOWED_EXTENSIONS' is not defined\"\nInput: dict(filename=\"image.jpg\"), Output: \"<class 'NameError'>: name 'ALLOWED_EXTENSIONS' is not defined\"\nInput: dict(filename=\"styles.css\"), Output: \"<class 'NameError'>: name 'ALLOWED_EXTENSIONS' is not defined\"\nInput: dict(filename=\"hello.world\"), Output: \"<class 'NameError'>: name 'ALLOWED_EXTENSIONS' is not defined\"\nInput: dict(filename=\".hidden\"), Output: \"<class 'NameError'>: name 'ALLOWED_EXTENSIONS' is not defined\"\n\n\n\nFunction: allowed_file\n\nWrite a function that generates the output from the input.\n", "id": "d6df456b902f13042cf923cd83a8f8ff74382bb0_0"}
{"example_str": "examples = [\n    dict(data=[[\"5\", \"3\"], [\"1\", \"2\"], [\"3\", \"4\"], [\"5\", \"6\"], [\"7\", \"8\"], [\"9\", \"10\"], [\"11\", \"12\"], [\"13\", \"14\"], [\"15\", \"16\"]]),\n    dict(data=[[\"10\", \"2\"], [\"1\", \"2\"], [\"3\", \"4\"], [\"5\", \"6\"], [\"7\", \"8\"], [\"9\", \"10\"], [\"11\", \"12\"]]),\n    dict(data=[[\"15\", \"3\"], [\"1\", \"2\"], [\"3\", \"4\"], [\"5\", \"6\"], [\"7\", \"8\"], [\"9\", \"10\"], [\"11\", \"12\"], [\"13\", \"14\"], [\"15\", \"16\"], [\"17\", \"18\"], [\"19\", \"20\"]]),\n    dict(data=[[\"20\", \"4\"], [\"1\", \"2\"], [\"3\", \"4\"], [\"5\", \"6\"], [\"7\", \"8\"], [\"9\", \"10\"], [\"11\", \"12\"], [\"13\", \"14\"], [\"15\", \"16\"], [\"17\", \"18\"], [\"19\", \"20\"], [\"21\", \"22\"], [\"23\", \"24\"]]),\n    dict(data=[[\"5\", \"2\"], [\"1\", \"2\"], [\"3\", \"4\"], [\"5\", \"6\"], [\"7\", \"8\"]]),\n    dict(data=[[\"10\", \"3\"], [\"1\", \"2\"], [\"3\", \"4\"], [\"5\", \"6\"], [\"7\", \"8\"], [\"9\", \"10\"], [\"11\", \"12\"]]),\n    dict(data=[[\"15\", \"4\"], [\"1\", \"2\"], [\"3\", \"4\"], [\"5\", \"6\"], [\"7\", \"8\"], [\"9\", \"10\"], [\"11\", \"12\"], [\"13\", \"14\"], [\"15\", \"16\"]]),\n    dict(data=[[\"20\", \"5\"], [\"1\", \"2\"], [\"3\", \"4\"], [\"5\", \"6\"], [\"7\", \"8\"], [\"9\", \"10\"], [\"11\", \"12\"], [\"13\", \"14\"], [\"15\", \"16\"], [\"17\", \"18\"], [\"19\", \"20\"]]),\n    dict(data=[[\"5\", \"1\"], [\"1\", \"2\"], [\"3\", \"4\"]]),\n    dict(data=[[\"10\", \"2\"], [\"1\", \"2\"], [\"3\", \"4\"], [\"5\", \"6\"], [\"7\", \"8\"], [\"9\", \"10\"]]),\n]\nexamples += [\n    dict(data=[[10, 3], [1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24]]),\n    dict(data=[[5, 2], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13]]),\n    dict(data=[[8, 4], ['1', '2'], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18]]),\n    dict(data=[[6, 1], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7]]),\n    dict(data=[[4, 2], [0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]),\n    dict(data=[[7, 3], [10, 20], [30, 40], [50, 60], [70, 80], [90, 100], [110, 120], [130, 140], [150, 160], [170, 180]]),\n    dict(data=[[3, 2], [5, 5], [10, 10], [15, 15], [20, 20], [25, 25]]),\n    dict(data=[[9, 2], [1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]]),\n    dict(data=[[12, 5], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [20, 21], [22, 23], [24, 25], [26, 27], [28, 29], [30, 31], [32, 33]]),\n    dict(data=[[15, 3], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13], [14, 14], [15, 15], [16, 16], [17, 17], [18, 18]])\n]\nexamples += [\n    dict(data=[[10, 3], [1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24]]),\n    dict(data=[[5, 2], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13]]),\n    dict(data=[[8, 2], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9]]),\n    dict(data=[[4, 1], [0, 0], [1, 1], [2, 2], [3, 3], [4, 4]]),\n    dict(data=[[6, 2], [10, 10], [20, 20], [30, 30], [40, 40], [50, 50], [60, 60], [70, 70]]),\n    dict(data=[[7, 3], [5, 5], [10, 10], [15, 15], [20, 20], [25, 25], [30, 30], [35, 35], [40, 40], [45, 45]]),\n    dict(data=[[3, 1], [100, 100], [200, 200], [300, 300], [400, 400]]),\n    dict(data=[[9, 4], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13]]),\n    dict(data=[[2, 1], [0, 1], [1, 0], [2, 2]]),\n    dict(data=[[5, 2], [9, 8], [7, 6], [5, 4], [3, 2], [1, 0], [11, 12], [13, 14]])\n]", "code": "def agnes_init(data):\n    N = int(data[0][0])\n    k = int(data[0][1])\n    stop = len(data) - k\n    centroids = data[stop:]\n    points = data[1:stop]\n    return N, k, centroids, points\n", "func_name": "agnes_init", "exec_status": true, "example_inputs": ["\"{'data': [['5', '3'], ['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10'], ['11', '12'], ['13', '14'], ['15', '16']]}\"", "\"{'data': [['10', '2'], ['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10'], ['11', '12']]}\"", "\"{'data': [['15', '3'], ['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10'], ['11', '12'], ['13', '14'], ['15', '16'], ['17', '18'], ['19', '20']]}\"", "\"{'data': [['20', '4'], ['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10'], ['11', '12'], ['13', '14'], ['15', '16'], ['17', '18'], ['19', '20'], ['21', '22'], ['23', '24']]}\"", "\"{'data': [['5', '2'], ['1', '2'], ['3', '4'], ['5', '6'], ['7', '8']]}\"", "\"{'data': [['10', '3'], ['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10'], ['11', '12']]}\"", "\"{'data': [['15', '4'], ['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10'], ['11', '12'], ['13', '14'], ['15', '16']]}\"", "\"{'data': [['20', '5'], ['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10'], ['11', '12'], ['13', '14'], ['15', '16'], ['17', '18'], ['19', '20']]}\"", "\"{'data': [['5', '1'], ['1', '2'], ['3', '4']]}\"", "\"{'data': [['10', '2'], ['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10']]}\""], "example_outputs": [{"return": "\"(5, 3, [['11', '12'], ['13', '14'], ['15', '16']], [['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10']])\""}, {"return": "\"(10, 2, [['9', '10'], ['11', '12']], [['1', '2'], ['3', '4'], ['5', '6'], ['7', '8']])\""}, {"return": "\"(15, 3, [['15', '16'], ['17', '18'], ['19', '20']], [['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10'], ['11', '12'], ['13', '14']])\""}, {"return": "\"(20, 4, [['17', '18'], ['19', '20'], ['21', '22'], ['23', '24']], [['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10'], ['11', '12'], ['13', '14'], ['15', '16']])\""}, {"return": "\"(5, 2, [['5', '6'], ['7', '8']], [['1', '2'], ['3', '4']])\""}, {"return": "\"(10, 3, [['7', '8'], ['9', '10'], ['11', '12']], [['1', '2'], ['3', '4'], ['5', '6']])\""}, {"return": "\"(15, 4, [['9', '10'], ['11', '12'], ['13', '14'], ['15', '16']], [['1', '2'], ['3', '4'], ['5', '6'], ['7', '8']])\""}, {"return": "\"(20, 5, [['11', '12'], ['13', '14'], ['15', '16'], ['17', '18'], ['19', '20']], [['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10']])\""}, {"return": "\"(5, 1, [['3', '4']], [['1', '2']])\""}, {"return": "\"(10, 2, [['7', '8'], ['9', '10']], [['1', '2'], ['3', '4'], ['5', '6']])\""}, {"return": "\"(10, 3, [[19, 20], [21, 22], [23, 24]], [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18]])\""}, {"return": "\"(5, 2, [[10, 11], [12, 13]], [[2, 3], [4, 5], [6, 7], [8, 9]])\""}, {"return": "\"(8, 4, [[11, 12], [13, 14], [15, 16], [17, 18]], [['1', '2'], [3, 4], [5, 6], [7, 8], [9, 10]])\""}, {"return": "\"(6, 1, [[7, 7]], [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6]])\""}, {"return": "\"(4, 2, [[4, 4], [5, 5]], [[0, 0], [1, 1], [2, 2], [3, 3]])\""}, {"return": "\"(7, 3, [[130, 140], [150, 160], [170, 180]], [[10, 20], [30, 40], [50, 60], [70, 80], [90, 100], [110, 120]])\""}, {"return": "\"(3, 2, [[20, 20], [25, 25]], [[5, 5], [10, 10], [15, 15]])\""}, {"return": "\"(9, 2, [[17, 18], [19, 20]], [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16]])\""}, {"return": "\"(12, 5, [[24, 25], [26, 27], [28, 29], [30, 31], [32, 33]], [[2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [20, 21], [22, 23]])\""}, {"return": "\"(15, 3, [[16, 16], [17, 17], [18, 18]], [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13], [14, 14], [15, 15]])\""}, {"return": "\"(10, 3, [[19, 20], [21, 22], [23, 24]], [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18]])\""}, {"return": "\"(5, 2, [[10, 11], [12, 13]], [[2, 3], [4, 5], [6, 7], [8, 9]])\""}, {"return": "\"(8, 2, [[8, 8], [9, 9]], [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7]])\""}, {"return": "\"(4, 1, [[4, 4]], [[0, 0], [1, 1], [2, 2], [3, 3]])\""}, {"return": "\"(6, 2, [[60, 60], [70, 70]], [[10, 10], [20, 20], [30, 30], [40, 40], [50, 50]])\""}, {"return": "\"(7, 3, [[35, 35], [40, 40], [45, 45]], [[5, 5], [10, 10], [15, 15], [20, 20], [25, 25], [30, 30]])\""}, {"return": "\"(3, 1, [[400, 400]], [[100, 100], [200, 200], [300, 300]])\""}, {"return": "\"(9, 4, [[9, 10], [10, 11], [11, 12], [12, 13]], [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]])\""}, {"return": "\"(2, 1, [[2, 2]], [[0, 1], [1, 0]])\""}, {"return": "\"(5, 2, [[11, 12], [13, 14]], [[9, 8], [7, 6], [5, 4], [3, 2], [1, 0]])\""}], "parsed_inputs": [[["data", "[['5', '3'], ['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10'], ['11', '12'], ['13', '14'], ['15', '16']]"]], [["data", "[['10', '2'], ['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10'], ['11', '12']]"]], [["data", "[['15', '3'], ['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10'], ['11', '12'], ['13', '14'], ['15', '16'], ['17', '18'], ['19', '20']]"]], [["data", "[['20', '4'], ['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10'], ['11', '12'], ['13', '14'], ['15', '16'], ['17', '18'], ['19', '20'], ['21', '22'], ['23', '24']]"]], [["data", "[['5', '2'], ['1', '2'], ['3', '4'], ['5', '6'], ['7', '8']]"]], [["data", "[['10', '3'], ['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10'], ['11', '12']]"]], [["data", "[['15', '4'], ['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10'], ['11', '12'], ['13', '14'], ['15', '16']]"]], [["data", "[['20', '5'], ['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10'], ['11', '12'], ['13', '14'], ['15', '16'], ['17', '18'], ['19', '20']]"]], [["data", "[['5', '1'], ['1', '2'], ['3', '4']]"]], [["data", "[['10', '2'], ['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10']]"]]], "exec_code": "def agnes_init(data):\n    N = int(data[0][0])\n    k = int(data[0][1])\n    stop = len(data) - k\n    centroids = data[stop:]\n    points = data[1:stop]\n    return N, k, centroids, points\n", "output": "The function is:\n\n```python\ndef agnes_init(data):\n    N = int(data[0][0])\n    k = int(data[0][1])\n    stop = len(data) - k\n    centroids = data[stop:]\n    points = data[1:stop]\n    return N, k, centroids, points\n\n```", "choosed_example_idx": [6, 9, 7, 8], "prompt": "Input: dict(data=[['15', '4'], ['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10'], ['11', '12'], ['13', '14'], ['15', '16']]), Output: \"(15, 4, [['9', '10'], ['11', '12'], ['13', '14'], ['15', '16']], [['1', '2'], ['3', '4'], ['5', '6'], ['7', '8']])\"\nInput: dict(data=[['10', '2'], ['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10']]), Output: \"(10, 2, [['7', '8'], ['9', '10']], [['1', '2'], ['3', '4'], ['5', '6']])\"\nInput: dict(data=[['20', '5'], ['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10'], ['11', '12'], ['13', '14'], ['15', '16'], ['17', '18'], ['19', '20']]), Output: \"(20, 5, [['11', '12'], ['13', '14'], ['15', '16'], ['17', '18'], ['19', '20']], [['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10']])\"\nInput: dict(data=[['5', '1'], ['1', '2'], ['3', '4']]), Output: \"(5, 1, [['3', '4']], [['1', '2']])\"\n\nWrite a function that generates the output from the input.\n\n\nFunction: agnes_init\n", "id": "8847b1bdbc028228cc2e795355d9a73c6069fff6_0"}
{"example_str": "examples = [\n    dict(a=10),\n    dict(a=2),\n    dict(a=15),\n    dict(a=8),\n    dict(a=1),\n    dict(a=25),\n    dict(a=32),\n    dict(a=64),\n    dict(a=128),\n    dict(a=255),\n]\nexamples += [\n    dict(a=5),      # Binary: 101\n    dict(a=15),     # Binary: 1111\n    dict(a=32),     # Binary: 100000\n    dict(a=0),      # Binary: 0\n    dict(a=1),      # Binary: 1\n    dict(a=255),    # Binary: 11111111\n    dict(a=64),     # Binary: 1000000\n    dict(a=127),    # Binary: 1111111\n    dict(a=1023),   # Binary: 1111111111\n    dict(a=2048)    # Binary: 100000000000\n]\nexamples += [\n    dict(a=0),\n    dict(a=1),\n    dict(a=2),\n    dict(a=3),\n    dict(a=4),\n    dict(a=5),\n    dict(a=10),\n    dict(a=15),\n    dict(a=16),\n    dict(a=31)\n]", "code": "def toBin(a):\n    b = ''\n    while a > 1:\n        r = a % 2\n        b = str(r) + b\n        a = int(a / 2)\n    b = str(a) + b\n    return int(b)\n", "func_name": "toBin", "exec_status": true, "example_inputs": ["\"{'a': 10}\"", "\"{'a': 2}\"", "\"{'a': 15}\"", "\"{'a': 8}\"", "\"{'a': 1}\"", "\"{'a': 25}\"", "\"{'a': 32}\"", "\"{'a': 64}\"", "\"{'a': 128}\"", "\"{'a': 255}\""], "example_outputs": [{"return": "\"1010\""}, {"return": "\"10\""}, {"return": "\"1111\""}, {"return": "\"1000\""}, {"return": "\"1\""}, {"return": "\"11001\""}, {"return": "\"100000\""}, {"return": "\"1000000\""}, {"return": "\"10000000\""}, {"return": "\"11111111\""}, {"return": "\"101\""}, {"return": "\"1111\""}, {"return": "\"100000\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"11111111\""}, {"return": "\"1000000\""}, {"return": "\"1111111\""}, {"return": "\"1111111111\""}, {"return": "\"100000000000\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"10\""}, {"return": "\"11\""}, {"return": "\"100\""}, {"return": "\"101\""}, {"return": "\"1010\""}, {"return": "\"1111\""}, {"return": "\"10000\""}, {"return": "\"11111\""}], "parsed_inputs": [[["a", "10"]], [["a", "2"]], [["a", "15"]], [["a", "8"]], [["a", "1"]], [["a", "25"]], [["a", "32"]], [["a", "64"]], [["a", "128"]], [["a", "255"]]], "exec_code": "def toBin(a):\n    b = ''\n    while a > 1:\n        r = a % 2\n        b = str(r) + b\n        a = int(a / 2)\n    b = str(a) + b\n    return int(b)\n", "output": "The function is:\n\n```python\ndef toBin(a):\n    b = ''\n    while a > 1:\n        r = a % 2\n        b = str(r) + b\n        a = int(a / 2)\n    b = str(a) + b\n    return int(b)\n\n```", "choosed_example_idx": [4, 0, 6, 1, 5, 7, 2, 9, 8], "prompt": "Write a function that generates the output from the input.\nInput: dict(a=1), Output: \"1\"\nInput: dict(a=10), Output: \"1010\"\nInput: dict(a=32), Output: \"100000\"\nInput: dict(a=2), Output: \"10\"\nInput: dict(a=25), Output: \"11001\"\nInput: dict(a=64), Output: \"1000000\"\nInput: dict(a=15), Output: \"1111\"\nInput: dict(a=255), Output: \"11111111\"\nInput: dict(a=128), Output: \"10000000\"\n\nFunction: toBin\n\n\n", "id": "8e596009936e47f34a7adc108170cf06a4fc44a2_0"}
{"example_str": "examples = [\n    dict(n=5),\n    dict(n=10),\n    dict(n=123),\n    dict(n=456),\n    dict(n=789),\n    dict(n=0),\n    dict(n=9),\n    dict(n=99),\n    dict(n=111),\n    dict(n=12345),\n]\nexamples += [\n    dict(n=123),  # 1 + 2 + 3 = 6\n    dict(n=456),  # 4 + 5 + 6 = 15\n    dict(n=789),  # 7 + 8 + 9 = 24\n    dict(n=0),    # 0\n    dict(n=5),    # 5\n    dict(n=999),  # 9 + 9 + 9 = 27\n    dict(n=1001), # 1 + 0 + 0 + 1 = 2\n    dict(n=505),  # 5 + 0 + 5 = 10\n    dict(n=321),  # 3 + 2 + 1 = 6\n    dict(n=888)   # 8 + 8 + 8 = 24\n]\nexamples += [\n    dict(n=123),  # 1 + 2 + 3 = 6\n    dict(n=456),  # 4 + 5 + 6 = 15 -> 1 + 5 = 6\n    dict(n=789),  # 7 + 8 + 9 = 24 -> 2 + 4 = 6\n    dict(n=101),  # 1 + 0 + 1 = 2\n    dict(n=999),  # 9 + 9 + 9 = 27 -> 2 + 7 = 9\n    dict(n=505),  # 5 + 0 + 5 = 10 -> 1 + 0 = 1\n    dict(n=321),  # 3 + 2 + 1 = 6\n    dict(n=100),  # 1 + 0 + 0 = 1\n    dict(n=2345), # 2 + 3 + 4 + 5 = 14 -> 1 + 4 = 5\n    dict(n=8765)  # 8 + 7 + 6 + 5 = 26 -> 2 + 6 = 8\n]", "code": "def sumar_dig(n):\n    if n // 10 == 0:\n        return n\n    else:\n        return n % 10 + sumar_dig(n // 10)\n", "func_name": "sumar_dig", "exec_status": true, "example_inputs": ["\"{'n': 5}\"", "\"{'n': 10}\"", "\"{'n': 123}\"", "\"{'n': 456}\"", "\"{'n': 789}\"", "\"{'n': 0}\"", "\"{'n': 9}\"", "\"{'n': 99}\"", "\"{'n': 111}\"", "\"{'n': 12345}\""], "example_outputs": [{"return": "\"5\""}, {"return": "\"1\""}, {"return": "\"6\""}, {"return": "\"15\""}, {"return": "\"24\""}, {"return": "\"0\""}, {"return": "\"9\""}, {"return": "\"18\""}, {"return": "\"3\""}, {"return": "\"15\""}, {"return": "\"6\""}, {"return": "\"15\""}, {"return": "\"24\""}, {"return": "\"0\""}, {"return": "\"5\""}, {"return": "\"27\""}, {"return": "\"2\""}, {"return": "\"10\""}, {"return": "\"6\""}, {"return": "\"24\""}, {"return": "\"6\""}, {"return": "\"15\""}, {"return": "\"24\""}, {"return": "\"2\""}, {"return": "\"27\""}, {"return": "\"10\""}, {"return": "\"6\""}, {"return": "\"1\""}, {"return": "\"14\""}, {"return": "\"26\""}], "parsed_inputs": [[["n", "5"]], [["n", "10"]], [["n", "123"]], [["n", "456"]], [["n", "789"]], [["n", "0"]], [["n", "9"]], [["n", "99"]], [["n", "111"]], [["n", "12345"]]], "exec_code": "def sumar_dig(n):\n    if n // 10 == 0:\n        return n\n    else:\n        return n % 10 + sumar_dig(n // 10)\n", "output": "The function is:\n\n```python\ndef sumar_dig(n):\n    if n // 10 == 0:\n        return n\n    else:\n        return n % 10 + sumar_dig(n // 10)\n\n```", "choosed_example_idx": [8, 7, 1, 3, 0, 6, 2, 4, 5, 9], "prompt": "Write a function that generates the output from the input.\n\nInput: dict(n=111), Output: \"3\"\nInput: dict(n=99), Output: \"18\"\nInput: dict(n=10), Output: \"1\"\nInput: dict(n=456), Output: \"15\"\nInput: dict(n=5), Output: \"5\"\nInput: dict(n=9), Output: \"9\"\nInput: dict(n=123), Output: \"6\"\nInput: dict(n=789), Output: \"24\"\nInput: dict(n=0), Output: \"0\"\nInput: dict(n=12345), Output: \"15\"\n\nFunction: sumar_dig\n\n\n", "id": "4149e9cedcd59ab52e9bcd8dfa56989bca668b6a_0"}
{"example_str": "examples = [\n    dict(msgs=[\"Hello\", \"World\"], sent_msgs=[]),\n    dict(msgs=[\"Python\", \"is\", \"fun\"], sent_msgs=[]),\n    dict(msgs=[\"Send\", \"all\", \"messages\"], sent_msgs=[]),\n    dict(msgs=[\"This\", \"is\", \"a\", \"test\"], sent_msgs=[]),\n    dict(msgs=[\"Message\", \"1\", \"Message\", \"2\"], sent_msgs=[]),\n    dict(msgs=[\"a\", \"b\", \"c\", \"d\", \"e\"], sent_msgs=[]),\n    dict(msgs=[\"Single\", \"message\"], sent_msgs=[]),\n    dict(msgs=[\"No\", \"messages\"], sent_msgs=[\"Already\", \"sent\"]),\n    dict(msgs=[], sent_msgs=[\"Message\", \"1\", \"Message\", \"2\"]),\n    dict(msgs=[\"Message\", \"1\", \"Message\", \"2\", \"Message\", \"3\"], sent_msgs=[\"Already\", \"sent\"]),\n]\nexamples += [\n    dict(msgs=[\"Hello\", \"World\"], sent_msgs=[]),\n    dict(msgs=[\"Good morning\", \"Good evening\"], sent_msgs=[\"Hi there\"]),\n    dict(msgs=[], sent_msgs=[\"Already sent message\"]),\n    dict(msgs=[\"How are you?\", \"I'm fine, thanks!\"], sent_msgs=[]),\n    dict(msgs=[\"Message 1\", \"Message 2\", \"Message 3\"], sent_msgs=[\"Previously sent message\"]),\n    dict(msgs=[\"Python\", \"Java\", \"C++\"], sent_msgs=[\"Ruby\"]),\n    dict(msgs=[\"Test message\"], sent_msgs=[]),\n    dict(msgs=[\"Urgent: Meeting at 10\", \"Reminder: Submit reports\"], sent_msgs=[\"Welcome aboard\"]),\n    dict(msgs=[\"Happy Birthday\", \"Merry Christmas\", \"Happy New Year\"], sent_msgs=[\"Happy Holidays\"]),\n    dict(msgs=[\"Final notice\", \"Second notice\"], sent_msgs=[\"First notice\"])\n]\nexamples += [\n    dict(msgs=[\"Hello\", \"World\"], sent_msgs=[]),\n    dict(msgs=[\"Good morning\", \"Good night\"], sent_msgs=[\"Hey!\"]),\n    dict(msgs=[\"Test\", \"Message\"], sent_msgs=[\"Initial Message\"]),\n    dict(msgs=[], sent_msgs=[\"Already\", \"Sent\", \"Messages\"]),\n    dict(msgs=[\"Only one message\"], sent_msgs=[]),\n    dict(msgs=[\"Message 1\", \"Message 2\", \"Message 3\"], sent_msgs=[\"Sent 1\"]),\n    dict(msgs=[\"Another test\"], sent_msgs=[\"Previous messages\", \"Another one\"]),\n    dict(msgs=[\"Hi\", \"Bye\"], sent_msgs=[\"Greeting\"]),\n    dict(msgs=[\"First\", \"Second\", \"Third\", \"Fourth\"], sent_msgs=[]),\n    dict(msgs=[], sent_msgs=[\"No new messages\"])\n]", "code": "def send_messages(msgs, sent_msgs):\n    while msgs:\n        msg = msgs.pop(0)\n        sent_msgs.append(msg)\n    return sent_msgs\n", "func_name": "send_messages", "exec_status": true, "example_inputs": ["\"{'msgs': ['Hello', 'World'], 'sent_msgs': []}\"", "\"{'msgs': ['Python', 'is', 'fun'], 'sent_msgs': []}\"", "\"{'msgs': ['Send', 'all', 'messages'], 'sent_msgs': []}\"", "\"{'msgs': ['This', 'is', 'a', 'test'], 'sent_msgs': []}\"", "\"{'msgs': ['Message', '1', 'Message', '2'], 'sent_msgs': []}\"", "\"{'msgs': ['a', 'b', 'c', 'd', 'e'], 'sent_msgs': []}\"", "\"{'msgs': ['Single', 'message'], 'sent_msgs': []}\"", "\"{'msgs': ['No', 'messages'], 'sent_msgs': ['Already', 'sent']}\"", "\"{'msgs': [], 'sent_msgs': ['Message', '1', 'Message', '2']}\"", "\"{'msgs': ['Message', '1', 'Message', '2', 'Message', '3'], 'sent_msgs': ['Already', 'sent']}\""], "example_outputs": [{"return": "\"['Hello', 'World']\""}, {"return": "\"['Python', 'is', 'fun']\""}, {"return": "\"['Send', 'all', 'messages']\""}, {"return": "\"['This', 'is', 'a', 'test']\""}, {"return": "\"['Message', '1', 'Message', '2']\""}, {"return": "\"['a', 'b', 'c', 'd', 'e']\""}, {"return": "\"['Single', 'message']\""}, {"return": "\"['Already', 'sent', 'No', 'messages']\""}, {"return": "\"['Message', '1', 'Message', '2']\""}, {"return": "\"['Already', 'sent', 'Message', '1', 'Message', '2', 'Message', '3']\""}, {"return": "\"['Hello', 'World']\""}, {"return": "\"['Hi there', 'Good morning', 'Good evening']\""}, {"return": "\"['Already sent message']\""}, {"return": "\"['How are you?', \\\"I'm fine, thanks!\\\"]\""}, {"return": "\"['Previously sent message', 'Message 1', 'Message 2', 'Message 3']\""}, {"return": "\"['Ruby', 'Python', 'Java', 'C++']\""}, {"return": "\"['Test message']\""}, {"return": "\"['Welcome aboard', 'Urgent: Meeting at 10', 'Reminder: Submit reports']\""}, {"return": "\"['Happy Holidays', 'Happy Birthday', 'Merry Christmas', 'Happy New Year']\""}, {"return": "\"['First notice', 'Final notice', 'Second notice']\""}, {"return": "\"['Hello', 'World']\""}, {"return": "\"['Hey!', 'Good morning', 'Good night']\""}, {"return": "\"['Initial Message', 'Test', 'Message']\""}, {"return": "\"['Already', 'Sent', 'Messages']\""}, {"return": "\"['Only one message']\""}, {"return": "\"['Sent 1', 'Message 1', 'Message 2', 'Message 3']\""}, {"return": "\"['Previous messages', 'Another one', 'Another test']\""}, {"return": "\"['Greeting', 'Hi', 'Bye']\""}, {"return": "\"['First', 'Second', 'Third', 'Fourth']\""}, {"return": "\"['No new messages']\""}], "parsed_inputs": [[["msgs", "['Hello', 'World']"], ["sent_msgs", "[]"]], [["msgs", "['Python', 'is', 'fun']"], ["sent_msgs", "[]"]], [["msgs", "['Send', 'all', 'messages']"], ["sent_msgs", "[]"]], [["msgs", "['This', 'is', 'a', 'test']"], ["sent_msgs", "[]"]], [["msgs", "['Message', '1', 'Message', '2']"], ["sent_msgs", "[]"]], [["msgs", "['a', 'b', 'c', 'd', 'e']"], ["sent_msgs", "[]"]], [["msgs", "['Single', 'message']"], ["sent_msgs", "[]"]], [["msgs", "['No', 'messages']"], ["sent_msgs", "['Already', 'sent']"]], [["msgs", "[]"], ["sent_msgs", "['Message', '1', 'Message', '2']"]], [["msgs", "['Message', '1', 'Message', '2', 'Message', '3']"], ["sent_msgs", "['Already', 'sent']"]]], "exec_code": "def send_messages(msgs, sent_msgs):\n    while msgs:\n        msg = msgs.pop(0)\n        sent_msgs.append(msg)\n    return sent_msgs\n", "output": "The function is:\n\n```python\ndef send_messages(msgs, sent_msgs):\n    while msgs:\n        msg = msgs.pop(0)\n        sent_msgs.append(msg)\n    return sent_msgs\n\n```", "choosed_example_idx": [9, 5, 1, 2, 6], "prompt": "Function: send_messages\nInput: dict(msgs=['Message', '1', 'Message', '2', 'Message', '3'], sent_msgs=['Already', 'sent']), Output: \"['Already', 'sent', 'Message', '1', 'Message', '2', 'Message', '3']\"\nInput: dict(msgs=['a', 'b', 'c', 'd', 'e'], sent_msgs=[]), Output: \"['a', 'b', 'c', 'd', 'e']\"\nInput: dict(msgs=['Python', 'is', 'fun'], sent_msgs=[]), Output: \"['Python', 'is', 'fun']\"\nInput: dict(msgs=['Send', 'all', 'messages'], sent_msgs=[]), Output: \"['Send', 'all', 'messages']\"\nInput: dict(msgs=['Single', 'message'], sent_msgs=[]), Output: \"['Single', 'message']\"\n\n\nWrite a function that generates the output from the input.\n", "id": "aedda0e8a7e9c0b4897a6ebe464197cac28e97d8_0"}
{"example_str": "examples = [\n    dict(k=2, doc=\"hello\"),\n    dict(k=3, doc=\"world\"),\n    dict(k=1, doc=\"abcde\"),\n    dict(k=4, doc=\"python\"),\n    dict(k=2, doc=\"abcdefg\"),\n    dict(k=5, doc=\"machine learning\"),\n    dict(k=1, doc=\"xyz\"),\n    dict(k=3, doc=\"natural language processing\"),\n    dict(k=2, doc=\"artificial intelligence\"),\n    dict(k=4, doc=\"deep learning\"),\n]\nexamples += [\n    dict(k=1, doc=\"hello\"),\n    dict(k=2, doc=\"hello\"),\n    dict(k=3, doc=\"hello\"),\n    dict(k=1, doc=\"\"),\n    dict(k=3, doc=\"abc\"),\n    dict(k=4, doc=\"abcdef\"),\n    dict(k=2, doc=\"hi\"),\n    dict(k=5, doc=\"12345\"),\n    dict(k=3, doc=\"Python\"),\n    dict(k=2, doc=\"A\")\n]\nexamples += [\n    dict(k=1, doc=\"hello\"),\n    dict(k=2, doc=\"hello\"),\n    dict(k=3, doc=\"hello\"),\n    dict(k=1, doc=\"world\"),\n    dict(k=2, doc=\"world\"),\n    dict(k=3, doc=\"world\"),\n    dict(k=4, doc=\"example\"),\n    dict(k=2, doc=\"example\"),\n    dict(k=5, doc=\"example\"),\n    dict(k=3, doc=\"example\")\n]", "code": "def get_kgram_char(k, doc):\n    kgram = []\n    for i in range(len(doc) - (k - 1)):\n        kgram.append(doc[i:i + k])\n    return kgram\n", "func_name": "get_kgram_char", "exec_status": true, "example_inputs": ["\"{'k': 2, 'doc': 'hello'}\"", "\"{'k': 3, 'doc': 'world'}\"", "\"{'k': 1, 'doc': 'abcde'}\"", "\"{'k': 4, 'doc': 'python'}\"", "\"{'k': 2, 'doc': 'abcdefg'}\"", "\"{'k': 5, 'doc': 'machine learning'}\"", "\"{'k': 1, 'doc': 'xyz'}\"", "\"{'k': 3, 'doc': 'natural language processing'}\"", "\"{'k': 2, 'doc': 'artificial intelligence'}\"", "\"{'k': 4, 'doc': 'deep learning'}\""], "example_outputs": [{"return": "\"['he', 'el', 'll', 'lo']\""}, {"return": "\"['wor', 'orl', 'rld']\""}, {"return": "\"['a', 'b', 'c', 'd', 'e']\""}, {"return": "\"['pyth', 'ytho', 'thon']\""}, {"return": "\"['ab', 'bc', 'cd', 'de', 'ef', 'fg']\""}, {"return": "\"['machi', 'achin', 'chine', 'hine ', 'ine l', 'ne le', 'e lea', ' lear', 'learn', 'earni', 'arnin', 'rning']\""}, {"return": "\"['x', 'y', 'z']\""}, {"return": "\"['nat', 'atu', 'tur', 'ura', 'ral', 'al ', 'l l', ' la', 'lan', 'ang', 'ngu', 'gua', 'uag', 'age', 'ge ', 'e p', ' pr', 'pro', 'roc', 'oce', 'ces', 'ess', 'ssi', 'sin', 'ing']\""}, {"return": "\"['ar', 'rt', 'ti', 'if', 'fi', 'ic', 'ci', 'ia', 'al', 'l ', ' i', 'in', 'nt', 'te', 'el', 'll', 'li', 'ig', 'ge', 'en', 'nc', 'ce']\""}, {"return": "\"['deep', 'eep ', 'ep l', 'p le', ' lea', 'lear', 'earn', 'arni', 'rnin', 'ning']\""}, {"return": "\"['h', 'e', 'l', 'l', 'o']\""}, {"return": "\"['he', 'el', 'll', 'lo']\""}, {"return": "\"['hel', 'ell', 'llo']\""}, {"return": "\"[]\""}, {"return": "\"['abc']\""}, {"return": "\"['abcd', 'bcde', 'cdef']\""}, {"return": "\"['hi']\""}, {"return": "\"['12345']\""}, {"return": "\"['Pyt', 'yth', 'tho', 'hon']\""}, {"return": "\"[]\""}, {"return": "\"['h', 'e', 'l', 'l', 'o']\""}, {"return": "\"['he', 'el', 'll', 'lo']\""}, {"return": "\"['hel', 'ell', 'llo']\""}, {"return": "\"['w', 'o', 'r', 'l', 'd']\""}, {"return": "\"['wo', 'or', 'rl', 'ld']\""}, {"return": "\"['wor', 'orl', 'rld']\""}, {"return": "\"['exam', 'xamp', 'ampl', 'mple']\""}, {"return": "\"['ex', 'xa', 'am', 'mp', 'pl', 'le']\""}, {"return": "\"['examp', 'xampl', 'ample']\""}, {"return": "\"['exa', 'xam', 'amp', 'mpl', 'ple']\""}], "parsed_inputs": [[["k", "2"], ["doc", "\"hello\""]], [["k", "3"], ["doc", "\"world\""]], [["k", "1"], ["doc", "\"abcde\""]], [["k", "4"], ["doc", "\"python\""]], [["k", "2"], ["doc", "\"abcdefg\""]], [["k", "5"], ["doc", "\"machine learning\""]], [["k", "1"], ["doc", "\"xyz\""]], [["k", "3"], ["doc", "\"natural language processing\""]], [["k", "2"], ["doc", "\"artificial intelligence\""]], [["k", "4"], ["doc", "\"deep learning\""]]], "exec_code": "def get_kgram_char(k, doc):\n    kgram = []\n    for i in range(len(doc) - (k - 1)):\n        kgram.append(doc[i:i + k])\n    return kgram\n", "output": "The function is:\n\n```python\ndef get_kgram_char(k, doc):\n    kgram = []\n    for i in range(len(doc) - (k - 1)):\n        kgram.append(doc[i:i + k])\n    return kgram\n\n```", "choosed_example_idx": [5, 9, 0, 3, 4, 8], "prompt": "Function: get_kgram_char\n\nInput: dict(k=5, doc=\"machine learning\"), Output: \"['machi', 'achin', 'chine', 'hine ', 'ine l', 'ne le', 'e lea', ' lear', 'learn', 'earni', 'arnin', 'rning']\"\nInput: dict(k=4, doc=\"deep learning\"), Output: \"['deep', 'eep ', 'ep l', 'p le', ' lea', 'lear', 'earn', 'arni', 'rnin', 'ning']\"\nInput: dict(k=2, doc=\"hello\"), Output: \"['he', 'el', 'll', 'lo']\"\nInput: dict(k=4, doc=\"python\"), Output: \"['pyth', 'ytho', 'thon']\"\nInput: dict(k=2, doc=\"abcdefg\"), Output: \"['ab', 'bc', 'cd', 'de', 'ef', 'fg']\"\nInput: dict(k=2, doc=\"artificial intelligence\"), Output: \"['ar', 'rt', 'ti', 'if', 'fi', 'ic', 'ci', 'ia', 'al', 'l ', ' i', 'in', 'nt', 'te', 'el', 'll', 'li', 'ig', 'ge', 'en', 'nc', 'ce']\"\n\n\n\nWrite a function that generates the output from the input.\n", "id": "a9ee8af1586966a4e8339c6665db632a2afde230_0"}
{"example_str": "examples = [\n    dict(s=\"123\"),\n    dict(s=\"012\"),\n    dict(s=\"\"),\n    dict(s=\"1\"),\n    dict(s=\"10\"),\n    dict(s=\"12\"),\n    dict(s=\"1234\"),\n    dict(s=\"0123\"),\n    dict(s=\"1111\"),\n    dict(s=\"0000\"),\n]\nexamples += [\n    dict(s=[]),  # Empty list\n    dict(s=[0]),  # List with one zero\n    dict(s=[1]),  # List with one non-zero integer\n    dict(s=[1, 2]),  # List with two integers\n    dict(s=[1, 0]),  # List with a zero in the second position\n    dict(s=[2, 1, 3]),  # List with three integers\n    dict(s=[0, 1, 2]),  # List starting with zero\n    dict(s=[1, 2, 0, 3]),  # List with a zero in the middle\n    dict(s=[1, 2, 3, 4]),  # List with four integers\n    dict(s=[1, 0, 1, 0, 1])  # List with alternating zeros and ones\n]\nexamples += [\n    dict(s=\"\"),\n    dict(s=\"0\"),\n    dict(s=\"10\"),\n    dict(s=\"110\"),\n    dict(s=\"100\"),\n    dict(s=\"101\"),\n    dict(s=\"111\"),\n    dict(s=\"1010\"),\n    dict(s=\"1101\"),\n    dict(s=\"1000\"),\n]", "code": "def decode(s):\n    if len(s) == 0:\n        return 1\n    if s[0] == 0:\n        return 0\n    else:\n        return decode(s[1:]) + decode(s[2:])\n", "func_name": "decode", "exec_status": true, "example_inputs": ["\"{'s': '123'}\"", "\"{'s': '012'}\"", "\"{'s': ''}\"", "\"{'s': '1'}\"", "\"{'s': '10'}\"", "\"{'s': '12'}\"", "\"{'s': '1234'}\"", "\"{'s': '0123'}\"", "\"{'s': '1111'}\"", "\"{'s': '0000'}\""], "example_outputs": [{"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"8\""}, {"return": "\"8\""}, {"return": "\"8\""}, {"return": "\"8\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"1\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"8\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"8\""}, {"return": "\"8\""}, {"return": "\"8\""}], "parsed_inputs": [[["s", "\"123\""]], [["s", "\"012\""]], [["s", "\"\""]], [["s", "\"1\""]], [["s", "\"10\""]], [["s", "\"12\""]], [["s", "\"1234\""]], [["s", "\"0123\""]], [["s", "\"1111\""]], [["s", "\"0000\""]]], "exec_code": "def decode(s):\n    if len(s) == 0:\n        return 1\n    if s[0] == 0:\n        return 0\n    else:\n        return decode(s[1:]) + decode(s[2:])\n", "output": "The function is:\n\n```python\ndef decode(s):\n    if len(s) == 0:\n        return 1\n    if s[0] == 0:\n        return 0\n    else:\n        return decode(s[1:]) + decode(s[2:])\n\n```", "choosed_example_idx": [8, 3, 4, 5, 2], "prompt": "Function: decode\nInput: dict(s=\"1111\"), Output: \"8\"\nInput: dict(s=\"1\"), Output: \"2\"\nInput: dict(s=\"10\"), Output: \"3\"\nInput: dict(s=\"12\"), Output: \"3\"\nInput: dict(s=\"\"), Output: \"1\"\n\nWrite a function that generates the output from the input.\n", "id": "e639c799c86d0bf8c2a5147ab9d42b3fdd023b85_0"}
{"example_str": "examples = [\n    dict(max=5),\n    dict(max=10),\n    dict(max=15),\n    dict(max=20),\n    dict(max=25),\n    dict(max=30),\n    dict(max=35),\n    dict(max=40),\n    dict(max=45),\n    dict(max=50),\n]\nexamples += [\n    dict(max=1),\n    dict(max=2),\n    dict(max=3),\n    dict(max=5),\n    dict(max=8),\n    dict(max=10),\n    dict(max=15),\n    dict(max=20),\n    dict(max=25),\n    dict(max=30)\n]\nexamples += [\n    dict(max=1),\n    dict(max=2),\n    dict(max=3),\n    dict(max=5),\n    dict(max=8),\n    dict(max=10),\n    dict(max=13),\n    dict(max=21),\n    dict(max=34),\n    dict(max=55)\n]", "code": "def fib(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        yield b\n        a, b = b, a + b\n        n = n + 1\n    return 'done'\n", "func_name": "fib", "exec_status": true, "example_inputs": ["\"{'max': 5}\"", "\"{'max': 10}\"", "\"{'max': 15}\"", "\"{'max': 20}\"", "\"{'max': 25}\"", "\"{'max': 30}\"", "\"{'max': 35}\"", "\"{'max': 40}\"", "\"{'max': 45}\"", "\"{'max': 50}\""], "example_outputs": [{"return": "\"<generator object fib at 0x7fc5b0f86430>\""}, {"return": "\"<generator object fib at 0x7fc5b0f86660>\""}, {"return": "\"<generator object fib at 0x7fc5b0f86430>\""}, {"return": "\"<generator object fib at 0x7fc5b0f86660>\""}, {"return": "\"<generator object fib at 0x7fc5b0f86430>\""}, {"return": "\"<generator object fib at 0x7fc5b0f86660>\""}, {"return": "\"<generator object fib at 0x7fc5b0f86430>\""}, {"return": "\"<generator object fib at 0x7fc5b0f86660>\""}, {"return": "\"<generator object fib at 0x7fc5b0f86430>\""}, {"return": "\"<generator object fib at 0x7fc5b0f86660>\""}, {"return": "\"<generator object fib at 0x7f999353f350>\""}, {"return": "\"<generator object fib at 0x7f999353f580>\""}, {"return": "\"<generator object fib at 0x7f999353f350>\""}, {"return": "\"<generator object fib at 0x7f999353f580>\""}, {"return": "\"<generator object fib at 0x7f999353f350>\""}, {"return": "\"<generator object fib at 0x7f999353f580>\""}, {"return": "\"<generator object fib at 0x7f999353f350>\""}, {"return": "\"<generator object fib at 0x7f999353f580>\""}, {"return": "\"<generator object fib at 0x7f999353f350>\""}, {"return": "\"<generator object fib at 0x7f999353f580>\""}, {"return": "\"<generator object fib at 0x7f8b5dfda350>\""}, {"return": "\"<generator object fib at 0x7f8b5dfda580>\""}, {"return": "\"<generator object fib at 0x7f8b5dfda350>\""}, {"return": "\"<generator object fib at 0x7f8b5dfda580>\""}, {"return": "\"<generator object fib at 0x7f8b5dfda350>\""}, {"return": "\"<generator object fib at 0x7f8b5dfda580>\""}, {"return": "\"<generator object fib at 0x7f8b5dfda350>\""}, {"return": "\"<generator object fib at 0x7f8b5dfda580>\""}, {"return": "\"<generator object fib at 0x7f8b5dfda350>\""}, {"return": "\"<generator object fib at 0x7f8b5dfda580>\""}], "parsed_inputs": [[["max", "5"]], [["max", "10"]], [["max", "15"]], [["max", "20"]], [["max", "25"]], [["max", "30"]], [["max", "35"]], [["max", "40"]], [["max", "45"]], [["max", "50"]]], "exec_code": "def fib(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        yield b\n        a, b = b, a + b\n        n = n + 1\n    return 'done'\n", "output": "The function is:\n\n```python\ndef fib(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        yield b\n        a, b = b, a + b\n        n = n + 1\n    return 'done'\n\n```", "choosed_example_idx": [8, 3, 7], "prompt": "Function: fib\nWrite a function that generates the output from the input.\nInput: dict(max=45), Output: \"<generator object fib at 0x7fc5b0f86430>\"\nInput: dict(max=20), Output: \"<generator object fib at 0x7fc5b0f86660>\"\nInput: dict(max=40), Output: \"<generator object fib at 0x7fc5b0f86660>\"\n\n", "id": "f872e92e009ad72c826229200696f4a32e062ca4_0"}
{"example_str": "examples = [\n    dict(X=[1, 2, 3], Y={1: [1, 2], 2: [2, 3], 3: [1, 3]}),\n    dict(X=['a', 'b', 'c'], Y={'x': ['a', 'b'], 'y': ['b', 'c'], 'z': ['a', 'c']}),\n    dict(X={1, 2, 3}, Y={1: {1, 2}, 2: {2, 3}, 3: {1, 3}}),\n    dict(X=['x', 'y', 'z'], Y={'a': ['x', 'y'], 'b': ['y', 'z'], 'c': ['x', 'z']}),\n    dict(X=[4, 5, 6], Y={4: [4, 5], 5: [5, 6], 6: [4, 6]}),\n    dict(X=['p', 'q', 'r'], Y={'s': ['p', 'q'], 't': ['q', 'r'], 'u': ['p', 'r']}),\n    dict(X={7, 8, 9}, Y={7: {7, 8}, 8: {8, 9}, 9: {7, 9}}),\n    dict(X=['m', 'n', 'o'], Y={'k': ['m', 'n'], 'l': ['n', 'o'], 'j': ['m', 'o']}),\n    dict(X=[10, 11, 12], Y={10: [10, 11], 11: [11, 12], 12: [10, 12]}),\n    dict(X=['g', 'h', 'i'], Y={'f': ['g', 'h'], 'e': ['h', 'i'], 'd': ['g', 'i']}),\n]\nexamples += [\n    dict(X=[1, 2, 3], Y={1: [1, 2], 2: [2, 3]}),\n    dict(X=['a', 'b', 'c'], Y={'x': ['a', 'b'], 'y': ['b', 'c']}),\n    dict(X=[1, 2, 3, 4], Y={1: [1, 2], 2: [3], 3: [2, 4]}),\n    dict(X=['apple', 'banana'], Y={'first': ['apple'], 'second': ['banana', 'apple']}),\n    dict(X=[0, 1, 2], Y={0: [0, 1], 1: [1, 2], 2: [2, 0]}),\n    dict(X=[10, 20, 30], Y={100: [10, 20], 200: [20, 30]}),\n    dict(X=['x', 'y', 'z'], Y={'alpha': ['x', 'y'], 'beta': ['y', 'z'], 'gamma': ['z', 'x']}),\n    dict(X=[5, 6, 7, 8], Y={10: [5, 6], 20: [7, 8], 30: [5, 7]}),\n    dict(X=['red', 'green', 'blue'], Y={'color1': ['red', 'green'], 'color2': ['green', 'blue']}),\n    dict(X=[100, 200, 300, 400], Y={1: [100, 200], 2: [300, 400], 3: [200, 300]})\n]\nexamples += [\n    dict(X=[1, 2, 3], Y={1: [1, 2], 2: [2, 3]}),\n    dict(X=['a', 'b', 'c'], Y={'x': ['a', 'b'], 'y': ['b', 'c']}),\n    dict(X=[1, 2], Y={1: [1], 2: [2], 3: [1, 2]}),\n    dict(X=['x', 'y'], Y={'a': ['x'], 'b': ['y'], 'c': ['x', 'y']}),\n    dict(X=[0, 1, 2, 3], Y={1: [0, 1], 2: [1, 2], 3: [2, 3]}),\n    dict(X=['red', 'blue'], Y={'color1': ['red'], 'color2': ['blue'], 'color3': ['red', 'blue']}),\n    dict(X=[1, 2, 3, 4], Y={1: [1, 2], 2: [3, 4]}),\n    dict(X=['left', 'right'], Y={'side1': ['left'], 'side2': ['right'], 'side3': ['left', 'right']}),\n    dict(X=[10, 20, 30], Y={100: [10, 20], 200: [20, 30]}),\n    dict(X=['apple', 'banana'], Y={'fruit1': ['apple'], 'fruit2': ['banana'], 'fruit3': ['apple', 'banana']})\n]", "code": "def exact_cover(X, Y):\n    X = {j: set() for j in X}\n    for i, row in Y.items():\n        for j in row:\n            X[j].add(i)\n    return X, Y\n", "func_name": "exact_cover", "exec_status": true, "example_inputs": ["\"{'X': [1, 2, 3], 'Y': {1: [1, 2], 2: [2, 3], 3: [1, 3]}}\"", "\"{'X': ['a', 'b', 'c'], 'Y': {'x': ['a', 'b'], 'y': ['b', 'c'], 'z': ['a', 'c']}}\"", "\"{'X': {1, 2, 3}, 'Y': {1: {1, 2}, 2: {2, 3}, 3: {1, 3}}}\"", "\"{'X': ['x', 'y', 'z'], 'Y': {'a': ['x', 'y'], 'b': ['y', 'z'], 'c': ['x', 'z']}}\"", "\"{'X': [4, 5, 6], 'Y': {4: [4, 5], 5: [5, 6], 6: [4, 6]}}\"", "\"{'X': ['p', 'q', 'r'], 'Y': {'s': ['p', 'q'], 't': ['q', 'r'], 'u': ['p', 'r']}}\"", "\"{'X': {8, 9, 7}, 'Y': {7: {8, 7}, 8: {8, 9}, 9: {9, 7}}}\"", "\"{'X': ['m', 'n', 'o'], 'Y': {'k': ['m', 'n'], 'l': ['n', 'o'], 'j': ['m', 'o']}}\"", "\"{'X': [10, 11, 12], 'Y': {10: [10, 11], 11: [11, 12], 12: [10, 12]}}\"", "\"{'X': ['g', 'h', 'i'], 'Y': {'f': ['g', 'h'], 'e': ['h', 'i'], 'd': ['g', 'i']}}\""], "example_outputs": [{"return": "\"({1: {1, 3}, 2: {1, 2}, 3: {2, 3}}, {1: [1, 2], 2: [2, 3], 3: [1, 3]})\""}, {"return": "\"({'a': {'z', 'x'}, 'b': {'y', 'x'}, 'c': {'y', 'z'}}, {'x': ['a', 'b'], 'y': ['b', 'c'], 'z': ['a', 'c']})\""}, {"return": "\"({1: {1, 3}, 2: {1, 2}, 3: {2, 3}}, {1: {1, 2}, 2: {2, 3}, 3: {1, 3}})\""}, {"return": "\"({'x': {'a', 'c'}, 'y': {'a', 'b'}, 'z': {'c', 'b'}}, {'a': ['x', 'y'], 'b': ['y', 'z'], 'c': ['x', 'z']})\""}, {"return": "\"({4: {4, 6}, 5: {4, 5}, 6: {5, 6}}, {4: [4, 5], 5: [5, 6], 6: [4, 6]})\""}, {"return": "\"({'p': {'s', 'u'}, 'q': {'s', 't'}, 'r': {'t', 'u'}}, {'s': ['p', 'q'], 't': ['q', 'r'], 'u': ['p', 'r']})\""}, {"return": "\"({8: {8, 7}, 9: {8, 9}, 7: {9, 7}}, {7: {8, 7}, 8: {8, 9}, 9: {9, 7}})\""}, {"return": "\"({'m': {'k', 'j'}, 'n': {'k', 'l'}, 'o': {'l', 'j'}}, {'k': ['m', 'n'], 'l': ['n', 'o'], 'j': ['m', 'o']})\""}, {"return": "\"({10: {10, 12}, 11: {10, 11}, 12: {11, 12}}, {10: [10, 11], 11: [11, 12], 12: [10, 12]})\""}, {"return": "\"({'g': {'d', 'f'}, 'h': {'e', 'f'}, 'i': {'d', 'e'}}, {'f': ['g', 'h'], 'e': ['h', 'i'], 'd': ['g', 'i']})\""}, {"return": "\"({1: {1}, 2: {1, 2}, 3: {2}}, {1: [1, 2], 2: [2, 3]})\""}, {"return": "\"({'a': {'x'}, 'b': {'x', 'y'}, 'c': {'y'}}, {'x': ['a', 'b'], 'y': ['b', 'c']})\""}, {"return": "\"({1: {1}, 2: {1, 3}, 3: {2}, 4: {3}}, {1: [1, 2], 2: [3], 3: [2, 4]})\""}, {"return": "\"({'apple': {'second', 'first'}, 'banana': {'second'}}, {'first': ['apple'], 'second': ['banana', 'apple']})\""}, {"return": "\"({0: {0, 2}, 1: {0, 1}, 2: {1, 2}}, {0: [0, 1], 1: [1, 2], 2: [2, 0]})\""}, {"return": "\"({10: {100}, 20: {200, 100}, 30: {200}}, {100: [10, 20], 200: [20, 30]})\""}, {"return": "\"({'x': {'alpha', 'gamma'}, 'y': {'alpha', 'beta'}, 'z': {'gamma', 'beta'}}, {'alpha': ['x', 'y'], 'beta': ['y', 'z'], 'gamma': ['z', 'x']})\""}, {"return": "\"({5: {10, 30}, 6: {10}, 7: {20, 30}, 8: {20}}, {10: [5, 6], 20: [7, 8], 30: [5, 7]})\""}, {"return": "\"({'red': {'color1'}, 'green': {'color1', 'color2'}, 'blue': {'color2'}}, {'color1': ['red', 'green'], 'color2': ['green', 'blue']})\""}, {"return": "\"({100: {1}, 200: {1, 3}, 300: {2, 3}, 400: {2}}, {1: [100, 200], 2: [300, 400], 3: [200, 300]})\""}, {"return": "\"({1: {1}, 2: {1, 2}, 3: {2}}, {1: [1, 2], 2: [2, 3]})\""}, {"return": "\"({'a': {'x'}, 'b': {'x', 'y'}, 'c': {'y'}}, {'x': ['a', 'b'], 'y': ['b', 'c']})\""}, {"return": "\"({1: {1, 3}, 2: {2, 3}}, {1: [1], 2: [2], 3: [1, 2]})\""}, {"return": "\"({'x': {'c', 'a'}, 'y': {'c', 'b'}}, {'a': ['x'], 'b': ['y'], 'c': ['x', 'y']})\""}, {"return": "\"({0: {1}, 1: {1, 2}, 2: {2, 3}, 3: {3}}, {1: [0, 1], 2: [1, 2], 3: [2, 3]})\""}, {"return": "\"({'red': {'color1', 'color3'}, 'blue': {'color3', 'color2'}}, {'color1': ['red'], 'color2': ['blue'], 'color3': ['red', 'blue']})\""}, {"return": "\"({1: {1}, 2: {1}, 3: {2}, 4: {2}}, {1: [1, 2], 2: [3, 4]})\""}, {"return": "\"({'left': {'side3', 'side1'}, 'right': {'side3', 'side2'}}, {'side1': ['left'], 'side2': ['right'], 'side3': ['left', 'right']})\""}, {"return": "\"({10: {100}, 20: {200, 100}, 30: {200}}, {100: [10, 20], 200: [20, 30]})\""}, {"return": "\"({'apple': {'fruit1', 'fruit3'}, 'banana': {'fruit3', 'fruit2'}}, {'fruit1': ['apple'], 'fruit2': ['banana'], 'fruit3': ['apple', 'banana']})\""}], "parsed_inputs": [[["X", "[1, 2, 3]"], ["Y", "{1: [1, 2], 2: [2, 3], 3: [1, 3]}"]], [["X", "['a', 'b', 'c']"], ["Y", "{'x': ['a', 'b'], 'y': ['b', 'c'], 'z': ['a', 'c']}"]], [["X", "{1, 2, 3}"], ["Y", "{1: {1, 2}, 2: {2, 3}, 3: {1, 3}}"]], [["X", "['x', 'y', 'z']"], ["Y", "{'a': ['x', 'y'], 'b': ['y', 'z'], 'c': ['x', 'z']}"]], [["X", "[4, 5, 6]"], ["Y", "{4: [4, 5], 5: [5, 6], 6: [4, 6]}"]], [["X", "['p', 'q', 'r']"], ["Y", "{'s': ['p', 'q'], 't': ['q', 'r'], 'u': ['p', 'r']}"]], [["X", "{8, 9, 7}"], ["Y", "{7: {8, 7}, 8: {8, 9}, 9: {9, 7}}"]], [["X", "['m', 'n', 'o']"], ["Y", "{'k': ['m', 'n'], 'l': ['n', 'o'], 'j': ['m', 'o']}"]], [["X", "[10, 11, 12]"], ["Y", "{10: [10, 11], 11: [11, 12], 12: [10, 12]}"]], [["X", "['g', 'h', 'i']"], ["Y", "{'f': ['g', 'h'], 'e': ['h', 'i'], 'd': ['g', 'i']}"]]], "exec_code": "def exact_cover(X, Y):\n    X = {j: set() for j in X}\n    for i, row in Y.items():\n        for j in row:\n            X[j].add(i)\n    return X, Y\n", "output": "The function is:\n\n```python\ndef exact_cover(X, Y):\n    X = {j: set() for j in X}\n    for i, row in Y.items():\n        for j in row:\n            X[j].add(i)\n    return X, Y\n\n```", "choosed_example_idx": [8, 6, 5, 3, 9, 7, 0, 4], "prompt": "Write a function that generates the output from the input.\n\nFunction: exact_cover\n\n\nInput: dict(X=[10, 11, 12], Y={10: [10, 11], 11: [11, 12], 12: [10, 12]}), Output: \"({10: {10, 12}, 11: {10, 11}, 12: {11, 12}}, {10: [10, 11], 11: [11, 12], 12: [10, 12]})\"\nInput: dict(X={8, 9, 7}, Y={7: {8, 7}, 8: {8, 9}, 9: {9, 7}}), Output: \"({8: {8, 7}, 9: {8, 9}, 7: {9, 7}}, {7: {8, 7}, 8: {8, 9}, 9: {9, 7}})\"\nInput: dict(X=['p', 'q', 'r'], Y={'s': ['p', 'q'], 't': ['q', 'r'], 'u': ['p', 'r']}), Output: \"({'p': {'s', 'u'}, 'q': {'s', 't'}, 'r': {'t', 'u'}}, {'s': ['p', 'q'], 't': ['q', 'r'], 'u': ['p', 'r']})\"\nInput: dict(X=['x', 'y', 'z'], Y={'a': ['x', 'y'], 'b': ['y', 'z'], 'c': ['x', 'z']}), Output: \"({'x': {'a', 'c'}, 'y': {'a', 'b'}, 'z': {'c', 'b'}}, {'a': ['x', 'y'], 'b': ['y', 'z'], 'c': ['x', 'z']})\"\nInput: dict(X=['g', 'h', 'i'], Y={'f': ['g', 'h'], 'e': ['h', 'i'], 'd': ['g', 'i']}), Output: \"({'g': {'d', 'f'}, 'h': {'e', 'f'}, 'i': {'d', 'e'}}, {'f': ['g', 'h'], 'e': ['h', 'i'], 'd': ['g', 'i']})\"\nInput: dict(X=['m', 'n', 'o'], Y={'k': ['m', 'n'], 'l': ['n', 'o'], 'j': ['m', 'o']}), Output: \"({'m': {'k', 'j'}, 'n': {'k', 'l'}, 'o': {'l', 'j'}}, {'k': ['m', 'n'], 'l': ['n', 'o'], 'j': ['m', 'o']})\"\nInput: dict(X=[1, 2, 3], Y={1: [1, 2], 2: [2, 3], 3: [1, 3]}), Output: \"({1: {1, 3}, 2: {1, 2}, 3: {2, 3}}, {1: [1, 2], 2: [2, 3], 3: [1, 3]})\"\nInput: dict(X=[4, 5, 6], Y={4: [4, 5], 5: [5, 6], 6: [4, 6]}), Output: \"({4: {4, 6}, 5: {4, 5}, 6: {5, 6}}, {4: [4, 5], 5: [5, 6], 6: [4, 6]})\"\n\n", "id": "aeab3a881a82eb474b4db1e3fed95c1f70156b85_0"}
{"example_str": "examples = [\n    dict(n=1),\n    dict(n=5),\n    dict(n=10),\n    dict(n=0),\n    dict(n=-1),\n    dict(n=3),\n    dict(n=7),\n    dict(n=2),\n    dict(n=9),\n    dict(n=6),\n]\nexamples += [\n    dict(n=1),\n    dict(n=5),\n    dict(n=10),\n    dict(n=0),\n    dict(n=20),\n    dict(n=3),\n    dict(n=7),\n    dict(n=15),\n    dict(n=25),\n    dict(n=50)\n]\nexamples += [\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=5),\n    dict(n=8),\n    dict(n=10),\n    dict(n=13),\n    dict(n=21),\n    dict(n=34),\n    dict(n=55)\n]", "code": "def draw_stars(n):\n    return '*' * n\n", "func_name": "draw_stars", "exec_status": true, "example_inputs": ["\"{'n': 1}\"", "\"{'n': 5}\"", "\"{'n': 10}\"", "\"{'n': 0}\"", "\"{'n': -1}\"", "\"{'n': 3}\"", "\"{'n': 7}\"", "\"{'n': 2}\"", "\"{'n': 9}\"", "\"{'n': 6}\""], "example_outputs": [{"return": "\"'*'\""}, {"return": "\"'*****'\""}, {"return": "\"'**********'\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"'***'\""}, {"return": "\"'*******'\""}, {"return": "\"'**'\""}, {"return": "\"'*********'\""}, {"return": "\"'******'\""}, {"return": "\"'*'\""}, {"return": "\"'*****'\""}, {"return": "\"'**********'\""}, {"return": "\"''\""}, {"return": "\"'********************'\""}, {"return": "\"'***'\""}, {"return": "\"'*******'\""}, {"return": "\"'***************'\""}, {"return": "\"'*************************'\""}, {"return": "\"'**************************************************'\""}, {"return": "\"'*'\""}, {"return": "\"'**'\""}, {"return": "\"'***'\""}, {"return": "\"'*****'\""}, {"return": "\"'********'\""}, {"return": "\"'**********'\""}, {"return": "\"'*************'\""}, {"return": "\"'*********************'\""}, {"return": "\"'**********************************'\""}, {"return": "\"'*******************************************************'\""}], "parsed_inputs": [[["n", "1"]], [["n", "5"]], [["n", "10"]], [["n", "0"]], [["n", "-1"]], [["n", "3"]], [["n", "7"]], [["n", "2"]], [["n", "9"]], [["n", "6"]]], "exec_code": "def draw_stars(n):\n    return '*' * n\n", "output": "The function is:\n\n```python\ndef draw_stars(n):\n    return '*' * n\n\n```", "choosed_example_idx": [7, 4, 9, 8, 6, 3], "prompt": "Input: dict(n=2), Output: \"'**'\"\nInput: dict(n=-1), Output: \"''\"\nInput: dict(n=6), Output: \"'******'\"\nInput: dict(n=9), Output: \"'*********'\"\nInput: dict(n=7), Output: \"'*******'\"\nInput: dict(n=0), Output: \"''\"\n\nFunction: draw_stars\n\nWrite a function that generates the output from the input.\n\n", "id": "09b88c5dcf17210b2403072d5d62bc05a0d10a68_0"}
{"example_str": "examples = [\n    dict(land=[[1, 2, 3, 5], [5, 6, 7, 8], [4, 3, 2, 1]]),\n    dict(land=[[10, 11, 10, 11], [10, 11, 10, 11], [10, 11, 10, 11]]),\n    dict(land=[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]),\n    dict(land=[[5, 5, 5, 5], [5, 5, 5, 5], [5, 5, 5, 5]]),\n    dict(land=[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),\n    dict(land=[[10, 20, 30, 40], [50, 60, 70, 80], [90, 100, 110, 120]]),\n    dict(land=[[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]]),\n    dict(land=[[4, 4, 4, 4], [5, 5, 5, 5], [6, 6, 6, 6]]),\n    dict(land=[[7, 7, 7, 7], [8, 8, 8, 8], [9, 9, 9, 9]]),\n    dict(land=[[10, 10, 10, 10], [20, 20, 20, 20], [30, 30, 30, 30]])\n]\nexamples += [\n    dict(land=[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),\n    dict(land=[[0, 0, 0, 0], [1, 1, 1, 1], [2, 2, 2, 2]]),\n    dict(land=[[10, 20, 30, 40], [40, 30, 20, 10], [10, 20, 30, 40]]),\n    dict(land=[[3, 2, 1, 0], [0, 1, 2, 3], [3, 2, 1, 0]]),\n    dict(land=[[5, 5, 5, 5], [10, 10, 10, 10], [20, 20, 20, 20]]),\n    dict(land=[[1, 3, 5, 7], [7, 5, 3, 1], [2, 4, 6, 8], [8, 6, 4, 2]]),\n    dict(land=[[100, 200, 300, 400], [400, 300, 200, 100], [500, 600, 700, 800]]),\n    dict(land=[[0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0]]),\n    dict(land=[[123, 234, 345, 456], [456, 345, 234, 123], [234, 123, 456, 345]]),\n    dict(land=[[9, 8, 7, 6], [5, 4, 3, 2], [1, 2, 3, 4], [5, 6, 7, 8]])\n]\nexamples += [\n    dict(land=[[1, 2, 3, 4], [5, 6, 7, 8]]),\n    dict(land=[[10, 20, 30, 40], [5, 15, 25, 35], [10, 20, 30, 40]]),\n    dict(land=[[3, 2, 1, 0], [8, 7, 6, 5], [1, 2, 3, 4]]),\n    dict(land=[[0, 0, 0, 0], [1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]]),\n    dict(land=[[100, 200, 300, 400]]),\n    dict(land=[[1, 3, 5, 7], [2, 4, 6, 8], [1, 3, 5, 7]]),\n    dict(land=[[5, 5, 5, 5], [10, 10, 10, 10], [20, 20, 20, 20], [30, 30, 30, 30]]),\n    dict(land=[[7, 8, 9, 10], [10, 9, 8, 7], [7, 8, 9, 10], [10, 9, 8, 7]]),\n    dict(land=[[1, 2, 3, 4], [4, 3, 2, 1], [1, 2, 3, 4], [4, 3, 2, 1], [5, 6, 7, 8]]),\n    dict(land=[[0, 1, 2, 3], [3, 2, 1, 0], [0, 1, 2, 3], [3, 2, 1, 0], [0, 1, 2, 3], [3, 2, 1, 0]])\n]", "code": "def solution(land):\n    for i in range(1, len(land)):\n        for j in range(4):\n            land[i][j] += max(land[i - 1][0:j] + land[i - 1][j + 1:])\n    return max(land[-1])\n", "func_name": "solution", "exec_status": true, "example_inputs": ["\"{'land': [[1, 2, 3, 5], [5, 6, 7, 8], [4, 3, 2, 1]]}\"", "\"{'land': [[10, 11, 10, 11], [10, 11, 10, 11], [10, 11, 10, 11]]}\"", "\"{'land': [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]}\"", "\"{'land': [[5, 5, 5, 5], [5, 5, 5, 5], [5, 5, 5, 5]]}\"", "\"{'land': [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]}\"", "\"{'land': [[10, 20, 30, 40], [50, 60, 70, 80], [90, 100, 110, 120]]}\"", "\"{'land': [[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]]}\"", "\"{'land': [[4, 4, 4, 4], [5, 5, 5, 5], [6, 6, 6, 6]]}\"", "\"{'land': [[7, 7, 7, 7], [8, 8, 8, 8], [9, 9, 9, 9]]}\"", "\"{'land': [[10, 10, 10, 10], [20, 20, 20, 20], [30, 30, 30, 30]]}\""], "example_outputs": [{"return": "\"16\""}, {"return": "\"33\""}, {"return": "\"3\""}, {"return": "\"15\""}, {"return": "\"23\""}, {"return": "\"230\""}, {"return": "\"6\""}, {"return": "\"15\""}, {"return": "\"24\""}, {"return": "\"60\""}, {"return": "\"23\""}, {"return": "\"3\""}, {"return": "\"120\""}, {"return": "\"9\""}, {"return": "\"35\""}, {"return": "\"30\""}, {"return": "\"1600\""}, {"return": "\"4\""}, {"return": "\"1368\""}, {"return": "\"24\""}, {"return": "\"11\""}, {"return": "\"105\""}, {"return": "\"14\""}, {"return": "\"6\""}, {"return": "\"400\""}, {"return": "\"20\""}, {"return": "\"65\""}, {"return": "\"40\""}, {"return": "\"24\""}, {"return": "\"18\""}], "parsed_inputs": [[["land", "[[1, 2, 3, 5], [5, 6, 7, 8], [4, 3, 2, 1]]"]], [["land", "[[10, 11, 10, 11], [10, 11, 10, 11], [10, 11, 10, 11]]"]], [["land", "[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]"]], [["land", "[[5, 5, 5, 5], [5, 5, 5, 5], [5, 5, 5, 5]]"]], [["land", "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]"]], [["land", "[[10, 20, 30, 40], [50, 60, 70, 80], [90, 100, 110, 120]]"]], [["land", "[[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]]"]], [["land", "[[4, 4, 4, 4], [5, 5, 5, 5], [6, 6, 6, 6]]"]], [["land", "[[7, 7, 7, 7], [8, 8, 8, 8], [9, 9, 9, 9]]"]], [["land", "[[10, 10, 10, 10], [20, 20, 20, 20], [30, 30, 30, 30]]"]]], "exec_code": "def solution(land):\n    for i in range(1, len(land)):\n        for j in range(4):\n            land[i][j] += max(land[i - 1][0:j] + land[i - 1][j + 1:])\n    return max(land[-1])\n", "output": "The function is:\n\n```python\ndef solution(land):\n    for i in range(1, len(land)):\n        for j in range(4):\n            land[i][j] += max(land[i - 1][0:j] + land[i - 1][j + 1:])\n    return max(land[-1])\n\n```", "choosed_example_idx": [6, 2, 8, 3], "prompt": "Write a function that generates the output from the input.\nInput: dict(land=[[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]]), Output: \"6\"\nInput: dict(land=[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]), Output: \"3\"\nInput: dict(land=[[7, 7, 7, 7], [8, 8, 8, 8], [9, 9, 9, 9]]), Output: \"24\"\nInput: dict(land=[[5, 5, 5, 5], [5, 5, 5, 5], [5, 5, 5, 5]]), Output: \"15\"\n\n\nFunction: solution\n", "id": "a53ea1291d08acae2a9863b8f23cc5e6205a2770_0"}
{"example_str": "examples = [\n    dict(lst=[1, 2, 3, 4, 5]),\n    dict(lst=[\"a\", \"b\", \"c\", \"d\"]),\n    dict(lst=[True, False, True, False]),\n    dict(lst=[1.1, 2.2, 3.3, 4.4]),\n    dict(lst=[\"hello\", \"world\", \"python\", \"list\"]),\n    dict(lst=[1, \"a\", 2, \"b\", 3, \"c\"]),\n    dict(lst=[]),  # empty list\n    dict(lst=[1]),\n    dict(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),\n    dict(lst=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]),\n]\nexamples += [\n    dict(lst=[1, 2, 3, 4, 5]),\n    dict(lst=['a', 'b', 'c', 'd']),\n    dict(lst=[True, False, True]),\n    dict(lst=[1.1, 2.2, 3.3, 4.4]),\n    dict(lst=['apple', 'banana', 'cherry']),\n    dict(lst=[10, 20, 30, 40, 50]),\n    dict(lst=['x']),\n    dict(lst=[]),\n    dict(lst=[123, 'abc', True, 45.6]),\n    dict(lst=[[1, 2], [3, 4], [5, 6]])\n]\nexamples += [\n    dict(lst=[1, 2, 3, 4, 5]),\n    dict(lst=['a', 'b', 'c', 'd', 'e']),\n    dict(lst=[True, False, True]),\n    dict(lst=[1.1, 2.2, 3.3, 4.4]),\n    dict(lst=['apple', 'banana', 'cherry']),\n    dict(lst=[10, 9, 8, 7, 6, 5]),\n    dict(lst=[[1, 2], [3, 4], [5, 6]]),\n    dict(lst=['z', 'y', 'x', 'w', 'v', 'u', 't']),\n    dict(lst=[None, 'None', 'null']),\n    dict(lst=[{'a': 1}, {'b': 2}, {'c': 3}])\n]", "code": "def reverse_list(lst):\n    \"\"\"function to reverse elements in a list\"\"\"\n    lst.reverse()\n    return lst\n", "func_name": "reverse_list", "exec_status": true, "example_inputs": ["\"{'lst': [1, 2, 3, 4, 5]}\"", "\"{'lst': ['a', 'b', 'c', 'd']}\"", "\"{'lst': [True, False, True, False]}\"", "\"{'lst': [1.1, 2.2, 3.3, 4.4]}\"", "\"{'lst': ['hello', 'world', 'python', 'list']}\"", "\"{'lst': [1, 'a', 2, 'b', 3, 'c']}\"", "\"{'lst': []}\"", "\"{'lst': [1]}\"", "\"{'lst': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}\"", "\"{'lst': ['apple', 'banana', 'cherry', 'date', 'elderberry']}\""], "example_outputs": [{"return": "\"[5, 4, 3, 2, 1]\""}, {"return": "\"['d', 'c', 'b', 'a']\""}, {"return": "\"[False, True, False, True]\""}, {"return": "\"[4.4, 3.3, 2.2, 1.1]\""}, {"return": "\"['list', 'python', 'world', 'hello']\""}, {"return": "\"['c', 3, 'b', 2, 'a', 1]\""}, {"return": "\"[]\""}, {"return": "\"[1]\""}, {"return": "\"[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\""}, {"return": "\"['elderberry', 'date', 'cherry', 'banana', 'apple']\""}, {"return": "\"[5, 4, 3, 2, 1]\""}, {"return": "\"['d', 'c', 'b', 'a']\""}, {"return": "\"[True, False, True]\""}, {"return": "\"[4.4, 3.3, 2.2, 1.1]\""}, {"return": "\"['cherry', 'banana', 'apple']\""}, {"return": "\"[50, 40, 30, 20, 10]\""}, {"return": "\"['x']\""}, {"return": "\"[]\""}, {"return": "\"[45.6, True, 'abc', 123]\""}, {"return": "\"[[5, 6], [3, 4], [1, 2]]\""}, {"return": "\"[5, 4, 3, 2, 1]\""}, {"return": "\"['e', 'd', 'c', 'b', 'a']\""}, {"return": "\"[True, False, True]\""}, {"return": "\"[4.4, 3.3, 2.2, 1.1]\""}, {"return": "\"['cherry', 'banana', 'apple']\""}, {"return": "\"[5, 6, 7, 8, 9, 10]\""}, {"return": "\"[[5, 6], [3, 4], [1, 2]]\""}, {"return": "\"['t', 'u', 'v', 'w', 'x', 'y', 'z']\""}, {"return": "\"['null', 'None', None]\""}, {"return": "\"[{'c': 3}, {'b': 2}, {'a': 1}]\""}], "parsed_inputs": [[["lst", "[1, 2, 3, 4, 5]"]], [["lst", "['a', 'b', 'c', 'd']"]], [["lst", "[True, False, True, False]"]], [["lst", "[1.1, 2.2, 3.3, 4.4]"]], [["lst", "['hello', 'world', 'python', 'list']"]], [["lst", "[1, 'a', 2, 'b', 3, 'c']"]], [["lst", "[]"]], [["lst", "[1]"]], [["lst", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"]], [["lst", "['apple', 'banana', 'cherry', 'date', 'elderberry']"]]], "exec_code": "def reverse_list(lst):\n    \"\"\"function to reverse elements in a list\"\"\"\n    lst.reverse()\n    return lst\n", "output": "The function is:\n\n```python\ndef reverse_list(lst):\n    \"\"\"function to reverse elements in a list\"\"\"\n    lst.reverse()\n    return lst\n\n```", "choosed_example_idx": [7, 4, 6, 3, 1, 0], "prompt": "Input: dict(lst=[1]), Output: \"[1]\"\nInput: dict(lst=['hello', 'world', 'python', 'list']), Output: \"['list', 'python', 'world', 'hello']\"\nInput: dict(lst=[]), Output: \"[]\"\nInput: dict(lst=[1.1, 2.2, 3.3, 4.4]), Output: \"[4.4, 3.3, 2.2, 1.1]\"\nInput: dict(lst=['a', 'b', 'c', 'd']), Output: \"['d', 'c', 'b', 'a']\"\nInput: dict(lst=[1, 2, 3, 4, 5]), Output: \"[5, 4, 3, 2, 1]\"\n\n\nWrite a function that generates the output from the input.\nFunction: reverse_list\n", "id": "7189bfef24954ebf87d559c4174c651ea9e0b076_0"}
{"example_str": "examples = [\n    dict(node={'index': 0, 'value': 5, 'left': 1, 'right': 2}, row=[3, 4, 5]),\n    dict(node={'index': 1, 'value': 3, 'left': {'index': 2, 'value': 2, 'left': 3, 'right': 4}, 'right': 5}, row=[1, 2, 3]),\n    dict(node={'index': 2, 'value': 1, 'left': 6, 'right': 7}, row=[0, 1, 2]),\n    dict(node={'index': 0, 'value': 10, 'left': {'index': 1, 'value': 5, 'left': 8, 'right': 9}, 'right': 11}, row=[9, 8, 7]),\n    dict(node={'index': 1, 'value': 7, 'left': 12, 'right': 13}, row=[6, 5, 4]),\n    dict(node={'index': 2, 'value': 9, 'left': {'index': 0, 'value': 3, 'left': 14, 'right': 15}, 'right': 16}, row=[8, 7, 6]),\n    dict(node={'index': 0, 'value': 2, 'left': 17, 'right': 18}, row=[1, 2, 3]),\n    dict(node={'index': 1, 'value': 6, 'left': {'index': 2, 'value': 4, 'left': 19, 'right': 20}, 'right': 21}, row=[5, 4, 3]),\n    dict(node={'index': 2, 'value': 8, 'left': 22, 'right': 23}, row=[7, 6, 5]),\n    dict(node={'index': 0, 'value': 4, 'left': {'index': 1, 'value': 2, 'left': 24, 'right': 25}, 'right': 26}, row=[3, 2, 1]),\n]\nexamples += [\n    dict(node={'index': 0, 'value': 5, 'left': 1, 'right': 0}, row=[3]),\n    dict(node={'index': 1, 'value': 10, 'left': 0, 'right': 1}, row=[5, 15]),\n    dict(node={'index': 2, 'value': 20, 'left': 0, 'right': 1}, row=[10, 5, 25]),\n    dict(node={'index': 0, 'value': 7, 'left': {'index': 1, 'value': 3, 'left': 1, 'right': 0}, 'right': 0}, row=[6, 2]),\n    dict(node={'index': 1, 'value': 4, 'left': 1, 'right': {'index': 0, 'value': 2, 'left': 0, 'right': 1}}, row=[1, 3]),\n    dict(node={'index': 0, 'value': 3, 'left': 0, 'right': {'index': 1, 'value': 5, 'left': 1, 'right': 0}}, row=[4, 6]),\n    dict(node={'index': 2, 'value': 15, 'left': {'index': 0, 'value': 10, 'left': 1, 'right': 0}, 'right': 1}, row=[12, 9, 14]),\n    dict(node={'index': 1, 'value': 8, 'left': 0, 'right': {'index': 0, 'value': 5, 'left': 1, 'right': 0}}, row=[10, 7]),\n    dict(node={'index': 0, 'value': 2, 'left': 1, 'right': {'index': 1, 'value': 6, 'left': 0, 'right': 1}}, row=[1, 7]),\n    dict(node={'index': 1, 'value': 9, 'left': {'index': 0, 'value': 4, 'left': 1, 'right': 0}, 'right': 1}, row=[3, 10])\n]\nexamples += [\n    dict(node={'index': 0, 'value': 5, 'left': 1, 'right': 0}, row=[3]),\n    dict(node={'index': 1, 'value': 10, 'left': 0, 'right': 1}, row=[5, 9]),\n    dict(node={'index': 2, 'value': 20, 'left': 1, 'right': 0}, row=[10, 15, 25]),\n    dict(node={'index': 0, 'value': 7, 'left': {'index': 1, 'value': 5, 'left': 1, 'right': 0}, 'right': 0}, row=[6, 4]),\n    dict(node={'index': 1, 'value': 3, 'left': 0, 'right': {'index': 0, 'value': 2, 'left': 1, 'right': 0}}, row=[1, 2]),\n    dict(node={'index': 0, 'value': 8, 'left': 0, 'right': {'index': 1, 'value': 7, 'left': 1, 'right': 0}}, row=[9, 6]),\n    dict(node={'index': 2, 'value': 15, 'left': {'index': 0, 'value': 10, 'left': 1, 'right': 0}, 'right': 0}, row=[5, 10, 14]),\n    dict(node={'index': 1, 'value': 4, 'left': 0, 'right': {'index': 0, 'value': 3, 'left': 1, 'right': 0}}, row=[3, 3]),\n    dict(node={'index': 0, 'value': 6, 'left': 1, 'right': {'index': 1, 'value': 5, 'left': 0, 'right': 1}}, row=[7, 4]),\n    dict(node={'index': 2, 'value': 12, 'left': 0, 'right': {'index': 1, 'value': 11, 'left': 1, 'right': 0}}, row=[10, 13, 11])\n]", "code": "def predict_tree(node, row):\n    if row[node['index']] < node['value']:\n        if isinstance(node['left'], dict):\n            return predict_tree(node['left'], row)\n        else:\n            return node['left']\n    elif isinstance(node['right'], dict):\n        return predict_tree(node['right'], row)\n    else:\n        return node['right']\n", "func_name": "predict_tree", "exec_status": true, "example_inputs": ["\"{'node': {'index': 0, 'value': 5, 'left': 1, 'right': 2}, 'row': [3, 4, 5]}\"", "\"{'node': {'index': 1, 'value': 3, 'left': {'index': 2, 'value': 2, 'left': 3, 'right': 4}, 'right': 5}, 'row': [1, 2, 3]}\"", "\"{'node': {'index': 2, 'value': 1, 'left': 6, 'right': 7}, 'row': [0, 1, 2]}\"", "\"{'node': {'index': 0, 'value': 10, 'left': {'index': 1, 'value': 5, 'left': 8, 'right': 9}, 'right': 11}, 'row': [9, 8, 7]}\"", "\"{'node': {'index': 1, 'value': 7, 'left': 12, 'right': 13}, 'row': [6, 5, 4]}\"", "\"{'node': {'index': 2, 'value': 9, 'left': {'index': 0, 'value': 3, 'left': 14, 'right': 15}, 'right': 16}, 'row': [8, 7, 6]}\"", "\"{'node': {'index': 0, 'value': 2, 'left': 17, 'right': 18}, 'row': [1, 2, 3]}\"", "\"{'node': {'index': 1, 'value': 6, 'left': {'index': 2, 'value': 4, 'left': 19, 'right': 20}, 'right': 21}, 'row': [5, 4, 3]}\"", "\"{'node': {'index': 2, 'value': 8, 'left': 22, 'right': 23}, 'row': [7, 6, 5]}\"", "\"{'node': {'index': 0, 'value': 4, 'left': {'index': 1, 'value': 2, 'left': 24, 'right': 25}, 'right': 26}, 'row': [3, 2, 1]}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"4\""}, {"return": "\"7\""}, {"return": "\"9\""}, {"return": "\"12\""}, {"return": "\"15\""}, {"return": "\"17\""}, {"return": "\"19\""}, {"return": "\"22\""}, {"return": "\"25\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}], "parsed_inputs": [[["node", "{'index': 0, 'value': 5, 'left': 1, 'right': 2}"], ["row", "[3, 4, 5]"]], [["node", "{'index': 1, 'value': 3, 'left': {'index': 2, 'value': 2, 'left': 3, 'right': 4}, 'right': 5}"], ["row", "[1, 2, 3]"]], [["node", "{'index': 2, 'value': 1, 'left': 6, 'right': 7}"], ["row", "[0, 1, 2]"]], [["node", "{'index': 0, 'value': 10, 'left': {'index': 1, 'value': 5, 'left': 8, 'right': 9}, 'right': 11}"], ["row", "[9, 8, 7]"]], [["node", "{'index': 1, 'value': 7, 'left': 12, 'right': 13}"], ["row", "[6, 5, 4]"]], [["node", "{'index': 2, 'value': 9, 'left': {'index': 0, 'value': 3, 'left': 14, 'right': 15}, 'right': 16}"], ["row", "[8, 7, 6]"]], [["node", "{'index': 0, 'value': 2, 'left': 17, 'right': 18}"], ["row", "[1, 2, 3]"]], [["node", "{'index': 1, 'value': 6, 'left': {'index': 2, 'value': 4, 'left': 19, 'right': 20}, 'right': 21}"], ["row", "[5, 4, 3]"]], [["node", "{'index': 2, 'value': 8, 'left': 22, 'right': 23}"], ["row", "[7, 6, 5]"]], [["node", "{'index': 0, 'value': 4, 'left': {'index': 1, 'value': 2, 'left': 24, 'right': 25}, 'right': 26}"], ["row", "[3, 2, 1]"]]], "exec_code": "def predict_tree(node, row):\n    if row[node['index']] < node['value']:\n        if isinstance(node['left'], dict):\n            return predict_tree(node['left'], row)\n        else:\n            return node['left']\n    elif isinstance(node['right'], dict):\n        return predict_tree(node['right'], row)\n    else:\n        return node['right']\n", "output": "The function is:\n\n```python\ndef predict_tree(node, row):\n    if row[node['index']] < node['value']:\n        if isinstance(node['left'], dict):\n            return predict_tree(node['left'], row)\n        else:\n            return node['left']\n    elif isinstance(node['right'], dict):\n        return predict_tree(node['right'], row)\n    else:\n        return node['right']\n\n```", "choosed_example_idx": [6, 2, 4, 3, 9, 7, 5, 0], "prompt": "Input: dict(node={'index': 0, 'value': 2, 'left': 17, 'right': 18}, row=[1, 2, 3]), Output: \"17\"\nInput: dict(node={'index': 2, 'value': 1, 'left': 6, 'right': 7}, row=[0, 1, 2]), Output: \"7\"\nInput: dict(node={'index': 1, 'value': 7, 'left': 12, 'right': 13}, row=[6, 5, 4]), Output: \"12\"\nInput: dict(node={'index': 0, 'value': 10, 'left': {'index': 1, 'value': 5, 'left': 8, 'right': 9}, 'right': 11}, row=[9, 8, 7]), Output: \"9\"\nInput: dict(node={'index': 0, 'value': 4, 'left': {'index': 1, 'value': 2, 'left': 24, 'right': 25}, 'right': 26}, row=[3, 2, 1]), Output: \"25\"\nInput: dict(node={'index': 1, 'value': 6, 'left': {'index': 2, 'value': 4, 'left': 19, 'right': 20}, 'right': 21}, row=[5, 4, 3]), Output: \"19\"\nInput: dict(node={'index': 2, 'value': 9, 'left': {'index': 0, 'value': 3, 'left': 14, 'right': 15}, 'right': 16}, row=[8, 7, 6]), Output: \"15\"\nInput: dict(node={'index': 0, 'value': 5, 'left': 1, 'right': 2}, row=[3, 4, 5]), Output: \"1\"\n\nWrite a function that generates the output from the input.\nFunction: predict_tree\n\n\n", "id": "7a0f5f462464b067f51c32ece73978fe9dfe0594_0"}
{"example_str": "examples = [\n    dict(s=\"Hello World\"),\n    dict(s=\"hello\"),\n    dict(s=\"WORLD\"),\n    dict(s=\"123 ABC\"),\n    dict(s=\"abc def\"),\n    dict(s=\"ABC123\"),\n    dict(s=\"aBcDeF\"),\n    dict(s=\"\"),\n    dict(s=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"),\n    dict(s=\"abcdefghijklmnopqrstuvwxyz\"),\n]\nexamples += [\n    dict(s=\"Hello World\"),\n    dict(s=\"Python3.8\"),\n    dict(s=\"1234\"),\n    dict(s=\"\"),\n    dict(s=\"CASE\"),\n    dict(s=\"case\"),\n    dict(s=\"MixedCASE123\"),\n    dict(s=\"!@#$%^&*()\"),\n    dict(s=\"Line1\\nLine2\"),\n    dict(s=\"camelCase\")\n]\nexamples += [\n    dict(s=\"Hello World\"),\n    dict(s=\"Python\"),\n    dict(s=\"123 ABC xyz\"),\n    dict(s=\"\"),\n    dict(s=\"ALL LOWER\"),\n    dict(s=\"all upper\"),\n    dict(s=\"MiXeD CaSe\"),\n    dict(s=\"12345\"),\n    dict(s=\"Special #$%^&*()\"),\n    dict(s=\"Line\\nBreak\")\n]", "code": "def swap_case(s):\n    ans = ''\n    for i in s:\n        if not i.islower():\n            ans += i.lower()\n        else:\n            ans += i.upper()\n    return ans\n", "func_name": "swap_case", "exec_status": true, "example_inputs": ["\"{'s': 'Hello World'}\"", "\"{'s': 'hello'}\"", "\"{'s': 'WORLD'}\"", "\"{'s': '123 ABC'}\"", "\"{'s': 'abc def'}\"", "\"{'s': 'ABC123'}\"", "\"{'s': 'aBcDeF'}\"", "\"{'s': ''}\"", "\"{'s': 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'}\"", "\"{'s': 'abcdefghijklmnopqrstuvwxyz'}\""], "example_outputs": [{"return": "\"'hELLO wORLD'\""}, {"return": "\"'HELLO'\""}, {"return": "\"'world'\""}, {"return": "\"'123 abc'\""}, {"return": "\"'ABC DEF'\""}, {"return": "\"'abc123'\""}, {"return": "\"'AbCdEf'\""}, {"return": "\"''\""}, {"return": "\"'abcdefghijklmnopqrstuvwxyz'\""}, {"return": "\"'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\""}, {"return": "\"'hELLO wORLD'\""}, {"return": "\"'pYTHON3.8'\""}, {"return": "\"'1234'\""}, {"return": "\"''\""}, {"return": "\"'case'\""}, {"return": "\"'CASE'\""}, {"return": "\"'mIXEDcase123'\""}, {"return": "\"'!@#$%^&*()'\""}, {"return": "\"'lINE1\\\\nlINE2'\""}, {"return": "\"'CAMELcASE'\""}, {"return": "\"'hELLO wORLD'\""}, {"return": "\"'pYTHON'\""}, {"return": "\"'123 abc XYZ'\""}, {"return": "\"''\""}, {"return": "\"'all lower'\""}, {"return": "\"'ALL UPPER'\""}, {"return": "\"'mIxEd cAsE'\""}, {"return": "\"'12345'\""}, {"return": "\"'sPECIAL #$%^&*()'\""}, {"return": "\"'lINE\\\\nbREAK'\""}], "parsed_inputs": [[["s", "\"Hello World\""]], [["s", "\"hello\""]], [["s", "\"WORLD\""]], [["s", "\"123 ABC\""]], [["s", "\"abc def\""]], [["s", "\"ABC123\""]], [["s", "\"aBcDeF\""]], [["s", "\"\""]], [["s", "\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\""]], [["s", "\"abcdefghijklmnopqrstuvwxyz\""]]], "exec_code": "def swap_case(s):\n    ans = ''\n    for i in s:\n        if not i.islower():\n            ans += i.lower()\n        else:\n            ans += i.upper()\n    return ans\n", "output": "The function is:\n\n```python\ndef swap_case(s):\n    ans = ''\n    for i in s:\n        if not i.islower():\n            ans += i.lower()\n        else:\n            ans += i.upper()\n    return ans\n\n```", "choosed_example_idx": [4, 3, 7, 1, 0, 5, 9], "prompt": "Input: dict(s=\"abc def\"), Output: \"'ABC DEF'\"\nInput: dict(s=\"123 ABC\"), Output: \"'123 abc'\"\nInput: dict(s=\"\"), Output: \"''\"\nInput: dict(s=\"hello\"), Output: \"'HELLO'\"\nInput: dict(s=\"Hello World\"), Output: \"'hELLO wORLD'\"\nInput: dict(s=\"ABC123\"), Output: \"'abc123'\"\nInput: dict(s=\"abcdefghijklmnopqrstuvwxyz\"), Output: \"'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\"\n\n\nFunction: swap_case\n\nWrite a function that generates the output from the input.\n\n", "id": "4657f618dc42d82d56a024981518f08a422b8872_0"}
{"example_str": "examples = [\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10),\n]\nexamples += [\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=10),\n    dict(n=15),\n    dict(n=20),\n    dict(n=25),\n    dict(n=30)\n]\nexamples += [\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10)\n]", "code": "def climb_stairs(n):\n    if n in (1, 2):\n        return n\n    if n in memo:\n        return memo[n]\n    ans = climb_stairs(n - 1) + climb_stairs(n - 2)\n    memo[n] = ans\n    return ans\n", "func_name": "climb_stairs", "exec_status": true, "example_inputs": ["\"{'n': 1}\"", "\"{'n': 2}\"", "\"{'n': 3}\"", "\"{'n': 4}\"", "\"{'n': 5}\"", "\"{'n': 6}\"", "\"{'n': 7}\"", "\"{'n': 8}\"", "\"{'n': 9}\"", "\"{'n': 10}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"2\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'memo' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'memo' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'memo' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'memo' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'memo' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'memo' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'memo' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'memo' is not defined\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'memo' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'memo' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'memo' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'memo' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'memo' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'memo' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'memo' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'memo' is not defined\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'memo' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'memo' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'memo' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'memo' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'memo' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'memo' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'memo' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'memo' is not defined\""}], "parsed_inputs": [[["n", "1"]], [["n", "2"]], [["n", "3"]], [["n", "4"]], [["n", "5"]], [["n", "6"]], [["n", "7"]], [["n", "8"]], [["n", "9"]], [["n", "10"]]], "exec_code": "def climb_stairs(n):\n    if n in (1, 2):\n        return n\n    if n in memo:\n        return memo[n]\n    ans = climb_stairs(n - 1) + climb_stairs(n - 2)\n    memo[n] = ans\n    return ans\n", "output": "The function is:\n\n```python\ndef climb_stairs(n):\n    if n in (1, 2):\n        return n\n    if n in memo:\n        return memo[n]\n    ans = climb_stairs(n - 1) + climb_stairs(n - 2)\n    memo[n] = ans\n    return ans\n\n```", "choosed_example_idx": [9, 7, 3, 1, 0, 4, 5], "prompt": "Input: dict(n=10), Output: \"<class 'NameError'>: name 'memo' is not defined\"\nInput: dict(n=8), Output: \"<class 'NameError'>: name 'memo' is not defined\"\nInput: dict(n=4), Output: \"<class 'NameError'>: name 'memo' is not defined\"\nInput: dict(n=2), Output: \"2\"\nInput: dict(n=1), Output: \"1\"\nInput: dict(n=5), Output: \"<class 'NameError'>: name 'memo' is not defined\"\nInput: dict(n=6), Output: \"<class 'NameError'>: name 'memo' is not defined\"\n\n\n\nFunction: climb_stairs\n\nWrite a function that generates the output from the input.\n\n\n", "id": "2028d3eb7a13c5026ead26adb3f9d0a63527af0b_0"}
{"example_str": "examples = [\n    dict(value=1),\n    dict(value=2),\n    dict(value=3),\n    dict(value=4),\n    dict(value=5),\n    dict(value=0),\n    dict(value=-1),\n    dict(value=10),\n    dict(value=20),\n    dict(value=50),\n]\nexamples += [\n    dict(value=1),\n    dict(value=2),\n    dict(value=0),\n    dict(value=5),\n    dict(value=10),\n    dict(value=3),\n    dict(value=8),\n    dict(value=4),\n    dict(value=6),\n    dict(value=7)\n]\nexamples += [\n    dict(value=1),\n    dict(value=2),\n    dict(value=3),\n    dict(value=4),\n    dict(value=5),\n    dict(value=6),\n    dict(value=7),\n    dict(value=8),\n    dict(value=9),\n    dict(value=10)\n]", "code": "def separador(value):\n    return print(f'\\n' * value)\n", "func_name": "separador", "exec_status": true, "example_inputs": ["\"{'value': 1}\"", "\"{'value': 2}\"", "\"{'value': 3}\"", "\"{'value': 4}\"", "\"{'value': 5}\"", "\"{'value': 0}\"", "\"{'value': -1}\"", "\"{'value': 10}\"", "\"{'value': 20}\"", "\"{'value': 50}\""], "example_outputs": [{"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}], "parsed_inputs": [[["value", "1"]], [["value", "2"]], [["value", "3"]], [["value", "4"]], [["value", "5"]], [["value", "0"]], [["value", "-1"]], [["value", "10"]], [["value", "20"]], [["value", "50"]]], "exec_code": "def separador(value):\n    return print(f'\\n' * value)\n", "output": "The function is:\n\n```python\ndef separador(value):\n    return print(f'\\n' * value)\n\n```", "choosed_example_idx": [3, 8, 2], "prompt": "Input: dict(value=4), Output: \"None\"\nInput: dict(value=20), Output: \"None\"\nInput: dict(value=3), Output: \"None\"\n\n\n\nWrite a function that generates the output from the input.\nFunction: separador\n\n\n", "id": "d1f2299781b34d03caf29b6c7b486fa9de374fe9_0"}
{"example_str": "examples = [\n    dict(columns=[{'name': 'A', 'type': 'int'}, {'name': 'B', 'type': 'str'}], column_name='A'),\n    dict(columns=[{'name': 'X', 'type': 'float'}, {'name': 'Y', 'type': 'int'}], column_name='Y'),\n    dict(columns=[{'name': 'foo', 'type': 'str'}, {'name': 'bar', 'type': 'bool'}], column_name='foo'),\n    dict(columns=[{'name': 'column1', 'type': 'int'}, {'name': 'column2', 'type': 'str'}], column_name='column2'),\n    dict(columns=[{'name': 'a', 'type': 'int'}, {'name': 'b', 'type': 'float'}, {'name': 'c', 'type': 'str'}], column_name='b'),\n    dict(columns=[], column_name='any_name'),\n    dict(columns=[{'name': 'column', 'type': 'int'}], column_name='column'),\n    dict(columns=[{'name': 'x', 'type': 'int'}, {'name': 'y', 'type': 'int'}], column_name='z'),\n    dict(columns=[{'name': 'foo_bar', 'type': 'str'}], column_name='foo_bar'),\n    dict(columns=[{'type': 'int'}, {'name': 'bar', 'type': 'bool'}], column_name='bar'),\n]\nexamples += [\n    dict(columns=[{'name': 'id'}, {'name': 'name'}], column_name='name'),\n    dict(columns=[{'name': 'age'}, {'name': 'email'}, {'name': 'address'}], column_name='email'),\n    dict(columns=[{'name': 'city'}, {'name': 'country'}], column_name='city'),\n    dict(columns=[{'name': 'first_name'}, {'name': 'last_name'}], column_name='last_name'),\n    dict(columns=[{'name': 'phone'}, {'name': 'fax'}, {'name': 'email'}], column_name='fax'),\n    dict(columns=[{'name': 'zipcode'}, {'name': 'state'}], column_name='state'),\n    dict(columns=[{'name': 'latitude'}, {'name': 'longitude'}], column_name='longitude'),\n    dict(columns=[{'name': 'username'}, {'name': 'password'}], column_name='username'),\n    dict(columns=[{'name': 'title'}, {'name': 'description'}], column_name='title'),\n    dict(columns=[{'name': 'price'}, {'name': 'quantity'}, {'name': 'description'}], column_name='quantity')\n]\nexamples += [\n    dict(columns=[{'name': 'id'}, {'name': 'name'}], column_name='name'),\n    dict(columns=[{'name': 'age'}, {'name': 'email'}], column_name='email'),\n    dict(columns=[{'name': 'first_name'}, {'name': 'last_name'}], column_name='last_name'),\n    dict(columns=[{'name': 'city'}, {'name': 'country'}], column_name='country'),\n    dict(columns=[{'name': 'username'}, {'name': 'password'}], column_name='username'),\n    dict(columns=[{'name': 'product'}, {'name': 'price'}], column_name='price'),\n    dict(columns=[{'name': 'date'}, {'name': 'event'}], column_name='event'),\n    dict(columns=[{'name': 'latitude'}, {'name': 'longitude'}], column_name='longitude'),\n    dict(columns=[{'name': 'title'}, {'name': 'description'}], column_name='title'),\n    dict(columns=[{'name': 'author'}, {'name': 'publisher'}, {'name': 'year'}], column_name='publisher')\n]", "code": "def _get_column_by_name(columns, column_name):\n    for c in columns:\n        if 'name' in c and c['name'] == column_name:\n            return c\n    return None\n", "func_name": "_get_column_by_name", "exec_status": true, "example_inputs": ["\"{'columns': [{'name': 'A', 'type': 'int'}, {'name': 'B', 'type': 'str'}], 'column_name': 'A'}\"", "\"{'columns': [{'name': 'X', 'type': 'float'}, {'name': 'Y', 'type': 'int'}], 'column_name': 'Y'}\"", "\"{'columns': [{'name': 'foo', 'type': 'str'}, {'name': 'bar', 'type': 'bool'}], 'column_name': 'foo'}\"", "\"{'columns': [{'name': 'column1', 'type': 'int'}, {'name': 'column2', 'type': 'str'}], 'column_name': 'column2'}\"", "\"{'columns': [{'name': 'a', 'type': 'int'}, {'name': 'b', 'type': 'float'}, {'name': 'c', 'type': 'str'}], 'column_name': 'b'}\"", "\"{'columns': [], 'column_name': 'any_name'}\"", "\"{'columns': [{'name': 'column', 'type': 'int'}], 'column_name': 'column'}\"", "\"{'columns': [{'name': 'x', 'type': 'int'}, {'name': 'y', 'type': 'int'}], 'column_name': 'z'}\"", "\"{'columns': [{'name': 'foo_bar', 'type': 'str'}], 'column_name': 'foo_bar'}\"", "\"{'columns': [{'type': 'int'}, {'name': 'bar', 'type': 'bool'}], 'column_name': 'bar'}\""], "example_outputs": [{"return": "\"{'name': 'A', 'type': 'int'}\""}, {"return": "\"{'name': 'Y', 'type': 'int'}\""}, {"return": "\"{'name': 'foo', 'type': 'str'}\""}, {"return": "\"{'name': 'column2', 'type': 'str'}\""}, {"return": "\"{'name': 'b', 'type': 'float'}\""}, {"return": "\"None\""}, {"return": "\"{'name': 'column', 'type': 'int'}\""}, {"return": "\"None\""}, {"return": "\"{'name': 'foo_bar', 'type': 'str'}\""}, {"return": "\"{'name': 'bar', 'type': 'bool'}\""}, {"return": "\"{'name': 'name'}\""}, {"return": "\"{'name': 'email'}\""}, {"return": "\"{'name': 'city'}\""}, {"return": "\"{'name': 'last_name'}\""}, {"return": "\"{'name': 'fax'}\""}, {"return": "\"{'name': 'state'}\""}, {"return": "\"{'name': 'longitude'}\""}, {"return": "\"{'name': 'username'}\""}, {"return": "\"{'name': 'title'}\""}, {"return": "\"{'name': 'quantity'}\""}, {"return": "\"{'name': 'name'}\""}, {"return": "\"{'name': 'email'}\""}, {"return": "\"{'name': 'last_name'}\""}, {"return": "\"{'name': 'country'}\""}, {"return": "\"{'name': 'username'}\""}, {"return": "\"{'name': 'price'}\""}, {"return": "\"{'name': 'event'}\""}, {"return": "\"{'name': 'longitude'}\""}, {"return": "\"{'name': 'title'}\""}, {"return": "\"{'name': 'publisher'}\""}], "parsed_inputs": [[["columns", "[{'name': 'A', 'type': 'int'}, {'name': 'B', 'type': 'str'}]"], ["column_name", "\"A\""]], [["columns", "[{'name': 'X', 'type': 'float'}, {'name': 'Y', 'type': 'int'}]"], ["column_name", "\"Y\""]], [["columns", "[{'name': 'foo', 'type': 'str'}, {'name': 'bar', 'type': 'bool'}]"], ["column_name", "\"foo\""]], [["columns", "[{'name': 'column1', 'type': 'int'}, {'name': 'column2', 'type': 'str'}]"], ["column_name", "\"column2\""]], [["columns", "[{'name': 'a', 'type': 'int'}, {'name': 'b', 'type': 'float'}, {'name': 'c', 'type': 'str'}]"], ["column_name", "\"b\""]], [["columns", "[]"], ["column_name", "\"any_name\""]], [["columns", "[{'name': 'column', 'type': 'int'}]"], ["column_name", "\"column\""]], [["columns", "[{'name': 'x', 'type': 'int'}, {'name': 'y', 'type': 'int'}]"], ["column_name", "\"z\""]], [["columns", "[{'name': 'foo_bar', 'type': 'str'}]"], ["column_name", "\"foo_bar\""]], [["columns", "[{'type': 'int'}, {'name': 'bar', 'type': 'bool'}]"], ["column_name", "\"bar\""]]], "exec_code": "def _get_column_by_name(columns, column_name):\n    for c in columns:\n        if 'name' in c and c['name'] == column_name:\n            return c\n    return None\n", "output": "The function is:\n\n```python\ndef _get_column_by_name(columns, column_name):\n    for c in columns:\n        if 'name' in c and c['name'] == column_name:\n            return c\n    return None\n\n```", "choosed_example_idx": [0, 8, 7], "prompt": "Input: dict(columns=[{'name': 'A', 'type': 'int'}, {'name': 'B', 'type': 'str'}], column_name=\"A\"), Output: \"{'name': 'A', 'type': 'int'}\"\nInput: dict(columns=[{'name': 'foo_bar', 'type': 'str'}], column_name=\"foo_bar\"), Output: \"{'name': 'foo_bar', 'type': 'str'}\"\nInput: dict(columns=[{'name': 'x', 'type': 'int'}, {'name': 'y', 'type': 'int'}], column_name=\"z\"), Output: \"None\"\n\nFunction: _get_column_by_name\nWrite a function that generates the output from the input.\n", "id": "86c3cd42815aa771dc2c0831c9604b5b767bbbd5_0"}
{"example_str": "examples = [\n    dict(val=[{'gender': 'Male'}, {'gender': 'Female'}, {'gender': 'Male'}]),\n    dict(val=[{'gender': 'Female'}, {'gender': 'Female'}, {'gender': 'Female'}]),\n    dict(val=[{'gender': 'Male'}, {'gender': 'Male'}, {'gender': 'Male'}]),\n    dict(val=[{'gender': 'Male'}, {'gender': 'Female'}, {'gender': 'Other'}]),\n    dict(val=[{'gender': 'Female'}, {'gender': 'Female'}, {'gender': 'Other'}]),\n    dict(val=[{'gender': 'Male'}, {'gender': 'Male'}, {'gender': 'Other'}]),\n    dict(val=[{'gender': 'Other'}, {'gender': 'Other'}, {'gender': 'Other'}]),\n    dict(val=[{'gender': 'Male'}, {'gender': 'Female'}]),\n    dict(val=[{'gender': 'Female'}, {'gender': 'Other'}]),\n    dict(val=[{'gender': 'Male'}, {'gender': 'Other'}]),\n]\nexamples += [\n    dict(val=[{'gender': 'male'}, {'gender': 'female'}]),\n    dict(val=[{'gender': 'female'}, {'gender': 'female'}, {'gender': 'male'}]),\n    dict(val=[{'gender': 'non-binary'}, {'gender': 'male'}, {'gender': 'female'}]),\n    dict(val=[{'gender': 'male'}, {'gender': 'male'}, {'gender': 'male'}]),\n    dict(val=[{'gender': 'female'}]),\n    dict(val=[{'gender': 'non-binary'}, {'gender': 'non-binary'}]),\n    dict(val=[{'gender': 'female'}, {'gender': 'male'}, {'gender': 'transgender'}]),\n    dict(val=[{'gender': 'male'}, {'gender': 'transgender'}, {'gender': 'non-binary'}]),\n    dict(val=[{'gender': 'transgender'}, {'gender': 'transgender'}]),\n    dict(val=[{'gender': 'male'}, {'gender': 'female'}, {'gender': 'non-binary'}, {'gender': 'transgender'}])\n]\nexamples += [\n    dict(val=[{'gender': 'male'}, {'gender': 'female'}]),\n    dict(val=[{'gender': 'female'}, {'gender': 'female'}]),\n    dict(val=[{'gender': 'male'}, {'gender': 'male'}, {'gender': 'non-binary'}]),\n    dict(val=[{'gender': 'non-binary'}, {'gender': 'non-binary'}]),\n    dict(val=[{'gender': 'male'}, {'gender': 'female'}, {'gender': 'non-binary'}, {'gender': 'transgender'}]),\n    dict(val=[{'gender': 'transgender'}, {'gender': 'transgender'}, {'gender': 'female'}]),\n    dict(val=[{'gender': 'male'}]),\n    dict(val=[{'gender': 'female'}, {'gender': 'male'}, {'gender': 'male'}, {'gender': 'female'}]),\n    dict(val=[{'gender': 'non-binary'}, {'gender': 'male'}, {'gender': 'female'}, {'gender': 'transgender'}, {'gender': 'non-binary'}]),\n    dict(val=[{'gender': 'transgender'}, {'gender': 'non-binary'}, {'gender': 'male'}, {'gender': 'female'}, {'gender': 'transgender'}])\n]", "code": "def single_digit(val):\n    gender = []\n    for v in val:\n        if v['gender'] not in gender:\n            gender.append(v['gender'])\n        else:\n            continue\n    return gender\n", "func_name": "single_digit", "exec_status": true, "example_inputs": ["\"{'val': [{'gender': 'Male'}, {'gender': 'Female'}, {'gender': 'Male'}]}\"", "\"{'val': [{'gender': 'Female'}, {'gender': 'Female'}, {'gender': 'Female'}]}\"", "\"{'val': [{'gender': 'Male'}, {'gender': 'Male'}, {'gender': 'Male'}]}\"", "\"{'val': [{'gender': 'Male'}, {'gender': 'Female'}, {'gender': 'Other'}]}\"", "\"{'val': [{'gender': 'Female'}, {'gender': 'Female'}, {'gender': 'Other'}]}\"", "\"{'val': [{'gender': 'Male'}, {'gender': 'Male'}, {'gender': 'Other'}]}\"", "\"{'val': [{'gender': 'Other'}, {'gender': 'Other'}, {'gender': 'Other'}]}\"", "\"{'val': [{'gender': 'Male'}, {'gender': 'Female'}]}\"", "\"{'val': [{'gender': 'Female'}, {'gender': 'Other'}]}\"", "\"{'val': [{'gender': 'Male'}, {'gender': 'Other'}]}\""], "example_outputs": [{"return": "\"['Male', 'Female']\""}, {"return": "\"['Female']\""}, {"return": "\"['Male']\""}, {"return": "\"['Male', 'Female', 'Other']\""}, {"return": "\"['Female', 'Other']\""}, {"return": "\"['Male', 'Other']\""}, {"return": "\"['Other']\""}, {"return": "\"['Male', 'Female']\""}, {"return": "\"['Female', 'Other']\""}, {"return": "\"['Male', 'Other']\""}, {"return": "\"['male', 'female']\""}, {"return": "\"['female', 'male']\""}, {"return": "\"['non-binary', 'male', 'female']\""}, {"return": "\"['male']\""}, {"return": "\"['female']\""}, {"return": "\"['non-binary']\""}, {"return": "\"['female', 'male', 'transgender']\""}, {"return": "\"['male', 'transgender', 'non-binary']\""}, {"return": "\"['transgender']\""}, {"return": "\"['male', 'female', 'non-binary', 'transgender']\""}, {"return": "\"['male', 'female']\""}, {"return": "\"['female']\""}, {"return": "\"['male', 'non-binary']\""}, {"return": "\"['non-binary']\""}, {"return": "\"['male', 'female', 'non-binary', 'transgender']\""}, {"return": "\"['transgender', 'female']\""}, {"return": "\"['male']\""}, {"return": "\"['female', 'male']\""}, {"return": "\"['non-binary', 'male', 'female', 'transgender']\""}, {"return": "\"['transgender', 'non-binary', 'male', 'female']\""}], "parsed_inputs": [[["val", "[{'gender': 'Male'}, {'gender': 'Female'}, {'gender': 'Male'}]"]], [["val", "[{'gender': 'Female'}, {'gender': 'Female'}, {'gender': 'Female'}]"]], [["val", "[{'gender': 'Male'}, {'gender': 'Male'}, {'gender': 'Male'}]"]], [["val", "[{'gender': 'Male'}, {'gender': 'Female'}, {'gender': 'Other'}]"]], [["val", "[{'gender': 'Female'}, {'gender': 'Female'}, {'gender': 'Other'}]"]], [["val", "[{'gender': 'Male'}, {'gender': 'Male'}, {'gender': 'Other'}]"]], [["val", "[{'gender': 'Other'}, {'gender': 'Other'}, {'gender': 'Other'}]"]], [["val", "[{'gender': 'Male'}, {'gender': 'Female'}]"]], [["val", "[{'gender': 'Female'}, {'gender': 'Other'}]"]], [["val", "[{'gender': 'Male'}, {'gender': 'Other'}]"]]], "exec_code": "def single_digit(val):\n    gender = []\n    for v in val:\n        if v['gender'] not in gender:\n            gender.append(v['gender'])\n        else:\n            continue\n    return gender\n", "output": "The function is:\n\n```python\ndef single_digit(val):\n    gender = []\n    for v in val:\n        if v['gender'] not in gender:\n            gender.append(v['gender'])\n        else:\n            continue\n    return gender\n\n```", "choosed_example_idx": [6, 4, 3, 0, 7, 8, 5], "prompt": "Write a function that generates the output from the input.\n\nInput: dict(val=[{'gender': 'Other'}, {'gender': 'Other'}, {'gender': 'Other'}]), Output: \"['Other']\"\nInput: dict(val=[{'gender': 'Female'}, {'gender': 'Female'}, {'gender': 'Other'}]), Output: \"['Female', 'Other']\"\nInput: dict(val=[{'gender': 'Male'}, {'gender': 'Female'}, {'gender': 'Other'}]), Output: \"['Male', 'Female', 'Other']\"\nInput: dict(val=[{'gender': 'Male'}, {'gender': 'Female'}, {'gender': 'Male'}]), Output: \"['Male', 'Female']\"\nInput: dict(val=[{'gender': 'Male'}, {'gender': 'Female'}]), Output: \"['Male', 'Female']\"\nInput: dict(val=[{'gender': 'Female'}, {'gender': 'Other'}]), Output: \"['Female', 'Other']\"\nInput: dict(val=[{'gender': 'Male'}, {'gender': 'Male'}, {'gender': 'Other'}]), Output: \"['Male', 'Other']\"\n\n\nFunction: single_digit\n", "id": "0bca5f558bef9a7b6504665e1d3163e64f9557c0_0"}
{"example_str": "examples = [\n    dict(data=[(\"process1\", \"PyCharm\"), (\"process2\", \"Spotify\")]),\n    dict(data=[(\"process1\", \"csgo\"), (\"process2\", \"chromium\")]),\n    dict(data=[(\"process1\", \"vk\"), (\"process2\", \"minecraft\")]),\n    dict(data=[(\"process1\", \"discord\"), (\"process2\", \"PyCharm\")]),\n    dict(data=[(\"process1\", \"Spotify\"), (\"process2\", \"vk\")]),\n    dict(data=[(\"process1\", \"chromium\"), (\"process2\", \"minecraft\")]),\n    dict(data=[(\"process1\", \"PyCharm\"), (\"process2\", \"discord\")]),\n    dict(data=[(\"process1\", \"csgo\"), (\"process2\", \"Spotify\")]),\n    dict(data=[(\"process1\", \"vk\"), (\"process2\", \"chromium\")]),\n    dict(data=[(\"process1\", \"minecraft\"), (\"process2\", \"discord\")]),\n]\nexamples += [\n    dict(data=[(1, 'User is currently using PyCharm for development')]),\n    dict(data=[(2, 'Listening to music on Spotify'), (3, 'Playing csgo online')]),\n    dict(data=[(4, 'Browsing with chromium browser'), (5, 'Chatting on vk')]),\n    dict(data=[(6, 'Building a house in minecraft')]),\n    dict(data=[(7, 'Talking to friends via discord'), (8, 'Coding in PyCharm')]),\n    dict(data=[(9, 'User is currently using PyCharm for development'), (10, 'Listening to music on Spotify'), (11, 'Playing csgo online')]),\n    dict(data=[(12, 'User is browsing sites on chromium'), (13, 'User is chatting on vk'), (14, 'User is playing minecraft')]),\n    dict(data=[(15, 'User is talking on discord'), (16, 'User is coding in PyCharm'), (17, 'User is listening to Spotify')]),\n    dict(data=[(18, 'User is playing csgo'), (19, 'User is using chromium to search'), (20, 'User is waiting in vk')]),\n    dict(data=[(21, 'User is having fun with friends in minecraft'), (22, 'User is communicating in discord')])\n]\nexamples += [\n    dict(data=[(1, 'User is currently using PyCharm for development'), (2, 'Listening to music on Spotify')]),\n    dict(data=[(1, 'Playing csgo with friends'), (2, 'Browsing on chromium browser')]),\n    dict(data=[(1, 'Chatting on discord'), (2, 'Watching videos on vk platform')]),\n    dict(data=[(1, 'Playing minecraft online'), (2, 'User is currently using PyCharm for development')]),\n    dict(data=[(1, 'Listening to music on Spotify'), (2, 'Playing csgo with friends')]),\n    dict(data=[(1, 'Browsing on chromium browser'), (2, 'Chatting on discord')]),\n    dict(data=[(1, 'Watching videos on vk platform'), (2, 'Playing minecraft online')]),\n    dict(data=[(1, 'User is currently using PyCharm for development'), (2, 'Playing minecraft online')]),\n    dict(data=[(1, 'Listening to music on Spotify'), (2, 'Chatting on discord')]),\n    dict(data=[(1, 'Playing csgo with friends'), (2, 'Watching videos on vk platform')])\n]", "code": "def find_best(data):\n    print(data[0][1])\n    useful_processes = []\n    for i in range(len(data)):\n        if data[i][1].find('PyCharm'\n            ) != -1 and \"Кодит в PyCharm'e\" not in useful_processes:\n            useful_processes.append(\"Кодит в PyCharm'e\")\n        elif data[i][1].find('Spotify'\n            ) != -1 and 'Слушает Spotify' not in useful_processes:\n            useful_processes.append('Слушает Spotify')\n        elif data[i][1].find('csgo'\n            ) != -1 and 'Играет Counter-strike' not in useful_processes:\n            useful_processes.append('Играет Counter-strike')\n        elif data[i][1].find('chromium'\n            ) != -1 and 'Сидит в Google' not in useful_processes:\n            useful_processes.append('Сидит в Google')\n        elif data[i][1].find('vk'\n            ) != -1 and 'Ждет вас в Vk' not in useful_processes:\n            useful_processes.append('Ждет вас в Vk')\n        elif data[i][1].find('minecraft'\n            ) != -1 and 'Фанится с друзьями в Minecraft(ну почему-бы и нет)' not in useful_processes:\n            useful_processes.append(\n                'Фанится с друзьями в Minecraft(ну почему-бы и нет)')\n        elif data[i][1].find('discord'\n            ) != -1 and \"Общается в Discord'e\" not in useful_processes:\n            useful_processes.append(\"Общается в Discord'e\")\n    return useful_processes\n", "func_name": "find_best", "exec_status": true, "example_inputs": ["\"{'data': [('process1', 'PyCharm'), ('process2', 'Spotify')]}\"", "\"{'data': [('process1', 'csgo'), ('process2', 'chromium')]}\"", "\"{'data': [('process1', 'vk'), ('process2', 'minecraft')]}\"", "\"{'data': [('process1', 'discord'), ('process2', 'PyCharm')]}\"", "\"{'data': [('process1', 'Spotify'), ('process2', 'vk')]}\"", "\"{'data': [('process1', 'chromium'), ('process2', 'minecraft')]}\"", "\"{'data': [('process1', 'PyCharm'), ('process2', 'discord')]}\"", "\"{'data': [('process1', 'csgo'), ('process2', 'Spotify')]}\"", "\"{'data': [('process1', 'vk'), ('process2', 'chromium')]}\"", "\"{'data': [('process1', 'minecraft'), ('process2', 'discord')]}\""], "example_outputs": [{"return": "\"[\\\"\\u041a\\u043e\\u0434\\u0438\\u0442 \\u0432 PyCharm'e\\\", '\\u0421\\u043b\\u0443\\u0448\\u0430\\u0435\\u0442 Spotify']\""}, {"return": "\"['\\u0418\\u0433\\u0440\\u0430\\u0435\\u0442 Counter-strike', '\\u0421\\u0438\\u0434\\u0438\\u0442 \\u0432 Google']\""}, {"return": "\"['\\u0416\\u0434\\u0435\\u0442 \\u0432\\u0430\\u0441 \\u0432 Vk', '\\u0424\\u0430\\u043d\\u0438\\u0442\\u0441\\u044f \\u0441 \\u0434\\u0440\\u0443\\u0437\\u044c\\u044f\\u043c\\u0438 \\u0432 Minecraft(\\u043d\\u0443 \\u043f\\u043e\\u0447\\u0435\\u043c\\u0443-\\u0431\\u044b \\u0438 \\u043d\\u0435\\u0442)']\""}, {"return": "\"[\\\"\\u041e\\u0431\\u0449\\u0430\\u0435\\u0442\\u0441\\u044f \\u0432 Discord'e\\\", \\\"\\u041a\\u043e\\u0434\\u0438\\u0442 \\u0432 PyCharm'e\\\"]\""}, {"return": "\"['\\u0421\\u043b\\u0443\\u0448\\u0430\\u0435\\u0442 Spotify', '\\u0416\\u0434\\u0435\\u0442 \\u0432\\u0430\\u0441 \\u0432 Vk']\""}, {"return": "\"['\\u0421\\u0438\\u0434\\u0438\\u0442 \\u0432 Google', '\\u0424\\u0430\\u043d\\u0438\\u0442\\u0441\\u044f \\u0441 \\u0434\\u0440\\u0443\\u0437\\u044c\\u044f\\u043c\\u0438 \\u0432 Minecraft(\\u043d\\u0443 \\u043f\\u043e\\u0447\\u0435\\u043c\\u0443-\\u0431\\u044b \\u0438 \\u043d\\u0435\\u0442)']\""}, {"return": "\"[\\\"\\u041a\\u043e\\u0434\\u0438\\u0442 \\u0432 PyCharm'e\\\", \\\"\\u041e\\u0431\\u0449\\u0430\\u0435\\u0442\\u0441\\u044f \\u0432 Discord'e\\\"]\""}, {"return": "\"['\\u0418\\u0433\\u0440\\u0430\\u0435\\u0442 Counter-strike', '\\u0421\\u043b\\u0443\\u0448\\u0430\\u0435\\u0442 Spotify']\""}, {"return": "\"['\\u0416\\u0434\\u0435\\u0442 \\u0432\\u0430\\u0441 \\u0432 Vk', '\\u0421\\u0438\\u0434\\u0438\\u0442 \\u0432 Google']\""}, {"return": "\"['\\u0424\\u0430\\u043d\\u0438\\u0442\\u0441\\u044f \\u0441 \\u0434\\u0440\\u0443\\u0437\\u044c\\u044f\\u043c\\u0438 \\u0432 Minecraft(\\u043d\\u0443 \\u043f\\u043e\\u0447\\u0435\\u043c\\u0443-\\u0431\\u044b \\u0438 \\u043d\\u0435\\u0442)', \\\"\\u041e\\u0431\\u0449\\u0430\\u0435\\u0442\\u0441\\u044f \\u0432 Discord'e\\\"]\""}, {"return": "\"[\\\"\\u041a\\u043e\\u0434\\u0438\\u0442 \\u0432 PyCharm'e\\\"]\""}, {"return": "\"['\\u0421\\u043b\\u0443\\u0448\\u0430\\u0435\\u0442 Spotify', '\\u0418\\u0433\\u0440\\u0430\\u0435\\u0442 Counter-strike']\""}, {"return": "\"['\\u0421\\u0438\\u0434\\u0438\\u0442 \\u0432 Google', '\\u0416\\u0434\\u0435\\u0442 \\u0432\\u0430\\u0441 \\u0432 Vk']\""}, {"return": "\"['\\u0424\\u0430\\u043d\\u0438\\u0442\\u0441\\u044f \\u0441 \\u0434\\u0440\\u0443\\u0437\\u044c\\u044f\\u043c\\u0438 \\u0432 Minecraft(\\u043d\\u0443 \\u043f\\u043e\\u0447\\u0435\\u043c\\u0443-\\u0431\\u044b \\u0438 \\u043d\\u0435\\u0442)']\""}, {"return": "\"[\\\"\\u041e\\u0431\\u0449\\u0430\\u0435\\u0442\\u0441\\u044f \\u0432 Discord'e\\\", \\\"\\u041a\\u043e\\u0434\\u0438\\u0442 \\u0432 PyCharm'e\\\"]\""}, {"return": "\"[\\\"\\u041a\\u043e\\u0434\\u0438\\u0442 \\u0432 PyCharm'e\\\", '\\u0421\\u043b\\u0443\\u0448\\u0430\\u0435\\u0442 Spotify', '\\u0418\\u0433\\u0440\\u0430\\u0435\\u0442 Counter-strike']\""}, {"return": "\"['\\u0421\\u0438\\u0434\\u0438\\u0442 \\u0432 Google', '\\u0416\\u0434\\u0435\\u0442 \\u0432\\u0430\\u0441 \\u0432 Vk', '\\u0424\\u0430\\u043d\\u0438\\u0442\\u0441\\u044f \\u0441 \\u0434\\u0440\\u0443\\u0437\\u044c\\u044f\\u043c\\u0438 \\u0432 Minecraft(\\u043d\\u0443 \\u043f\\u043e\\u0447\\u0435\\u043c\\u0443-\\u0431\\u044b \\u0438 \\u043d\\u0435\\u0442)']\""}, {"return": "\"[\\\"\\u041e\\u0431\\u0449\\u0430\\u0435\\u0442\\u0441\\u044f \\u0432 Discord'e\\\", \\\"\\u041a\\u043e\\u0434\\u0438\\u0442 \\u0432 PyCharm'e\\\", '\\u0421\\u043b\\u0443\\u0448\\u0430\\u0435\\u0442 Spotify']\""}, {"return": "\"['\\u0418\\u0433\\u0440\\u0430\\u0435\\u0442 Counter-strike', '\\u0421\\u0438\\u0434\\u0438\\u0442 \\u0432 Google', '\\u0416\\u0434\\u0435\\u0442 \\u0432\\u0430\\u0441 \\u0432 Vk']\""}, {"return": "\"['\\u0424\\u0430\\u043d\\u0438\\u0442\\u0441\\u044f \\u0441 \\u0434\\u0440\\u0443\\u0437\\u044c\\u044f\\u043c\\u0438 \\u0432 Minecraft(\\u043d\\u0443 \\u043f\\u043e\\u0447\\u0435\\u043c\\u0443-\\u0431\\u044b \\u0438 \\u043d\\u0435\\u0442)', \\\"\\u041e\\u0431\\u0449\\u0430\\u0435\\u0442\\u0441\\u044f \\u0432 Discord'e\\\"]\""}, {"return": "\"[\\\"\\u041a\\u043e\\u0434\\u0438\\u0442 \\u0432 PyCharm'e\\\", '\\u0421\\u043b\\u0443\\u0448\\u0430\\u0435\\u0442 Spotify']\""}, {"return": "\"['\\u0418\\u0433\\u0440\\u0430\\u0435\\u0442 Counter-strike', '\\u0421\\u0438\\u0434\\u0438\\u0442 \\u0432 Google']\""}, {"return": "\"[\\\"\\u041e\\u0431\\u0449\\u0430\\u0435\\u0442\\u0441\\u044f \\u0432 Discord'e\\\", '\\u0416\\u0434\\u0435\\u0442 \\u0432\\u0430\\u0441 \\u0432 Vk']\""}, {"return": "\"['\\u0424\\u0430\\u043d\\u0438\\u0442\\u0441\\u044f \\u0441 \\u0434\\u0440\\u0443\\u0437\\u044c\\u044f\\u043c\\u0438 \\u0432 Minecraft(\\u043d\\u0443 \\u043f\\u043e\\u0447\\u0435\\u043c\\u0443-\\u0431\\u044b \\u0438 \\u043d\\u0435\\u0442)', \\\"\\u041a\\u043e\\u0434\\u0438\\u0442 \\u0432 PyCharm'e\\\"]\""}, {"return": "\"['\\u0421\\u043b\\u0443\\u0448\\u0430\\u0435\\u0442 Spotify', '\\u0418\\u0433\\u0440\\u0430\\u0435\\u0442 Counter-strike']\""}, {"return": "\"['\\u0421\\u0438\\u0434\\u0438\\u0442 \\u0432 Google', \\\"\\u041e\\u0431\\u0449\\u0430\\u0435\\u0442\\u0441\\u044f \\u0432 Discord'e\\\"]\""}, {"return": "\"['\\u0416\\u0434\\u0435\\u0442 \\u0432\\u0430\\u0441 \\u0432 Vk', '\\u0424\\u0430\\u043d\\u0438\\u0442\\u0441\\u044f \\u0441 \\u0434\\u0440\\u0443\\u0437\\u044c\\u044f\\u043c\\u0438 \\u0432 Minecraft(\\u043d\\u0443 \\u043f\\u043e\\u0447\\u0435\\u043c\\u0443-\\u0431\\u044b \\u0438 \\u043d\\u0435\\u0442)']\""}, {"return": "\"[\\\"\\u041a\\u043e\\u0434\\u0438\\u0442 \\u0432 PyCharm'e\\\", '\\u0424\\u0430\\u043d\\u0438\\u0442\\u0441\\u044f \\u0441 \\u0434\\u0440\\u0443\\u0437\\u044c\\u044f\\u043c\\u0438 \\u0432 Minecraft(\\u043d\\u0443 \\u043f\\u043e\\u0447\\u0435\\u043c\\u0443-\\u0431\\u044b \\u0438 \\u043d\\u0435\\u0442)']\""}, {"return": "\"['\\u0421\\u043b\\u0443\\u0448\\u0430\\u0435\\u0442 Spotify', \\\"\\u041e\\u0431\\u0449\\u0430\\u0435\\u0442\\u0441\\u044f \\u0432 Discord'e\\\"]\""}, {"return": "\"['\\u0418\\u0433\\u0440\\u0430\\u0435\\u0442 Counter-strike', '\\u0416\\u0434\\u0435\\u0442 \\u0432\\u0430\\u0441 \\u0432 Vk']\""}], "parsed_inputs": [[["data", "[('process1', 'PyCharm'), ('process2', 'Spotify')]"]], [["data", "[('process1', 'csgo'), ('process2', 'chromium')]"]], [["data", "[('process1', 'vk'), ('process2', 'minecraft')]"]], [["data", "[('process1', 'discord'), ('process2', 'PyCharm')]"]], [["data", "[('process1', 'Spotify'), ('process2', 'vk')]"]], [["data", "[('process1', 'chromium'), ('process2', 'minecraft')]"]], [["data", "[('process1', 'PyCharm'), ('process2', 'discord')]"]], [["data", "[('process1', 'csgo'), ('process2', 'Spotify')]"]], [["data", "[('process1', 'vk'), ('process2', 'chromium')]"]], [["data", "[('process1', 'minecraft'), ('process2', 'discord')]"]]], "exec_code": "def find_best(data):\n    print(data[0][1])\n    useful_processes = []\n    for i in range(len(data)):\n        if data[i][1].find('PyCharm'\n            ) != -1 and \"Кодит в PyCharm'e\" not in useful_processes:\n            useful_processes.append(\"Кодит в PyCharm'e\")\n        elif data[i][1].find('Spotify'\n            ) != -1 and 'Слушает Spotify' not in useful_processes:\n            useful_processes.append('Слушает Spotify')\n        elif data[i][1].find('csgo'\n            ) != -1 and 'Играет Counter-strike' not in useful_processes:\n            useful_processes.append('Играет Counter-strike')\n        elif data[i][1].find('chromium'\n            ) != -1 and 'Сидит в Google' not in useful_processes:\n            useful_processes.append('Сидит в Google')\n        elif data[i][1].find('vk'\n            ) != -1 and 'Ждет вас в Vk' not in useful_processes:\n            useful_processes.append('Ждет вас в Vk')\n        elif data[i][1].find('minecraft'\n            ) != -1 and 'Фанится с друзьями в Minecraft(ну почему-бы и нет)' not in useful_processes:\n            useful_processes.append(\n                'Фанится с друзьями в Minecraft(ну почему-бы и нет)')\n        elif data[i][1].find('discord'\n            ) != -1 and \"Общается в Discord'e\" not in useful_processes:\n            useful_processes.append(\"Общается в Discord'e\")\n    return useful_processes\n", "output": "The function is:\n\n```python\ndef find_best(data):\n    print(data[0][1])\n    useful_processes = []\n    for i in range(len(data)):\n        if data[i][1].find('PyCharm'\n            ) != -1 and \"Кодит в PyCharm'e\" not in useful_processes:\n            useful_processes.append(\"Кодит в PyCharm'e\")\n        elif data[i][1].find('Spotify'\n            ) != -1 and 'Слушает Spotify' not in useful_processes:\n            useful_processes.append('Слушает Spotify')\n        elif data[i][1].find('csgo'\n            ) != -1 and 'Играет Counter-strike' not in useful_processes:\n            useful_processes.append('Играет Counter-strike')\n        elif data[i][1].find('chromium'\n            ) != -1 and 'Сидит в Google' not in useful_processes:\n            useful_processes.append('Сидит в Google')\n        elif data[i][1].find('vk'\n            ) != -1 and 'Ждет вас в Vk' not in useful_processes:\n            useful_processes.append('Ждет вас в Vk')\n        elif data[i][1].find('minecraft'\n            ) != -1 and 'Фанится с друзьями в Minecraft(ну почему-бы и нет)' not in useful_processes:\n            useful_processes.append(\n                'Фанится с друзьями в Minecraft(ну почему-бы и нет)')\n        elif data[i][1].find('discord'\n            ) != -1 and \"Общается в Discord'e\" not in useful_processes:\n            useful_processes.append(\"Общается в Discord'e\")\n    return useful_processes\n\n```", "choosed_example_idx": [4, 1, 8, 9, 6, 5], "prompt": "Input: dict(data=[('process1', 'Spotify'), ('process2', 'vk')]), Output: \"['\\u0421\\u043b\\u0443\\u0448\\u0430\\u0435\\u0442 Spotify', '\\u0416\\u0434\\u0435\\u0442 \\u0432\\u0430\\u0441 \\u0432 Vk']\"\nInput: dict(data=[('process1', 'csgo'), ('process2', 'chromium')]), Output: \"['\\u0418\\u0433\\u0440\\u0430\\u0435\\u0442 Counter-strike', '\\u0421\\u0438\\u0434\\u0438\\u0442 \\u0432 Google']\"\nInput: dict(data=[('process1', 'vk'), ('process2', 'chromium')]), Output: \"['\\u0416\\u0434\\u0435\\u0442 \\u0432\\u0430\\u0441 \\u0432 Vk', '\\u0421\\u0438\\u0434\\u0438\\u0442 \\u0432 Google']\"\nInput: dict(data=[('process1', 'minecraft'), ('process2', 'discord')]), Output: \"['\\u0424\\u0430\\u043d\\u0438\\u0442\\u0441\\u044f \\u0441 \\u0434\\u0440\\u0443\\u0437\\u044c\\u044f\\u043c\\u0438 \\u0432 Minecraft(\\u043d\\u0443 \\u043f\\u043e\\u0447\\u0435\\u043c\\u0443-\\u0431\\u044b \\u0438 \\u043d\\u0435\\u0442)', \\\"\\u041e\\u0431\\u0449\\u0430\\u0435\\u0442\\u0441\\u044f \\u0432 Discord'e\\\"]\"\nInput: dict(data=[('process1', 'PyCharm'), ('process2', 'discord')]), Output: \"[\\\"\\u041a\\u043e\\u0434\\u0438\\u0442 \\u0432 PyCharm'e\\\", \\\"\\u041e\\u0431\\u0449\\u0430\\u0435\\u0442\\u0441\\u044f \\u0432 Discord'e\\\"]\"\nInput: dict(data=[('process1', 'chromium'), ('process2', 'minecraft')]), Output: \"['\\u0421\\u0438\\u0434\\u0438\\u0442 \\u0432 Google', '\\u0424\\u0430\\u043d\\u0438\\u0442\\u0441\\u044f \\u0441 \\u0434\\u0440\\u0443\\u0437\\u044c\\u044f\\u043c\\u0438 \\u0432 Minecraft(\\u043d\\u0443 \\u043f\\u043e\\u0447\\u0435\\u043c\\u0443-\\u0431\\u044b \\u0438 \\u043d\\u0435\\u0442)']\"\n\n\n\nWrite a function that generates the output from the input.\nFunction: find_best\n", "id": "e035e2aa3997abcb5a67ff9eca0917b3f8123e86_0"}
{"example_str": "examples = [\n    dict(m=5, n=3, result=0),\n    dict(m=0, n=2, result=10),\n    dict(m=10, n=1, result=5),\n    dict(m=7, n=4, result=0),\n    dict(m=3, n=5, result=2),\n    dict(m=1, n=9, result=0),\n    dict(m=9, n=8, result=1),\n    dict(m=2, n=6, result=3),\n    dict(m=6, n=7, result=0),\n    dict(m=8, n=3, result=2),\n]\nexamples += [\n    dict(m=0, n=5, result=0),\n    dict(m=3, n=5, result=0),\n    dict(m=1, n=-3, result=0),\n    dict(m=4, n=0, result=0),\n    dict(m=2, n=10, result=0),\n    dict(m=5, n=-1, result=0),\n    dict(m=6, n=2, result=0),\n    dict(m=0, n=0, result=0),\n    dict(m=7, n=3, result=0),\n    dict(m=3, n=1, result=0)\n]\nexamples += [\n    dict(m=0, n=5, result=0),\n    dict(m=1, n=5, result=0),\n    dict(m=2, n=3, result=0),\n    dict(m=3, n=4, result=0),\n    dict(m=4, n=1, result=0),\n    dict(m=5, n=2, result=0),\n    dict(m=6, n=3, result=0),\n    dict(m=7, n=1, result=0),\n    dict(m=8, n=2, result=0),\n    dict(m=9, n=1, result=0),\n]", "code": "def compute_product(m, n, result):\n    if m == 0:\n        return result\n    else:\n        return compute_product(m - 1, n, result + n)\n", "func_name": "compute_product", "exec_status": true, "example_inputs": ["\"{'m': 5, 'n': 3, 'result': 0}\"", "\"{'m': 0, 'n': 2, 'result': 10}\"", "\"{'m': 10, 'n': 1, 'result': 5}\"", "\"{'m': 7, 'n': 4, 'result': 0}\"", "\"{'m': 3, 'n': 5, 'result': 2}\"", "\"{'m': 1, 'n': 9, 'result': 0}\"", "\"{'m': 9, 'n': 8, 'result': 1}\"", "\"{'m': 2, 'n': 6, 'result': 3}\"", "\"{'m': 6, 'n': 7, 'result': 0}\"", "\"{'m': 8, 'n': 3, 'result': 2}\""], "example_outputs": [{"return": "\"15\""}, {"return": "\"10\""}, {"return": "\"15\""}, {"return": "\"28\""}, {"return": "\"17\""}, {"return": "\"9\""}, {"return": "\"73\""}, {"return": "\"15\""}, {"return": "\"42\""}, {"return": "\"26\""}, {"return": "\"0\""}, {"return": "\"15\""}, {"return": "\"-3\""}, {"return": "\"0\""}, {"return": "\"20\""}, {"return": "\"-5\""}, {"return": "\"12\""}, {"return": "\"0\""}, {"return": "\"21\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"5\""}, {"return": "\"6\""}, {"return": "\"12\""}, {"return": "\"4\""}, {"return": "\"10\""}, {"return": "\"18\""}, {"return": "\"7\""}, {"return": "\"16\""}, {"return": "\"9\""}], "parsed_inputs": [[["m", "5"], ["n", "3"], ["result", "0"]], [["m", "0"], ["n", "2"], ["result", "10"]], [["m", "10"], ["n", "1"], ["result", "5"]], [["m", "7"], ["n", "4"], ["result", "0"]], [["m", "3"], ["n", "5"], ["result", "2"]], [["m", "1"], ["n", "9"], ["result", "0"]], [["m", "9"], ["n", "8"], ["result", "1"]], [["m", "2"], ["n", "6"], ["result", "3"]], [["m", "6"], ["n", "7"], ["result", "0"]], [["m", "8"], ["n", "3"], ["result", "2"]]], "exec_code": "def compute_product(m, n, result):\n    if m == 0:\n        return result\n    else:\n        return compute_product(m - 1, n, result + n)\n", "output": "The function is:\n\n```python\ndef compute_product(m, n, result):\n    if m == 0:\n        return result\n    else:\n        return compute_product(m - 1, n, result + n)\n\n```", "choosed_example_idx": [7, 5, 3, 4, 8, 9], "prompt": "Write a function that generates the output from the input.\nFunction: compute_product\nInput: dict(m=2, n=6, result=3), Output: \"15\"\nInput: dict(m=1, n=9, result=0), Output: \"9\"\nInput: dict(m=7, n=4, result=0), Output: \"28\"\nInput: dict(m=3, n=5, result=2), Output: \"17\"\nInput: dict(m=6, n=7, result=0), Output: \"42\"\nInput: dict(m=8, n=3, result=2), Output: \"26\"\n\n\n\n", "id": "04bedef700ec7637f90d77003974b30245d7c49c_0"}
{"example_str": "examples = [\n    dict(qoeDat={'ts1': {'key1': 'val1'}, 'ts2': {'key1': 'val2'}}, filter_obj={'filter_key': 'key1', 'filter_value': 'val1'}),\n    dict(qoeDat={'ts1': {'key1': 'val1'}, 'ts2': {'key1': 'val2'}}, filter_obj={'filter_key': 'key1', 'filter_value': 'val3'}),\n    dict(qoeDat={'ts1': {'key1': 'val1'}, 'ts2': 'not a dict'}, filter_obj={'filter_key': 'key1', 'filter_value': 'val1'}),\n    dict(qoeDat={'ts1': {'key1': 'val1'}, 'ts2': {'key2': 'val2'}}, filter_obj={'filter_key': 'key1', 'filter_value': 'val1'}),\n    dict(qoeDat={'ts1': {'key1': 'val1'}, 'ts2': {'key1': 'val1'}}, filter_obj={'filter_key': 'key1', 'filter_value': 'val1'}),\n    dict(qoeDat={'ts1': {'key1': 'val1'}, 'ts2': {'key1': 'val2', 'key2': 'val3'}}, filter_obj={'filter_key': 'key1', 'filter_value': 'val1'}),\n    dict(qoeDat={'ts1': {'key1': 'val1'}, 'ts2': {'key1': 'val2'}, 'ts3': {'key1': 'val3'}}, filter_obj={'filter_key': 'key1', 'filter_value': 'val1'}),\n    dict(qoeDat={'ts1': {'key1': 'val1'}, 'ts2': {'key1': 'val2'}, 'ts3': 'not a dict'}, filter_obj={'filter_key': 'key1', 'filter_value': 'val1'}),\n    dict(qoeDat={'ts1': {'key1': 'val1'}, 'ts2': {'key2': 'val2'}, 'ts3': {'key3': 'val3'}}, filter_obj={'filter_key': 'key1', 'filter_value': 'val1'}),\n    dict(qoeDat={'ts1': {'key1': 'val1'}}, filter_obj={'filter_key': 'key1', 'filter_value': 'val1'}),\n]\nexamples += [\n    dict(qoeDat={1: {'data': 10}, 2: {'data': 20}}, filter_obj={'filter_key': 'data', 'filter_value': 10}),\n    dict(qoeDat={100: {'temp': 30}, 200: {'temp': 40}}, filter_obj={'filter_key': 'temp', 'filter_value': 30}),\n    dict(qoeDat={123: {'speed': 55}, 456: {'speed': 65}}, filter_obj={'filter_key': 'speed', 'filter_value': 55}),\n    dict(qoeDat={10: {'height': 150}, 20: {'height': 160}}, filter_obj={'filter_key': 'height', 'filter_value': 150}),\n    dict(qoeDat={300: {'width': 45}, 400: {'width': 55}}, filter_obj={'filter_key': 'width', 'filter_value': 45}),\n    dict(qoeDat={111: {'depth': 22}, 222: {'depth': 32}}, filter_obj={'filter_key': 'depth', 'filter_value': 22}),\n    dict(qoeDat={777: {'volume': 100}, 888: {'volume': 200}}, filter_obj={'filter_key': 'volume', 'filter_value': 100}),\n    dict(qoeDat={555: {'weight': 5}, 666: {'weight': 6}}, filter_obj={'filter_key': 'weight', 'filter_value': 5}),\n    dict(qoeDat={333: {'pressure': 300}, 444: {'pressure': 400}}, filter_obj={'filter_key': 'pressure', 'filter_value': 300}),\n    dict(qoeDat={999: {'temperature': 98}, 1000: {'temperature': 99}}, filter_obj={'filter_key': 'temperature', 'filter_value': 98})\n]\nexamples += [\n    dict(qoeDat={1: {'quality': 'high'}, 2: {'quality': 'low'}}, filter_obj={'filter_key': 'quality', 'filter_value': 'high'}),\n    dict(qoeDat={10: {'speed': 'fast'}, 20: {'speed': 'slow'}}, filter_obj={'filter_key': 'speed', 'filter_value': 'fast'}),\n    dict(qoeDat={100: {'error': 'none'}, 200: {'error': 'critical'}}, filter_obj={'filter_key': 'error', 'filter_value': 'none'}),\n    dict(qoeDat={5: {'status': 'ok'}, 6: {'status': 'fail'}}, filter_obj={'filter_key': 'status', 'filter_value': 'ok'}),\n    dict(qoeDat={15: {'temp': 100}, 25: {'temp': 150}}, filter_obj={'filter_key': 'temp', 'filter_value': 100}),\n    dict(qoeDat={30: {'color': 'red'}, 40: {'color': 'blue'}}, filter_obj={'filter_key': 'color', 'filter_value': 'red'}),\n    dict(qoeDat={50: {'size': 'large'}, 60: {'size': 'small'}}, filter_obj={'filter_key': 'size', 'filter_value': 'large'}),\n    dict(qoeDat={70: {'weight': 20}, 80: {'weight': 30}}, filter_obj={'filter_key': 'weight', 'filter_value': 20}),\n    dict(qoeDat={90: {'height': 5.5}, 100: {'height': 6.0}}, filter_obj={'filter_key': 'height', 'filter_value': 5.5}),\n    dict(qoeDat={110: {'depth': 10}, 120: {'depth': 20}}, filter_obj={'filter_key': 'depth', 'filter_value': 10})\n]", "code": "def get_filtered_vals(qoeDat, filter_obj):\n    filtered_values = []\n    for ts in qoeDat.keys():\n        if type(qoeDat[ts]) == type(dict()):\n            filtered_values.append(qoeDat[ts][filter_obj['filter_key']])\n        else:\n            return False\n    if filter_obj['filter_value'] in filtered_values:\n        return True\n    else:\n        return False\n", "func_name": "get_filtered_vals", "exec_status": true, "example_inputs": ["\"{'qoeDat': {'ts1': {'key1': 'val1'}, 'ts2': {'key1': 'val2'}}, 'filter_obj': {'filter_key': 'key1', 'filter_value': 'val1'}}\"", "\"{'qoeDat': {'ts1': {'key1': 'val1'}, 'ts2': {'key1': 'val2'}}, 'filter_obj': {'filter_key': 'key1', 'filter_value': 'val3'}}\"", "\"{'qoeDat': {'ts1': {'key1': 'val1'}, 'ts2': 'not a dict'}, 'filter_obj': {'filter_key': 'key1', 'filter_value': 'val1'}}\"", "\"{'qoeDat': {'ts1': {'key1': 'val1'}, 'ts2': {'key2': 'val2'}}, 'filter_obj': {'filter_key': 'key1', 'filter_value': 'val1'}}\"", "\"{'qoeDat': {'ts1': {'key1': 'val1'}, 'ts2': {'key1': 'val1'}}, 'filter_obj': {'filter_key': 'key1', 'filter_value': 'val1'}}\"", "\"{'qoeDat': {'ts1': {'key1': 'val1'}, 'ts2': {'key1': 'val2', 'key2': 'val3'}}, 'filter_obj': {'filter_key': 'key1', 'filter_value': 'val1'}}\"", "\"{'qoeDat': {'ts1': {'key1': 'val1'}, 'ts2': {'key1': 'val2'}, 'ts3': {'key1': 'val3'}}, 'filter_obj': {'filter_key': 'key1', 'filter_value': 'val1'}}\"", "\"{'qoeDat': {'ts1': {'key1': 'val1'}, 'ts2': {'key1': 'val2'}, 'ts3': 'not a dict'}, 'filter_obj': {'filter_key': 'key1', 'filter_value': 'val1'}}\"", "\"{'qoeDat': {'ts1': {'key1': 'val1'}, 'ts2': {'key2': 'val2'}, 'ts3': {'key3': 'val3'}}, 'filter_obj': {'filter_key': 'key1', 'filter_value': 'val1'}}\"", "\"{'qoeDat': {'ts1': {'key1': 'val1'}}, 'filter_obj': {'filter_key': 'key1', 'filter_value': 'val1'}}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"error": "<|EXCEPTION|> \"<class 'KeyError'>: 'key1'\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"error": "<|EXCEPTION|> \"<class 'KeyError'>: 'key1'\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}], "parsed_inputs": [[["qoeDat", "{'ts1': {'key1': 'val1'}, 'ts2': {'key1': 'val2'}}"], ["filter_obj", "{'filter_key': 'key1', 'filter_value': 'val1'}"]], [["qoeDat", "{'ts1': {'key1': 'val1'}, 'ts2': {'key1': 'val2'}}"], ["filter_obj", "{'filter_key': 'key1', 'filter_value': 'val3'}"]], [["qoeDat", "{'ts1': {'key1': 'val1'}, 'ts2': 'not a dict'}"], ["filter_obj", "{'filter_key': 'key1', 'filter_value': 'val1'}"]], [["qoeDat", "{'ts1': {'key1': 'val1'}, 'ts2': {'key2': 'val2'}}"], ["filter_obj", "{'filter_key': 'key1', 'filter_value': 'val1'}"]], [["qoeDat", "{'ts1': {'key1': 'val1'}, 'ts2': {'key1': 'val1'}}"], ["filter_obj", "{'filter_key': 'key1', 'filter_value': 'val1'}"]], [["qoeDat", "{'ts1': {'key1': 'val1'}, 'ts2': {'key1': 'val2', 'key2': 'val3'}}"], ["filter_obj", "{'filter_key': 'key1', 'filter_value': 'val1'}"]], [["qoeDat", "{'ts1': {'key1': 'val1'}, 'ts2': {'key1': 'val2'}, 'ts3': {'key1': 'val3'}}"], ["filter_obj", "{'filter_key': 'key1', 'filter_value': 'val1'}"]], [["qoeDat", "{'ts1': {'key1': 'val1'}, 'ts2': {'key1': 'val2'}, 'ts3': 'not a dict'}"], ["filter_obj", "{'filter_key': 'key1', 'filter_value': 'val1'}"]], [["qoeDat", "{'ts1': {'key1': 'val1'}, 'ts2': {'key2': 'val2'}, 'ts3': {'key3': 'val3'}}"], ["filter_obj", "{'filter_key': 'key1', 'filter_value': 'val1'}"]], [["qoeDat", "{'ts1': {'key1': 'val1'}}"], ["filter_obj", "{'filter_key': 'key1', 'filter_value': 'val1'}"]]], "exec_code": "def get_filtered_vals(qoeDat, filter_obj):\n    filtered_values = []\n    for ts in qoeDat.keys():\n        if type(qoeDat[ts]) == type(dict()):\n            filtered_values.append(qoeDat[ts][filter_obj['filter_key']])\n        else:\n            return False\n    if filter_obj['filter_value'] in filtered_values:\n        return True\n    else:\n        return False\n", "output": "The function is:\n\n```python\ndef get_filtered_vals(qoeDat, filter_obj):\n    filtered_values = []\n    for ts in qoeDat.keys():\n        if type(qoeDat[ts]) == type(dict()):\n            filtered_values.append(qoeDat[ts][filter_obj['filter_key']])\n        else:\n            return False\n    if filter_obj['filter_value'] in filtered_values:\n        return True\n    else:\n        return False\n\n```", "choosed_example_idx": [9, 4, 8, 3, 5, 7, 0, 6, 1, 2], "prompt": "Function: get_filtered_vals\n\n\nWrite a function that generates the output from the input.\nInput: dict(qoeDat={'ts1': {'key1': 'val1'}}, filter_obj={'filter_key': 'key1', 'filter_value': 'val1'}), Output: \"True\"\nInput: dict(qoeDat={'ts1': {'key1': 'val1'}, 'ts2': {'key1': 'val1'}}, filter_obj={'filter_key': 'key1', 'filter_value': 'val1'}), Output: \"True\"\nInput: dict(qoeDat={'ts1': {'key1': 'val1'}, 'ts2': {'key2': 'val2'}, 'ts3': {'key3': 'val3'}}, filter_obj={'filter_key': 'key1', 'filter_value': 'val1'}), Output: \"<class 'KeyError'>: 'key1'\"\nInput: dict(qoeDat={'ts1': {'key1': 'val1'}, 'ts2': {'key2': 'val2'}}, filter_obj={'filter_key': 'key1', 'filter_value': 'val1'}), Output: \"<class 'KeyError'>: 'key1'\"\nInput: dict(qoeDat={'ts1': {'key1': 'val1'}, 'ts2': {'key1': 'val2', 'key2': 'val3'}}, filter_obj={'filter_key': 'key1', 'filter_value': 'val1'}), Output: \"True\"\nInput: dict(qoeDat={'ts1': {'key1': 'val1'}, 'ts2': {'key1': 'val2'}, 'ts3': 'not a dict'}, filter_obj={'filter_key': 'key1', 'filter_value': 'val1'}), Output: \"False\"\nInput: dict(qoeDat={'ts1': {'key1': 'val1'}, 'ts2': {'key1': 'val2'}}, filter_obj={'filter_key': 'key1', 'filter_value': 'val1'}), Output: \"True\"\nInput: dict(qoeDat={'ts1': {'key1': 'val1'}, 'ts2': {'key1': 'val2'}, 'ts3': {'key1': 'val3'}}, filter_obj={'filter_key': 'key1', 'filter_value': 'val1'}), Output: \"True\"\nInput: dict(qoeDat={'ts1': {'key1': 'val1'}, 'ts2': {'key1': 'val2'}}, filter_obj={'filter_key': 'key1', 'filter_value': 'val3'}), Output: \"False\"\nInput: dict(qoeDat={'ts1': {'key1': 'val1'}, 'ts2': 'not a dict'}, filter_obj={'filter_key': 'key1', 'filter_value': 'val1'}), Output: \"False\"\n\n", "id": "05dcfc7aec36164acdaabc18be59bb86d5845e93_0"}
{"example_str": "examples = [\n    dict(results={'A': 100, 'B': 50, 'C': 200}),\n    dict(results={'apple': 150, 'banana': 120, 'orange': 180}),\n    dict(results={'x': 10, 'y': 20, 'z': 30}),\n    dict(results={'hello': 40, 'world': 60, 'python': 80}),\n    dict(results={'one': 1, 'two': 2, 'three': 3}),\n    dict(results={'a': 500, 'b': 400, 'c': 300}),\n    dict(results={'red': 250, 'green': 200, 'blue': 150}),\n    dict(results={'jan': 31, 'feb': 28, 'mar': 31}),\n    dict(results={'car': 1000, 'bike': 500, 'walk': 0}),\n    dict(results={'math': 90, 'science': 80, 'english': 70}),\n]\nexamples += [\n    dict(results={\"Apple\": 150, \"Banana\": 300, \"Cherry\": 450}),\n    dict(results={\"Python\": 500, \"Java\": 350, \"C++\": 200}),\n    dict(results={\"USA\": 1200, \"Canada\": 600, \"Mexico\": 800}),\n    dict(results={\"Tesla\": 1000, \"Ford\": 700, \"BMW\": 400}),\n    dict(results={\"Chocolate\": 250, \"Vanilla\": 500, \"Strawberry\": 750}),\n    dict(results={\"Monday\": 300, \"Tuesday\": 150, \"Wednesday\": 450}),\n    dict(results={\"Red\": 800, \"Blue\": 1200, \"Green\": 400}),\n    dict(results={\"Football\": 900, \"Basketball\": 1200, \"Tennis\": 600}),\n    dict(results={\"Tom\": 0, \"Jerry\": 100, \"Spike\": 50}),\n    dict(results={\"January\": 300, \"February\": 150, \"March\": 450, \"April\": 600})\n]\nexamples += [\n    dict(results={\"apple\": 150, \"banana\": 300, \"cherry\": 450}),\n    dict(results={\"python\": 500, \"java\": 1000, \"c\": 750}),\n    dict(results={\"usa\": 1200, \"canada\": 600, \"mexico\": 800}),\n    dict(results={\"red\": 350, \"blue\": 200, \"green\": 450}),\n    dict(results={\"dog\": 250, \"cat\": 500, \"bird\": 750}),\n    dict(results={\"car\": 900, \"bike\": 300, \"bus\": 600}),\n    dict(results={\"chocolate\": 100, \"vanilla\": 200, \"strawberry\": 300}),\n    dict(results={\"monday\": 400, \"tuesday\": 800, \"wednesday\": 1200}),\n    dict(results={\"water\": 1500, \"soda\": 750, \"juice\": 300}),\n    dict(results={\"math\": 200, \"science\": 400, \"history\": 600})\n]", "code": "def bar_chart(results):\n    l = list(results.keys())\n    l.sort(key=lambda x: results[x])\n    l.reverse()\n    d = {}\n    for k in l:\n        if d.get(results[k]) == None:\n            d[results[k]] = []\n        ll = d[results[k]]\n        ll.append(k)\n        ll.sort()\n        d[results[k]] = ll\n    la = list(d.keys())\n    la.sort()\n    la.reverse()\n    s = ''\n    for k in la:\n        for key in d[k]:\n            if results[key] == 0:\n                s = s + key + '|' + '0' + '\\n'\n            else:\n                s = s + key + '|' + '#' * int(results[key] / 50) + ' ' + str(\n                    results[key]) + '\\n'\n    s = s.strip()\n    return s\n", "func_name": "bar_chart", "exec_status": true, "example_inputs": ["\"{'results': {'A': 100, 'B': 50, 'C': 200}}\"", "\"{'results': {'apple': 150, 'banana': 120, 'orange': 180}}\"", "\"{'results': {'x': 10, 'y': 20, 'z': 30}}\"", "\"{'results': {'hello': 40, 'world': 60, 'python': 80}}\"", "\"{'results': {'one': 1, 'two': 2, 'three': 3}}\"", "\"{'results': {'a': 500, 'b': 400, 'c': 300}}\"", "\"{'results': {'red': 250, 'green': 200, 'blue': 150}}\"", "\"{'results': {'jan': 31, 'feb': 28, 'mar': 31}}\"", "\"{'results': {'car': 1000, 'bike': 500, 'walk': 0}}\"", "\"{'results': {'math': 90, 'science': 80, 'english': 70}}\""], "example_outputs": [{"return": "\"'C|#### 200\\\\nA|## 100\\\\nB|# 50'\""}, {"return": "\"'orange|### 180\\\\napple|### 150\\\\nbanana|## 120'\""}, {"return": "\"'z| 30\\\\ny| 20\\\\nx| 10'\""}, {"return": "\"'python|# 80\\\\nworld|# 60\\\\nhello| 40'\""}, {"return": "\"'three| 3\\\\ntwo| 2\\\\none| 1'\""}, {"return": "\"'a|########## 500\\\\nb|######## 400\\\\nc|###### 300'\""}, {"return": "\"'red|##### 250\\\\ngreen|#### 200\\\\nblue|### 150'\""}, {"return": "\"'jan| 31\\\\nmar| 31\\\\nfeb| 28'\""}, {"return": "\"'car|#################### 1000\\\\nbike|########## 500\\\\nwalk|0'\""}, {"return": "\"'math|# 90\\\\nscience|# 80\\\\nenglish|# 70'\""}, {"return": "\"'Cherry|######### 450\\\\nBanana|###### 300\\\\nApple|### 150'\""}, {"return": "\"'Python|########## 500\\\\nJava|####### 350\\\\nC++|#### 200'\""}, {"return": "\"'USA|######################## 1200\\\\nMexico|################ 800\\\\nCanada|############ 600'\""}, {"return": "\"'Tesla|#################### 1000\\\\nFord|############## 700\\\\nBMW|######## 400'\""}, {"return": "\"'Strawberry|############### 750\\\\nVanilla|########## 500\\\\nChocolate|##### 250'\""}, {"return": "\"'Wednesday|######### 450\\\\nMonday|###### 300\\\\nTuesday|### 150'\""}, {"return": "\"'Blue|######################## 1200\\\\nRed|################ 800\\\\nGreen|######## 400'\""}, {"return": "\"'Basketball|######################## 1200\\\\nFootball|################## 900\\\\nTennis|############ 600'\""}, {"return": "\"'Jerry|## 100\\\\nSpike|# 50\\\\nTom|0'\""}, {"return": "\"'April|############ 600\\\\nMarch|######### 450\\\\nJanuary|###### 300\\\\nFebruary|### 150'\""}, {"return": "\"'cherry|######### 450\\\\nbanana|###### 300\\\\napple|### 150'\""}, {"return": "\"'java|#################### 1000\\\\nc|############### 750\\\\npython|########## 500'\""}, {"return": "\"'usa|######################## 1200\\\\nmexico|################ 800\\\\ncanada|############ 600'\""}, {"return": "\"'green|######### 450\\\\nred|####### 350\\\\nblue|#### 200'\""}, {"return": "\"'bird|############### 750\\\\ncat|########## 500\\\\ndog|##### 250'\""}, {"return": "\"'car|################## 900\\\\nbus|############ 600\\\\nbike|###### 300'\""}, {"return": "\"'strawberry|###### 300\\\\nvanilla|#### 200\\\\nchocolate|## 100'\""}, {"return": "\"'wednesday|######################## 1200\\\\ntuesday|################ 800\\\\nmonday|######## 400'\""}, {"return": "\"'water|############################## 1500\\\\nsoda|############### 750\\\\njuice|###### 300'\""}, {"return": "\"'history|############ 600\\\\nscience|######## 400\\\\nmath|#### 200'\""}], "parsed_inputs": [[["results", "{'A': 100, 'B': 50, 'C': 200}"]], [["results", "{'apple': 150, 'banana': 120, 'orange': 180}"]], [["results", "{'x': 10, 'y': 20, 'z': 30}"]], [["results", "{'hello': 40, 'world': 60, 'python': 80}"]], [["results", "{'one': 1, 'two': 2, 'three': 3}"]], [["results", "{'a': 500, 'b': 400, 'c': 300}"]], [["results", "{'red': 250, 'green': 200, 'blue': 150}"]], [["results", "{'jan': 31, 'feb': 28, 'mar': 31}"]], [["results", "{'car': 1000, 'bike': 500, 'walk': 0}"]], [["results", "{'math': 90, 'science': 80, 'english': 70}"]]], "exec_code": "def bar_chart(results):\n    l = list(results.keys())\n    l.sort(key=lambda x: results[x])\n    l.reverse()\n    d = {}\n    for k in l:\n        if d.get(results[k]) == None:\n            d[results[k]] = []\n        ll = d[results[k]]\n        ll.append(k)\n        ll.sort()\n        d[results[k]] = ll\n    la = list(d.keys())\n    la.sort()\n    la.reverse()\n    s = ''\n    for k in la:\n        for key in d[k]:\n            if results[key] == 0:\n                s = s + key + '|' + '0' + '\\n'\n            else:\n                s = s + key + '|' + '#' * int(results[key] / 50) + ' ' + str(\n                    results[key]) + '\\n'\n    s = s.strip()\n    return s\n", "output": "The function is:\n\n```python\ndef bar_chart(results):\n    l = list(results.keys())\n    l.sort(key=lambda x: results[x])\n    l.reverse()\n    d = {}\n    for k in l:\n        if d.get(results[k]) == None:\n            d[results[k]] = []\n        ll = d[results[k]]\n        ll.append(k)\n        ll.sort()\n        d[results[k]] = ll\n    la = list(d.keys())\n    la.sort()\n    la.reverse()\n    s = ''\n    for k in la:\n        for key in d[k]:\n            if results[key] == 0:\n                s = s + key + '|' + '0' + '\\n'\n            else:\n                s = s + key + '|' + '#' * int(results[key] / 50) + ' ' + str(\n                    results[key]) + '\\n'\n    s = s.strip()\n    return s\n\n```", "choosed_example_idx": [9, 6, 5, 0], "prompt": "Write a function that generates the output from the input.\nFunction: bar_chart\nInput: dict(results={'math': 90, 'science': 80, 'english': 70}), Output: \"'math|# 90\\\\nscience|# 80\\\\nenglish|# 70'\"\nInput: dict(results={'red': 250, 'green': 200, 'blue': 150}), Output: \"'red|##### 250\\\\ngreen|#### 200\\\\nblue|### 150'\"\nInput: dict(results={'a': 500, 'b': 400, 'c': 300}), Output: \"'a|########## 500\\\\nb|######## 400\\\\nc|###### 300'\"\nInput: dict(results={'A': 100, 'B': 50, 'C': 200}), Output: \"'C|#### 200\\\\nA|## 100\\\\nB|# 50'\"\n\n", "id": "77c6e4d7c0de46751c13b14cbc5a0e8a3c2de256_0"}
{"example_str": "examples = [\n    dict(str=\"bcdxabcdy\", pattern=\"abcd\"),\n    dict(str=\"aabbc\", pattern=\"abc\"),\n    dict(str=\"odicf\", pattern=\"code\"),\n    dict(str=\"ppqp\", pattern=\"pq\"),\n    dict(str=\"oragnge\", pattern=\"orange\"),\n    dict(str=\"abcabc\", pattern=\"abc\"),\n    dict(str=\"123456\", pattern=\"123\"),\n    dict(str=\"hello\", pattern=\"ell\"),\n    dict(str=\"aabbcc\", pattern=\"abc\"),\n    dict(str=\"xyzxyz\", pattern=\"xyz\"),\n]\nexamples += [\n    dict(str=\"abcde\", pattern=\"bca\"),  # True: \"bca\" is a permutation of \"abc\"\n    dict(str=\"abcde\", pattern=\"edc\"),  # False: no permutation of \"edc\" is a substring\n    dict(str=\"aabbcc\", pattern=\"abc\"), # True: \"abc\", \"bca\", \"cab\" etc. are permutations\n    dict(str=\"12345\", pattern=\"543\"),  # True: \"345\" is a permutation of \"543\"\n    dict(str=\"hello\", pattern=\"leh\"),  # True: \"hel\" is a permutation of \"leh\"\n    dict(str=\"test\", pattern=\"tse\"),   # True: \"est\" is a permutation of \"tse\"\n    dict(str=\"example\", pattern=\"pex\"),# True: \"exp\" is a permutation of \"pex\"\n    dict(str=\"window\", pattern=\"din\"), # True: \"win\" contains \"din\"\n    dict(str=\"rotation\", pattern=\"tar\"),# False: no permutation of \"tar\" is a substring\n    dict(str=\"management\", pattern=\"gem\") # True: \"man\" contains \"gem\"\n]\nexamples += [\n    dict(str=\"abcde\", pattern=\"bca\"),\n    dict(str=\"hello\", pattern=\"lle\"),\n    dict(str=\"random\", pattern=\"odn\"),\n    dict(str=\"permutation\", pattern=\"muta\"),\n    dict(str=\"teststring\", pattern=\"tst\"),\n    dict(str=\"find\", pattern=\"nid\"),\n    dict(str=\"example\", pattern=\"pexa\"),\n    dict(str=\"window\", pattern=\"ndow\"),\n    dict(str=\"characters\", pattern=\"act\"),\n    dict(str=\"subsequence\", pattern=\"quen\")\n]", "code": "def find_permutation(str, pattern):\n    pattern_dict = {}\n    for ch in pattern:\n        pattern_dict[ch] = pattern_dict.get(ch, 0) + 1\n    window_start = 0\n    matched = 0\n    for window_end in range(len(str)):\n        right_char = str[window_end]\n        left_char = str[window_start]\n        if right_char in pattern_dict:\n            pattern_dict[right_char] -= 1\n            matched += 1\n        if window_end >= len(pattern):\n            if left_char in pattern_dict:\n                pattern_dict[left_char] += 1\n                matched -= 1\n            window_start += 1\n        if matched == len(pattern):\n            return True\n    return False\n", "func_name": "find_permutation", "exec_status": true, "example_inputs": ["\"{'str': 'bcdxabcdy', 'pattern': 'abcd'}\"", "\"{'str': 'aabbc', 'pattern': 'abc'}\"", "\"{'str': 'odicf', 'pattern': 'code'}\"", "\"{'str': 'ppqp', 'pattern': 'pq'}\"", "\"{'str': 'oragnge', 'pattern': 'orange'}\"", "\"{'str': 'abcabc', 'pattern': 'abc'}\"", "\"{'str': '123456', 'pattern': '123'}\"", "\"{'str': 'hello', 'pattern': 'ell'}\"", "\"{'str': 'aabbcc', 'pattern': 'abc'}\"", "\"{'str': 'xyzxyz', 'pattern': 'xyz'}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}], "parsed_inputs": [[["str", "\"bcdxabcdy\""], ["pattern", "\"abcd\""]], [["str", "\"aabbc\""], ["pattern", "\"abc\""]], [["str", "\"odicf\""], ["pattern", "\"code\""]], [["str", "\"ppqp\""], ["pattern", "\"pq\""]], [["str", "\"oragnge\""], ["pattern", "\"orange\""]], [["str", "\"abcabc\""], ["pattern", "\"abc\""]], [["str", "\"123456\""], ["pattern", "\"123\""]], [["str", "\"hello\""], ["pattern", "\"ell\""]], [["str", "\"aabbcc\""], ["pattern", "\"abc\""]], [["str", "\"xyzxyz\""], ["pattern", "\"xyz\""]]], "exec_code": "def find_permutation(str, pattern):\n    pattern_dict = {}\n    for ch in pattern:\n        pattern_dict[ch] = pattern_dict.get(ch, 0) + 1\n    window_start = 0\n    matched = 0\n    for window_end in range(len(str)):\n        right_char = str[window_end]\n        left_char = str[window_start]\n        if right_char in pattern_dict:\n            pattern_dict[right_char] -= 1\n            matched += 1\n        if window_end >= len(pattern):\n            if left_char in pattern_dict:\n                pattern_dict[left_char] += 1\n                matched -= 1\n            window_start += 1\n        if matched == len(pattern):\n            return True\n    return False\n", "output": "The function is:\n\n```python\ndef find_permutation(str, pattern):\n    pattern_dict = {}\n    for ch in pattern:\n        pattern_dict[ch] = pattern_dict.get(ch, 0) + 1\n    window_start = 0\n    matched = 0\n    for window_end in range(len(str)):\n        right_char = str[window_end]\n        left_char = str[window_start]\n        if right_char in pattern_dict:\n            pattern_dict[right_char] -= 1\n            matched += 1\n        if window_end >= len(pattern):\n            if left_char in pattern_dict:\n                pattern_dict[left_char] += 1\n                matched -= 1\n            window_start += 1\n        if matched == len(pattern):\n            return True\n    return False\n\n```", "choosed_example_idx": [5, 1, 8, 9, 3, 6], "prompt": "Function: find_permutation\nWrite a function that generates the output from the input.\nInput: dict(str=\"abcabc\", pattern=\"abc\"), Output: \"True\"\nInput: dict(str=\"aabbc\", pattern=\"abc\"), Output: \"True\"\nInput: dict(str=\"aabbcc\", pattern=\"abc\"), Output: \"True\"\nInput: dict(str=\"xyzxyz\", pattern=\"xyz\"), Output: \"True\"\nInput: dict(str=\"ppqp\", pattern=\"pq\"), Output: \"True\"\nInput: dict(str=\"123456\", pattern=\"123\"), Output: \"True\"\n\n", "id": "03413d8b2993ae2644ea11de1a3081790b4d4c46_0"}
{"example_str": "examples = [\n    dict(value=10),\n    dict(value=20.5),\n    dict(value=0),\n    dict(value=100),\n    dict(value=50),\n    dict(value=25.25),\n    dict(value=33.33),\n    dict(value=66.67),\n    dict(value=75),\n    dict(value=99.99),\n]\nexamples += [\n    dict(value=10),\n    dict(value=25.5),\n    dict(value='30'),\n    dict(value=0),\n    dict(value=-5),\n    dict(value=100),\n    dict(value=99.99),\n    dict(value='100'),\n    dict(value='fifty'),  # This is a string that does not represent a number\n    dict(value=None)      # This will convert None to the string 'None'\n]\nexamples += [\n    dict(value=10),\n    dict(value=20),\n    dict(value=30),\n    dict(value=40),\n    dict(value=50),\n    dict(value=60),\n    dict(value=70),\n    dict(value=80),\n    dict(value=90),\n    dict(value=100)\n]", "code": "def _formatRoleLevelValue(value):\n    return '{}%'.format(value)\n", "func_name": "_formatRoleLevelValue", "exec_status": true, "example_inputs": ["\"{'value': 10}\"", "\"{'value': 20.5}\"", "\"{'value': 0}\"", "\"{'value': 100}\"", "\"{'value': 50}\"", "\"{'value': 25.25}\"", "\"{'value': 33.33}\"", "\"{'value': 66.67}\"", "\"{'value': 75}\"", "\"{'value': 99.99}\""], "example_outputs": [{"return": "\"'10%'\""}, {"return": "\"'20.5%'\""}, {"return": "\"'0%'\""}, {"return": "\"'100%'\""}, {"return": "\"'50%'\""}, {"return": "\"'25.25%'\""}, {"return": "\"'33.33%'\""}, {"return": "\"'66.67%'\""}, {"return": "\"'75%'\""}, {"return": "\"'99.99%'\""}, {"return": "\"'10%'\""}, {"return": "\"'25.5%'\""}, {"return": "\"'30%'\""}, {"return": "\"'0%'\""}, {"return": "\"'-5%'\""}, {"return": "\"'100%'\""}, {"return": "\"'99.99%'\""}, {"return": "\"'100%'\""}, {"return": "\"'fifty%'\""}, {"return": "\"'None%'\""}, {"return": "\"'10%'\""}, {"return": "\"'20%'\""}, {"return": "\"'30%'\""}, {"return": "\"'40%'\""}, {"return": "\"'50%'\""}, {"return": "\"'60%'\""}, {"return": "\"'70%'\""}, {"return": "\"'80%'\""}, {"return": "\"'90%'\""}, {"return": "\"'100%'\""}], "parsed_inputs": [[["value", "10"]], [["value", "20.5"]], [["value", "0"]], [["value", "100"]], [["value", "50"]], [["value", "25.25"]], [["value", "33.33"]], [["value", "66.67"]], [["value", "75"]], [["value", "99.99"]]], "exec_code": "def _formatRoleLevelValue(value):\n    return '{}%'.format(value)\n", "output": "The function is:\n\n```python\ndef _formatRoleLevelValue(value):\n    return '{}%'.format(value)\n\n```", "choosed_example_idx": [9, 3, 8, 4, 0], "prompt": "Function: _formatRoleLevelValue\nInput: dict(value=99.99), Output: \"'99.99%'\"\nInput: dict(value=100), Output: \"'100%'\"\nInput: dict(value=75), Output: \"'75%'\"\nInput: dict(value=50), Output: \"'50%'\"\nInput: dict(value=10), Output: \"'10%'\"\n\nWrite a function that generates the output from the input.\n", "id": "7c6156251ee414b7d016e850c55f6aa0b20d997b_0"}
{"example_str": "examples = [\n    dict(string='hello world'),\n    dict(string='this is a test'),\n    dict(string='python is fun'),\n    dict(string='i love coding'),\n    dict(string='good morning'),\n    dict(string='hello'),\n    dict(string='a'),\n    dict(string=''),\n    dict(string='this is a very long sentence'),\n    dict(string='abc def ghi jkl mno pqr stu vwx yz'),\n]\nexamples += [\n    dict(string=\"hello\"),\n    dict(string=\"this is a test\"),\n    dict(string=\"123 testing\"),\n    dict(string=\"example with multiple words\"),\n    dict(string=\"single\"),\n    dict(string=\"\"),\n    dict(string=\"Already capitalized\"),\n    dict(string=\"with a number 123\"),\n    dict(string=\"with special characters !@#\"),\n    dict(string=\"mixed CASE input\")\n]\nexamples += [\n    dict(string='hello'),\n    dict(string='good morning'),\n    dict(string='how are you'),\n    dict(string='this is a test'),\n    dict(string='example'),\n    dict(string='capitalize this'),\n    dict(string='python programming'),\n    dict(string='welcome to the party'),\n    dict(string='happy birthday'),\n    dict(string='end of the sentence')\n]", "code": "def sentence_form(string):\n    return string.capitalize() + '.'\n", "func_name": "sentence_form", "exec_status": true, "example_inputs": ["\"{'string': 'hello world'}\"", "\"{'string': 'this is a test'}\"", "\"{'string': 'python is fun'}\"", "\"{'string': 'i love coding'}\"", "\"{'string': 'good morning'}\"", "\"{'string': 'hello'}\"", "\"{'string': 'a'}\"", "\"{'string': ''}\"", "\"{'string': 'this is a very long sentence'}\"", "\"{'string': 'abc def ghi jkl mno pqr stu vwx yz'}\""], "example_outputs": [{"return": "\"'Hello world.'\""}, {"return": "\"'This is a test.'\""}, {"return": "\"'Python is fun.'\""}, {"return": "\"'I love coding.'\""}, {"return": "\"'Good morning.'\""}, {"return": "\"'Hello.'\""}, {"return": "\"'A.'\""}, {"return": "\"'.'\""}, {"return": "\"'This is a very long sentence.'\""}, {"return": "\"'Abc def ghi jkl mno pqr stu vwx yz.'\""}, {"return": "\"'Hello.'\""}, {"return": "\"'This is a test.'\""}, {"return": "\"'123 testing.'\""}, {"return": "\"'Example with multiple words.'\""}, {"return": "\"'Single.'\""}, {"return": "\"'.'\""}, {"return": "\"'Already capitalized.'\""}, {"return": "\"'With a number 123.'\""}, {"return": "\"'With special characters !@#.'\""}, {"return": "\"'Mixed case input.'\""}, {"return": "\"'Hello.'\""}, {"return": "\"'Good morning.'\""}, {"return": "\"'How are you.'\""}, {"return": "\"'This is a test.'\""}, {"return": "\"'Example.'\""}, {"return": "\"'Capitalize this.'\""}, {"return": "\"'Python programming.'\""}, {"return": "\"'Welcome to the party.'\""}, {"return": "\"'Happy birthday.'\""}, {"return": "\"'End of the sentence.'\""}], "parsed_inputs": [[["string", "\"hello world\""]], [["string", "\"this is a test\""]], [["string", "\"python is fun\""]], [["string", "\"i love coding\""]], [["string", "\"good morning\""]], [["string", "\"hello\""]], [["string", "\"a\""]], [["string", "\"\""]], [["string", "\"this is a very long sentence\""]], [["string", "\"abc def ghi jkl mno pqr stu vwx yz\""]]], "exec_code": "def sentence_form(string):\n    return string.capitalize() + '.'\n", "output": "The function is:\n\n```python\ndef sentence_form(string):\n    return string.capitalize() + '.'\n\n```", "choosed_example_idx": [2, 1, 7, 6, 4, 0, 9, 8, 3, 5], "prompt": "Write a function that generates the output from the input.\n\n\nFunction: sentence_form\n\nInput: dict(string=\"python is fun\"), Output: \"'Python is fun.'\"\nInput: dict(string=\"this is a test\"), Output: \"'This is a test.'\"\nInput: dict(string=\"\"), Output: \"'.'\"\nInput: dict(string=\"a\"), Output: \"'A.'\"\nInput: dict(string=\"good morning\"), Output: \"'Good morning.'\"\nInput: dict(string=\"hello world\"), Output: \"'Hello world.'\"\nInput: dict(string=\"abc def ghi jkl mno pqr stu vwx yz\"), Output: \"'Abc def ghi jkl mno pqr stu vwx yz.'\"\nInput: dict(string=\"this is a very long sentence\"), Output: \"'This is a very long sentence.'\"\nInput: dict(string=\"i love coding\"), Output: \"'I love coding.'\"\nInput: dict(string=\"hello\"), Output: \"'Hello.'\"\n\n\n\n", "id": "47041a94c07bafde724ef09f2de8c49716f93ac0_0"}
{"example_str": "examples = [\n    dict(a='hello', b='world'),\n    dict(a='abc', b='def'),\n    dict(a='python', b='java'),\n    dict(a='1234', b='5678'),\n    dict(a='abcd', b='efgh'),\n    dict(a='xyz', b='uvw'),\n    dict(a='apple', b='banana'),\n    dict(a='orange', b='grape'),\n    dict(a='mango', b='pine'),\n    dict(a='kiwi', b='watermelon'),\n]\nexamples += [\n    dict(a=\"hello\", b=\"world\"),\n    dict(a=\"python\", b=\"code\"),\n    dict(a=\"swap\", b=\"test\"),\n    dict(a=\"apple\", b=\"banana\"),\n    dict(a=\"12345\", b=\"67890\"),\n    dict(a=\"short\", b=\"longer\"),\n    dict(a=\"abc\", b=\"xyz\"),\n    dict(a=\"one\", b=\"two\"),\n    dict(a=\"first\", b=\"second\"),\n    dict(a=\"blue\", b=\"red\")\n]\nexamples += [\n    dict(a=\"hello\", b=\"world\"),\n    dict(a=\"python\", b=\"coding\"),\n    dict(a=\"swap\", b=\"test\"),\n    dict(a=\"apple\", b=\"banana\"),\n    dict(a=\"red\", b=\"blue\"),\n    dict(a=\"green\", b=\"yellow\"),\n    dict(a=\"black\", b=\"white\"),\n    dict(a=\"left\", b=\"right\"),\n    dict(a=\"up\", b=\"down\"),\n    dict(a=\"sun\", b=\"moon\")\n]", "code": "def swap_char(a, b):\n    new_a = b[:2] + a[2:]\n    new_b = a[:2] + b[2:]\n    return new_a + ' ' + new_b\n", "func_name": "swap_char", "exec_status": true, "example_inputs": ["\"{'a': 'hello', 'b': 'world'}\"", "\"{'a': 'abc', 'b': 'def'}\"", "\"{'a': 'python', 'b': 'java'}\"", "\"{'a': '1234', 'b': '5678'}\"", "\"{'a': 'abcd', 'b': 'efgh'}\"", "\"{'a': 'xyz', 'b': 'uvw'}\"", "\"{'a': 'apple', 'b': 'banana'}\"", "\"{'a': 'orange', 'b': 'grape'}\"", "\"{'a': 'mango', 'b': 'pine'}\"", "\"{'a': 'kiwi', 'b': 'watermelon'}\""], "example_outputs": [{"return": "\"'wollo herld'\""}, {"return": "\"'dec abf'\""}, {"return": "\"'jathon pyva'\""}, {"return": "\"'5634 1278'\""}, {"return": "\"'efcd abgh'\""}, {"return": "\"'uvz xyw'\""}, {"return": "\"'baple apnana'\""}, {"return": "\"'grange orape'\""}, {"return": "\"'pingo mane'\""}, {"return": "\"'wawi kitermelon'\""}, {"return": "\"'wollo herld'\""}, {"return": "\"'cothon pyde'\""}, {"return": "\"'teap swst'\""}, {"return": "\"'baple apnana'\""}, {"return": "\"'67345 12890'\""}, {"return": "\"'loort shnger'\""}, {"return": "\"'xyc abz'\""}, {"return": "\"'twe ono'\""}, {"return": "\"'serst ficond'\""}, {"return": "\"'reue bld'\""}, {"return": "\"'wollo herld'\""}, {"return": "\"'cothon pyding'\""}, {"return": "\"'teap swst'\""}, {"return": "\"'baple apnana'\""}, {"return": "\"'bld reue'\""}, {"return": "\"'yeeen grllow'\""}, {"return": "\"'whack blite'\""}, {"return": "\"'rift leght'\""}, {"return": "\"'do upwn'\""}, {"return": "\"'mon suon'\""}], "parsed_inputs": [[["a", "\"hello\""], ["b", "\"world\""]], [["a", "\"abc\""], ["b", "\"def\""]], [["a", "\"python\""], ["b", "\"java\""]], [["a", "\"1234\""], ["b", "\"5678\""]], [["a", "\"abcd\""], ["b", "\"efgh\""]], [["a", "\"xyz\""], ["b", "\"uvw\""]], [["a", "\"apple\""], ["b", "\"banana\""]], [["a", "\"orange\""], ["b", "\"grape\""]], [["a", "\"mango\""], ["b", "\"pine\""]], [["a", "\"kiwi\""], ["b", "\"watermelon\""]]], "exec_code": "def swap_char(a, b):\n    new_a = b[:2] + a[2:]\n    new_b = a[:2] + b[2:]\n    return new_a + ' ' + new_b\n", "output": "The function is:\n\n```python\ndef swap_char(a, b):\n    new_a = b[:2] + a[2:]\n    new_b = a[:2] + b[2:]\n    return new_a + ' ' + new_b\n\n```", "choosed_example_idx": [1, 5, 0, 7, 2, 3, 8, 4, 6, 9], "prompt": "Write a function that generates the output from the input.\nInput: dict(a=\"abc\", b=\"def\"), Output: \"'dec abf'\"\nInput: dict(a=\"xyz\", b=\"uvw\"), Output: \"'uvz xyw'\"\nInput: dict(a=\"hello\", b=\"world\"), Output: \"'wollo herld'\"\nInput: dict(a=\"orange\", b=\"grape\"), Output: \"'grange orape'\"\nInput: dict(a=\"python\", b=\"java\"), Output: \"'jathon pyva'\"\nInput: dict(a=\"1234\", b=\"5678\"), Output: \"'5634 1278'\"\nInput: dict(a=\"mango\", b=\"pine\"), Output: \"'pingo mane'\"\nInput: dict(a=\"abcd\", b=\"efgh\"), Output: \"'efcd abgh'\"\nInput: dict(a=\"apple\", b=\"banana\"), Output: \"'baple apnana'\"\nInput: dict(a=\"kiwi\", b=\"watermelon\"), Output: \"'wawi kitermelon'\"\n\nFunction: swap_char\n\n", "id": "8e1cc0d24c3532ac0349ba14dcac4b2e5ea8ccba_0"}
{"example_str": "examples = [\n    dict(e=12, f=15),\n    dict(e=24, f=30),\n    dict(e=48, f=18),\n    dict(e=100, f=75),\n    dict(e=7, f=0),\n    dict(e=0, f=9),\n    dict(e=0, f=0),\n    dict(e=36, f=24),\n    dict(e=50, f=20),\n    dict(e=99, f=33),\n]\nexamples += [\n    dict(e=12, f=15),\n    dict(e=100, f=50),\n    dict(e=17, f=31),\n    dict(e=0, f=0),\n    dict(e=0, f=10),\n    dict(e=10, f=0),\n    dict(e=25, f=5),\n    dict(e=18, f=24),\n    dict(e=56, f=42),\n    dict(e=90, f=45)\n]\nexamples += [\n    dict(e=12, f=15),\n    dict(e=100, f=50),\n    dict(e=7, f=3),\n    dict(e=25, f=5),\n    dict(e=0, f=0),\n    dict(e=0, f=1),\n    dict(e=1, f=0),\n    dict(e=17, f=17),\n    dict(e=18, f=24),\n    dict(e=35, f=10)\n]", "code": "def cmmdc(e, f):\n    \"\"\"\n    Calculeaza cmmdc-ul a 2 numere\n    :param e: nr intreg\n    :param f: nr intreg\n    :return: cmmdc-ul numerelor\n    \"\"\"\n    if f == 0:\n        if e == 0:\n            return 0\n        else:\n            return e\n    else:\n        r = e % f\n        while r > 0:\n            e = f\n            f = r\n            r = e % f\n    return f\n", "func_name": "cmmdc", "exec_status": true, "example_inputs": ["\"{'e': 12, 'f': 15}\"", "\"{'e': 24, 'f': 30}\"", "\"{'e': 48, 'f': 18}\"", "\"{'e': 100, 'f': 75}\"", "\"{'e': 7, 'f': 0}\"", "\"{'e': 0, 'f': 9}\"", "\"{'e': 0, 'f': 0}\"", "\"{'e': 36, 'f': 24}\"", "\"{'e': 50, 'f': 20}\"", "\"{'e': 99, 'f': 33}\""], "example_outputs": [{"return": "\"3\""}, {"return": "\"6\""}, {"return": "\"6\""}, {"return": "\"25\""}, {"return": "\"7\""}, {"return": "\"9\""}, {"return": "\"0\""}, {"return": "\"12\""}, {"return": "\"10\""}, {"return": "\"33\""}, {"return": "\"3\""}, {"return": "\"50\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"10\""}, {"return": "\"10\""}, {"return": "\"5\""}, {"return": "\"6\""}, {"return": "\"14\""}, {"return": "\"45\""}, {"return": "\"3\""}, {"return": "\"50\""}, {"return": "\"1\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"17\""}, {"return": "\"6\""}, {"return": "\"5\""}], "parsed_inputs": [[["e", "12"], ["f", "15"]], [["e", "24"], ["f", "30"]], [["e", "48"], ["f", "18"]], [["e", "100"], ["f", "75"]], [["e", "7"], ["f", "0"]], [["e", "0"], ["f", "9"]], [["e", "0"], ["f", "0"]], [["e", "36"], ["f", "24"]], [["e", "50"], ["f", "20"]], [["e", "99"], ["f", "33"]]], "exec_code": "def cmmdc(e, f):\n    \"\"\"\n    Calculeaza cmmdc-ul a 2 numere\n    :param e: nr intreg\n    :param f: nr intreg\n    :return: cmmdc-ul numerelor\n    \"\"\"\n    if f == 0:\n        if e == 0:\n            return 0\n        else:\n            return e\n    else:\n        r = e % f\n        while r > 0:\n            e = f\n            f = r\n            r = e % f\n    return f\n", "output": "The function is:\n\n```python\ndef cmmdc(e, f):\n    \"\"\"\n    Calculeaza cmmdc-ul a 2 numere\n    :param e: nr intreg\n    :param f: nr intreg\n    :return: cmmdc-ul numerelor\n    \"\"\"\n    if f == 0:\n        if e == 0:\n            return 0\n        else:\n            return e\n    else:\n        r = e % f\n        while r > 0:\n            e = f\n            f = r\n            r = e % f\n    return f\n\n```", "choosed_example_idx": [6, 7, 5, 2], "prompt": "Write a function that generates the output from the input.\n\n\nFunction: cmmdc\nInput: dict(e=0, f=0), Output: \"0\"\nInput: dict(e=36, f=24), Output: \"12\"\nInput: dict(e=0, f=9), Output: \"9\"\nInput: dict(e=48, f=18), Output: \"6\"\n\n\n", "id": "8e455de40eb729b1c62932a7fc38d6453316dfdc_0"}
{"example_str": "examples = [\n    dict(arr=[[1, 2, 3], [4, 5, 6]], size=3, error=False, table=False, header=False, spaces=4),\n    dict(arr=[['a', 'b', 'c'], ['d', 'e', 'f']], size=-1, error=True, table=True, header=True, spaces=2),\n    dict(arr=[[1, 2], [3, 4], [5, 6]], size=2, error=False, table=False, header=False, spaces=-1),\n    dict(arr=[['hello', 'world'], ['foo', 'bar']], size=-1, error=False, table=True, header=False, spaces=6),\n    dict(arr=[[1, 2, 3, 4], [5, 6, 7, 8]], size=4, error=True, table=False, header=True, spaces=3),\n    dict(arr=[['a', 'b'], ['c', 'd'], ['e', 'f']], size=-1, error=False, table=False, header=False, spaces=2),\n    dict(arr=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], size=3, error=False, table=True, header=False, spaces=4),\n    dict(arr=[['hello', 'world', 'foo'], ['bar', 'baz', 'qux']], size=-1, error=True, table=False, header=True, spaces=5),\n    dict(arr=[[1, 2], [3, 4], [5, 6], [7, 8]], size=2, error=False, table=False, header=False, spaces=-1),\n    dict(arr=[['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h']], size=-1, error=False, table=True, header=False, spaces=3),\n]\nexamples += [\n    dict(arr=[[\"Name\", \"Age\"], [\"Alice\", \"30\"], [\"Bob\", \"25\"]], header=True),\n    dict(arr=[[\"Product\", \"Price\"], [\"Book\", \"15\"], [\"Pen\", \"5\"]], table=True),\n    dict(arr=[[\"City\", \"Population\"], [\"New York\", \"8M\"], [\"LA\", \"4M\"]], table=True, header=True),\n    dict(arr=[[\"A\", \"B\", \"C\"], [\"1\", \"2\", \"3\"], [\"4\", \"5\", \"6\"]], size=3),\n    dict(arr=[[\"X\", \"Y\"], [\"10\", \"20\"], [\"30\", \"40\"]], spaces=10),\n    dict(arr=[[\"Header1\", \"Header2\"], [\"Data1\", \"Data2\"], [\"Data3\", \"Data4\"]], header=True, spaces=3),\n    dict(arr=[[\"Item\", \"Quantity\"], [\"Apples\", \"50\"], [\"Oranges\", \"30\"]], table=True, spaces=5),\n    dict(arr=[[\"Country\", \"Capital\"], [\"USA\", \"Washington\"], [\"France\", \"Paris\"]], header=True, table=True),\n    dict(arr=[[\"Key\", \"Value\"], [\"K1\", \"V1\"], [\"K2\", \"V2\"]], size=2, header=True, spaces=4),\n    dict(arr=[[\"One\", \"Two\", \"Three\"], [\"1\", \"2\", \"3\"], [\"4\", \"5\", \"6\"]], table=True, header=True, spaces=2)\n]\nexamples += [\n    dict(arr=[[1, 2], [3, 4]], size=2, error=False, table=False, header=False, spaces=3),\n    dict(arr=[['apple', 'banana'], ['cherry', 'date']], size=-1, error=False, table=True, header=True, spaces=5),\n    dict(arr=[['John', 'Doe'], ['Jane', 'Doe']], size=2, error=True, table=False, header=True, spaces=2),\n    dict(arr=[['red', 'blue'], ['green', 'yellow']], size=-1, error=False, table=False, header=False, spaces=4),\n    dict(arr=[['cat'], ['dog'], ['mouse']], size=1, error=False, table=True, header=False, spaces=6),\n    dict(arr=[['one', 'two', 'three'], ['four', 'five', 'six']], size=3, error=False, table=True, header=False, spaces=7),\n    dict(arr=[['header1', 'header2'], ['data1', 'data2'], ['data3', 'data4']], size=-1, error=False, table=True, header=True, spaces=3),\n    dict(arr=[['A'], ['B'], ['C'], ['D']], size=1, error=False, table=False, header=False, spaces=5),\n    dict(arr=[['first', 'second'], ['third', 'fourth'], ['fifth', 'sixth']], size=2, error=False, table=False, header=True, spaces=2),\n    dict(arr=[['alpha', 'beta', 'gamma'], ['delta', 'epsilon', 'zeta']], size=-1, error=False, table=True, header=False, spaces=8)\n]", "code": "def print_sep(arr: list, size: int=-1, error: bool=False, table: bool=False,\n    header: bool=False, spaces: int=-1):\n    \"\"\"\n    print_sep : a function to print tab in plain, with header or in table\n\n    :param arr list: A list of list\n    :param size int: size of arr (can be manualy calculated)\n    :param error bool: \n    \"\"\"\n    if size < 0:\n        if type(arr[0]) == list:\n            size = len(arr[0])\n        else:\n            return\n    if spaces <= 1:\n        spaces = 6\n    tab_size: list = []\n    for i in range(size):\n        local_size: int = 0\n        for j in range(len(arr)):\n            lg: int = len(arr[j][i])\n            if local_size < lg:\n                local_size = lg\n        tab_size.append(local_size)\n    start: int = 0\n    length: int = 0\n    if header:\n        length = (lambda x: sum(x))(tab_size) + spaces * len(tab_size) + 3\n        delimitor: str = '-' * length\n        print(f'{bcolors.OKGREEN}', end=f'{delimitor}\\n')\n        print('|', end=' ')\n        for j in range(size):\n            sep: str = ' ' * (tab_size[j] - len(arr[0][j]) + spaces - 1\n                ) + '|' + ' '\n            print(arr[0][j], end=sep)\n        print()\n        print(delimitor, end=f'{bcolors.ENDC}\\n')\n        start = 1\n    elif table:\n        length = (lambda x: sum(x))(tab_size) + spaces * len(tab_size) + 3\n        delimitor: str = '-' * length\n        print(f'{delimitor}')\n        print('|', end=' ')\n        for j in range(size):\n            sep: str = ' ' * (tab_size[j] - len(arr[0][j]) + spaces - 1\n                ) + '|' + ' '\n            print(arr[0][j], end=sep)\n        print()\n        print(delimitor)\n        start = 1\n    for i in range(start, len(arr)):\n        if table:\n            print('|', end=' ')\n        elif header:\n            print('  ', end='')\n        for j in range(size):\n            if table:\n                sep: str = ' ' * (tab_size[j] - len(arr[i][j]) + spaces - 1\n                    ) + '|' + ' '\n            else:\n                sep: str = ' ' * (tab_size[j] - len(arr[i][j]) + spaces)\n            print(arr[i][j], end=sep)\n        print()\n        if table:\n            print('-' * length)\n", "func_name": "print_sep", "exec_status": true, "example_inputs": ["\"{'arr': [[1, 2, 3], [4, 5, 6]], 'size': 3, 'error': False, 'table': False, 'header': False, 'spaces': 4}\"", "\"{'arr': [['a', 'b', 'c'], ['d', 'e', 'f']], 'size': -1, 'error': True, 'table': True, 'header': True, 'spaces': 2}\"", "\"{'arr': [[1, 2], [3, 4], [5, 6]], 'size': 2, 'error': False, 'table': False, 'header': False, 'spaces': -1}\"", "\"{'arr': [['hello', 'world'], ['foo', 'bar']], 'size': -1, 'error': False, 'table': True, 'header': False, 'spaces': 6}\"", "\"{'arr': [[1, 2, 3, 4], [5, 6, 7, 8]], 'size': 4, 'error': True, 'table': False, 'header': True, 'spaces': 3}\"", "\"{'arr': [['a', 'b'], ['c', 'd'], ['e', 'f']], 'size': -1, 'error': False, 'table': False, 'header': False, 'spaces': 2}\"", "\"{'arr': [[1, 2, 3], [4, 5, 6], [7, 8, 9]], 'size': 3, 'error': False, 'table': True, 'header': False, 'spaces': 4}\"", "\"{'arr': [['hello', 'world', 'foo'], ['bar', 'baz', 'qux']], 'size': -1, 'error': True, 'table': False, 'header': True, 'spaces': 5}\"", "\"{'arr': [[1, 2], [3, 4], [5, 6], [7, 8]], 'size': 2, 'error': False, 'table': False, 'header': False, 'spaces': -1}\"", "\"{'arr': [['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h']], 'size': -1, 'error': False, 'table': True, 'header': False, 'spaces': 3}\""], "example_outputs": [{"error": "<|EXCEPTION|> \"<class 'TypeError'>: object of type 'int' has no len()\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'bcolors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: object of type 'int' has no len()\""}, {"return": "\"None\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: object of type 'int' has no len()\""}, {"return": "\"None\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: object of type 'int' has no len()\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'bcolors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: object of type 'int' has no len()\""}, {"return": "\"None\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'bcolors' is not defined\""}, {"return": "\"None\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'bcolors' is not defined\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'bcolors' is not defined\""}, {"return": "\"None\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'bcolors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'bcolors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'bcolors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: object of type 'int' has no len()\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'bcolors' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'bcolors' is not defined\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'bcolors' is not defined\""}, {"return": "\"None\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'bcolors' is not defined\""}, {"return": "\"None\""}], "parsed_inputs": [[["arr", "[[1, 2, 3], [4, 5, 6]]"], ["size", "3"], ["error", "False"], ["table", "False"], ["header", "False"], ["spaces", "4"]], [["arr", "[['a', 'b', 'c'], ['d', 'e', 'f']]"], ["size", "-1"], ["error", "True"], ["table", "True"], ["header", "True"], ["spaces", "2"]], [["arr", "[[1, 2], [3, 4], [5, 6]]"], ["size", "2"], ["error", "False"], ["table", "False"], ["header", "False"], ["spaces", "-1"]], [["arr", "[['hello', 'world'], ['foo', 'bar']]"], ["size", "-1"], ["error", "False"], ["table", "True"], ["header", "False"], ["spaces", "6"]], [["arr", "[[1, 2, 3, 4], [5, 6, 7, 8]]"], ["size", "4"], ["error", "True"], ["table", "False"], ["header", "True"], ["spaces", "3"]], [["arr", "[['a', 'b'], ['c', 'd'], ['e', 'f']]"], ["size", "-1"], ["error", "False"], ["table", "False"], ["header", "False"], ["spaces", "2"]], [["arr", "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]"], ["size", "3"], ["error", "False"], ["table", "True"], ["header", "False"], ["spaces", "4"]], [["arr", "[['hello', 'world', 'foo'], ['bar', 'baz', 'qux']]"], ["size", "-1"], ["error", "True"], ["table", "False"], ["header", "True"], ["spaces", "5"]], [["arr", "[[1, 2], [3, 4], [5, 6], [7, 8]]"], ["size", "2"], ["error", "False"], ["table", "False"], ["header", "False"], ["spaces", "-1"]], [["arr", "[['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h']]"], ["size", "-1"], ["error", "False"], ["table", "True"], ["header", "False"], ["spaces", "3"]]], "exec_code": "def print_sep(arr: list, size: int=-1, error: bool=False, table: bool=False,\n    header: bool=False, spaces: int=-1):\n    \"\"\"\n    print_sep : a function to print tab in plain, with header or in table\n\n    :param arr list: A list of list\n    :param size int: size of arr (can be manualy calculated)\n    :param error bool: \n    \"\"\"\n    if size < 0:\n        if type(arr[0]) == list:\n            size = len(arr[0])\n        else:\n            return\n    if spaces <= 1:\n        spaces = 6\n    tab_size: list = []\n    for i in range(size):\n        local_size: int = 0\n        for j in range(len(arr)):\n            lg: int = len(arr[j][i])\n            if local_size < lg:\n                local_size = lg\n        tab_size.append(local_size)\n    start: int = 0\n    length: int = 0\n    if header:\n        length = (lambda x: sum(x))(tab_size) + spaces * len(tab_size) + 3\n        delimitor: str = '-' * length\n        print(f'{bcolors.OKGREEN}', end=f'{delimitor}\\n')\n        print('|', end=' ')\n        for j in range(size):\n            sep: str = ' ' * (tab_size[j] - len(arr[0][j]) + spaces - 1\n                ) + '|' + ' '\n            print(arr[0][j], end=sep)\n        print()\n        print(delimitor, end=f'{bcolors.ENDC}\\n')\n        start = 1\n    elif table:\n        length = (lambda x: sum(x))(tab_size) + spaces * len(tab_size) + 3\n        delimitor: str = '-' * length\n        print(f'{delimitor}')\n        print('|', end=' ')\n        for j in range(size):\n            sep: str = ' ' * (tab_size[j] - len(arr[0][j]) + spaces - 1\n                ) + '|' + ' '\n            print(arr[0][j], end=sep)\n        print()\n        print(delimitor)\n        start = 1\n    for i in range(start, len(arr)):\n        if table:\n            print('|', end=' ')\n        elif header:\n            print('  ', end='')\n        for j in range(size):\n            if table:\n                sep: str = ' ' * (tab_size[j] - len(arr[i][j]) + spaces - 1\n                    ) + '|' + ' '\n            else:\n                sep: str = ' ' * (tab_size[j] - len(arr[i][j]) + spaces)\n            print(arr[i][j], end=sep)\n        print()\n        if table:\n            print('-' * length)\n", "output": "The function is:\n\n```python\ndef print_sep(arr: list, size: int=-1, error: bool=False, table: bool=False,\n    header: bool=False, spaces: int=-1):\n    \"\"\"\n    print_sep : a function to print tab in plain, with header or in table\n\n    :param arr list: A list of list\n    :param size int: size of arr (can be manualy calculated)\n    :param error bool: \n    \"\"\"\n    if size < 0:\n        if type(arr[0]) == list:\n            size = len(arr[0])\n        else:\n            return\n    if spaces <= 1:\n        spaces = 6\n    tab_size: list = []\n    for i in range(size):\n        local_size: int = 0\n        for j in range(len(arr)):\n            lg: int = len(arr[j][i])\n            if local_size < lg:\n                local_size = lg\n        tab_size.append(local_size)\n    start: int = 0\n    length: int = 0\n    if header:\n        length = (lambda x: sum(x))(tab_size) + spaces * len(tab_size) + 3\n        delimitor: str = '-' * length\n        print(f'{bcolors.OKGREEN}', end=f'{delimitor}\\n')\n        print('|', end=' ')\n        for j in range(size):\n            sep: str = ' ' * (tab_size[j] - len(arr[0][j]) + spaces - 1\n                ) + '|' + ' '\n            print(arr[0][j], end=sep)\n        print()\n        print(delimitor, end=f'{bcolors.ENDC}\\n')\n        start = 1\n    elif table:\n        length = (lambda x: sum(x))(tab_size) + spaces * len(tab_size) + 3\n        delimitor: str = '-' * length\n        print(f'{delimitor}')\n        print('|', end=' ')\n        for j in range(size):\n            sep: str = ' ' * (tab_size[j] - len(arr[0][j]) + spaces - 1\n                ) + '|' + ' '\n            print(arr[0][j], end=sep)\n        print()\n        print(delimitor)\n        start = 1\n    for i in range(start, len(arr)):\n        if table:\n            print('|', end=' ')\n        elif header:\n            print('  ', end='')\n        for j in range(size):\n            if table:\n                sep: str = ' ' * (tab_size[j] - len(arr[i][j]) + spaces - 1\n                    ) + '|' + ' '\n            else:\n                sep: str = ' ' * (tab_size[j] - len(arr[i][j]) + spaces)\n            print(arr[i][j], end=sep)\n        print()\n        if table:\n            print('-' * length)\n\n```", "choosed_example_idx": [7, 1, 8, 2, 5], "prompt": "Input: dict(arr=[['hello', 'world', 'foo'], ['bar', 'baz', 'qux']], size=-1, error=True, table=False, header=True, spaces=5), Output: \"<class 'NameError'>: name 'bcolors' is not defined\"\nInput: dict(arr=[['a', 'b', 'c'], ['d', 'e', 'f']], size=-1, error=True, table=True, header=True, spaces=2), Output: \"<class 'NameError'>: name 'bcolors' is not defined\"\nInput: dict(arr=[[1, 2], [3, 4], [5, 6], [7, 8]], size=2, error=False, table=False, header=False, spaces=-1), Output: \"<class 'TypeError'>: object of type 'int' has no len()\"\nInput: dict(arr=[[1, 2], [3, 4], [5, 6]], size=2, error=False, table=False, header=False, spaces=-1), Output: \"<class 'TypeError'>: object of type 'int' has no len()\"\nInput: dict(arr=[['a', 'b'], ['c', 'd'], ['e', 'f']], size=-1, error=False, table=False, header=False, spaces=2), Output: \"None\"\n\nFunction: print_sep\nWrite a function that generates the output from the input.\n\n", "id": "634e9d4cbebee6130ae45a79ca1c448887fb9e56_0"}
{"example_str": "examples = [\n    dict(text=\"hello\", suffix=\"lo\"),\n    dict(text=\"hello\", suffix=\"abc\"),\n    dict(text=\"abcdef\", suffix=\"def\"),\n    dict(text=\"abcdef\", suffix=\"abc\"),\n    dict(text=\"\", suffix=\"abc\"),\n    dict(text=\"abc\", suffix=\"\"),\n    dict(text=\"abc\", suffix=\"abc\"),\n    dict(text=\"abcabc\", suffix=\"abc\"),\n    dict(text=\"abcabc\", suffix=\"abcabc\"),\n    dict(text=\"abcdefg\", suffix=\"fg\"),\n    dict(text=\"abcdefg\", suffix=\"abcdefg\"),\n]\nexamples += [\n    dict(text=\"hello world\", suffix=\" world\"),\n    dict(text=\"hello world\", suffix=\"world\"),\n    dict(text=\"testcase\", suffix=\"case\"),\n    dict(text=\"strip_end\", suffix=\"end\"),\n    dict(text=\"strip_end\", suffix=\"_end\"),\n    dict(text=\"123456789\", suffix=\"789\"),\n    dict(text=\"filename.txt\", suffix=\".txt\"),\n    dict(text=\"look here!\", suffix=\"here!\"),\n    dict(text=\"no suffix here\", suffix=\"suffix\"),\n    dict(text=\"endswithsuffix\", suffix=\"suffix\")\n]\nexamples += [\n    dict(text='hello world', suffix=' world'),\n    dict(text='python programming', suffix=' programming'),\n    dict(text='strip_end', suffix='_end'),\n    dict(text='example suffix', suffix=' suffix'),\n    dict(text='test case', suffix=' case'),\n    dict(text='remove this suffix', suffix=' suffix'),\n    dict(text='no suffix here', suffix='suffix'),\n    dict(text='endswith', suffix='with'),\n    dict(text='123456789', suffix='789'),\n    dict(text='another example', suffix=' example'),\n]", "code": "def strip_end(text, suffix):\n    if not text.endswith(suffix):\n        return text\n    return text[:len(text) - len(suffix)]\n", "func_name": "strip_end", "exec_status": true, "example_inputs": ["\"{'text': 'hello', 'suffix': 'lo'}\"", "\"{'text': 'hello', 'suffix': 'abc'}\"", "\"{'text': 'abcdef', 'suffix': 'def'}\"", "\"{'text': 'abcdef', 'suffix': 'abc'}\"", "\"{'text': '', 'suffix': 'abc'}\"", "\"{'text': 'abc', 'suffix': ''}\"", "\"{'text': 'abc', 'suffix': 'abc'}\"", "\"{'text': 'abcabc', 'suffix': 'abc'}\"", "\"{'text': 'abcabc', 'suffix': 'abcabc'}\"", "\"{'text': 'abcdefg', 'suffix': 'fg'}\"", "\"{'text': 'abcdefg', 'suffix': 'abcdefg'}\""], "example_outputs": [{"return": "\"'hel'\""}, {"return": "\"'hello'\""}, {"return": "\"'abc'\""}, {"return": "\"'abcdef'\""}, {"return": "\"''\""}, {"return": "\"'abc'\""}, {"return": "\"''\""}, {"return": "\"'abc'\""}, {"return": "\"''\""}, {"return": "\"'abcde'\""}, {"return": "\"''\""}, {"return": "\"'hello'\""}, {"return": "\"'hello '\""}, {"return": "\"'test'\""}, {"return": "\"'strip_'\""}, {"return": "\"'strip'\""}, {"return": "\"'123456'\""}, {"return": "\"'filename'\""}, {"return": "\"'look '\""}, {"return": "\"'no suffix here'\""}, {"return": "\"'endswith'\""}, {"return": "\"'hello'\""}, {"return": "\"'python'\""}, {"return": "\"'strip'\""}, {"return": "\"'example'\""}, {"return": "\"'test'\""}, {"return": "\"'remove this'\""}, {"return": "\"'no suffix here'\""}, {"return": "\"'ends'\""}, {"return": "\"'123456'\""}, {"return": "\"'another'\""}], "parsed_inputs": [[["text", "\"hello\""], ["suffix", "\"lo\""]], [["text", "\"hello\""], ["suffix", "\"abc\""]], [["text", "\"abcdef\""], ["suffix", "\"def\""]], [["text", "\"abcdef\""], ["suffix", "\"abc\""]], [["text", "\"\""], ["suffix", "\"abc\""]], [["text", "\"abc\""], ["suffix", "\"\""]], [["text", "\"abc\""], ["suffix", "\"abc\""]], [["text", "\"abcabc\""], ["suffix", "\"abc\""]], [["text", "\"abcabc\""], ["suffix", "\"abcabc\""]], [["text", "\"abcdefg\""], ["suffix", "\"fg\""]], [["text", "\"abcdefg\""], ["suffix", "\"abcdefg\""]]], "exec_code": "def strip_end(text, suffix):\n    if not text.endswith(suffix):\n        return text\n    return text[:len(text) - len(suffix)]\n", "output": "The function is:\n\n```python\ndef strip_end(text, suffix):\n    if not text.endswith(suffix):\n        return text\n    return text[:len(text) - len(suffix)]\n\n```", "choosed_example_idx": [7, 2, 10, 9, 6, 1, 5, 8, 3, 4], "prompt": "Input: dict(text=\"abcabc\", suffix=\"abc\"), Output: \"'abc'\"\nInput: dict(text=\"abcdef\", suffix=\"def\"), Output: \"'abc'\"\nInput: dict(text=\"abcdefg\", suffix=\"abcdefg\"), Output: \"''\"\nInput: dict(text=\"abcdefg\", suffix=\"fg\"), Output: \"'abcde'\"\nInput: dict(text=\"abc\", suffix=\"abc\"), Output: \"''\"\nInput: dict(text=\"hello\", suffix=\"abc\"), Output: \"'hello'\"\nInput: dict(text=\"abc\", suffix=\"\"), Output: \"'abc'\"\nInput: dict(text=\"abcabc\", suffix=\"abcabc\"), Output: \"''\"\nInput: dict(text=\"abcdef\", suffix=\"abc\"), Output: \"'abcdef'\"\nInput: dict(text=\"\", suffix=\"abc\"), Output: \"''\"\n\nFunction: strip_end\n\nWrite a function that generates the output from the input.\n\n", "id": "7a0ec3bbc4e5467d888feafcacd87a55ddd99cd7_0"}
{"example_str": "examples = [\n    dict(signal=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], slidingWindowSize=20, stepSize=10),\n    dict(signal=[10, 20, 30, 40, 50], slidingWindowSize=5, stepSize=2),\n    dict(signal=[], slidingWindowSize=20, stepSize=10),\n    dict(signal=[1, 2, 3, 4, 5], slidingWindowSize=3, stepSize=1),\n    dict(signal=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], slidingWindowSize=15, stepSize=5),\n    dict(signal=[1, 2, 3, 4, 5, 6, 7, 8, 9], slidingWindowSize=10, stepSize=3),\n    dict(signal=[10, 20, 30, 40], slidingWindowSize=4, stepSize=2),\n    dict(signal=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], slidingWindowSize=12, stepSize=4),\n    dict(signal=[10, 20, 30, 40, 50, 60], slidingWindowSize=6, stepSize=3),\n    dict(signal=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], slidingWindowSize=15, stepSize=5)\n]\nexamples += [\n    dict(signal=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], slidingWindowSize=20, stepSize=10),\n    dict(signal=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], slidingWindowSize=5, stepSize=2),\n    dict(signal=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], slidingWindowSize=3, stepSize=1),\n    dict(signal=[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], slidingWindowSize=4, stepSize=3),\n    dict(signal=[100, 200, 300, 400, 500], slidingWindowSize=2, stepSize=1),\n    dict(signal=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19], slidingWindowSize=10, stepSize=5),\n    dict(signal=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], slidingWindowSize=6, stepSize=2),\n    dict(signal=[0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5], slidingWindowSize=8, stepSize=4),\n    dict(signal=[-10, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100], slidingWindowSize=7, stepSize=6),\n    dict(signal=[], slidingWindowSize=5, stepSize=2)\n]\nexamples += [\n    dict(signal=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], slidingWindowSize=2, stepSize=1),\n    dict(signal=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], slidingWindowSize=5, stepSize=2),\n    dict(signal=[0.5, 1.5, 2.5, 3.5, 4.5], slidingWindowSize=3, stepSize=1),\n    dict(signal=[100, 200, 300, 400, 500], slidingWindowSize=1, stepSize=1),\n    dict(signal=[1, 1, 2, 3, 5, 8, 13, 21], slidingWindowSize=4, stepSize=2),\n    dict(signal=[], slidingWindowSize=10, stepSize=5),\n    dict(signal=[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], slidingWindowSize=3, stepSize=3),\n    dict(signal=[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], slidingWindowSize=6, stepSize=3),\n    dict(signal=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], slidingWindowSize=5, stepSize=5),\n    dict(signal=[1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.10], slidingWindowSize=2, stepSize=2)\n]", "code": "def segmentSignal(signal, slidingWindowSize=20, stepSize=10):\n    \"\"\"\n    segment signal with slidingWindowSize=20 (number of sample in window) and stepSize=10 (number of samle to sample from window to another)\n    \"\"\"\n    if not signal:\n        return []\n    numberOfSemgent = len(signal) / stepSize\n    if len(signal) % stepSize:\n        numberOfSemgent += 1\n    segmented = [list() for _ in xrange(numberOfSemgent)]\n    k = 0\n    lesserSegment = 0\n    upperSegment = -1\n    for v in signal:\n        if k % stepSize == 0:\n            upperSegment += 1\n        for i in xrange(lesserSegment, upperSegment + 1):\n            segmented[i].append(v)\n        if len(segmented[lesserSegment]) == slidingWindowSize:\n            lesserSegment += 1\n        k += 1\n    last = numberOfSemgent - 1\n    while len(segmented[last]) < slidingWindowSize:\n        segmented[last] += [0] * (slidingWindowSize - len(segmented[last]))\n        last -= 1\n    return segmented\n", "func_name": "segmentSignal", "exec_status": true, "example_inputs": ["\"{'signal': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'slidingWindowSize': 20, 'stepSize': 10}\"", "\"{'signal': [10, 20, 30, 40, 50], 'slidingWindowSize': 5, 'stepSize': 2}\"", "\"{'signal': [], 'slidingWindowSize': 20, 'stepSize': 10}\"", "\"{'signal': [1, 2, 3, 4, 5], 'slidingWindowSize': 3, 'stepSize': 1}\"", "\"{'signal': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 'slidingWindowSize': 15, 'stepSize': 5}\"", "\"{'signal': [1, 2, 3, 4, 5, 6, 7, 8, 9], 'slidingWindowSize': 10, 'stepSize': 3}\"", "\"{'signal': [10, 20, 30, 40], 'slidingWindowSize': 4, 'stepSize': 2}\"", "\"{'signal': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'slidingWindowSize': 12, 'stepSize': 4}\"", "\"{'signal': [10, 20, 30, 40, 50, 60], 'slidingWindowSize': 6, 'stepSize': 3}\"", "\"{'signal': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'slidingWindowSize': 15, 'stepSize': 5}\""], "example_outputs": [{"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"return": "\"[]\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"return": "\"[]\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"return": "\"[]\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'xrange' is not defined\""}], "parsed_inputs": [[["signal", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], ["slidingWindowSize", "20"], ["stepSize", "10"]], [["signal", "[10, 20, 30, 40, 50]"], ["slidingWindowSize", "5"], ["stepSize", "2"]], [["signal", "[]"], ["slidingWindowSize", "20"], ["stepSize", "10"]], [["signal", "[1, 2, 3, 4, 5]"], ["slidingWindowSize", "3"], ["stepSize", "1"]], [["signal", "[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]"], ["slidingWindowSize", "15"], ["stepSize", "5"]], [["signal", "[1, 2, 3, 4, 5, 6, 7, 8, 9]"], ["slidingWindowSize", "10"], ["stepSize", "3"]], [["signal", "[10, 20, 30, 40]"], ["slidingWindowSize", "4"], ["stepSize", "2"]], [["signal", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]"], ["slidingWindowSize", "12"], ["stepSize", "4"]], [["signal", "[10, 20, 30, 40, 50, 60]"], ["slidingWindowSize", "6"], ["stepSize", "3"]], [["signal", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"], ["slidingWindowSize", "15"], ["stepSize", "5"]]], "exec_code": "def segmentSignal(signal, slidingWindowSize=20, stepSize=10):\n    \"\"\"\n    segment signal with slidingWindowSize=20 (number of sample in window) and stepSize=10 (number of samle to sample from window to another)\n    \"\"\"\n    if not signal:\n        return []\n    numberOfSemgent = len(signal) / stepSize\n    if len(signal) % stepSize:\n        numberOfSemgent += 1\n    segmented = [list() for _ in xrange(numberOfSemgent)]\n    k = 0\n    lesserSegment = 0\n    upperSegment = -1\n    for v in signal:\n        if k % stepSize == 0:\n            upperSegment += 1\n        for i in xrange(lesserSegment, upperSegment + 1):\n            segmented[i].append(v)\n        if len(segmented[lesserSegment]) == slidingWindowSize:\n            lesserSegment += 1\n        k += 1\n    last = numberOfSemgent - 1\n    while len(segmented[last]) < slidingWindowSize:\n        segmented[last] += [0] * (slidingWindowSize - len(segmented[last]))\n        last -= 1\n    return segmented\n", "output": "The function is:\n\n```python\ndef segmentSignal(signal, slidingWindowSize=20, stepSize=10):\n    \"\"\"\n    segment signal with slidingWindowSize=20 (number of sample in window) and stepSize=10 (number of samle to sample from window to another)\n    \"\"\"\n    if not signal:\n        return []\n    numberOfSemgent = len(signal) / stepSize\n    if len(signal) % stepSize:\n        numberOfSemgent += 1\n    segmented = [list() for _ in xrange(numberOfSemgent)]\n    k = 0\n    lesserSegment = 0\n    upperSegment = -1\n    for v in signal:\n        if k % stepSize == 0:\n            upperSegment += 1\n        for i in xrange(lesserSegment, upperSegment + 1):\n            segmented[i].append(v)\n        if len(segmented[lesserSegment]) == slidingWindowSize:\n            lesserSegment += 1\n        k += 1\n    last = numberOfSemgent - 1\n    while len(segmented[last]) < slidingWindowSize:\n        segmented[last] += [0] * (slidingWindowSize - len(segmented[last]))\n        last -= 1\n    return segmented\n\n```", "choosed_example_idx": [3, 6, 5, 9, 0, 2], "prompt": "Write a function that generates the output from the input.\n\nFunction: segmentSignal\n\n\nInput: dict(signal=[1, 2, 3, 4, 5], slidingWindowSize=3, stepSize=1), Output: \"<class 'NameError'>: name 'xrange' is not defined\"\nInput: dict(signal=[10, 20, 30, 40], slidingWindowSize=4, stepSize=2), Output: \"<class 'NameError'>: name 'xrange' is not defined\"\nInput: dict(signal=[1, 2, 3, 4, 5, 6, 7, 8, 9], slidingWindowSize=10, stepSize=3), Output: \"<class 'NameError'>: name 'xrange' is not defined\"\nInput: dict(signal=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], slidingWindowSize=15, stepSize=5), Output: \"<class 'NameError'>: name 'xrange' is not defined\"\nInput: dict(signal=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], slidingWindowSize=20, stepSize=10), Output: \"<class 'NameError'>: name 'xrange' is not defined\"\nInput: dict(signal=[], slidingWindowSize=20, stepSize=10), Output: \"[]\"\n\n", "id": "e19478e7c3ad31dc233729d50453275356dfacaa_0"}
{"example_str": "examples = [\n    dict(v={'a': 1, 'b': 2, 'c': 3}),\n    dict(v={'name': 'John', 'age': 30, 'city': 'New York'}),\n    dict(v={'x': 10, 'y': 20, 'z': 30}),\n    dict(v={'apple': 5, 'banana': 7, 'orange': 3}),\n    dict(v={'one': 1, 'two': 2, 'three': 3}),\n    dict(v={'hello': 'world', 'foo': 'bar', 'baz': 'qux'}),\n    dict(v={'A': 65, 'B': 66, 'C': 67}),\n    dict(v={'I': 1, 'II': 2, 'III': 3}),\n    dict(v={'red': '#FF0000', 'green': '#00FF00', 'blue': '#0000FF'}),\n    dict(v={'pi': 3.14, 'e': 2.71, 'phi': 1.61}),\n]\nexamples += [\n    dict(v={'x': 1, 'y': 2, 'z': 3}),\n    dict(v={'a': 10, 'b': 20}),\n    dict(v={'name': 'Alice', 'age': 30}),\n    dict(v={1: 'one', 2: 'two', 3: 'three'}),\n    dict(v={'temperature': 22.5, 'humidity': 80}),\n    dict(v={'USA': 'Washington', 'Canada': 'Ottawa'}),\n    dict(v={'apple': 1.5, 'banana': 3.2, 'cherry': 2.7}),\n    dict(v={'boolean_key': True, 'false_key': False}),\n    dict(v={'nested_dict': {'key': 'value'}, 'number': 42}),\n    dict(v={'mixed_types': 1, 2: [1, 2, 3], 'three': (1, 2, 3)})\n]\nexamples += [\n    dict(v={'x': 1, 'y': 2}),\n    dict(v={'a': 10, 'b': 20, 'c': 30}),\n    dict(v={'name': 'Alice', 'age': 25}),\n    dict(v={'one': 1}),\n    dict(v={'temperature': 72, 'humidity': 50}),\n    dict(v={'country': 'USA', 'city': 'New York'}),\n    dict(v={'red': 255, 'green': 0, 'blue': 0}),\n    dict(v={'apple': 3, 'banana': 5, 'cherry': 7}),\n    dict(v={'January': 100, 'February': 150, 'March': 200}),\n    dict(v={'key1': 'value1', 'key2': 'value2', 'key3': 'value3'})\n]", "code": "def print_vector(v):\n    for x in v.items():\n        print(str(x[0]) + ': ' + str(x[1]) + ', ', end='')\n    return\n", "func_name": "print_vector", "exec_status": true, "example_inputs": ["\"{'v': {'a': 1, 'b': 2, 'c': 3}}\"", "\"{'v': {'name': 'John', 'age': 30, 'city': 'New York'}}\"", "\"{'v': {'x': 10, 'y': 20, 'z': 30}}\"", "\"{'v': {'apple': 5, 'banana': 7, 'orange': 3}}\"", "\"{'v': {'one': 1, 'two': 2, 'three': 3}}\"", "\"{'v': {'hello': 'world', 'foo': 'bar', 'baz': 'qux'}}\"", "\"{'v': {'A': 65, 'B': 66, 'C': 67}}\"", "\"{'v': {'I': 1, 'II': 2, 'III': 3}}\"", "\"{'v': {'red': '#FF0000', 'green': '#00FF00', 'blue': '#0000FF'}}\"", "\"{'v': {'pi': 3.14, 'e': 2.71, 'phi': 1.61}}\""], "example_outputs": [{"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}], "parsed_inputs": [[["v", "{'a': 1, 'b': 2, 'c': 3}"]], [["v", "{'name': 'John', 'age': 30, 'city': 'New York'}"]], [["v", "{'x': 10, 'y': 20, 'z': 30}"]], [["v", "{'apple': 5, 'banana': 7, 'orange': 3}"]], [["v", "{'one': 1, 'two': 2, 'three': 3}"]], [["v", "{'hello': 'world', 'foo': 'bar', 'baz': 'qux'}"]], [["v", "{'A': 65, 'B': 66, 'C': 67}"]], [["v", "{'I': 1, 'II': 2, 'III': 3}"]], [["v", "{'red': '#FF0000', 'green': '#00FF00', 'blue': '#0000FF'}"]], [["v", "{'pi': 3.14, 'e': 2.71, 'phi': 1.61}"]]], "exec_code": "def print_vector(v):\n    for x in v.items():\n        print(str(x[0]) + ': ' + str(x[1]) + ', ', end='')\n    return\n", "output": "The function is:\n\n```python\ndef print_vector(v):\n    for x in v.items():\n        print(str(x[0]) + ': ' + str(x[1]) + ', ', end='')\n    return\n\n```", "choosed_example_idx": [2, 6, 3, 5, 0], "prompt": "Write a function that generates the output from the input.\n\n\nFunction: print_vector\nInput: dict(v={'x': 10, 'y': 20, 'z': 30}), Output: \"None\"\nInput: dict(v={'A': 65, 'B': 66, 'C': 67}), Output: \"None\"\nInput: dict(v={'apple': 5, 'banana': 7, 'orange': 3}), Output: \"None\"\nInput: dict(v={'hello': 'world', 'foo': 'bar', 'baz': 'qux'}), Output: \"None\"\nInput: dict(v={'a': 1, 'b': 2, 'c': 3}), Output: \"None\"\n\n", "id": "c43c78bbe8650f505801cb85d55ad8339ec7ad78_0"}
{"example_str": "examples = [\n    dict(a=10, b=3),\n    dict(a=7, b=2),\n    dict(a=11, b=4),\n    dict(a=15, b=5),\n    dict(a=20, b=4),\n    dict(a=25, b=5),\n    dict(a=30, b=6),\n    dict(a=35, b=7),\n    dict(a=40, b=8),\n    dict(a=45, b=9),\n]\nexamples += [\n    dict(a=10, b=3),   # 10 divided by 3 is 3.333, ceiling is 4\n    dict(a=25, b=5),   # 25 divided by 5 is 5, ceiling is 5\n    dict(a=17, b=6),   # 17 divided by 6 is 2.833, ceiling is 3\n    dict(a=-10, b=3),  # -10 divided by 3 is -3.333, ceiling is -3\n    dict(a=7, b=-2),   # 7 divided by -2 is -3.5, ceiling is -3\n    dict(a=-5, b=-3),  # -5 divided by -3 is 1.666, ceiling is 2\n    dict(a=0, b=1),    # 0 divided by 1 is 0, ceiling is 0\n    dict(a=1, b=2),    # 1 divided by 2 is 0.5, ceiling is 1\n    dict(a=123, b=50), # 123 divided by 50 is 2.46, ceiling is 3\n    dict(a=100, b=30)  # 100 divided by 30 is 3.333, ceiling is 4\n]\nexamples += [\n    dict(a=10, b=3),\n    dict(a=20, b=4),\n    dict(a=15, b=6),\n    dict(a=7, b=2),\n    dict(a=100, b=25),\n    dict(a=9, b=5),\n    dict(a=23, b=7),\n    dict(a=50, b=9),\n    dict(a=17, b=8),\n    dict(a=13, b=5),\n]", "code": "def ceildiv(a, b):\n    return -(-a // b)\n", "func_name": "ceildiv", "exec_status": true, "example_inputs": ["\"{'a': 10, 'b': 3}\"", "\"{'a': 7, 'b': 2}\"", "\"{'a': 11, 'b': 4}\"", "\"{'a': 15, 'b': 5}\"", "\"{'a': 20, 'b': 4}\"", "\"{'a': 25, 'b': 5}\"", "\"{'a': 30, 'b': 6}\"", "\"{'a': 35, 'b': 7}\"", "\"{'a': 40, 'b': 8}\"", "\"{'a': 45, 'b': 9}\""], "example_outputs": [{"return": "\"4\""}, {"return": "\"4\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"4\""}, {"return": "\"5\""}, {"return": "\"3\""}, {"return": "\"-3\""}, {"return": "\"-3\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"4\""}, {"return": "\"4\""}, {"return": "\"5\""}, {"return": "\"3\""}, {"return": "\"4\""}, {"return": "\"4\""}, {"return": "\"2\""}, {"return": "\"4\""}, {"return": "\"6\""}, {"return": "\"3\""}, {"return": "\"3\""}], "parsed_inputs": [[["a", "10"], ["b", "3"]], [["a", "7"], ["b", "2"]], [["a", "11"], ["b", "4"]], [["a", "15"], ["b", "5"]], [["a", "20"], ["b", "4"]], [["a", "25"], ["b", "5"]], [["a", "30"], ["b", "6"]], [["a", "35"], ["b", "7"]], [["a", "40"], ["b", "8"]], [["a", "45"], ["b", "9"]]], "exec_code": "def ceildiv(a, b):\n    return -(-a // b)\n", "output": "The function is:\n\n```python\ndef ceildiv(a, b):\n    return -(-a // b)\n\n```", "choosed_example_idx": [6, 5, 1, 7, 3], "prompt": "Write a function that generates the output from the input.\n\n\nInput: dict(a=30, b=6), Output: \"5\"\nInput: dict(a=25, b=5), Output: \"5\"\nInput: dict(a=7, b=2), Output: \"4\"\nInput: dict(a=35, b=7), Output: \"5\"\nInput: dict(a=15, b=5), Output: \"3\"\n\nFunction: ceildiv\n\n", "id": "d257e89304493f8fb630a47d734ef8cea641f8ea_0"}
{"example_str": "examples = [\n    dict(node=0, left={1, 2, 3}, matrix={0: [1, 2], 1: [0, 3], 2: [0, 3], 3: [1, 2]}, group=set()),\n    dict(node=1, left={0, 2, 3}, matrix={0: [1, 2], 1: [0, 3], 2: [0, 3], 3: [1, 2]}, group=set()),\n    dict(node=2, left={0, 1, 3}, matrix={0: [1, 2], 1: [0, 3], 2: [0, 3], 3: [1, 2]}, group=set()),\n    dict(node=3, left={0, 1, 2}, matrix={0: [1, 2], 1: [0, 3], 2: [0, 3], 3: [1, 2]}, group=set()),\n    dict(node=0, left={1, 2}, matrix={0: [1, 2], 1: [0], 2: [0]}, group=set()),\n    dict(node=1, left={0, 2}, matrix={0: [1, 2], 1: [0], 2: [0]}, group=set()),\n    dict(node=2, left={0, 1}, matrix={0: [1, 2], 1: [0], 2: [0]}, group=set()),\n    dict(node=0, left={1}, matrix={0: [1], 1: [0]}, group=set()),\n    dict(node=1, left={0}, matrix={0: [1], 1: [0]}, group=set()),\n    dict(node=0, left=set(), matrix={0: []}, group=set()),\n]\nexamples += [\n    dict(node=0, left={1, 2, 3}, matrix={0: [1], 1: [2], 2: [3], 3: []}, group=set()),\n    dict(node=1, left={2, 3, 4}, matrix={1: [2], 2: [3], 3: [4], 4: []}, group=set()),\n    dict(node=2, left={3, 4, 5}, matrix={2: [3], 3: [4], 4: [5], 5: []}, group=set()),\n    dict(node=0, left={1, 2}, matrix={0: [1], 1: [2], 2: []}, group=set()),\n    dict(node=1, left={2, 3}, matrix={1: [2], 2: [3], 3: []}, group=set()),\n    dict(node=0, left={1, 2, 3, 4}, matrix={0: [1, 2], 1: [3], 2: [4], 3: [], 4: []}, group=set()),\n    dict(node=3, left={4, 5, 6}, matrix={3: [4], 4: [5], 5: [6], 6: []}, group=set()),\n    dict(node=0, left={1, 2, 3, 4, 5}, matrix={0: [1], 1: [2, 3], 2: [4], 3: [5], 4: [], 5: []}, group=set()),\n    dict(node=2, left={3, 4, 5, 6}, matrix={2: [3, 4], 3: [5], 4: [6], 5: [], 6: []}, group=set()),\n    dict(node=1, left={2, 3, 4, 5, 6}, matrix={1: [2], 2: [3, 4], 3: [5], 4: [6], 5: [], 6: []}, group=set())\n]\nexamples += [\n    dict(node=0, left={1, 2, 3}, matrix={0: [1], 1: [2], 2: [3], 3: []}, group=set()),\n    dict(node=1, left={2, 3, 4}, matrix={1: [2], 2: [3], 3: [4], 4: []}, group={1}),\n    dict(node=2, left={3, 4, 5}, matrix={2: [3], 3: [4], 4: [5], 5: []}, group={2}),\n    dict(node=3, left={4, 5, 6}, matrix={3: [4], 4: [5], 5: [6], 6: []}, group={3}),\n    dict(node=4, left={5, 6, 7}, matrix={4: [5], 5: [6], 6: [7], 7: []}, group={4}),\n    dict(node=5, left={6, 7, 8}, matrix={5: [6], 6: [7], 7: [8], 8: []}, group={5}),\n    dict(node=6, left={7, 8, 9}, matrix={6: [7], 7: [8], 8: [9], 9: []}, group={6}),\n    dict(node=7, left={8, 9, 10}, matrix={7: [8], 8: [9], 9: [10], 10: []}, group={7}),\n    dict(node=8, left={9, 10, 11}, matrix={8: [9], 9: [10], 10: [11], 11: []}, group={8}),\n    dict(node=9, left={10, 11, 12}, matrix={9: [10], 10: [11], 11: [12], 12: []}, group={9})\n]", "code": "def add_to_infect(node, left, matrix, group):\n    for neighbor in matrix[node]:\n        for next_neighbor in matrix[neighbor]:\n            left.discard(next_neighbor)\n            if next_neighbor not in group:\n                group.add(next_neighbor)\n                group = add_to_infect(next_neighbor, left, matrix, group)\n    return group\n", "func_name": "add_to_infect", "exec_status": true, "example_inputs": ["\"{'node': 0, 'left': {1, 2, 3}, 'matrix': {0: [1, 2], 1: [0, 3], 2: [0, 3], 3: [1, 2]}, 'group': set()}\"", "\"{'node': 1, 'left': {0, 2, 3}, 'matrix': {0: [1, 2], 1: [0, 3], 2: [0, 3], 3: [1, 2]}, 'group': set()}\"", "\"{'node': 2, 'left': {0, 1, 3}, 'matrix': {0: [1, 2], 1: [0, 3], 2: [0, 3], 3: [1, 2]}, 'group': set()}\"", "\"{'node': 3, 'left': {0, 1, 2}, 'matrix': {0: [1, 2], 1: [0, 3], 2: [0, 3], 3: [1, 2]}, 'group': set()}\"", "\"{'node': 0, 'left': {1, 2}, 'matrix': {0: [1, 2], 1: [0], 2: [0]}, 'group': set()}\"", "\"{'node': 1, 'left': {0, 2}, 'matrix': {0: [1, 2], 1: [0], 2: [0]}, 'group': set()}\"", "\"{'node': 2, 'left': {0, 1}, 'matrix': {0: [1, 2], 1: [0], 2: [0]}, 'group': set()}\"", "\"{'node': 0, 'left': {1}, 'matrix': {0: [1], 1: [0]}, 'group': set()}\"", "\"{'node': 1, 'left': {0}, 'matrix': {0: [1], 1: [0]}, 'group': set()}\"", "\"{'node': 0, 'left': set(), 'matrix': {0: []}, 'group': set()}\""], "example_outputs": [{"return": "\"{0, 3}\""}, {"return": "\"{1, 2}\""}, {"return": "\"{1, 2}\""}, {"return": "\"{0, 3}\""}, {"return": "\"{0}\""}, {"return": "\"{1, 2}\""}, {"return": "\"{1, 2}\""}, {"return": "\"{0}\""}, {"return": "\"{1}\""}, {"return": "\"set()\""}, {"return": "\"{2}\""}, {"return": "\"{3}\""}, {"return": "\"{4}\""}, {"return": "\"{2}\""}, {"return": "\"{3}\""}, {"return": "\"{3, 4}\""}, {"return": "\"{5}\""}, {"return": "\"{2, 3}\""}, {"return": "\"{5, 6}\""}, {"return": "\"{3, 4}\""}, {"return": "\"{2}\""}, {"return": "\"{1, 3}\""}, {"return": "\"{2, 4}\""}, {"return": "\"{3, 5}\""}, {"return": "\"{4, 6}\""}, {"return": "\"{5, 7}\""}, {"return": "\"{8, 6}\""}, {"return": "\"{9, 7}\""}, {"return": "\"{8, 10}\""}, {"return": "\"{9, 11}\""}], "parsed_inputs": [[["node", "0"], ["left", "{1, 2, 3}"], ["matrix", "{0: [1, 2], 1: [0, 3], 2: [0, 3], 3: [1, 2]}"], ["group", "set()"]], [["node", "1"], ["left", "{0, 2, 3}"], ["matrix", "{0: [1, 2], 1: [0, 3], 2: [0, 3], 3: [1, 2]}"], ["group", "set()"]], [["node", "2"], ["left", "{0, 1, 3}"], ["matrix", "{0: [1, 2], 1: [0, 3], 2: [0, 3], 3: [1, 2]}"], ["group", "set()"]], [["node", "3"], ["left", "{0, 1, 2}"], ["matrix", "{0: [1, 2], 1: [0, 3], 2: [0, 3], 3: [1, 2]}"], ["group", "set()"]], [["node", "0"], ["left", "{1, 2}"], ["matrix", "{0: [1, 2], 1: [0], 2: [0]}"], ["group", "set()"]], [["node", "1"], ["left", "{0, 2}"], ["matrix", "{0: [1, 2], 1: [0], 2: [0]}"], ["group", "set()"]], [["node", "2"], ["left", "{0, 1}"], ["matrix", "{0: [1, 2], 1: [0], 2: [0]}"], ["group", "set()"]], [["node", "0"], ["left", "{1}"], ["matrix", "{0: [1], 1: [0]}"], ["group", "set()"]], [["node", "1"], ["left", "{0}"], ["matrix", "{0: [1], 1: [0]}"], ["group", "set()"]], [["node", "0"], ["left", "set()"], ["matrix", "{0: []}"], ["group", "set()"]]], "exec_code": "def add_to_infect(node, left, matrix, group):\n    for neighbor in matrix[node]:\n        for next_neighbor in matrix[neighbor]:\n            left.discard(next_neighbor)\n            if next_neighbor not in group:\n                group.add(next_neighbor)\n                group = add_to_infect(next_neighbor, left, matrix, group)\n    return group\n", "output": "The function is:\n\n```python\ndef add_to_infect(node, left, matrix, group):\n    for neighbor in matrix[node]:\n        for next_neighbor in matrix[neighbor]:\n            left.discard(next_neighbor)\n            if next_neighbor not in group:\n                group.add(next_neighbor)\n                group = add_to_infect(next_neighbor, left, matrix, group)\n    return group\n\n```", "choosed_example_idx": [6, 1, 5, 3, 2, 8, 9, 7, 4], "prompt": "Function: add_to_infect\n\n\nWrite a function that generates the output from the input.\nInput: dict(node=2, left={0, 1}, matrix={0: [1, 2], 1: [0], 2: [0]}, group=set()), Output: \"{1, 2}\"\nInput: dict(node=1, left={0, 2, 3}, matrix={0: [1, 2], 1: [0, 3], 2: [0, 3], 3: [1, 2]}, group=set()), Output: \"{1, 2}\"\nInput: dict(node=1, left={0, 2}, matrix={0: [1, 2], 1: [0], 2: [0]}, group=set()), Output: \"{1, 2}\"\nInput: dict(node=3, left={0, 1, 2}, matrix={0: [1, 2], 1: [0, 3], 2: [0, 3], 3: [1, 2]}, group=set()), Output: \"{0, 3}\"\nInput: dict(node=2, left={0, 1, 3}, matrix={0: [1, 2], 1: [0, 3], 2: [0, 3], 3: [1, 2]}, group=set()), Output: \"{1, 2}\"\nInput: dict(node=1, left={0}, matrix={0: [1], 1: [0]}, group=set()), Output: \"{1}\"\nInput: dict(node=0, left=set(), matrix={0: []}, group=set()), Output: \"set()\"\nInput: dict(node=0, left={1}, matrix={0: [1], 1: [0]}, group=set()), Output: \"{0}\"\nInput: dict(node=0, left={1, 2}, matrix={0: [1, 2], 1: [0], 2: [0]}, group=set()), Output: \"{0}\"\n\n\n\n", "id": "b371d5acebad4ad51572fc907aa51cded465c600_0"}
{"example_str": "examples = [\n    dict(text=\"Hello World!\"),  # 1\n    dict(text=\"abcdefg\"),  # 2\n    dict(text=\"123 ABC\"),  # 3\n    dict(text=\"Python is fun!\"),  # 4\n    dict(text=\" \"),  # 5 (empty string)\n    dict(text=\"!@#$%^&*()\"),  # 6 (non-alphabetic characters)\n    dict(text=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"),  # 7 (uppercase letters)\n    dict(text=\"abcdefghijklmnopqrstuvwxyz\"),  # 8 (lowercase letters)\n    dict(text=\"Hello, World! How are you?\"),  # 9\n    dict(text=\"\"),  # 10 (empty string)\n]\nexamples += [\n    dict(text=\"Hello World!\"),\n    dict(text=\"1234567890\"),\n    dict(text=\"Python3.8\"),\n    dict(text=\"No numbers here!\"),\n    dict(text=\"\"),\n    dict(text=\"UPPERCASE\"),\n    dict(text=\"lowercase\"),\n    dict(text=\"Mixed1234Usage\"),\n    dict(text=\"Special #@$%^&*() Characters\"),\n    dict(text=\"New\\nLine\")\n]\nexamples += [\n    dict(text=\"Hello, World!\"),\n    dict(text=\"1234567890\"),\n    dict(text=\"Python 3.8\"),\n    dict(text=\"No numbers here!\"),\n    dict(text=\"CAPITAL LETTERS\"),\n    dict(text=\"mixedCAPSandlower\"),\n    dict(text=\"Special # $ % ^ & * chars\"),\n    dict(text=\"\"),\n    dict(text=\"Newline\\nTab\\t\"),\n    dict(text=\"Unicode 😊 characters\")\n]", "code": "def process_data(text):\n    myLetter = []\n    text = text.lower()\n    for letter in text:\n        if letter.isalpha():\n            myLetter.append(letter)\n    return myLetter\n", "func_name": "process_data", "exec_status": true, "example_inputs": ["\"{'text': 'Hello World!'}\"", "\"{'text': 'abcdefg'}\"", "\"{'text': '123 ABC'}\"", "\"{'text': 'Python is fun!'}\"", "\"{'text': ' '}\"", "\"{'text': '!@#$%^&*()'}\"", "\"{'text': 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'}\"", "\"{'text': 'abcdefghijklmnopqrstuvwxyz'}\"", "\"{'text': 'Hello, World! How are you?'}\"", "\"{'text': ''}\""], "example_outputs": [{"return": "\"['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd']\""}, {"return": "\"['a', 'b', 'c', 'd', 'e', 'f', 'g']\""}, {"return": "\"['a', 'b', 'c']\""}, {"return": "\"['p', 'y', 't', 'h', 'o', 'n', 'i', 's', 'f', 'u', 'n']\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\""}, {"return": "\"['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\""}, {"return": "\"['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd', 'h', 'o', 'w', 'a', 'r', 'e', 'y', 'o', 'u']\""}, {"return": "\"[]\""}, {"return": "\"['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd']\""}, {"return": "\"[]\""}, {"return": "\"['p', 'y', 't', 'h', 'o', 'n']\""}, {"return": "\"['n', 'o', 'n', 'u', 'm', 'b', 'e', 'r', 's', 'h', 'e', 'r', 'e']\""}, {"return": "\"[]\""}, {"return": "\"['u', 'p', 'p', 'e', 'r', 'c', 'a', 's', 'e']\""}, {"return": "\"['l', 'o', 'w', 'e', 'r', 'c', 'a', 's', 'e']\""}, {"return": "\"['m', 'i', 'x', 'e', 'd', 'u', 's', 'a', 'g', 'e']\""}, {"return": "\"['s', 'p', 'e', 'c', 'i', 'a', 'l', 'c', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 's']\""}, {"return": "\"['n', 'e', 'w', 'l', 'i', 'n', 'e']\""}, {"return": "\"['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd']\""}, {"return": "\"[]\""}, {"return": "\"['p', 'y', 't', 'h', 'o', 'n']\""}, {"return": "\"['n', 'o', 'n', 'u', 'm', 'b', 'e', 'r', 's', 'h', 'e', 'r', 'e']\""}, {"return": "\"['c', 'a', 'p', 'i', 't', 'a', 'l', 'l', 'e', 't', 't', 'e', 'r', 's']\""}, {"return": "\"['m', 'i', 'x', 'e', 'd', 'c', 'a', 'p', 's', 'a', 'n', 'd', 'l', 'o', 'w', 'e', 'r']\""}, {"return": "\"['s', 'p', 'e', 'c', 'i', 'a', 'l', 'c', 'h', 'a', 'r', 's']\""}, {"return": "\"[]\""}, {"return": "\"['n', 'e', 'w', 'l', 'i', 'n', 'e', 't', 'a', 'b']\""}, {"return": "\"['u', 'n', 'i', 'c', 'o', 'd', 'e', 'c', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 's']\""}], "parsed_inputs": [[["text", "\"Hello World!\""]], [["text", "\"abcdefg\""]], [["text", "\"123 ABC\""]], [["text", "\"Python is fun!\""]], [["text", "\" \""]], [["text", "\"!@#$%^&*()\""]], [["text", "\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\""]], [["text", "\"abcdefghijklmnopqrstuvwxyz\""]], [["text", "\"Hello, World! How are you?\""]], [["text", "\"\""]]], "exec_code": "def process_data(text):\n    myLetter = []\n    text = text.lower()\n    for letter in text:\n        if letter.isalpha():\n            myLetter.append(letter)\n    return myLetter\n", "output": "The function is:\n\n```python\ndef process_data(text):\n    myLetter = []\n    text = text.lower()\n    for letter in text:\n        if letter.isalpha():\n            myLetter.append(letter)\n    return myLetter\n\n```", "choosed_example_idx": [9, 2, 4], "prompt": "Function: process_data\n\nInput: dict(text=\"\"), Output: \"[]\"\nInput: dict(text=\"123 ABC\"), Output: \"['a', 'b', 'c']\"\nInput: dict(text=\" \"), Output: \"[]\"\n\n\n\nWrite a function that generates the output from the input.\n", "id": "08adcbee77e31fa0035c4b89a2e965fbc49c4325_0"}
{"example_str": "examples = [\n    dict(l=[1, 2, 3, 4, 5, 6]),\n    dict(l=[10, 20, 30, 40, 50]),\n    dict(l=[1, 3, 5, 7, 9]),\n    dict(l=[2, 4, 6, 8, 10]),\n    dict(l=[11, 12, 13, 14, 15]),\n    dict(l=[0, 2, 4, 6, 8]),\n    dict(l=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),\n    dict(l=[20, 30, 40, 50, 60, 70, 80, 90, 100]),\n    dict(l=[-1, -2, -3, -4, -5, -6]),\n    dict(l=[]),\n]\nexamples += [\n    dict(l=[1, 2, 3, 4, 5]),  # Mixed odd and even numbers\n    dict(l=[2, 4, 6, 8, 10]),  # All even numbers\n    dict(l=[1, 3, 5, 7, 9]),   # All odd numbers\n    dict(l=[]),                # Empty list\n    dict(l=[-2, -4, -6]),      # Negative even numbers\n    dict(l=[-1, -3, -5]),      # Negative odd numbers\n    dict(l=[0, 1, 2, 3]),      # Includes zero\n    dict(l=[111, 222, 333]),   # Large numbers, mixed odd and even\n    dict(l=[2]),               # Single even number\n    dict(l=[1])                # Single odd number\n]\nexamples += [\n    dict(l=[1, 2, 3, 4, 5]),\n    dict(l=[2, 4, 6, 8, 10]),\n    dict(l=[1, 3, 5, 7, 9]),\n    dict(l=[0, 1, 2, 3, 4]),\n    dict(l=[-2, -1, 0, 1, 2]),\n    dict(l=[10, 20, 30, 40, 50]),\n    dict(l=[11, 22, 33, 44, 55]),\n    dict(l=[100, 200, 300, 400, 500]),\n    dict(l=[-10, -20, -30, -40, -50]),\n    dict(l=[12, 14, 16, 18, 20]),\n]", "code": "def get_even_list(l):\n    lst = []\n    for x in l:\n        if x % 2 == 0:\n            lst.append(x)\n    return lst\n", "func_name": "get_even_list", "exec_status": true, "example_inputs": ["\"{'l': [1, 2, 3, 4, 5, 6]}\"", "\"{'l': [10, 20, 30, 40, 50]}\"", "\"{'l': [1, 3, 5, 7, 9]}\"", "\"{'l': [2, 4, 6, 8, 10]}\"", "\"{'l': [11, 12, 13, 14, 15]}\"", "\"{'l': [0, 2, 4, 6, 8]}\"", "\"{'l': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}\"", "\"{'l': [20, 30, 40, 50, 60, 70, 80, 90, 100]}\"", "\"{'l': [-1, -2, -3, -4, -5, -6]}\"", "\"{'l': []}\""], "example_outputs": [{"return": "\"[2, 4, 6]\""}, {"return": "\"[10, 20, 30, 40, 50]\""}, {"return": "\"[]\""}, {"return": "\"[2, 4, 6, 8, 10]\""}, {"return": "\"[12, 14]\""}, {"return": "\"[0, 2, 4, 6, 8]\""}, {"return": "\"[2, 4, 6, 8, 10]\""}, {"return": "\"[20, 30, 40, 50, 60, 70, 80, 90, 100]\""}, {"return": "\"[-2, -4, -6]\""}, {"return": "\"[]\""}, {"return": "\"[2, 4]\""}, {"return": "\"[2, 4, 6, 8, 10]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[-2, -4, -6]\""}, {"return": "\"[]\""}, {"return": "\"[0, 2]\""}, {"return": "\"[222]\""}, {"return": "\"[2]\""}, {"return": "\"[]\""}, {"return": "\"[2, 4]\""}, {"return": "\"[2, 4, 6, 8, 10]\""}, {"return": "\"[]\""}, {"return": "\"[0, 2, 4]\""}, {"return": "\"[-2, 0, 2]\""}, {"return": "\"[10, 20, 30, 40, 50]\""}, {"return": "\"[22, 44]\""}, {"return": "\"[100, 200, 300, 400, 500]\""}, {"return": "\"[-10, -20, -30, -40, -50]\""}, {"return": "\"[12, 14, 16, 18, 20]\""}], "parsed_inputs": [[["l", "[1, 2, 3, 4, 5, 6]"]], [["l", "[10, 20, 30, 40, 50]"]], [["l", "[1, 3, 5, 7, 9]"]], [["l", "[2, 4, 6, 8, 10]"]], [["l", "[11, 12, 13, 14, 15]"]], [["l", "[0, 2, 4, 6, 8]"]], [["l", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"]], [["l", "[20, 30, 40, 50, 60, 70, 80, 90, 100]"]], [["l", "[-1, -2, -3, -4, -5, -6]"]], [["l", "[]"]]], "exec_code": "def get_even_list(l):\n    lst = []\n    for x in l:\n        if x % 2 == 0:\n            lst.append(x)\n    return lst\n", "output": "The function is:\n\n```python\ndef get_even_list(l):\n    lst = []\n    for x in l:\n        if x % 2 == 0:\n            lst.append(x)\n    return lst\n\n```", "choosed_example_idx": [4, 6, 8, 3], "prompt": "Function: get_even_list\nWrite a function that generates the output from the input.\n\nInput: dict(l=[11, 12, 13, 14, 15]), Output: \"[12, 14]\"\nInput: dict(l=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), Output: \"[2, 4, 6, 8, 10]\"\nInput: dict(l=[-1, -2, -3, -4, -5, -6]), Output: \"[-2, -4, -6]\"\nInput: dict(l=[2, 4, 6, 8, 10]), Output: \"[2, 4, 6, 8, 10]\"\n\n", "id": "fee1d3f801bf0db4bb6f136e89ecbdb166f38e80_0"}
{"example_str": "examples = [\n    dict(str_t='123.45'),\n    dict(str_t='-0.123'),\n    dict(str_t='abc'),\n    dict(str_t='123'),\n    dict(str_t='-123'),\n    dict(str_t='123.456e-7'),\n    dict(str_t='inf'),\n    dict(str_t='-inf'),\n    dict(str_t='nan'),\n    dict(str_t=''),\n]\nexamples += [\n    dict(str_t=\"123.456\"),  # Valid float string\n    dict(str_t=\"0.0001\"),   # Small float value\n    dict(str_t=\"-100.789\"), # Negative float value\n    dict(str_t=\"1e-5\"),     # Scientific notation\n    dict(str_t=\"3.14159\"),  # Another valid float\n    dict(str_t=\" \"),        # Space (invalid float, should return NaN)\n    dict(str_t=\"abc\"),      # Non-numeric string (invalid float, should return NaN)\n    dict(str_t=\"10/2\"),     # Expression (invalid float, should return NaN)\n    dict(str_t=\"0\"),        # Zero as a string\n    dict(str_t=\"2.71828\")   # Another valid float\n]\nexamples += [\n    dict(str_t=\"123.45\"),   # Valid float string\n    dict(str_t=\"0.001\"),    # Valid small float\n    dict(str_t=\"-100.5\"),   # Valid negative float\n    dict(str_t=\"1e-3\"),     # Valid scientific notation\n    dict(str_t=\"abc\"),      # Invalid string\n    dict(str_t=\"12.34.56\"), # Invalid float with two dots\n    dict(str_t=\"\"),         # Empty string\n    dict(str_t=\" \"),        # Space character\n    dict(str_t=\"3.14159\"),  # Valid float (pi approximation)\n    dict(str_t=\"NaN\")       # Special float value as string\n]", "code": "def convert2float_s(str_t):\n    try:\n        dig_t = float(str_t)\n    except:\n        dig_t = float('nan')\n    return dig_t\n", "func_name": "convert2float_s", "exec_status": true, "example_inputs": ["\"{'str_t': '123.45'}\"", "\"{'str_t': '-0.123'}\"", "\"{'str_t': 'abc'}\"", "\"{'str_t': '123'}\"", "\"{'str_t': '-123'}\"", "\"{'str_t': '123.456e-7'}\"", "\"{'str_t': 'inf'}\"", "\"{'str_t': '-inf'}\"", "\"{'str_t': 'nan'}\"", "\"{'str_t': ''}\""], "example_outputs": [{"return": "\"123.45\""}, {"return": "\"-0.123\""}, {"return": "\"nan\""}, {"return": "\"123.0\""}, {"return": "\"-123.0\""}, {"return": "\"1.23456e-05\""}, {"return": "\"inf\""}, {"return": "\"-inf\""}, {"return": "\"nan\""}, {"return": "\"nan\""}, {"return": "\"123.456\""}, {"return": "\"0.0001\""}, {"return": "\"-100.789\""}, {"return": "\"1e-05\""}, {"return": "\"3.14159\""}, {"return": "\"nan\""}, {"return": "\"nan\""}, {"return": "\"nan\""}, {"return": "\"0.0\""}, {"return": "\"2.71828\""}, {"return": "\"123.45\""}, {"return": "\"0.001\""}, {"return": "\"-100.5\""}, {"return": "\"0.001\""}, {"return": "\"nan\""}, {"return": "\"nan\""}, {"return": "\"nan\""}, {"return": "\"nan\""}, {"return": "\"3.14159\""}, {"return": "\"nan\""}], "parsed_inputs": [[["str_t", "\"123.45\""]], [["str_t", "\"-0.123\""]], [["str_t", "\"abc\""]], [["str_t", "\"123\""]], [["str_t", "\"-123\""]], [["str_t", "\"123.456e-7\""]], [["str_t", "\"inf\""]], [["str_t", "\"-inf\""]], [["str_t", "\"nan\""]], [["str_t", "\"\""]]], "exec_code": "def convert2float_s(str_t):\n    try:\n        dig_t = float(str_t)\n    except:\n        dig_t = float('nan')\n    return dig_t\n", "output": "The function is:\n\n```python\ndef convert2float_s(str_t):\n    try:\n        dig_t = float(str_t)\n    except:\n        dig_t = float('nan')\n    return dig_t\n\n```", "choosed_example_idx": [7, 3, 1, 8, 2, 5, 9, 0, 6], "prompt": "Function: convert2float_s\n\nInput: dict(str_t=\"-inf\"), Output: \"-inf\"\nInput: dict(str_t=\"123\"), Output: \"123.0\"\nInput: dict(str_t=\"-0.123\"), Output: \"-0.123\"\nInput: dict(str_t=\"nan\"), Output: \"nan\"\nInput: dict(str_t=\"abc\"), Output: \"nan\"\nInput: dict(str_t=\"123.456e-7\"), Output: \"1.23456e-05\"\nInput: dict(str_t=\"\"), Output: \"nan\"\nInput: dict(str_t=\"123.45\"), Output: \"123.45\"\nInput: dict(str_t=\"inf\"), Output: \"inf\"\n\n\n\nWrite a function that generates the output from the input.\n", "id": "fe8e74e66a6aec7b2d90beb5fddd308529f198bd_0"}
{"example_str": "examples = [\n    dict(L=[1, 2, 3, 4, 5]),\n    dict(L=[10, 20, 30]),\n    dict(L=[-1, -2, -3, -4, -5]),\n    dict(L=[1.1, 2.2, 3.3]),\n    dict(L=[5, 5, 5, 5, 5]),\n    dict(L=[0, 0, 0, 0, 0]),\n    dict(L=[100, 200, 300, 400, 500]),\n    dict(L=[1, 2, 4, 8, 16]),\n    dict(L=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]),\n    dict(L=[]),\n]\nexamples += [\n    dict(L=[1, 2, 3, 4, 5]),  # Sum of first 5 natural numbers\n    dict(L=[-1, -2, -3, -4, -5]),  # Sum of negative numbers\n    dict(L=[10, 20, 30]),  # Sum of larger numbers\n    dict(L=[0.5, 1.5, 2.5]),  # Sum of floating point numbers\n    dict(L=[-10, 5, 15]),  # Sum including negative and positive numbers\n    dict(L=[]),  # Empty list\n    dict(L=[100]),  # Single element list\n    dict(L=[1, -1, 1, -1, 1, -1]),  # Alternating positive and negative numbers\n    dict(L=[2**i for i in range(10)]),  # Sum of powers of 2\n    dict(L=[i**2 for i in range(10)])  # Sum of squares of first 10 natural numbers\n]\nexamples += [\n    dict(L=[1, 2, 3, 4, 5]),  # Sum of first 5 natural numbers\n    dict(L=[10, 20, 30]),     # Sum of larger numbers\n    dict(L=[-1, -2, -3]),     # Sum of negative numbers\n    dict(L=[0, 0, 0, 0]),     # Sum of zeros\n    dict(L=[1.5, 2.5, 3.5]),  # Sum of floating point numbers\n    dict(L=[100]),            # Single element list\n    dict(L=[]),               # Empty list\n    dict(L=[-10, 10, 20]),    # Mix of negative and positive numbers\n    dict(L=[0.1, 0.2, 0.3]),  # Sum of small floating point numbers\n    dict(L=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1])  # Sum of ten ones\n]", "code": "def soma(L):\n    total = 0\n    for e in L:\n        total += e\n    return total\n", "func_name": "soma", "exec_status": true, "example_inputs": ["\"{'L': [1, 2, 3, 4, 5]}\"", "\"{'L': [10, 20, 30]}\"", "\"{'L': [-1, -2, -3, -4, -5]}\"", "\"{'L': [1.1, 2.2, 3.3]}\"", "\"{'L': [5, 5, 5, 5, 5]}\"", "\"{'L': [0, 0, 0, 0, 0]}\"", "\"{'L': [100, 200, 300, 400, 500]}\"", "\"{'L': [1, 2, 4, 8, 16]}\"", "\"{'L': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]}\"", "\"{'L': []}\""], "example_outputs": [{"return": "\"15\""}, {"return": "\"60\""}, {"return": "\"-15\""}, {"return": "\"6.6\""}, {"return": "\"25\""}, {"return": "\"0\""}, {"return": "\"1500\""}, {"return": "\"31\""}, {"return": "\"550\""}, {"return": "\"0\""}, {"return": "\"15\""}, {"return": "\"-15\""}, {"return": "\"60\""}, {"return": "\"4.5\""}, {"return": "\"10\""}, {"return": "\"0\""}, {"return": "\"100\""}, {"return": "\"0\""}, {"return": "\"1023\""}, {"return": "\"285\""}, {"return": "\"15\""}, {"return": "\"60\""}, {"return": "\"-6\""}, {"return": "\"0\""}, {"return": "\"7.5\""}, {"return": "\"100\""}, {"return": "\"0\""}, {"return": "\"20\""}, {"return": "\"0.6000000000000001\""}, {"return": "\"10\""}], "parsed_inputs": [[["L", "[1, 2, 3, 4, 5]"]], [["L", "[10, 20, 30]"]], [["L", "[-1, -2, -3, -4, -5]"]], [["L", "[1.1, 2.2, 3.3]"]], [["L", "[5, 5, 5, 5, 5]"]], [["L", "[0, 0, 0, 0, 0]"]], [["L", "[100, 200, 300, 400, 500]"]], [["L", "[1, 2, 4, 8, 16]"]], [["L", "[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]"]], [["L", "[]"]]], "exec_code": "def soma(L):\n    total = 0\n    for e in L:\n        total += e\n    return total\n", "output": "The function is:\n\n```python\ndef soma(L):\n    total = 0\n    for e in L:\n        total += e\n    return total\n\n```", "choosed_example_idx": [5, 2, 9], "prompt": "Write a function that generates the output from the input.\n\nFunction: soma\nInput: dict(L=[0, 0, 0, 0, 0]), Output: \"0\"\nInput: dict(L=[-1, -2, -3, -4, -5]), Output: \"-15\"\nInput: dict(L=[]), Output: \"0\"\n\n\n", "id": "c0712a0f391ea2dc0097acaf938cc3b1b1e43236_0"}
{"example_str": "examples = [\n    dict(list=[[1, 2], [3, 4]]),\n    dict(list=[['a', 'b'], ['c', 'd']]),\n    dict(list=[[1, 2, 3], [4, 5, 6]]),\n    dict(list=[['x', 'y', 'z'], [1, 2, 3]]),\n    dict(list=[[True, False], [True, False]]),\n    dict(list=[[1], [2], [3]]),\n    dict(list=[['a'], ['b'], ['c']]),\n    dict(list=[[1, 2], [3, 4], [5, 6]]),\n    dict(list=[['x', 'y'], ['a', 'b'], ['1', '2']]),\n    dict(list=[[1, 2, 3, 4], [5, 6, 7, 8]]),\n]\nexamples += [\n    dict(list=[[1, 2], [3, 4]]),\n    dict(list=[[1], [2], [3], [4]]),\n    dict(list=[['a', 'b'], ['c', 'd']]),\n    dict(list=[[1, 2, 3], [4], [5, 6]]),\n    dict(list=[[True, False], [False, True]]),\n    dict(list=[[1, 2], [3, 4], [5, 6]]),\n    dict(list=[['x'], ['y', 'z'], ['a', 'b', 'c']]),\n    dict(list=[[0], [1, 2], [3, 4, 5]]),\n    dict(list=[[1], [2], [3], [4], [5]]),\n    dict(list=[[1, 2], [], [3, 4]])\n]\nexamples += [\n    dict(list=[[1, 2], ['a', 'b']]),\n    dict(list=[[1], [2, 3], [4, 5]]),\n    dict(list=[['x', 'y'], ['1', '2', '3']]),\n    dict(list=[[True, False], ['yes', 'no']]),\n    dict(list=[[1, 2], ['a'], [True, False]]),\n    dict(list=[[0], [1], [2], [3]]),\n    dict(list=[['apple', 'banana'], ['red', 'green'], ['tall', 'short']]),\n    dict(list=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n    dict(list=[['cat'], ['small', 'large'], ['black', 'white']]),\n    dict(list=[[1], [2], [3], [4], [5]])\n]", "code": "def matrixJoin(list):\n    o = [[]]\n    while len(list) > 0:\n        new = []\n        for x in o:\n            for y in list[0]:\n                new.append(x + [y])\n        o = new\n        list = list[1:]\n    return o\n", "func_name": "matrixJoin", "exec_status": true, "example_inputs": ["\"{'list': [[1, 2], [3, 4]]}\"", "\"{'list': [['a', 'b'], ['c', 'd']]}\"", "\"{'list': [[1, 2, 3], [4, 5, 6]]}\"", "\"{'list': [['x', 'y', 'z'], [1, 2, 3]]}\"", "\"{'list': [[True, False], [True, False]]}\"", "\"{'list': [[1], [2], [3]]}\"", "\"{'list': [['a'], ['b'], ['c']]}\"", "\"{'list': [[1, 2], [3, 4], [5, 6]]}\"", "\"{'list': [['x', 'y'], ['a', 'b'], ['1', '2']]}\"", "\"{'list': [[1, 2, 3, 4], [5, 6, 7, 8]]}\""], "example_outputs": [{"return": "\"[[1, 3], [1, 4], [2, 3], [2, 4]]\""}, {"return": "\"[['a', 'c'], ['a', 'd'], ['b', 'c'], ['b', 'd']]\""}, {"return": "\"[[1, 4], [1, 5], [1, 6], [2, 4], [2, 5], [2, 6], [3, 4], [3, 5], [3, 6]]\""}, {"return": "\"[['x', 1], ['x', 2], ['x', 3], ['y', 1], ['y', 2], ['y', 3], ['z', 1], ['z', 2], ['z', 3]]\""}, {"return": "\"[[True, True], [True, False], [False, True], [False, False]]\""}, {"return": "\"[[1, 2, 3]]\""}, {"return": "\"[['a', 'b', 'c']]\""}, {"return": "\"[[1, 3, 5], [1, 3, 6], [1, 4, 5], [1, 4, 6], [2, 3, 5], [2, 3, 6], [2, 4, 5], [2, 4, 6]]\""}, {"return": "\"[['x', 'a', '1'], ['x', 'a', '2'], ['x', 'b', '1'], ['x', 'b', '2'], ['y', 'a', '1'], ['y', 'a', '2'], ['y', 'b', '1'], ['y', 'b', '2']]\""}, {"return": "\"[[1, 5], [1, 6], [1, 7], [1, 8], [2, 5], [2, 6], [2, 7], [2, 8], [3, 5], [3, 6], [3, 7], [3, 8], [4, 5], [4, 6], [4, 7], [4, 8]]\""}, {"return": "\"[[1, 3], [1, 4], [2, 3], [2, 4]]\""}, {"return": "\"[[1, 2, 3, 4]]\""}, {"return": "\"[['a', 'c'], ['a', 'd'], ['b', 'c'], ['b', 'd']]\""}, {"return": "\"[[1, 4, 5], [1, 4, 6], [2, 4, 5], [2, 4, 6], [3, 4, 5], [3, 4, 6]]\""}, {"return": "\"[[True, False], [True, True], [False, False], [False, True]]\""}, {"return": "\"[[1, 3, 5], [1, 3, 6], [1, 4, 5], [1, 4, 6], [2, 3, 5], [2, 3, 6], [2, 4, 5], [2, 4, 6]]\""}, {"return": "\"[['x', 'y', 'a'], ['x', 'y', 'b'], ['x', 'y', 'c'], ['x', 'z', 'a'], ['x', 'z', 'b'], ['x', 'z', 'c']]\""}, {"return": "\"[[0, 1, 3], [0, 1, 4], [0, 1, 5], [0, 2, 3], [0, 2, 4], [0, 2, 5]]\""}, {"return": "\"[[1, 2, 3, 4, 5]]\""}, {"return": "\"[]\""}, {"return": "\"[[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]\""}, {"return": "\"[[1, 2, 4], [1, 2, 5], [1, 3, 4], [1, 3, 5]]\""}, {"return": "\"[['x', '1'], ['x', '2'], ['x', '3'], ['y', '1'], ['y', '2'], ['y', '3']]\""}, {"return": "\"[[True, 'yes'], [True, 'no'], [False, 'yes'], [False, 'no']]\""}, {"return": "\"[[1, 'a', True], [1, 'a', False], [2, 'a', True], [2, 'a', False]]\""}, {"return": "\"[[0, 1, 2, 3]]\""}, {"return": "\"[['apple', 'red', 'tall'], ['apple', 'red', 'short'], ['apple', 'green', 'tall'], ['apple', 'green', 'short'], ['banana', 'red', 'tall'], ['banana', 'red', 'short'], ['banana', 'green', 'tall'], ['banana', 'green', 'short']]\""}, {"return": "\"[[1, 4, 7], [1, 4, 8], [1, 4, 9], [1, 5, 7], [1, 5, 8], [1, 5, 9], [1, 6, 7], [1, 6, 8], [1, 6, 9], [2, 4, 7], [2, 4, 8], [2, 4, 9], [2, 5, 7], [2, 5, 8], [2, 5, 9], [2, 6, 7], [2, 6, 8], [2, 6, 9], [3, 4, 7], [3, 4, 8], [3, 4, 9], [3, 5, 7], [3, 5, 8], [3, 5, 9], [3, 6, 7], [3, 6, 8], [3, 6, 9]]\""}, {"return": "\"[['cat', 'small', 'black'], ['cat', 'small', 'white'], ['cat', 'large', 'black'], ['cat', 'large', 'white']]\""}, {"return": "\"[[1, 2, 3, 4, 5]]\""}], "parsed_inputs": [[["list", "[[1, 2], [3, 4]]"]], [["list", "[['a', 'b'], ['c', 'd']]"]], [["list", "[[1, 2, 3], [4, 5, 6]]"]], [["list", "[['x', 'y', 'z'], [1, 2, 3]]"]], [["list", "[[True, False], [True, False]]"]], [["list", "[[1], [2], [3]]"]], [["list", "[['a'], ['b'], ['c']]"]], [["list", "[[1, 2], [3, 4], [5, 6]]"]], [["list", "[['x', 'y'], ['a', 'b'], ['1', '2']]"]], [["list", "[[1, 2, 3, 4], [5, 6, 7, 8]]"]]], "exec_code": "def matrixJoin(list):\n    o = [[]]\n    while len(list) > 0:\n        new = []\n        for x in o:\n            for y in list[0]:\n                new.append(x + [y])\n        o = new\n        list = list[1:]\n    return o\n", "output": "The function is:\n\n```python\ndef matrixJoin(list):\n    o = [[]]\n    while len(list) > 0:\n        new = []\n        for x in o:\n            for y in list[0]:\n                new.append(x + [y])\n        o = new\n        list = list[1:]\n    return o\n\n```", "choosed_example_idx": [4, 0, 6, 5, 7, 1, 8], "prompt": "Input: dict(list=[[True, False], [True, False]]), Output: \"[[True, True], [True, False], [False, True], [False, False]]\"\nInput: dict(list=[[1, 2], [3, 4]]), Output: \"[[1, 3], [1, 4], [2, 3], [2, 4]]\"\nInput: dict(list=[['a'], ['b'], ['c']]), Output: \"[['a', 'b', 'c']]\"\nInput: dict(list=[[1], [2], [3]]), Output: \"[[1, 2, 3]]\"\nInput: dict(list=[[1, 2], [3, 4], [5, 6]]), Output: \"[[1, 3, 5], [1, 3, 6], [1, 4, 5], [1, 4, 6], [2, 3, 5], [2, 3, 6], [2, 4, 5], [2, 4, 6]]\"\nInput: dict(list=[['a', 'b'], ['c', 'd']]), Output: \"[['a', 'c'], ['a', 'd'], ['b', 'c'], ['b', 'd']]\"\nInput: dict(list=[['x', 'y'], ['a', 'b'], ['1', '2']]), Output: \"[['x', 'a', '1'], ['x', 'a', '2'], ['x', 'b', '1'], ['x', 'b', '2'], ['y', 'a', '1'], ['y', 'a', '2'], ['y', 'b', '1'], ['y', 'b', '2']]\"\n\n\n\nWrite a function that generates the output from the input.\n\nFunction: matrixJoin\n", "id": "20f09b2ffeb5a5a59a42134c58ee371621a984f1_0"}
{"example_str": "examples = [\n    dict(x=20),\n    dict(x=21),\n    dict(x=22),\n    dict(x=23),\n    dict(x=24),\n    dict(x=25),\n    dict(x=2520),  # This is the least common multiple of 11 to 20\n    dict(x=26),\n    dict(x=27),\n    dict(x=28),\n]\nexamples += [\n    dict(x=2520),    # 2520 is the smallest number divisible by all numbers from 1 to 10, check for 11 to 20\n    dict(x=27720),   # 27720 is the smallest number divisible by all numbers from 1 to 12\n    dict(x=720720),  # 720720 is the smallest number divisible by all numbers from 1 to 16\n    dict(x=232792560), # 232792560 is the smallest number divisible by all numbers from 1 to 20\n    dict(x=1),       # Check a small number\n    dict(x=999999),  # Check a large number that is not a multiple of 11 to 20\n    dict(x=2432902008176640000), # Check a very large number\n    dict(x=-232792560), # Check a negative number that is a multiple\n    dict(x=0),       # Check zero\n    dict(x=3628800)  # Check a factorial of 10, not necessarily a multiple of all from 11 to 20\n]\nexamples += [\n    dict(x=2520),  # 2520 is the smallest number divisible by all numbers from 1 to 10, hence also by 11 to 20\n    dict(x=5040),  # 5040 is the next multiple of 2520\n    dict(x=7560),  # 7560 is another multiple of 2520\n    dict(x=11),    # 11 is not divisible by all numbers from 11 to 20\n    dict(x=20),    # 20 is not divisible by all numbers from 11 to 20\n    dict(x=110),   # 110 is not divisible by all numbers from 11 to 20\n    dict(x=2310),  # 2310 is not divisible by all numbers from 11 to 20\n    dict(x=4620),  # 4620 is not divisible by all numbers from 11 to 20\n    dict(x=9240),  # 9240 is another multiple of 2520\n    dict(x=10000)  # 10000 is not divisible by all numbers from 11 to 20\n]", "code": "def f(x):\n    for i in range(11, 21):\n        if x % i != 0:\n            return False\n    return True\n", "func_name": "f", "exec_status": true, "example_inputs": ["\"{'x': 20}\"", "\"{'x': 21}\"", "\"{'x': 22}\"", "\"{'x': 23}\"", "\"{'x': 24}\"", "\"{'x': 25}\"", "\"{'x': 2520}\"", "\"{'x': 26}\"", "\"{'x': 27}\"", "\"{'x': 28}\""], "example_outputs": [{"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}], "parsed_inputs": [[["x", "20"]], [["x", "21"]], [["x", "22"]], [["x", "23"]], [["x", "24"]], [["x", "25"]], [["x", "2520"]], [["x", "26"]], [["x", "27"]], [["x", "28"]]], "exec_code": "def f(x):\n    for i in range(11, 21):\n        if x % i != 0:\n            return False\n    return True\n", "output": "The function is:\n\n```python\ndef f(x):\n    for i in range(11, 21):\n        if x % i != 0:\n            return False\n    return True\n\n```", "choosed_example_idx": [2, 3, 0, 1], "prompt": "Function: f\n\nInput: dict(x=22), Output: \"False\"\nInput: dict(x=23), Output: \"False\"\nInput: dict(x=20), Output: \"False\"\nInput: dict(x=21), Output: \"False\"\n\nWrite a function that generates the output from the input.\n", "id": "d338da5a1223aa23f4fd3076e85c6ec968dfe0ea_0"}
{"example_str": "examples = [\n    dict(x=1, y=2),  # int + int\n    dict(x=3.5, y=4.2),  # float + float\n    dict(x=1+2j, y=3+4j),  # complex + complex\n    dict(x='a', y='b'),  # string + string\n    dict(x=[1, 2], y=[3, 4]),  # list + list\n    dict(x=(1, 2), y=(3, 4)),  # tuple + tuple\n    dict(x=1, y='2'),  # int + string (will raise TypeError)\n    dict(x=[1, 2], y='3'),  # list + string (will raise TypeError)\n    dict(x=1, y=None),  # int + None (will raise TypeError)\n    dict(x='a', y=1),  # string + int (will raise TypeError)\n]\nexamples += [\n    dict(x=1, y=2),\n    dict(x=5, y=3),\n    dict(x=10, y=20),\n    dict(x=0, y=0),\n    dict(x=-1, y=-2),\n    dict(x=100, y=200),\n    dict(x='Hello ', y='World'),\n    dict(x='foo', y='bar'),\n    dict(x='123', y='456'),\n    dict(x='test', y='ing')\n]", "code": "def r(x, y):\n    return x + y\n", "func_name": "r", "exec_status": true, "example_inputs": ["\"{'x': 1, 'y': 2}\"", "\"{'x': 3.5, 'y': 4.2}\"", "\"{'x': (1+2j), 'y': (3+4j)}\"", "\"{'x': 'a', 'y': 'b'}\"", "\"{'x': [1, 2], 'y': [3, 4]}\"", "\"{'x': (1, 2), 'y': (3, 4)}\"", "\"{'x': 1, 'y': '2'}\"", "\"{'x': [1, 2], 'y': '3'}\"", "\"{'x': 1, 'y': None}\"", "\"{'x': 'a', 'y': 1}\""], "example_outputs": [{"return": "\"3\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: 'int' object is not callable\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: 'int' object is not callable\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: 'int' object is not callable\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: 'int' object is not callable\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: 'int' object is not callable\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: 'int' object is not callable\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: 'int' object is not callable\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: 'int' object is not callable\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: 'int' object is not callable\""}, {"return": "\"3\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: 'int' object is not callable\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: 'int' object is not callable\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: 'int' object is not callable\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: 'int' object is not callable\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: 'int' object is not callable\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: 'int' object is not callable\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: 'int' object is not callable\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: 'int' object is not callable\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: 'int' object is not callable\""}], "parsed_inputs": [[["x", "1"], ["y", "2"]], [["x", "3.5"], ["y", "4.2"]], [["x", "(1+2j)"], ["y", "(3+4j)"]], [["x", "\"a\""], ["y", "\"b\""]], [["x", "[1, 2]"], ["y", "[3, 4]"]], [["x", "(1, 2)"], ["y", "(3, 4)"]], [["x", "1"], ["y", "\"2\""]], [["x", "[1, 2]"], ["y", "\"3\""]], [["x", "1"], ["y", "None"]], [["x", "\"a\""], ["y", "1"]]], "exec_code": "def r(x, y):\n    return x + y\n", "output": "The function is:\n\n```python\ndef r(x, y):\n    return x + y\n\n```", "choosed_example_idx": [3, 9, 0, 5, 4, 1, 6, 2, 7], "prompt": "Write a function that generates the output from the input.\n\n\nInput: dict(x=\"a\", y=\"b\"), Output: \"<class 'TypeError'>: 'int' object is not callable\"\nInput: dict(x=\"a\", y=1), Output: \"<class 'TypeError'>: 'int' object is not callable\"\nInput: dict(x=1, y=2), Output: \"3\"\nInput: dict(x=(1, 2), y=(3, 4)), Output: \"<class 'TypeError'>: 'int' object is not callable\"\nInput: dict(x=[1, 2], y=[3, 4]), Output: \"<class 'TypeError'>: 'int' object is not callable\"\nInput: dict(x=3.5, y=4.2), Output: \"<class 'TypeError'>: 'int' object is not callable\"\nInput: dict(x=1, y=\"2\"), Output: \"<class 'TypeError'>: 'int' object is not callable\"\nInput: dict(x=(1+2j), y=(3+4j)), Output: \"<class 'TypeError'>: 'int' object is not callable\"\nInput: dict(x=[1, 2], y=\"3\"), Output: \"<class 'TypeError'>: 'int' object is not callable\"\n\n\nFunction: r\n", "id": "a31a771d205e04dcae4ca1d8f1906f0526a3a29d_0"}
{"example_str": "examples = [\n    dict(s1=\"hello\", s2=\"oleh\"),\n    dict(s1=\"hello\", s2=\"hlelo\"),\n    dict(s1=\"hello\", s2=\"helo\"),\n    dict(s1=\"hello\", s2=\"hle\"),\n    dict(s1=\"hello\", s2=\"hl\"),\n    dict(s1=\"hello\", s2=\"h\"),\n    dict(s1=\"hello\", s2=\"\"),\n    dict(s1=\"\", s2=\"hello\"),\n    dict(s1=\"abc\", s2=\"bac\"),\n    dict(s1=\"abc\", s2=\"abcd\"),\n]\nexamples += [\n    dict(s1=\"rkqodlw\", s2=\"world\"),  # Example 1\n    dict(s1=\"cedewaraaossoqqyt\", s2=\"codewars\"),  # Example 2\n    dict(s1=\"katas\", s2=\"steak\"),  # Example 3\n    dict(s1=\"scriptjava\", s2=\"javascript\"),  # Example 4\n    dict(s1=\"scriptingjava\", s2=\"javascript\"),  # Example 5\n    dict(s1=\"scriptsjava\", s2=\"javascripts\"),  # Example 6\n    dict(s1=\"jscripts\", s2=\"javascript\"),  # Example 7\n    dict(s1=\"aabbcamaomsccdd\", s2=\"commas\"),  # Example 8\n    dict(s1=\"commas\", s2=\"commas\"),  # Example 9\n    dict(s1=\"sammoc\", s2=\"commas\")  # Example 10\n]\nexamples += [\n    dict(s1=\"rkqodlw\", s2=\"world\"),\n    dict(s1=\"cedewaraaossoqqyt\", s2=\"codewars\"),\n    dict(s1=\"katas\", s2=\"steak\"),\n    dict(s1=\"scriptjava\", s2=\"javascript\"),\n    dict(s1=\"scriptingjava\", s2=\"javascript\"),\n    dict(s1=\"scriptsjava\", s2=\"javascripts\"),\n    dict(s1=\"jscripts\", s2=\"javascript\"),\n    dict(s1=\"aabbcamaomsccdd\", s2=\"commas\"),\n    dict(s1=\"commas\", s2=\"commas\"),\n    dict(s1=\"sammoc\", s2=\"commas\")\n]", "code": "def scramble(s1, s2):\n    d = {}\n    l = {}\n    c = 0\n    for i in range(len(s1)):\n        if s1[i] not in d.keys():\n            d[s1[i]] = 1\n        else:\n            d[s1[i]] += 1\n    print(d)\n    for i in range(len(s2)):\n        if s2[i] not in l.keys():\n            l[s2[i]] = 1\n        else:\n            l[s2[i]] += 1\n    print(l)\n    for key in l.keys():\n        if key in d.keys() and l[key] <= d[key]:\n            continue\n        else:\n            return False\n    return True\n", "func_name": "scramble", "exec_status": true, "example_inputs": ["\"{'s1': 'hello', 's2': 'oleh'}\"", "\"{'s1': 'hello', 's2': 'hlelo'}\"", "\"{'s1': 'hello', 's2': 'helo'}\"", "\"{'s1': 'hello', 's2': 'hle'}\"", "\"{'s1': 'hello', 's2': 'hl'}\"", "\"{'s1': 'hello', 's2': 'h'}\"", "\"{'s1': 'hello', 's2': ''}\"", "\"{'s1': '', 's2': 'hello'}\"", "\"{'s1': 'abc', 's2': 'bac'}\"", "\"{'s1': 'abc', 's2': 'abcd'}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}], "parsed_inputs": [[["s1", "\"hello\""], ["s2", "\"oleh\""]], [["s1", "\"hello\""], ["s2", "\"hlelo\""]], [["s1", "\"hello\""], ["s2", "\"helo\""]], [["s1", "\"hello\""], ["s2", "\"hle\""]], [["s1", "\"hello\""], ["s2", "\"hl\""]], [["s1", "\"hello\""], ["s2", "\"h\""]], [["s1", "\"hello\""], ["s2", "\"\""]], [["s1", "\"\""], ["s2", "\"hello\""]], [["s1", "\"abc\""], ["s2", "\"bac\""]], [["s1", "\"abc\""], ["s2", "\"abcd\""]]], "exec_code": "def scramble(s1, s2):\n    d = {}\n    l = {}\n    c = 0\n    for i in range(len(s1)):\n        if s1[i] not in d.keys():\n            d[s1[i]] = 1\n        else:\n            d[s1[i]] += 1\n    print(d)\n    for i in range(len(s2)):\n        if s2[i] not in l.keys():\n            l[s2[i]] = 1\n        else:\n            l[s2[i]] += 1\n    print(l)\n    for key in l.keys():\n        if key in d.keys() and l[key] <= d[key]:\n            continue\n        else:\n            return False\n    return True\n", "output": "The function is:\n\n```python\ndef scramble(s1, s2):\n    d = {}\n    l = {}\n    c = 0\n    for i in range(len(s1)):\n        if s1[i] not in d.keys():\n            d[s1[i]] = 1\n        else:\n            d[s1[i]] += 1\n    print(d)\n    for i in range(len(s2)):\n        if s2[i] not in l.keys():\n            l[s2[i]] = 1\n        else:\n            l[s2[i]] += 1\n    print(l)\n    for key in l.keys():\n        if key in d.keys() and l[key] <= d[key]:\n            continue\n        else:\n            return False\n    return True\n\n```", "choosed_example_idx": [9, 3, 6, 8, 2, 0, 1, 7], "prompt": "Write a function that generates the output from the input.\nFunction: scramble\nInput: dict(s1=\"abc\", s2=\"abcd\"), Output: \"False\"\nInput: dict(s1=\"hello\", s2=\"hle\"), Output: \"True\"\nInput: dict(s1=\"hello\", s2=\"\"), Output: \"True\"\nInput: dict(s1=\"abc\", s2=\"bac\"), Output: \"True\"\nInput: dict(s1=\"hello\", s2=\"helo\"), Output: \"True\"\nInput: dict(s1=\"hello\", s2=\"oleh\"), Output: \"True\"\nInput: dict(s1=\"hello\", s2=\"hlelo\"), Output: \"True\"\nInput: dict(s1=\"\", s2=\"hello\"), Output: \"False\"\n\n\n\n", "id": "41b9d261ea618f7db2c0354ada9b2964791afa82_0"}
{"example_str": "examples = [\n    dict(arrayname=[1, 2, 3, 4, 5]),\n    dict(arrayname=[10, 20, 30, 40, 50]),\n    dict(arrayname=[1, 1, 1, 1, 1]),\n    dict(arrayname=[5, 5, 5, 5, 5]),\n    dict(arrayname=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),\n    dict(arrayname=[100, 200, 300, 400, 500]),\n    dict(arrayname=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),\n    dict(arrayname=[10, 10, 10, 10, 10]),\n    dict(arrayname=[25, 50, 75, 100, 125]),\n    dict(arrayname=[2, 4, 6, 8, 10]),\n]\nexamples += [\n    dict(arrayname=[]),  # Example 1: Empty list\n    dict(arrayname=[0, 1, 2, 3, 4, 5]),  # Example 2: List with numbers 0 to 5\n    dict(arrayname=[100, 101, 102, 103, 104, 105]),  # Example 3: List with numbers 100 to 105\n    dict(arrayname=[255, 255, 255]),  # Example 4: List with three occurrences of 255\n    dict(arrayname=[0, 0, 1, 1, 2, 2]),  # Example 5: List with repeated numbers 0, 1, 2\n    dict(arrayname=[10]*10),  # Example 6: List with ten 10s\n    dict(arrayname=[i for i in range(256)]),  # Example 7: List with every number from 0 to 255\n    dict(arrayname=[5, 15, 25, 35, 45]),  # Example 8: List with numbers spaced by 10\n    dict(arrayname=[123]*50),  # Example 9: List with fifty 123s\n    dict(arrayname=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]*5)  # Example 10: List with numbers 0 to 9 repeated 5 times each\n]\nexamples += [\n    dict(arrayname=[]),\n    dict(arrayname=[0, 1, 2, 3, 4, 5]),\n    dict(arrayname=[100, 100, 100]),\n    dict(arrayname=[255, 255, 255, 255]),\n    dict(arrayname=[0, 1, 1, 2, 2, 2]),\n    dict(arrayname=[10, 20, 30, 40, 50]),\n    dict(arrayname=[0, 0, 0, 1, 1, 2]),\n    dict(arrayname=[254, 255, 254, 255, 254]),\n    dict(arrayname=[123, 123, 123, 123]),\n    dict(arrayname=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255])\n]", "code": "def organize_array(arrayname):\n    z = arrayname\n    indexarray = []\n    arr = []\n    i = 0\n    for x in range(0, 256):\n        anzahl = z.count(i)\n        if anzahl > 0:\n            indexarray.append(i)\n            arr.append(anzahl)\n        i = i + 1\n    return arr\n", "func_name": "organize_array", "exec_status": true, "example_inputs": ["\"{'arrayname': [1, 2, 3, 4, 5]}\"", "\"{'arrayname': [10, 20, 30, 40, 50]}\"", "\"{'arrayname': [1, 1, 1, 1, 1]}\"", "\"{'arrayname': [5, 5, 5, 5, 5]}\"", "\"{'arrayname': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]}\"", "\"{'arrayname': [100, 200, 300, 400, 500]}\"", "\"{'arrayname': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}\"", "\"{'arrayname': [10, 10, 10, 10, 10]}\"", "\"{'arrayname': [25, 50, 75, 100, 125]}\"", "\"{'arrayname': [2, 4, 6, 8, 10]}\""], "example_outputs": [{"return": "\"[1, 1, 1, 1, 1]\""}, {"return": "\"[1, 1, 1, 1, 1]\""}, {"return": "\"[5]\""}, {"return": "\"[5]\""}, {"return": "\"[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\""}, {"return": "\"[1, 1]\""}, {"return": "\"[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\""}, {"return": "\"[5]\""}, {"return": "\"[1, 1, 1, 1, 1]\""}, {"return": "\"[1, 1, 1, 1, 1]\""}, {"return": "\"[]\""}, {"return": "\"[1, 1, 1, 1, 1, 1]\""}, {"return": "\"[1, 1, 1, 1, 1, 1]\""}, {"return": "\"[3]\""}, {"return": "\"[2, 2, 2]\""}, {"return": "\"[10]\""}, {"return": "\"[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\""}, {"return": "\"[1, 1, 1, 1, 1]\""}, {"return": "\"[50]\""}, {"return": "\"[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\""}, {"return": "\"[]\""}, {"return": "\"[1, 1, 1, 1, 1, 1]\""}, {"return": "\"[3]\""}, {"return": "\"[4]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[1, 1, 1, 1, 1]\""}, {"return": "\"[3, 2, 1]\""}, {"return": "\"[3, 2]\""}, {"return": "\"[4]\""}, {"return": "\"[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\""}], "parsed_inputs": [[["arrayname", "[1, 2, 3, 4, 5]"]], [["arrayname", "[10, 20, 30, 40, 50]"]], [["arrayname", "[1, 1, 1, 1, 1]"]], [["arrayname", "[5, 5, 5, 5, 5]"]], [["arrayname", "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"]], [["arrayname", "[100, 200, 300, 400, 500]"]], [["arrayname", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"]], [["arrayname", "[10, 10, 10, 10, 10]"]], [["arrayname", "[25, 50, 75, 100, 125]"]], [["arrayname", "[2, 4, 6, 8, 10]"]]], "exec_code": "def organize_array(arrayname):\n    z = arrayname\n    indexarray = []\n    arr = []\n    i = 0\n    for x in range(0, 256):\n        anzahl = z.count(i)\n        if anzahl > 0:\n            indexarray.append(i)\n            arr.append(anzahl)\n        i = i + 1\n    return arr\n", "output": "The function is:\n\n```python\ndef organize_array(arrayname):\n    z = arrayname\n    indexarray = []\n    arr = []\n    i = 0\n    for x in range(0, 256):\n        anzahl = z.count(i)\n        if anzahl > 0:\n            indexarray.append(i)\n            arr.append(anzahl)\n        i = i + 1\n    return arr\n\n```", "choosed_example_idx": [7, 1, 6, 2, 8, 3, 5, 4, 9, 0], "prompt": "Write a function that generates the output from the input.\n\n\nInput: dict(arrayname=[10, 10, 10, 10, 10]), Output: \"[5]\"\nInput: dict(arrayname=[10, 20, 30, 40, 50]), Output: \"[1, 1, 1, 1, 1]\"\nInput: dict(arrayname=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), Output: \"[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\"\nInput: dict(arrayname=[1, 1, 1, 1, 1]), Output: \"[5]\"\nInput: dict(arrayname=[25, 50, 75, 100, 125]), Output: \"[1, 1, 1, 1, 1]\"\nInput: dict(arrayname=[5, 5, 5, 5, 5]), Output: \"[5]\"\nInput: dict(arrayname=[100, 200, 300, 400, 500]), Output: \"[1, 1]\"\nInput: dict(arrayname=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), Output: \"[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\"\nInput: dict(arrayname=[2, 4, 6, 8, 10]), Output: \"[1, 1, 1, 1, 1]\"\nInput: dict(arrayname=[1, 2, 3, 4, 5]), Output: \"[1, 1, 1, 1, 1]\"\n\n\n\nFunction: organize_array\n\n", "id": "9ecfe95ee0dde1d069c51e106a456b0b8959c9e0_0"}
{"example_str": "examples = [\n    dict(xs=[1, 2, 3, 4, 5], predicate=lambda x: x % 2 == 0),\n    dict(xs=[\"hello\", \"world\", \"python\"], predicate=lambda x: len(x) > 4),\n    dict(xs=[3.14, 2.71, 1.62], predicate=lambda x: x > 2),\n    dict(xs=[\"a\", \"b\", \"c\", \"d\"], predicate=lambda x: x.isupper()),\n    dict(xs=[True, False, True, False], predicate=lambda x: x),\n    dict(xs=[1, 2, 3, 4, 5], predicate=lambda x: x > 3),\n    dict(xs=[\"apple\", \"banana\", \"cherry\"], predicate=lambda x: x.startswith(\"a\")),\n    dict(xs=[(1, 2), (3, 4), (5, 6)], predicate=lambda x: x[0] > 2),\n    dict(xs=[\"hello\", \"world\", \"python\", \"java\"], predicate=lambda x: \"o\" in x),\n    dict(xs=[1, 2, 3, 4, 5], predicate=lambda x: x % 3 == 0)\n]\nexamples += [\n    dict(xs=[1, 2, 3, 4, 5], predicate=lambda x: x > 3),\n    dict(xs=[\"apple\", \"banana\", \"cherry\"], predicate=lambda x: \"a\" in x),\n    dict(xs=[10, 20, 30, 40, 50], predicate=lambda x: x % 20 == 0),\n    dict(xs=[-1, -2, -3, -4, -5], predicate=lambda x: x < -3),\n    dict(xs=[\"hello\", \"world\", \"test\", \"python\"], predicate=lambda x: len(x) > 4),\n    dict(xs=[True, False, True, False], predicate=lambda x: x is True),\n    dict(xs=[(1, 2), (3, 4), (5, 6)], predicate=lambda x: x[0] + x[1] > 5),\n    dict(xs=[0.1, 0.5, 0.9, 1.5], predicate=lambda x: x < 1),\n    dict(xs=[\"red\", \"green\", \"blue\", \"yellow\"], predicate=lambda x: \"e\" in x),\n    dict(xs=[{\"name\": \"Alice\"}, {\"name\": \"Bob\"}, {\"name\": \"Charlie\"}], predicate=lambda x: \"B\" in x[\"name\"])\n]\nexamples += [\n    dict(xs=[1, 2, 3, 4, 5], predicate=lambda x: x > 3),\n    dict(xs=[-1, -2, 0, 1, 2], predicate=lambda x: x < 0),\n    dict(xs=['apple', 'banana', 'cherry'], predicate=lambda x: 'a' in x),\n    dict(xs=[10, 20, 30, 40, 50], predicate=lambda x: x % 20 == 0),\n    dict(xs=[True, False, True, False], predicate=lambda x: x is True),\n    dict(xs=[(1, 2), (3, 4), (5, 6)], predicate=lambda x: x[0] > 2),\n    dict(xs=['hello', 'world', 'test', 'python'], predicate=lambda x: len(x) > 4),\n    dict(xs=[0.1, 0.5, 0.9, 1.5], predicate=lambda x: x < 1),\n    dict(xs=[[1, 2], [3, 4], [5, 6]], predicate=lambda x: 4 in x),\n    dict(xs=[{'a': 1}, {'b': 2}, {'c': 3}], predicate=lambda x: 'b' in x)\n]", "code": "def filter(xs, predicate):\n    return [x for x in xs if predicate(x)]\n", "func_name": "filter", "exec_status": true, "example_inputs": ["\"{'xs': [1, 2, 3, 4, 5], 'predicate': <function <lambda> at 0x7f843c4eaf70>}\"", "\"{'xs': ['hello', 'world', 'python'], 'predicate': <function <lambda> at 0x7f843c4ea8b0>}\"", "\"{'xs': [3.14, 2.71, 1.62], 'predicate': <function <lambda> at 0x7f843c4ea820>}\"", "\"{'xs': ['a', 'b', 'c', 'd'], 'predicate': <function <lambda> at 0x7f843c4ea4c0>}\"", "\"{'xs': [True, False, True, False], 'predicate': <function <lambda> at 0x7f843c4ea550>}\"", "\"{'xs': [1, 2, 3, 4, 5], 'predicate': <function <lambda> at 0x7f843c4ea670>}\"", "\"{'xs': ['apple', 'banana', 'cherry'], 'predicate': <function <lambda> at 0x7f843c4ea700>}\"", "\"{'xs': [(1, 2), (3, 4), (5, 6)], 'predicate': <function <lambda> at 0x7f843c4ea790>}\"", "\"{'xs': ['hello', 'world', 'python', 'java'], 'predicate': <function <lambda> at 0x7f843c4ea3a0>}\"", "\"{'xs': [1, 2, 3, 4, 5], 'predicate': <function <lambda> at 0x7f843c4ea310>}\""], "example_outputs": [{"return": "\"[2, 4]\""}, {"return": "\"['hello', 'world', 'python']\""}, {"return": "\"[3.14, 2.71]\""}, {"return": "\"[]\""}, {"return": "\"[True, True]\""}, {"return": "\"[4, 5]\""}, {"return": "\"['apple']\""}, {"return": "\"[(3, 4), (5, 6)]\""}, {"return": "\"['hello', 'world', 'python']\""}, {"return": "\"[3]\""}, {"return": "\"[4, 5]\""}, {"return": "\"['apple', 'banana']\""}, {"return": "\"[20, 40]\""}, {"return": "\"[-4, -5]\""}, {"return": "\"['hello', 'world', 'python']\""}, {"return": "\"[True, True]\""}, {"return": "\"[(3, 4), (5, 6)]\""}, {"return": "\"[0.1, 0.5, 0.9]\""}, {"return": "\"['red', 'green', 'blue', 'yellow']\""}, {"return": "\"[{'name': 'Bob'}]\""}, {"return": "\"[4, 5]\""}, {"return": "\"[-1, -2]\""}, {"return": "\"['apple', 'banana']\""}, {"return": "\"[20, 40]\""}, {"return": "\"[True, True]\""}, {"return": "\"[(3, 4), (5, 6)]\""}, {"return": "\"['hello', 'world', 'python']\""}, {"return": "\"[0.1, 0.5, 0.9]\""}, {"return": "\"[[3, 4]]\""}, {"return": "\"[{'b': 2}]\""}], "parsed_inputs": [[["xs", "[1, 2, 3, 4, 5]"], ["predicate", "(lambda x: x % 2 == 0)"]], [["xs", "['hello', 'world', 'python']"], ["predicate", "(lambda x: len(x) > 4)"]], [["xs", "[3.14, 2.71, 1.62]"], ["predicate", "(lambda x: x > 2)"]], [["xs", "['a', 'b', 'c', 'd']"], ["predicate", "(lambda x: x.isupper())"]], [["xs", "[True, False, True, False]"], ["predicate", "(lambda x: x)"]], [["xs", "[1, 2, 3, 4, 5]"], ["predicate", "(lambda x: x > 3)"]], [["xs", "['apple', 'banana', 'cherry']"], ["predicate", "(lambda x: x.startswith('a'))"]], [["xs", "[(1, 2), (3, 4), (5, 6)]"], ["predicate", "(lambda x: x[0] > 2)"]], [["xs", "['hello', 'world', 'python', 'java']"], ["predicate", "(lambda x: 'o' in x)"]], [["xs", "[1, 2, 3, 4, 5]"], ["predicate", "(lambda x: x % 3 == 0)"]]], "exec_code": "def filter(xs, predicate):\n    return [x for x in xs if predicate(x)]\n", "output": "The function is:\n\n```python\ndef filter(xs, predicate):\n    return [x for x in xs if predicate(x)]\n\n```", "choosed_example_idx": [4, 5, 3, 7, 2, 6], "prompt": "Input: dict(xs=[True, False, True, False], predicate=(lambda x: x)), Output: \"[True, True]\"\nInput: dict(xs=[1, 2, 3, 4, 5], predicate=(lambda x: x > 3)), Output: \"[4, 5]\"\nInput: dict(xs=['a', 'b', 'c', 'd'], predicate=(lambda x: x.isupper())), Output: \"[]\"\nInput: dict(xs=[(1, 2), (3, 4), (5, 6)], predicate=(lambda x: x[0] > 2)), Output: \"[(3, 4), (5, 6)]\"\nInput: dict(xs=[3.14, 2.71, 1.62], predicate=(lambda x: x > 2)), Output: \"[3.14, 2.71]\"\nInput: dict(xs=['apple', 'banana', 'cherry'], predicate=(lambda x: x.startswith('a'))), Output: \"['apple']\"\n\nWrite a function that generates the output from the input.\n\nFunction: filter\n\n\n", "id": "1ae8116a43c5aeb717f04fb4da132fa1fa61df77_0"}
{"example_str": "examples = [\n    {'a': 1, 'b': 2, 'c': 3},\n    {'a': 4.5, 'b': 2.1, 'c': 1.4},\n    {'a': 10, 'b': 20, 'c': 30},\n    {'a': -1, 'b': 1, 'c': 0},\n    {'a': 0, 'b': 0, 'c': 0},\n    {'a': 1, 'b': 1, 'c': 1},\n    {'a': 2, 'b': 4, 'c': 6},\n    {'a': 3.14, 'b': 2.71, 'c': 1.62},\n    {'a': -5, 'b': 3, 'c': 2},\n    {'a': 100, 'b': 200, 'c': 300}\n]\nexamples += [\n    dict(a=1, b=2, c=3),  # integers\n    dict(a=1.5, b=2.5, c=3.0),  # floats\n    dict(a=\"Hello, \", b=\"how \", c=\"are you?\"),  # strings\n    dict(a=[1, 2], b=[3, 4], c=[5, 6]),  # lists\n    dict(a=(1,), b=(2,), c=(3,)),  # tuples\n    dict(a=1, b=2.5, c=3),  # mixed integers and floats\n    dict(a=\"1\", b=\"2\", c=\"3\"),  # numeric strings\n    dict(a=0, b=0, c=0),  # zero values\n    dict(a=-1, b=-2, c=-3),  # negative integers\n    dict(a=1e2, b=2e2, c=3e2)  # scientific notation floats\n]\nexamples += [\n    dict(a=1, b=2, c=3),\n    dict(a=10, b=20, c=30),\n    dict(a=-1, b=-2, c=-3),\n    dict(a=0.5, b=1.5, c=2.0),\n    dict(a=-10, b=5, c=5),\n    dict(a=100, b=200, c=300),\n    dict(a=0, b=0, c=0),\n    dict(a=1.1, b=2.2, c=3.3),\n    dict(a=-5, b=15, c=-10),\n    dict(a=50, b=50, c=50)\n]", "code": "def my_adder(a, b, c):\n    out = a + b + c\n    return out\n", "func_name": "my_adder", "exec_status": true, "example_inputs": ["\"{'a': 1, 'b': 2, 'c': 3}\"", "\"{'a': 4.5, 'b': 2.1, 'c': 1.4}\"", "\"{'a': 10, 'b': 20, 'c': 30}\"", "\"{'a': -1, 'b': 1, 'c': 0}\"", "\"{'a': 0, 'b': 0, 'c': 0}\"", "\"{'a': 1, 'b': 1, 'c': 1}\"", "\"{'a': 2, 'b': 4, 'c': 6}\"", "\"{'a': 3.14, 'b': 2.71, 'c': 1.62}\"", "\"{'a': -5, 'b': 3, 'c': 2}\"", "\"{'a': 100, 'b': 200, 'c': 300}\""], "example_outputs": [{"return": "\"6\""}, {"return": "\"8.0\""}, {"return": "\"60\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"12\""}, {"return": "\"7.47\""}, {"return": "\"0\""}, {"return": "\"600\""}, {"return": "\"6\""}, {"return": "\"7.0\""}, {"return": "\"'Hello, how are you?'\""}, {"return": "\"[1, 2, 3, 4, 5, 6]\""}, {"return": "\"(1, 2, 3)\""}, {"return": "\"6.5\""}, {"return": "\"'123'\""}, {"return": "\"0\""}, {"return": "\"-6\""}, {"return": "\"600.0\""}, {"return": "\"6\""}, {"return": "\"60\""}, {"return": "\"-6\""}, {"return": "\"4.0\""}, {"return": "\"0\""}, {"return": "\"600\""}, {"return": "\"0\""}, {"return": "\"6.6\""}, {"return": "\"0\""}, {"return": "\"150\""}], "parsed_inputs": [[["a", "1"], ["b", "2"], ["c", "3"]], [["a", "4.5"], ["b", "2.1"], ["c", "1.4"]], [["a", "10"], ["b", "20"], ["c", "30"]], [["a", "-1"], ["b", "1"], ["c", "0"]], [["a", "0"], ["b", "0"], ["c", "0"]], [["a", "1"], ["b", "1"], ["c", "1"]], [["a", "2"], ["b", "4"], ["c", "6"]], [["a", "3.14"], ["b", "2.71"], ["c", "1.62"]], [["a", "-5"], ["b", "3"], ["c", "2"]], [["a", "100"], ["b", "200"], ["c", "300"]]], "exec_code": "def my_adder(a, b, c):\n    out = a + b + c\n    return out\n", "output": "The function is:\n\n```python\ndef my_adder(a, b, c):\n    out = a + b + c\n    return out\n\n```", "choosed_example_idx": [4, 5, 9, 0, 3, 2, 7, 8], "prompt": "Write a function that generates the output from the input.\nFunction: my_adder\nInput: dict(a=0, b=0, c=0), Output: \"0\"\nInput: dict(a=1, b=1, c=1), Output: \"3\"\nInput: dict(a=100, b=200, c=300), Output: \"600\"\nInput: dict(a=1, b=2, c=3), Output: \"6\"\nInput: dict(a=-1, b=1, c=0), Output: \"0\"\nInput: dict(a=10, b=20, c=30), Output: \"60\"\nInput: dict(a=3.14, b=2.71, c=1.62), Output: \"7.47\"\nInput: dict(a=-5, b=3, c=2), Output: \"0\"\n\n", "id": "1ea58fc9069496d7ecaf22a70855f4929625bc5f_0"}
{"example_str": "examples = [\n    dict(s=\"\"),\n    dict(s=\"a\"),\n    dict(s=\"ab\"),\n    dict(s=\"abc\"),\n    dict(s=\"abcd\"),\n    dict(s=\"abcde\"),\n    dict(s=\"abcdef\"),\n    dict(s=\"abcdefg\"),\n    dict(s=\"abcdefgh\"),\n    dict(s=\"abcdefghi\"),\n]\nexamples += [\n    dict(s=\"hello\"),\n    dict(s=\"world\"),\n    dict(s=\"Python\"),\n    dict(s=\"\"),\n    dict(s=\"A\"),\n    dict(s=\"AB\"),\n    dict(s=\"ABC\"),\n    dict(s=\"ABCD\"),\n    dict(s=\"ABCDE\"),\n    dict(s=\"123456789\")\n]\nexamples += [\n    dict(s=\"hello\"),\n    dict(s=\"world\"),\n    dict(s=\"Python\"),\n    dict(s=\"example\"),\n    dict(s=\"odd\"),\n    dict(s=\"even\"),\n    dict(s=\"\"),\n    dict(s=\"a\"),\n    dict(s=\"substrings\"),\n    dict(s=\"123456789\")\n]", "code": "def solution(s):\n    return [s[i:i + 2] for i in range(0, len(s), 2)] if len(s) % 2 == 0 else [(\n        s + '_')[i:i + 2] for i in range(0, len(s + '_'), 2)]\n", "func_name": "solution", "exec_status": true, "example_inputs": ["\"{'s': ''}\"", "\"{'s': 'a'}\"", "\"{'s': 'ab'}\"", "\"{'s': 'abc'}\"", "\"{'s': 'abcd'}\"", "\"{'s': 'abcde'}\"", "\"{'s': 'abcdef'}\"", "\"{'s': 'abcdefg'}\"", "\"{'s': 'abcdefgh'}\"", "\"{'s': 'abcdefghi'}\""], "example_outputs": [{"return": "\"[]\""}, {"return": "\"['a_']\""}, {"return": "\"['ab']\""}, {"return": "\"['ab', 'c_']\""}, {"return": "\"['ab', 'cd']\""}, {"return": "\"['ab', 'cd', 'e_']\""}, {"return": "\"['ab', 'cd', 'ef']\""}, {"return": "\"['ab', 'cd', 'ef', 'g_']\""}, {"return": "\"['ab', 'cd', 'ef', 'gh']\""}, {"return": "\"['ab', 'cd', 'ef', 'gh', 'i_']\""}, {"return": "\"['he', 'll', 'o_']\""}, {"return": "\"['wo', 'rl', 'd_']\""}, {"return": "\"['Py', 'th', 'on']\""}, {"return": "\"[]\""}, {"return": "\"['A_']\""}, {"return": "\"['AB']\""}, {"return": "\"['AB', 'C_']\""}, {"return": "\"['AB', 'CD']\""}, {"return": "\"['AB', 'CD', 'E_']\""}, {"return": "\"['12', '34', '56', '78', '9_']\""}, {"return": "\"['he', 'll', 'o_']\""}, {"return": "\"['wo', 'rl', 'd_']\""}, {"return": "\"['Py', 'th', 'on']\""}, {"return": "\"['ex', 'am', 'pl', 'e_']\""}, {"return": "\"['od', 'd_']\""}, {"return": "\"['ev', 'en']\""}, {"return": "\"[]\""}, {"return": "\"['a_']\""}, {"return": "\"['su', 'bs', 'tr', 'in', 'gs']\""}, {"return": "\"['12', '34', '56', '78', '9_']\""}], "parsed_inputs": [[["s", "\"\""]], [["s", "\"a\""]], [["s", "\"ab\""]], [["s", "\"abc\""]], [["s", "\"abcd\""]], [["s", "\"abcde\""]], [["s", "\"abcdef\""]], [["s", "\"abcdefg\""]], [["s", "\"abcdefgh\""]], [["s", "\"abcdefghi\""]]], "exec_code": "def solution(s):\n    return [s[i:i + 2] for i in range(0, len(s), 2)] if len(s) % 2 == 0 else [(\n        s + '_')[i:i + 2] for i in range(0, len(s + '_'), 2)]\n", "output": "The function is:\n\n```python\ndef solution(s):\n    return [s[i:i + 2] for i in range(0, len(s), 2)] if len(s) % 2 == 0 else [(\n        s + '_')[i:i + 2] for i in range(0, len(s + '_'), 2)]\n\n```", "choosed_example_idx": [9, 0, 4, 8], "prompt": "Input: dict(s=\"abcdefghi\"), Output: \"['ab', 'cd', 'ef', 'gh', 'i_']\"\nInput: dict(s=\"\"), Output: \"[]\"\nInput: dict(s=\"abcd\"), Output: \"['ab', 'cd']\"\nInput: dict(s=\"abcdefgh\"), Output: \"['ab', 'cd', 'ef', 'gh']\"\n\nFunction: solution\nWrite a function that generates the output from the input.\n\n\n", "id": "6d370ee8b8938f9547a78bb4080e6a7371742345_0"}
{"example_str": "examples = [\n    dict(target=3),\n    dict(target=2),\n    dict(target=1),\n    dict(target=4),\n    dict(target=5),\n    dict(target=6),\n    dict(target=7),\n    dict(target=8),\n    dict(target=9),\n    dict(target=10),\n]\nexamples += [\n    dict(target=5),\n    dict(target=-5),\n    dict(target=10),\n    dict(target=-10),\n    dict(target=0),\n    dict(target=1),\n    dict(target=-1),\n    dict(target=15),\n    dict(target=-15),\n    dict(target=20)\n]\nexamples += [\n    dict(target=1),\n    dict(target=-1),\n    dict(target=2),\n    dict(target=-2),\n    dict(target=3),\n    dict(target=-3),\n    dict(target=10),\n    dict(target=-10),\n    dict(target=20),\n    dict(target=-20)\n]", "code": "def reachNumber(target):\n    sum = 0\n    n = 0\n    while True:\n        if sum >= target:\n            if sum == target or (sum - target) % 2 == 0:\n                return n\n            elif n % 2 == 0:\n                return n + 1\n            else:\n                return n + 2\n        n += 1\n        sum += n\n", "func_name": "reachNumber", "exec_status": true, "example_inputs": ["\"{'target': 3}\"", "\"{'target': 2}\"", "\"{'target': 1}\"", "\"{'target': 4}\"", "\"{'target': 5}\"", "\"{'target': 6}\"", "\"{'target': 7}\"", "\"{'target': 8}\"", "\"{'target': 9}\"", "\"{'target': 10}\""], "example_outputs": [{"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"5\""}, {"return": "\"3\""}, {"return": "\"5\""}, {"return": "\"4\""}, {"return": "\"5\""}, {"return": "\"4\""}, {"return": "\"5\""}, {"return": "\"1\""}, {"return": "\"4\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"5\""}, {"return": "\"1\""}, {"return": "\"7\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"4\""}, {"return": "\"0\""}, {"return": "\"7\""}, {"return": "\"0\""}], "parsed_inputs": [[["target", "3"]], [["target", "2"]], [["target", "1"]], [["target", "4"]], [["target", "5"]], [["target", "6"]], [["target", "7"]], [["target", "8"]], [["target", "9"]], [["target", "10"]]], "exec_code": "def reachNumber(target):\n    sum = 0\n    n = 0\n    while True:\n        if sum >= target:\n            if sum == target or (sum - target) % 2 == 0:\n                return n\n            elif n % 2 == 0:\n                return n + 1\n            else:\n                return n + 2\n        n += 1\n        sum += n\n", "output": "The function is:\n\n```python\ndef reachNumber(target):\n    sum = 0\n    n = 0\n    while True:\n        if sum >= target:\n            if sum == target or (sum - target) % 2 == 0:\n                return n\n            elif n % 2 == 0:\n                return n + 1\n            else:\n                return n + 2\n        n += 1\n        sum += n\n\n```", "choosed_example_idx": [2, 5, 9, 8, 0], "prompt": "Input: dict(target=1), Output: \"1\"\nInput: dict(target=6), Output: \"3\"\nInput: dict(target=10), Output: \"4\"\nInput: dict(target=9), Output: \"5\"\nInput: dict(target=3), Output: \"2\"\n\nWrite a function that generates the output from the input.\n\nFunction: reachNumber\n", "id": "22ffb68ec21c9c1171e880ab68b29b93e087b3d4_0"}
{"example_str": "examples = [\n    dict(path='example.md'),\n    dict(path='document.txt'),\n    dict(path='report.pdf'),\n    dict(path='image.jpg'),\n    dict(path='note.docx'),\n    dict(path='article.html'),\n    dict(path='manual.epub'),\n    dict(path='thesis.doc'),\n    dict(path='presentation.pptx'),\n    dict(path='README'),\n]\nexamples += [\n    dict(path=\"notes/chapter1.md\"),\n    dict(path=\"report.txt\"),\n    dict(path=\"summary.pdf\"),\n    dict(path=\"meeting_notes.docx\"),  # This should return False\n    dict(path=\"archive.zip\"),         # This should return False\n    dict(path=\"essay.md\"),\n    dict(path=\"log.txt\"),\n    dict(path=\"document.pdf\"),\n    dict(path=\"notes.md.txt\"),        # This should return True\n    dict(path=\"image.jpeg\")           # This should return False\n]\nexamples += [\n    dict(path='note1.md'),\n    dict(path='note2.txt'),\n    dict(path='document.pdf'),\n    dict(path='image.png'),\n    dict(path='report.docx'),\n    dict(path='summary.md'),\n    dict(path='notes_on_python.txt'),\n    dict(path='ebook.pdf'),\n    dict(path='photo.jpg'),\n    dict(path='archive.zip'),\n]", "code": "def valid_note(path):\n    \"\"\"only certain filetypes qualify as notes\"\"\"\n    return path.endswith(('.md', '.txt', '.pdf'))\n", "func_name": "valid_note", "exec_status": true, "example_inputs": ["\"{'path': 'example.md'}\"", "\"{'path': 'document.txt'}\"", "\"{'path': 'report.pdf'}\"", "\"{'path': 'image.jpg'}\"", "\"{'path': 'note.docx'}\"", "\"{'path': 'article.html'}\"", "\"{'path': 'manual.epub'}\"", "\"{'path': 'thesis.doc'}\"", "\"{'path': 'presentation.pptx'}\"", "\"{'path': 'README'}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}], "parsed_inputs": [[["path", "\"example.md\""]], [["path", "\"document.txt\""]], [["path", "\"report.pdf\""]], [["path", "\"image.jpg\""]], [["path", "\"note.docx\""]], [["path", "\"article.html\""]], [["path", "\"manual.epub\""]], [["path", "\"thesis.doc\""]], [["path", "\"presentation.pptx\""]], [["path", "\"README\""]]], "exec_code": "def valid_note(path):\n    \"\"\"only certain filetypes qualify as notes\"\"\"\n    return path.endswith(('.md', '.txt', '.pdf'))\n", "output": "The function is:\n\n```python\ndef valid_note(path):\n    \"\"\"only certain filetypes qualify as notes\"\"\"\n    return path.endswith(('.md', '.txt', '.pdf'))\n\n```", "choosed_example_idx": [9, 8, 3, 4, 1], "prompt": "Function: valid_note\nInput: dict(path=\"README\"), Output: \"False\"\nInput: dict(path=\"presentation.pptx\"), Output: \"False\"\nInput: dict(path=\"image.jpg\"), Output: \"False\"\nInput: dict(path=\"note.docx\"), Output: \"False\"\nInput: dict(path=\"document.txt\"), Output: \"True\"\n\nWrite a function that generates the output from the input.\n", "id": "14062bba2d198f1cf80f54c137769e302b9540d0_0"}
{"example_str": "examples = [\n    dict(real=3, imaginary=4),\n    dict(real=0, imaginary=2),\n    dict(real=-1, imaginary=1),\n    dict(real=5, imaginary=0),\n    dict(real=2.5, imaginary=3.7),\n    dict(real=-3, imaginary=-2),\n    dict(real=1, imaginary=-4),\n    dict(real=0, imaginary=0),\n    dict(real=10, imaginary=20),\n    dict(real=-5.5, imaginary=1.2)\n]\nexamples += [\n    dict(real=1, imaginary=1),\n    dict(real=-1, imaginary=-1),\n    dict(real=0, imaginary=0),\n    dict(real=0.5, imaginary=-0.5),\n    dict(real=-0.5, imaginary=0.5),\n    dict(real=100, imaginary=100),\n    dict(real=-100, imaginary=-100),\n    dict(real=3.14159, imaginary=2.71828),\n    dict(real=-3.14159, imaginary=-2.71828),\n    dict(real=0, imaginary=1)\n]\nexamples += [\n    dict(real=1, imaginary=1),\n    dict(real=0, imaginary=-1),\n    dict(real=-1, imaginary=0),\n    dict(real=0.5, imaginary=0.5),\n    dict(real=-0.5, imaginary=-0.5),\n    dict(real=2, imaginary=-2),\n    dict(real=-3, imaginary=3),\n    dict(real=4.5, imaginary=-4.5),\n    dict(real=-5.5, imaginary=5.5),\n    dict(real=100, imaginary=-100)\n]", "code": "def createComplex(real, imaginary):\n    return {'Re': real, 'Im': imaginary}\n", "func_name": "createComplex", "exec_status": true, "example_inputs": ["\"{'real': 3, 'imaginary': 4}\"", "\"{'real': 0, 'imaginary': 2}\"", "\"{'real': -1, 'imaginary': 1}\"", "\"{'real': 5, 'imaginary': 0}\"", "\"{'real': 2.5, 'imaginary': 3.7}\"", "\"{'real': -3, 'imaginary': -2}\"", "\"{'real': 1, 'imaginary': -4}\"", "\"{'real': 0, 'imaginary': 0}\"", "\"{'real': 10, 'imaginary': 20}\"", "\"{'real': -5.5, 'imaginary': 1.2}\""], "example_outputs": [{"return": "\"{'Re': 3, 'Im': 4}\""}, {"return": "\"{'Re': 0, 'Im': 2}\""}, {"return": "\"{'Re': -1, 'Im': 1}\""}, {"return": "\"{'Re': 5, 'Im': 0}\""}, {"return": "\"{'Re': 2.5, 'Im': 3.7}\""}, {"return": "\"{'Re': -3, 'Im': -2}\""}, {"return": "\"{'Re': 1, 'Im': -4}\""}, {"return": "\"{'Re': 0, 'Im': 0}\""}, {"return": "\"{'Re': 10, 'Im': 20}\""}, {"return": "\"{'Re': -5.5, 'Im': 1.2}\""}, {"return": "\"{'Re': 1, 'Im': 1}\""}, {"return": "\"{'Re': -1, 'Im': -1}\""}, {"return": "\"{'Re': 0, 'Im': 0}\""}, {"return": "\"{'Re': 0.5, 'Im': -0.5}\""}, {"return": "\"{'Re': -0.5, 'Im': 0.5}\""}, {"return": "\"{'Re': 100, 'Im': 100}\""}, {"return": "\"{'Re': -100, 'Im': -100}\""}, {"return": "\"{'Re': 3.14159, 'Im': 2.71828}\""}, {"return": "\"{'Re': -3.14159, 'Im': -2.71828}\""}, {"return": "\"{'Re': 0, 'Im': 1}\""}, {"return": "\"{'Re': 1, 'Im': 1}\""}, {"return": "\"{'Re': 0, 'Im': -1}\""}, {"return": "\"{'Re': -1, 'Im': 0}\""}, {"return": "\"{'Re': 0.5, 'Im': 0.5}\""}, {"return": "\"{'Re': -0.5, 'Im': -0.5}\""}, {"return": "\"{'Re': 2, 'Im': -2}\""}, {"return": "\"{'Re': -3, 'Im': 3}\""}, {"return": "\"{'Re': 4.5, 'Im': -4.5}\""}, {"return": "\"{'Re': -5.5, 'Im': 5.5}\""}, {"return": "\"{'Re': 100, 'Im': -100}\""}], "parsed_inputs": [[["real", "3"], ["imaginary", "4"]], [["real", "0"], ["imaginary", "2"]], [["real", "-1"], ["imaginary", "1"]], [["real", "5"], ["imaginary", "0"]], [["real", "2.5"], ["imaginary", "3.7"]], [["real", "-3"], ["imaginary", "-2"]], [["real", "1"], ["imaginary", "-4"]], [["real", "0"], ["imaginary", "0"]], [["real", "10"], ["imaginary", "20"]], [["real", "-5.5"], ["imaginary", "1.2"]]], "exec_code": "def createComplex(real, imaginary):\n    return {'Re': real, 'Im': imaginary}\n", "output": "The function is:\n\n```python\ndef createComplex(real, imaginary):\n    return {'Re': real, 'Im': imaginary}\n\n```", "choosed_example_idx": [3, 7, 1, 0, 5, 2, 6, 4, 8, 9], "prompt": "Function: createComplex\nWrite a function that generates the output from the input.\nInput: dict(real=5, imaginary=0), Output: \"{'Re': 5, 'Im': 0}\"\nInput: dict(real=0, imaginary=0), Output: \"{'Re': 0, 'Im': 0}\"\nInput: dict(real=0, imaginary=2), Output: \"{'Re': 0, 'Im': 2}\"\nInput: dict(real=3, imaginary=4), Output: \"{'Re': 3, 'Im': 4}\"\nInput: dict(real=-3, imaginary=-2), Output: \"{'Re': -3, 'Im': -2}\"\nInput: dict(real=-1, imaginary=1), Output: \"{'Re': -1, 'Im': 1}\"\nInput: dict(real=1, imaginary=-4), Output: \"{'Re': 1, 'Im': -4}\"\nInput: dict(real=2.5, imaginary=3.7), Output: \"{'Re': 2.5, 'Im': 3.7}\"\nInput: dict(real=10, imaginary=20), Output: \"{'Re': 10, 'Im': 20}\"\nInput: dict(real=-5.5, imaginary=1.2), Output: \"{'Re': -5.5, 'Im': 1.2}\"\n\n\n", "id": "dd3f8811546187152997df52678471ed248bbb34_0"}
{"example_str": "examples = [\n    dict(strParam=\"one plus two\"),\n    dict(strParam=\"three minus one\"),\n    dict(strParam=\"zero plus zero\"),\n    dict(strParam=\"five\"),\n    dict(strParam=\"nine minus four\"),\n    dict(strParam=\"seven plus one\"),\n    dict(strParam=\"eight minus two\"),\n    dict(strParam=\"one plus one\"),\n    dict(strParam=\"six minus three\"),\n    dict(strParam=\"four plus zero\"),\n]\nexamples += [\n    dict(strParam=\"one plus two\"),\n    dict(strParam=\"three minus one\"),\n    dict(strParam=\"four plus six minus two\"),\n    dict(strParam=\"nine minus four plus one\"),\n    dict(strParam=\"seven plus three\"),\n    dict(strParam=\"eight minus six\"),\n    dict(strParam=\"five plus five\"),\n    dict(strParam=\"zero plus eight\"),\n    dict(strParam=\"two minus three\"),\n    dict(strParam=\"nine minus zero\")\n]\nexamples += [\n    dict(strParam='one plus two'),\n    dict(strParam='three minus one'),\n    dict(strParam='four plus six'),\n    dict(strParam='nine minus zero'),\n    dict(strParam='seven plus two'),\n    dict(strParam='five minus three'),\n    dict(strParam='eight minus six'),\n    dict(strParam='two plus two'),\n    dict(strParam='one minus four'),\n    dict(strParam='six plus three'),\n]", "code": "def stringtoNo(strParam):\n    dict = {'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5',\n        'six': '6', 'seven': '7', 'eight': '8', 'nine': '9', 'zero': '0',\n        'plus': '+', 'minus': '-'}\n    for i, j in dict.items():\n        strParam = strParam.replace(i, j)\n    result = eval(strParam)\n    if result <= 0:\n        result = str(result).replace('-', 'negative')\n    for i, j in dict.items():\n        result = str(result).replace(j, i)\n    return result\n", "func_name": "stringtoNo", "exec_status": true, "example_inputs": ["\"{'strParam': 'one plus two'}\"", "\"{'strParam': 'three minus one'}\"", "\"{'strParam': 'zero plus zero'}\"", "\"{'strParam': 'five'}\"", "\"{'strParam': 'nine minus four'}\"", "\"{'strParam': 'seven plus one'}\"", "\"{'strParam': 'eight minus two'}\"", "\"{'strParam': 'one plus one'}\"", "\"{'strParam': 'six minus three'}\"", "\"{'strParam': 'four plus zero'}\""], "example_outputs": [{"return": "\"'three'\""}, {"return": "\"'two'\""}, {"return": "\"'zero'\""}, {"return": "\"'five'\""}, {"return": "\"'five'\""}, {"return": "\"'eight'\""}, {"return": "\"'six'\""}, {"return": "\"'two'\""}, {"return": "\"'three'\""}, {"return": "\"'four'\""}, {"return": "\"'three'\""}, {"return": "\"'two'\""}, {"return": "\"'eight'\""}, {"return": "\"'six'\""}, {"return": "\"'onezero'\""}, {"return": "\"'two'\""}, {"return": "\"'onezero'\""}, {"return": "\"'eight'\""}, {"return": "\"'negativeone'\""}, {"return": "\"'nine'\""}, {"return": "\"'three'\""}, {"return": "\"'two'\""}, {"return": "\"'onezero'\""}, {"return": "\"'nine'\""}, {"return": "\"'nine'\""}, {"return": "\"'two'\""}, {"return": "\"'two'\""}, {"return": "\"'four'\""}, {"return": "\"'negativethree'\""}, {"return": "\"'nine'\""}], "parsed_inputs": [[["strParam", "\"one plus two\""]], [["strParam", "\"three minus one\""]], [["strParam", "\"zero plus zero\""]], [["strParam", "\"five\""]], [["strParam", "\"nine minus four\""]], [["strParam", "\"seven plus one\""]], [["strParam", "\"eight minus two\""]], [["strParam", "\"one plus one\""]], [["strParam", "\"six minus three\""]], [["strParam", "\"four plus zero\""]]], "exec_code": "def stringtoNo(strParam):\n    dict = {'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5',\n        'six': '6', 'seven': '7', 'eight': '8', 'nine': '9', 'zero': '0',\n        'plus': '+', 'minus': '-'}\n    for i, j in dict.items():\n        strParam = strParam.replace(i, j)\n    result = eval(strParam)\n    if result <= 0:\n        result = str(result).replace('-', 'negative')\n    for i, j in dict.items():\n        result = str(result).replace(j, i)\n    return result\n", "output": "The function is:\n\n```python\ndef stringtoNo(strParam):\n    dict = {'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5',\n        'six': '6', 'seven': '7', 'eight': '8', 'nine': '9', 'zero': '0',\n        'plus': '+', 'minus': '-'}\n    for i, j in dict.items():\n        strParam = strParam.replace(i, j)\n    result = eval(strParam)\n    if result <= 0:\n        result = str(result).replace('-', 'negative')\n    for i, j in dict.items():\n        result = str(result).replace(j, i)\n    return result\n\n```", "choosed_example_idx": [0, 6, 8, 4, 3, 2, 9, 5, 7], "prompt": "Input: dict(strParam=\"one plus two\"), Output: \"'three'\"\nInput: dict(strParam=\"eight minus two\"), Output: \"'six'\"\nInput: dict(strParam=\"six minus three\"), Output: \"'three'\"\nInput: dict(strParam=\"nine minus four\"), Output: \"'five'\"\nInput: dict(strParam=\"five\"), Output: \"'five'\"\nInput: dict(strParam=\"zero plus zero\"), Output: \"'zero'\"\nInput: dict(strParam=\"four plus zero\"), Output: \"'four'\"\nInput: dict(strParam=\"seven plus one\"), Output: \"'eight'\"\nInput: dict(strParam=\"one plus one\"), Output: \"'two'\"\n\nWrite a function that generates the output from the input.\n\nFunction: stringtoNo\n\n", "id": "973b732efe2c3377d5f0ac9244f3f6489316b6be_0"}
{"example_str": "examples = [\n    dict(a='abc', b='bac'),\n    dict(a='listen', b='silent'),\n    dict(a='hello', b='world'),\n    dict(a='abcde', b='edcba'),\n    dict(a='abc', b='abcd'),\n    dict(a='abc', b='def'),\n    dict(a='aabbcc', b='ccbbba'),\n    dict(a='abcabc', b='abcabc'),\n    dict(a='abcabc', b='abcdabcd'),\n    dict(a='abcdefghijklmnopqrstuvwxyz', b='zyxwvutsrqponmlkjihgfedcba')\n]\nexamples += [\n    dict(a=\"hello\", b=\"billion\"),\n    dict(a=\"anagram\", b=\"manga\"),\n    dict(a=\"test\", b=\"ttew\"),\n    dict(a=\"123\", b=\"321\"),\n    dict(a=\"abc\", b=\"def\"),\n    dict(a=\"silent\", b=\"listen\"),\n    dict(a=\"example\", b=\"samples\"),\n    dict(a=\"python\", b=\"typhon\"),\n    dict(a=\"race\", b=\"care\"),\n    dict(a=\"apple\", b=\"pale\")\n]\nexamples += [\n    dict(a=\"abc\", b=\"cde\"),\n    dict(a=\"hello\", b=\"billion\"),\n    dict(a=\"anagram\", b=\"manga\"),\n    dict(a=\"test\", b=\"ttew\"),\n    dict(a=\"example\", b=\"samples\"),\n    dict(a=\"listen\", b=\"silent\"),\n    dict(a=\"schoolmaster\", b=\"theclassroom\"),\n    dict(a=\"debitcard\", b=\"badcredit\"),\n    dict(a=\"dormitory\", b=\"dirtyroom\"),\n    dict(a=\"astronomer\", b=\"moonstarer\"),\n]", "code": "def makeAnagram(a, b):\n    freq_a = {}\n    freq_b = {}\n    for value in a:\n        freq_a[value] = freq_a.get(value, 0) + 1\n    for value in b:\n        freq_b[value] = freq_b.get(value, 0) + 1\n    total = 0\n    for key, value in freq_a.items():\n        dif = value - freq_b.get(key, 0)\n        if dif > 0:\n            total += dif\n    for key, value in freq_b.items():\n        dif = value - freq_a.get(key, 0)\n        if dif > 0:\n            total += dif\n    return total\n", "func_name": "makeAnagram", "exec_status": true, "example_inputs": ["\"{'a': 'abc', 'b': 'bac'}\"", "\"{'a': 'listen', 'b': 'silent'}\"", "\"{'a': 'hello', 'b': 'world'}\"", "\"{'a': 'abcde', 'b': 'edcba'}\"", "\"{'a': 'abc', 'b': 'abcd'}\"", "\"{'a': 'abc', 'b': 'def'}\"", "\"{'a': 'aabbcc', 'b': 'ccbbba'}\"", "\"{'a': 'abcabc', 'b': 'abcabc'}\"", "\"{'a': 'abcabc', 'b': 'abcdabcd'}\"", "\"{'a': 'abcdefghijklmnopqrstuvwxyz', 'b': 'zyxwvutsrqponmlkjihgfedcba'}\""], "example_outputs": [{"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"6\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"6\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"6\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"6\""}, {"return": "\"0\""}, {"return": "\"4\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"4\""}, {"return": "\"6\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"4\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}], "parsed_inputs": [[["a", "\"abc\""], ["b", "\"bac\""]], [["a", "\"listen\""], ["b", "\"silent\""]], [["a", "\"hello\""], ["b", "\"world\""]], [["a", "\"abcde\""], ["b", "\"edcba\""]], [["a", "\"abc\""], ["b", "\"abcd\""]], [["a", "\"abc\""], ["b", "\"def\""]], [["a", "\"aabbcc\""], ["b", "\"ccbbba\""]], [["a", "\"abcabc\""], ["b", "\"abcabc\""]], [["a", "\"abcabc\""], ["b", "\"abcdabcd\""]], [["a", "\"abcdefghijklmnopqrstuvwxyz\""], ["b", "\"zyxwvutsrqponmlkjihgfedcba\""]]], "exec_code": "def makeAnagram(a, b):\n    freq_a = {}\n    freq_b = {}\n    for value in a:\n        freq_a[value] = freq_a.get(value, 0) + 1\n    for value in b:\n        freq_b[value] = freq_b.get(value, 0) + 1\n    total = 0\n    for key, value in freq_a.items():\n        dif = value - freq_b.get(key, 0)\n        if dif > 0:\n            total += dif\n    for key, value in freq_b.items():\n        dif = value - freq_a.get(key, 0)\n        if dif > 0:\n            total += dif\n    return total\n", "output": "The function is:\n\n```python\ndef makeAnagram(a, b):\n    freq_a = {}\n    freq_b = {}\n    for value in a:\n        freq_a[value] = freq_a.get(value, 0) + 1\n    for value in b:\n        freq_b[value] = freq_b.get(value, 0) + 1\n    total = 0\n    for key, value in freq_a.items():\n        dif = value - freq_b.get(key, 0)\n        if dif > 0:\n            total += dif\n    for key, value in freq_b.items():\n        dif = value - freq_a.get(key, 0)\n        if dif > 0:\n            total += dif\n    return total\n\n```", "choosed_example_idx": [0, 9, 2, 1, 8, 5, 7], "prompt": "Function: makeAnagram\nInput: dict(a=\"abc\", b=\"bac\"), Output: \"0\"\nInput: dict(a=\"abcdefghijklmnopqrstuvwxyz\", b=\"zyxwvutsrqponmlkjihgfedcba\"), Output: \"0\"\nInput: dict(a=\"hello\", b=\"world\"), Output: \"6\"\nInput: dict(a=\"listen\", b=\"silent\"), Output: \"0\"\nInput: dict(a=\"abcabc\", b=\"abcdabcd\"), Output: \"2\"\nInput: dict(a=\"abc\", b=\"def\"), Output: \"6\"\nInput: dict(a=\"abcabc\", b=\"abcabc\"), Output: \"0\"\n\nWrite a function that generates the output from the input.\n", "id": "792d7cd46bcaf1a0b209e20b726a910e5acd723e_0"}
{"example_str": "examples = [\n    dict(packet=b'Hello, World!'),\n    dict(packet=b''),\n    dict(packet=b'\\x00\\x01'),\n    dict(packet=b'abc'),\n    dict(packet=b'123'),\n    dict(packet=b'Hello, \\xc2\\xa1Mundo!'),  # Hello, ¡Mundo!\n    dict(packet=b'\\xff\\xfe\\x00\\x00'),  # BOM (Byte Order Mark) for UTF-16 little-endian\n    dict(packet=b'Hello, '),  # trailing comma\n    dict(packet=b'\\x80abc'),  # invalid UTF-8 sequence\n    dict(packet=b''),  # empty bytes\n]\nexamples += [\n    dict(packet=b'Hello, world!'),\n    dict(packet=b'1234567890'),\n    dict(packet=b''),\n    dict(packet=b'\\xff\\xfe\\xfd\\xfc\\xfb'),\n    dict(packet=b'Python is fun!'),\n    dict(packet=b'\\x70\\x79\\x74\\x68\\x6f\\x6e'),\n    dict(packet=b'UTF-8 \\xc2\\xa9'),\n    dict(packet=b'\\xe2\\x98\\x83'),  # Unicode character for a snowman\n    dict(packet=b'\\xf0\\x9f\\x98\\x81'),  # Unicode character for a smiley face\n    dict(packet=b'Error 404: Not found')\n]\nexamples += [\n    dict(packet=b'Hello, world!'),\n    dict(packet=b'1234567890'),\n    dict(packet=b'Python is fun!'),\n    dict(packet=b'\\xff\\xfe\\xfd\\xfc'),\n    dict(packet=b'\\x00\\x01\\x02\\x03'),\n    dict(packet=b''),\n    dict(packet=b'UTF-8 \\xc2\\xa9'),\n    dict(packet=b'Error\\x00Message'),\n    dict(packet=b'New\\nLine'),\n    dict(packet=b'Spaces  and tabs\\t')\n]", "code": "def extract(packet):\n    return packet.decode('utf-8')\n", "func_name": "extract", "exec_status": true, "example_inputs": ["\"{'packet': b'Hello, World!'}\"", "\"{'packet': b''}\"", "\"{'packet': b'\\\\x00\\\\x01'}\"", "\"{'packet': b'abc'}\"", "\"{'packet': b'123'}\"", "\"{'packet': b'Hello, \\\\xc2\\\\xa1Mundo!'}\"", "\"{'packet': b'\\\\xff\\\\xfe\\\\x00\\\\x00'}\"", "\"{'packet': b'Hello, '}\"", "\"{'packet': b'\\\\x80abc'}\"", "\"{'packet': b''}\""], "example_outputs": [{"return": "\"'Hello, World!'\""}, {"return": "\"''\""}, {"return": "\"'\\\\x00\\\\x01'\""}, {"return": "\"'abc'\""}, {"return": "\"'123'\""}, {"return": "\"'Hello, \\u00a1Mundo!'\""}, {"error": "<|EXCEPTION|> \"<class 'UnicodeDecodeError'>: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte\""}, {"return": "\"'Hello, '\""}, {"error": "<|EXCEPTION|> \"<class 'UnicodeDecodeError'>: 'utf-8' codec can't decode byte 0x80 in position 0: invalid start byte\""}, {"return": "\"''\""}, {"return": "\"'Hello, world!'\""}, {"return": "\"'1234567890'\""}, {"return": "\"''\""}, {"error": "<|EXCEPTION|> \"<class 'UnicodeDecodeError'>: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte\""}, {"return": "\"'Python is fun!'\""}, {"return": "\"'python'\""}, {"return": "\"'UTF-8 \\u00a9'\""}, {"return": "\"'\\u2603'\""}, {"return": "\"'\\ud83d\\ude01'\""}, {"return": "\"'Error 404: Not found'\""}, {"return": "\"'Hello, world!'\""}, {"return": "\"'1234567890'\""}, {"return": "\"'Python is fun!'\""}, {"error": "<|EXCEPTION|> \"<class 'UnicodeDecodeError'>: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte\""}, {"return": "\"'\\\\x00\\\\x01\\\\x02\\\\x03'\""}, {"return": "\"''\""}, {"return": "\"'UTF-8 \\u00a9'\""}, {"return": "\"'Error\\\\x00Message'\""}, {"return": "\"'New\\\\nLine'\""}, {"return": "\"'Spaces  and tabs\\\\t'\""}], "parsed_inputs": [[["packet", "b'Hello, World!'"]], [["packet", "b''"]], [["packet", "b'\\x00\\x01'"]], [["packet", "b'abc'"]], [["packet", "b'123'"]], [["packet", "b'Hello, \\xc2\\xa1Mundo!'"]], [["packet", "b'\\xff\\xfe\\x00\\x00'"]], [["packet", "b'Hello, '"]], [["packet", "b'\\x80abc'"]], [["packet", "b''"]]], "exec_code": "def extract(packet):\n    return packet.decode('utf-8')\n", "output": "The function is:\n\n```python\ndef extract(packet):\n    return packet.decode('utf-8')\n\n```", "choosed_example_idx": [0, 1, 5, 3, 9], "prompt": "Function: extract\nWrite a function that generates the output from the input.\nInput: dict(packet=b'Hello, World!'), Output: \"'Hello, World!'\"\nInput: dict(packet=b''), Output: \"''\"\nInput: dict(packet=b'Hello, \\xc2\\xa1Mundo!'), Output: \"'Hello, \\u00a1Mundo!'\"\nInput: dict(packet=b'abc'), Output: \"'abc'\"\nInput: dict(packet=b''), Output: \"''\"\n\n", "id": "e50016ad37bb8ee31e5fa27d68c898750a8dfda6_0"}
{"example_str": "examples = [\n    dict(sayi=0),\n    dict(sayi=255),\n    dict(sayi=256),\n    dict(sayi=510),\n    dict(sayi=1),\n    dict(sayi=254),\n    dict(sayi=511),\n    dict(sayi=1023),\n    dict(sayi=1024),\n    dict(sayi=2048),\n]\nexamples += [\n    dict(sayi=255),       # divisible by 255\n    dict(sayi=510),       # divisible by 255\n    dict(sayi=100),       # not divisible by 255, remainder is 100\n    dict(sayi=300),       # not divisible by 255, remainder is 45\n    dict(sayi=-255),      # divisible by 255\n    dict(sayi=-1),        # not divisible by 255, remainder is 254\n    dict(sayi=1020),      # divisible by 255\n    dict(sayi=1023),      # not divisible by 255, remainder is 3\n    dict(sayi=0),         # divisible by 255\n    dict(sayi=765)        # divisible by 255\n]\nexamples += [\n    dict(sayi=255),\n    dict(sayi=510),\n    dict(sayi=765),\n    dict(sayi=1020),\n    dict(sayi=1280),  # Not divisible by 255, remainder is 25\n    dict(sayi=1300),  # Not divisible by 255, remainder is 45\n    dict(sayi=1500),  # Not divisible by 255, remainder is 240\n    dict(sayi=2000),  # Not divisible by 255, remainder is 230\n    dict(sayi=3000),  # Not divisible by 255, remainder is 180\n    dict(sayi=500),   # Not divisible by 255, remainder is 245\n]", "code": "def kontrol(sayi):\n    if sayi % 255 == 0:\n        return 255\n    else:\n        return sayi % 255\n", "func_name": "kontrol", "exec_status": true, "example_inputs": ["\"{'sayi': 0}\"", "\"{'sayi': 255}\"", "\"{'sayi': 256}\"", "\"{'sayi': 510}\"", "\"{'sayi': 1}\"", "\"{'sayi': 254}\"", "\"{'sayi': 511}\"", "\"{'sayi': 1023}\"", "\"{'sayi': 1024}\"", "\"{'sayi': 2048}\""], "example_outputs": [{"return": "\"255\""}, {"return": "\"255\""}, {"return": "\"1\""}, {"return": "\"255\""}, {"return": "\"1\""}, {"return": "\"254\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"4\""}, {"return": "\"8\""}, {"return": "\"255\""}, {"return": "\"255\""}, {"return": "\"100\""}, {"return": "\"45\""}, {"return": "\"255\""}, {"return": "\"254\""}, {"return": "\"255\""}, {"return": "\"3\""}, {"return": "\"255\""}, {"return": "\"255\""}, {"return": "\"255\""}, {"return": "\"255\""}, {"return": "\"255\""}, {"return": "\"255\""}, {"return": "\"5\""}, {"return": "\"25\""}, {"return": "\"225\""}, {"return": "\"215\""}, {"return": "\"195\""}, {"return": "\"245\""}], "parsed_inputs": [[["sayi", "0"]], [["sayi", "255"]], [["sayi", "256"]], [["sayi", "510"]], [["sayi", "1"]], [["sayi", "254"]], [["sayi", "511"]], [["sayi", "1023"]], [["sayi", "1024"]], [["sayi", "2048"]]], "exec_code": "def kontrol(sayi):\n    if sayi % 255 == 0:\n        return 255\n    else:\n        return sayi % 255\n", "output": "The function is:\n\n```python\ndef kontrol(sayi):\n    if sayi % 255 == 0:\n        return 255\n    else:\n        return sayi % 255\n\n```", "choosed_example_idx": [0, 4, 1, 6, 9, 7, 8], "prompt": "Write a function that generates the output from the input.\n\nFunction: kontrol\nInput: dict(sayi=0), Output: \"255\"\nInput: dict(sayi=1), Output: \"1\"\nInput: dict(sayi=255), Output: \"255\"\nInput: dict(sayi=511), Output: \"1\"\nInput: dict(sayi=2048), Output: \"8\"\nInput: dict(sayi=1023), Output: \"3\"\nInput: dict(sayi=1024), Output: \"4\"\n\n", "id": "21341b4a5c9962a727e0aaa6dbf864a4ac3884be_0"}
{"example_str": "examples = [\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10),\n    dict(n=11),\n]\nexamples += [\n    dict(n=2),    # Prime number\n    dict(n=3),    # Prime number\n    dict(n=4),    # Not a prime number\n    dict(n=11),   # Prime number\n    dict(n=15),   # Not a prime number\n    dict(n=17),   # Prime number\n    dict(n=21),   # Not a prime number\n    dict(n=29),   # Prime number\n    dict(n=35),   # Not a prime number\n    dict(n=37)    # Prime number\n]\nexamples += [\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10),\n    dict(n=11)\n]", "code": "def isPrime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n", "func_name": "isPrime", "exec_status": true, "example_inputs": ["\"{'n': 2}\"", "\"{'n': 3}\"", "\"{'n': 4}\"", "\"{'n': 5}\"", "\"{'n': 6}\"", "\"{'n': 7}\"", "\"{'n': 8}\"", "\"{'n': 9}\"", "\"{'n': 10}\"", "\"{'n': 11}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}], "parsed_inputs": [[["n", "2"]], [["n", "3"]], [["n", "4"]], [["n", "5"]], [["n", "6"]], [["n", "7"]], [["n", "8"]], [["n", "9"]], [["n", "10"]], [["n", "11"]]], "exec_code": "def isPrime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n", "output": "The function is:\n\n```python\ndef isPrime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n```", "choosed_example_idx": [4, 2, 3, 0, 7, 6], "prompt": "Input: dict(n=6), Output: \"False\"\nInput: dict(n=4), Output: \"False\"\nInput: dict(n=5), Output: \"True\"\nInput: dict(n=2), Output: \"True\"\nInput: dict(n=9), Output: \"False\"\nInput: dict(n=8), Output: \"False\"\n\nWrite a function that generates the output from the input.\nFunction: isPrime\n", "id": "d01637a20aa2a9991d4eeca7b289f266dd4a95c2_0"}
{"example_str": "examples = [\n    dict(game_data={'player_health': 100, 'score': 0}, region='forest'),\n    dict(game_data={'player_level': 1, 'inventory': []}, region='desert'),\n    dict(game_data={'game_mode': 'hard', 'difficulty': 5}, region='mountain'),\n    dict(game_data={'player_name': 'John', 'game_time': 3600}, region='city'),\n    dict(game_data={'high_score': 1000, 'lives': 3}, region='jungle'),\n    dict(game_data={'current_level': 2, 'total_levels': 10}, region='ice'),\n    dict(game_data={'player_position': (0, 0), 'map_size': (10, 10)}, region='plains'),\n    dict(game_data={'game_state': 'paused', 'pause_time': 30}, region='swamp'),\n    dict(game_data={'player_stats': {'strength': 10, 'agility': 5}}, region='tundra'),\n    dict(game_data={'game_config': {'sound_on': True, 'music_on': False}}, region='ocean')\n]\nexamples += [\n    dict(game_data={\"score\": 100, \"players\": [\"Alice\", \"Bob\"]}, region=\"North\"),\n    dict(game_data={\"score\": 200, \"players\": [\"Charlie\"]}, region=\"South\"),\n    dict(game_data={\"level\": 5, \"items\": [\"sword\", \"shield\"]}, region=\"East\"),\n    dict(game_data={\"level\": 10, \"items\": [\"potion\"]}, region=\"West\"),\n    dict(game_data={\"health\": 90, \"enemies\": [\"Dragon\", \"Troll\"]}, region=\"Central\"),\n    dict(game_data={\"health\": 75, \"enemies\": [\"Goblin\"]}, region=\"Northeast\"),\n    dict(game_data={\"progress\": \"mid\", \"obstacles\": [\"river\", \"mountain\"]}, region=\"Southwest\"),\n    dict(game_data={\"progress\": \"start\", \"obstacles\": [\"forest\"]}, region=\"Southeast\"),\n    dict(game_data={\"score\": 150, \"players\": [\"Eve\", \"Mallory\"], \"items\": [\"bow\", \"arrows\"]}, region=\"Northwest\"),\n    dict(game_data={\"score\": 50, \"players\": [\"Oscar\"], \"level\": 3, \"health\": 100}, region=\"Outer\")\n]\nexamples += [\n    dict(game_data={\"score\": 100, \"level\": 1}, region=\"forest\"),\n    dict(game_data={\"score\": 200, \"level\": 2}, region=\"desert\"),\n    dict(game_data={\"score\": 300, \"level\": 3}, region=\"mountain\"),\n    dict(game_data={\"score\": 400, \"level\": 4}, region=\"lake\"),\n    dict(game_data={\"score\": 500, \"level\": 5}, region=\"city\"),\n    dict(game_data={\"score\": 600, \"level\": 6}, region=\"village\"),\n    dict(game_data={\"score\": 700, \"level\": 7}, region=\"river\"),\n    dict(game_data={\"score\": 800, \"level\": 8}, region=\"ocean\"),\n    dict(game_data={\"score\": 900, \"level\": 9}, region=\"cave\"),\n    dict(game_data={\"score\": 1000, \"level\": 10}, region=\"castle\")\n]", "code": "def update_region(game_data, region):\n    return\n", "func_name": "update_region", "exec_status": true, "example_inputs": ["\"{'game_data': {'player_health': 100, 'score': 0}, 'region': 'forest'}\"", "\"{'game_data': {'player_level': 1, 'inventory': []}, 'region': 'desert'}\"", "\"{'game_data': {'game_mode': 'hard', 'difficulty': 5}, 'region': 'mountain'}\"", "\"{'game_data': {'player_name': 'John', 'game_time': 3600}, 'region': 'city'}\"", "\"{'game_data': {'high_score': 1000, 'lives': 3}, 'region': 'jungle'}\"", "\"{'game_data': {'current_level': 2, 'total_levels': 10}, 'region': 'ice'}\"", "\"{'game_data': {'player_position': (0, 0), 'map_size': (10, 10)}, 'region': 'plains'}\"", "\"{'game_data': {'game_state': 'paused', 'pause_time': 30}, 'region': 'swamp'}\"", "\"{'game_data': {'player_stats': {'strength': 10, 'agility': 5}}, 'region': 'tundra'}\"", "\"{'game_data': {'game_config': {'sound_on': True, 'music_on': False}}, 'region': 'ocean'}\""], "example_outputs": [{"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}], "parsed_inputs": [[["game_data", "{'player_health': 100, 'score': 0}"], ["region", "\"forest\""]], [["game_data", "{'player_level': 1, 'inventory': []}"], ["region", "\"desert\""]], [["game_data", "{'game_mode': 'hard', 'difficulty': 5}"], ["region", "\"mountain\""]], [["game_data", "{'player_name': 'John', 'game_time': 3600}"], ["region", "\"city\""]], [["game_data", "{'high_score': 1000, 'lives': 3}"], ["region", "\"jungle\""]], [["game_data", "{'current_level': 2, 'total_levels': 10}"], ["region", "\"ice\""]], [["game_data", "{'player_position': (0, 0), 'map_size': (10, 10)}"], ["region", "\"plains\""]], [["game_data", "{'game_state': 'paused', 'pause_time': 30}"], ["region", "\"swamp\""]], [["game_data", "{'player_stats': {'strength': 10, 'agility': 5}}"], ["region", "\"tundra\""]], [["game_data", "{'game_config': {'sound_on': True, 'music_on': False}}"], ["region", "\"ocean\""]]], "exec_code": "def update_region(game_data, region):\n    return\n", "output": "The function is:\n\n```python\ndef update_region(game_data, region):\n    return\n\n```", "choosed_example_idx": [2, 6, 5, 9, 4, 8, 1, 3, 0, 7], "prompt": "Input: dict(game_data={'game_mode': 'hard', 'difficulty': 5}, region=\"mountain\"), Output: \"None\"\nInput: dict(game_data={'player_position': (0, 0), 'map_size': (10, 10)}, region=\"plains\"), Output: \"None\"\nInput: dict(game_data={'current_level': 2, 'total_levels': 10}, region=\"ice\"), Output: \"None\"\nInput: dict(game_data={'game_config': {'sound_on': True, 'music_on': False}}, region=\"ocean\"), Output: \"None\"\nInput: dict(game_data={'high_score': 1000, 'lives': 3}, region=\"jungle\"), Output: \"None\"\nInput: dict(game_data={'player_stats': {'strength': 10, 'agility': 5}}, region=\"tundra\"), Output: \"None\"\nInput: dict(game_data={'player_level': 1, 'inventory': []}, region=\"desert\"), Output: \"None\"\nInput: dict(game_data={'player_name': 'John', 'game_time': 3600}, region=\"city\"), Output: \"None\"\nInput: dict(game_data={'player_health': 100, 'score': 0}, region=\"forest\"), Output: \"None\"\nInput: dict(game_data={'game_state': 'paused', 'pause_time': 30}, region=\"swamp\"), Output: \"None\"\n\nWrite a function that generates the output from the input.\nFunction: update_region\n", "id": "620ca6d8446997b1e3eb85429415987c56e090f8_0"}
{"example_str": "examples = [\n    dict(X=[1, 2, 3, 4, 5], y=[10, 20, 30, 40, 50], steps=1),\n    dict(X=[1, 2, 3, 4, 5], y=[10, 20, 30, 40, 50], steps=2),\n    dict(X=[1, 2, 3, 4, 5], y=[10, 20, 30, 40, 50], steps=3),\n    dict(X=[1, 2, 3, 4, 5], y=[10, 20, 30, 40, 50], steps=4),\n    dict(X=[1, 2, 3, 4, 5], y=[10, 20, 30, 40, 50], steps=0),\n    dict(X=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], y=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], steps=2),\n    dict(X=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], y=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], steps=3),\n    dict(X=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], y=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], steps=1),\n    dict(X=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], y=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], steps=5),\n    dict(X=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], y=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], steps=0)\n]\nexamples += [\n    dict(X=[1, 2, 3, 4, 5], y=[10, 20, 30, 40, 50], steps=1),\n    dict(X=[10, 20, 30, 40, 50, 60], y=[5, 15, 25, 35, 45, 55], steps=2),\n    dict(X=[0, 1, 2, 3, 4, 5, 6], y=[0, 1, 4, 9, 16, 25, 36], steps=3),\n    dict(X=[100, 200, 300], y=[1000, 1100, 1200], steps=1),\n    dict(X=[-1, -2, -3, -4], y=[-10, -20, -30, -40], steps=1),\n    dict(X=[2, 4, 6, 8, 10], y=[3, 6, 9, 12, 15], steps=2),\n    dict(X=[1.1, 1.2, 1.3, 1.4], y=[10.1, 20.2, 30.3, 40.4], steps=1),\n    dict(X=[5, 10, 15, 20, 25, 30], y=[100, 200, 300, 400, 500, 600], steps=3),\n    dict(X=[0, 0.5, 1.0, 1.5], y=[0, 0.25, 0.5, 0.75], steps=1),\n    dict(X=[10, 20, 30, 40, 50, 60, 70, 80], y=[8, 16, 24, 32, 40, 48, 56, 64], steps=4)\n]\nexamples += [\n    dict(X=[1, 2, 3, 4, 5], y=[10, 20, 30, 40, 50], steps=1),\n    dict(X=[1, 2, 3, 4, 5, 6], y=[5, 15, 25, 35, 45, 55], steps=2),\n    dict(X=[10, 20, 30], y=[100, 200, 300], steps=1),\n    dict(X=[0, 1, 2, 3], y=[0, 1, 4, 9], steps=1),\n    dict(X=[0, 1, 2, 3, 4, 5], y=[1, 1, 2, 3, 5, 8], steps=2),\n    dict(X=list(range(10)), y=[x**2 for x in range(10)], steps=3),\n    dict(X=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], y=[2**n for n in range(10)], steps=1),\n    dict(X=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], y=[n*10 for n in range(10)], steps=4),\n    dict(X=[5, 10, 15, 20, 25], y=[3, 6, 9, 12, 15], steps=1),\n    dict(X=[100, 200, 300, 400, 500], y=[1000, 1100, 1200, 1300, 1400], steps=2)\n]", "code": "def difference(X, y, steps):\n    x_val = X\n    y_val = y\n    if steps == 0:\n        return x_val, y_val, [(0) for a in y_val]\n    ret_val = []\n    trend = []\n    ret_val = [(y[a] - y[a - steps]) for a in range(steps, len(y))]\n    y_val = ret_val\n    trend.extend([y[a - steps] for a in range(steps, len(y))])\n    return x_val[:len(x_val) - steps], ret_val, trend\n", "func_name": "difference", "exec_status": true, "example_inputs": ["\"{'X': [1, 2, 3, 4, 5], 'y': [10, 20, 30, 40, 50], 'steps': 1}\"", "\"{'X': [1, 2, 3, 4, 5], 'y': [10, 20, 30, 40, 50], 'steps': 2}\"", "\"{'X': [1, 2, 3, 4, 5], 'y': [10, 20, 30, 40, 50], 'steps': 3}\"", "\"{'X': [1, 2, 3, 4, 5], 'y': [10, 20, 30, 40, 50], 'steps': 4}\"", "\"{'X': [1, 2, 3, 4, 5], 'y': [10, 20, 30, 40, 50], 'steps': 0}\"", "\"{'X': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'y': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 'steps': 2}\"", "\"{'X': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'y': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 'steps': 3}\"", "\"{'X': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'y': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 'steps': 1}\"", "\"{'X': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'y': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 'steps': 5}\"", "\"{'X': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'y': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 'steps': 0}\""], "example_outputs": [{"return": "\"([1, 2, 3, 4], [10, 10, 10, 10], [10, 20, 30, 40])\""}, {"return": "\"([1, 2, 3], [20, 20, 20], [10, 20, 30])\""}, {"return": "\"([1, 2], [30, 30], [10, 20])\""}, {"return": "\"([1], [40], [10])\""}, {"return": "\"([1, 2, 3, 4, 5], [10, 20, 30, 40, 50], [0, 0, 0, 0, 0])\""}, {"return": "\"([1, 2, 3, 4, 5, 6, 7, 8], [20, 20, 20, 20, 20, 20, 20, 20], [10, 20, 30, 40, 50, 60, 70, 80])\""}, {"return": "\"([1, 2, 3, 4, 5, 6, 7], [30, 30, 30, 30, 30, 30, 30], [10, 20, 30, 40, 50, 60, 70])\""}, {"return": "\"([1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 10, 10, 10, 10, 10, 10, 10, 10], [10, 20, 30, 40, 50, 60, 70, 80, 90])\""}, {"return": "\"([1, 2, 3, 4, 5], [50, 50, 50, 50, 50], [10, 20, 30, 40, 50])\""}, {"return": "\"([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\""}, {"return": "\"([1, 2, 3, 4], [10, 10, 10, 10], [10, 20, 30, 40])\""}, {"return": "\"([10, 20, 30, 40], [20, 20, 20, 20], [5, 15, 25, 35])\""}, {"return": "\"([0, 1, 2, 3], [9, 15, 21, 27], [0, 1, 4, 9])\""}, {"return": "\"([100, 200], [100, 100], [1000, 1100])\""}, {"return": "\"([-1, -2, -3], [-10, -10, -10], [-10, -20, -30])\""}, {"return": "\"([2, 4, 6], [6, 6, 6], [3, 6, 9])\""}, {"return": "\"([1.1, 1.2, 1.3], [10.1, 10.100000000000001, 10.099999999999998], [10.1, 20.2, 30.3])\""}, {"return": "\"([5, 10, 15], [300, 300, 300], [100, 200, 300])\""}, {"return": "\"([0, 0.5, 1.0], [0.25, 0.25, 0.25], [0, 0.25, 0.5])\""}, {"return": "\"([10, 20, 30, 40], [32, 32, 32, 32], [8, 16, 24, 32])\""}, {"return": "\"([1, 2, 3, 4], [10, 10, 10, 10], [10, 20, 30, 40])\""}, {"return": "\"([1, 2, 3, 4], [20, 20, 20, 20], [5, 15, 25, 35])\""}, {"return": "\"([10, 20], [100, 100], [100, 200])\""}, {"return": "\"([0, 1, 2], [1, 3, 5], [0, 1, 4])\""}, {"return": "\"([0, 1, 2, 3], [1, 2, 3, 5], [1, 1, 2, 3])\""}, {"return": "\"([0, 1, 2, 3, 4, 5, 6], [9, 15, 21, 27, 33, 39, 45], [0, 1, 4, 9, 16, 25, 36])\""}, {"return": "\"([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 4, 8, 16, 32, 64, 128, 256], [1, 2, 4, 8, 16, 32, 64, 128, 256])\""}, {"return": "\"([1, 2, 3, 4, 5, 6], [40, 40, 40, 40, 40, 40], [0, 10, 20, 30, 40, 50])\""}, {"return": "\"([5, 10, 15, 20], [3, 3, 3, 3], [3, 6, 9, 12])\""}, {"return": "\"([100, 200, 300], [200, 200, 200], [1000, 1100, 1200])\""}], "parsed_inputs": [[["X", "[1, 2, 3, 4, 5]"], ["y", "[10, 20, 30, 40, 50]"], ["steps", "1"]], [["X", "[1, 2, 3, 4, 5]"], ["y", "[10, 20, 30, 40, 50]"], ["steps", "2"]], [["X", "[1, 2, 3, 4, 5]"], ["y", "[10, 20, 30, 40, 50]"], ["steps", "3"]], [["X", "[1, 2, 3, 4, 5]"], ["y", "[10, 20, 30, 40, 50]"], ["steps", "4"]], [["X", "[1, 2, 3, 4, 5]"], ["y", "[10, 20, 30, 40, 50]"], ["steps", "0"]], [["X", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], ["y", "[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]"], ["steps", "2"]], [["X", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], ["y", "[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]"], ["steps", "3"]], [["X", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], ["y", "[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]"], ["steps", "1"]], [["X", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], ["y", "[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]"], ["steps", "5"]], [["X", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], ["y", "[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]"], ["steps", "0"]]], "exec_code": "def difference(X, y, steps):\n    x_val = X\n    y_val = y\n    if steps == 0:\n        return x_val, y_val, [(0) for a in y_val]\n    ret_val = []\n    trend = []\n    ret_val = [(y[a] - y[a - steps]) for a in range(steps, len(y))]\n    y_val = ret_val\n    trend.extend([y[a - steps] for a in range(steps, len(y))])\n    return x_val[:len(x_val) - steps], ret_val, trend\n", "output": "The function is:\n\n```python\ndef difference(X, y, steps):\n    x_val = X\n    y_val = y\n    if steps == 0:\n        return x_val, y_val, [(0) for a in y_val]\n    ret_val = []\n    trend = []\n    ret_val = [(y[a] - y[a - steps]) for a in range(steps, len(y))]\n    y_val = ret_val\n    trend.extend([y[a - steps] for a in range(steps, len(y))])\n    return x_val[:len(x_val) - steps], ret_val, trend\n\n```", "choosed_example_idx": [9, 4, 3, 8, 0, 5, 6, 2, 7, 1], "prompt": "Function: difference\nWrite a function that generates the output from the input.\n\nInput: dict(X=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], y=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], steps=0), Output: \"([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\"\nInput: dict(X=[1, 2, 3, 4, 5], y=[10, 20, 30, 40, 50], steps=0), Output: \"([1, 2, 3, 4, 5], [10, 20, 30, 40, 50], [0, 0, 0, 0, 0])\"\nInput: dict(X=[1, 2, 3, 4, 5], y=[10, 20, 30, 40, 50], steps=4), Output: \"([1], [40], [10])\"\nInput: dict(X=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], y=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], steps=5), Output: \"([1, 2, 3, 4, 5], [50, 50, 50, 50, 50], [10, 20, 30, 40, 50])\"\nInput: dict(X=[1, 2, 3, 4, 5], y=[10, 20, 30, 40, 50], steps=1), Output: \"([1, 2, 3, 4], [10, 10, 10, 10], [10, 20, 30, 40])\"\nInput: dict(X=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], y=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], steps=2), Output: \"([1, 2, 3, 4, 5, 6, 7, 8], [20, 20, 20, 20, 20, 20, 20, 20], [10, 20, 30, 40, 50, 60, 70, 80])\"\nInput: dict(X=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], y=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], steps=3), Output: \"([1, 2, 3, 4, 5, 6, 7], [30, 30, 30, 30, 30, 30, 30], [10, 20, 30, 40, 50, 60, 70])\"\nInput: dict(X=[1, 2, 3, 4, 5], y=[10, 20, 30, 40, 50], steps=3), Output: \"([1, 2], [30, 30], [10, 20])\"\nInput: dict(X=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], y=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], steps=1), Output: \"([1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 10, 10, 10, 10, 10, 10, 10, 10], [10, 20, 30, 40, 50, 60, 70, 80, 90])\"\nInput: dict(X=[1, 2, 3, 4, 5], y=[10, 20, 30, 40, 50], steps=2), Output: \"([1, 2, 3], [20, 20, 20], [10, 20, 30])\"\n\n", "id": "2cc912a1f4834f84efcb983a7be4dd8dd65658b3_0"}
{"example_str": "examples = [\n    dict(size=10, sort_func=sorted),\n    dict(size=None, sort_func=sorted),\n    dict(size=20, sort_func=lambda x: x.sort()),\n    dict(size=-5, sort_func=sorted),\n    dict(size=15, sort_func=None),\n    dict(size=30, sort_func=lambda x: x.sort(reverse=True)),\n    dict(size=0, sort_func=sorted),\n    dict(size=25, sort_func=lambda x: x.sort(key=lambda y: y%2)),\n    dict(size=35, sort_func=lambda x: x.sort(reverse=True)),\n    dict(size=None, sort_func=None)\n]\nexamples += [\n    dict(size=10, sort_func=sorted),  # Example with size 10 and Python's built-in sorted function\n    dict(size=100, sort_func=lambda x: x.sort()),  # Example with size 100 and list's sort method\n    dict(size=None, sort_func=None),  # Example where both arguments are None\n    dict(size=50, sort_func=lambda x: sorted(x, reverse=True)),  # Example with size 50 and sorting in descending order\n    dict(size=-1, sort_func=sorted),  # Example with negative size, should return None\n    dict(size=0, sort_func=sorted),  # Example with size 0, should handle empty list sorting\n    dict(size=20, sort_func=None),  # Example with size 20 but no sorting function provided\n    dict(size=200, sort_func=lambda x: sorted(x)),  # Example with size 200 using a lambda that calls sorted\n    dict(size=5, sort_func=lambda x: x[::-1]),  # Example with size 5 using a lambda that reverses the list\n    dict(size=30, sort_func=lambda x: sorted(x, key=lambda y: -y))  # Example with size 30, sorting by negative values for descending order\n]", "code": "def ind_test(size, sort_func):\n    if size is None or sort_func is None:\n        return ['Sorted', 'Random', 'Back Sorted']\n    if size < 0:\n        return None\n    Random = get_random_ind_array(size)\n    Sorted = get_ind_sort_array(size)\n    Back_sorted = get_ind_sort_array(size, False)\n    random_time = measure_time(lambda : sort_func(Random))\n    sorted_time = measure_time(lambda : sort_func(Sorted))\n    back_sorted_time = measure_time(lambda : sort_func(Back_sorted))\n    return [sorted_time, random_time, back_sorted_time]\n", "func_name": "ind_test", "exec_status": true, "example_inputs": ["\"{'size': 10, 'sort_func': <built-in function sorted>}\"", "\"{'size': None, 'sort_func': <built-in function sorted>}\"", "\"{'size': 20, 'sort_func': <function <lambda> at 0x7f4cc2635f70>}\"", "\"{'size': -5, 'sort_func': <built-in function sorted>}\"", "\"{'size': 15, 'sort_func': None}\"", "\"{'size': 30, 'sort_func': <function <lambda> at 0x7f4cc2635ca0>}\"", "\"{'size': 0, 'sort_func': <built-in function sorted>}\"", "\"{'size': 25, 'sort_func': <function <lambda> at 0x7f4cc2635c10>}\"", "\"{'size': 35, 'sort_func': <function <lambda> at 0x7f4cc2635790>}\"", "\"{'size': None, 'sort_func': None}\""], "example_outputs": [{"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'get_random_ind_array' is not defined\""}, {"return": "\"['Sorted', 'Random', 'Back Sorted']\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'get_random_ind_array' is not defined\""}, {"return": "\"None\""}, {"return": "\"['Sorted', 'Random', 'Back Sorted']\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'get_random_ind_array' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'get_random_ind_array' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'get_random_ind_array' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'get_random_ind_array' is not defined\""}, {"return": "\"['Sorted', 'Random', 'Back Sorted']\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'get_random_ind_array' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'get_random_ind_array' is not defined\""}, {"return": "\"['Sorted', 'Random', 'Back Sorted']\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'get_random_ind_array' is not defined\""}, {"return": "\"None\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'get_random_ind_array' is not defined\""}, {"return": "\"['Sorted', 'Random', 'Back Sorted']\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'get_random_ind_array' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'get_random_ind_array' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'get_random_ind_array' is not defined\""}], "parsed_inputs": [[["size", "10"], ["sort_func", "sorted"]], [["size", "None"], ["sort_func", "sorted"]], [["size", "20"], ["sort_func", "(lambda x: x.sort())"]], [["size", "-5"], ["sort_func", "sorted"]], [["size", "15"], ["sort_func", "None"]], [["size", "30"], ["sort_func", "(lambda x: x.sort(reverse=True))"]], [["size", "0"], ["sort_func", "sorted"]], [["size", "25"], ["sort_func", "(lambda x: x.sort(key=lambda y: y % 2))"]], [["size", "35"], ["sort_func", "(lambda x: x.sort(reverse=True))"]], [["size", "None"], ["sort_func", "None"]]], "exec_code": "def ind_test(size, sort_func):\n    if size is None or sort_func is None:\n        return ['Sorted', 'Random', 'Back Sorted']\n    if size < 0:\n        return None\n    Random = get_random_ind_array(size)\n    Sorted = get_ind_sort_array(size)\n    Back_sorted = get_ind_sort_array(size, False)\n    random_time = measure_time(lambda : sort_func(Random))\n    sorted_time = measure_time(lambda : sort_func(Sorted))\n    back_sorted_time = measure_time(lambda : sort_func(Back_sorted))\n    return [sorted_time, random_time, back_sorted_time]\n", "output": "The function is:\n\n```python\ndef ind_test(size, sort_func):\n    if size is None or sort_func is None:\n        return ['Sorted', 'Random', 'Back Sorted']\n    if size < 0:\n        return None\n    Random = get_random_ind_array(size)\n    Sorted = get_ind_sort_array(size)\n    Back_sorted = get_ind_sort_array(size, False)\n    random_time = measure_time(lambda : sort_func(Random))\n    sorted_time = measure_time(lambda : sort_func(Sorted))\n    back_sorted_time = measure_time(lambda : sort_func(Back_sorted))\n    return [sorted_time, random_time, back_sorted_time]\n\n```", "choosed_example_idx": [7, 3, 5, 2, 8, 0, 6, 4, 9], "prompt": "Function: ind_test\n\nWrite a function that generates the output from the input.\nInput: dict(size=25, sort_func=(lambda x: x.sort(key=lambda y: y % 2))), Output: \"<class 'NameError'>: name 'get_random_ind_array' is not defined\"\nInput: dict(size=-5, sort_func=sorted), Output: \"None\"\nInput: dict(size=30, sort_func=(lambda x: x.sort(reverse=True))), Output: \"<class 'NameError'>: name 'get_random_ind_array' is not defined\"\nInput: dict(size=20, sort_func=(lambda x: x.sort())), Output: \"<class 'NameError'>: name 'get_random_ind_array' is not defined\"\nInput: dict(size=35, sort_func=(lambda x: x.sort(reverse=True))), Output: \"<class 'NameError'>: name 'get_random_ind_array' is not defined\"\nInput: dict(size=10, sort_func=sorted), Output: \"<class 'NameError'>: name 'get_random_ind_array' is not defined\"\nInput: dict(size=0, sort_func=sorted), Output: \"<class 'NameError'>: name 'get_random_ind_array' is not defined\"\nInput: dict(size=15, sort_func=None), Output: \"['Sorted', 'Random', 'Back Sorted']\"\nInput: dict(size=None, sort_func=None), Output: \"['Sorted', 'Random', 'Back Sorted']\"\n\n", "id": "453251d2f4bac73d3d3d5bbce1bbe578b9d42790_0"}
{"example_str": "examples = [\n    dict(content={'apple': 'fruit\\n'}, predicted='apple'),\n    dict(content={'hello': 'world\\n'}, predicted='hello'),\n    dict(content={'a': 'b\\n', 'c': 'd\\n'}, predicted='a'),\n    dict(content={'foo': 'bar\\n', 'baz': 'qux\\n'}, predicted='foo'),\n    dict(content={'1': 'one\\n', '2': 'two\\n'}, predicted='1'),\n    dict(content={'x': 'y\\n', 'z': 'w\\n'}, predicted='x'),\n    dict(content={'key': 'value\\n'}, predicted='key'),\n    dict(content={'python': 'programming language\\n'}, predicted='python'),\n    dict(content={'java': 'programming language\\n'}, predicted='java'),\n    dict(content={'c++': 'programming language\\n'}, predicted='c++'),\n]\nexamples += [\n    dict(content={'apple': 'fruit\\n', 'banana': 'yellow fruit\\n'}, predicted='apple'),\n    dict(content={'car': 'vehicle\\n', 'bike': 'two-wheeler\\n'}, predicted='bike'),\n    dict(content={'python': 'programming language\\n', 'java': 'coffee\\n'}, predicted='python'),\n    dict(content={'earth': 'planet\\n', 'mars': 'red planet\\n'}, predicted='mars'),\n    dict(content={'dog': 'animal\\n', 'cat': 'pet\\n'}, predicted='cat'),\n    dict(content={'rose': 'flower\\n', 'tulip': 'bulb flower\\n'}, predicted='rose'),\n    dict(content={'gold': 'metal\\n', 'silver': 'also metal\\n'}, predicted='silver'),\n    dict(content={'math': 'subject\\n', 'history': 'study of past\\n'}, predicted='history'),\n    dict(content={'sun': 'star\\n', 'moon': 'satellite\\n'}, predicted='moon'),\n    dict(content={'salad': 'healthy food\\n', 'burger': 'fast food\\n'}, predicted='burger')\n]\nexamples += [\n    dict(content={'apple': 'fruit\\n', 'banana': 'fruit\\n'}, predicted='apple'),\n    dict(content={'car': 'vehicle\\n', 'bike': 'vehicle\\n'}, predicted='bike'),\n    dict(content={'python': 'programming language\\n', 'java': 'programming language\\n'}, predicted='python'),\n    dict(content={'rose': 'flower\\n', 'tulip': 'flower\\n'}, predicted='tulip'),\n    dict(content={'dog': 'animal\\n', 'cat': 'animal\\n'}, predicted='dog'),\n    dict(content={'blue': 'color\\n', 'red': 'color\\n'}, predicted='red'),\n    dict(content={'piano': 'instrument\\n', 'guitar': 'instrument\\n'}, predicted='guitar'),\n    dict(content={'earth': 'planet\\n', 'mars': 'planet\\n'}, predicted='mars'),\n    dict(content={'sugar': 'sweet\\n', 'salt': 'salty\\n'}, predicted='salt'),\n    dict(content={'monday': 'weekday\\n', 'sunday': 'weekend\\n'}, predicted='sunday')\n]", "code": "def getLabel(content, predicted):\n    if predicted in content:\n        label = content[predicted]\n        label = label.strip('\\n')\n        return label\n", "func_name": "getLabel", "exec_status": true, "example_inputs": ["\"{'content': {'apple': 'fruit\\\\n'}, 'predicted': 'apple'}\"", "\"{'content': {'hello': 'world\\\\n'}, 'predicted': 'hello'}\"", "\"{'content': {'a': 'b\\\\n', 'c': 'd\\\\n'}, 'predicted': 'a'}\"", "\"{'content': {'foo': 'bar\\\\n', 'baz': 'qux\\\\n'}, 'predicted': 'foo'}\"", "\"{'content': {'1': 'one\\\\n', '2': 'two\\\\n'}, 'predicted': '1'}\"", "\"{'content': {'x': 'y\\\\n', 'z': 'w\\\\n'}, 'predicted': 'x'}\"", "\"{'content': {'key': 'value\\\\n'}, 'predicted': 'key'}\"", "\"{'content': {'python': 'programming language\\\\n'}, 'predicted': 'python'}\"", "\"{'content': {'java': 'programming language\\\\n'}, 'predicted': 'java'}\"", "\"{'content': {'c++': 'programming language\\\\n'}, 'predicted': 'c++'}\""], "example_outputs": [{"return": "\"'fruit'\""}, {"return": "\"'world'\""}, {"return": "\"'b'\""}, {"return": "\"'bar'\""}, {"return": "\"'one'\""}, {"return": "\"'y'\""}, {"return": "\"'value'\""}, {"return": "\"'programming language'\""}, {"return": "\"'programming language'\""}, {"return": "\"'programming language'\""}, {"return": "\"'fruit'\""}, {"return": "\"'two-wheeler'\""}, {"return": "\"'programming language'\""}, {"return": "\"'red planet'\""}, {"return": "\"'pet'\""}, {"return": "\"'flower'\""}, {"return": "\"'also metal'\""}, {"return": "\"'study of past'\""}, {"return": "\"'satellite'\""}, {"return": "\"'fast food'\""}, {"return": "\"'fruit'\""}, {"return": "\"'vehicle'\""}, {"return": "\"'programming language'\""}, {"return": "\"'flower'\""}, {"return": "\"'animal'\""}, {"return": "\"'color'\""}, {"return": "\"'instrument'\""}, {"return": "\"'planet'\""}, {"return": "\"'salty'\""}, {"return": "\"'weekend'\""}], "parsed_inputs": [[["content", "{'apple': 'fruit\\n'}"], ["predicted", "\"apple\""]], [["content", "{'hello': 'world\\n'}"], ["predicted", "\"hello\""]], [["content", "{'a': 'b\\n', 'c': 'd\\n'}"], ["predicted", "\"a\""]], [["content", "{'foo': 'bar\\n', 'baz': 'qux\\n'}"], ["predicted", "\"foo\""]], [["content", "{'1': 'one\\n', '2': 'two\\n'}"], ["predicted", "\"1\""]], [["content", "{'x': 'y\\n', 'z': 'w\\n'}"], ["predicted", "\"x\""]], [["content", "{'key': 'value\\n'}"], ["predicted", "\"key\""]], [["content", "{'python': 'programming language\\n'}"], ["predicted", "\"python\""]], [["content", "{'java': 'programming language\\n'}"], ["predicted", "\"java\""]], [["content", "{'c++': 'programming language\\n'}"], ["predicted", "\"c++\""]]], "exec_code": "def getLabel(content, predicted):\n    if predicted in content:\n        label = content[predicted]\n        label = label.strip('\\n')\n        return label\n", "output": "The function is:\n\n```python\ndef getLabel(content, predicted):\n    if predicted in content:\n        label = content[predicted]\n        label = label.strip('\\n')\n        return label\n\n```", "choosed_example_idx": [4, 0, 1, 6, 2, 3, 5], "prompt": "Function: getLabel\n\n\nWrite a function that generates the output from the input.\n\nInput: dict(content={'1': 'one\\n', '2': 'two\\n'}, predicted=\"1\"), Output: \"'one'\"\nInput: dict(content={'apple': 'fruit\\n'}, predicted=\"apple\"), Output: \"'fruit'\"\nInput: dict(content={'hello': 'world\\n'}, predicted=\"hello\"), Output: \"'world'\"\nInput: dict(content={'key': 'value\\n'}, predicted=\"key\"), Output: \"'value'\"\nInput: dict(content={'a': 'b\\n', 'c': 'd\\n'}, predicted=\"a\"), Output: \"'b'\"\nInput: dict(content={'foo': 'bar\\n', 'baz': 'qux\\n'}, predicted=\"foo\"), Output: \"'bar'\"\nInput: dict(content={'x': 'y\\n', 'z': 'w\\n'}, predicted=\"x\"), Output: \"'y'\"\n\n\n", "id": "c926234419dd00479f794d088d8026f8490b827f_0"}
{"example_str": "examples = [\n    dict(s='prefixing'),  # returns 'fixing'\n    dict(s='running'),  # returns 'run'\n    dict(s='teachers'),  # returns 'teach'\n    dict(s='bigger'),  # returns 'big'\n    dict(s='bases'),  # returns 'bas'\n    dict(s='cats'),  # returns 'cat'\n    dict(s='antique'),  # returns 'ique'\n    dict(s='strengthen'),  # returns 'strengt'\n    dict(s='jumping'),  # returns 'jump'\n    dict(s='hello'),  # returns 'hello' (no change)\n]\nexamples += [\n    dict(s=\"preheat\"),      # Prefix 'pre', expected output: \"heat\"\n    dict(s=\"running\"),      # Suffix 'ing', expected output: \"run\"\n    dict(s=\"players\"),      # Suffix 'ers', expected output: \"play\"\n    dict(s=\"teacher\"),      # Suffix 'er', expected output: \"teach\"\n    dict(s=\"houses\"),       # Suffix 'es', expected output: \"house\"\n    dict(s=\"cats\"),         # Suffix 's', expected output: \"cat\"\n    dict(s=\"anticlock\"),    # Prefix 'anti', expected output: \"clock\"\n    dict(s=\"soften\"),       # Suffix 'en', expected output: \"soft\"\n    dict(s=\"book\"),         # No matching condition, expected output: \"book\"\n    dict(s=\"prearrange\"),   # Prefix 'pre', expected output: \"arrange\"\n]\nexamples += [\n    dict(s='preheat'),    # Expected to remove 'pre' and return 'heat'\n    dict(s='running'),    # Expected to remove 'ing' and return 'run'\n    dict(s='players'),    # Expected to remove 'ers' and return 'play'\n    dict(s='teacher'),    # Expected to remove 'er' and return 'teach'\n    dict(s='horses'),     # Expected to remove 'es' and return 'hors'\n    dict(s='cats'),       # Expected to remove 's' and return 'cat'\n    dict(s='anticlimax'), # Expected to remove 'anti' and return 'climax'\n    dict(s='soften'),     # Expected to remove 'en' and return 'soft'\n    dict(s='book'),       # No prefix or suffix match, returns 'book'\n    dict(s='prejudge'),   # Expected to remove 'pre' and return 'judge'\n]", "code": "def stem(s):\n    \"\"\" Takes in 1-word string 's' and returns the stem of that string \"\"\"\n    if s[:3] == 'pre':\n        return s[3:]\n    elif s[-3:] == 'ing':\n        return s[:-3]\n    elif s[-3:] == 'ers':\n        return s[:-3]\n    elif s[-2:] == 'er':\n        return s[:-2]\n    elif s[-2:] == 'es':\n        return s[:-2]\n    elif s[-1] == 's':\n        return s[:-1]\n    elif s[:3] == 'anti':\n        return s[4:]\n    elif s[-2:] == 'en':\n        return s[:-2]\n    else:\n        return s\n", "func_name": "stem", "exec_status": true, "example_inputs": ["\"{'s': 'prefixing'}\"", "\"{'s': 'running'}\"", "\"{'s': 'teachers'}\"", "\"{'s': 'bigger'}\"", "\"{'s': 'bases'}\"", "\"{'s': 'cats'}\"", "\"{'s': 'antique'}\"", "\"{'s': 'strengthen'}\"", "\"{'s': 'jumping'}\"", "\"{'s': 'hello'}\""], "example_outputs": [{"return": "\"'fixing'\""}, {"return": "\"'runn'\""}, {"return": "\"'teach'\""}, {"return": "\"'bigg'\""}, {"return": "\"'bas'\""}, {"return": "\"'cat'\""}, {"return": "\"'antique'\""}, {"return": "\"'strength'\""}, {"return": "\"'jump'\""}, {"return": "\"'hello'\""}, {"return": "\"'heat'\""}, {"return": "\"'runn'\""}, {"return": "\"'play'\""}, {"return": "\"'teach'\""}, {"return": "\"'hous'\""}, {"return": "\"'cat'\""}, {"return": "\"'anticlock'\""}, {"return": "\"'soft'\""}, {"return": "\"'book'\""}, {"return": "\"'arrange'\""}, {"return": "\"'heat'\""}, {"return": "\"'runn'\""}, {"return": "\"'play'\""}, {"return": "\"'teach'\""}, {"return": "\"'hors'\""}, {"return": "\"'cat'\""}, {"return": "\"'anticlimax'\""}, {"return": "\"'soft'\""}, {"return": "\"'book'\""}, {"return": "\"'judge'\""}], "parsed_inputs": [[["s", "\"prefixing\""]], [["s", "\"running\""]], [["s", "\"teachers\""]], [["s", "\"bigger\""]], [["s", "\"bases\""]], [["s", "\"cats\""]], [["s", "\"antique\""]], [["s", "\"strengthen\""]], [["s", "\"jumping\""]], [["s", "\"hello\""]]], "exec_code": "def stem(s):\n    \"\"\" Takes in 1-word string 's' and returns the stem of that string \"\"\"\n    if s[:3] == 'pre':\n        return s[3:]\n    elif s[-3:] == 'ing':\n        return s[:-3]\n    elif s[-3:] == 'ers':\n        return s[:-3]\n    elif s[-2:] == 'er':\n        return s[:-2]\n    elif s[-2:] == 'es':\n        return s[:-2]\n    elif s[-1] == 's':\n        return s[:-1]\n    elif s[:3] == 'anti':\n        return s[4:]\n    elif s[-2:] == 'en':\n        return s[:-2]\n    else:\n        return s\n", "output": "The function is:\n\n```python\ndef stem(s):\n    \"\"\" Takes in 1-word string 's' and returns the stem of that string \"\"\"\n    if s[:3] == 'pre':\n        return s[3:]\n    elif s[-3:] == 'ing':\n        return s[:-3]\n    elif s[-3:] == 'ers':\n        return s[:-3]\n    elif s[-2:] == 'er':\n        return s[:-2]\n    elif s[-2:] == 'es':\n        return s[:-2]\n    elif s[-1] == 's':\n        return s[:-1]\n    elif s[:3] == 'anti':\n        return s[4:]\n    elif s[-2:] == 'en':\n        return s[:-2]\n    else:\n        return s\n\n```", "choosed_example_idx": [5, 7, 3, 0, 1, 2], "prompt": "Function: stem\n\nWrite a function that generates the output from the input.\n\nInput: dict(s=\"cats\"), Output: \"'cat'\"\nInput: dict(s=\"strengthen\"), Output: \"'strength'\"\nInput: dict(s=\"bigger\"), Output: \"'bigg'\"\nInput: dict(s=\"prefixing\"), Output: \"'fixing'\"\nInput: dict(s=\"running\"), Output: \"'runn'\"\nInput: dict(s=\"teachers\"), Output: \"'teach'\"\n\n", "id": "dcc6bcfce1798442d4b52847b52b52cb4f6e37b9_0"}
{"example_str": "examples = [\n    dict(text=\"Hello World\"),\n    dict(text=[\"Hello\", \"World\"]),\n    dict(text=(\"Hello\", \"World\")),\n    dict(text=[\"a\", \"b\", \"c\", \"d\", \"e\"]),\n    dict(text=(\"1\", \"2\", \"3\", \"4\", \"5\")),\n    dict(text=[\"This\", \"is\", \"a\", \"test\"]),\n    dict(text=(\"apple\", \"banana\", \"cherry\")),\n    dict(text=[\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]),\n    dict(text=(\"orange\", \"grape\", \"kiwi\")),\n    dict(text=[\"Python\", \"is\", \"fun\"]),\n]\nexamples += [\n    dict(text=[\"hello\", \"world\"]),\n    dict(text=[\"python\", \"coding\", \"is\", \"fun\"]),\n    dict(text=[\"123\", \"456\", \"789\"]),\n    dict(text=[\"single\"]),\n    dict(text=[\"multiple\", \"words\", \"in\", \"a\", \"single\", \"call\"]),\n    dict(text=[\"\", \"empty\", \"string\"]),\n    dict(text=[\"special\", \"chars\", \"!@#\", \"$%^\", \"&*()\"]),\n    dict(text=[\"long\", \"string\" * 10]),\n    dict(text=[\"unicode\", \"😊\", \"🚀\"]),\n    dict(text=[\"mixed\", \"123\", \"types\", \"True\"])\n]\nexamples += [\n    dict(text=[\"Hello\", \"world\"]),\n    dict(text=[\"Python\", \"is\", \"fun\"]),\n    dict(text=[\"Join\", \"the\", \"strings\"]),\n    dict(text=[\"single\"]),\n    dict(text=[\"multiple\", \"words\", \"in\", \"one\", \"sentence\"]),\n    dict(text=[\"123\", \"456\"]),\n    dict(text=[\"\", \"empty\", \"strings\"]),\n    dict(text=[\"special\", \"@#$%\", \"characters\"]),\n    dict(text=[\"new\", \"line\", \"characters\", \"\\n\"]),\n    dict(text=[\"tab\", \"\\t\", \"characters\"])\n]", "code": "def md5Hashing(text):\n    return ' '.join(text)\n", "func_name": "md5Hashing", "exec_status": true, "example_inputs": ["\"{'text': 'Hello World'}\"", "\"{'text': ['Hello', 'World']}\"", "\"{'text': ('Hello', 'World')}\"", "\"{'text': ['a', 'b', 'c', 'd', 'e']}\"", "\"{'text': ('1', '2', '3', '4', '5')}\"", "\"{'text': ['This', 'is', 'a', 'test']}\"", "\"{'text': ('apple', 'banana', 'cherry')}\"", "\"{'text': ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']}\"", "\"{'text': ('orange', 'grape', 'kiwi')}\"", "\"{'text': ['Python', 'is', 'fun']}\""], "example_outputs": [{"return": "\"'H e l l o   W o r l d'\""}, {"return": "\"'Hello World'\""}, {"return": "\"'Hello World'\""}, {"return": "\"'a b c d e'\""}, {"return": "\"'1 2 3 4 5'\""}, {"return": "\"'This is a test'\""}, {"return": "\"'apple banana cherry'\""}, {"return": "\"'1 2 3 4 5 6 7 8 9 10'\""}, {"return": "\"'orange grape kiwi'\""}, {"return": "\"'Python is fun'\""}, {"return": "\"'hello world'\""}, {"return": "\"'python coding is fun'\""}, {"return": "\"'123 456 789'\""}, {"return": "\"'single'\""}, {"return": "\"'multiple words in a single call'\""}, {"return": "\"' empty string'\""}, {"return": "\"'special chars !@# $%^ &*()'\""}, {"return": "\"'long stringstringstringstringstringstringstringstringstringstring'\""}, {"return": "\"'unicode \\ud83d\\ude0a \\ud83d\\ude80'\""}, {"return": "\"'mixed 123 types True'\""}, {"return": "\"'Hello world'\""}, {"return": "\"'Python is fun'\""}, {"return": "\"'Join the strings'\""}, {"return": "\"'single'\""}, {"return": "\"'multiple words in one sentence'\""}, {"return": "\"'123 456'\""}, {"return": "\"' empty strings'\""}, {"return": "\"'special @#$% characters'\""}, {"return": "\"'new line characters \\\\n'\""}, {"return": "\"'tab \\\\t characters'\""}], "parsed_inputs": [[["text", "\"Hello World\""]], [["text", "['Hello', 'World']"]], [["text", "('Hello', 'World')"]], [["text", "['a', 'b', 'c', 'd', 'e']"]], [["text", "('1', '2', '3', '4', '5')"]], [["text", "['This', 'is', 'a', 'test']"]], [["text", "('apple', 'banana', 'cherry')"]], [["text", "['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']"]], [["text", "('orange', 'grape', 'kiwi')"]], [["text", "['Python', 'is', 'fun']"]]], "exec_code": "def md5Hashing(text):\n    return ' '.join(text)\n", "output": "The function is:\n\n```python\ndef md5Hashing(text):\n    return ' '.join(text)\n\n```", "choosed_example_idx": [8, 3, 2, 9], "prompt": "Write a function that generates the output from the input.\n\nInput: dict(text=('orange', 'grape', 'kiwi')), Output: \"'orange grape kiwi'\"\nInput: dict(text=['a', 'b', 'c', 'd', 'e']), Output: \"'a b c d e'\"\nInput: dict(text=('Hello', 'World')), Output: \"'Hello World'\"\nInput: dict(text=['Python', 'is', 'fun']), Output: \"'Python is fun'\"\n\nFunction: md5Hashing\n", "id": "1ee690b1c3cfb0a7d009ff66dd1265dad2d9fc1c_0"}
{"example_str": "examples = [\n    dict(ind={'a': 'x', 'b': 'y', 'c': 'z'}),\n    dict(ind={'a': 'x', 'b': 'x', 'c': 'z'}),\n    dict(ind={'a': 'x', 'b': 'y', 'c': 'x'}),\n    dict(ind={'a': 'x', 'b': 'x', 'c': 'x'}),\n    dict(ind={'a': 1, 'b': 2, 'c': 3}),\n    dict(ind={'a': 1, 'b': 1, 'c': 3}),\n    dict(ind={'a': 1, 'b': 2, 'c': 1}),\n    dict(ind={'a': 1, 'b': 1, 'c': 1}),\n    dict(ind={'a': 'apple', 'b': 'banana', 'c': 'cherry'}),\n    dict(ind={'a': 'apple', 'b': 'apple', 'c': 'cherry'}),\n]\nexamples += [\n    dict(ind={}),  # Empty dictionary\n    dict(ind={'a': 1}),  # Single key-value pair\n    dict(ind={'a': 1, 'b': 2}),  # Two different values\n    dict(ind={'a': 1, 'b': 1}),  # Same values, should return empty list\n    dict(ind={'a': 1, 'b': 2, 'c': 3}),  # All unique values\n    dict(ind={'a': 1, 'b': 2, 'c': 2}),  # One value repeated\n    dict(ind={'a': 'apple', 'b': 'banana', 'c': 'carrot'}),  # String values\n    dict(ind={'a': 1, 'b': 1, 'c': 1}),  # All values the same\n    dict(ind={'a': 1, 'b': 2, 'c': 1, 'd': 3}),  # Multiple repeats\n    dict(ind={'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5})  # Five unique values\n]\nexamples += [\n    dict(ind={'key1': 'apple', 'key2': 'banana', 'key3': 'apple'}),\n    dict(ind={'a': 1, 'b': 2, 'c': 3}),\n    dict(ind={'first': 'value', 'second': 'value', 'third': 'unique'}),\n    dict(ind={'x': 10, 'y': 20, 'z': 10, 'w': 30}),\n    dict(ind={'one': 'one', 'two': 'two', 'three': 'three'}),\n    dict(ind={'alpha': 'beta', 'beta': 'gamma', 'gamma': 'delta', 'delta': 'beta'}),\n    dict(ind={'jan': 'winter', 'feb': 'winter', 'mar': 'spring'}),\n    dict(ind={'cat': 'animal', 'dog': 'animal', 'bird': 'animal'}),\n    dict(ind={'red': 'color', 'blue': 'color', 'green': 'uniqueColor'}),\n    dict(ind={'apple': 5, 'banana': 5, 'cherry': 10})\n]", "code": "def test_dir(ind):\n    tmptup = []\n    nametup = [ind[k1] for k1 in ind.keys()]\n    for gn in set(nametup):\n        if nametup.count(gn) == 1:\n            tmptup.append(gn)\n        else:\n            continue\n    return tmptup\n", "func_name": "test_dir", "exec_status": true, "example_inputs": ["\"{'ind': {'a': 'x', 'b': 'y', 'c': 'z'}}\"", "\"{'ind': {'a': 'x', 'b': 'x', 'c': 'z'}}\"", "\"{'ind': {'a': 'x', 'b': 'y', 'c': 'x'}}\"", "\"{'ind': {'a': 'x', 'b': 'x', 'c': 'x'}}\"", "\"{'ind': {'a': 1, 'b': 2, 'c': 3}}\"", "\"{'ind': {'a': 1, 'b': 1, 'c': 3}}\"", "\"{'ind': {'a': 1, 'b': 2, 'c': 1}}\"", "\"{'ind': {'a': 1, 'b': 1, 'c': 1}}\"", "\"{'ind': {'a': 'apple', 'b': 'banana', 'c': 'cherry'}}\"", "\"{'ind': {'a': 'apple', 'b': 'apple', 'c': 'cherry'}}\""], "example_outputs": [{"return": "\"['z', 'x', 'y']\""}, {"return": "\"['z']\""}, {"return": "\"['y']\""}, {"return": "\"[]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[3]\""}, {"return": "\"[2]\""}, {"return": "\"[]\""}, {"return": "\"['banana', 'cherry', 'apple']\""}, {"return": "\"['cherry']\""}, {"return": "\"[]\""}, {"return": "\"[1]\""}, {"return": "\"[1, 2]\""}, {"return": "\"[]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[1]\""}, {"return": "\"['apple', 'carrot', 'banana']\""}, {"return": "\"[]\""}, {"return": "\"[2, 3]\""}, {"return": "\"[1, 2, 3, 4, 5]\""}, {"return": "\"['banana']\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"['unique']\""}, {"return": "\"[20, 30]\""}, {"return": "\"['one', 'two', 'three']\""}, {"return": "\"['delta', 'gamma']\""}, {"return": "\"['spring']\""}, {"return": "\"[]\""}, {"return": "\"['uniqueColor']\""}, {"return": "\"[10]\""}], "parsed_inputs": [[["ind", "{'a': 'x', 'b': 'y', 'c': 'z'}"]], [["ind", "{'a': 'x', 'b': 'x', 'c': 'z'}"]], [["ind", "{'a': 'x', 'b': 'y', 'c': 'x'}"]], [["ind", "{'a': 'x', 'b': 'x', 'c': 'x'}"]], [["ind", "{'a': 1, 'b': 2, 'c': 3}"]], [["ind", "{'a': 1, 'b': 1, 'c': 3}"]], [["ind", "{'a': 1, 'b': 2, 'c': 1}"]], [["ind", "{'a': 1, 'b': 1, 'c': 1}"]], [["ind", "{'a': 'apple', 'b': 'banana', 'c': 'cherry'}"]], [["ind", "{'a': 'apple', 'b': 'apple', 'c': 'cherry'}"]]], "exec_code": "def test_dir(ind):\n    tmptup = []\n    nametup = [ind[k1] for k1 in ind.keys()]\n    for gn in set(nametup):\n        if nametup.count(gn) == 1:\n            tmptup.append(gn)\n        else:\n            continue\n    return tmptup\n", "output": "The function is:\n\n```python\ndef test_dir(ind):\n    tmptup = []\n    nametup = [ind[k1] for k1 in ind.keys()]\n    for gn in set(nametup):\n        if nametup.count(gn) == 1:\n            tmptup.append(gn)\n        else:\n            continue\n    return tmptup\n\n```", "choosed_example_idx": [9, 8, 6, 2], "prompt": "Input: dict(ind={'a': 'apple', 'b': 'apple', 'c': 'cherry'}), Output: \"['cherry']\"\nInput: dict(ind={'a': 'apple', 'b': 'banana', 'c': 'cherry'}), Output: \"['banana', 'cherry', 'apple']\"\nInput: dict(ind={'a': 1, 'b': 2, 'c': 1}), Output: \"[2]\"\nInput: dict(ind={'a': 'x', 'b': 'y', 'c': 'x'}), Output: \"['y']\"\n\n\nWrite a function that generates the output from the input.\n\n\nFunction: test_dir\n", "id": "35fe04276c5b1bf289c881b48012c3c72bc8239d_0"}
{"example_str": "examples = [\n    dict(task=(lambda x: x**2, 4)),  # returns 16\n    dict(task=(sum, [1, 2, 3, 4, 5])),  # returns 15\n    dict(task=(len, \"hello\")),  # returns 5\n    dict(task=(max, [1, 2, 3, 4, 5])),  # returns 5\n    dict(task=(min, [1, 2, 3, 4, 5])),  # returns 1\n    dict(task=(str.upper, \"hello\")),  # returns \"HELLO\"\n    dict(task=(int, \"10\", 2)),  # returns 2\n    dict(task=(float, \"3.14\")),  # returns 3.14\n    dict(task=(list, \"hello\")),  # returns [\"h\", \"e\", \"l\", \"l\", \"o\"]\n    dict(task=(chr, 65)),  # returns \"A\"\n]\nexamples += [\n    dict(task=(sum, [1, 2, 3])),  # summing numbers in a list\n    dict(task=(max, 1, 2, 3)),  # finding the maximum of given numbers\n    dict(task=(min, 5, 3, 9)),  # finding the minimum of given numbers\n    dict(task=(pow, 2, 3)),  # raising 2 to the power of 3\n    dict(task=(len, \"hello\")),  # getting the length of a string\n    dict(task=(sorted, [3, 1, 2])),  # sorting a list\n    dict(task=(str.upper, \"hello\")),  # converting a string to uppercase\n    dict(task=(int, \"100\")),  # converting a string to an integer\n    dict(task=(type, 123)),  # getting the type of an integer\n    dict(task=(print, \"Hello, world!\"))  # printing a string\n]\nexamples += [\n    dict(task=(len, \"Hello\")),  # len(\"Hello\") -> 5\n    dict(task=(sum, [1, 2, 3])),  # sum([1, 2, 3]) -> 6\n    dict(task=(max, 1, 2, 3)),  # max(1, 2, 3) -> 3\n    dict(task=(min, [10, 20, 30])),  # min([10, 20, 30]) -> 10\n    dict(task=(sorted, [3, 1, 2])),  # sorted([3, 1, 2]) -> [1, 2, 3]\n    dict(task=(str.upper, \"hello\")),  # \"hello\".upper() -> \"HELLO\"\n    dict(task=(int, \"123\")),  # int(\"123\") -> 123\n    dict(task=(type, 123)),  # type(123) -> <class 'int'>\n    dict(task=(print, \"Hello, world!\")),  # print(\"Hello, world!\") -> None (prints \"Hello, world!\")\n    dict(task=(round, 3.14159, 2)),  # round(3.14159, 2) -> 3.14\n]", "code": "def calculate(task):\n    return task[0](*task[1:])\n", "func_name": "calculate", "exec_status": true, "example_inputs": ["\"{'task': (<function <lambda> at 0x7f89b6acaa60>, 4)}\"", "\"{'task': (<built-in function sum>, [1, 2, 3, 4, 5])}\"", "\"{'task': (<built-in function len>, 'hello')}\"", "\"{'task': (<built-in function max>, [1, 2, 3, 4, 5])}\"", "\"{'task': (<built-in function min>, [1, 2, 3, 4, 5])}\"", "\"{'task': (<method 'upper' of 'str' objects>, 'hello')}\"", "\"{'task': (<class 'int'>, '10', 2)}\"", "\"{'task': (<class 'float'>, '3.14')}\"", "\"{'task': (<class 'list'>, 'hello')}\"", "\"{'task': (<built-in function chr>, 65)}\""], "example_outputs": [{"return": "\"16\""}, {"return": "\"15\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"1\""}, {"return": "\"'HELLO'\""}, {"return": "\"2\""}, {"return": "\"3.14\""}, {"return": "\"['h', 'e', 'l', 'l', 'o']\""}, {"return": "\"'A'\""}, {"return": "\"6\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"8\""}, {"return": "\"5\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"'HELLO'\""}, {"return": "\"100\""}, {"return": "\"<class 'int'>\""}, {"return": "\"None\""}, {"return": "\"5\""}, {"return": "\"6\""}, {"return": "\"3\""}, {"return": "\"10\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"'HELLO'\""}, {"return": "\"123\""}, {"return": "\"<class 'int'>\""}, {"return": "\"None\""}, {"return": "\"3.14\""}], "parsed_inputs": [[["task", "(lambda x: x ** 2, 4)"]], [["task", "(sum, [1, 2, 3, 4, 5])"]], [["task", "(len, 'hello')"]], [["task", "(max, [1, 2, 3, 4, 5])"]], [["task", "(min, [1, 2, 3, 4, 5])"]], [["task", "(str.upper, 'hello')"]], [["task", "(int, '10', 2)"]], [["task", "(float, '3.14')"]], [["task", "(list, 'hello')"]], [["task", "(chr, 65)"]]], "exec_code": "def calculate(task):\n    return task[0](*task[1:])\n", "output": "The function is:\n\n```python\ndef calculate(task):\n    return task[0](*task[1:])\n\n```", "choosed_example_idx": [5, 9, 0, 2, 4, 3, 1, 6, 7, 8], "prompt": "Function: calculate\n\nInput: dict(task=(str.upper, 'hello')), Output: \"'HELLO'\"\nInput: dict(task=(chr, 65)), Output: \"'A'\"\nInput: dict(task=(lambda x: x ** 2, 4)), Output: \"16\"\nInput: dict(task=(len, 'hello')), Output: \"5\"\nInput: dict(task=(min, [1, 2, 3, 4, 5])), Output: \"1\"\nInput: dict(task=(max, [1, 2, 3, 4, 5])), Output: \"5\"\nInput: dict(task=(sum, [1, 2, 3, 4, 5])), Output: \"15\"\nInput: dict(task=(int, '10', 2)), Output: \"2\"\nInput: dict(task=(float, '3.14')), Output: \"3.14\"\nInput: dict(task=(list, 'hello')), Output: \"['h', 'e', 'l', 'l', 'o']\"\n\n\nWrite a function that generates the output from the input.\n", "id": "caeb484eb65e3504a12441a3b92cdc47ef45e8de_0"}
{"example_str": "examples = [\n    dict(liste_amis=[(\"Alice\", \"Bob\"), (\"Alice\", \"Charlie\")]),\n    dict(liste_amis=[(\"John\", \"Mary\"), (\"John\", \"David\"), (\"Mary\", \"David\")]),\n    dict(liste_amis=[(\"Emma\", \"Oliver\"), (\"Oliver\", \"Emma\")]),\n    dict(liste_amis=[(\"Michael\", \"Sophia\"), (\"Sophia\", \"Michael\"), (\"Michael\", \"Olivia\")]),\n    dict(liste_amis=[]),\n    dict(liste_amis=[(\"Ava\", \"Isabella\")]),\n    dict(liste_amis=[(\"Julia\", \"Mia\"), (\"Mia\", \"Julia\"), (\"Julia\", \"Eva\")]),\n    dict(liste_amis=[(\"Benjamin\", \"Lucas\"), (\"Lucas\", \"Benjamin\"), (\"Benjamin\", \"Alexander\")]),\n    dict(liste_amis=[(\"Hannah\", \"Abigail\"), (\"Abigail\", \"Hannah\"), (\"Hannah\", \"Emily\")]),\n    dict(liste_amis=[(\"Logan\", \"William\"), (\"William\", \"Logan\"), (\"Logan\", \"James\")]),\n]\nexamples += [\n    dict(liste_amis=[(\"Alice\", \"Bob\"), (\"Bob\", \"Charlie\"), (\"Alice\", \"Charlie\")]),\n    dict(liste_amis=[(\"Daniel\", \"Emma\")]),\n    dict(liste_amis=[]),\n    dict(liste_amis=[(\"Fred\", \"George\"), (\"George\", \"Harry\"), (\"Harry\", \"Fred\")]),\n    dict(liste_amis=[(\"Isaac\", \"Jack\"), (\"Jack\", \"Karl\"), (\"Karl\", \"Isaac\"), (\"Isaac\", \"Liam\")]),\n    dict(liste_amis=[(\"Mia\", \"Nora\"), (\"Owen\", \"Pia\"), (\"Nora\", \"Owen\")]),\n    dict(liste_amis=[(\"Quinn\", \"Ryan\"), (\"Ryan\", \"Sara\"), (\"Sara\", \"Quinn\"), (\"Ryan\", \"Quinn\")]),\n    dict(liste_amis=[(\"Tom\", \"Uma\"), (\"Uma\", \"Vera\"), (\"Vera\", \"Tom\"), (\"Tom\", \"Vera\")]),\n    dict(liste_amis=[(\"Wendy\", \"Xavier\"), (\"Xavier\", \"Yara\"), (\"Yara\", \"Zane\"), (\"Zane\", \"Wendy\"), (\"Wendy\", \"Yara\")]),\n    dict(liste_amis=[(\"Alan\", \"Betty\"), (\"Betty\", \"Cara\"), (\"Cara\", \"Dean\"), (\"Dean\", \"Alan\"), (\"Alan\", \"Cara\")])\n]\nexamples += [\n    dict(liste_amis=[('Alice', 'Bob'), ('Bob', 'Charlie')]),\n    dict(liste_amis=[('Dave', 'Eve'), ('Eve', 'Frank'), ('Frank', 'Dave')]),\n    dict(liste_amis=[('George', 'Hannah'), ('Ian', 'Jill'), ('George', 'Ian')]),\n    dict(liste_amis=[('Karl', 'Liam'), ('Liam', 'Mia'), ('Mia', 'Nora'), ('Nora', 'Karl')]),\n    dict(liste_amis=[('Oscar', 'Pia')]),\n    dict(liste_amis=[('Quinn', 'Rachel'), ('Rachel', 'Steve'), ('Steve', 'Quinn'), ('Rachel', 'Quinn')]),\n    dict(liste_amis=[('Tom', 'Uma'), ('Uma', 'Vince'), ('Vince', 'Tom'), ('Tom', 'Uma')]),\n    dict(liste_amis=[('Wendy', 'Xander'), ('Xander', 'Yara'), ('Yara', 'Zane'), ('Zane', 'Wendy')]),\n    dict(liste_amis=[('Anna', 'Bob'), ('Bob', 'Anna')]),\n    dict(liste_amis=[('Carl', 'Dana'), ('Eli', 'Fay'), ('Gina', 'Hank'), ('Ivy', 'Jay'), ('Kurt', 'Lana')])\n]", "code": "def construction_dict_amis(liste_amis):\n    amis = {}\n    for prenom1, prenom2 in liste_amis:\n        if prenom1 not in amis:\n            amis[prenom1] = {prenom2}\n        else:\n            amis[prenom1].add(prenom2)\n        if prenom2 not in amis:\n            amis[prenom2] = set()\n    return amis\n", "func_name": "construction_dict_amis", "exec_status": true, "example_inputs": ["\"{'liste_amis': [('Alice', 'Bob'), ('Alice', 'Charlie')]}\"", "\"{'liste_amis': [('John', 'Mary'), ('John', 'David'), ('Mary', 'David')]}\"", "\"{'liste_amis': [('Emma', 'Oliver'), ('Oliver', 'Emma')]}\"", "\"{'liste_amis': [('Michael', 'Sophia'), ('Sophia', 'Michael'), ('Michael', 'Olivia')]}\"", "\"{'liste_amis': []}\"", "\"{'liste_amis': [('Ava', 'Isabella')]}\"", "\"{'liste_amis': [('Julia', 'Mia'), ('Mia', 'Julia'), ('Julia', 'Eva')]}\"", "\"{'liste_amis': [('Benjamin', 'Lucas'), ('Lucas', 'Benjamin'), ('Benjamin', 'Alexander')]}\"", "\"{'liste_amis': [('Hannah', 'Abigail'), ('Abigail', 'Hannah'), ('Hannah', 'Emily')]}\"", "\"{'liste_amis': [('Logan', 'William'), ('William', 'Logan'), ('Logan', 'James')]}\""], "example_outputs": [{"return": "\"{'Alice': {'Charlie', 'Bob'}, 'Bob': set(), 'Charlie': set()}\""}, {"return": "\"{'John': {'Mary', 'David'}, 'Mary': {'David'}, 'David': set()}\""}, {"return": "\"{'Emma': {'Oliver'}, 'Oliver': {'Emma'}}\""}, {"return": "\"{'Michael': {'Olivia', 'Sophia'}, 'Sophia': {'Michael'}, 'Olivia': set()}\""}, {"return": "\"{}\""}, {"return": "\"{'Ava': {'Isabella'}, 'Isabella': set()}\""}, {"return": "\"{'Julia': {'Mia', 'Eva'}, 'Mia': {'Julia'}, 'Eva': set()}\""}, {"return": "\"{'Benjamin': {'Alexander', 'Lucas'}, 'Lucas': {'Benjamin'}, 'Alexander': set()}\""}, {"return": "\"{'Hannah': {'Abigail', 'Emily'}, 'Abigail': {'Hannah'}, 'Emily': set()}\""}, {"return": "\"{'Logan': {'James', 'William'}, 'William': {'Logan'}, 'James': set()}\""}, {"return": "\"{'Alice': {'Charlie', 'Bob'}, 'Bob': {'Charlie'}, 'Charlie': set()}\""}, {"return": "\"{'Daniel': {'Emma'}, 'Emma': set()}\""}, {"return": "\"{}\""}, {"return": "\"{'Fred': {'George'}, 'George': {'Harry'}, 'Harry': {'Fred'}}\""}, {"return": "\"{'Isaac': {'Liam', 'Jack'}, 'Jack': {'Karl'}, 'Karl': {'Isaac'}, 'Liam': set()}\""}, {"return": "\"{'Mia': {'Nora'}, 'Nora': {'Owen'}, 'Owen': {'Pia'}, 'Pia': set()}\""}, {"return": "\"{'Quinn': {'Ryan'}, 'Ryan': {'Sara', 'Quinn'}, 'Sara': {'Quinn'}}\""}, {"return": "\"{'Tom': {'Uma', 'Vera'}, 'Uma': {'Vera'}, 'Vera': {'Tom'}}\""}, {"return": "\"{'Wendy': {'Xavier', 'Yara'}, 'Xavier': {'Yara'}, 'Yara': {'Zane'}, 'Zane': {'Wendy'}}\""}, {"return": "\"{'Alan': {'Cara', 'Betty'}, 'Betty': {'Cara'}, 'Cara': {'Dean'}, 'Dean': {'Alan'}}\""}, {"return": "\"{'Alice': {'Bob'}, 'Bob': {'Charlie'}, 'Charlie': set()}\""}, {"return": "\"{'Dave': {'Eve'}, 'Eve': {'Frank'}, 'Frank': {'Dave'}}\""}, {"return": "\"{'George': {'Hannah', 'Ian'}, 'Hannah': set(), 'Ian': {'Jill'}, 'Jill': set()}\""}, {"return": "\"{'Karl': {'Liam'}, 'Liam': {'Mia'}, 'Mia': {'Nora'}, 'Nora': {'Karl'}}\""}, {"return": "\"{'Oscar': {'Pia'}, 'Pia': set()}\""}, {"return": "\"{'Quinn': {'Rachel'}, 'Rachel': {'Steve', 'Quinn'}, 'Steve': {'Quinn'}}\""}, {"return": "\"{'Tom': {'Uma'}, 'Uma': {'Vince'}, 'Vince': {'Tom'}}\""}, {"return": "\"{'Wendy': {'Xander'}, 'Xander': {'Yara'}, 'Yara': {'Zane'}, 'Zane': {'Wendy'}}\""}, {"return": "\"{'Anna': {'Bob'}, 'Bob': {'Anna'}}\""}, {"return": "\"{'Carl': {'Dana'}, 'Dana': set(), 'Eli': {'Fay'}, 'Fay': set(), 'Gina': {'Hank'}, 'Hank': set(), 'Ivy': {'Jay'}, 'Jay': set(), 'Kurt': {'Lana'}, 'Lana': set()}\""}], "parsed_inputs": [[["liste_amis", "[('Alice', 'Bob'), ('Alice', 'Charlie')]"]], [["liste_amis", "[('John', 'Mary'), ('John', 'David'), ('Mary', 'David')]"]], [["liste_amis", "[('Emma', 'Oliver'), ('Oliver', 'Emma')]"]], [["liste_amis", "[('Michael', 'Sophia'), ('Sophia', 'Michael'), ('Michael', 'Olivia')]"]], [["liste_amis", "[]"]], [["liste_amis", "[('Ava', 'Isabella')]"]], [["liste_amis", "[('Julia', 'Mia'), ('Mia', 'Julia'), ('Julia', 'Eva')]"]], [["liste_amis", "[('Benjamin', 'Lucas'), ('Lucas', 'Benjamin'), ('Benjamin', 'Alexander')]"]], [["liste_amis", "[('Hannah', 'Abigail'), ('Abigail', 'Hannah'), ('Hannah', 'Emily')]"]], [["liste_amis", "[('Logan', 'William'), ('William', 'Logan'), ('Logan', 'James')]"]]], "exec_code": "def construction_dict_amis(liste_amis):\n    amis = {}\n    for prenom1, prenom2 in liste_amis:\n        if prenom1 not in amis:\n            amis[prenom1] = {prenom2}\n        else:\n            amis[prenom1].add(prenom2)\n        if prenom2 not in amis:\n            amis[prenom2] = set()\n    return amis\n", "output": "The function is:\n\n```python\ndef construction_dict_amis(liste_amis):\n    amis = {}\n    for prenom1, prenom2 in liste_amis:\n        if prenom1 not in amis:\n            amis[prenom1] = {prenom2}\n        else:\n            amis[prenom1].add(prenom2)\n        if prenom2 not in amis:\n            amis[prenom2] = set()\n    return amis\n\n```", "choosed_example_idx": [1, 8, 2, 7, 0, 3, 9], "prompt": "Write a function that generates the output from the input.\n\nInput: dict(liste_amis=[('John', 'Mary'), ('John', 'David'), ('Mary', 'David')]), Output: \"{'John': {'Mary', 'David'}, 'Mary': {'David'}, 'David': set()}\"\nInput: dict(liste_amis=[('Hannah', 'Abigail'), ('Abigail', 'Hannah'), ('Hannah', 'Emily')]), Output: \"{'Hannah': {'Abigail', 'Emily'}, 'Abigail': {'Hannah'}, 'Emily': set()}\"\nInput: dict(liste_amis=[('Emma', 'Oliver'), ('Oliver', 'Emma')]), Output: \"{'Emma': {'Oliver'}, 'Oliver': {'Emma'}}\"\nInput: dict(liste_amis=[('Benjamin', 'Lucas'), ('Lucas', 'Benjamin'), ('Benjamin', 'Alexander')]), Output: \"{'Benjamin': {'Alexander', 'Lucas'}, 'Lucas': {'Benjamin'}, 'Alexander': set()}\"\nInput: dict(liste_amis=[('Alice', 'Bob'), ('Alice', 'Charlie')]), Output: \"{'Alice': {'Charlie', 'Bob'}, 'Bob': set(), 'Charlie': set()}\"\nInput: dict(liste_amis=[('Michael', 'Sophia'), ('Sophia', 'Michael'), ('Michael', 'Olivia')]), Output: \"{'Michael': {'Olivia', 'Sophia'}, 'Sophia': {'Michael'}, 'Olivia': set()}\"\nInput: dict(liste_amis=[('Logan', 'William'), ('William', 'Logan'), ('Logan', 'James')]), Output: \"{'Logan': {'James', 'William'}, 'William': {'Logan'}, 'James': set()}\"\n\nFunction: construction_dict_amis\n", "id": "fac9bfb7fbf80d37bdc3ed3526ca298e4049b076_0"}
{"example_str": "examples = [\n    dict(ac_attack=10, grapple=5, hide=2),\n    dict(ac_attack=20, grapple=10, hide=5),\n    dict(ac_attack=5, grapple=2, hide=1),\n    dict(ac_attack=15, grapple=7, hide=3),\n    dict(ac_attack=30, grapple=15, hide=10),\n    dict(ac_attack=25, grapple=12, hide=8),\n    dict(ac_attack=18, grapple=9, hide=4),\n    dict(ac_attack=22, grapple=11, hide=6),\n    dict(ac_attack=35, grapple=17, hide=12),\n    dict(ac_attack=40, grapple=20, hide=15)\n]\nexamples += [\n    dict(ac_attack=1, grapple=2, hide=3),\n    dict(ac_attack=-1, grapple=0, hide=5),\n    dict(ac_attack=4, grapple=-2, hide=-3),\n    dict(ac_attack=0, grapple=0, hide=0),\n    dict(ac_attack=10, grapple=5, hide=2),\n    dict(ac_attack=-5, grapple=-5, hide=-5),\n    dict(ac_attack=3, grapple=1, hide=4),\n    dict(ac_attack=2, grapple=3, hide=1),\n    dict(ac_attack=-3, grapple=2, hide=0),\n    dict(ac_attack=1, grapple=-1, hide=2)\n]\nexamples += [\n    dict(ac_attack=1, grapple=2, hide=3),\n    dict(ac_attack=0, grapple=0, hide=0),\n    dict(ac_attack=-1, grapple=-1, hide=-1),\n    dict(ac_attack=5, grapple=5, hide=5),\n    dict(ac_attack=10, grapple=15, hide=20),\n    dict(ac_attack=-3, grapple=-2, hide=-4),\n    dict(ac_attack=7, grapple=8, hide=9),\n    dict(ac_attack=2, grapple=1, hide=3),\n    dict(ac_attack=-5, grapple=-5, hide=-5),\n    dict(ac_attack=3, grapple=4, hide=2)\n]", "code": "def get_size_mod(ac_attack, grapple, hide):\n    return [ac_attack, grapple, hide]\n", "func_name": "get_size_mod", "exec_status": true, "example_inputs": ["\"{'ac_attack': 10, 'grapple': 5, 'hide': 2}\"", "\"{'ac_attack': 20, 'grapple': 10, 'hide': 5}\"", "\"{'ac_attack': 5, 'grapple': 2, 'hide': 1}\"", "\"{'ac_attack': 15, 'grapple': 7, 'hide': 3}\"", "\"{'ac_attack': 30, 'grapple': 15, 'hide': 10}\"", "\"{'ac_attack': 25, 'grapple': 12, 'hide': 8}\"", "\"{'ac_attack': 18, 'grapple': 9, 'hide': 4}\"", "\"{'ac_attack': 22, 'grapple': 11, 'hide': 6}\"", "\"{'ac_attack': 35, 'grapple': 17, 'hide': 12}\"", "\"{'ac_attack': 40, 'grapple': 20, 'hide': 15}\""], "example_outputs": [{"return": "\"[10, 5, 2]\""}, {"return": "\"[20, 10, 5]\""}, {"return": "\"[5, 2, 1]\""}, {"return": "\"[15, 7, 3]\""}, {"return": "\"[30, 15, 10]\""}, {"return": "\"[25, 12, 8]\""}, {"return": "\"[18, 9, 4]\""}, {"return": "\"[22, 11, 6]\""}, {"return": "\"[35, 17, 12]\""}, {"return": "\"[40, 20, 15]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[-1, 0, 5]\""}, {"return": "\"[4, -2, -3]\""}, {"return": "\"[0, 0, 0]\""}, {"return": "\"[10, 5, 2]\""}, {"return": "\"[-5, -5, -5]\""}, {"return": "\"[3, 1, 4]\""}, {"return": "\"[2, 3, 1]\""}, {"return": "\"[-3, 2, 0]\""}, {"return": "\"[1, -1, 2]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[0, 0, 0]\""}, {"return": "\"[-1, -1, -1]\""}, {"return": "\"[5, 5, 5]\""}, {"return": "\"[10, 15, 20]\""}, {"return": "\"[-3, -2, -4]\""}, {"return": "\"[7, 8, 9]\""}, {"return": "\"[2, 1, 3]\""}, {"return": "\"[-5, -5, -5]\""}, {"return": "\"[3, 4, 2]\""}], "parsed_inputs": [[["ac_attack", "10"], ["grapple", "5"], ["hide", "2"]], [["ac_attack", "20"], ["grapple", "10"], ["hide", "5"]], [["ac_attack", "5"], ["grapple", "2"], ["hide", "1"]], [["ac_attack", "15"], ["grapple", "7"], ["hide", "3"]], [["ac_attack", "30"], ["grapple", "15"], ["hide", "10"]], [["ac_attack", "25"], ["grapple", "12"], ["hide", "8"]], [["ac_attack", "18"], ["grapple", "9"], ["hide", "4"]], [["ac_attack", "22"], ["grapple", "11"], ["hide", "6"]], [["ac_attack", "35"], ["grapple", "17"], ["hide", "12"]], [["ac_attack", "40"], ["grapple", "20"], ["hide", "15"]]], "exec_code": "def get_size_mod(ac_attack, grapple, hide):\n    return [ac_attack, grapple, hide]\n", "output": "The function is:\n\n```python\ndef get_size_mod(ac_attack, grapple, hide):\n    return [ac_attack, grapple, hide]\n\n```", "choosed_example_idx": [7, 0, 3, 8], "prompt": "Function: get_size_mod\nWrite a function that generates the output from the input.\nInput: dict(ac_attack=22, grapple=11, hide=6), Output: \"[22, 11, 6]\"\nInput: dict(ac_attack=10, grapple=5, hide=2), Output: \"[10, 5, 2]\"\nInput: dict(ac_attack=15, grapple=7, hide=3), Output: \"[15, 7, 3]\"\nInput: dict(ac_attack=35, grapple=17, hide=12), Output: \"[35, 17, 12]\"\n\n\n\n", "id": "c68f2b1c00a22c70b52bd16a713c902d3d0dd4dc_0"}
{"example_str": "examples = [\n    dict(root=dict(data=1, left=None, right=None)),\n    dict(root=dict(data=2, left=dict(data=1, left=None, right=None), right=None)),\n    dict(root=dict(data=3, left=dict(data=1, left=None, right=None), right=dict(data=2, left=None, right=None))),\n    dict(root=dict(data=4, left=dict(data=2, left=dict(data=1, left=None, right=None), right=None), right=dict(data=3, left=None, right=None))),\n    dict(root=dict(data=5, left=dict(data=3, left=dict(data=2, left=dict(data=1, left=None, right=None), right=None), right=None), right=dict(data=4, left=None, right=None))),\n    dict(root=dict(data=6, left=dict(data=4, left=dict(data=2, left=dict(data=1, left=None, right=None), right=None), right=dict(data=3, left=None, right=None)), right=dict(data=5, left=None, right=None))),\n    dict(root=dict(data=7, left=dict(data=5, left=dict(data=3, left=dict(data=2, left=dict(data=1, left=None, right=None), right=None), right=None), right=dict(data=4, left=None, right=None)), right=dict(data=6, left=None, right=None))),\n    dict(root=dict(data=8, left=dict(data=6, left=dict(data=4, left=dict(data=2, left=dict(data=1, left=None, right=None), right=None), right=dict(data=3, left=None, right=None)), right=dict(data=5, left=None, right=None)), right=dict(data=7, left=None, right=None))),\n    dict(root=dict(data=9, left=dict(data=7, left=dict(data=5, left=dict(data=3, left=dict(data=2, left=dict(data=1, left=None, right=None), right=None), right=None), right=dict(data=4, left=None, right=None)), right=dict(data=6, left=None, right=None)), right=dict(data=8, left=None, right=None))),\n    dict(root=None),\n]", "code": "def printInorder(root):\n    if root is None:\n        return\n    printInorder(root.left)\n    print(root.data, end=' ')\n    printInorder(root.right)\n", "func_name": "printInorder", "exec_status": true, "example_inputs": ["\"{'root': {'data': 1, 'left': None, 'right': None}}\"", "\"{'root': {'data': 2, 'left': {'data': 1, 'left': None, 'right': None}, 'right': None}}\"", "\"{'root': {'data': 3, 'left': {'data': 1, 'left': None, 'right': None}, 'right': {'data': 2, 'left': None, 'right': None}}}\"", "\"{'root': {'data': 4, 'left': {'data': 2, 'left': {'data': 1, 'left': None, 'right': None}, 'right': None}, 'right': {'data': 3, 'left': None, 'right': None}}}\"", "\"{'root': {'data': 5, 'left': {'data': 3, 'left': {'data': 2, 'left': {'data': 1, 'left': None, 'right': None}, 'right': None}, 'right': None}, 'right': {'data': 4, 'left': None, 'right': None}}}\"", "\"{'root': {'data': 6, 'left': {'data': 4, 'left': {'data': 2, 'left': {'data': 1, 'left': None, 'right': None}, 'right': None}, 'right': {'data': 3, 'left': None, 'right': None}}, 'right': {'data': 5, 'left': None, 'right': None}}}\"", "\"{'root': {'data': 7, 'left': {'data': 5, 'left': {'data': 3, 'left': {'data': 2, 'left': {'data': 1, 'left': None, 'right': None}, 'right': None}, 'right': None}, 'right': {'data': 4, 'left': None, 'right': None}}, 'right': {'data': 6, 'left': None, 'right': None}}}\"", "\"{'root': {'data': 8, 'left': {'data': 6, 'left': {'data': 4, 'left': {'data': 2, 'left': {'data': 1, 'left': None, 'right': None}, 'right': None}, 'right': {'data': 3, 'left': None, 'right': None}}, 'right': {'data': 5, 'left': None, 'right': None}}, 'right': {'data': 7, 'left': None, 'right': None}}}\"", "\"{'root': {'data': 9, 'left': {'data': 7, 'left': {'data': 5, 'left': {'data': 3, 'left': {'data': 2, 'left': {'data': 1, 'left': None, 'right': None}, 'right': None}, 'right': None}, 'right': {'data': 4, 'left': None, 'right': None}}, 'right': {'data': 6, 'left': None, 'right': None}}, 'right': {'data': 8, 'left': None, 'right': None}}}\"", "\"{'root': None}\""], "example_outputs": [{"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\""}, {"trace": "[\"{'root': None}\", \"Line 1->    if root is None:\", \"Line 2->        return\"]", "return": "\"None\""}], "parsed_inputs": [[["root", "dict(data=1, left=None, right=None)"]], [["root", "dict(data=2, left=dict(data=1, left=None, right=None), right=None)"]], [["root", "dict(data=3, left=dict(data=1, left=None, right=None), right=dict(data=2,\n    left=None, right=None))"]], [["root", "dict(data=4, left=dict(data=2, left=dict(data=1, left=None, right=None),\n    right=None), right=dict(data=3, left=None, right=None))"]], [["root", "dict(data=5, left=dict(data=3, left=dict(data=2, left=dict(data=1, left=\n    None, right=None), right=None), right=None), right=dict(data=4, left=\n    None, right=None))"]], [["root", "dict(data=6, left=dict(data=4, left=dict(data=2, left=dict(data=1, left=\n    None, right=None), right=None), right=dict(data=3, left=None, right=\n    None)), right=dict(data=5, left=None, right=None))"]], [["root", "dict(data=7, left=dict(data=5, left=dict(data=3, left=dict(data=2, left=\n    dict(data=1, left=None, right=None), right=None), right=None), right=\n    dict(data=4, left=None, right=None)), right=dict(data=6, left=None,\n    right=None))"]], [["root", "dict(data=8, left=dict(data=6, left=dict(data=4, left=dict(data=2, left=\n    dict(data=1, left=None, right=None), right=None), right=dict(data=3,\n    left=None, right=None)), right=dict(data=5, left=None, right=None)),\n    right=dict(data=7, left=None, right=None))"]], [["root", "dict(data=9, left=dict(data=7, left=dict(data=5, left=dict(data=3, left=\n    dict(data=2, left=dict(data=1, left=None, right=None), right=None),\n    right=None), right=dict(data=4, left=None, right=None)), right=dict(\n    data=6, left=None, right=None)), right=dict(data=8, left=None, right=None))"]], [["root", "None"]]], "exec_code": "def printInorder(root):\n    if root is None:\n        return\n    printInorder(root.left)\n    print(root.data, end=' ')\n    printInorder(root.right)\n", "output": "The function is:\n\n```python\ndef printInorder(root):\n    if root is None:\n        return\n    printInorder(root.left)\n    print(root.data, end=' ')\n    printInorder(root.right)\n\n```", "choosed_example_idx": [5, 0, 2, 8], "prompt": "Write a function that generates the output from the input.\nInput: dict(root=dict(data=6, left=dict(data=4, left=dict(data=2, left=dict(data=1, left=\n    None, right=None), right=None), right=dict(data=3, left=None, right=\n    None)), right=dict(data=5, left=None, right=None))), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\"\nInput: dict(root=dict(data=1, left=None, right=None)), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\"\nInput: dict(root=dict(data=3, left=dict(data=1, left=None, right=None), right=dict(data=2,\n    left=None, right=None))), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\"\nInput: dict(root=dict(data=9, left=dict(data=7, left=dict(data=5, left=dict(data=3, left=\n    dict(data=2, left=dict(data=1, left=None, right=None), right=None),\n    right=None), right=dict(data=4, left=None, right=None)), right=dict(\n    data=6, left=None, right=None)), right=dict(data=8, left=None, right=None))), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\"\n\nFunction: printInorder\n\n", "id": "43b21bb4749a6b9c7bbce1227712f6fe8ed4bb8d_0"}
{"example_str": "examples = [\n    dict(tree=None),\n    dict(tree=dict(left=None, right=None)),\n    dict(tree=dict(left=dict(left=None, right=None), right=None)),\n    dict(tree=dict(left=None, right=dict(left=None, right=None))),\n    dict(tree=dict(left=dict(left=None, right=None), right=dict(left=None, right=None))),\n    dict(tree=dict(left=dict(left=dict(left=None, right=None), right=None), right=None)),\n    dict(tree=dict(left=None, right=dict(left=dict(left=None, right=None), right=None))),\n    dict(tree=dict(left=dict(left=dict(left=None, right=None), right=dict(left=None, right=None)), right=None)),\n    dict(tree=dict(left=None, right=dict(left=dict(left=None, right=None), right=dict(left=None, right=None)))),\n    dict(tree=dict(left=dict(left=dict(left=dict(left=None, right=None), right=None), right=dict(left=None, right=None)), right=dict(left=dict(left=None, right=None), right=None))),\n]\nclass TreeNode:\n    def __init__(self, left=None, right=None):\n        self.left = left\n        self.right = right\n\n# Examples\nexamples += [\n    dict(tree=None),  # Empty tree\n    dict(tree=TreeNode()),  # Tree with one node\n    dict(tree=TreeNode(TreeNode())),  # Tree with one child\n    dict(tree=TreeNode(TreeNode(), TreeNode())),  # Tree with two children\n    dict(tree=TreeNode(TreeNode(TreeNode()))),  # Tree with two levels, one child\n    dict(tree=TreeNode(TreeNode(), TreeNode(TreeNode()))),  # Unbalanced tree\n    dict(tree=TreeNode(TreeNode(TreeNode(TreeNode())))),  # Three levels, one side\n    dict(tree=TreeNode(TreeNode(TreeNode()), TreeNode(TreeNode(TreeNode())))),  # Mixed depth\n    dict(tree=TreeNode(TreeNode(TreeNode(TreeNode())), TreeNode(TreeNode(TreeNode(TreeNode()))))),  # Deeper on right\n    dict(tree=TreeNode(TreeNode(TreeNode(TreeNode(TreeNode()))), TreeNode(TreeNode(TreeNode()))))  # Deeper on left\n]", "code": "def depth(tree):\n    if tree == None:\n        return 0\n    if tree.left == None and tree.right == None:\n        return 1\n    else:\n        depthLeft = 1 + depth(tree.left)\n        depthRight = 1 + depth(tree.right)\n        if depthLeft > depthRight:\n            return depthLeft\n        else:\n            return depthRight\n", "func_name": "depth", "exec_status": true, "example_inputs": ["\"{'tree': None}\"", "\"{'tree': {'left': None, 'right': None}}\"", "\"{'tree': {'left': {'left': None, 'right': None}, 'right': None}}\"", "\"{'tree': {'left': None, 'right': {'left': None, 'right': None}}}\"", "\"{'tree': {'left': {'left': None, 'right': None}, 'right': {'left': None, 'right': None}}}\"", "\"{'tree': {'left': {'left': {'left': None, 'right': None}, 'right': None}, 'right': None}}\"", "\"{'tree': {'left': None, 'right': {'left': {'left': None, 'right': None}, 'right': None}}}\"", "\"{'tree': {'left': {'left': {'left': None, 'right': None}, 'right': {'left': None, 'right': None}}, 'right': None}}\"", "\"{'tree': {'left': None, 'right': {'left': {'left': None, 'right': None}, 'right': {'left': None, 'right': None}}}}\"", "\"{'tree': {'left': {'left': {'left': {'left': None, 'right': None}, 'right': None}, 'right': {'left': None, 'right': None}}, 'right': {'left': {'left': None, 'right': None}, 'right': None}}}\""], "example_outputs": [{"return": "\"0\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"4\""}, {"return": "\"4\""}, {"return": "\"5\""}, {"return": "\"5\""}], "parsed_inputs": [[["tree", "None"]], [["tree", "dict(left=None, right=None)"]], [["tree", "dict(left=dict(left=None, right=None), right=None)"]], [["tree", "dict(left=None, right=dict(left=None, right=None))"]], [["tree", "dict(left=dict(left=None, right=None), right=dict(left=None, right=None))"]], [["tree", "dict(left=dict(left=dict(left=None, right=None), right=None), right=None)"]], [["tree", "dict(left=None, right=dict(left=dict(left=None, right=None), right=None))"]], [["tree", "dict(left=dict(left=dict(left=None, right=None), right=dict(left=None,\n    right=None)), right=None)"]], [["tree", "dict(left=None, right=dict(left=dict(left=None, right=None), right=dict(\n    left=None, right=None)))"]], [["tree", "dict(left=dict(left=dict(left=dict(left=None, right=None), right=None),\n    right=dict(left=None, right=None)), right=dict(left=dict(left=None,\n    right=None), right=None))"]]], "exec_code": "def depth(tree):\n    if tree == None:\n        return 0\n    if tree.left == None and tree.right == None:\n        return 1\n    else:\n        depthLeft = 1 + depth(tree.left)\n        depthRight = 1 + depth(tree.right)\n        if depthLeft > depthRight:\n            return depthLeft\n        else:\n            return depthRight\n", "output": "The function is:\n\n```python\ndef depth(tree):\n    if tree == None:\n        return 0\n    if tree.left == None and tree.right == None:\n        return 1\n    else:\n        depthLeft = 1 + depth(tree.left)\n        depthRight = 1 + depth(tree.right)\n        if depthLeft > depthRight:\n            return depthLeft\n        else:\n            return depthRight\n\n```", "choosed_example_idx": [8, 7, 3, 6, 2, 0, 4, 9, 5, 1], "prompt": "Input: dict(tree=dict(left=None, right=dict(left=dict(left=None, right=None), right=dict(\n    left=None, right=None)))), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\"\nInput: dict(tree=dict(left=dict(left=dict(left=None, right=None), right=dict(left=None,\n    right=None)), right=None)), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\"\nInput: dict(tree=dict(left=None, right=dict(left=None, right=None))), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\"\nInput: dict(tree=dict(left=None, right=dict(left=dict(left=None, right=None), right=None))), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\"\nInput: dict(tree=dict(left=dict(left=None, right=None), right=None)), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\"\nInput: dict(tree=None), Output: \"0\"\nInput: dict(tree=dict(left=dict(left=None, right=None), right=dict(left=None, right=None))), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\"\nInput: dict(tree=dict(left=dict(left=dict(left=dict(left=None, right=None), right=None),\n    right=dict(left=None, right=None)), right=dict(left=dict(left=None,\n    right=None), right=None))), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\"\nInput: dict(tree=dict(left=dict(left=dict(left=None, right=None), right=None), right=None)), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\"\nInput: dict(tree=dict(left=None, right=None)), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'left'\"\n\nFunction: depth\nWrite a function that generates the output from the input.\n\n\n", "id": "b33b8627211a69e8221f843fca89a774c46be325_0"}
{"example_str": "examples = [\n    dict(string='hello', zero='h', one='l'),\n    dict(string='abcde', zero='a', one='e'),\n    dict(string='10101', zero='1', one='0'),\n    dict(string='xyz', zero='x', one='z'),\n    dict(string='abcdefg', zero='a', one='g'),\n    dict(string='hello world', zero='h', one='w'),\n    dict(string='12345', zero='1', one='5'),\n    dict(string='abcdef', zero='a', one='f'),\n    dict(string='pqrstu', zero='p', one='u'),\n    dict(string='mnoxyz', zero='m', one='z')\n]\nexamples += [\n    dict(string=\"apple banana cherry\", zero=\"a\", one=\"e\"),\n    dict(string=\"hello world\", zero=\"l\", one=\"o\"),\n    dict(string=\"1234567890\", zero=\"1\", one=\"2\"),\n    dict(string=\"abcdefg\", zero=\"abc\", one=\"efg\"),\n    dict(string=\"mississippi\", zero=\"i\", one=\"s\"),\n    dict(string=\"foobarbaz\", zero=\"foo\", one=\"baz\"),\n    dict(string=\"case sensitive\", zero=\"s\", one=\"e\"),\n    dict(string=\"replace with binary\", zero=\" \", one=\"b\"),\n    dict(string=\"double trouble\", zero=\"ou\", one=\"bl\"),\n    dict(string=\"123 abc 456 def\", zero=\"123\", one=\"def\")\n]\nexamples += [\n    dict(string=\"apple\", zero=\"a\", one=\"p\"),\n    dict(string=\"hello\", zero=\"h\", one=\"e\"),\n    dict(string=\"world\", zero=\"w\", one=\"r\"),\n    dict(string=\"binary\", zero=\"b\", one=\"n\"),\n    dict(string=\"replace\", zero=\"r\", one=\"e\"),\n    dict(string=\"function\", zero=\"f\", one=\"u\"),\n    dict(string=\"example\", zero=\"e\", one=\"x\"),\n    dict(string=\"zeroone\", zero=\"z\", one=\"o\"),\n    dict(string=\"python\", zero=\"p\", one=\"y\"),\n    dict(string=\"argument\", zero=\"a\", one=\"g\")\n]", "code": "def replace_with_binary(string, zero, one):\n    return string.replace(zero, '0').replace(one, '1')\n", "func_name": "replace_with_binary", "exec_status": true, "example_inputs": ["\"{'string': 'hello', 'zero': 'h', 'one': 'l'}\"", "\"{'string': 'abcde', 'zero': 'a', 'one': 'e'}\"", "\"{'string': '10101', 'zero': '1', 'one': '0'}\"", "\"{'string': 'xyz', 'zero': 'x', 'one': 'z'}\"", "\"{'string': 'abcdefg', 'zero': 'a', 'one': 'g'}\"", "\"{'string': 'hello world', 'zero': 'h', 'one': 'w'}\"", "\"{'string': '12345', 'zero': '1', 'one': '5'}\"", "\"{'string': 'abcdef', 'zero': 'a', 'one': 'f'}\"", "\"{'string': 'pqrstu', 'zero': 'p', 'one': 'u'}\"", "\"{'string': 'mnoxyz', 'zero': 'm', 'one': 'z'}\""], "example_outputs": [{"return": "\"'0e11o'\""}, {"return": "\"'0bcd1'\""}, {"return": "\"'11111'\""}, {"return": "\"'0y1'\""}, {"return": "\"'0bcdef1'\""}, {"return": "\"'0ello 1orld'\""}, {"return": "\"'02341'\""}, {"return": "\"'0bcde1'\""}, {"return": "\"'0qrst1'\""}, {"return": "\"'0noxy1'\""}, {"return": "\"'0ppl1 b0n0n0 ch1rry'\""}, {"return": "\"'he001 w1r0d'\""}, {"return": "\"'0134567890'\""}, {"return": "\"'0d1'\""}, {"return": "\"'m0110110pp0'\""}, {"return": "\"'0bar1'\""}, {"return": "\"'ca01 01n0itiv1'\""}, {"return": "\"'replace0with01inary'\""}, {"return": "\"'d01e tr01e'\""}, {"return": "\"'0 abc 456 1'\""}, {"return": "\"'011le'\""}, {"return": "\"'01llo'\""}, {"return": "\"'0o1ld'\""}, {"return": "\"'0i1ary'\""}, {"return": "\"'01plac1'\""}, {"return": "\"'01nction'\""}, {"return": "\"'01ampl0'\""}, {"return": "\"'0er11ne'\""}, {"return": "\"'01thon'\""}, {"return": "\"'0r1ument'\""}], "parsed_inputs": [[["string", "\"hello\""], ["zero", "\"h\""], ["one", "\"l\""]], [["string", "\"abcde\""], ["zero", "\"a\""], ["one", "\"e\""]], [["string", "\"10101\""], ["zero", "\"1\""], ["one", "\"0\""]], [["string", "\"xyz\""], ["zero", "\"x\""], ["one", "\"z\""]], [["string", "\"abcdefg\""], ["zero", "\"a\""], ["one", "\"g\""]], [["string", "\"hello world\""], ["zero", "\"h\""], ["one", "\"w\""]], [["string", "\"12345\""], ["zero", "\"1\""], ["one", "\"5\""]], [["string", "\"abcdef\""], ["zero", "\"a\""], ["one", "\"f\""]], [["string", "\"pqrstu\""], ["zero", "\"p\""], ["one", "\"u\""]], [["string", "\"mnoxyz\""], ["zero", "\"m\""], ["one", "\"z\""]]], "exec_code": "def replace_with_binary(string, zero, one):\n    return string.replace(zero, '0').replace(one, '1')\n", "output": "The function is:\n\n```python\ndef replace_with_binary(string, zero, one):\n    return string.replace(zero, '0').replace(one, '1')\n\n```", "choosed_example_idx": [0, 5, 6], "prompt": "Function: replace_with_binary\nWrite a function that generates the output from the input.\n\nInput: dict(string=\"hello\", zero=\"h\", one=\"l\"), Output: \"'0e11o'\"\nInput: dict(string=\"hello world\", zero=\"h\", one=\"w\"), Output: \"'0ello 1orld'\"\nInput: dict(string=\"12345\", zero=\"1\", one=\"5\"), Output: \"'02341'\"\n\n", "id": "dcd351d1f5e3ca4b9856bb1f3546028eb9c844b6_0"}
{"example_str": "examples = [\n    dict(value=10),\n    dict(value=0),\n    dict(value=-5),\n    dict(value=\"hello\"),\n    dict(value=3.14),\n    dict(value=None),\n    dict(value=True),\n    dict(value=[1, 2, 3]),\n    dict(value={\"a\": 1, \"b\": 2}),\n    dict(value=(\"a\", \"b\", \"c\")),\n]\nexamples += [\n    dict(value=10),        # Example 1: valid integer, not zero\n    dict(value=-5),        # Example 2: valid integer, not zero (negative)\n    dict(value=0),         # Example 3: integer but zero\n    dict(value=1000),      # Example 4: valid integer, not zero\n    dict(value=-1),        # Example 5: valid integer, not zero (negative)\n    dict(value=1),         # Example 6: valid integer, not zero\n    dict(value='10'),      # Example 7: not an integer (string)\n    dict(value=2.5),       # Example 8: not an integer (float)\n    dict(value=None),      # Example 9: not an integer (NoneType)\n    dict(value=True)       # Example 10: not an integer (boolean)\n]\nexamples += [\n    dict(value=1),\n    dict(value=-1),\n    dict(value=100),\n    dict(value=-100),\n    dict(value=0),\n    dict(value=999),\n    dict(value=-999),\n    dict(value=123456),\n    dict(value=-123456),\n    dict(value=10)\n]", "code": "def validate_int_arguments(value):\n    if isinstance(value, int) and value != 0:\n        return True\n    else:\n        return False\n", "func_name": "validate_int_arguments", "exec_status": true, "example_inputs": ["\"{'value': 10}\"", "\"{'value': 0}\"", "\"{'value': -5}\"", "\"{'value': 'hello'}\"", "\"{'value': 3.14}\"", "\"{'value': None}\"", "\"{'value': True}\"", "\"{'value': [1, 2, 3]}\"", "\"{'value': {'a': 1, 'b': 2}}\"", "\"{'value': ('a', 'b', 'c')}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}], "parsed_inputs": [[["value", "10"]], [["value", "0"]], [["value", "-5"]], [["value", "\"hello\""]], [["value", "3.14"]], [["value", "None"]], [["value", "True"]], [["value", "[1, 2, 3]"]], [["value", "{'a': 1, 'b': 2}"]], [["value", "('a', 'b', 'c')"]]], "exec_code": "def validate_int_arguments(value):\n    if isinstance(value, int) and value != 0:\n        return True\n    else:\n        return False\n", "output": "The function is:\n\n```python\ndef validate_int_arguments(value):\n    if isinstance(value, int) and value != 0:\n        return True\n    else:\n        return False\n\n```", "choosed_example_idx": [4, 2, 8, 9, 5], "prompt": "Input: dict(value=3.14), Output: \"False\"\nInput: dict(value=-5), Output: \"True\"\nInput: dict(value={'a': 1, 'b': 2}), Output: \"False\"\nInput: dict(value=('a', 'b', 'c')), Output: \"False\"\nInput: dict(value=None), Output: \"False\"\n\nWrite a function that generates the output from the input.\nFunction: validate_int_arguments\n", "id": "917a91cc664b525d167b4aa7a3d89ae858aaaee9_0"}
{"example_str": "examples = [\n    dict(row={'stars': 1}),\n    dict(row={'stars': 2}),\n    dict(row={'stars': 3}),\n    dict(row={'stars': 4}),\n    dict(row={'stars': 5}),\n    dict(row={'stars': 0}),\n    dict(row={'stars': -1}),\n    dict(row={'stars': 3.5}),\n    dict(row={'stars': 2.9}),\n    dict(row={'stars': 1.1}),\n]\nexamples += [\n    dict(row={'stars': 5}),\n    dict(row={'stars': 3}),\n    dict(row={'stars': 2.5}),\n    dict(row={'stars': 0}),\n    dict(row={'stars': 3.5}),\n    dict(row={'stars': 4}),\n    dict(row={'stars': 1}),\n    dict(row={'stars': 2}),\n    dict(row={'stars': 4.5}),\n    dict(row={'stars': -1})\n]\nexamples += [\n    dict(row={'stars': 5}),\n    dict(row={'stars': 2}),\n    dict(row={'stars': 3}),\n    dict(row={'stars': 1}),\n    dict(row={'stars': 4}),\n    dict(row={'stars': 0}),\n    dict(row={'stars': 3}),\n    dict(row={'stars': 2}),\n    dict(row={'stars': 5}),\n    dict(row={'stars': 4}),\n]", "code": "def get_class_label_value(row):\n    if row['stars'] >= 3:\n        return 1\n    return 0\n", "func_name": "get_class_label_value", "exec_status": true, "example_inputs": ["\"{'row': {'stars': 1}}\"", "\"{'row': {'stars': 2}}\"", "\"{'row': {'stars': 3}}\"", "\"{'row': {'stars': 4}}\"", "\"{'row': {'stars': 5}}\"", "\"{'row': {'stars': 0}}\"", "\"{'row': {'stars': -1}}\"", "\"{'row': {'stars': 3.5}}\"", "\"{'row': {'stars': 2.9}}\"", "\"{'row': {'stars': 1.1}}\""], "example_outputs": [{"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}], "parsed_inputs": [[["row", "{'stars': 1}"]], [["row", "{'stars': 2}"]], [["row", "{'stars': 3}"]], [["row", "{'stars': 4}"]], [["row", "{'stars': 5}"]], [["row", "{'stars': 0}"]], [["row", "{'stars': -1}"]], [["row", "{'stars': 3.5}"]], [["row", "{'stars': 2.9}"]], [["row", "{'stars': 1.1}"]]], "exec_code": "def get_class_label_value(row):\n    if row['stars'] >= 3:\n        return 1\n    return 0\n", "output": "The function is:\n\n```python\ndef get_class_label_value(row):\n    if row['stars'] >= 3:\n        return 1\n    return 0\n\n```", "choosed_example_idx": [7, 3, 4], "prompt": "Function: get_class_label_value\nWrite a function that generates the output from the input.\nInput: dict(row={'stars': 3.5}), Output: \"1\"\nInput: dict(row={'stars': 4}), Output: \"1\"\nInput: dict(row={'stars': 5}), Output: \"1\"\n\n\n", "id": "c23d07e257b0443517a6c2faec5608c6dbd7166f_0"}
{"example_str": "examples = [\n    dict(griglia=[['*', '*'], ['*', '*']], memo={}),\n    dict(griglia=[['*', 'x'], ['*', '*']], memo={}),\n    dict(griglia=[['x', '*'], ['*', '*']], memo={}),\n    dict(griglia=[['*', '*'], ['x', '*']], memo={}),\n    dict(griglia=[['*', '*', '*'], ['*', '*', '*']], memo={}),\n    dict(griglia=[['*', '*', 'x'], ['*', '*', '*']], memo={}),\n    dict(griglia=[['x', '*', '*'], ['*', '*', '*']], memo={}),\n    dict(griglia=[['*', '*', '*'], ['x', '*', '*']], memo={}),\n    dict(griglia=[['*', '*', '*', '*'], ['*', '*', '*', '*']], memo={}),\n    dict(griglia=[['*', '*', '*', 'x'], ['*', '*', '*', '*']], memo={}),\n]\nexamples += [\n    dict(griglia=[['*']]),  # Single cell, no obstacle\n    dict(griglia=[['x']]),  # Single cell, with obstacle\n    dict(griglia=[['*', '*'], ['x', '*']]),  # 2x2 grid, one obstacle\n    dict(griglia=[['*', 'x'], ['*', '*']]),  # 2x2 grid, one obstacle, different position\n    dict(griglia=[['*', '*', '*'], ['*', 'x', '*'], ['*', '*', '*']]),  # 3x3 grid with one obstacle\n    dict(griglia=[['*', '*', '*'], ['x', 'x', 'x'], ['*', '*', '*']]),  # 3x3 grid, entire row blocked\n    dict(griglia=[['*', '*', '*'], ['*', '*', '*'], ['*', '*', '*']]),  # 3x3 grid, no obstacles\n    dict(griglia=[['*', 'x', '*'], ['*', 'x', '*'], ['*', '*', '*']]),  # 3x3 grid, column partially blocked\n    dict(griglia=[['*', '*', '*', '*'], ['x', 'x', 'x', 'x'], ['*', '*', '*', '*'], ['*', '*', '*', '*']]),  # 4x4 grid, one row fully blocked\n    dict(griglia=[['*', '*', '*', '*'], ['*', 'x', '*', '*'], ['*', '*', 'x', '*'], ['*', '*', '*', '*']])  # 4x4 grid with scattered obstacles\n]\nexamples += [\n    dict(griglia=[['*', '*'], ['*', '*']]),  # No obstacles, 2x2 grid\n    dict(griglia=[['*', 'x'], ['*', '*']]),  # One obstacle, 2x2 grid\n    dict(griglia=[['*', '*', '*'], ['*', 'x', '*'], ['*', '*', '*']]),  # One obstacle, 3x3 grid\n    dict(griglia=[['x', '*', '*'], ['*', '*', '*'], ['*', '*', '*']]),  # One obstacle at start, 3x3 grid\n    dict(griglia=[['*', '*', '*'], ['*', '*', '*'], ['*', '*', 'x']]),  # One obstacle at end, 3x3 grid\n    dict(griglia=[['*', 'x', '*'], ['*', 'x', '*'], ['*', '*', '*']]),  # Vertical obstacles, 3x3 grid\n    dict(griglia=[['*', '*', '*'], ['x', 'x', 'x'], ['*', '*', '*']]),  # Horizontal obstacles, 3x3 grid\n    dict(griglia=[['*', '*', '*', '*'], ['*', 'x', '*', '*'], ['*', '*', 'x', '*'], ['*', '*', '*', '*']]),  # Mixed obstacles, 4x4 grid\n    dict(griglia=[['*', 'x', '*', '*'], ['*', 'x', '*', '*'], ['*', '*', '*', '*'], ['*', '*', '*', '*']]),  # Vertical obstacles, 4x4 grid\n    dict(griglia=[['*', '*', '*', '*'], ['*', '*', '*', '*'], ['*', '*', '*', '*'], ['*', '*', '*', 'x']])  # One obstacle at end, 4x4 grid\n]", "code": "def routing_ostacoli(griglia, memo={}):\n    \"\"\"\n    \n\n    Parameters\n    ----------\n    griglia : list of lists\n        lista che contiene gli ostacoli e i permessi\n        *: permesso\n        x: ostacolo\n    memo : dictionary\n        Dizionario che contiene i \n        valori delle chiamate ricorsive per \n        implementare la programmazione dinamica. The default is {}.\n\n    Returns\n    -------\n    int\n        numero di possibili routing data la griglia.\n\n    \"\"\"\n    n = len(griglia)\n    m = len(griglia[0])\n    if n == 1:\n        if 'x' in griglia[0]:\n            return 0\n        else:\n            return 1\n    elif m == 1:\n        if 'x' in [i[0] for i in griglia]:\n            return 0\n        else:\n            return 1\n    elif griglia[0][1] == 'x':\n        griglia.pop(0)\n        return routing_ostacoli(griglia)\n    elif griglia[1][0] == 'x':\n        griglia = [i[1:] for i in griglia]\n        return routing_ostacoli(griglia)\n    else:\n        griglia1 = [i[1:] for i in griglia]\n        griglia.pop(0)\n        return routing_ostacoli(griglia1) + routing_ostacoli(griglia)\n", "func_name": "routing_ostacoli", "exec_status": true, "example_inputs": ["\"{'griglia': [['*', '*'], ['*', '*']], 'memo': {}}\"", "\"{'griglia': [['*', 'x'], ['*', '*']], 'memo': {}}\"", "\"{'griglia': [['x', '*'], ['*', '*']], 'memo': {}}\"", "\"{'griglia': [['*', '*'], ['x', '*']], 'memo': {}}\"", "\"{'griglia': [['*', '*', '*'], ['*', '*', '*']], 'memo': {}}\"", "\"{'griglia': [['*', '*', 'x'], ['*', '*', '*']], 'memo': {}}\"", "\"{'griglia': [['x', '*', '*'], ['*', '*', '*']], 'memo': {}}\"", "\"{'griglia': [['*', '*', '*'], ['x', '*', '*']], 'memo': {}}\"", "\"{'griglia': [['*', '*', '*', '*'], ['*', '*', '*', '*']], 'memo': {}}\"", "\"{'griglia': [['*', '*', '*', 'x'], ['*', '*', '*', '*']], 'memo': {}}\""], "example_outputs": [{"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"2\""}, {"return": "\"4\""}, {"return": "\"3\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"6\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"4\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"6\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"4\""}, {"return": "\"4\""}, {"return": "\"0\""}], "parsed_inputs": [[["griglia", "[['*', '*'], ['*', '*']]"], ["memo", "{}"]], [["griglia", "[['*', 'x'], ['*', '*']]"], ["memo", "{}"]], [["griglia", "[['x', '*'], ['*', '*']]"], ["memo", "{}"]], [["griglia", "[['*', '*'], ['x', '*']]"], ["memo", "{}"]], [["griglia", "[['*', '*', '*'], ['*', '*', '*']]"], ["memo", "{}"]], [["griglia", "[['*', '*', 'x'], ['*', '*', '*']]"], ["memo", "{}"]], [["griglia", "[['x', '*', '*'], ['*', '*', '*']]"], ["memo", "{}"]], [["griglia", "[['*', '*', '*'], ['x', '*', '*']]"], ["memo", "{}"]], [["griglia", "[['*', '*', '*', '*'], ['*', '*', '*', '*']]"], ["memo", "{}"]], [["griglia", "[['*', '*', '*', 'x'], ['*', '*', '*', '*']]"], ["memo", "{}"]]], "exec_code": "def routing_ostacoli(griglia, memo={}):\n    \"\"\"\n    \n\n    Parameters\n    ----------\n    griglia : list of lists\n        lista che contiene gli ostacoli e i permessi\n        *: permesso\n        x: ostacolo\n    memo : dictionary\n        Dizionario che contiene i \n        valori delle chiamate ricorsive per \n        implementare la programmazione dinamica. The default is {}.\n\n    Returns\n    -------\n    int\n        numero di possibili routing data la griglia.\n\n    \"\"\"\n    n = len(griglia)\n    m = len(griglia[0])\n    if n == 1:\n        if 'x' in griglia[0]:\n            return 0\n        else:\n            return 1\n    elif m == 1:\n        if 'x' in [i[0] for i in griglia]:\n            return 0\n        else:\n            return 1\n    elif griglia[0][1] == 'x':\n        griglia.pop(0)\n        return routing_ostacoli(griglia)\n    elif griglia[1][0] == 'x':\n        griglia = [i[1:] for i in griglia]\n        return routing_ostacoli(griglia)\n    else:\n        griglia1 = [i[1:] for i in griglia]\n        griglia.pop(0)\n        return routing_ostacoli(griglia1) + routing_ostacoli(griglia)\n", "output": "The function is:\n\n```python\ndef routing_ostacoli(griglia, memo={}):\n    \"\"\"\n    \n\n    Parameters\n    ----------\n    griglia : list of lists\n        lista che contiene gli ostacoli e i permessi\n        *: permesso\n        x: ostacolo\n    memo : dictionary\n        Dizionario che contiene i \n        valori delle chiamate ricorsive per \n        implementare la programmazione dinamica. The default is {}.\n\n    Returns\n    -------\n    int\n        numero di possibili routing data la griglia.\n\n    \"\"\"\n    n = len(griglia)\n    m = len(griglia[0])\n    if n == 1:\n        if 'x' in griglia[0]:\n            return 0\n        else:\n            return 1\n    elif m == 1:\n        if 'x' in [i[0] for i in griglia]:\n            return 0\n        else:\n            return 1\n    elif griglia[0][1] == 'x':\n        griglia.pop(0)\n        return routing_ostacoli(griglia)\n    elif griglia[1][0] == 'x':\n        griglia = [i[1:] for i in griglia]\n        return routing_ostacoli(griglia)\n    else:\n        griglia1 = [i[1:] for i in griglia]\n        griglia.pop(0)\n        return routing_ostacoli(griglia1) + routing_ostacoli(griglia)\n\n```", "choosed_example_idx": [2, 8, 6], "prompt": "Function: routing_ostacoli\n\nWrite a function that generates the output from the input.\nInput: dict(griglia=[['x', '*'], ['*', '*']], memo={}), Output: \"2\"\nInput: dict(griglia=[['*', '*', '*', '*'], ['*', '*', '*', '*']], memo={}), Output: \"4\"\nInput: dict(griglia=[['x', '*', '*'], ['*', '*', '*']], memo={}), Output: \"3\"\n\n\n\n", "id": "bd969e0b3ba6c61485d22fd970c88d4ae4fd338d_0"}
{"example_str": "examples = [\n    dict(elemento=1, lista=[1, 2, 3, 1, 2, 1]),\n    dict(elemento='a', lista=['a', 'b', 'c', 'a', 'b', 'a']),\n    dict(elemento=3.14, lista=[1.0, 2.0, 3.14, 4.0, 3.14]),\n    dict(elemento=True, lista=[True, False, True, False, True]),\n    dict(elemento='hello', lista=['hello', 'world', 'hello', 'again']),\n    dict(elemento=5, lista=[1, 2, 3, 4, 5, 5, 5]),\n    dict(elemento=None, lista=[None, 1, 2, None, 3, None]),\n    dict(elemento='x', lista=['x', 'y', 'z', 'x', 'y', 'x']),\n    dict(elemento=0, lista=[0, 1, 2, 0, 1, 0]),\n    dict(elemento='foo', lista=['foo', 'bar', 'baz', 'foo', 'bar', 'foo']),\n]\nexamples += [\n    dict(elemento=5, lista=[1, 2, 3, 4, 5, 5, 5]),\n    dict(elemento='apple', lista=['apple', 'banana', 'apple', 'orange']),\n    dict(elemento=3.14, lista=[3.14, 3.14, 2.71, 3.14]),\n    dict(elemento='a', lista=['a', 'b', 'c', 'a', 'd', 'a']),\n    dict(elemento=True, lista=[True, False, True, True]),\n    dict(elemento=None, lista=[None, None, 'none', None]),\n    dict(elemento=0, lista=[0, 1, 0, 0, 2, 3, 0]),\n    dict(elemento='z', lista=['x', 'y', 'z', 'z', 'x', 'z']),\n    dict(elemento=10, lista=[10, 20, 30, 10, 10]),\n    dict(elemento='test', lista=['test', 'test', 'exam', 'test', 'quiz', 'test'])\n]\nexamples += [\n    dict(elemento=1, lista=[1, 2, 3, 1, 1]),\n    dict(elemento='a', lista=['a', 'b', 'a', 'c']),\n    dict(elemento=5, lista=[5, 5, 5, 5, 5]),\n    dict(elemento='x', lista=['x', 'x', 'y', 'z', 'x', 'x']),\n    dict(elemento=0, lista=[0, 1, 0, 2, 0, 3]),\n    dict(elemento='hello', lista=['hello', 'hello', 'not', 'hello']),\n    dict(elemento=True, lista=[True, False, True, True]),\n    dict(elemento=None, lista=[None, None, 'None', None]),\n    dict(elemento=3.14, lista=[3.14, 2.71, 3.14, 1.41]),\n    dict(elemento='z', lista=['z', 'z', 'z', 'z', 'z', 'z', 'z'])\n]", "code": "def recorrencias(elemento, lista):\n    \"\"\"Funcao que conta as recorrencias de um valor em uma lista\"\"\"\n    recorrencia = 0\n    for n in range(len(lista)):\n        if lista[n] == elemento:\n            recorrencia = recorrencia + 1\n    return recorrencia\n", "func_name": "recorrencias", "exec_status": true, "example_inputs": ["\"{'elemento': 1, 'lista': [1, 2, 3, 1, 2, 1]}\"", "\"{'elemento': 'a', 'lista': ['a', 'b', 'c', 'a', 'b', 'a']}\"", "\"{'elemento': 3.14, 'lista': [1.0, 2.0, 3.14, 4.0, 3.14]}\"", "\"{'elemento': True, 'lista': [True, False, True, False, True]}\"", "\"{'elemento': 'hello', 'lista': ['hello', 'world', 'hello', 'again']}\"", "\"{'elemento': 5, 'lista': [1, 2, 3, 4, 5, 5, 5]}\"", "\"{'elemento': None, 'lista': [None, 1, 2, None, 3, None]}\"", "\"{'elemento': 'x', 'lista': ['x', 'y', 'z', 'x', 'y', 'x']}\"", "\"{'elemento': 0, 'lista': [0, 1, 2, 0, 1, 0]}\"", "\"{'elemento': 'foo', 'lista': ['foo', 'bar', 'baz', 'foo', 'bar', 'foo']}\""], "example_outputs": [{"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"4\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"4\""}, {"return": "\"3\""}, {"return": "\"2\""}, {"return": "\"5\""}, {"return": "\"4\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"2\""}, {"return": "\"7\""}], "parsed_inputs": [[["elemento", "1"], ["lista", "[1, 2, 3, 1, 2, 1]"]], [["elemento", "\"a\""], ["lista", "['a', 'b', 'c', 'a', 'b', 'a']"]], [["elemento", "3.14"], ["lista", "[1.0, 2.0, 3.14, 4.0, 3.14]"]], [["elemento", "True"], ["lista", "[True, False, True, False, True]"]], [["elemento", "\"hello\""], ["lista", "['hello', 'world', 'hello', 'again']"]], [["elemento", "5"], ["lista", "[1, 2, 3, 4, 5, 5, 5]"]], [["elemento", "None"], ["lista", "[None, 1, 2, None, 3, None]"]], [["elemento", "\"x\""], ["lista", "['x', 'y', 'z', 'x', 'y', 'x']"]], [["elemento", "0"], ["lista", "[0, 1, 2, 0, 1, 0]"]], [["elemento", "\"foo\""], ["lista", "['foo', 'bar', 'baz', 'foo', 'bar', 'foo']"]]], "exec_code": "def recorrencias(elemento, lista):\n    \"\"\"Funcao que conta as recorrencias de um valor em uma lista\"\"\"\n    recorrencia = 0\n    for n in range(len(lista)):\n        if lista[n] == elemento:\n            recorrencia = recorrencia + 1\n    return recorrencia\n", "output": "The function is:\n\n```python\ndef recorrencias(elemento, lista):\n    \"\"\"Funcao que conta as recorrencias de um valor em uma lista\"\"\"\n    recorrencia = 0\n    for n in range(len(lista)):\n        if lista[n] == elemento:\n            recorrencia = recorrencia + 1\n    return recorrencia\n\n```", "choosed_example_idx": [8, 5, 4], "prompt": "Function: recorrencias\n\nInput: dict(elemento=0, lista=[0, 1, 2, 0, 1, 0]), Output: \"3\"\nInput: dict(elemento=5, lista=[1, 2, 3, 4, 5, 5, 5]), Output: \"3\"\nInput: dict(elemento=\"hello\", lista=['hello', 'world', 'hello', 'again']), Output: \"2\"\n\nWrite a function that generates the output from the input.\n", "id": "f467ce07556e4da3853e936b912149f8ecef08f5_0"}
{"example_str": "examples = [\n    dict(langID=1, sublangID=0),  # Arabic\n    dict(langID=4, sublangID=12),  # Chinese (Hong Kong)\n    dict(langID=9, sublangID=0),  # English\n    dict(langID=12, sublangID=4),  # French (France)\n    dict(langID=7, sublangID=0),  # German\n    dict(langID=16, sublangID=0),  # Italian\n    dict(langID=17, sublangID=0),  # Japanese\n    dict(langID=21, sublangID=0),  # Polish\n    dict(langID=22, sublangID=8),  # Portuguese (Brazil)\n    dict(langID=10, sublangID=44),  # Spanish (Argentina)\n]\nexamples += [\n    dict(langID=1, sublangID=0),    # Arabic\n    dict(langID=9, sublangID=12),   # English (Australia)\n    dict(langID=4, sublangID=16),   # Chinese (Singapore)\n    dict(langID=10, sublangID=8),   # Spanish (Mexico)\n    dict(langID=7, sublangID=20),   # German (Liechtenstein)\n    dict(langID=22, sublangID=4),   # Portuguese (Brazil)\n    dict(langID=12, sublangID=12),  # French (Canada)\n    dict(langID=54, sublangID=0),   # Afrikaans\n    dict(langID=56, sublangID=0),   # Faroese\n    dict(langID=20, sublangID=0)    # Norwegian\n]\nexamples += [\n    dict(langID=1, sublangID=0),    # Arabic\n    dict(langID=1, sublangID=20),   # Arabic for Algeria\n    dict(langID=9, sublangID=4),    # English for US\n    dict(langID=10, sublangID=8),   # Spanish for Mexico\n    dict(langID=4, sublangID=4),    # Chinese for Taiwan\n    dict(langID=12, sublangID=0),   # French\n    dict(langID=12, sublangID=12),  # French for Canada\n    dict(langID=7, sublangID=8),    # German for Switzerland\n    dict(langID=22, sublangID=4),   # Portuguese for Brazil\n    dict(langID=100, sublangID=0)   # Non-existent langID, should default to 'en'\n]", "code": "def getLanguage(langID, sublangID):\n    mobilangdict = {(54): {(0): 'af'}, (28): {(0): 'sq'}, (1): {(0): 'ar',\n        (20): 'ar-dz', (60): 'ar-bh', (12): 'ar-eg', (44): 'ar-jo', (52):\n        'ar-kw', (48): 'ar-lb', (24): 'ar-ma', (32): 'ar-om', (64): 'ar-qa',\n        (4): 'ar-sa', (40): 'ar-sy', (28): 'ar-tn', (56): 'ar-ae', (36):\n        'ar-ye'}, (43): {(0): 'hy'}, (77): {(0): 'as'}, (44): {(0): 'az'},\n        (45): {(0): 'eu'}, (35): {(0): 'be'}, (69): {(0): 'bn'}, (2): {(0):\n        'bg'}, (3): {(0): 'ca'}, (4): {(0): 'zh', (12): 'zh-hk', (8):\n        'zh-cn', (16): 'zh-sg', (4): 'zh-tw'}, (26): {(0): 'hr'}, (5): {(0):\n        'cs'}, (6): {(0): 'da'}, (19): {(0): 'nl', (8): 'nl-be'}, (9): {(0):\n        'en', (12): 'en-au', (40): 'en-bz', (16): 'en-ca', (24): 'en-ie', (\n        32): 'en-jm', (20): 'en-nz', (52): 'en-ph', (28): 'en-za', (44):\n        'en-tt', (8): 'en-gb', (2): 'en-gb', (4): 'en-us', (48): 'en-zw'},\n        (37): {(0): 'et'}, (56): {(0): 'fo'}, (41): {(0): 'fa'}, (11): {(0):\n        'fi'}, (12): {(0): 'fr', (4): 'fr', (8): 'fr-be', (12): 'fr-ca', (\n        20): 'fr-lu', (24): 'fr-mc', (16): 'fr-ch'}, (55): {(0): 'ka'}, (7):\n        {(0): 'de', (12): 'de-at', (20): 'de-li', (16): 'de-lu', (8):\n        'de-ch'}, (8): {(0): 'el'}, (71): {(0): 'gu'}, (13): {(0): 'he'}, (\n        57): {(0): 'hi'}, (14): {(0): 'hu'}, (15): {(0): 'is'}, (33): {(0):\n        'id'}, (16): {(0): 'it', (4): 'it', (8): 'it-ch'}, (17): {(0): 'ja'\n        }, (75): {(0): 'kn'}, (63): {(0): 'kk'}, (87): {(0): 'x-kok'}, (18):\n        {(0): 'ko'}, (38): {(0): 'lv'}, (39): {(0): 'lt'}, (47): {(0): 'mk'\n        }, (62): {(0): 'ms'}, (76): {(0): 'ml'}, (58): {(0): 'mt'}, (78): {\n        (0): 'mr'}, (97): {(0): 'ne'}, (20): {(0): 'no'}, (72): {(0): 'or'},\n        (21): {(0): 'pl'}, (22): {(0): 'pt', (8): 'pt', (4): 'pt-br'}, (70):\n        {(0): 'pa'}, (23): {(0): 'rm'}, (24): {(0): 'ro'}, (25): {(0): 'ru'\n        }, (59): {(0): 'sz'}, (79): {(0): 'sa'}, (26): {(12): 'sr'}, (27):\n        {(0): 'sk'}, (36): {(0): 'sl'}, (46): {(0): 'sb'}, (10): {(0): 'es',\n        (4): 'es', (44): 'es-ar', (64): 'es-bo', (52): 'es-cl', (36):\n        'es-co', (20): 'es-cr', (28): 'es-do', (48): 'es-ec', (68): 'es-sv',\n        (16): 'es-gt', (72): 'es-hn', (8): 'es-mx', (76): 'es-ni', (24):\n        'es-pa', (60): 'es-py', (40): 'es-pe', (80): 'es-pr', (56): 'es-uy',\n        (32): 'es-ve'}, (48): {(0): 'sx'}, (65): {(0): 'sw'}, (29): {(0):\n        'sv', (8): 'sv-fi'}, (73): {(0): 'ta'}, (68): {(0): 'tt'}, (74): {(\n        0): 'te'}, (30): {(0): 'th'}, (49): {(0): 'ts'}, (50): {(0): 'tn'},\n        (31): {(0): 'tr'}, (34): {(0): 'uk'}, (32): {(0): 'ur'}, (67): {(0):\n        'uz', (8): 'uz'}, (42): {(0): 'vi'}, (52): {(0): 'xh'}, (53): {(0):\n        'zu'}}\n    return mobilangdict.get(int(langID), {(0): 'en'}).get(int(sublangID), 'en')\n", "func_name": "getLanguage", "exec_status": true, "example_inputs": ["\"{'langID': 1, 'sublangID': 0}\"", "\"{'langID': 4, 'sublangID': 12}\"", "\"{'langID': 9, 'sublangID': 0}\"", "\"{'langID': 12, 'sublangID': 4}\"", "\"{'langID': 7, 'sublangID': 0}\"", "\"{'langID': 16, 'sublangID': 0}\"", "\"{'langID': 17, 'sublangID': 0}\"", "\"{'langID': 21, 'sublangID': 0}\"", "\"{'langID': 22, 'sublangID': 8}\"", "\"{'langID': 10, 'sublangID': 44}\""], "example_outputs": [{"return": "\"'ar'\""}, {"return": "\"'zh-hk'\""}, {"return": "\"'en'\""}, {"return": "\"'fr'\""}, {"return": "\"'de'\""}, {"return": "\"'it'\""}, {"return": "\"'ja'\""}, {"return": "\"'pl'\""}, {"return": "\"'pt'\""}, {"return": "\"'es-ar'\""}, {"return": "\"'ar'\""}, {"return": "\"'en-au'\""}, {"return": "\"'zh-sg'\""}, {"return": "\"'es-mx'\""}, {"return": "\"'de-li'\""}, {"return": "\"'pt-br'\""}, {"return": "\"'fr-ca'\""}, {"return": "\"'af'\""}, {"return": "\"'fo'\""}, {"return": "\"'no'\""}, {"return": "\"'ar'\""}, {"return": "\"'ar-dz'\""}, {"return": "\"'en-us'\""}, {"return": "\"'es-mx'\""}, {"return": "\"'zh-tw'\""}, {"return": "\"'fr'\""}, {"return": "\"'fr-ca'\""}, {"return": "\"'de-ch'\""}, {"return": "\"'pt-br'\""}, {"return": "\"'en'\""}], "parsed_inputs": [[["langID", "1"], ["sublangID", "0"]], [["langID", "4"], ["sublangID", "12"]], [["langID", "9"], ["sublangID", "0"]], [["langID", "12"], ["sublangID", "4"]], [["langID", "7"], ["sublangID", "0"]], [["langID", "16"], ["sublangID", "0"]], [["langID", "17"], ["sublangID", "0"]], [["langID", "21"], ["sublangID", "0"]], [["langID", "22"], ["sublangID", "8"]], [["langID", "10"], ["sublangID", "44"]]], "exec_code": "def getLanguage(langID, sublangID):\n    mobilangdict = {(54): {(0): 'af'}, (28): {(0): 'sq'}, (1): {(0): 'ar',\n        (20): 'ar-dz', (60): 'ar-bh', (12): 'ar-eg', (44): 'ar-jo', (52):\n        'ar-kw', (48): 'ar-lb', (24): 'ar-ma', (32): 'ar-om', (64): 'ar-qa',\n        (4): 'ar-sa', (40): 'ar-sy', (28): 'ar-tn', (56): 'ar-ae', (36):\n        'ar-ye'}, (43): {(0): 'hy'}, (77): {(0): 'as'}, (44): {(0): 'az'},\n        (45): {(0): 'eu'}, (35): {(0): 'be'}, (69): {(0): 'bn'}, (2): {(0):\n        'bg'}, (3): {(0): 'ca'}, (4): {(0): 'zh', (12): 'zh-hk', (8):\n        'zh-cn', (16): 'zh-sg', (4): 'zh-tw'}, (26): {(0): 'hr'}, (5): {(0):\n        'cs'}, (6): {(0): 'da'}, (19): {(0): 'nl', (8): 'nl-be'}, (9): {(0):\n        'en', (12): 'en-au', (40): 'en-bz', (16): 'en-ca', (24): 'en-ie', (\n        32): 'en-jm', (20): 'en-nz', (52): 'en-ph', (28): 'en-za', (44):\n        'en-tt', (8): 'en-gb', (2): 'en-gb', (4): 'en-us', (48): 'en-zw'},\n        (37): {(0): 'et'}, (56): {(0): 'fo'}, (41): {(0): 'fa'}, (11): {(0):\n        'fi'}, (12): {(0): 'fr', (4): 'fr', (8): 'fr-be', (12): 'fr-ca', (\n        20): 'fr-lu', (24): 'fr-mc', (16): 'fr-ch'}, (55): {(0): 'ka'}, (7):\n        {(0): 'de', (12): 'de-at', (20): 'de-li', (16): 'de-lu', (8):\n        'de-ch'}, (8): {(0): 'el'}, (71): {(0): 'gu'}, (13): {(0): 'he'}, (\n        57): {(0): 'hi'}, (14): {(0): 'hu'}, (15): {(0): 'is'}, (33): {(0):\n        'id'}, (16): {(0): 'it', (4): 'it', (8): 'it-ch'}, (17): {(0): 'ja'\n        }, (75): {(0): 'kn'}, (63): {(0): 'kk'}, (87): {(0): 'x-kok'}, (18):\n        {(0): 'ko'}, (38): {(0): 'lv'}, (39): {(0): 'lt'}, (47): {(0): 'mk'\n        }, (62): {(0): 'ms'}, (76): {(0): 'ml'}, (58): {(0): 'mt'}, (78): {\n        (0): 'mr'}, (97): {(0): 'ne'}, (20): {(0): 'no'}, (72): {(0): 'or'},\n        (21): {(0): 'pl'}, (22): {(0): 'pt', (8): 'pt', (4): 'pt-br'}, (70):\n        {(0): 'pa'}, (23): {(0): 'rm'}, (24): {(0): 'ro'}, (25): {(0): 'ru'\n        }, (59): {(0): 'sz'}, (79): {(0): 'sa'}, (26): {(12): 'sr'}, (27):\n        {(0): 'sk'}, (36): {(0): 'sl'}, (46): {(0): 'sb'}, (10): {(0): 'es',\n        (4): 'es', (44): 'es-ar', (64): 'es-bo', (52): 'es-cl', (36):\n        'es-co', (20): 'es-cr', (28): 'es-do', (48): 'es-ec', (68): 'es-sv',\n        (16): 'es-gt', (72): 'es-hn', (8): 'es-mx', (76): 'es-ni', (24):\n        'es-pa', (60): 'es-py', (40): 'es-pe', (80): 'es-pr', (56): 'es-uy',\n        (32): 'es-ve'}, (48): {(0): 'sx'}, (65): {(0): 'sw'}, (29): {(0):\n        'sv', (8): 'sv-fi'}, (73): {(0): 'ta'}, (68): {(0): 'tt'}, (74): {(\n        0): 'te'}, (30): {(0): 'th'}, (49): {(0): 'ts'}, (50): {(0): 'tn'},\n        (31): {(0): 'tr'}, (34): {(0): 'uk'}, (32): {(0): 'ur'}, (67): {(0):\n        'uz', (8): 'uz'}, (42): {(0): 'vi'}, (52): {(0): 'xh'}, (53): {(0):\n        'zu'}}\n    return mobilangdict.get(int(langID), {(0): 'en'}).get(int(sublangID), 'en')\n", "output": "The function is:\n\n```python\ndef getLanguage(langID, sublangID):\n    mobilangdict = {(54): {(0): 'af'}, (28): {(0): 'sq'}, (1): {(0): 'ar',\n        (20): 'ar-dz', (60): 'ar-bh', (12): 'ar-eg', (44): 'ar-jo', (52):\n        'ar-kw', (48): 'ar-lb', (24): 'ar-ma', (32): 'ar-om', (64): 'ar-qa',\n        (4): 'ar-sa', (40): 'ar-sy', (28): 'ar-tn', (56): 'ar-ae', (36):\n        'ar-ye'}, (43): {(0): 'hy'}, (77): {(0): 'as'}, (44): {(0): 'az'},\n        (45): {(0): 'eu'}, (35): {(0): 'be'}, (69): {(0): 'bn'}, (2): {(0):\n        'bg'}, (3): {(0): 'ca'}, (4): {(0): 'zh', (12): 'zh-hk', (8):\n        'zh-cn', (16): 'zh-sg', (4): 'zh-tw'}, (26): {(0): 'hr'}, (5): {(0):\n        'cs'}, (6): {(0): 'da'}, (19): {(0): 'nl', (8): 'nl-be'}, (9): {(0):\n        'en', (12): 'en-au', (40): 'en-bz', (16): 'en-ca', (24): 'en-ie', (\n        32): 'en-jm', (20): 'en-nz', (52): 'en-ph', (28): 'en-za', (44):\n        'en-tt', (8): 'en-gb', (2): 'en-gb', (4): 'en-us', (48): 'en-zw'},\n        (37): {(0): 'et'}, (56): {(0): 'fo'}, (41): {(0): 'fa'}, (11): {(0):\n        'fi'}, (12): {(0): 'fr', (4): 'fr', (8): 'fr-be', (12): 'fr-ca', (\n        20): 'fr-lu', (24): 'fr-mc', (16): 'fr-ch'}, (55): {(0): 'ka'}, (7):\n        {(0): 'de', (12): 'de-at', (20): 'de-li', (16): 'de-lu', (8):\n        'de-ch'}, (8): {(0): 'el'}, (71): {(0): 'gu'}, (13): {(0): 'he'}, (\n        57): {(0): 'hi'}, (14): {(0): 'hu'}, (15): {(0): 'is'}, (33): {(0):\n        'id'}, (16): {(0): 'it', (4): 'it', (8): 'it-ch'}, (17): {(0): 'ja'\n        }, (75): {(0): 'kn'}, (63): {(0): 'kk'}, (87): {(0): 'x-kok'}, (18):\n        {(0): 'ko'}, (38): {(0): 'lv'}, (39): {(0): 'lt'}, (47): {(0): 'mk'\n        }, (62): {(0): 'ms'}, (76): {(0): 'ml'}, (58): {(0): 'mt'}, (78): {\n        (0): 'mr'}, (97): {(0): 'ne'}, (20): {(0): 'no'}, (72): {(0): 'or'},\n        (21): {(0): 'pl'}, (22): {(0): 'pt', (8): 'pt', (4): 'pt-br'}, (70):\n        {(0): 'pa'}, (23): {(0): 'rm'}, (24): {(0): 'ro'}, (25): {(0): 'ru'\n        }, (59): {(0): 'sz'}, (79): {(0): 'sa'}, (26): {(12): 'sr'}, (27):\n        {(0): 'sk'}, (36): {(0): 'sl'}, (46): {(0): 'sb'}, (10): {(0): 'es',\n        (4): 'es', (44): 'es-ar', (64): 'es-bo', (52): 'es-cl', (36):\n        'es-co', (20): 'es-cr', (28): 'es-do', (48): 'es-ec', (68): 'es-sv',\n        (16): 'es-gt', (72): 'es-hn', (8): 'es-mx', (76): 'es-ni', (24):\n        'es-pa', (60): 'es-py', (40): 'es-pe', (80): 'es-pr', (56): 'es-uy',\n        (32): 'es-ve'}, (48): {(0): 'sx'}, (65): {(0): 'sw'}, (29): {(0):\n        'sv', (8): 'sv-fi'}, (73): {(0): 'ta'}, (68): {(0): 'tt'}, (74): {(\n        0): 'te'}, (30): {(0): 'th'}, (49): {(0): 'ts'}, (50): {(0): 'tn'},\n        (31): {(0): 'tr'}, (34): {(0): 'uk'}, (32): {(0): 'ur'}, (67): {(0):\n        'uz', (8): 'uz'}, (42): {(0): 'vi'}, (52): {(0): 'xh'}, (53): {(0):\n        'zu'}}\n    return mobilangdict.get(int(langID), {(0): 'en'}).get(int(sublangID), 'en')\n\n```", "choosed_example_idx": [0, 8, 6, 3, 1, 9, 7, 5], "prompt": "Function: getLanguage\n\n\nInput: dict(langID=1, sublangID=0), Output: \"'ar'\"\nInput: dict(langID=22, sublangID=8), Output: \"'pt'\"\nInput: dict(langID=17, sublangID=0), Output: \"'ja'\"\nInput: dict(langID=12, sublangID=4), Output: \"'fr'\"\nInput: dict(langID=4, sublangID=12), Output: \"'zh-hk'\"\nInput: dict(langID=10, sublangID=44), Output: \"'es-ar'\"\nInput: dict(langID=21, sublangID=0), Output: \"'pl'\"\nInput: dict(langID=16, sublangID=0), Output: \"'it'\"\n\n\nWrite a function that generates the output from the input.\n", "id": "41fa271b79a11cae0ea67cc146ef214fa77398a2_0"}
{"example_str": "examples = [\n    dict(word1=\"abcde\", word2=\"ace\"),\n    dict(word1=\"abc\", word2=\"abc\"),\n    dict(word1=\"abc\", word2=\"def\"),\n    dict(word1=\"abcdef\", word2=\"abc\"),\n    dict(word1=\"abcdef\", word2=\"def\"),\n    dict(word1=\"abcdef\", word2=\"abcd\"),\n    dict(word1=\"abcdef\", word2=\"abcdef\"),\n    dict(word1=\"abcdefg\", word2=\"abcd\"),\n    dict(word1=\"abcdefgh\", word2=\"abcd\"),\n    dict(word1=\"abcdefghi\", word2=\"abcd\"),\n]\nexamples += [\n    dict(word1=\"abc\", word2=\"abc\"),  # Both strings are identical\n    dict(word1=\"abc\", word2=\"def\"),  # No common characters\n    dict(word1=\"abc\", word2=\"acb\"),  # Common characters but different order\n    dict(word1=\"longest\", word2=\"stone\"),  # Partial overlap with some common subsequences\n    dict(word1=\"\", word2=\"any\"),  # One string is empty\n    dict(word1=\"12345\", word2=\"54321\"),  # Numeric strings with reversed order\n    dict(word1=\"same\", word2=\"same\"),  # Exactly the same string\n    dict(word1=\"abcdef\", word2=\"abc\"),  # Complete subsequence\n    dict(word1=\"x\", word2=\"y\"),  # Single character, no match\n    dict(word1=\"apple\", word2=\"ample\")  # Close strings with minor differences\n]\nexamples += [\n    dict(word1=\"abc\", word2=\"abc\"),\n    dict(word1=\"abc\", word2=\"def\"),\n    dict(word1=\"123\", word2=\"321\"),\n    dict(word1=\"hello\", word2=\"world\"),\n    dict(word1=\"python\", word2=\"typhon\"),\n    dict(word1=\"abcdef\", word2=\"abc\"),\n    dict(word1=\"longest\", word2=\"stone\"),\n    dict(word1=\"example\", word2=\"sample\"),\n    dict(word1=\"test\", word2=\"testing\"),\n    dict(word1=\"algorithm\", word2=\"rhythm\")\n]", "code": "def lcs(word1, word2):\n    row = [(0) for _ in range(len(word1) + 1)]\n    for r in range(1, len(word2) + 1):\n        prev = 0\n        for c in range(1, len(row)):\n            val = prev + 1\n            if word2[r - 1] != word1[c - 1]:\n                val = max(row[c - 1], row[c])\n            row[c], prev = val, row[c]\n    return row[-1]\n", "func_name": "lcs", "exec_status": true, "example_inputs": ["\"{'word1': 'abcde', 'word2': 'ace'}\"", "\"{'word1': 'abc', 'word2': 'abc'}\"", "\"{'word1': 'abc', 'word2': 'def'}\"", "\"{'word1': 'abcdef', 'word2': 'abc'}\"", "\"{'word1': 'abcdef', 'word2': 'def'}\"", "\"{'word1': 'abcdef', 'word2': 'abcd'}\"", "\"{'word1': 'abcdef', 'word2': 'abcdef'}\"", "\"{'word1': 'abcdefg', 'word2': 'abcd'}\"", "\"{'word1': 'abcdefgh', 'word2': 'abcd'}\"", "\"{'word1': 'abcdefghi', 'word2': 'abcd'}\""], "example_outputs": [{"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"4\""}, {"return": "\"6\""}, {"return": "\"4\""}, {"return": "\"4\""}, {"return": "\"4\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"4\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"4\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"4\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"5\""}, {"return": "\"4\""}, {"return": "\"4\""}], "parsed_inputs": [[["word1", "\"abcde\""], ["word2", "\"ace\""]], [["word1", "\"abc\""], ["word2", "\"abc\""]], [["word1", "\"abc\""], ["word2", "\"def\""]], [["word1", "\"abcdef\""], ["word2", "\"abc\""]], [["word1", "\"abcdef\""], ["word2", "\"def\""]], [["word1", "\"abcdef\""], ["word2", "\"abcd\""]], [["word1", "\"abcdef\""], ["word2", "\"abcdef\""]], [["word1", "\"abcdefg\""], ["word2", "\"abcd\""]], [["word1", "\"abcdefgh\""], ["word2", "\"abcd\""]], [["word1", "\"abcdefghi\""], ["word2", "\"abcd\""]]], "exec_code": "def lcs(word1, word2):\n    row = [(0) for _ in range(len(word1) + 1)]\n    for r in range(1, len(word2) + 1):\n        prev = 0\n        for c in range(1, len(row)):\n            val = prev + 1\n            if word2[r - 1] != word1[c - 1]:\n                val = max(row[c - 1], row[c])\n            row[c], prev = val, row[c]\n    return row[-1]\n", "output": "The function is:\n\n```python\ndef lcs(word1, word2):\n    row = [(0) for _ in range(len(word1) + 1)]\n    for r in range(1, len(word2) + 1):\n        prev = 0\n        for c in range(1, len(row)):\n            val = prev + 1\n            if word2[r - 1] != word1[c - 1]:\n                val = max(row[c - 1], row[c])\n            row[c], prev = val, row[c]\n    return row[-1]\n\n```", "choosed_example_idx": [0, 3, 4, 1], "prompt": "Write a function that generates the output from the input.\n\n\nFunction: lcs\n\n\nInput: dict(word1=\"abcde\", word2=\"ace\"), Output: \"3\"\nInput: dict(word1=\"abcdef\", word2=\"abc\"), Output: \"3\"\nInput: dict(word1=\"abcdef\", word2=\"def\"), Output: \"3\"\nInput: dict(word1=\"abc\", word2=\"abc\"), Output: \"3\"\n\n", "id": "5fd1cf080e62d86a0e2dad575168897b975fa50c_0"}
{"example_str": "examples = [\n    dict(d=(1, 2, 3), p=(4, 5)),\n    dict(d=(0, 1, 2), p=(3, 4)),\n    dict(d=(5, 0, 1), p=(2, 3)),\n    dict(d=(1, 1, 1), p=(1, 1)),\n    dict(d=(2, 3, 4), p=(5, 6)),\n    dict(d=(0, 0, 1), p=(0, 0)),\n    dict(d=(1, -1, 1), p=(2, 3)),\n    dict(d=(4, 5, 6), p=(7, 8)),\n    dict(d=(2, 2, 2), p=(3, 3)),\n    dict(d=(3, 4, 5), p=(6, 7)),\n]\nexamples += [\n    dict(d=(1, 2, 3), p=(4, 5)),\n    dict(d=(0, 1, -5), p=(1, 2)),\n    dict(d=(3, -4, 1), p=(0, 0)),\n    dict(d=(5, 5, 0), p=(1, -1)),\n    dict(d=(-1, 1, 0), p=(2, 2)),\n    dict(d=(2, 3, -6), p=(3, 1)),\n    dict(d=(0, 0, 1), p=(5, 5)),  # Degenerate line case, not typically useful but valid input\n    dict(d=(1, 0, -4), p=(0, 0)),\n    dict(d=(4, -3, 2), p=(1, 1)),\n    dict(d=(1, 1, 1), p=(-1, -1))\n]\nexamples += [\n    dict(d=(1, -1, 0), p=(0, 0)),\n    dict(d=(2, 3, 1), p=(1, 1)),\n    dict(d=(0, 1, -5), p=(2, 3)),\n    dict(d=(5, 5, 10), p=(-1, -1)),\n    dict(d=(1, 0, 3), p=(4, 5)),\n    dict(d=(3, 4, 0), p=(0, 0)),\n    dict(d=(-2, 1, 4), p=(1, 2)),\n    dict(d=(1, 1, 1), p=(3, 3)),\n    dict(d=(0, 0, 1), p=(5, 5)),\n    dict(d=(1, 2, 3), p=(0, 1))\n]", "code": "def droite_normale(d, p):\n    a, b, c = d\n    x, y = p\n    a1, b1 = -b, a\n    c1 = a1 * x + b1 * y\n    return a1, b1, c1\n", "func_name": "droite_normale", "exec_status": true, "example_inputs": ["\"{'d': (1, 2, 3), 'p': (4, 5)}\"", "\"{'d': (0, 1, 2), 'p': (3, 4)}\"", "\"{'d': (5, 0, 1), 'p': (2, 3)}\"", "\"{'d': (1, 1, 1), 'p': (1, 1)}\"", "\"{'d': (2, 3, 4), 'p': (5, 6)}\"", "\"{'d': (0, 0, 1), 'p': (0, 0)}\"", "\"{'d': (1, -1, 1), 'p': (2, 3)}\"", "\"{'d': (4, 5, 6), 'p': (7, 8)}\"", "\"{'d': (2, 2, 2), 'p': (3, 3)}\"", "\"{'d': (3, 4, 5), 'p': (6, 7)}\""], "example_outputs": [{"return": "\"(-2, 1, -3)\""}, {"return": "\"(-1, 0, -3)\""}, {"return": "\"(0, 5, 15)\""}, {"return": "\"(-1, 1, 0)\""}, {"return": "\"(-3, 2, -3)\""}, {"return": "\"(0, 0, 0)\""}, {"return": "\"(1, 1, 5)\""}, {"return": "\"(-5, 4, -3)\""}, {"return": "\"(-2, 2, 0)\""}, {"return": "\"(-4, 3, -3)\""}, {"return": "\"(-2, 1, -3)\""}, {"return": "\"(-1, 0, -1)\""}, {"return": "\"(4, 3, 0)\""}, {"return": "\"(-5, 5, -10)\""}, {"return": "\"(-1, -1, -4)\""}, {"return": "\"(-3, 2, -7)\""}, {"return": "\"(0, 0, 0)\""}, {"return": "\"(0, 1, 0)\""}, {"return": "\"(3, 4, 7)\""}, {"return": "\"(-1, 1, 0)\""}, {"return": "\"(1, 1, 0)\""}, {"return": "\"(-3, 2, -1)\""}, {"return": "\"(-1, 0, -2)\""}, {"return": "\"(-5, 5, 0)\""}, {"return": "\"(0, 1, 5)\""}, {"return": "\"(-4, 3, 0)\""}, {"return": "\"(-1, -2, -5)\""}, {"return": "\"(-1, 1, 0)\""}, {"return": "\"(0, 0, 0)\""}, {"return": "\"(-2, 1, 1)\""}], "parsed_inputs": [[["d", "(1, 2, 3)"], ["p", "(4, 5)"]], [["d", "(0, 1, 2)"], ["p", "(3, 4)"]], [["d", "(5, 0, 1)"], ["p", "(2, 3)"]], [["d", "(1, 1, 1)"], ["p", "(1, 1)"]], [["d", "(2, 3, 4)"], ["p", "(5, 6)"]], [["d", "(0, 0, 1)"], ["p", "(0, 0)"]], [["d", "(1, -1, 1)"], ["p", "(2, 3)"]], [["d", "(4, 5, 6)"], ["p", "(7, 8)"]], [["d", "(2, 2, 2)"], ["p", "(3, 3)"]], [["d", "(3, 4, 5)"], ["p", "(6, 7)"]]], "exec_code": "def droite_normale(d, p):\n    a, b, c = d\n    x, y = p\n    a1, b1 = -b, a\n    c1 = a1 * x + b1 * y\n    return a1, b1, c1\n", "output": "The function is:\n\n```python\ndef droite_normale(d, p):\n    a, b, c = d\n    x, y = p\n    a1, b1 = -b, a\n    c1 = a1 * x + b1 * y\n    return a1, b1, c1\n\n```", "choosed_example_idx": [3, 7, 0, 1, 2, 4], "prompt": "Write a function that generates the output from the input.\n\nInput: dict(d=(1, 1, 1), p=(1, 1)), Output: \"(-1, 1, 0)\"\nInput: dict(d=(4, 5, 6), p=(7, 8)), Output: \"(-5, 4, -3)\"\nInput: dict(d=(1, 2, 3), p=(4, 5)), Output: \"(-2, 1, -3)\"\nInput: dict(d=(0, 1, 2), p=(3, 4)), Output: \"(-1, 0, -3)\"\nInput: dict(d=(5, 0, 1), p=(2, 3)), Output: \"(0, 5, 15)\"\nInput: dict(d=(2, 3, 4), p=(5, 6)), Output: \"(-3, 2, -3)\"\n\n\n\nFunction: droite_normale\n\n", "id": "f9e1864e10fa6547a93c1744277eb62f00dff2c6_0"}
{"example_str": "examples = [\n    dict(divisor=2),\n    dict(divisor=0),\n    dict(divisor=13),\n    dict(divisor='a'),\n    dict(divisor=None),\n    dict(divisor=10.5),\n    dict(divisor=-5),\n    dict(divisor=[1, 2, 3]),\n    dict(divisor={'a': 1}),\n    dict(divisor=True)\n]\nexamples += [\n    dict(divisor=2),          # Normal case, numeric non-zero, non-13\n    dict(divisor=0),          # Zero division error\n    dict(divisor=13),         # ValueError, specific bad value\n    dict(divisor='5'),        # TypeError, string instead of numeric\n    dict(divisor=10.0),       # Normal case, float divisor\n    dict(divisor=-1),         # Normal case, negative divisor\n    dict(divisor=1),          # Normal case, divisor is one\n    dict(divisor=None),       # TypeError, None is not numeric\n    dict(divisor=[1, 2]),     # TypeError, list instead of single numeric value\n    dict(divisor=100)         # Normal case, larger divisor\n]\nexamples += [\n    dict(divisor=0),  # ZeroDivisionError\n    dict(divisor=13),  # ValueError for the number 13\n    dict(divisor=10),  # Normal division\n    dict(divisor=-1),  # Division by a negative number\n    dict(divisor=2.5),  # Division by a float\n    dict(divisor='a'),  # TypeError due to non-numeric type\n    dict(divisor=None),  # TypeError due to None\n    dict(divisor=100),  # Normal division\n    dict(divisor=-5),  # Division by a negative number\n    dict(divisor=1),  # Normal division\n]", "code": "def divisao(divisor):\n    try:\n        if divisor == 13:\n            raise ValueError('13 não é um número legal')\n        return 10 / divisor\n    except ZeroDivisionError:\n        return 'Entre com um número diferente de zero'\n    except TypeError:\n        return 'Entre com um valor numérico'\n    except ValueError:\n        print('Não utilize o número 13')\n    finally:\n        print('Isso sempre será executado')\n", "func_name": "divisao", "exec_status": true, "example_inputs": ["\"{'divisor': 2}\"", "\"{'divisor': 0}\"", "\"{'divisor': 13}\"", "\"{'divisor': 'a'}\"", "\"{'divisor': None}\"", "\"{'divisor': 10.5}\"", "\"{'divisor': -5}\"", "\"{'divisor': [1, 2, 3]}\"", "\"{'divisor': {'a': 1}}\"", "\"{'divisor': True}\""], "example_outputs": [{"return": "\"5.0\""}, {"return": "\"'Entre com um n\\u00famero diferente de zero'\""}, {"return": "\"None\""}, {"return": "\"'Entre com um valor num\\u00e9rico'\""}, {"return": "\"'Entre com um valor num\\u00e9rico'\""}, {"return": "\"0.9523809523809523\""}, {"return": "\"-2.0\""}, {"return": "\"'Entre com um valor num\\u00e9rico'\""}, {"return": "\"'Entre com um valor num\\u00e9rico'\""}, {"return": "\"10.0\""}, {"return": "\"5.0\""}, {"return": "\"'Entre com um n\\u00famero diferente de zero'\""}, {"return": "\"None\""}, {"return": "\"'Entre com um valor num\\u00e9rico'\""}, {"return": "\"1.0\""}, {"return": "\"-10.0\""}, {"return": "\"10.0\""}, {"return": "\"'Entre com um valor num\\u00e9rico'\""}, {"return": "\"'Entre com um valor num\\u00e9rico'\""}, {"return": "\"0.1\""}, {"return": "\"'Entre com um n\\u00famero diferente de zero'\""}, {"return": "\"None\""}, {"return": "\"1.0\""}, {"return": "\"-10.0\""}, {"return": "\"4.0\""}, {"return": "\"'Entre com um valor num\\u00e9rico'\""}, {"return": "\"'Entre com um valor num\\u00e9rico'\""}, {"return": "\"0.1\""}, {"return": "\"-2.0\""}, {"return": "\"10.0\""}], "parsed_inputs": [[["divisor", "2"]], [["divisor", "0"]], [["divisor", "13"]], [["divisor", "\"a\""]], [["divisor", "None"]], [["divisor", "10.5"]], [["divisor", "-5"]], [["divisor", "[1, 2, 3]"]], [["divisor", "{'a': 1}"]], [["divisor", "True"]]], "exec_code": "def divisao(divisor):\n    try:\n        if divisor == 13:\n            raise ValueError('13 não é um número legal')\n        return 10 / divisor\n    except ZeroDivisionError:\n        return 'Entre com um número diferente de zero'\n    except TypeError:\n        return 'Entre com um valor numérico'\n    except ValueError:\n        print('Não utilize o número 13')\n    finally:\n        print('Isso sempre será executado')\n", "output": "The function is:\n\n```python\ndef divisao(divisor):\n    try:\n        if divisor == 13:\n            raise ValueError('13 não é um número legal')\n        return 10 / divisor\n    except ZeroDivisionError:\n        return 'Entre com um número diferente de zero'\n    except TypeError:\n        return 'Entre com um valor numérico'\n    except ValueError:\n        print('Não utilize o número 13')\n    finally:\n        print('Isso sempre será executado')\n\n```", "choosed_example_idx": [6, 4, 1, 3, 7, 2, 0, 9, 8, 5], "prompt": "Input: dict(divisor=-5), Output: \"-2.0\"\nInput: dict(divisor=None), Output: \"'Entre com um valor num\\u00e9rico'\"\nInput: dict(divisor=0), Output: \"'Entre com um n\\u00famero diferente de zero'\"\nInput: dict(divisor=\"a\"), Output: \"'Entre com um valor num\\u00e9rico'\"\nInput: dict(divisor=[1, 2, 3]), Output: \"'Entre com um valor num\\u00e9rico'\"\nInput: dict(divisor=13), Output: \"None\"\nInput: dict(divisor=2), Output: \"5.0\"\nInput: dict(divisor=True), Output: \"10.0\"\nInput: dict(divisor={'a': 1}), Output: \"'Entre com um valor num\\u00e9rico'\"\nInput: dict(divisor=10.5), Output: \"0.9523809523809523\"\n\n\nFunction: divisao\n\nWrite a function that generates the output from the input.\n", "id": "114d3d21c652da8b8e0ac6bf0a8029172bfc0640_0"}
{"example_str": "examples = [\n    dict(m=12, n=15),\n    dict(m=24, n=30),\n    dict(m=48, n=18),\n    dict(m=100, n=75),\n    dict(m=7, n=0),\n    dict(m=0, n=12),\n    dict(m=12, n=12),\n    dict(m=25, n=5),\n    dict(m=36, n=24),\n    dict(m=50, n=30),\n]\nexamples += [\n    dict(m=15, n=5),\n    dict(m=36, n=24),\n    dict(m=49, n=14),\n    dict(m=100, n=25),\n    dict(m=21, n=7),\n    dict(m=20, n=15),\n    dict(m=9, n=6),\n    dict(m=35, n=10),\n    dict(m=81, n=27),\n    dict(m=120, n=45)\n]\nexamples += [\n    dict(m=12, n=15),\n    dict(m=100, n=25),\n    dict(m=35, n=14),\n    dict(m=49, n=7),\n    dict(m=56, n=42),\n    dict(m=81, n=27),\n    dict(m=144, n=89),\n    dict(m=101, n=10),\n    dict(m=123, n=321),\n    dict(m=999, n=333)\n]", "code": "def gcd(m, n):\n    if n == 0:\n        return m\n    else:\n        return gcd(n, m % n)\n", "func_name": "gcd", "exec_status": true, "example_inputs": ["\"{'m': 12, 'n': 15}\"", "\"{'m': 24, 'n': 30}\"", "\"{'m': 48, 'n': 18}\"", "\"{'m': 100, 'n': 75}\"", "\"{'m': 7, 'n': 0}\"", "\"{'m': 0, 'n': 12}\"", "\"{'m': 12, 'n': 12}\"", "\"{'m': 25, 'n': 5}\"", "\"{'m': 36, 'n': 24}\"", "\"{'m': 50, 'n': 30}\""], "example_outputs": [{"return": "\"3\""}, {"return": "\"6\""}, {"return": "\"6\""}, {"return": "\"25\""}, {"return": "\"7\""}, {"return": "\"12\""}, {"return": "\"12\""}, {"return": "\"5\""}, {"return": "\"12\""}, {"return": "\"10\""}, {"return": "\"5\""}, {"return": "\"12\""}, {"return": "\"7\""}, {"return": "\"25\""}, {"return": "\"7\""}, {"return": "\"5\""}, {"return": "\"3\""}, {"return": "\"5\""}, {"return": "\"27\""}, {"return": "\"15\""}, {"return": "\"3\""}, {"return": "\"25\""}, {"return": "\"7\""}, {"return": "\"7\""}, {"return": "\"14\""}, {"return": "\"27\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"333\""}], "parsed_inputs": [[["m", "12"], ["n", "15"]], [["m", "24"], ["n", "30"]], [["m", "48"], ["n", "18"]], [["m", "100"], ["n", "75"]], [["m", "7"], ["n", "0"]], [["m", "0"], ["n", "12"]], [["m", "12"], ["n", "12"]], [["m", "25"], ["n", "5"]], [["m", "36"], ["n", "24"]], [["m", "50"], ["n", "30"]]], "exec_code": "def gcd(m, n):\n    if n == 0:\n        return m\n    else:\n        return gcd(n, m % n)\n", "output": "The function is:\n\n```python\ndef gcd(m, n):\n    if n == 0:\n        return m\n    else:\n        return gcd(n, m % n)\n\n```", "choosed_example_idx": [6, 0, 3, 8, 9], "prompt": "Write a function that generates the output from the input.\n\nFunction: gcd\n\nInput: dict(m=12, n=12), Output: \"12\"\nInput: dict(m=12, n=15), Output: \"3\"\nInput: dict(m=100, n=75), Output: \"25\"\nInput: dict(m=36, n=24), Output: \"12\"\nInput: dict(m=50, n=30), Output: \"10\"\n\n", "id": "0391eb21e1b758dccea69de886d9a817f3f01665_0"}
{"example_str": "examples = [\n    dict(intervals=[]),\n    dict(intervals=[[1, 3]]),\n    dict(intervals=[[1, 3], [2, 4]]),\n    dict(intervals=[[1, 3], [2, 4], [3, 5]]),\n    dict(intervals=[[1, 2], [2, 3], [3, 4]]),\n    dict(intervals=[[1, 5], [2, 3], [4, 6]]),\n    dict(intervals=[[1, 2], [3, 4], [5, 6]]),\n    dict(intervals=[[1, 3], [1, 3], [1, 3]]),\n    dict(intervals=[[5, 10], [3, 7], [1, 5]]),\n    dict(intervals=[[1, 10], [2, 9], [3, 8], [4, 7], [5, 6]])\n]\nexamples += [\n    dict(intervals=[]),\n    dict(intervals=[(1, 3)]),\n    dict(intervals=[(1, 3), (2, 5)]),\n    dict(intervals=[(1, 3), (4, 6)]),\n    dict(intervals=[(1, 3), (3, 5), (5, 7)]),\n    dict(intervals=[(1, 10), (2, 5), (6, 9)]),\n    dict(intervals=[(5, 7), (1, 2), (3, 4)]),\n    dict(intervals=[(10, 15), (5, 10), (1, 5)]),\n    dict(intervals=[(1, 2), (2, 3), (3, 4), (4, 5)]),\n    dict(intervals=[(1, 3), (2, 6), (4, 7), (5, 8)])\n]\nexamples += [\n    dict(intervals=[]),\n    dict(intervals=[(1, 3)]),\n    dict(intervals=[(1, 3), (2, 5)]),\n    dict(intervals=[(1, 3), (4, 6)]),\n    dict(intervals=[(1, 3), (3, 5), (5, 7)]),\n    dict(intervals=[(1, 3), (2, 6), (4, 7)]),\n    dict(intervals=[(10, 15), (12, 20), (20, 25)]),\n    dict(intervals=[(1, 2), (3, 4), (5, 6), (7, 8)]),\n    dict(intervals=[(1, 10), (2, 5), (3, 8)]),\n    dict(intervals=[(0, 2), (2, 4), (4, 6), (6, 8), (8, 10)])\n]", "code": "def min_points(intervals):\n    points_lst = []\n    if len(intervals) == 0:\n        return points_lst\n    sorted_intervals = sorted(intervals)\n    finish = sorted_intervals[0][1]\n    for s, f in sorted_intervals:\n        if s <= finish:\n            finish = min(finish, f)\n        else:\n            points_lst.append(finish)\n            finish = f\n    points_lst.append(finish)\n    return points_lst\n", "func_name": "min_points", "exec_status": true, "example_inputs": ["\"{'intervals': []}\"", "\"{'intervals': [[1, 3]]}\"", "\"{'intervals': [[1, 3], [2, 4]]}\"", "\"{'intervals': [[1, 3], [2, 4], [3, 5]]}\"", "\"{'intervals': [[1, 2], [2, 3], [3, 4]]}\"", "\"{'intervals': [[1, 5], [2, 3], [4, 6]]}\"", "\"{'intervals': [[1, 2], [3, 4], [5, 6]]}\"", "\"{'intervals': [[1, 3], [1, 3], [1, 3]]}\"", "\"{'intervals': [[5, 10], [3, 7], [1, 5]]}\"", "\"{'intervals': [[1, 10], [2, 9], [3, 8], [4, 7], [5, 6]]}\""], "example_outputs": [{"return": "\"[]\""}, {"return": "\"[3]\""}, {"return": "\"[3]\""}, {"return": "\"[3]\""}, {"return": "\"[2, 4]\""}, {"return": "\"[3, 6]\""}, {"return": "\"[2, 4, 6]\""}, {"return": "\"[3]\""}, {"return": "\"[5]\""}, {"return": "\"[6]\""}, {"return": "\"[]\""}, {"return": "\"[3]\""}, {"return": "\"[3]\""}, {"return": "\"[3, 6]\""}, {"return": "\"[3, 7]\""}, {"return": "\"[5, 9]\""}, {"return": "\"[2, 4, 7]\""}, {"return": "\"[5, 15]\""}, {"return": "\"[2, 4]\""}, {"return": "\"[3, 7]\""}, {"return": "\"[]\""}, {"return": "\"[3]\""}, {"return": "\"[3]\""}, {"return": "\"[3, 6]\""}, {"return": "\"[3, 7]\""}, {"return": "\"[3, 7]\""}, {"return": "\"[15, 25]\""}, {"return": "\"[2, 4, 6, 8]\""}, {"return": "\"[5]\""}, {"return": "\"[2, 6, 10]\""}], "parsed_inputs": [[["intervals", "[]"]], [["intervals", "[[1, 3]]"]], [["intervals", "[[1, 3], [2, 4]]"]], [["intervals", "[[1, 3], [2, 4], [3, 5]]"]], [["intervals", "[[1, 2], [2, 3], [3, 4]]"]], [["intervals", "[[1, 5], [2, 3], [4, 6]]"]], [["intervals", "[[1, 2], [3, 4], [5, 6]]"]], [["intervals", "[[1, 3], [1, 3], [1, 3]]"]], [["intervals", "[[5, 10], [3, 7], [1, 5]]"]], [["intervals", "[[1, 10], [2, 9], [3, 8], [4, 7], [5, 6]]"]]], "exec_code": "def min_points(intervals):\n    points_lst = []\n    if len(intervals) == 0:\n        return points_lst\n    sorted_intervals = sorted(intervals)\n    finish = sorted_intervals[0][1]\n    for s, f in sorted_intervals:\n        if s <= finish:\n            finish = min(finish, f)\n        else:\n            points_lst.append(finish)\n            finish = f\n    points_lst.append(finish)\n    return points_lst\n", "output": "The function is:\n\n```python\ndef min_points(intervals):\n    points_lst = []\n    if len(intervals) == 0:\n        return points_lst\n    sorted_intervals = sorted(intervals)\n    finish = sorted_intervals[0][1]\n    for s, f in sorted_intervals:\n        if s <= finish:\n            finish = min(finish, f)\n        else:\n            points_lst.append(finish)\n            finish = f\n    points_lst.append(finish)\n    return points_lst\n\n```", "choosed_example_idx": [0, 4, 7, 6, 1, 5, 8, 3], "prompt": "Write a function that generates the output from the input.\nInput: dict(intervals=[]), Output: \"[]\"\nInput: dict(intervals=[[1, 2], [2, 3], [3, 4]]), Output: \"[2, 4]\"\nInput: dict(intervals=[[1, 3], [1, 3], [1, 3]]), Output: \"[3]\"\nInput: dict(intervals=[[1, 2], [3, 4], [5, 6]]), Output: \"[2, 4, 6]\"\nInput: dict(intervals=[[1, 3]]), Output: \"[3]\"\nInput: dict(intervals=[[1, 5], [2, 3], [4, 6]]), Output: \"[3, 6]\"\nInput: dict(intervals=[[5, 10], [3, 7], [1, 5]]), Output: \"[5]\"\nInput: dict(intervals=[[1, 3], [2, 4], [3, 5]]), Output: \"[3]\"\n\n\nFunction: min_points\n\n\n", "id": "43c2382ceb3700c9337c58ee6f7ed1b61fa553ad_0"}
{"example_str": "examples = [\n    dict(team='Duke', year='2022'),\n    dict(team='North Carolina', year='2021'),\n    dict(team='Kentucky', year='2020'),\n    dict(team='Gonzaga', year='2019'),\n    dict(team='Virginia', year='2018'),\n    dict(team='Villanova', year='2017'),\n    dict(team='North Carolina', year='2016'),\n    dict(team='Villanova', year='2015'),\n    dict(team='Duke', year='2014'),\n    dict(team='Connecticut', year='2013'),\n]\nexamples += [\n    dict(team=\"Lakers\", year=2022),\n    dict(team=\"Warriors\", year=2021),\n    dict(team=\"Celtics\", year=2020),\n    dict(team=\"Bulls\", year=1996),\n    dict(team=\"Heat\", year=2012),\n    dict(team=\"Spurs\", year=2014),\n    dict(team=\"Rockets\", year=1995),\n    dict(team=\"Mavericks\", year=2011),\n    dict(team=\"Pistons\", year=2004),\n    dict(team=\"Suns\", year=2023)\n]\nexamples += [\n    dict(team='Lakers', year=2022),\n    dict(team='Bulls', year=1996),\n    dict(team='Warriors', year=2015),\n    dict(team='Celtics', year=1986),\n    dict(team='Spurs', year=2003),\n    dict(team='Heat', year=2013),\n    dict(team='Pistons', year=2004),\n    dict(team='Rockets', year=1994),\n    dict(team='Mavericks', year=2011),\n    dict(team='Cavaliers', year=2016),\n]", "code": "def build_url(team, year):\n    return 'https://kenpom.com/team.php?team=%s&y=%s' % (team, year)\n", "func_name": "build_url", "exec_status": true, "example_inputs": ["\"{'team': 'Duke', 'year': '2022'}\"", "\"{'team': 'North Carolina', 'year': '2021'}\"", "\"{'team': 'Kentucky', 'year': '2020'}\"", "\"{'team': 'Gonzaga', 'year': '2019'}\"", "\"{'team': 'Virginia', 'year': '2018'}\"", "\"{'team': 'Villanova', 'year': '2017'}\"", "\"{'team': 'North Carolina', 'year': '2016'}\"", "\"{'team': 'Villanova', 'year': '2015'}\"", "\"{'team': 'Duke', 'year': '2014'}\"", "\"{'team': 'Connecticut', 'year': '2013'}\""], "example_outputs": [{"return": "\"'https://kenpom.com/team.php?team=Duke&y=2022'\""}, {"return": "\"'https://kenpom.com/team.php?team=North Carolina&y=2021'\""}, {"return": "\"'https://kenpom.com/team.php?team=Kentucky&y=2020'\""}, {"return": "\"'https://kenpom.com/team.php?team=Gonzaga&y=2019'\""}, {"return": "\"'https://kenpom.com/team.php?team=Virginia&y=2018'\""}, {"return": "\"'https://kenpom.com/team.php?team=Villanova&y=2017'\""}, {"return": "\"'https://kenpom.com/team.php?team=North Carolina&y=2016'\""}, {"return": "\"'https://kenpom.com/team.php?team=Villanova&y=2015'\""}, {"return": "\"'https://kenpom.com/team.php?team=Duke&y=2014'\""}, {"return": "\"'https://kenpom.com/team.php?team=Connecticut&y=2013'\""}, {"return": "\"'https://kenpom.com/team.php?team=Lakers&y=2022'\""}, {"return": "\"'https://kenpom.com/team.php?team=Warriors&y=2021'\""}, {"return": "\"'https://kenpom.com/team.php?team=Celtics&y=2020'\""}, {"return": "\"'https://kenpom.com/team.php?team=Bulls&y=1996'\""}, {"return": "\"'https://kenpom.com/team.php?team=Heat&y=2012'\""}, {"return": "\"'https://kenpom.com/team.php?team=Spurs&y=2014'\""}, {"return": "\"'https://kenpom.com/team.php?team=Rockets&y=1995'\""}, {"return": "\"'https://kenpom.com/team.php?team=Mavericks&y=2011'\""}, {"return": "\"'https://kenpom.com/team.php?team=Pistons&y=2004'\""}, {"return": "\"'https://kenpom.com/team.php?team=Suns&y=2023'\""}, {"return": "\"'https://kenpom.com/team.php?team=Lakers&y=2022'\""}, {"return": "\"'https://kenpom.com/team.php?team=Bulls&y=1996'\""}, {"return": "\"'https://kenpom.com/team.php?team=Warriors&y=2015'\""}, {"return": "\"'https://kenpom.com/team.php?team=Celtics&y=1986'\""}, {"return": "\"'https://kenpom.com/team.php?team=Spurs&y=2003'\""}, {"return": "\"'https://kenpom.com/team.php?team=Heat&y=2013'\""}, {"return": "\"'https://kenpom.com/team.php?team=Pistons&y=2004'\""}, {"return": "\"'https://kenpom.com/team.php?team=Rockets&y=1994'\""}, {"return": "\"'https://kenpom.com/team.php?team=Mavericks&y=2011'\""}, {"return": "\"'https://kenpom.com/team.php?team=Cavaliers&y=2016'\""}], "parsed_inputs": [[["team", "\"Duke\""], ["year", "\"2022\""]], [["team", "\"North Carolina\""], ["year", "\"2021\""]], [["team", "\"Kentucky\""], ["year", "\"2020\""]], [["team", "\"Gonzaga\""], ["year", "\"2019\""]], [["team", "\"Virginia\""], ["year", "\"2018\""]], [["team", "\"Villanova\""], ["year", "\"2017\""]], [["team", "\"North Carolina\""], ["year", "\"2016\""]], [["team", "\"Villanova\""], ["year", "\"2015\""]], [["team", "\"Duke\""], ["year", "\"2014\""]], [["team", "\"Connecticut\""], ["year", "\"2013\""]]], "exec_code": "def build_url(team, year):\n    return 'https://kenpom.com/team.php?team=%s&y=%s' % (team, year)\n", "output": "The function is:\n\n```python\ndef build_url(team, year):\n    return 'https://kenpom.com/team.php?team=%s&y=%s' % (team, year)\n\n```", "choosed_example_idx": [0, 2, 8, 4, 6], "prompt": "Input: dict(team=\"Duke\", year=\"2022\"), Output: \"'https://kenpom.com/team.php?team=Duke&y=2022'\"\nInput: dict(team=\"Kentucky\", year=\"2020\"), Output: \"'https://kenpom.com/team.php?team=Kentucky&y=2020'\"\nInput: dict(team=\"Duke\", year=\"2014\"), Output: \"'https://kenpom.com/team.php?team=Duke&y=2014'\"\nInput: dict(team=\"Virginia\", year=\"2018\"), Output: \"'https://kenpom.com/team.php?team=Virginia&y=2018'\"\nInput: dict(team=\"North Carolina\", year=\"2016\"), Output: \"'https://kenpom.com/team.php?team=North Carolina&y=2016'\"\n\nFunction: build_url\nWrite a function that generates the output from the input.\n\n", "id": "d022dbcc0b4135b092857a8eb50a9f323d917bac_0"}
{"example_str": "examples = [\n    dict(length=5),\n    dict(length=10),\n    dict(length=1),\n    dict(length=20),\n    dict(length=0),\n    dict(length=3),\n    dict(length=7),\n    dict(length=15),\n    dict(length=25),\n    dict(length=30),\n]\nexamples += [\n    {\"length\": 0},  # Edge case, no comparison\n    {\"length\": 1},  # Minimal comparison, assumes S and T are at least 1 character long\n    {\"length\": 5},  # Standard case, assumes S and T are at least 5 characters long\n    {\"length\": 10}, # Larger case, assumes S and T are at least 10 characters long\n    {\"length\": 3},  # Assumes S and T are at least 3 characters long\n    {\"length\": 2},  # Assumes S and T are at least 2 characters long\n    {\"length\": 8},  # Assumes S and T are at least 8 characters long\n    {\"length\": 15}, # Assumes S and T are at least 15 characters long\n    {\"length\": 20}, # Assumes S and T are at least 20 characters long\n    {\"length\": 6}   # Assumes S and T are at least 6 characters long\n]", "code": "def search(length):\n    num = 0\n    for tmp in range(length):\n        if S[tmp] != T[tmp]:\n            num += 1\n        else:\n            pass\n    return num\n", "func_name": "search", "exec_status": true, "example_inputs": ["\"{'length': 5}\"", "\"{'length': 10}\"", "\"{'length': 1}\"", "\"{'length': 20}\"", "\"{'length': 0}\"", "\"{'length': 3}\"", "\"{'length': 7}\"", "\"{'length': 15}\"", "\"{'length': 25}\"", "\"{'length': 30}\""], "example_outputs": [{"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'S' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'S' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'S' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'S' is not defined\""}, {"return": "\"0\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'S' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'S' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'S' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'S' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'S' is not defined\""}, {"return": "\"0\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'S' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'S' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'S' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'S' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'S' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'S' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'S' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'S' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'S' is not defined\""}], "parsed_inputs": [[["length", "5"]], [["length", "10"]], [["length", "1"]], [["length", "20"]], [["length", "0"]], [["length", "3"]], [["length", "7"]], [["length", "15"]], [["length", "25"]], [["length", "30"]]], "exec_code": "def search(length):\n    num = 0\n    for tmp in range(length):\n        if S[tmp] != T[tmp]:\n            num += 1\n        else:\n            pass\n    return num\n", "output": "The function is:\n\n```python\ndef search(length):\n    num = 0\n    for tmp in range(length):\n        if S[tmp] != T[tmp]:\n            num += 1\n        else:\n            pass\n    return num\n\n```", "choosed_example_idx": [4, 5, 6, 8, 3, 7, 0, 9, 2], "prompt": "Input: dict(length=0), Output: \"0\"\nInput: dict(length=3), Output: \"<class 'NameError'>: name 'S' is not defined\"\nInput: dict(length=7), Output: \"<class 'NameError'>: name 'S' is not defined\"\nInput: dict(length=25), Output: \"<class 'NameError'>: name 'S' is not defined\"\nInput: dict(length=20), Output: \"<class 'NameError'>: name 'S' is not defined\"\nInput: dict(length=15), Output: \"<class 'NameError'>: name 'S' is not defined\"\nInput: dict(length=5), Output: \"<class 'NameError'>: name 'S' is not defined\"\nInput: dict(length=30), Output: \"<class 'NameError'>: name 'S' is not defined\"\nInput: dict(length=1), Output: \"<class 'NameError'>: name 'S' is not defined\"\n\n\n\nFunction: search\nWrite a function that generates the output from the input.\n", "id": "84b7b9eab11935b1bbc1abbcc4507b0d45be4afd_0"}
{"example_str": "examples = [\n    dict(mapping={'a': 'b.yaml', 'c': 'd'}),\n    dict(mapping={'x': 'y', 'z': {'p': 'q'}}),\n    dict(mapping={'foo': 'bar.yaml', 'baz': 123}),\n    dict(mapping={'hello': 'world', 'foo': {'bar': 'baz'}}),\n    dict(mapping={'a': 'b', 'c': {'d': 'e.yaml'}}),\n    dict(mapping={'x': 'y.yaml', 'z': {'p': 'q.yaml'}}),\n    dict(mapping={'foo': 'bar', 'baz': {'qux': 'quux'}}),\n    dict(mapping={'hello': 'world.yaml', 'foo': {'bar': 'baz'}}),\n    dict(mapping={'a': 'b', 'c': {'d': {'e': 'f.yaml'}}}),\n    dict(mapping={'x': 'y', 'z': {'p': {'q': 'r.yaml'}}}),\n]\nexamples += [\n    # Example 1: Simple dictionary with string values\n    dict(mapping={\"config\": \"settings.yaml\", \"version\": \"1.0\"}),\n\n    # Example 2: Nested dictionary with a mix of string and dictionary\n    dict(mapping={\"data\": {\"file\": \"data.yaml\", \"type\": \"yaml\"}, \"log\": \"log.txt\"}),\n\n    # Example 3: Dictionary with non-string and non-dictionary values\n    dict(mapping={\"count\": 10, \"users\": [\"user1.yaml\", \"user2.yaml\"]}),\n\n    # Example 4: Dictionary with all values as YAML files\n    dict(mapping={\"config\": \"config.yaml\", \"data\": \"data.yaml\"}),\n\n    # Example 5: Empty dictionary\n    dict(mapping={}),\n\n    # Example 6: Dictionary with nested dictionaries\n    dict(mapping={\"outer\": {\"inner\": {\"file\": \"inner.yaml\"}}}),\n\n    # Example 7: Dictionary with mixed file types and non-file strings\n    dict(mapping={\"setup\": \"setup.yaml\", \"cleanup\": \"cleanup.sh\"}),\n\n    # Example 8: Dictionary with integers and lists as values\n    dict(mapping={\"threshold\": 5, \"parameters\": [1, 2, 3]}),\n\n    # Example 9: Dictionary with deep nesting and mixed types\n    dict(mapping={\"level1\": {\"level2\": {\"config\": \"config.yaml\", \"value\": 42}}}),\n\n    # Example 10: Dictionary with incorrect file extension but correct type\n    dict(mapping={\"script\": \"script.py\", \"config\": \"wrong_extension.txt\"})\n]\nexamples += [\n    dict(mapping={}),\n    dict(mapping={\"config\": \"settings.yaml\"}),\n    dict(mapping={\"data\": \"data.yaml\", \"log\": \"log.txt\"}),\n    dict(mapping={\"nested\": {\"inner\": \"inner.yaml\"}}),\n    dict(mapping={\"multiple\": {\"config1\": \"config1.yaml\", \"config2\": \"config2.yaml\"}}),\n    dict(mapping={\"mixed\": {\"yaml\": \"file.yaml\", \"txt\": \"file.txt\", \"dict\": {\"subkey\": \"subvalue\"}}}),\n    dict(mapping={\"deep\": {\"level1\": {\"level2\": {\"config\": \"deep.yaml\"}}}}),\n    dict(mapping={\"array\": [\"list\", \"of\", \"strings\"], \"file\": \"example.yaml\"}),\n    dict(mapping={\"number\": 123, \"boolean\": True, \"none\": None}),\n    dict(mapping={\"complex\": {\"part1\": \"part1.yaml\", \"part2\": {\"subpart\": \"subpart.yaml\"}}})\n]", "code": "def loadImports(mapping):\n    loaded = mapping.copy()\n    parsed = {}\n    for key, value in loaded.items():\n        if isinstance(value, str):\n            if value.split('.')[-1] == 'yaml' and lookForFile(value\n                ) is not None:\n                parsed[key] = loadImports(loadYAML(value))\n            else:\n                parsed[key] = value\n        elif isinstance(value, dict):\n            parsed[key] = loadImports(value)\n        else:\n            parsed[key] = value\n    return parsed\n", "func_name": "loadImports", "exec_status": true, "example_inputs": ["\"{'mapping': {'a': 'b.yaml', 'c': 'd'}}\"", "\"{'mapping': {'x': 'y', 'z': {'p': 'q'}}}\"", "\"{'mapping': {'foo': 'bar.yaml', 'baz': 123}}\"", "\"{'mapping': {'hello': 'world', 'foo': {'bar': 'baz'}}}\"", "\"{'mapping': {'a': 'b', 'c': {'d': 'e.yaml'}}}\"", "\"{'mapping': {'x': 'y.yaml', 'z': {'p': 'q.yaml'}}}\"", "\"{'mapping': {'foo': 'bar', 'baz': {'qux': 'quux'}}}\"", "\"{'mapping': {'hello': 'world.yaml', 'foo': {'bar': 'baz'}}}\"", "\"{'mapping': {'a': 'b', 'c': {'d': {'e': 'f.yaml'}}}}\"", "\"{'mapping': {'x': 'y', 'z': {'p': {'q': 'r.yaml'}}}}\""], "example_outputs": [{"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'lookForFile' is not defined\""}, {"return": "\"{'x': 'y', 'z': {'p': 'q'}}\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'lookForFile' is not defined\""}, {"return": "\"{'hello': 'world', 'foo': {'bar': 'baz'}}\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'lookForFile' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'lookForFile' is not defined\""}, {"return": "\"{'foo': 'bar', 'baz': {'qux': 'quux'}}\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'lookForFile' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'lookForFile' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'lookForFile' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'lookForFile' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'lookForFile' is not defined\""}, {"return": "\"{'count': 10, 'users': ['user1.yaml', 'user2.yaml']}\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'lookForFile' is not defined\""}, {"return": "\"{}\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'lookForFile' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'lookForFile' is not defined\""}, {"return": "\"{'threshold': 5, 'parameters': [1, 2, 3]}\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'lookForFile' is not defined\""}, {"return": "\"{'script': 'script.py', 'config': 'wrong_extension.txt'}\""}, {"return": "\"{}\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'lookForFile' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'lookForFile' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'lookForFile' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'lookForFile' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'lookForFile' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'lookForFile' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'lookForFile' is not defined\""}, {"return": "\"{'number': 123, 'boolean': True, 'none': None}\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'lookForFile' is not defined\""}], "parsed_inputs": [[["mapping", "{'a': 'b.yaml', 'c': 'd'}"]], [["mapping", "{'x': 'y', 'z': {'p': 'q'}}"]], [["mapping", "{'foo': 'bar.yaml', 'baz': 123}"]], [["mapping", "{'hello': 'world', 'foo': {'bar': 'baz'}}"]], [["mapping", "{'a': 'b', 'c': {'d': 'e.yaml'}}"]], [["mapping", "{'x': 'y.yaml', 'z': {'p': 'q.yaml'}}"]], [["mapping", "{'foo': 'bar', 'baz': {'qux': 'quux'}}"]], [["mapping", "{'hello': 'world.yaml', 'foo': {'bar': 'baz'}}"]], [["mapping", "{'a': 'b', 'c': {'d': {'e': 'f.yaml'}}}"]], [["mapping", "{'x': 'y', 'z': {'p': {'q': 'r.yaml'}}}"]]], "exec_code": "def loadImports(mapping):\n    loaded = mapping.copy()\n    parsed = {}\n    for key, value in loaded.items():\n        if isinstance(value, str):\n            if value.split('.')[-1] == 'yaml' and lookForFile(value\n                ) is not None:\n                parsed[key] = loadImports(loadYAML(value))\n            else:\n                parsed[key] = value\n        elif isinstance(value, dict):\n            parsed[key] = loadImports(value)\n        else:\n            parsed[key] = value\n    return parsed\n", "output": "The function is:\n\n```python\ndef loadImports(mapping):\n    loaded = mapping.copy()\n    parsed = {}\n    for key, value in loaded.items():\n        if isinstance(value, str):\n            if value.split('.')[-1] == 'yaml' and lookForFile(value\n                ) is not None:\n                parsed[key] = loadImports(loadYAML(value))\n            else:\n                parsed[key] = value\n        elif isinstance(value, dict):\n            parsed[key] = loadImports(value)\n        else:\n            parsed[key] = value\n    return parsed\n\n```", "choosed_example_idx": [1, 3, 7, 2, 0, 5, 8, 6], "prompt": "Input: dict(mapping={'x': 'y', 'z': {'p': 'q'}}), Output: \"{'x': 'y', 'z': {'p': 'q'}}\"\nInput: dict(mapping={'hello': 'world', 'foo': {'bar': 'baz'}}), Output: \"{'hello': 'world', 'foo': {'bar': 'baz'}}\"\nInput: dict(mapping={'hello': 'world.yaml', 'foo': {'bar': 'baz'}}), Output: \"<class 'NameError'>: name 'lookForFile' is not defined\"\nInput: dict(mapping={'foo': 'bar.yaml', 'baz': 123}), Output: \"<class 'NameError'>: name 'lookForFile' is not defined\"\nInput: dict(mapping={'a': 'b.yaml', 'c': 'd'}), Output: \"<class 'NameError'>: name 'lookForFile' is not defined\"\nInput: dict(mapping={'x': 'y.yaml', 'z': {'p': 'q.yaml'}}), Output: \"<class 'NameError'>: name 'lookForFile' is not defined\"\nInput: dict(mapping={'a': 'b', 'c': {'d': {'e': 'f.yaml'}}}), Output: \"<class 'NameError'>: name 'lookForFile' is not defined\"\nInput: dict(mapping={'foo': 'bar', 'baz': {'qux': 'quux'}}), Output: \"{'foo': 'bar', 'baz': {'qux': 'quux'}}\"\n\nFunction: loadImports\nWrite a function that generates the output from the input.\n", "id": "ee0403d0d087ba2878c71c20f735a72c31181930_0"}
{"example_str": "examples = [\n    dict(n=[1, 2, 3, 4, 5, 6, 7, 8, 9], k=[0.1, 0.2, 0.3, 0.4, 0.5, 0.6]),\n    dict(n=[10, 20, 30, 40, 50, 60, 70, 80, 90], k=[0.01, 0.02, 0.03, 0.04, 0.05, 0.06]),\n    dict(n=[1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9], k=[1, 2, 3, 4, 5, 6]),\n    dict(n=[100, 200, 300, 400, 500, 600, 700, 800, 900], k=[10, 20, 30, 40, 50, 60]),\n    dict(n=[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], k=[0.001, 0.002, 0.003, 0.004, 0.005, 0.006]),\n    dict(n=[11, 22, 33, 44, 55, 66, 77, 88, 99], k=[11, 22, 33, 44, 55, 66]),\n    dict(n=[111, 222, 333, 444, 555, 666, 777, 888, 999], k=[111, 222, 333, 444, 555, 666]),\n    dict(n=[1.11, 2.22, 3.33, 4.44, 5.55, 6.66, 7.77, 8.88, 9.99], k=[1.1, 2.2, 3.3, 4.4, 5.5, 6.6]),\n    dict(n=[1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000], k=[1000, 2000, 3000, 4000, 5000, 6000]),\n    dict(n=[0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09], k=[0.01, 0.02, 0.03, 0.04, 0.05, 0.06]),\n]\nexamples += [\n    dict(n=(1, 2, 3, 4, 5, 6, 7, 8, 9), k=(0.1, 0.2, 0.3, 0.4, 0.5, 0.6)),\n    dict(n=(10, 20, 30, 40, 50, 60, 70, 80, 90), k=(1, 2, 3, 4, 5, 6)),\n    dict(n=(0, 0, 0, 0, 0, 0, 0, 0, 0), k=(0.01, 0.02, 0.03, 0.04, 0.05, 0.06)),\n    dict(n=(100, 200, 300, 400, 500, 600, 700, 800, 900), k=(0.5, 1, 1.5, 2, 2.5, 3)),\n    dict(n=(2, 4, 6, 8, 10, 12, 14, 16, 18), k=(0.1, 0.1, 0.1, 0.1, 0.1, 0.1)),\n    dict(n=(3, 6, 9, 12, 15, 18, 21, 24, 27), k=(0.05, 0.1, 0.15, 0.2, 0.25, 0.3)),\n    dict(n=(5, 10, 15, 20, 25, 30, 35, 40, 45), k=(0.2, 0.4, 0.6, 0.8, 1, 1.2)),\n    dict(n=(7, 14, 21, 28, 35, 42, 49, 56, 63), k=(0.3, 0.6, 0.9, 1.2, 1.5, 1.8)),\n    dict(n=(9, 18, 27, 36, 45, 54, 63, 72, 81), k=(0.25, 0.5, 0.75, 1, 1.25, 1.5)),\n    dict(n=(11, 22, 33, 44, 55, 66, 77, 88, 99), k=(0.15, 0.3, 0.45, 0.6, 0.75, 0.9))\n]\nexamples += [\n    dict(n=(1, 2, 3, 4, 5, 6, 7, 8, 9), k=(0.1, 0.2, 0.3, 0.4, 0.5, 0.6)),\n    dict(n=(2, 3, 4, 5, 6, 7, 8, 9, 10), k=(0.2, 0.3, 0.4, 0.5, 0.6, 0.7)),\n    dict(n=(3, 4, 5, 6, 7, 8, 9, 10, 11), k=(0.3, 0.4, 0.5, 0.6, 0.7, 0.8)),\n    dict(n=(4, 5, 6, 7, 8, 9, 10, 11, 12), k=(0.4, 0.5, 0.6, 0.7, 0.8, 0.9)),\n    dict(n=(5, 6, 7, 8, 9, 10, 11, 12, 13), k=(0.5, 0.6, 0.7, 0.8, 0.9, 1.0)),\n    dict(n=(6, 7, 8, 9, 10, 11, 12, 13, 14), k=(0.6, 0.7, 0.8, 0.9, 1.0, 1.1)),\n    dict(n=(7, 8, 9, 10, 11, 12, 13, 14, 15), k=(0.7, 0.8, 0.9, 1.0, 1.1, 1.2)),\n    dict(n=(8, 9, 10, 11, 12, 13, 14, 15, 16), k=(0.8, 0.9, 1.0, 1.1, 1.2, 1.3)),\n    dict(n=(9, 10, 11, 12, 13, 14, 15, 16, 17), k=(0.9, 1.0, 1.1, 1.2, 1.3, 1.4)),\n    dict(n=(10, 11, 12, 13, 14, 15, 16, 17, 18), k=(1.0, 1.1, 1.2, 1.3, 1.4, 1.5))\n]", "code": "def get_r(n, k):\n    \"\"\"\n        Helper function for the Gillespie algorithm.\n        Gets the relative reaction probabilites.\n    \"\"\"\n    HY, HE, HYF, HEF, SY, SE, D, V, I = n\n    r = [k[0] * HY * SY, k[0] * HY * SE, k[0] * HYF * SY, k[0] * HYF * SE, \n        k[1] * HE * SY, k[1] * HE * SE, k[1] * HEF * SY, k[1] * HEF * SE, k\n        [2] * SY, k[3] * SE, k[4] * SY, k[4] * SE, k[5] * HY * V, k[5] * HE * V\n        ]\n    return r\n", "func_name": "get_r", "exec_status": true, "example_inputs": ["\"{'n': [1, 2, 3, 4, 5, 6, 7, 8, 9], 'k': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6]}\"", "\"{'n': [10, 20, 30, 40, 50, 60, 70, 80, 90], 'k': [0.01, 0.02, 0.03, 0.04, 0.05, 0.06]}\"", "\"{'n': [1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9], 'k': [1, 2, 3, 4, 5, 6]}\"", "\"{'n': [100, 200, 300, 400, 500, 600, 700, 800, 900], 'k': [10, 20, 30, 40, 50, 60]}\"", "\"{'n': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], 'k': [0.001, 0.002, 0.003, 0.004, 0.005, 0.006]}\"", "\"{'n': [11, 22, 33, 44, 55, 66, 77, 88, 99], 'k': [11, 22, 33, 44, 55, 66]}\"", "\"{'n': [111, 222, 333, 444, 555, 666, 777, 888, 999], 'k': [111, 222, 333, 444, 555, 666]}\"", "\"{'n': [1.11, 2.22, 3.33, 4.44, 5.55, 6.66, 7.77, 8.88, 9.99], 'k': [1.1, 2.2, 3.3, 4.4, 5.5, 6.6]}\"", "\"{'n': [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000], 'k': [1000, 2000, 3000, 4000, 5000, 6000]}\"", "\"{'n': [0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09], 'k': [0.01, 0.02, 0.03, 0.04, 0.05, 0.06]}\""], "example_outputs": [{"return": "\"[0.5, 0.6000000000000001, 1.5000000000000002, 1.8000000000000003, 2.0, 2.4000000000000004, 4.0, 4.800000000000001, 1.5, 2.4000000000000004, 2.5, 3.0, 4.8, 9.6]\""}, {"return": "\"[5.0, 6.0, 15.0, 18.0, 20.0, 24.0, 40.0, 48.0, 1.5, 2.4, 2.5, 3.0, 48.0, 96.0]\""}, {"return": "\"[6.050000000000001, 7.26, 18.15, 21.779999999999998, 24.200000000000003, 29.04, 48.400000000000006, 58.08, 16.5, 26.4, 27.5, 33.0, 58.08000000000001, 116.16000000000003]\""}, {"return": "\"[500000, 600000, 1500000, 1800000, 2000000, 2400000, 4000000, 4800000, 15000, 24000, 25000, 30000, 4800000, 9600000]\""}, {"return": "\"[5e-05, 6e-05, 0.00015, 0.00017999999999999998, 0.0002, 0.00024, 0.0004, 0.00048, 0.0015, 0.0024, 0.0025, 0.003, 0.00048000000000000007, 0.0009600000000000001]\""}, {"return": "\"[6655, 7986, 19965, 23958, 26620, 31944, 53240, 63888, 1815, 2904, 3025, 3630, 63888, 127776]\""}, {"return": "\"[6838155, 8205786, 20514465, 24617358, 27352620, 32823144, 54705240, 65646288, 184815, 295704, 308025, 369630, 65646288, 131292576]\""}, {"return": "\"[6.776550000000001, 8.131860000000001, 20.32965, 24.395580000000002, 27.106200000000005, 32.527440000000006, 54.21240000000001, 65.05488000000001, 18.314999999999998, 29.304000000000002, 30.525, 36.63, 65.05488000000001, 130.10976000000002]\""}, {"return": "\"[5000000000, 6000000000, 15000000000, 18000000000, 20000000000, 24000000000, 40000000000, 48000000000, 15000000, 24000000, 25000000, 30000000, 48000000000, 96000000000]\""}, {"return": "\"[5e-06, 6e-06, 1.4999999999999999e-05, 1.7999999999999997e-05, 2e-05, 2.4e-05, 4e-05, 4.8e-05, 0.0015, 0.0024, 0.0025000000000000005, 0.003, 4.7999999999999994e-05, 9.599999999999999e-05]\""}, {"return": "\"[0.5, 0.6000000000000001, 1.5000000000000002, 1.8000000000000003, 2.0, 2.4000000000000004, 4.0, 4.800000000000001, 1.5, 2.4000000000000004, 2.5, 3.0, 4.8, 9.6]\""}, {"return": "\"[500, 600, 1500, 1800, 2000, 2400, 4000, 4800, 150, 240, 250, 300, 4800, 9600]\""}, {"return": "\"[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\""}, {"return": "\"[25000.0, 30000.0, 75000.0, 90000.0, 100000, 120000, 200000, 240000, 750.0, 1200, 1250.0, 1500.0, 240000, 480000]\""}, {"return": "\"[2.0, 2.4000000000000004, 6.000000000000001, 7.200000000000001, 4.0, 4.800000000000001, 8.0, 9.600000000000001, 1.0, 1.2000000000000002, 1.0, 1.2000000000000002, 3.2, 6.4]\""}, {"return": "\"[2.2500000000000004, 2.7, 6.75, 8.1, 9.000000000000002, 10.8, 18.000000000000004, 21.6, 2.25, 3.6, 3.75, 4.5, 21.599999999999998, 43.199999999999996]\""}, {"return": "\"[25.0, 30.0, 75.0, 90.0, 100.0, 120.0, 200.0, 240.0, 15.0, 24.0, 25, 30, 240.0, 480.0]\""}, {"return": "\"[73.5, 88.2, 220.5, 264.59999999999997, 294.0, 352.8, 588.0, 705.6, 31.5, 50.4, 52.5, 63.0, 705.6, 1411.2]\""}, {"return": "\"[101.25, 121.5, 303.75, 364.5, 405.0, 486.0, 810.0, 972.0, 33.75, 54, 56.25, 67.5, 972.0, 1944.0]\""}, {"return": "\"[90.75, 108.89999999999999, 272.25, 326.7, 363.0, 435.59999999999997, 726.0, 871.1999999999999, 24.75, 39.6, 41.25, 49.5, 871.2, 1742.4]\""}, {"return": "\"[0.5, 0.6000000000000001, 1.5000000000000002, 1.8000000000000003, 2.0, 2.4000000000000004, 4.0, 4.800000000000001, 1.5, 2.4000000000000004, 2.5, 3.0, 4.8, 9.6]\""}, {"return": "\"[2.4000000000000004, 2.8000000000000003, 4.800000000000001, 5.6000000000000005, 5.3999999999999995, 6.299999999999999, 9.0, 10.5, 2.4000000000000004, 3.5, 3.5999999999999996, 4.2, 12.6, 18.9]\""}, {"return": "\"[6.299999999999999, 7.199999999999999, 10.5, 12.0, 11.200000000000001, 12.8, 16.800000000000004, 19.200000000000003, 3.5, 4.8, 4.8999999999999995, 5.6, 24.000000000000004, 32.0]\""}, {"return": "\"[12.8, 14.4, 19.200000000000003, 21.6, 20.0, 22.5, 28.0, 31.5, 4.8, 6.3, 6.4, 7.2, 39.6, 49.5]\""}, {"return": "\"[22.5, 25.0, 31.5, 35.0, 32.4, 36.0, 43.199999999999996, 48.0, 6.3, 8.0, 8.1, 9.0, 60.0, 72.0]\""}, {"return": "\"[36.0, 39.599999999999994, 48.0, 52.8, 48.99999999999999, 53.89999999999999, 63.0, 69.3, 8.0, 9.9, 10.0, 11.0, 85.80000000000001, 100.10000000000001]\""}, {"return": "\"[53.89999999999999, 58.8, 69.3, 75.6, 70.4, 76.80000000000001, 88.0, 96.0, 9.9, 12.0, 12.100000000000001, 13.200000000000001, 117.60000000000001, 134.4]\""}, {"return": "\"[76.80000000000001, 83.2, 96.0, 104.0, 97.19999999999999, 105.3, 118.80000000000001, 128.70000000000002, 12.0, 14.3, 14.399999999999999, 15.6, 156.0, 175.50000000000003]\""}, {"return": "\"[105.3, 113.39999999999999, 128.70000000000002, 138.6, 130.0, 140.0, 156.0, 168.0, 14.3, 16.8, 16.900000000000002, 18.2, 201.6, 224.0]\""}, {"return": "\"[140.0, 150.0, 168.0, 180.0, 169.40000000000003, 181.50000000000003, 200.20000000000002, 214.5, 16.8, 19.5, 19.599999999999998, 21.0, 255.0, 280.5]\""}], "parsed_inputs": [[["n", "[1, 2, 3, 4, 5, 6, 7, 8, 9]"], ["k", "[0.1, 0.2, 0.3, 0.4, 0.5, 0.6]"]], [["n", "[10, 20, 30, 40, 50, 60, 70, 80, 90]"], ["k", "[0.01, 0.02, 0.03, 0.04, 0.05, 0.06]"]], [["n", "[1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9]"], ["k", "[1, 2, 3, 4, 5, 6]"]], [["n", "[100, 200, 300, 400, 500, 600, 700, 800, 900]"], ["k", "[10, 20, 30, 40, 50, 60]"]], [["n", "[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]"], ["k", "[0.001, 0.002, 0.003, 0.004, 0.005, 0.006]"]], [["n", "[11, 22, 33, 44, 55, 66, 77, 88, 99]"], ["k", "[11, 22, 33, 44, 55, 66]"]], [["n", "[111, 222, 333, 444, 555, 666, 777, 888, 999]"], ["k", "[111, 222, 333, 444, 555, 666]"]], [["n", "[1.11, 2.22, 3.33, 4.44, 5.55, 6.66, 7.77, 8.88, 9.99]"], ["k", "[1.1, 2.2, 3.3, 4.4, 5.5, 6.6]"]], [["n", "[1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000]"], ["k", "[1000, 2000, 3000, 4000, 5000, 6000]"]], [["n", "[0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09]"], ["k", "[0.01, 0.02, 0.03, 0.04, 0.05, 0.06]"]]], "exec_code": "def get_r(n, k):\n    \"\"\"\n        Helper function for the Gillespie algorithm.\n        Gets the relative reaction probabilites.\n    \"\"\"\n    HY, HE, HYF, HEF, SY, SE, D, V, I = n\n    r = [k[0] * HY * SY, k[0] * HY * SE, k[0] * HYF * SY, k[0] * HYF * SE, \n        k[1] * HE * SY, k[1] * HE * SE, k[1] * HEF * SY, k[1] * HEF * SE, k\n        [2] * SY, k[3] * SE, k[4] * SY, k[4] * SE, k[5] * HY * V, k[5] * HE * V\n        ]\n    return r\n", "output": "The function is:\n\n```python\ndef get_r(n, k):\n    \"\"\"\n        Helper function for the Gillespie algorithm.\n        Gets the relative reaction probabilites.\n    \"\"\"\n    HY, HE, HYF, HEF, SY, SE, D, V, I = n\n    r = [k[0] * HY * SY, k[0] * HY * SE, k[0] * HYF * SY, k[0] * HYF * SE, \n        k[1] * HE * SY, k[1] * HE * SE, k[1] * HEF * SY, k[1] * HEF * SE, k\n        [2] * SY, k[3] * SE, k[4] * SY, k[4] * SE, k[5] * HY * V, k[5] * HE * V\n        ]\n    return r\n\n```", "choosed_example_idx": [8, 9, 2, 1, 3, 5, 6, 4, 7], "prompt": "Write a function that generates the output from the input.\nFunction: get_r\nInput: dict(n=[1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000], k=[1000, 2000, 3000, 4000, 5000, 6000]), Output: \"[5000000000, 6000000000, 15000000000, 18000000000, 20000000000, 24000000000, 40000000000, 48000000000, 15000000, 24000000, 25000000, 30000000, 48000000000, 96000000000]\"\nInput: dict(n=[0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09], k=[0.01, 0.02, 0.03, 0.04, 0.05, 0.06]), Output: \"[5e-06, 6e-06, 1.4999999999999999e-05, 1.7999999999999997e-05, 2e-05, 2.4e-05, 4e-05, 4.8e-05, 0.0015, 0.0024, 0.0025000000000000005, 0.003, 4.7999999999999994e-05, 9.599999999999999e-05]\"\nInput: dict(n=[1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9], k=[1, 2, 3, 4, 5, 6]), Output: \"[6.050000000000001, 7.26, 18.15, 21.779999999999998, 24.200000000000003, 29.04, 48.400000000000006, 58.08, 16.5, 26.4, 27.5, 33.0, 58.08000000000001, 116.16000000000003]\"\nInput: dict(n=[10, 20, 30, 40, 50, 60, 70, 80, 90], k=[0.01, 0.02, 0.03, 0.04, 0.05, 0.06]), Output: \"[5.0, 6.0, 15.0, 18.0, 20.0, 24.0, 40.0, 48.0, 1.5, 2.4, 2.5, 3.0, 48.0, 96.0]\"\nInput: dict(n=[100, 200, 300, 400, 500, 600, 700, 800, 900], k=[10, 20, 30, 40, 50, 60]), Output: \"[500000, 600000, 1500000, 1800000, 2000000, 2400000, 4000000, 4800000, 15000, 24000, 25000, 30000, 4800000, 9600000]\"\nInput: dict(n=[11, 22, 33, 44, 55, 66, 77, 88, 99], k=[11, 22, 33, 44, 55, 66]), Output: \"[6655, 7986, 19965, 23958, 26620, 31944, 53240, 63888, 1815, 2904, 3025, 3630, 63888, 127776]\"\nInput: dict(n=[111, 222, 333, 444, 555, 666, 777, 888, 999], k=[111, 222, 333, 444, 555, 666]), Output: \"[6838155, 8205786, 20514465, 24617358, 27352620, 32823144, 54705240, 65646288, 184815, 295704, 308025, 369630, 65646288, 131292576]\"\nInput: dict(n=[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], k=[0.001, 0.002, 0.003, 0.004, 0.005, 0.006]), Output: \"[5e-05, 6e-05, 0.00015, 0.00017999999999999998, 0.0002, 0.00024, 0.0004, 0.00048, 0.0015, 0.0024, 0.0025, 0.003, 0.00048000000000000007, 0.0009600000000000001]\"\nInput: dict(n=[1.11, 2.22, 3.33, 4.44, 5.55, 6.66, 7.77, 8.88, 9.99], k=[1.1, 2.2, 3.3, 4.4, 5.5, 6.6]), Output: \"[6.776550000000001, 8.131860000000001, 20.32965, 24.395580000000002, 27.106200000000005, 32.527440000000006, 54.21240000000001, 65.05488000000001, 18.314999999999998, 29.304000000000002, 30.525, 36.63, 65.05488000000001, 130.10976000000002]\"\n\n\n", "id": "addf9025f1fa1ac4e05c90cd2c338d0478b8d438_0"}
{"example_str": "examples = [\n    {'nome': 'John', 'idade': 25, 'salario': 5000.0, 'sexo': 'm', 'estadocivil': 's'},\n    {'nome': 'Jane', 'idade': 30, 'salario': 6000.0, 'sexo': 'f', 'estadocivil': 'c'},\n    {'nome': 'Bob', 'idade': 40, 'salario': 7000.0, 'sexo': 'm', 'estadocivil': 'v'},\n    {'nome': 'Alice', 'idade': 20, 'salario': 4000.0, 'sexo': 'f', 'estadocivil': 's'},\n    {'nome': 'Charlie', 'idade': 50, 'salario': 8000.0, 'sexo': 'm', 'estadocivil': 'd'},\n    {'nome': 'Eve', 'idade': 35, 'salario': 5500.0, 'sexo': 'f', 'estadocivil': 'c'},\n    {'nome': 'Frank', 'idade': 45, 'salario': 6500.0, 'sexo': 'm', 'estadocivil': 'v'},\n    {'nome': 'Gabriela', 'idade': 28, 'salario': 4800.0, 'sexo': 'f', 'estadocivil': 's'},\n    {'nome': 'Hector', 'idade': 60, 'salario': 9000.0, 'sexo': 'm', 'estadocivil': 'd'},\n    {'nome': 'Ivan', 'idade': 18, 'salario': 3800.0, 'sexo': 'm', 'estadocivil': 's'}\n]\nexamples += [\n    dict(nome=\"Alice\", idade=25, salario=3000.50, sexo='f', estadocivil='s'),\n    dict(nome=\"Bob\", idade=30, salario=4500.00, sexo='m', estadocivil='c'),\n    dict(nome=\"Charlie\", idade=28, salario=5000.00, sexo='m', estadocivil='d'),\n    dict(nome=\"Diana\", idade=45, salario=6500.75, sexo='f', estadocivil='v'),\n    dict(nome=\"Eve\", idade=22, salario=3200.00, sexo='f', estadocivil='s'),\n    dict(nome=\"Frank\", idade=60, salario=7000.00, sexo='m', estadocivil='c'),\n    dict(nome=\"Grace\", idade=35, salario=8000.00, sexo='f', estadocivil='d'),\n    dict(nome=\"Henry\", idade=42, salario=5500.50, sexo='m', estadocivil='v'),\n    dict(nome=\"Ivy\", idade=55, salario=4800.25, sexo='f', estadocivil='c'),\n    dict(nome=\"Jack\", idade=33, salario=3900.00, sexo='m', estadocivil='s')\n]\nexamples += [\n    dict(nome=\"Ana\", idade=25, salario=3000.50, sexo='f', estadocivil='s'),\n    dict(nome=\"Bob\", idade=34, salario=4500, sexo='m', estadocivil='c'),\n    dict(nome=\"Carlos\", idade=22, salario=2200.75, sexo='m', estadocivil='s'),\n    dict(nome=\"Diana\", idade=29, salario=3500.00, sexo='f', estadocivil='v'),\n    dict(nome=\"Eva\", idade=45, salario=5000, sexo='f', estadocivil='d'),\n    dict(nome=\"Frank\", idade=55, salario=5500.25, sexo='m', estadocivil='c'),\n    dict(nome=\"Gina\", idade=31, salario=2900.80, sexo='f', estadocivil='s'),\n    dict(nome=\"Hank\", idade=42, salario=4800, sexo='m', estadocivil='v'),\n    dict(nome=\"Ivy\", idade=37, salario=4100.90, sexo='f', estadocivil='d'),\n    dict(nome=\"Jack\", idade=26, salario=3200, sexo='m', estadocivil='s')\n]", "code": "def validaDados(nome, idade, salario, sexo, estadocivil):\n    if len(nome) > 3 and idade > -1 and idade < 151 and salario > 0 and (\n        sexo == 'f' or sexo == 'm') and (estadocivil == 's' or estadocivil ==\n        'c' or estadocivil == 'v' or estadocivil == 'd'):\n        print('dados lidos com sucesso')\n        return True\n    else:\n        print('algum dado incorreto')\n        return False\n", "func_name": "validaDados", "exec_status": true, "example_inputs": ["\"{'nome': 'John', 'idade': 25, 'salario': 5000.0, 'sexo': 'm', 'estadocivil': 's'}\"", "\"{'nome': 'Jane', 'idade': 30, 'salario': 6000.0, 'sexo': 'f', 'estadocivil': 'c'}\"", "\"{'nome': 'Bob', 'idade': 40, 'salario': 7000.0, 'sexo': 'm', 'estadocivil': 'v'}\"", "\"{'nome': 'Alice', 'idade': 20, 'salario': 4000.0, 'sexo': 'f', 'estadocivil': 's'}\"", "\"{'nome': 'Charlie', 'idade': 50, 'salario': 8000.0, 'sexo': 'm', 'estadocivil': 'd'}\"", "\"{'nome': 'Eve', 'idade': 35, 'salario': 5500.0, 'sexo': 'f', 'estadocivil': 'c'}\"", "\"{'nome': 'Frank', 'idade': 45, 'salario': 6500.0, 'sexo': 'm', 'estadocivil': 'v'}\"", "\"{'nome': 'Gabriela', 'idade': 28, 'salario': 4800.0, 'sexo': 'f', 'estadocivil': 's'}\"", "\"{'nome': 'Hector', 'idade': 60, 'salario': 9000.0, 'sexo': 'm', 'estadocivil': 'd'}\"", "\"{'nome': 'Ivan', 'idade': 18, 'salario': 3800.0, 'sexo': 'm', 'estadocivil': 's'}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}], "parsed_inputs": [[["nome", "\"John\""], ["idade", "25"], ["salario", "5000.0"], ["sexo", "\"m\""], ["estadocivil", "\"s\""]], [["nome", "\"Jane\""], ["idade", "30"], ["salario", "6000.0"], ["sexo", "\"f\""], ["estadocivil", "\"c\""]], [["nome", "\"Bob\""], ["idade", "40"], ["salario", "7000.0"], ["sexo", "\"m\""], ["estadocivil", "\"v\""]], [["nome", "\"Alice\""], ["idade", "20"], ["salario", "4000.0"], ["sexo", "\"f\""], ["estadocivil", "\"s\""]], [["nome", "\"Charlie\""], ["idade", "50"], ["salario", "8000.0"], ["sexo", "\"m\""], ["estadocivil", "\"d\""]], [["nome", "\"Eve\""], ["idade", "35"], ["salario", "5500.0"], ["sexo", "\"f\""], ["estadocivil", "\"c\""]], [["nome", "\"Frank\""], ["idade", "45"], ["salario", "6500.0"], ["sexo", "\"m\""], ["estadocivil", "\"v\""]], [["nome", "\"Gabriela\""], ["idade", "28"], ["salario", "4800.0"], ["sexo", "\"f\""], ["estadocivil", "\"s\""]], [["nome", "\"Hector\""], ["idade", "60"], ["salario", "9000.0"], ["sexo", "\"m\""], ["estadocivil", "\"d\""]], [["nome", "\"Ivan\""], ["idade", "18"], ["salario", "3800.0"], ["sexo", "\"m\""], ["estadocivil", "\"s\""]]], "exec_code": "def validaDados(nome, idade, salario, sexo, estadocivil):\n    if len(nome) > 3 and idade > -1 and idade < 151 and salario > 0 and (\n        sexo == 'f' or sexo == 'm') and (estadocivil == 's' or estadocivil ==\n        'c' or estadocivil == 'v' or estadocivil == 'd'):\n        print('dados lidos com sucesso')\n        return True\n    else:\n        print('algum dado incorreto')\n        return False\n", "output": "The function is:\n\n```python\ndef validaDados(nome, idade, salario, sexo, estadocivil):\n    if len(nome) > 3 and idade > -1 and idade < 151 and salario > 0 and (\n        sexo == 'f' or sexo == 'm') and (estadocivil == 's' or estadocivil ==\n        'c' or estadocivil == 'v' or estadocivil == 'd'):\n        print('dados lidos com sucesso')\n        return True\n    else:\n        print('algum dado incorreto')\n        return False\n\n```", "choosed_example_idx": [4, 1, 5, 6, 9, 2], "prompt": "Write a function that generates the output from the input.\n\nFunction: validaDados\nInput: dict(nome=\"Charlie\", idade=50, salario=8000.0, sexo=\"m\", estadocivil=\"d\"), Output: \"True\"\nInput: dict(nome=\"Jane\", idade=30, salario=6000.0, sexo=\"f\", estadocivil=\"c\"), Output: \"True\"\nInput: dict(nome=\"Eve\", idade=35, salario=5500.0, sexo=\"f\", estadocivil=\"c\"), Output: \"False\"\nInput: dict(nome=\"Frank\", idade=45, salario=6500.0, sexo=\"m\", estadocivil=\"v\"), Output: \"True\"\nInput: dict(nome=\"Ivan\", idade=18, salario=3800.0, sexo=\"m\", estadocivil=\"s\"), Output: \"True\"\nInput: dict(nome=\"Bob\", idade=40, salario=7000.0, sexo=\"m\", estadocivil=\"v\"), Output: \"False\"\n\n\n", "id": "3ae9f1d0ec138b561f55a601ae37a8d22ffc022e_0"}
{"example_str": "examples = [\n    dict(sent=\"Hello World\"),\n    dict(sent=\"__EU__ hello\"),\n    dict(sent=\"this is a test\"),\n    dict(sent=\"__SU__ THIS IS A TEST\"),\n    dict(sent=\"\"),\n    dict(sent=\"__EMS__\"),\n    dict(sent=\"123 ABC\"),\n    dict(sent=\"__SMS__ abc def\"),\n    dict(sent=\"Übermensch\"),\n    dict(sent=\"__SI__ Übermensch\")\n]\nexamples += [\n    dict(sent=\"Hello World\"),  # First alpha is 'H' (uppercase)\n    dict(sent=\"__EU__hello world\"),  # First alpha after removing '__EU__' is 'h' (not uppercase)\n    dict(sent=\"1234__EMAIL__Test string\"),  # First alpha after removing '__EMAIL__' is 'T' (uppercase)\n    dict(sent=\"no capitals\"),  # First alpha is 'n' (not uppercase)\n    dict(sent=\"\"),  # No alphabetic characters\n    dict(sent=\"__URI__URI__\"),  # Special strings only, no alphabetic characters after removal\n    dict(sent=\"123456\"),  # No alphabetic characters\n    dict(sent=\"Mixed__SB__Case\"),  # First alpha after removing '__SB__' is 'C' (uppercase)\n    dict(sent=\"__FIG1234__lowercase\"),  # First alpha after removing '__FIG1234__' is 'l' (not uppercase)\n    dict(sent=\"UPPERCASE WITH SPACES\")  # First alpha is 'U' (uppercase)\n]\nexamples += [\n    dict(sent=\"Hello World\"),  # First alpha is 'H' (uppercase)\n    dict(sent=\"hello world\"),  # First alpha is 'h' (not uppercase)\n    dict(sent=\"__EU__Hello World\"),  # Special string removed, first alpha is 'H'\n    dict(sent=\"__EU__hello world\"),  # Special string removed, first alpha is 'h'\n    dict(sent=\"1234!@#$Hello\"),  # Non-alpha characters ignored, first alpha is 'H'\n    dict(sent=\"1234!@#$hello\"),  # Non-alpha characters ignored, first alpha is 'h'\n    dict(sent=\"__EMAIL__This is a test.\"),  # Special string removed, first alpha is 'T'\n    dict(sent=\"__EMAIL__this is a test.\"),  # Special string removed, first alpha is 't'\n    dict(sent=\"\"),  # Empty string, no alpha characters\n    dict(sent=\"__URI__12345\"),  # Special string removed, no alpha characters\n]", "code": "def first_alpha_is_upper(sent):\n    specials = ['__EU__', '__SU__', '__EMS__', '__SMS__', '__SI__', '__ESB',\n        '__SSB__', '__EB__', '__SB__', '__EI__', '__EA__', '__SA__',\n        '__SQ__', '__EQ__', '__EXTLINK', '__XREF', '__URI', '__EMAIL',\n        '__ARRAY', '__TABLE', '__FIG', '__AWID', '__FUNDS']\n    for special in specials:\n        sent = sent.replace(special, '')\n    for c in sent:\n        if c.isalpha():\n            if c.isupper():\n                return True\n            else:\n                return False\n    return False\n", "func_name": "first_alpha_is_upper", "exec_status": true, "example_inputs": ["\"{'sent': 'Hello World'}\"", "\"{'sent': '__EU__ hello'}\"", "\"{'sent': 'this is a test'}\"", "\"{'sent': '__SU__ THIS IS A TEST'}\"", "\"{'sent': ''}\"", "\"{'sent': '__EMS__'}\"", "\"{'sent': '123 ABC'}\"", "\"{'sent': '__SMS__ abc def'}\"", "\"{'sent': '\\u00dcbermensch'}\"", "\"{'sent': '__SI__ \\u00dcbermensch'}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}], "parsed_inputs": [[["sent", "\"Hello World\""]], [["sent", "\"__EU__ hello\""]], [["sent", "\"this is a test\""]], [["sent", "\"__SU__ THIS IS A TEST\""]], [["sent", "\"\""]], [["sent", "\"__EMS__\""]], [["sent", "\"123 ABC\""]], [["sent", "\"__SMS__ abc def\""]], [["sent", "\"\\u00dcbermensch\""]], [["sent", "\"__SI__ \\u00dcbermensch\""]]], "exec_code": "def first_alpha_is_upper(sent):\n    specials = ['__EU__', '__SU__', '__EMS__', '__SMS__', '__SI__', '__ESB',\n        '__SSB__', '__EB__', '__SB__', '__EI__', '__EA__', '__SA__',\n        '__SQ__', '__EQ__', '__EXTLINK', '__XREF', '__URI', '__EMAIL',\n        '__ARRAY', '__TABLE', '__FIG', '__AWID', '__FUNDS']\n    for special in specials:\n        sent = sent.replace(special, '')\n    for c in sent:\n        if c.isalpha():\n            if c.isupper():\n                return True\n            else:\n                return False\n    return False\n", "output": "The function is:\n\n```python\ndef first_alpha_is_upper(sent):\n    specials = ['__EU__', '__SU__', '__EMS__', '__SMS__', '__SI__', '__ESB',\n        '__SSB__', '__EB__', '__SB__', '__EI__', '__EA__', '__SA__',\n        '__SQ__', '__EQ__', '__EXTLINK', '__XREF', '__URI', '__EMAIL',\n        '__ARRAY', '__TABLE', '__FIG', '__AWID', '__FUNDS']\n    for special in specials:\n        sent = sent.replace(special, '')\n    for c in sent:\n        if c.isalpha():\n            if c.isupper():\n                return True\n            else:\n                return False\n    return False\n\n```", "choosed_example_idx": [0, 1, 7, 5, 9, 4], "prompt": "Write a function that generates the output from the input.\nFunction: first_alpha_is_upper\n\nInput: dict(sent=\"Hello World\"), Output: \"True\"\nInput: dict(sent=\"__EU__ hello\"), Output: \"False\"\nInput: dict(sent=\"__SMS__ abc def\"), Output: \"False\"\nInput: dict(sent=\"__EMS__\"), Output: \"False\"\nInput: dict(sent=\"__SI__ \\u00dcbermensch\"), Output: \"True\"\nInput: dict(sent=\"\"), Output: \"False\"\n\n", "id": "0f71c36ea8461c8f86cb4f0a9204774e12938288_0"}
{"example_str": "examples = [\n    dict(arr=[1, 2, 3, 4, 5], n=1),\n    dict(arr=[7, 7, 7, 7, 7], n=5),\n    dict(arr=[1, 2, 7, 7, 7], n=3),\n    dict(arr=[1, 2, 3, 4, 5], n=0),\n    dict(arr=[7, 7, 7, 1, 2], n=3),\n    dict(arr=[1, 1, 1, 1, 1], n=1),\n    dict(arr=[7, 2, 7, 7, 7], n=3),\n    dict(arr=[1, 2, 3, 4, 5], n=10),\n    dict(arr=[7, 7, 7, 7, 7, 7], n=6),\n    dict(arr=[1, 2, 3, 7, 7], n=2),\n]\nexamples += [\n    dict(arr=[7, 7, 7], n=3),\n    dict(arr=[7, 7, 7, 7], n=2),\n    dict(arr=[1, 2, 3, 4, 5], n=1),\n    dict(arr=[7, 8, 7, 7, 9], n=2),\n    dict(arr=[7, 7, 7, 7, 7], n=5),\n    dict(arr=[1, 2, 7, 7, 7, 3, 4], n=3),\n    dict(arr=[7, 6, 7, 6, 7, 6], n=1),\n    dict(arr=[7, 7, 2, 2, 7, 7, 7], n=3),\n    dict(arr=[0, 0, 0, 7, 0], n=1),\n    dict(arr=[7, 7, 7, 7, 7, 7, 7, 7, 7, 7], n=10)\n]\nexamples += [\n    dict(arr=[7, 7, 7], n=3),\n    dict(arr=[1, 2, 7, 7, 7, 8], n=3),\n    dict(arr=[7, 2, 7, 7, 3, 7], n=2),\n    dict(arr=[7, 7, 2, 7, 7, 7], n=3),\n    dict(arr=[7, 7, 7, 7, 7, 7], n=6),\n    dict(arr=[1, 2, 3, 4, 5, 6], n=1),\n    dict(arr=[7, 7, 7, 7, 7, 7], n=4),\n    dict(arr=[7, 1, 7, 1, 7, 1], n=1),\n    dict(arr=[7, 7, 2, 2, 2, 7, 7], n=2),\n    dict(arr=[7, 7, 7, 7, 3, 3, 7, 7, 7], n=4)\n]", "code": "def sevens_in_a_row(arr, n):\n    count = 0\n    for i in range(0, len(arr)):\n        if arr[i] == 7:\n            k = i\n            while k < len(arr) and arr[k] == 7:\n                count = count + 1\n                k = k + 1\n        if count == n:\n            return True\n        else:\n            count = 0\n    return False\n", "func_name": "sevens_in_a_row", "exec_status": true, "example_inputs": ["\"{'arr': [1, 2, 3, 4, 5], 'n': 1}\"", "\"{'arr': [7, 7, 7, 7, 7], 'n': 5}\"", "\"{'arr': [1, 2, 7, 7, 7], 'n': 3}\"", "\"{'arr': [1, 2, 3, 4, 5], 'n': 0}\"", "\"{'arr': [7, 7, 7, 1, 2], 'n': 3}\"", "\"{'arr': [1, 1, 1, 1, 1], 'n': 1}\"", "\"{'arr': [7, 2, 7, 7, 7], 'n': 3}\"", "\"{'arr': [1, 2, 3, 4, 5], 'n': 10}\"", "\"{'arr': [7, 7, 7, 7, 7, 7], 'n': 6}\"", "\"{'arr': [1, 2, 3, 7, 7], 'n': 2}\""], "example_outputs": [{"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}], "parsed_inputs": [[["arr", "[1, 2, 3, 4, 5]"], ["n", "1"]], [["arr", "[7, 7, 7, 7, 7]"], ["n", "5"]], [["arr", "[1, 2, 7, 7, 7]"], ["n", "3"]], [["arr", "[1, 2, 3, 4, 5]"], ["n", "0"]], [["arr", "[7, 7, 7, 1, 2]"], ["n", "3"]], [["arr", "[1, 1, 1, 1, 1]"], ["n", "1"]], [["arr", "[7, 2, 7, 7, 7]"], ["n", "3"]], [["arr", "[1, 2, 3, 4, 5]"], ["n", "10"]], [["arr", "[7, 7, 7, 7, 7, 7]"], ["n", "6"]], [["arr", "[1, 2, 3, 7, 7]"], ["n", "2"]]], "exec_code": "def sevens_in_a_row(arr, n):\n    count = 0\n    for i in range(0, len(arr)):\n        if arr[i] == 7:\n            k = i\n            while k < len(arr) and arr[k] == 7:\n                count = count + 1\n                k = k + 1\n        if count == n:\n            return True\n        else:\n            count = 0\n    return False\n", "output": "The function is:\n\n```python\ndef sevens_in_a_row(arr, n):\n    count = 0\n    for i in range(0, len(arr)):\n        if arr[i] == 7:\n            k = i\n            while k < len(arr) and arr[k] == 7:\n                count = count + 1\n                k = k + 1\n        if count == n:\n            return True\n        else:\n            count = 0\n    return False\n\n```", "choosed_example_idx": [1, 9, 3, 7, 5, 0, 4, 8], "prompt": "Function: sevens_in_a_row\nWrite a function that generates the output from the input.\nInput: dict(arr=[7, 7, 7, 7, 7], n=5), Output: \"True\"\nInput: dict(arr=[1, 2, 3, 7, 7], n=2), Output: \"True\"\nInput: dict(arr=[1, 2, 3, 4, 5], n=0), Output: \"True\"\nInput: dict(arr=[1, 2, 3, 4, 5], n=10), Output: \"False\"\nInput: dict(arr=[1, 1, 1, 1, 1], n=1), Output: \"False\"\nInput: dict(arr=[1, 2, 3, 4, 5], n=1), Output: \"False\"\nInput: dict(arr=[7, 7, 7, 1, 2], n=3), Output: \"True\"\nInput: dict(arr=[7, 7, 7, 7, 7, 7], n=6), Output: \"True\"\n\n", "id": "d453a108ba2e298e3248e326d2466a6af7fbf29e_0"}
{"example_str": "examples = [\n    dict(S='A'),\n    dict(S='B'),\n    dict(S='C'),\n    dict(S='D'),\n    dict(S='E'),\n    dict(S='F'),\n    dict(S='G'),\n    dict(S='H'),\n    dict(S='I'),\n    dict(S='J'),\n]\nexamples += [\n    dict(S='A'),\n    dict(S='B'),\n    dict(S='C'),\n    dict(S=''),\n    dict(S='+BF-AFA-FB+'),\n    dict(S='-AF+BFB+FA-'),\n    dict(S='AB'),\n    dict(S='BA'),\n    dict(S='Hello'),\n    dict(S='123')\n]\nexamples += [\n    dict(S='A'),\n    dict(S='B'),\n    dict(S='C'),\n    dict(S='D'),\n    dict(S='E'),\n    dict(S='F'),\n    dict(S='G'),\n    dict(S='H'),\n    dict(S='I'),\n    dict(S='J'),\n]", "code": "def hilbert_curve_rule(S):\n    if S == 'A':\n        return '+BF-AFA-FB+'\n    if S == 'B':\n        return '-AF+BFB+FA-'\n    else:\n        return S\n", "func_name": "hilbert_curve_rule", "exec_status": true, "example_inputs": ["\"{'S': 'A'}\"", "\"{'S': 'B'}\"", "\"{'S': 'C'}\"", "\"{'S': 'D'}\"", "\"{'S': 'E'}\"", "\"{'S': 'F'}\"", "\"{'S': 'G'}\"", "\"{'S': 'H'}\"", "\"{'S': 'I'}\"", "\"{'S': 'J'}\""], "example_outputs": [{"return": "\"'+BF-AFA-FB+'\""}, {"return": "\"'-AF+BFB+FA-'\""}, {"return": "\"'C'\""}, {"return": "\"'D'\""}, {"return": "\"'E'\""}, {"return": "\"'F'\""}, {"return": "\"'G'\""}, {"return": "\"'H'\""}, {"return": "\"'I'\""}, {"return": "\"'J'\""}, {"return": "\"'+BF-AFA-FB+'\""}, {"return": "\"'-AF+BFB+FA-'\""}, {"return": "\"'C'\""}, {"return": "\"''\""}, {"return": "\"'+BF-AFA-FB+'\""}, {"return": "\"'-AF+BFB+FA-'\""}, {"return": "\"'AB'\""}, {"return": "\"'BA'\""}, {"return": "\"'Hello'\""}, {"return": "\"'123'\""}, {"return": "\"'+BF-AFA-FB+'\""}, {"return": "\"'-AF+BFB+FA-'\""}, {"return": "\"'C'\""}, {"return": "\"'D'\""}, {"return": "\"'E'\""}, {"return": "\"'F'\""}, {"return": "\"'G'\""}, {"return": "\"'H'\""}, {"return": "\"'I'\""}, {"return": "\"'J'\""}], "parsed_inputs": [[["S", "\"A\""]], [["S", "\"B\""]], [["S", "\"C\""]], [["S", "\"D\""]], [["S", "\"E\""]], [["S", "\"F\""]], [["S", "\"G\""]], [["S", "\"H\""]], [["S", "\"I\""]], [["S", "\"J\""]]], "exec_code": "def hilbert_curve_rule(S):\n    if S == 'A':\n        return '+BF-AFA-FB+'\n    if S == 'B':\n        return '-AF+BFB+FA-'\n    else:\n        return S\n", "output": "The function is:\n\n```python\ndef hilbert_curve_rule(S):\n    if S == 'A':\n        return '+BF-AFA-FB+'\n    if S == 'B':\n        return '-AF+BFB+FA-'\n    else:\n        return S\n\n```", "choosed_example_idx": [6, 1, 9, 8, 5, 3, 0, 2], "prompt": "Function: hilbert_curve_rule\nWrite a function that generates the output from the input.\nInput: dict(S=\"G\"), Output: \"'G'\"\nInput: dict(S=\"B\"), Output: \"'-AF+BFB+FA-'\"\nInput: dict(S=\"J\"), Output: \"'J'\"\nInput: dict(S=\"I\"), Output: \"'I'\"\nInput: dict(S=\"F\"), Output: \"'F'\"\nInput: dict(S=\"D\"), Output: \"'D'\"\nInput: dict(S=\"A\"), Output: \"'+BF-AFA-FB+'\"\nInput: dict(S=\"C\"), Output: \"'C'\"\n\n\n\n", "id": "ef4f1ea27d0f666d16b9bfe7dff317eed1f7dd29_0"}
{"example_str": "examples = [\n    dict(rows=[[\"a\", \"b\", \"c\"], [\"d\", \"e\"], [\"f\", \"g\", \"h\", \"i\"]]),\n    dict(rows=[[\"apple\"], [\"banana\", \"orange\"], [\"grape\"]]),\n    dict(rows=[[\"hello\"], [\"world\"]]),\n    dict(rows=[[\"a\"], [\"b\"], [\"c\"], [\"d\"], [\"e\"]]),\n    dict(rows=[[\"this\", \"is\", \"a\", \"test\"], [\"short\"], [\"longer\", \"than\", \"short\"]]),\n    dict(rows=[[\"one\"], [\"two\", \"three\"], [\"four\", \"five\", \"six\"]]),\n    dict(rows=[[\"a\", \"b\", \"c\", \"d\", \"e\"], [\"f\", \"g\"], [\"h\", \"i\", \"j\", \"k\"]]),\n    dict(rows=[[\"short\"], [\"medium\", \"length\"], [\"long\", \"longer\", \"longest\"]]),\n    dict(rows=[[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\", \"d\"], [\"e\", \"f\", \"g\"]]),\n    dict(rows=[[\"first\"], [\"second\", \"third\"], [\"fourth\", \"fifth\", \"sixth\", \"seventh\"]]),\n]\nexamples += [\n    dict(rows=[[\"apple\", \"banana\", \"cherry\"], [\"kiwi\"], [\"melon\", \"grapefruit\"]]),\n    dict(rows=[[\"12345\", \"67890\"], [\"abc\"], [\"de\"]]),\n    dict(rows=[[], [], []]),\n    dict(rows=[[\"a\"], [\"bb\"], [\"ccc\"], [\"dddd\"], [\"eeeee\"]]),\n    dict(rows=[[\"one\", \"two\"], [\"three\"], [\"four\", \"five\", \"six\"]]),\n    dict(rows=[[\"short\"], [\"longer\"], [\"longest of all of these\"]]),\n    dict(rows=[[\"x\"], [\"xx\"], [\"xxx\"], [\"xxxx\"], [\"xxxxx\"], [\"xxxxxx\"]]),\n    dict(rows=[[\"cat\"], [\"hippopotamus\"], [\"dog\"], [\"elephant\"]]),\n    dict(rows=[[\"sun\"], [\"moon\"], [\"stars\"], [\"comet\"], [\"asteroid\"]]),\n    dict(rows=[[\"John\"], [\"Paul\", \"George\", \"Ringo\"]])\n]\nexamples += [\n    dict(rows=[[\"apple\", \"banana\"], [\"grape\"]]),\n    dict(rows=[[\"short\"], [\"longer\", \"list\"], [\"medium\"]]),\n    dict(rows=[[\"one\"], [\"two\", \"three\"], [\"four\", \"five\", \"six\"]]),\n    dict(rows=[[\"123\"], [\"4567\"], [\"89\"]]),\n    dict(rows=[[\"a\"], [\"bb\"], [\"ccc\"], [\"dddd\"]]),\n    dict(rows=[[\"x\"], [\"xy\", \"yz\"], [\"xyz\", \"123\", \"abc\"]]),\n    dict(rows=[[\"cat\"], [\"dog\", \"mouse\"]]),\n    dict(rows=[[\"hello\"], [\"world\"], [\"!\"]]),\n    dict(rows=[[\"single\"]]),\n    dict(rows=[[\"row1\"], [\"row2\", \"row3\"], [\"row4\", \"row5\", \"row6\"], [\"row7\", \"row8\", \"row9\", \"row10\"]])\n]", "code": "def calculate_row_offsets(rows):\n    longest = -1\n    for row in rows:\n        if len(row) > longest:\n            longest = len(row)\n    offsets = []\n    for row in rows:\n        offsets.append((longest - len(row)) / 2)\n    return offsets\n", "func_name": "calculate_row_offsets", "exec_status": true, "example_inputs": ["\"{'rows': [['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h', 'i']]}\"", "\"{'rows': [['apple'], ['banana', 'orange'], ['grape']]}\"", "\"{'rows': [['hello'], ['world']]}\"", "\"{'rows': [['a'], ['b'], ['c'], ['d'], ['e']]}\"", "\"{'rows': [['this', 'is', 'a', 'test'], ['short'], ['longer', 'than', 'short']]}\"", "\"{'rows': [['one'], ['two', 'three'], ['four', 'five', 'six']]}\"", "\"{'rows': [['a', 'b', 'c', 'd', 'e'], ['f', 'g'], ['h', 'i', 'j', 'k']]}\"", "\"{'rows': [['short'], ['medium', 'length'], ['long', 'longer', 'longest']]}\"", "\"{'rows': [['x', 'y', 'z'], ['a', 'b', 'c', 'd'], ['e', 'f', 'g']]}\"", "\"{'rows': [['first'], ['second', 'third'], ['fourth', 'fifth', 'sixth', 'seventh']]}\""], "example_outputs": [{"return": "\"[0.5, 1.0, 0.0]\""}, {"return": "\"[0.5, 0.0, 0.5]\""}, {"return": "\"[0.0, 0.0]\""}, {"return": "\"[0.0, 0.0, 0.0, 0.0, 0.0]\""}, {"return": "\"[0.0, 1.5, 0.5]\""}, {"return": "\"[1.0, 0.5, 0.0]\""}, {"return": "\"[0.0, 1.5, 0.5]\""}, {"return": "\"[1.0, 0.5, 0.0]\""}, {"return": "\"[0.5, 0.0, 0.5]\""}, {"return": "\"[1.5, 1.0, 0.0]\""}, {"return": "\"[0.0, 1.0, 0.5]\""}, {"return": "\"[0.0, 0.5, 0.5]\""}, {"return": "\"[0.0, 0.0, 0.0]\""}, {"return": "\"[0.0, 0.0, 0.0, 0.0, 0.0]\""}, {"return": "\"[0.5, 1.0, 0.0]\""}, {"return": "\"[0.0, 0.0, 0.0]\""}, {"return": "\"[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\""}, {"return": "\"[0.0, 0.0, 0.0, 0.0]\""}, {"return": "\"[0.0, 0.0, 0.0, 0.0, 0.0]\""}, {"return": "\"[1.0, 0.0]\""}, {"return": "\"[0.0, 0.5]\""}, {"return": "\"[0.5, 0.0, 0.5]\""}, {"return": "\"[1.0, 0.5, 0.0]\""}, {"return": "\"[0.0, 0.0, 0.0]\""}, {"return": "\"[0.0, 0.0, 0.0, 0.0]\""}, {"return": "\"[1.0, 0.5, 0.0]\""}, {"return": "\"[0.5, 0.0]\""}, {"return": "\"[0.0, 0.0, 0.0]\""}, {"return": "\"[0.0]\""}, {"return": "\"[1.5, 1.0, 0.5, 0.0]\""}], "parsed_inputs": [[["rows", "[['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h', 'i']]"]], [["rows", "[['apple'], ['banana', 'orange'], ['grape']]"]], [["rows", "[['hello'], ['world']]"]], [["rows", "[['a'], ['b'], ['c'], ['d'], ['e']]"]], [["rows", "[['this', 'is', 'a', 'test'], ['short'], ['longer', 'than', 'short']]"]], [["rows", "[['one'], ['two', 'three'], ['four', 'five', 'six']]"]], [["rows", "[['a', 'b', 'c', 'd', 'e'], ['f', 'g'], ['h', 'i', 'j', 'k']]"]], [["rows", "[['short'], ['medium', 'length'], ['long', 'longer', 'longest']]"]], [["rows", "[['x', 'y', 'z'], ['a', 'b', 'c', 'd'], ['e', 'f', 'g']]"]], [["rows", "[['first'], ['second', 'third'], ['fourth', 'fifth', 'sixth', 'seventh']]"]]], "exec_code": "def calculate_row_offsets(rows):\n    longest = -1\n    for row in rows:\n        if len(row) > longest:\n            longest = len(row)\n    offsets = []\n    for row in rows:\n        offsets.append((longest - len(row)) / 2)\n    return offsets\n", "output": "The function is:\n\n```python\ndef calculate_row_offsets(rows):\n    longest = -1\n    for row in rows:\n        if len(row) > longest:\n            longest = len(row)\n    offsets = []\n    for row in rows:\n        offsets.append((longest - len(row)) / 2)\n    return offsets\n\n```", "choosed_example_idx": [1, 5, 4, 8, 9, 6, 7, 0], "prompt": "Function: calculate_row_offsets\n\n\nInput: dict(rows=[['apple'], ['banana', 'orange'], ['grape']]), Output: \"[0.5, 0.0, 0.5]\"\nInput: dict(rows=[['one'], ['two', 'three'], ['four', 'five', 'six']]), Output: \"[1.0, 0.5, 0.0]\"\nInput: dict(rows=[['this', 'is', 'a', 'test'], ['short'], ['longer', 'than', 'short']]), Output: \"[0.0, 1.5, 0.5]\"\nInput: dict(rows=[['x', 'y', 'z'], ['a', 'b', 'c', 'd'], ['e', 'f', 'g']]), Output: \"[0.5, 0.0, 0.5]\"\nInput: dict(rows=[['first'], ['second', 'third'], ['fourth', 'fifth', 'sixth', 'seventh']]), Output: \"[1.5, 1.0, 0.0]\"\nInput: dict(rows=[['a', 'b', 'c', 'd', 'e'], ['f', 'g'], ['h', 'i', 'j', 'k']]), Output: \"[0.0, 1.5, 0.5]\"\nInput: dict(rows=[['short'], ['medium', 'length'], ['long', 'longer', 'longest']]), Output: \"[1.0, 0.5, 0.0]\"\nInput: dict(rows=[['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h', 'i']]), Output: \"[0.5, 1.0, 0.0]\"\n\n\n\nWrite a function that generates the output from the input.\n\n", "id": "ba3608d10e201e81d9d2a9b3b303ac4c15ba1b78_0"}
{"example_str": "examples = [\n    dict(a=[10, 20, 30]),\n    dict(a=[5, 5, 5]),\n    dict(a=[1, 2, 3, 4, 5]),\n    dict(a=[10, 10, 10, 10]),\n    dict(a=[1]),\n    dict(a=[2, 4, 6, 8, 10]),\n    dict(a=[10, 9, 8, 7, 6]),\n    dict(a=[5, 10, 5, 10, 5]),\n    dict(a=[1, 3, 5, 7, 9]),\n    dict(a=[10, 20, 30, 40, 50]),\n]\nexamples += [\n    dict(a=[10, 20, 30, 40, 50]),  # List with increasing values\n    dict(a=[50, 40, 30, 20, 10]),  # List with decreasing values\n    dict(a=[20, 20, 20, 20, 20]),  # List with all elements the same\n    dict(a=[15, 15, 15, 10, 10]),  # List with two different values\n    dict(a=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),  # List with 10 increasing values\n    dict(a=[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]),  # List with 10 decreasing values\n    dict(a=[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]),  # Large numbers\n    dict(a=[-10, -20, -30, -40, -50]),  # List with negative values\n    dict(a=[5, 10, 15, 20, 25, 5, 10, 15, 20, 25]),  # List with repeated pattern\n    dict(a=[0, 0, 0, 0, 0, 1])  # List with zeros and one different value\n]\nexamples += [\n    dict(a=[1, 2, 3, 4, 5]),\n    dict(a=[10, 20, 30, 40, 50]),\n    dict(a=[5, 5, 5, 5, 5]),\n    dict(a=[2, 4, 6, 8, 10]),\n    dict(a=[100, 90, 80, 70, 60]),\n    dict(a=[1, 1, 2, 2, 3, 3, 4, 4]),\n    dict(a=[-1, -2, -3, -4, -5]),\n    dict(a=[0, 0, 0, 0, 1]),\n    dict(a=[9, 7, 5, 3, 1]),\n    dict(a=[10, 10, 20, 20, 30, 30])\n]", "code": "def fun(a):\n    count = 0\n    for i in range(len(a)):\n        largest = a[0]\n        seclargest = 0\n        for j in range(1, len(a)):\n            if a[j] >= largest:\n                largest = a[j]\n        print(largest)\n        for k in range(len(a)):\n            if a[k] < largest and a[k] != largest:\n                if a[k] >= seclargest:\n                    seclargest = a[k]\n        print(seclargest)\n        diff = largest - seclargest\n        print(diff)\n        for l in range(len(a)):\n            if a[l] == largest:\n                a[l] = a[l] - diff\n                count = count + 1\n        print(a)\n        for i in range(1, len(a)):\n            if a[i] == a[i - 1]:\n                if i == len(a) - 1:\n                    return count\n            else:\n                break\n", "func_name": "fun", "exec_status": true, "example_inputs": ["\"{'a': [10, 20, 30]}\"", "\"{'a': [5, 5, 5]}\"", "\"{'a': [1, 2, 3, 4, 5]}\"", "\"{'a': [10, 10, 10, 10]}\"", "\"{'a': [1]}\"", "\"{'a': [2, 4, 6, 8, 10]}\"", "\"{'a': [10, 9, 8, 7, 6]}\"", "\"{'a': [5, 10, 5, 10, 5]}\"", "\"{'a': [1, 3, 5, 7, 9]}\"", "\"{'a': [10, 20, 30, 40, 50]}\""], "example_outputs": [{"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"10\""}, {"return": "\"4\""}, {"return": "\"None\""}, {"return": "\"10\""}, {"return": "\"10\""}, {"return": "\"2\""}, {"return": "\"10\""}, {"return": "\"10\""}, {"return": "\"10\""}, {"return": "\"10\""}, {"return": "\"5\""}, {"return": "\"3\""}, {"return": "\"45\""}, {"return": "\"45\""}, {"return": "\"45\""}, {"return": "\"None\""}, {"return": "\"20\""}, {"return": "\"1\""}, {"return": "\"10\""}, {"return": "\"10\""}, {"return": "\"5\""}, {"return": "\"10\""}, {"return": "\"10\""}, {"return": "\"12\""}, {"return": "\"None\""}, {"return": "\"1\""}, {"return": "\"10\""}, {"return": "\"6\""}], "parsed_inputs": [[["a", "[10, 20, 30]"]], [["a", "[5, 5, 5]"]], [["a", "[1, 2, 3, 4, 5]"]], [["a", "[10, 10, 10, 10]"]], [["a", "[1]"]], [["a", "[2, 4, 6, 8, 10]"]], [["a", "[10, 9, 8, 7, 6]"]], [["a", "[5, 10, 5, 10, 5]"]], [["a", "[1, 3, 5, 7, 9]"]], [["a", "[10, 20, 30, 40, 50]"]]], "exec_code": "def fun(a):\n    count = 0\n    for i in range(len(a)):\n        largest = a[0]\n        seclargest = 0\n        for j in range(1, len(a)):\n            if a[j] >= largest:\n                largest = a[j]\n        print(largest)\n        for k in range(len(a)):\n            if a[k] < largest and a[k] != largest:\n                if a[k] >= seclargest:\n                    seclargest = a[k]\n        print(seclargest)\n        diff = largest - seclargest\n        print(diff)\n        for l in range(len(a)):\n            if a[l] == largest:\n                a[l] = a[l] - diff\n                count = count + 1\n        print(a)\n        for i in range(1, len(a)):\n            if a[i] == a[i - 1]:\n                if i == len(a) - 1:\n                    return count\n            else:\n                break\n", "output": "The function is:\n\n```python\ndef fun(a):\n    count = 0\n    for i in range(len(a)):\n        largest = a[0]\n        seclargest = 0\n        for j in range(1, len(a)):\n            if a[j] >= largest:\n                largest = a[j]\n        print(largest)\n        for k in range(len(a)):\n            if a[k] < largest and a[k] != largest:\n                if a[k] >= seclargest:\n                    seclargest = a[k]\n        print(seclargest)\n        diff = largest - seclargest\n        print(diff)\n        for l in range(len(a)):\n            if a[l] == largest:\n                a[l] = a[l] - diff\n                count = count + 1\n        print(a)\n        for i in range(1, len(a)):\n            if a[i] == a[i - 1]:\n                if i == len(a) - 1:\n                    return count\n            else:\n                break\n\n```", "choosed_example_idx": [0, 1, 6, 5, 2], "prompt": "Input: dict(a=[10, 20, 30]), Output: \"3\"\nInput: dict(a=[5, 5, 5]), Output: \"3\"\nInput: dict(a=[10, 9, 8, 7, 6]), Output: \"10\"\nInput: dict(a=[2, 4, 6, 8, 10]), Output: \"10\"\nInput: dict(a=[1, 2, 3, 4, 5]), Output: \"10\"\n\n\nFunction: fun\nWrite a function that generates the output from the input.\n", "id": "4a50c3c26a638dab46a93937f30f1ff77585da33_0"}
{"example_str": "examples = [\n    dict(icon='clear-night'),\n    dict(icon='sunny'),\n    dict(icon='cloudy'),\n    dict(icon='rain'),\n    dict(icon='thunderstorm'),\n    dict(icon='snow'),\n    dict(icon='fog'),\n    dict(icon='wind'),\n    dict(icon='hail'),\n    dict(icon='tornado'),\n]\nexamples += [\n    dict(icon='clear-night'),\n    dict(icon='sunny-day'),\n    dict(icon='cloudy'),\n    dict(icon='rain'),\n    dict(icon='snow'),\n    dict(icon='thunderstorm'),\n    dict(icon='fog'),\n    dict(icon='windy'),\n    dict(icon='hail'),\n    dict(icon='sleet')\n]\nexamples += [\n    dict(icon='clear-night'),\n    dict(icon='sunny-day'),\n    dict(icon='rainy'),\n    dict(icon='cloudy'),\n    dict(icon='snow'),\n    dict(icon='storm'),\n    dict(icon='fog'),\n    dict(icon='wind'),\n    dict(icon='hail'),\n    dict(icon='thunder')\n]", "code": "def getIcon(icon):\n    global iconDir\n    if icon == 'clear-night':\n        return str(iconDir + '/night.png')\n", "func_name": "getIcon", "exec_status": true, "example_inputs": ["\"{'icon': 'clear-night'}\"", "\"{'icon': 'sunny'}\"", "\"{'icon': 'cloudy'}\"", "\"{'icon': 'rain'}\"", "\"{'icon': 'thunderstorm'}\"", "\"{'icon': 'snow'}\"", "\"{'icon': 'fog'}\"", "\"{'icon': 'wind'}\"", "\"{'icon': 'hail'}\"", "\"{'icon': 'tornado'}\""], "example_outputs": [{"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'iconDir' is not defined\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'iconDir' is not defined\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'iconDir' is not defined\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}], "parsed_inputs": [[["icon", "\"clear-night\""]], [["icon", "\"sunny\""]], [["icon", "\"cloudy\""]], [["icon", "\"rain\""]], [["icon", "\"thunderstorm\""]], [["icon", "\"snow\""]], [["icon", "\"fog\""]], [["icon", "\"wind\""]], [["icon", "\"hail\""]], [["icon", "\"tornado\""]]], "exec_code": "def getIcon(icon):\n    global iconDir\n    if icon == 'clear-night':\n        return str(iconDir + '/night.png')\n", "output": "The function is:\n\n```python\ndef getIcon(icon):\n    global iconDir\n    if icon == 'clear-night':\n        return str(iconDir + '/night.png')\n\n```", "choosed_example_idx": [3, 8, 9, 5, 7, 0, 1, 2], "prompt": "Function: getIcon\n\n\nWrite a function that generates the output from the input.\nInput: dict(icon=\"rain\"), Output: \"None\"\nInput: dict(icon=\"hail\"), Output: \"None\"\nInput: dict(icon=\"tornado\"), Output: \"None\"\nInput: dict(icon=\"snow\"), Output: \"None\"\nInput: dict(icon=\"wind\"), Output: \"None\"\nInput: dict(icon=\"clear-night\"), Output: \"<class 'NameError'>: name 'iconDir' is not defined\"\nInput: dict(icon=\"sunny\"), Output: \"None\"\nInput: dict(icon=\"cloudy\"), Output: \"None\"\n\n", "id": "787e4d52c1f31dbc713353ddff6e646d8eb33008_0"}
{"example_str": "examples = [\n    dict(account_address='TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv', value=30000000000),\n    dict(account_address='TLWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv', value=40000000000),\n    dict(account_address='TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv'),\n    dict(account_address='TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv', value=20000000000),\n    dict(account_address='TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv', value=50000000000),\n    dict(account_address='TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv', value=10000000000),\n    dict(account_address='TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv', value=60000000000),\n    dict(account_address='TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv', value=70000000000),\n    dict(account_address='TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv', value=80000000000),\n    dict(account_address='TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv', value=90000000000)\n]\nexamples += [\n    dict(account_address='0x123456789ABCDEF', value=50000000000),\n    dict(account_address='0xABCDEF123456789', value=10000000000),\n    dict(account_address='0x1A2B3C4D5E6F7G8H', value=25000000000),\n    dict(account_address='0x1B2B3C4D5E6F7G8H', value=30000000000),\n    dict(account_address='0x1234ABCD5678EF99', value=45000000000),\n    dict(account_address='0x0987654321ABCDEF', value=35000000000),\n    dict(account_address='0xABC123456DEF7890', value=15000000000),\n    dict(account_address='0x1234567890ABCDEF', value=20000000000),\n    dict(account_address='0xDEF123456ABC7890', value=55000000000),\n    dict(account_address='0xABCDEF1234567890')  # Uses the default value of 30000000000\n]", "code": "def getTokens_utils(account_address, value=30000000000):\n    \"\"\"User get tokens on value 300.\"\"\"\n    e = {'txid': 'Error!'}\n    logsOfError = ''\n    try:\n        trigger = tron.transaction_builder.trigger_smart_contract(\n            contract_address=TOKEN_CONTRACT, function_selector=\n            'transfer(address,uint256)', fee_limit=1000000000, call_value=0,\n            parameters=[{'type': 'address', 'value': account_address}, {\n            'type': 'int256', 'value': value}], issuer_address=TOKEN_CREATOR)\n        tron.private_key = TOKEN_CREATOR_PRIVATE_KEY\n        transaction = trigger['transaction']\n        signed1_tx = tron.trx.sign(transaction, True, False)\n        e = tron.trx.broadcast(signed1_tx)\n    except Exception as ex:\n        logsOfError = logsOfError + str(ex)\n    return {'txID': e['txid'], 'logs': logsOfError}\n", "func_name": "getTokens_utils", "exec_status": true, "example_inputs": ["\"{'account_address': 'TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv', 'value': 30000000000}\"", "\"{'account_address': 'TLWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv', 'value': 40000000000}\"", "\"{'account_address': 'TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv'}\"", "\"{'account_address': 'TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv', 'value': 20000000000}\"", "\"{'account_address': 'TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv', 'value': 50000000000}\"", "\"{'account_address': 'TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv', 'value': 10000000000}\"", "\"{'account_address': 'TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv', 'value': 60000000000}\"", "\"{'account_address': 'TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv', 'value': 70000000000}\"", "\"{'account_address': 'TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv', 'value': 80000000000}\"", "\"{'account_address': 'TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv', 'value': 90000000000}\""], "example_outputs": [{"return": "\"{'txID': 'Error!', 'logs': \\\"name 'tron' is not defined\\\"}\""}, {"return": "\"{'txID': 'Error!', 'logs': \\\"name 'tron' is not defined\\\"}\""}, {"return": "\"{'txID': 'Error!', 'logs': \\\"name 'tron' is not defined\\\"}\""}, {"return": "\"{'txID': 'Error!', 'logs': \\\"name 'tron' is not defined\\\"}\""}, {"return": "\"{'txID': 'Error!', 'logs': \\\"name 'tron' is not defined\\\"}\""}, {"return": "\"{'txID': 'Error!', 'logs': \\\"name 'tron' is not defined\\\"}\""}, {"return": "\"{'txID': 'Error!', 'logs': \\\"name 'tron' is not defined\\\"}\""}, {"return": "\"{'txID': 'Error!', 'logs': \\\"name 'tron' is not defined\\\"}\""}, {"return": "\"{'txID': 'Error!', 'logs': \\\"name 'tron' is not defined\\\"}\""}, {"return": "\"{'txID': 'Error!', 'logs': \\\"name 'tron' is not defined\\\"}\""}, {"return": "\"{'txID': 'Error!', 'logs': \\\"name 'tron' is not defined\\\"}\""}, {"return": "\"{'txID': 'Error!', 'logs': \\\"name 'tron' is not defined\\\"}\""}, {"return": "\"{'txID': 'Error!', 'logs': \\\"name 'tron' is not defined\\\"}\""}, {"return": "\"{'txID': 'Error!', 'logs': \\\"name 'tron' is not defined\\\"}\""}, {"return": "\"{'txID': 'Error!', 'logs': \\\"name 'tron' is not defined\\\"}\""}, {"return": "\"{'txID': 'Error!', 'logs': \\\"name 'tron' is not defined\\\"}\""}, {"return": "\"{'txID': 'Error!', 'logs': \\\"name 'tron' is not defined\\\"}\""}, {"return": "\"{'txID': 'Error!', 'logs': \\\"name 'tron' is not defined\\\"}\""}, {"return": "\"{'txID': 'Error!', 'logs': \\\"name 'tron' is not defined\\\"}\""}, {"return": "\"{'txID': 'Error!', 'logs': \\\"name 'tron' is not defined\\\"}\""}], "parsed_inputs": [[["account_address", "\"TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv\""], ["value", "30000000000"]], [["account_address", "\"TLWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv\""], ["value", "40000000000"]], [["account_address", "\"TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv\""]], [["account_address", "\"TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv\""], ["value", "20000000000"]], [["account_address", "\"TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv\""], ["value", "50000000000"]], [["account_address", "\"TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv\""], ["value", "10000000000"]], [["account_address", "\"TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv\""], ["value", "60000000000"]], [["account_address", "\"TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv\""], ["value", "70000000000"]], [["account_address", "\"TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv\""], ["value", "80000000000"]], [["account_address", "\"TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv\""], ["value", "90000000000"]]], "exec_code": "def getTokens_utils(account_address, value=30000000000):\n    \"\"\"User get tokens on value 300.\"\"\"\n    e = {'txid': 'Error!'}\n    logsOfError = ''\n    try:\n        trigger = tron.transaction_builder.trigger_smart_contract(\n            contract_address=TOKEN_CONTRACT, function_selector=\n            'transfer(address,uint256)', fee_limit=1000000000, call_value=0,\n            parameters=[{'type': 'address', 'value': account_address}, {\n            'type': 'int256', 'value': value}], issuer_address=TOKEN_CREATOR)\n        tron.private_key = TOKEN_CREATOR_PRIVATE_KEY\n        transaction = trigger['transaction']\n        signed1_tx = tron.trx.sign(transaction, True, False)\n        e = tron.trx.broadcast(signed1_tx)\n    except Exception as ex:\n        logsOfError = logsOfError + str(ex)\n    return {'txID': e['txid'], 'logs': logsOfError}\n", "output": "The function is:\n\n```python\ndef getTokens_utils(account_address, value=30000000000):\n    \"\"\"User get tokens on value 300.\"\"\"\n    e = {'txid': 'Error!'}\n    logsOfError = ''\n    try:\n        trigger = tron.transaction_builder.trigger_smart_contract(\n            contract_address=TOKEN_CONTRACT, function_selector=\n            'transfer(address,uint256)', fee_limit=1000000000, call_value=0,\n            parameters=[{'type': 'address', 'value': account_address}, {\n            'type': 'int256', 'value': value}], issuer_address=TOKEN_CREATOR)\n        tron.private_key = TOKEN_CREATOR_PRIVATE_KEY\n        transaction = trigger['transaction']\n        signed1_tx = tron.trx.sign(transaction, True, False)\n        e = tron.trx.broadcast(signed1_tx)\n    except Exception as ex:\n        logsOfError = logsOfError + str(ex)\n    return {'txID': e['txid'], 'logs': logsOfError}\n\n```", "choosed_example_idx": [4, 5, 8, 3], "prompt": "Function: getTokens_utils\nWrite a function that generates the output from the input.\n\n\nInput: dict(account_address=\"TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv\", value=50000000000), Output: \"{'txID': 'Error!', 'logs': \\\"name 'tron' is not defined\\\"}\"\nInput: dict(account_address=\"TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv\", value=10000000000), Output: \"{'txID': 'Error!', 'logs': \\\"name 'tron' is not defined\\\"}\"\nInput: dict(account_address=\"TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv\", value=80000000000), Output: \"{'txID': 'Error!', 'logs': \\\"name 'tron' is not defined\\\"}\"\nInput: dict(account_address=\"TJWJG2iVQZBjvX2sX3OQZBjvX2sX3OQZBjv\", value=20000000000), Output: \"{'txID': 'Error!', 'logs': \\\"name 'tron' is not defined\\\"}\"\n\n", "id": "1358c3e5c9c1fbe40ad3fe03fbda33ff994a480e_0"}
{"example_str": "examples = [\n    dict(a=2, b=3),\n    dict(a=4.5, b=1.2),\n    dict(a=-1, b=5),\n    dict(a=0, b=0),\n    dict(a=10, b=-2),\n    dict(a=3.14, b=2.71),\n    dict(a=-5, b=-3),\n    dict(a=7, b=11),\n    dict(a=2.5, b=3.5),\n    dict(a=100, b=200)\n]\nexamples += [\n    dict(a=5, b=3),              # Example with two integers\n    dict(a=10.5, b=2.3),         # Example with two floats\n    dict(a=\"Hello \", b=\"World\"), # Example with two strings\n    dict(a=0, b=0),              # Example with zero values\n    dict(a=-1, b=-1),            # Example with negative integers\n    dict(a=-10.5, b=5.5),        # Example with a negative float and a positive float\n    dict(a=\"123\", b=\"456\"),      # Example with numeric strings\n    dict(a=1.1, b=2.9),          # Example with floats that add up to an integer\n    dict(a=100, b=-100),         # Example with integers that sum to zero\n    dict(a=\"Test \", b=\"123\")     # Example with a string and a numeric string\n]\nexamples += [\n    dict(a=1, b=2),\n    dict(a=3.5, b=2.5),\n    dict(a=-1, b=1),\n    dict(a=0, b=0),\n    dict(a=100, b=200),\n    dict(a=-50, b=50),\n    dict(a='Hello ', b='World'),\n    dict(a='123', b='456'),\n    dict(a=0.1, b=0.2),\n    dict(a=-100, b=100)\n]", "code": "def soma(a, b):\n    y = a + b\n    return y\n", "func_name": "soma", "exec_status": true, "example_inputs": ["\"{'a': 2, 'b': 3}\"", "\"{'a': 4.5, 'b': 1.2}\"", "\"{'a': -1, 'b': 5}\"", "\"{'a': 0, 'b': 0}\"", "\"{'a': 10, 'b': -2}\"", "\"{'a': 3.14, 'b': 2.71}\"", "\"{'a': -5, 'b': -3}\"", "\"{'a': 7, 'b': 11}\"", "\"{'a': 2.5, 'b': 3.5}\"", "\"{'a': 100, 'b': 200}\""], "example_outputs": [{"return": "\"5\""}, {"return": "\"5.7\""}, {"return": "\"4\""}, {"return": "\"0\""}, {"return": "\"8\""}, {"return": "\"5.85\""}, {"return": "\"-8\""}, {"return": "\"18\""}, {"return": "\"6.0\""}, {"return": "\"300\""}, {"return": "\"8\""}, {"return": "\"12.8\""}, {"return": "\"'Hello World'\""}, {"return": "\"0\""}, {"return": "\"-2\""}, {"return": "\"-5.0\""}, {"return": "\"'123456'\""}, {"return": "\"4.0\""}, {"return": "\"0\""}, {"return": "\"'Test 123'\""}, {"return": "\"3\""}, {"return": "\"6.0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"300\""}, {"return": "\"0\""}, {"return": "\"'Hello World'\""}, {"return": "\"'123456'\""}, {"return": "\"0.30000000000000004\""}, {"return": "\"0\""}], "parsed_inputs": [[["a", "2"], ["b", "3"]], [["a", "4.5"], ["b", "1.2"]], [["a", "-1"], ["b", "5"]], [["a", "0"], ["b", "0"]], [["a", "10"], ["b", "-2"]], [["a", "3.14"], ["b", "2.71"]], [["a", "-5"], ["b", "-3"]], [["a", "7"], ["b", "11"]], [["a", "2.5"], ["b", "3.5"]], [["a", "100"], ["b", "200"]]], "exec_code": "def soma(a, b):\n    y = a + b\n    return y\n", "output": "The function is:\n\n```python\ndef soma(a, b):\n    y = a + b\n    return y\n\n```", "choosed_example_idx": [8, 0, 7, 5, 6], "prompt": "Input: dict(a=2.5, b=3.5), Output: \"6.0\"\nInput: dict(a=2, b=3), Output: \"5\"\nInput: dict(a=7, b=11), Output: \"18\"\nInput: dict(a=3.14, b=2.71), Output: \"5.85\"\nInput: dict(a=-5, b=-3), Output: \"-8\"\n\nFunction: soma\nWrite a function that generates the output from the input.\n", "id": "4ab97f087ae176fb1252569eb16025d8afbb74c6_0"}
{"example_str": "examples = [\n    dict(dict_old={'a': 1, 'b': 2}, dict_new={'a': 3, 'c': 4}),\n    dict(dict_old={'x': {'y': 1, 'z': 2}}, dict_new={'x': {'y': 3, 'w': 4}}),\n    dict(dict_old={'foo': 'bar'}, dict_new={'foo': 'baz', 'qux': 'quux'}),\n    dict(dict_old={'a': [1, 2, 3]}, dict_new={'a': [4, 5, 6], 'b': [7, 8, 9]}),\n    dict(dict_old={'x': 1, 'y': 2}, dict_new={'x': 3, 'z': 4}),\n    dict(dict_old={'a': {'b': 1, 'c': 2}}, dict_new={'a': {'b': 3, 'd': 4}}),\n    dict(dict_old={'foo': {'bar': 1, 'baz': 2}}, dict_new={'foo': {'bar': 3, 'qux': 4}}),\n    dict(dict_old={'x': {'y': {'z': 1}}}, dict_new={'x': {'y': {'z': 2, 'w': 3}}}),\n    dict(dict_old={'a': 1, 'b': 2, 'c': 3}, dict_new={'a': 4, 'b': 5, 'd': 6}),\n    dict(dict_old={'foo': 'bar', 'baz': 'qux'}, dict_new={'foo': 'baz', 'qux': 'quux', 'corge': 'grault'}),\n]\nexamples += [\n    dict(dict_old={'x': 1, 'y': 2}, dict_new={'y': 3, 'z': 4}),\n    dict(dict_old={'a': {'b': 1}}, dict_new={'a': {'c': 2}}),\n    dict(dict_old={}, dict_new={'a': 1, 'b': 2}),\n    dict(dict_old={'name': 'Alice', 'age': 25}, dict_new={'age': 30}),\n    dict(dict_old={'a': {'b': {'c': 1}}}, dict_new={'a': {'b': {'d': 2}}}),\n    dict(dict_old={'list': [1, 2, 3]}, dict_new={'list': [4, 5]}),\n    dict(dict_old={'a': 1, 'b': 2}, dict_new={'b': {'x': 5}}),\n    dict(dict_old={'user': {'name': 'Alice', 'age': 25}}, dict_new={'user': {'age': 30, 'city': 'NY'}}),\n    dict(dict_old={'a': {'b': 1, 'c': 2}}, dict_new={'a': {'b': 2}, 'd': 4}),\n    dict(dict_old={'info': {'name': 'Alice', 'items': [1, 2]}}, dict_new={'info': {'items': [3, 4], 'extra': True}})\n]\nexamples += [\n    dict(dict_old={'x': 1}, dict_new={'x': 2}),\n    dict(dict_old={'y': {'z': 3}}, dict_new={'y': {'z': 4}}),\n    dict(dict_old={'a': 5, 'b': 6}, dict_new={'b': 7}),\n    dict(dict_old={'name': 'Alice'}, dict_new={'age': 30}),\n    dict(dict_old={'items': {'apple': 1, 'banana': 2}}, dict_new={'items': {'banana': 3, 'cherry': 4}}),\n    dict(dict_old={'numbers': [1, 2, 3]}, dict_new={'numbers': [4, 5, 6]}),\n    dict(dict_old={'info': {'first': 'John', 'last': 'Doe'}}, dict_new={'info': {'last': 'Smith', 'email': 'john@example.com'}}),\n    dict(dict_old={}, dict_new={'a': 10}),\n    dict(dict_old={'a': {'b': {'c': 1}}}, dict_new={'a': {'b': {'d': 2}}}),\n    dict(dict_old={'a': 1, 'b': 2}, dict_new={'a': 2, 'c': 3})\n]", "code": "def overlay(dict_old, dict_new):\n    \"\"\"\n    Overlay one dictionary on top of another\n\n    >>> a = {'a': {'b': 1, 'c': 1}}\n    >>> b = {'a': {'b': 2, 'd': 2}}\n    >>> overlay(a, b)\n    {'a': {'b': 2, 'c': 1, 'd': 2}}\n    \"\"\"\n    res = dict_old.copy()\n    for key, val in dict_new.items():\n        if key in dict_old and isinstance(val, dict):\n            res[key] = overlay(dict_old[key], dict_new[key])\n        else:\n            res[key] = val\n    return res\n", "func_name": "overlay", "exec_status": true, "example_inputs": ["\"{'dict_old': {'a': 1, 'b': 2}, 'dict_new': {'a': 3, 'c': 4}}\"", "\"{'dict_old': {'x': {'y': 1, 'z': 2}}, 'dict_new': {'x': {'y': 3, 'w': 4}}}\"", "\"{'dict_old': {'foo': 'bar'}, 'dict_new': {'foo': 'baz', 'qux': 'quux'}}\"", "\"{'dict_old': {'a': [1, 2, 3]}, 'dict_new': {'a': [4, 5, 6], 'b': [7, 8, 9]}}\"", "\"{'dict_old': {'x': 1, 'y': 2}, 'dict_new': {'x': 3, 'z': 4}}\"", "\"{'dict_old': {'a': {'b': 1, 'c': 2}}, 'dict_new': {'a': {'b': 3, 'd': 4}}}\"", "\"{'dict_old': {'foo': {'bar': 1, 'baz': 2}}, 'dict_new': {'foo': {'bar': 3, 'qux': 4}}}\"", "\"{'dict_old': {'x': {'y': {'z': 1}}}, 'dict_new': {'x': {'y': {'z': 2, 'w': 3}}}}\"", "\"{'dict_old': {'a': 1, 'b': 2, 'c': 3}, 'dict_new': {'a': 4, 'b': 5, 'd': 6}}\"", "\"{'dict_old': {'foo': 'bar', 'baz': 'qux'}, 'dict_new': {'foo': 'baz', 'qux': 'quux', 'corge': 'grault'}}\""], "example_outputs": [{"return": "\"{'a': 3, 'b': 2, 'c': 4}\""}, {"return": "\"{'x': {'y': 3, 'z': 2, 'w': 4}}\""}, {"return": "\"{'foo': 'baz', 'qux': 'quux'}\""}, {"return": "\"{'a': [4, 5, 6], 'b': [7, 8, 9]}\""}, {"return": "\"{'x': 3, 'y': 2, 'z': 4}\""}, {"return": "\"{'a': {'b': 3, 'c': 2, 'd': 4}}\""}, {"return": "\"{'foo': {'bar': 3, 'baz': 2, 'qux': 4}}\""}, {"return": "\"{'x': {'y': {'z': 2, 'w': 3}}}\""}, {"return": "\"{'a': 4, 'b': 5, 'c': 3, 'd': 6}\""}, {"return": "\"{'foo': 'baz', 'baz': 'qux', 'qux': 'quux', 'corge': 'grault'}\""}, {"return": "\"{'x': 1, 'y': 3, 'z': 4}\""}, {"return": "\"{'a': {'b': 1, 'c': 2}}\""}, {"return": "\"{'a': 1, 'b': 2}\""}, {"return": "\"{'name': 'Alice', 'age': 30}\""}, {"return": "\"{'a': {'b': {'c': 1, 'd': 2}}}\""}, {"return": "\"{'list': [4, 5]}\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'int' object has no attribute 'copy'\""}, {"return": "\"{'user': {'name': 'Alice', 'age': 30, 'city': 'NY'}}\""}, {"return": "\"{'a': {'b': 2, 'c': 2}, 'd': 4}\""}, {"return": "\"{'info': {'name': 'Alice', 'items': [3, 4], 'extra': True}}\""}, {"return": "\"{'x': 2}\""}, {"return": "\"{'y': {'z': 4}}\""}, {"return": "\"{'a': 5, 'b': 7}\""}, {"return": "\"{'name': 'Alice', 'age': 30}\""}, {"return": "\"{'items': {'apple': 1, 'banana': 3, 'cherry': 4}}\""}, {"return": "\"{'numbers': [4, 5, 6]}\""}, {"return": "\"{'info': {'first': 'John', 'last': 'Smith', 'email': 'john@example.com'}}\""}, {"return": "\"{'a': 10}\""}, {"return": "\"{'a': {'b': {'c': 1, 'd': 2}}}\""}, {"return": "\"{'a': 2, 'b': 2, 'c': 3}\""}], "parsed_inputs": [[["dict_old", "{'a': 1, 'b': 2}"], ["dict_new", "{'a': 3, 'c': 4}"]], [["dict_old", "{'x': {'y': 1, 'z': 2}}"], ["dict_new", "{'x': {'y': 3, 'w': 4}}"]], [["dict_old", "{'foo': 'bar'}"], ["dict_new", "{'foo': 'baz', 'qux': 'quux'}"]], [["dict_old", "{'a': [1, 2, 3]}"], ["dict_new", "{'a': [4, 5, 6], 'b': [7, 8, 9]}"]], [["dict_old", "{'x': 1, 'y': 2}"], ["dict_new", "{'x': 3, 'z': 4}"]], [["dict_old", "{'a': {'b': 1, 'c': 2}}"], ["dict_new", "{'a': {'b': 3, 'd': 4}}"]], [["dict_old", "{'foo': {'bar': 1, 'baz': 2}}"], ["dict_new", "{'foo': {'bar': 3, 'qux': 4}}"]], [["dict_old", "{'x': {'y': {'z': 1}}}"], ["dict_new", "{'x': {'y': {'z': 2, 'w': 3}}}"]], [["dict_old", "{'a': 1, 'b': 2, 'c': 3}"], ["dict_new", "{'a': 4, 'b': 5, 'd': 6}"]], [["dict_old", "{'foo': 'bar', 'baz': 'qux'}"], ["dict_new", "{'foo': 'baz', 'qux': 'quux', 'corge': 'grault'}"]]], "exec_code": "def overlay(dict_old, dict_new):\n    \"\"\"\n    Overlay one dictionary on top of another\n\n    >>> a = {'a': {'b': 1, 'c': 1}}\n    >>> b = {'a': {'b': 2, 'd': 2}}\n    >>> overlay(a, b)\n    {'a': {'b': 2, 'c': 1, 'd': 2}}\n    \"\"\"\n    res = dict_old.copy()\n    for key, val in dict_new.items():\n        if key in dict_old and isinstance(val, dict):\n            res[key] = overlay(dict_old[key], dict_new[key])\n        else:\n            res[key] = val\n    return res\n", "output": "The function is:\n\n```python\ndef overlay(dict_old, dict_new):\n    \"\"\"\n    Overlay one dictionary on top of another\n\n    >>> a = {'a': {'b': 1, 'c': 1}}\n    >>> b = {'a': {'b': 2, 'd': 2}}\n    >>> overlay(a, b)\n    {'a': {'b': 2, 'c': 1, 'd': 2}}\n    \"\"\"\n    res = dict_old.copy()\n    for key, val in dict_new.items():\n        if key in dict_old and isinstance(val, dict):\n            res[key] = overlay(dict_old[key], dict_new[key])\n        else:\n            res[key] = val\n    return res\n\n```", "choosed_example_idx": [5, 2, 8, 1, 9, 7, 6, 0, 3, 4], "prompt": "Input: dict(dict_old={'a': {'b': 1, 'c': 2}}, dict_new={'a': {'b': 3, 'd': 4}}), Output: \"{'a': {'b': 3, 'c': 2, 'd': 4}}\"\nInput: dict(dict_old={'foo': 'bar'}, dict_new={'foo': 'baz', 'qux': 'quux'}), Output: \"{'foo': 'baz', 'qux': 'quux'}\"\nInput: dict(dict_old={'a': 1, 'b': 2, 'c': 3}, dict_new={'a': 4, 'b': 5, 'd': 6}), Output: \"{'a': 4, 'b': 5, 'c': 3, 'd': 6}\"\nInput: dict(dict_old={'x': {'y': 1, 'z': 2}}, dict_new={'x': {'y': 3, 'w': 4}}), Output: \"{'x': {'y': 3, 'z': 2, 'w': 4}}\"\nInput: dict(dict_old={'foo': 'bar', 'baz': 'qux'}, dict_new={'foo': 'baz', 'qux': 'quux', 'corge': 'grault'}), Output: \"{'foo': 'baz', 'baz': 'qux', 'qux': 'quux', 'corge': 'grault'}\"\nInput: dict(dict_old={'x': {'y': {'z': 1}}}, dict_new={'x': {'y': {'z': 2, 'w': 3}}}), Output: \"{'x': {'y': {'z': 2, 'w': 3}}}\"\nInput: dict(dict_old={'foo': {'bar': 1, 'baz': 2}}, dict_new={'foo': {'bar': 3, 'qux': 4}}), Output: \"{'foo': {'bar': 3, 'baz': 2, 'qux': 4}}\"\nInput: dict(dict_old={'a': 1, 'b': 2}, dict_new={'a': 3, 'c': 4}), Output: \"{'a': 3, 'b': 2, 'c': 4}\"\nInput: dict(dict_old={'a': [1, 2, 3]}, dict_new={'a': [4, 5, 6], 'b': [7, 8, 9]}), Output: \"{'a': [4, 5, 6], 'b': [7, 8, 9]}\"\nInput: dict(dict_old={'x': 1, 'y': 2}, dict_new={'x': 3, 'z': 4}), Output: \"{'x': 3, 'y': 2, 'z': 4}\"\n\nWrite a function that generates the output from the input.\nFunction: overlay\n\n", "id": "fa78fad903bd4f27f2b593752d00e294d0b22167_0"}
{"example_str": "examples = [\n    dict(corp_num='12345', sql='SELECT * FROM table WHERE corp_num = %s'),\n    dict(corp_num='ABC123', sql='INSERT INTO table VALUES (%s, \"Some Value\")'),\n    dict(corp_num='123', sql='UPDATE table SET value = \"New Value\" WHERE corp_num = %s'),\n    dict(corp_num='XYZ456', sql='DELETE FROM table WHERE corp_num = %s'),\n    dict(corp_num='7890', sql='SELECT * FROM table WHERE corp_num IN (%s, \"12345\", \"ABC123\")'),\n    dict(corp_num='12345', sql='SELECT * FROM table WHERE corp_num = %s AND value = \"Some Value\"'),\n    dict(corp_num='ABC123', sql='INSERT INTO table VALUES (%s, \"Some Value\", \"Another Value\")'),\n    dict(corp_num='123', sql='UPDATE table SET value = \"New Value\", another_value = \"New Another Value\" WHERE corp_num = %s'),\n    dict(corp_num='XYZ456', sql='DELETE FROM table WHERE corp_num IN (%s, \"7890\", \"123\")'),\n    dict(corp_num='7890', sql='SELECT * FROM table WHERE corp_num = %s OR value = \"Some Value\"')\n]\nexamples += [\n    dict(corp_num=\"12345\", sql=\"SELECT * FROM companies WHERE corp_id = %s\"),\n    dict(corp_num=\"67890\", sql=\"DELETE FROM employees WHERE corp_id = %s\"),\n    dict(corp_num=\"ABC123\", sql=\"UPDATE accounts SET balance = 0 WHERE corp_id = %s\"),\n    dict(corp_num=\"XYZ789\", sql=\"INSERT INTO logs (corp_id, action) VALUES (%s, 'logged in')\"),\n    dict(corp_num=\"00001\", sql=\"SELECT COUNT(*) FROM transactions WHERE corp_id = %s\"),\n    dict(corp_num=\"99999\", sql=\"SELECT * FROM users WHERE corp_id = %s ORDER BY created_at DESC\"),\n    dict(corp_num=\"55555\", sql=\"SELECT name, email FROM contacts WHERE corp_id = %s\"),\n    dict(corp_num=\"22222\", sql=\"UPDATE settings SET value = 'enabled' WHERE corp_id = %s\"),\n    dict(corp_num=\"33333\", sql=\"DELETE FROM history WHERE corp_id = %s\"),\n    dict(corp_num=\"44444\", sql=\"INSERT INTO payments (corp_id, amount) VALUES (%s, 100)\")\n]\nexamples += [\n    dict(corp_num='12345', sql='SELECT * FROM table WHERE corp_id = %s'),\n    dict(corp_num='67890', sql='DELETE FROM records WHERE corp_id = %s'),\n    dict(corp_num='54321', sql='UPDATE table SET value = 100 WHERE corp_id = %s'),\n    dict(corp_num='98765', sql='INSERT INTO table (corp_id, name) VALUES (%s, \"ABC Corp\")'),\n    dict(corp_num='11111', sql='SELECT name FROM companies WHERE corp_id = %s'),\n    dict(corp_num='22222', sql='SELECT * FROM employees WHERE corp_id = %s ORDER BY name'),\n    dict(corp_num='33333', sql='SELECT COUNT(*) FROM transactions WHERE corp_id = %s'),\n    dict(corp_num='44444', sql='SELECT * FROM table WHERE corp_id = %s AND active = 1'),\n    dict(corp_num='55555', sql='SELECT * FROM projects WHERE project_id = %s'),\n    dict(corp_num='66666', sql='SELECT * FROM sales WHERE corp_id = %s AND year = 2023')\n]", "code": "def run_corp_sql(corp_num, sql):\n    new_sql = '' + sql\n    return new_sql.replace('%s', \"'\" + corp_num + \"'\")\n", "func_name": "run_corp_sql", "exec_status": true, "example_inputs": ["\"{'corp_num': '12345', 'sql': 'SELECT * FROM table WHERE corp_num = %s'}\"", "\"{'corp_num': 'ABC123', 'sql': 'INSERT INTO table VALUES (%s, \\\"Some Value\\\")'}\"", "\"{'corp_num': '123', 'sql': 'UPDATE table SET value = \\\"New Value\\\" WHERE corp_num = %s'}\"", "\"{'corp_num': 'XYZ456', 'sql': 'DELETE FROM table WHERE corp_num = %s'}\"", "\"{'corp_num': '7890', 'sql': 'SELECT * FROM table WHERE corp_num IN (%s, \\\"12345\\\", \\\"ABC123\\\")'}\"", "\"{'corp_num': '12345', 'sql': 'SELECT * FROM table WHERE corp_num = %s AND value = \\\"Some Value\\\"'}\"", "\"{'corp_num': 'ABC123', 'sql': 'INSERT INTO table VALUES (%s, \\\"Some Value\\\", \\\"Another Value\\\")'}\"", "\"{'corp_num': '123', 'sql': 'UPDATE table SET value = \\\"New Value\\\", another_value = \\\"New Another Value\\\" WHERE corp_num = %s'}\"", "\"{'corp_num': 'XYZ456', 'sql': 'DELETE FROM table WHERE corp_num IN (%s, \\\"7890\\\", \\\"123\\\")'}\"", "\"{'corp_num': '7890', 'sql': 'SELECT * FROM table WHERE corp_num = %s OR value = \\\"Some Value\\\"'}\""], "example_outputs": [{"return": "\"\\\"SELECT * FROM table WHERE corp_num = '12345'\\\"\""}, {"return": "\"'INSERT INTO table VALUES (\\\\'ABC123\\\\', \\\"Some Value\\\")'\""}, {"return": "\"'UPDATE table SET value = \\\"New Value\\\" WHERE corp_num = \\\\'123\\\\''\""}, {"return": "\"\\\"DELETE FROM table WHERE corp_num = 'XYZ456'\\\"\""}, {"return": "\"'SELECT * FROM table WHERE corp_num IN (\\\\'7890\\\\', \\\"12345\\\", \\\"ABC123\\\")'\""}, {"return": "\"'SELECT * FROM table WHERE corp_num = \\\\'12345\\\\' AND value = \\\"Some Value\\\"'\""}, {"return": "\"'INSERT INTO table VALUES (\\\\'ABC123\\\\', \\\"Some Value\\\", \\\"Another Value\\\")'\""}, {"return": "\"'UPDATE table SET value = \\\"New Value\\\", another_value = \\\"New Another Value\\\" WHERE corp_num = \\\\'123\\\\''\""}, {"return": "\"'DELETE FROM table WHERE corp_num IN (\\\\'XYZ456\\\\', \\\"7890\\\", \\\"123\\\")'\""}, {"return": "\"'SELECT * FROM table WHERE corp_num = \\\\'7890\\\\' OR value = \\\"Some Value\\\"'\""}, {"return": "\"\\\"SELECT * FROM companies WHERE corp_id = '12345'\\\"\""}, {"return": "\"\\\"DELETE FROM employees WHERE corp_id = '67890'\\\"\""}, {"return": "\"\\\"UPDATE accounts SET balance = 0 WHERE corp_id = 'ABC123'\\\"\""}, {"return": "\"\\\"INSERT INTO logs (corp_id, action) VALUES ('XYZ789', 'logged in')\\\"\""}, {"return": "\"\\\"SELECT COUNT(*) FROM transactions WHERE corp_id = '00001'\\\"\""}, {"return": "\"\\\"SELECT * FROM users WHERE corp_id = '99999' ORDER BY created_at DESC\\\"\""}, {"return": "\"\\\"SELECT name, email FROM contacts WHERE corp_id = '55555'\\\"\""}, {"return": "\"\\\"UPDATE settings SET value = 'enabled' WHERE corp_id = '22222'\\\"\""}, {"return": "\"\\\"DELETE FROM history WHERE corp_id = '33333'\\\"\""}, {"return": "\"\\\"INSERT INTO payments (corp_id, amount) VALUES ('44444', 100)\\\"\""}, {"return": "\"\\\"SELECT * FROM table WHERE corp_id = '12345'\\\"\""}, {"return": "\"\\\"DELETE FROM records WHERE corp_id = '67890'\\\"\""}, {"return": "\"\\\"UPDATE table SET value = 100 WHERE corp_id = '54321'\\\"\""}, {"return": "\"'INSERT INTO table (corp_id, name) VALUES (\\\\'98765\\\\', \\\"ABC Corp\\\")'\""}, {"return": "\"\\\"SELECT name FROM companies WHERE corp_id = '11111'\\\"\""}, {"return": "\"\\\"SELECT * FROM employees WHERE corp_id = '22222' ORDER BY name\\\"\""}, {"return": "\"\\\"SELECT COUNT(*) FROM transactions WHERE corp_id = '33333'\\\"\""}, {"return": "\"\\\"SELECT * FROM table WHERE corp_id = '44444' AND active = 1\\\"\""}, {"return": "\"\\\"SELECT * FROM projects WHERE project_id = '55555'\\\"\""}, {"return": "\"\\\"SELECT * FROM sales WHERE corp_id = '66666' AND year = 2023\\\"\""}], "parsed_inputs": [[["corp_num", "\"12345\""], ["sql", "\"SELECT * FROM table WHERE corp_num = %s\""]], [["corp_num", "\"ABC123\""], ["sql", "\"INSERT INTO table VALUES (%s, \\\"Some Value\\\")\""]], [["corp_num", "\"123\""], ["sql", "\"UPDATE table SET value = \\\"New Value\\\" WHERE corp_num = %s\""]], [["corp_num", "\"XYZ456\""], ["sql", "\"DELETE FROM table WHERE corp_num = %s\""]], [["corp_num", "\"7890\""], ["sql", "\"SELECT * FROM table WHERE corp_num IN (%s, \\\"12345\\\", \\\"ABC123\\\")\""]], [["corp_num", "\"12345\""], ["sql", "\"SELECT * FROM table WHERE corp_num = %s AND value = \\\"Some Value\\\"\""]], [["corp_num", "\"ABC123\""], ["sql", "\"INSERT INTO table VALUES (%s, \\\"Some Value\\\", \\\"Another Value\\\")\""]], [["corp_num", "\"123\""], ["sql", "\"UPDATE table SET value = \\\"New Value\\\", another_value = \\\"New Another Value\\\" WHERE corp_num = %s\""]], [["corp_num", "\"XYZ456\""], ["sql", "\"DELETE FROM table WHERE corp_num IN (%s, \\\"7890\\\", \\\"123\\\")\""]], [["corp_num", "\"7890\""], ["sql", "\"SELECT * FROM table WHERE corp_num = %s OR value = \\\"Some Value\\\"\""]]], "exec_code": "def run_corp_sql(corp_num, sql):\n    new_sql = '' + sql\n    return new_sql.replace('%s', \"'\" + corp_num + \"'\")\n", "output": "The function is:\n\n```python\ndef run_corp_sql(corp_num, sql):\n    new_sql = '' + sql\n    return new_sql.replace('%s', \"'\" + corp_num + \"'\")\n\n```", "choosed_example_idx": [9, 8, 0, 2, 1, 3, 4, 7, 5, 6], "prompt": "Input: dict(corp_num=\"7890\", sql=\"SELECT * FROM table WHERE corp_num = %s OR value = \\\"Some Value\\\"\"), Output: \"'SELECT * FROM table WHERE corp_num = \\\\'7890\\\\' OR value = \\\"Some Value\\\"'\"\nInput: dict(corp_num=\"XYZ456\", sql=\"DELETE FROM table WHERE corp_num IN (%s, \\\"7890\\\", \\\"123\\\")\"), Output: \"'DELETE FROM table WHERE corp_num IN (\\\\'XYZ456\\\\', \\\"7890\\\", \\\"123\\\")'\"\nInput: dict(corp_num=\"12345\", sql=\"SELECT * FROM table WHERE corp_num = %s\"), Output: \"\\\"SELECT * FROM table WHERE corp_num = '12345'\\\"\"\nInput: dict(corp_num=\"123\", sql=\"UPDATE table SET value = \\\"New Value\\\" WHERE corp_num = %s\"), Output: \"'UPDATE table SET value = \\\"New Value\\\" WHERE corp_num = \\\\'123\\\\''\"\nInput: dict(corp_num=\"ABC123\", sql=\"INSERT INTO table VALUES (%s, \\\"Some Value\\\")\"), Output: \"'INSERT INTO table VALUES (\\\\'ABC123\\\\', \\\"Some Value\\\")'\"\nInput: dict(corp_num=\"XYZ456\", sql=\"DELETE FROM table WHERE corp_num = %s\"), Output: \"\\\"DELETE FROM table WHERE corp_num = 'XYZ456'\\\"\"\nInput: dict(corp_num=\"7890\", sql=\"SELECT * FROM table WHERE corp_num IN (%s, \\\"12345\\\", \\\"ABC123\\\")\"), Output: \"'SELECT * FROM table WHERE corp_num IN (\\\\'7890\\\\', \\\"12345\\\", \\\"ABC123\\\")'\"\nInput: dict(corp_num=\"123\", sql=\"UPDATE table SET value = \\\"New Value\\\", another_value = \\\"New Another Value\\\" WHERE corp_num = %s\"), Output: \"'UPDATE table SET value = \\\"New Value\\\", another_value = \\\"New Another Value\\\" WHERE corp_num = \\\\'123\\\\''\"\nInput: dict(corp_num=\"12345\", sql=\"SELECT * FROM table WHERE corp_num = %s AND value = \\\"Some Value\\\"\"), Output: \"'SELECT * FROM table WHERE corp_num = \\\\'12345\\\\' AND value = \\\"Some Value\\\"'\"\nInput: dict(corp_num=\"ABC123\", sql=\"INSERT INTO table VALUES (%s, \\\"Some Value\\\", \\\"Another Value\\\")\"), Output: \"'INSERT INTO table VALUES (\\\\'ABC123\\\\', \\\"Some Value\\\", \\\"Another Value\\\")'\"\n\n\n\nWrite a function that generates the output from the input.\nFunction: run_corp_sql\n", "id": "eb15ef4715cca0b3d56bd5046819a55aa34d5727_0"}
{"example_str": "examples = [\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10),\n]\nexamples += [\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10)\n]\nexamples += [\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10)\n]", "code": "def rowSumOddNumbers(n):\n    start = 1\n    sumOddNum = 0\n    for x in range(0, n + 1):\n        for z in range(x):\n            if x == n:\n                print(start, end='')\n            start += 2\n            print(' ', end='')\n    for i in range(n):\n        start -= 2\n        sumOddNum += start\n        if i == n - 1:\n            return print(' = ', sumOddNum)\n", "func_name": "rowSumOddNumbers", "exec_status": true, "example_inputs": ["\"{'n': 1}\"", "\"{'n': 2}\"", "\"{'n': 3}\"", "\"{'n': 4}\"", "\"{'n': 5}\"", "\"{'n': 6}\"", "\"{'n': 7}\"", "\"{'n': 8}\"", "\"{'n': 9}\"", "\"{'n': 10}\""], "example_outputs": [{"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}], "parsed_inputs": [[["n", "1"]], [["n", "2"]], [["n", "3"]], [["n", "4"]], [["n", "5"]], [["n", "6"]], [["n", "7"]], [["n", "8"]], [["n", "9"]], [["n", "10"]]], "exec_code": "def rowSumOddNumbers(n):\n    start = 1\n    sumOddNum = 0\n    for x in range(0, n + 1):\n        for z in range(x):\n            if x == n:\n                print(start, end='')\n            start += 2\n            print(' ', end='')\n    for i in range(n):\n        start -= 2\n        sumOddNum += start\n        if i == n - 1:\n            return print(' = ', sumOddNum)\n", "output": "The function is:\n\n```python\ndef rowSumOddNumbers(n):\n    start = 1\n    sumOddNum = 0\n    for x in range(0, n + 1):\n        for z in range(x):\n            if x == n:\n                print(start, end='')\n            start += 2\n            print(' ', end='')\n    for i in range(n):\n        start -= 2\n        sumOddNum += start\n        if i == n - 1:\n            return print(' = ', sumOddNum)\n\n```", "choosed_example_idx": [6, 7, 1, 3, 2, 9, 4], "prompt": "Write a function that generates the output from the input.\n\nInput: dict(n=7), Output: \"None\"\nInput: dict(n=8), Output: \"None\"\nInput: dict(n=2), Output: \"None\"\nInput: dict(n=4), Output: \"None\"\nInput: dict(n=3), Output: \"None\"\nInput: dict(n=10), Output: \"None\"\nInput: dict(n=5), Output: \"None\"\n\nFunction: rowSumOddNumbers\n", "id": "c6e371d51605184e815db4adc6c827376344c0cc_0"}
{"example_str": "examples = [\n    dict(lista=[1, 2, 3, 4, 5], t=0, last_panino_index=None, score=0),\n    dict(lista=[5, 4, 3, 2, 1], t=0, last_panino_index=None, score=0),\n    dict(lista=[1, 3, 5, 2, 4], t=1, last_panino_index=0, score=1),\n    dict(lista=[1, 1, 1, 1, 1], t=0, last_panino_index=None, score=0),\n    dict(lista=[5, 5, 5, 5, 5], t=0, last_panino_index=None, score=0),\n    dict(lista=[1, 2, 3, 4, 5], t=3, last_panino_index=2, score=2),\n    dict(lista=[5, 4, 3, 2, 1], t=2, last_panino_index=1, score=1),\n    dict(lista=[1, 3, 5, 2, 4], t=0, last_panino_index=None, score=0),\n    dict(lista=[1, 1, 3, 1, 5], t=1, last_panino_index=0, score=1),\n    dict(lista=[5, 5, 3, 5, 5], t=2, last_panino_index=1, score=1)\n]\nexamples += [\n    dict(lista=[1, 2, 3, 4, 5], t=0, last_panino_index=None, score=0),\n    dict(lista=[5, 4, 3, 2, 1], t=0, last_panino_index=None, score=0),\n    dict(lista=[3, 1, 4, 1, 5], t=0, last_panino_index=None, score=0),\n    dict(lista=[10, 20, 10, 20], t=0, last_panino_index=None, score=0),\n    dict(lista=[1, 3, 2, 5, 4], t=0, last_panino_index=None, score=0),\n    dict(lista=[100, 90, 80, 70], t=0, last_panino_index=None, score=0),\n    dict(lista=[1, 1, 1, 1, 1], t=0, last_panino_index=None, score=0),\n    dict(lista=[5, 10, 5, 10, 5], t=0, last_panino_index=None, score=0),\n    dict(lista=[9, 7, 5, 3, 1], t=0, last_panino_index=None, score=0),\n    dict(lista=[2, 2, 2, 2, 2], t=0, last_panino_index=None, score=0)\n]\nexamples += [\n    dict(lista=[1, 2, 3, 4, 5], t=0),\n    dict(lista=[5, 4, 3, 2, 1], t=0),\n    dict(lista=[1, 3, 2, 5, 4], t=0),\n    dict(lista=[10, 20, 10, 20, 10], t=0),\n    dict(lista=[3, 1, 4, 1, 5], t=0),\n    dict(lista=[1], t=0),\n    dict(lista=[1, 2], t=0),\n    dict(lista=[2, 1], t=0),\n    dict(lista=[100, 200, 300, 400, 500], t=0),\n    dict(lista=[500, 400, 300, 200, 100], t=0)\n]", "code": "def num_max_panini(lista, t=0, last_panino_index=None, score=0):\n    \"\"\"\n    \n    Parameters\n    ----------\n    t : int\n        indice a cui sono attualmente.\n    last_panino_index : int\n        indice dell'ultimo panino.\n\n    Returns\n    -------\n    num_max_panini : int.\n        numero massimo di panini che posso mangiare \n        nella sequenza poldo\n\n    \"\"\"\n    if last_panino_index == None:\n        if t >= len(lista):\n            return score\n        return max(num_max_panini(lista, t + 1, t, score + 1),\n            num_max_panini(lista, t + 1, None, 0))\n    else:\n        if t >= len(lista):\n            return score\n        if lista[t] >= lista[last_panino_index]:\n            return num_max_panini(lista, t + 1, last_panino_index, score)\n        return max(num_max_panini(lista, t + 1, last_panino_index, score),\n            num_max_panini(lista, t + 1, t, score + 1))\n", "func_name": "num_max_panini", "exec_status": true, "example_inputs": ["\"{'lista': [1, 2, 3, 4, 5], 't': 0, 'last_panino_index': None, 'score': 0}\"", "\"{'lista': [5, 4, 3, 2, 1], 't': 0, 'last_panino_index': None, 'score': 0}\"", "\"{'lista': [1, 3, 5, 2, 4], 't': 1, 'last_panino_index': 0, 'score': 1}\"", "\"{'lista': [1, 1, 1, 1, 1], 't': 0, 'last_panino_index': None, 'score': 0}\"", "\"{'lista': [5, 5, 5, 5, 5], 't': 0, 'last_panino_index': None, 'score': 0}\"", "\"{'lista': [1, 2, 3, 4, 5], 't': 3, 'last_panino_index': 2, 'score': 2}\"", "\"{'lista': [5, 4, 3, 2, 1], 't': 2, 'last_panino_index': 1, 'score': 1}\"", "\"{'lista': [1, 3, 5, 2, 4], 't': 0, 'last_panino_index': None, 'score': 0}\"", "\"{'lista': [1, 1, 3, 1, 5], 't': 1, 'last_panino_index': 0, 'score': 1}\"", "\"{'lista': [5, 5, 3, 5, 5], 't': 2, 'last_panino_index': 1, 'score': 1}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"5\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"4\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"5\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"4\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"5\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"5\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"5\""}], "parsed_inputs": [[["lista", "[1, 2, 3, 4, 5]"], ["t", "0"], ["last_panino_index", "None"], ["score", "0"]], [["lista", "[5, 4, 3, 2, 1]"], ["t", "0"], ["last_panino_index", "None"], ["score", "0"]], [["lista", "[1, 3, 5, 2, 4]"], ["t", "1"], ["last_panino_index", "0"], ["score", "1"]], [["lista", "[1, 1, 1, 1, 1]"], ["t", "0"], ["last_panino_index", "None"], ["score", "0"]], [["lista", "[5, 5, 5, 5, 5]"], ["t", "0"], ["last_panino_index", "None"], ["score", "0"]], [["lista", "[1, 2, 3, 4, 5]"], ["t", "3"], ["last_panino_index", "2"], ["score", "2"]], [["lista", "[5, 4, 3, 2, 1]"], ["t", "2"], ["last_panino_index", "1"], ["score", "1"]], [["lista", "[1, 3, 5, 2, 4]"], ["t", "0"], ["last_panino_index", "None"], ["score", "0"]], [["lista", "[1, 1, 3, 1, 5]"], ["t", "1"], ["last_panino_index", "0"], ["score", "1"]], [["lista", "[5, 5, 3, 5, 5]"], ["t", "2"], ["last_panino_index", "1"], ["score", "1"]]], "exec_code": "def num_max_panini(lista, t=0, last_panino_index=None, score=0):\n    \"\"\"\n    \n    Parameters\n    ----------\n    t : int\n        indice a cui sono attualmente.\n    last_panino_index : int\n        indice dell'ultimo panino.\n\n    Returns\n    -------\n    num_max_panini : int.\n        numero massimo di panini che posso mangiare \n        nella sequenza poldo\n\n    \"\"\"\n    if last_panino_index == None:\n        if t >= len(lista):\n            return score\n        return max(num_max_panini(lista, t + 1, t, score + 1),\n            num_max_panini(lista, t + 1, None, 0))\n    else:\n        if t >= len(lista):\n            return score\n        if lista[t] >= lista[last_panino_index]:\n            return num_max_panini(lista, t + 1, last_panino_index, score)\n        return max(num_max_panini(lista, t + 1, last_panino_index, score),\n            num_max_panini(lista, t + 1, t, score + 1))\n", "output": "The function is:\n\n```python\ndef num_max_panini(lista, t=0, last_panino_index=None, score=0):\n    \"\"\"\n    \n    Parameters\n    ----------\n    t : int\n        indice a cui sono attualmente.\n    last_panino_index : int\n        indice dell'ultimo panino.\n\n    Returns\n    -------\n    num_max_panini : int.\n        numero massimo di panini che posso mangiare \n        nella sequenza poldo\n\n    \"\"\"\n    if last_panino_index == None:\n        if t >= len(lista):\n            return score\n        return max(num_max_panini(lista, t + 1, t, score + 1),\n            num_max_panini(lista, t + 1, None, 0))\n    else:\n        if t >= len(lista):\n            return score\n        if lista[t] >= lista[last_panino_index]:\n            return num_max_panini(lista, t + 1, last_panino_index, score)\n        return max(num_max_panini(lista, t + 1, last_panino_index, score),\n            num_max_panini(lista, t + 1, t, score + 1))\n\n```", "choosed_example_idx": [2, 9, 6, 8, 0], "prompt": "Write a function that generates the output from the input.\n\nFunction: num_max_panini\nInput: dict(lista=[1, 3, 5, 2, 4], t=1, last_panino_index=0, score=1), Output: \"1\"\nInput: dict(lista=[5, 5, 3, 5, 5], t=2, last_panino_index=1, score=1), Output: \"2\"\nInput: dict(lista=[5, 4, 3, 2, 1], t=2, last_panino_index=1, score=1), Output: \"4\"\nInput: dict(lista=[1, 1, 3, 1, 5], t=1, last_panino_index=0, score=1), Output: \"1\"\nInput: dict(lista=[1, 2, 3, 4, 5], t=0, last_panino_index=None, score=0), Output: \"1\"\n\n", "id": "88a7936f829bbc6d6147fb765ddd547515e55a96_0"}
{"example_str": "examples = [\n    dict(z=1),  # integer\n    dict(z=3.14),  # float\n    dict(z=\"hello\"),  # string\n    dict(z=True),  # boolean\n    dict(z=None),  # NoneType\n    dict(z=[]),  # empty list\n    dict(z={}),  # empty dictionary\n    dict(z=set()),  # empty set\n    dict(z=b\"hello\"),  # bytes\n    dict(z=complex(3, 4)),  # complex number\n]\nexamples += [\n    dict(z=10),               # integer\n    dict(z=3.14),             # float\n    dict(z=\"hello\"),          # string\n    dict(z=[1, 2, 3]),        # list\n    dict(z=(4, 5)),           # tuple\n    dict(z={\"key\": \"value\"}), # dictionary\n    dict(z={1, 2, 3}),        # set\n    dict(z=True),             # boolean\n    dict(z=None),             # NoneType\n    dict(z=complex(2, 3))     # complex number\n]\nexamples += [\n    dict(z=10),                # integer\n    dict(z=3.14),              # float\n    dict(z=\"hello\"),           # string\n    dict(z=[1, 2, 3]),         # list\n    dict(z=(4, 5)),            # tuple\n    dict(z={'key': 'value'}),  # dictionary\n    dict(z={1, 2, 3}),         # set\n    dict(z=True),              # boolean\n    dict(z=None),              # NoneType\n    dict(z=complex(2, 3)),     # complex number\n]", "code": "def test_gen(z):\n    return z\n", "func_name": "test_gen", "exec_status": true, "example_inputs": ["\"{'z': 1}\"", "\"{'z': 3.14}\"", "\"{'z': 'hello'}\"", "\"{'z': True}\"", "\"{'z': None}\"", "\"{'z': []}\"", "\"{'z': {}}\"", "\"{'z': set()}\"", "\"{'z': b'hello'}\"", "\"{'z': (3+4j)}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"3.14\""}, {"return": "\"'hello'\""}, {"return": "\"True\""}, {"return": "\"None\""}, {"return": "\"[]\""}, {"return": "\"{}\""}, {"return": "\"set()\""}, {"return": "\"b'hello'\""}, {"return": "\"(3+4j)\""}, {"return": "\"10\""}, {"return": "\"3.14\""}, {"return": "\"'hello'\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"(4, 5)\""}, {"return": "\"{'key': 'value'}\""}, {"return": "\"{1, 2, 3}\""}, {"return": "\"True\""}, {"return": "\"None\""}, {"return": "\"(2+3j)\""}, {"return": "\"10\""}, {"return": "\"3.14\""}, {"return": "\"'hello'\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"(4, 5)\""}, {"return": "\"{'key': 'value'}\""}, {"return": "\"{1, 2, 3}\""}, {"return": "\"True\""}, {"return": "\"None\""}, {"return": "\"(2+3j)\""}], "parsed_inputs": [[["z", "1"]], [["z", "3.14"]], [["z", "\"hello\""]], [["z", "True"]], [["z", "None"]], [["z", "[]"]], [["z", "{}"]], [["z", "set()"]], [["z", "b'hello'"]], [["z", "complex(3, 4)"]]], "exec_code": "def test_gen(z):\n    return z\n", "output": "The function is:\n\n```python\ndef test_gen(z):\n    return z\n\n```", "choosed_example_idx": [7, 1, 8, 6, 2, 5, 9], "prompt": "Write a function that generates the output from the input.\nInput: dict(z=set()), Output: \"set()\"\nInput: dict(z=3.14), Output: \"3.14\"\nInput: dict(z=b'hello'), Output: \"b'hello'\"\nInput: dict(z={}), Output: \"{}\"\nInput: dict(z=\"hello\"), Output: \"'hello'\"\nInput: dict(z=[]), Output: \"[]\"\nInput: dict(z=complex(3, 4)), Output: \"(3+4j)\"\n\n\nFunction: test_gen\n\n", "id": "81aa50e99454eac429f6aea55a0f85aa025a9928_0"}
{"example_str": "examples = [\n    dict(limit=10),\n    dict(limit=20),\n    dict(limit=30),\n    dict(limit=40),\n    dict(limit=50),\n    dict(limit=100),\n    dict(limit=200),\n    dict(limit=400),\n    dict(limit=1000),\n    dict(limit=5000),\n]\nexamples += [\n    dict(limit=10),    # Example 1: limit is 10\n    dict(limit=1),     # Example 2: limit is 1\n    dict(limit=100),   # Example 3: limit is 100\n    dict(limit=50),    # Example 4: limit is 50\n    dict(limit=0),     # Example 5: limit is 0\n    dict(limit=30),    # Example 6: limit is 30\n    dict(limit=500),   # Example 7: limit is 500\n    dict(limit=1000),  # Example 8: limit is 1000\n    dict(limit=2),     # Example 9: limit is 2\n    dict(limit=2000)   # Example 10: limit is 2000\n]\nexamples += [\n    dict(limit=10),   # Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8 (even sum: 2 + 8 = 10)\n    dict(limit=20),   # Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13 (even sum: 2 + 8 = 10)\n    dict(limit=50),   # Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34 (even sum: 2 + 8 + 34 = 44)\n    dict(limit=100),  # Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89 (even sum: 2 + 8 + 34 = 44)\n    dict(limit=200),  # Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144 (even sum: 2 + 8 + 34 + 144 = 188)\n    dict(limit=300),  # Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233 (even sum: 2 + 8 + 34 + 144 = 188)\n    dict(limit=500),  # Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377 (even sum: 2 + 8 + 34 + 144 + 377 = 566)\n    dict(limit=1000), # Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610 (even sum: 2 + 8 + 34 + 144 + 610 = 798)\n    dict(limit=2000), # Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597 (even sum: 2 + 8 + 34 + 144 + 610 = 798)\n    dict(limit=3000)  # Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584 (even sum: 2 + 8 + 34 + 144 + 610 + 2584 = 3382)\n]", "code": "def fib(limit):\n    \"\"\"Return the sum of all fib numbers explicitly beneath the given limit\"\"\"\n    sum = 0\n    current = 0\n    old = 1\n    while current < limit:\n        old_current = current\n        current = current + old\n        if current % 2 == 0:\n            sum += current\n        old = old_current\n    return sum\n", "func_name": "fib", "exec_status": true, "example_inputs": ["\"{'limit': 10}\"", "\"{'limit': 20}\"", "\"{'limit': 30}\"", "\"{'limit': 40}\"", "\"{'limit': 50}\"", "\"{'limit': 100}\"", "\"{'limit': 200}\"", "\"{'limit': 400}\"", "\"{'limit': 1000}\"", "\"{'limit': 5000}\""], "example_outputs": [{"return": "\"10\""}, {"return": "\"10\""}, {"return": "\"44\""}, {"return": "\"44\""}, {"return": "\"44\""}, {"return": "\"188\""}, {"return": "\"188\""}, {"return": "\"798\""}, {"return": "\"798\""}, {"return": "\"3382\""}, {"return": "\"10\""}, {"return": "\"0\""}, {"return": "\"188\""}, {"return": "\"44\""}, {"return": "\"0\""}, {"return": "\"44\""}, {"return": "\"798\""}, {"return": "\"798\""}, {"return": "\"2\""}, {"return": "\"3382\""}, {"return": "\"10\""}, {"return": "\"10\""}, {"return": "\"44\""}, {"return": "\"188\""}, {"return": "\"188\""}, {"return": "\"188\""}, {"return": "\"798\""}, {"return": "\"798\""}, {"return": "\"3382\""}, {"return": "\"3382\""}], "parsed_inputs": [[["limit", "10"]], [["limit", "20"]], [["limit", "30"]], [["limit", "40"]], [["limit", "50"]], [["limit", "100"]], [["limit", "200"]], [["limit", "400"]], [["limit", "1000"]], [["limit", "5000"]]], "exec_code": "def fib(limit):\n    \"\"\"Return the sum of all fib numbers explicitly beneath the given limit\"\"\"\n    sum = 0\n    current = 0\n    old = 1\n    while current < limit:\n        old_current = current\n        current = current + old\n        if current % 2 == 0:\n            sum += current\n        old = old_current\n    return sum\n", "output": "The function is:\n\n```python\ndef fib(limit):\n    \"\"\"Return the sum of all fib numbers explicitly beneath the given limit\"\"\"\n    sum = 0\n    current = 0\n    old = 1\n    while current < limit:\n        old_current = current\n        current = current + old\n        if current % 2 == 0:\n            sum += current\n        old = old_current\n    return sum\n\n```", "choosed_example_idx": [1, 8, 6, 9, 4, 2], "prompt": "Write a function that generates the output from the input.\nFunction: fib\nInput: dict(limit=20), Output: \"10\"\nInput: dict(limit=1000), Output: \"798\"\nInput: dict(limit=200), Output: \"188\"\nInput: dict(limit=5000), Output: \"3382\"\nInput: dict(limit=50), Output: \"44\"\nInput: dict(limit=30), Output: \"44\"\n\n", "id": "45aeb37631b31ea6a924c9e8d8a6a6f30b8f29f3_0"}
{"example_str": "examples = [\n    {'a': 2, 'b': 3},\n    {'a': 4.5, 'b': 1.2},\n    {'a': 0, 'b': 0},\n    {'a': -1, 'b': 1},\n    {'a': 10, 'b': 20},\n    {'a': 3.14, 'b': 2.71},\n    {'a': 100, 'b': 50},\n    {'a': -5, 'b': -3},\n    {'a': 2.0, 'b': 4.0},\n    {'a': 1, 'b': 1}\n]\nexamples += [\n    dict(a=5, b=3),             # Example with two integers\n    dict(a=2.5, b=3.1),         # Example with two floats\n    dict(a=\"Hello, \", b=\"World!\"),  # Example with two strings\n    dict(a=[1, 2], b=[3, 4]),   # Example with two lists\n    dict(a=5, b=-2),            # Example with a positive and a negative integer\n    dict(a=-1.1, b=2.2),        # Example with negative and positive floats\n    dict(a=\"123\", b=\"456\"),     # Example with numeric strings\n    dict(a=0, b=0),             # Example with zeros\n    dict(a=-10, b=10),          # Example with integers summing to zero\n    dict(a=3.5, b=-1.5)         # Example with a float and a negative float\n]\nexamples += [\n    dict(a=1, b=2),           # integers\n    dict(a=1.5, b=2.5),       # floats\n    dict(a=\"Hello, \", b=\"World!\"),  # strings\n    dict(a=[1, 2], b=[3, 4]), # lists\n    dict(a=(1,), b=(2, 3)),   # tuples\n    dict(a=1, b=1.5),         # int and float\n    dict(a=\"1\", b=2),         # string and int (will raise an error)\n    dict(a=[1], b=\"a\"),       # list and string (will raise an error)\n    dict(a=None, b=1),        # None and int (will raise an error)\n    dict(a=True, b=False)     # booleans (True is treated as 1, False as 0)\n]", "code": "def add(a, b):\n    return a + b\n", "func_name": "add", "exec_status": true, "example_inputs": ["\"{'a': 2, 'b': 3}\"", "\"{'a': 4.5, 'b': 1.2}\"", "\"{'a': 0, 'b': 0}\"", "\"{'a': -1, 'b': 1}\"", "\"{'a': 10, 'b': 20}\"", "\"{'a': 3.14, 'b': 2.71}\"", "\"{'a': 100, 'b': 50}\"", "\"{'a': -5, 'b': -3}\"", "\"{'a': 2.0, 'b': 4.0}\"", "\"{'a': 1, 'b': 1}\""], "example_outputs": [{"return": "\"5\""}, {"return": "\"5.7\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"30\""}, {"return": "\"5.85\""}, {"return": "\"150\""}, {"return": "\"-8\""}, {"return": "\"6.0\""}, {"return": "\"2\""}, {"return": "\"8\""}, {"return": "\"5.6\""}, {"return": "\"'Hello, World!'\""}, {"return": "\"[1, 2, 3, 4]\""}, {"return": "\"3\""}, {"return": "\"1.1\""}, {"return": "\"'123456'\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"2.0\""}, {"return": "\"3\""}, {"return": "\"4.0\""}, {"return": "\"'Hello, World!'\""}, {"return": "\"[1, 2, 3, 4]\""}, {"return": "\"(1, 2, 3)\""}, {"return": "\"2.5\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: can only concatenate str (not \\\"int\\\") to str\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: can only concatenate list (not \\\"str\\\") to list\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: unsupported operand type(s) for +: 'NoneType' and 'int'\""}, {"return": "\"1\""}], "parsed_inputs": [[["a", "2"], ["b", "3"]], [["a", "4.5"], ["b", "1.2"]], [["a", "0"], ["b", "0"]], [["a", "-1"], ["b", "1"]], [["a", "10"], ["b", "20"]], [["a", "3.14"], ["b", "2.71"]], [["a", "100"], ["b", "50"]], [["a", "-5"], ["b", "-3"]], [["a", "2.0"], ["b", "4.0"]], [["a", "1"], ["b", "1"]]], "exec_code": "def add(a, b):\n    return a + b\n", "output": "The function is:\n\n```python\ndef add(a, b):\n    return a + b\n\n```", "choosed_example_idx": [7, 5, 2, 6, 4], "prompt": "Input: dict(a=-5, b=-3), Output: \"-8\"\nInput: dict(a=3.14, b=2.71), Output: \"5.85\"\nInput: dict(a=0, b=0), Output: \"0\"\nInput: dict(a=100, b=50), Output: \"150\"\nInput: dict(a=10, b=20), Output: \"30\"\n\nFunction: add\n\nWrite a function that generates the output from the input.\n", "id": "dc90148d8724c11600a4d1af1987dec4d6ac8bf6_0"}
{"example_str": "examples = [\n    dict(sequence=[1, 2, 3, 4, 5]),\n    dict(sequence=[5, 4, 3, 2, 1]),\n    dict(sequence=[1, 3, 5, 2, 4]),\n    dict(sequence=[1, 1, 1, 1, 1]),\n    dict(sequence=[5, 5, 5, 5, 5]),\n    dict(sequence=[1, 2, 3]),\n    dict(sequence=[3, 2, 1]),\n    dict(sequence=[1]),\n    dict(sequence=[]),\n    dict(sequence='abcde'),\n    dict(sequence='edcba'),\n]\nexamples += [\n    dict(sequence=[1, 2, 3, 4, 5]),  # No inversions, already sorted\n    dict(sequence=[5, 4, 3, 2, 1]),  # Maximum inversions, reverse sorted\n    dict(sequence=[2, 3, 1, 5, 4]),  # Some inversions\n    dict(sequence=[10, 20, 30, 25, 15]),  # Some inversions\n    dict(sequence=[1]),  # Single element, no inversions\n    dict(sequence=[]),  # Empty list, no inversions\n    dict(sequence=[3, 1, 2]),  # Simple case with inversions\n    dict(sequence=[-1, -2, -3]),  # Negative numbers, reverse sorted\n    dict(sequence=[100, 50, 75, 25, 10]),  # Mixed numbers with inversions\n    dict(sequence=[1, 3, 2, 4, 5, 6])  # One simple inversion\n]\nexamples += [\n    dict(sequence=[1, 2, 3, 4, 5]),\n    dict(sequence=[5, 4, 3, 2, 1]),\n    dict(sequence=[2, 3, 1, 5, 4]),\n    dict(sequence=[10, 20, 30, 40, 50]),\n    dict(sequence=[50, 40, 30, 20, 10]),\n    dict(sequence=[1, 3, 2, 5, 4]),\n    dict(sequence=[100, 200, 300, 400, 500]),\n    dict(sequence=[500, 400, 300, 200, 100]),\n    dict(sequence=[1, 1, 1, 1, 1]),\n    dict(sequence=[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])\n]", "code": "def count_inversion(sequence):\n    sequence = list(sequence)\n    count = 0\n    for x in range(len(sequence)):\n        for y in range(x + 1, len(sequence)):\n            if sequence[x] > sequence[y]:\n                count += 1\n                sequence[x], sequence[y] = sequence[y], sequence[x]\n    return count\n", "func_name": "count_inversion", "exec_status": true, "example_inputs": ["\"{'sequence': [1, 2, 3, 4, 5]}\"", "\"{'sequence': [5, 4, 3, 2, 1]}\"", "\"{'sequence': [1, 3, 5, 2, 4]}\"", "\"{'sequence': [1, 1, 1, 1, 1]}\"", "\"{'sequence': [5, 5, 5, 5, 5]}\"", "\"{'sequence': [1, 2, 3]}\"", "\"{'sequence': [3, 2, 1]}\"", "\"{'sequence': [1]}\"", "\"{'sequence': []}\"", "\"{'sequence': 'abcde'}\"", "\"{'sequence': 'edcba'}\""], "example_outputs": [{"return": "\"0\""}, {"return": "\"10\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"10\""}, {"return": "\"0\""}, {"return": "\"10\""}, {"return": "\"3\""}, {"return": "\"4\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"9\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"10\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"10\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"10\""}, {"return": "\"0\""}, {"return": "\"16\""}], "parsed_inputs": [[["sequence", "[1, 2, 3, 4, 5]"]], [["sequence", "[5, 4, 3, 2, 1]"]], [["sequence", "[1, 3, 5, 2, 4]"]], [["sequence", "[1, 1, 1, 1, 1]"]], [["sequence", "[5, 5, 5, 5, 5]"]], [["sequence", "[1, 2, 3]"]], [["sequence", "[3, 2, 1]"]], [["sequence", "[1]"]], [["sequence", "[]"]], [["sequence", "\"abcde\""]], [["sequence", "\"edcba\""]]], "exec_code": "def count_inversion(sequence):\n    sequence = list(sequence)\n    count = 0\n    for x in range(len(sequence)):\n        for y in range(x + 1, len(sequence)):\n            if sequence[x] > sequence[y]:\n                count += 1\n                sequence[x], sequence[y] = sequence[y], sequence[x]\n    return count\n", "output": "The function is:\n\n```python\ndef count_inversion(sequence):\n    sequence = list(sequence)\n    count = 0\n    for x in range(len(sequence)):\n        for y in range(x + 1, len(sequence)):\n            if sequence[x] > sequence[y]:\n                count += 1\n                sequence[x], sequence[y] = sequence[y], sequence[x]\n    return count\n\n```", "choosed_example_idx": [3, 2, 10, 9, 0, 7, 4], "prompt": "Function: count_inversion\nInput: dict(sequence=[1, 1, 1, 1, 1]), Output: \"0\"\nInput: dict(sequence=[1, 3, 5, 2, 4]), Output: \"3\"\nInput: dict(sequence=\"edcba\"), Output: \"10\"\nInput: dict(sequence=\"abcde\"), Output: \"0\"\nInput: dict(sequence=[1, 2, 3, 4, 5]), Output: \"0\"\nInput: dict(sequence=[1]), Output: \"0\"\nInput: dict(sequence=[5, 5, 5, 5, 5]), Output: \"0\"\n\nWrite a function that generates the output from the input.\n", "id": "ee1a6ed382e113087f1c5d2d57b8e66d1949a939_0"}
{"example_str": "examples = [\n    dict(sizedict={'HicUsedTotalSize': 100, 'HicChrBeginA': 0, 'HicChrBeginB': 50}, chrlist=['A', 'B'], achr='A', chrindex=0),\n    dict(sizedict={'HicUsedTotalSize': 200, 'HicChrBeginX': 0, 'HicChrBeginY': 100}, chrlist=['X', 'Y'], achr='X', chrindex=0),\n    dict(sizedict={'HicUsedTotalSize': 300, 'HicChrBegin1': 0, 'HicChrBegin2': 150}, chrlist=['1', '2'], achr='1', chrindex=0),\n    dict(sizedict={'HicUsedTotalSize': 400, 'HicChrBegina': 0, 'HicChrBeginb': 200}, chrlist=['a', 'b'], achr='a', chrindex=0),\n    dict(sizedict={'HicUsedTotalSize': 500, 'HicChrBeginI': 0, 'HicChrBeginII': 250}, chrlist=['I', 'II'], achr='I', chrindex=0),\n    dict(sizedict={'HicUsedTotalSize': 600, 'HicChrBeginA': 0, 'HicChrBeginB': 300}, chrlist=['A', 'B'], achr='A', chrindex=1),\n    dict(sizedict={'HicUsedTotalSize': 700, 'HicChrBeginX': 0, 'HicChrBeginY': 350}, chrlist=['X', 'Y'], achr='X', chrindex=1),\n    dict(sizedict={'HicUsedTotalSize': 800, 'HicChrBegin1': 0, 'HicChrBegin2': 400}, chrlist=['1', '2'], achr='1', chrindex=1),\n    dict(sizedict={'HicUsedTotalSize': 900, 'HicChrBegina': 0, 'HicChrBeginb': 450}, chrlist=['a', 'b'], achr='a', chrindex=1),\n    dict(sizedict={'HicUsedTotalSize': 1000, 'HicChrBeginI': 0, 'HicChrBeginII': 500}, chrlist=['I', 'II'], achr='I', chrindex=1),\n]\nexamples += [\n    dict(sizedict={'HicUsedTotalSize': 3000, 'HicChrBeginX': 100, 'HicChrBeginY': 500}, chrlist=['X', 'Y'], achr='X', chrindex=0),\n    dict(sizedict={'HicUsedTotalSize': 3000, 'HicChrBeginX': 100, 'HicChrBeginY': 500}, chrlist=['X', 'Y'], achr='Y', chrindex=1),\n    dict(sizedict={'HicUsedTotalSize': 4500, 'HicChrBeginA': 200, 'HicChrBeginB': 700, 'HicChrBeginC': 1200}, chrlist=['A', 'B', 'C'], achr='A', chrindex=0),\n    dict(sizedict={'HicUsedTotalSize': 4500, 'HicChrBeginA': 200, 'HicChrBeginB': 700, 'HicChrBeginC': 1200}, chrlist=['A', 'B', 'C'], achr='B', chrindex=1),\n    dict(sizedict={'HicUsedTotalSize': 4500, 'HicChrBeginA': 200, 'HicChrBeginB': 700, 'HicChrBeginC': 1200}, chrlist=['A', 'B', 'C'], achr='C', chrindex=2),\n    dict(sizedict={'HicUsedTotalSize': 5000, 'HicChrBegin1': 150, 'HicChrBegin2': 650}, chrlist=['1', '2'], achr='1', chrindex=0),\n    dict(sizedict={'HicUsedTotalSize': 5000, 'HicChrBegin1': 150, 'HicChrBegin2': 650}, chrlist=['1', '2'], achr='2', chrindex=1),\n    dict(sizedict={'HicUsedTotalSize': 6000, 'HicChrBeginM': 300, 'HicChrBeginN': 800, 'HicChrBeginO': 1300}, chrlist=['M', 'N', 'O'], achr='M', chrindex=0),\n    dict(sizedict={'HicUsedTotalSize': 6000, 'HicChrBeginM': 300, 'HicChrBeginN': 800, 'HicChrBeginO': 1300}, chrlist=['M', 'N', 'O'], achr='N', chrindex=1),\n    dict(sizedict={'HicUsedTotalSize': 6000, 'HicChrBeginM': 300, 'HicChrBeginN': 800, 'HicChrBeginO': 1300}, chrlist=['M', 'N', 'O'], achr='O', chrindex=2)\n]\nexamples += [\n    dict(sizedict={'HicUsedTotalSize': 1000, 'HicChrBeginA': 100, 'HicChrBeginB': 200}, chrlist=['A', 'B'], achr='A', chrindex=0),\n    dict(sizedict={'HicUsedTotalSize': 1500, 'HicChrBeginX': 300, 'HicChrBeginY': 400}, chrlist=['X', 'Y'], achr='X', chrindex=0),\n    dict(sizedict={'HicUsedTotalSize': 2000, 'HicChrBeginC': 500, 'HicChrBeginD': 600}, chrlist=['C', 'D'], achr='C', chrindex=0),\n    dict(sizedict={'HicUsedTotalSize': 2500, 'HicChrBeginM': 700, 'HicChrBeginN': 800}, chrlist=['M', 'N'], achr='M', chrindex=0),\n    dict(sizedict={'HicUsedTotalSize': 3000, 'HicChrBeginG': 900, 'HicChrBeginH': 1000}, chrlist=['G', 'H'], achr='G', chrindex=0),\n    dict(sizedict={'HicUsedTotalSize': 3500, 'HicChrBeginP': 1100, 'HicChrBeginQ': 1200}, chrlist=['P', 'Q'], achr='P', chrindex=0),\n    dict(sizedict={'HicUsedTotalSize': 4000, 'HicChrBeginS': 1300, 'HicChrBeginT': 1400}, chrlist=['S', 'T'], achr='S', chrindex=0),\n    dict(sizedict={'HicUsedTotalSize': 4500, 'HicChrBeginU': 1500, 'HicChrBeginV': 1600}, chrlist=['U', 'V'], achr='U', chrindex=0),\n    dict(sizedict={'HicUsedTotalSize': 5000, 'HicChrBeginW': 1700, 'HicChrBeginZ': 1800}, chrlist=['W', 'Z'], achr='W', chrindex=0),\n    dict(sizedict={'HicUsedTotalSize': 5500, 'HicChrBeginL': 1900, 'HicChrBeginO': 2000}, chrlist=['L', 'O'], achr='L', chrindex=0)\n]", "code": "def givematrixsize(sizedict, chrlist, achr, chrindex):\n    \"\"\"\n\tout : end and begin of matrix pos\n\t\"\"\"\n    Li = len(chrlist)\n    if chrindex == Li - 1:\n        print('fin de chromosome')\n        return sizedict['HicUsedTotalSize'], sizedict['HicChrBegin' + achr]\n    else:\n        return sizedict['HicChrBegin' + chrlist[chrindex + 1]], sizedict[\n            'HicChrBegin' + achr]\n", "func_name": "givematrixsize", "exec_status": true, "example_inputs": ["\"{'sizedict': {'HicUsedTotalSize': 100, 'HicChrBeginA': 0, 'HicChrBeginB': 50}, 'chrlist': ['A', 'B'], 'achr': 'A', 'chrindex': 0}\"", "\"{'sizedict': {'HicUsedTotalSize': 200, 'HicChrBeginX': 0, 'HicChrBeginY': 100}, 'chrlist': ['X', 'Y'], 'achr': 'X', 'chrindex': 0}\"", "\"{'sizedict': {'HicUsedTotalSize': 300, 'HicChrBegin1': 0, 'HicChrBegin2': 150}, 'chrlist': ['1', '2'], 'achr': '1', 'chrindex': 0}\"", "\"{'sizedict': {'HicUsedTotalSize': 400, 'HicChrBegina': 0, 'HicChrBeginb': 200}, 'chrlist': ['a', 'b'], 'achr': 'a', 'chrindex': 0}\"", "\"{'sizedict': {'HicUsedTotalSize': 500, 'HicChrBeginI': 0, 'HicChrBeginII': 250}, 'chrlist': ['I', 'II'], 'achr': 'I', 'chrindex': 0}\"", "\"{'sizedict': {'HicUsedTotalSize': 600, 'HicChrBeginA': 0, 'HicChrBeginB': 300}, 'chrlist': ['A', 'B'], 'achr': 'A', 'chrindex': 1}\"", "\"{'sizedict': {'HicUsedTotalSize': 700, 'HicChrBeginX': 0, 'HicChrBeginY': 350}, 'chrlist': ['X', 'Y'], 'achr': 'X', 'chrindex': 1}\"", "\"{'sizedict': {'HicUsedTotalSize': 800, 'HicChrBegin1': 0, 'HicChrBegin2': 400}, 'chrlist': ['1', '2'], 'achr': '1', 'chrindex': 1}\"", "\"{'sizedict': {'HicUsedTotalSize': 900, 'HicChrBegina': 0, 'HicChrBeginb': 450}, 'chrlist': ['a', 'b'], 'achr': 'a', 'chrindex': 1}\"", "\"{'sizedict': {'HicUsedTotalSize': 1000, 'HicChrBeginI': 0, 'HicChrBeginII': 500}, 'chrlist': ['I', 'II'], 'achr': 'I', 'chrindex': 1}\""], "example_outputs": [{"return": "\"(50, 0)\""}, {"return": "\"(100, 0)\""}, {"return": "\"(150, 0)\""}, {"return": "\"(200, 0)\""}, {"return": "\"(250, 0)\""}, {"return": "\"(600, 0)\""}, {"return": "\"(700, 0)\""}, {"return": "\"(800, 0)\""}, {"return": "\"(900, 0)\""}, {"return": "\"(1000, 0)\""}, {"return": "\"(500, 100)\""}, {"return": "\"(3000, 500)\""}, {"return": "\"(700, 200)\""}, {"return": "\"(1200, 700)\""}, {"return": "\"(4500, 1200)\""}, {"return": "\"(650, 150)\""}, {"return": "\"(5000, 650)\""}, {"return": "\"(800, 300)\""}, {"return": "\"(1300, 800)\""}, {"return": "\"(6000, 1300)\""}, {"return": "\"(200, 100)\""}, {"return": "\"(400, 300)\""}, {"return": "\"(600, 500)\""}, {"return": "\"(800, 700)\""}, {"return": "\"(1000, 900)\""}, {"return": "\"(1200, 1100)\""}, {"return": "\"(1400, 1300)\""}, {"return": "\"(1600, 1500)\""}, {"return": "\"(1800, 1700)\""}, {"return": "\"(2000, 1900)\""}], "parsed_inputs": [[["sizedict", "{'HicUsedTotalSize': 100, 'HicChrBeginA': 0, 'HicChrBeginB': 50}"], ["chrlist", "['A', 'B']"], ["achr", "\"A\""], ["chrindex", "0"]], [["sizedict", "{'HicUsedTotalSize': 200, 'HicChrBeginX': 0, 'HicChrBeginY': 100}"], ["chrlist", "['X', 'Y']"], ["achr", "\"X\""], ["chrindex", "0"]], [["sizedict", "{'HicUsedTotalSize': 300, 'HicChrBegin1': 0, 'HicChrBegin2': 150}"], ["chrlist", "['1', '2']"], ["achr", "\"1\""], ["chrindex", "0"]], [["sizedict", "{'HicUsedTotalSize': 400, 'HicChrBegina': 0, 'HicChrBeginb': 200}"], ["chrlist", "['a', 'b']"], ["achr", "\"a\""], ["chrindex", "0"]], [["sizedict", "{'HicUsedTotalSize': 500, 'HicChrBeginI': 0, 'HicChrBeginII': 250}"], ["chrlist", "['I', 'II']"], ["achr", "\"I\""], ["chrindex", "0"]], [["sizedict", "{'HicUsedTotalSize': 600, 'HicChrBeginA': 0, 'HicChrBeginB': 300}"], ["chrlist", "['A', 'B']"], ["achr", "\"A\""], ["chrindex", "1"]], [["sizedict", "{'HicUsedTotalSize': 700, 'HicChrBeginX': 0, 'HicChrBeginY': 350}"], ["chrlist", "['X', 'Y']"], ["achr", "\"X\""], ["chrindex", "1"]], [["sizedict", "{'HicUsedTotalSize': 800, 'HicChrBegin1': 0, 'HicChrBegin2': 400}"], ["chrlist", "['1', '2']"], ["achr", "\"1\""], ["chrindex", "1"]], [["sizedict", "{'HicUsedTotalSize': 900, 'HicChrBegina': 0, 'HicChrBeginb': 450}"], ["chrlist", "['a', 'b']"], ["achr", "\"a\""], ["chrindex", "1"]], [["sizedict", "{'HicUsedTotalSize': 1000, 'HicChrBeginI': 0, 'HicChrBeginII': 500}"], ["chrlist", "['I', 'II']"], ["achr", "\"I\""], ["chrindex", "1"]]], "exec_code": "def givematrixsize(sizedict, chrlist, achr, chrindex):\n    \"\"\"\n\tout : end and begin of matrix pos\n\t\"\"\"\n    Li = len(chrlist)\n    if chrindex == Li - 1:\n        print('fin de chromosome')\n        return sizedict['HicUsedTotalSize'], sizedict['HicChrBegin' + achr]\n    else:\n        return sizedict['HicChrBegin' + chrlist[chrindex + 1]], sizedict[\n            'HicChrBegin' + achr]\n", "output": "The function is:\n\n```python\ndef givematrixsize(sizedict, chrlist, achr, chrindex):\n    \"\"\"\n\tout : end and begin of matrix pos\n\t\"\"\"\n    Li = len(chrlist)\n    if chrindex == Li - 1:\n        print('fin de chromosome')\n        return sizedict['HicUsedTotalSize'], sizedict['HicChrBegin' + achr]\n    else:\n        return sizedict['HicChrBegin' + chrlist[chrindex + 1]], sizedict[\n            'HicChrBegin' + achr]\n\n```", "choosed_example_idx": [6, 9, 2], "prompt": "Input: dict(sizedict={'HicUsedTotalSize': 700, 'HicChrBeginX': 0, 'HicChrBeginY': 350}, chrlist=['X', 'Y'], achr=\"X\", chrindex=1), Output: \"(700, 0)\"\nInput: dict(sizedict={'HicUsedTotalSize': 1000, 'HicChrBeginI': 0, 'HicChrBeginII': 500}, chrlist=['I', 'II'], achr=\"I\", chrindex=1), Output: \"(1000, 0)\"\nInput: dict(sizedict={'HicUsedTotalSize': 300, 'HicChrBegin1': 0, 'HicChrBegin2': 150}, chrlist=['1', '2'], achr=\"1\", chrindex=0), Output: \"(150, 0)\"\n\nFunction: givematrixsize\n\nWrite a function that generates the output from the input.\n", "id": "a631b5675524bae2a7c43fc4b66bc3ecce892813_0"}
{"example_str": "examples = [\n    dict(num=1),\n    dict(num=2.5),\n    dict(num=0),\n    dict(num=-3),\n    dict(num=10),\n    dict(num=0.1),\n    dict(num=-0.5),\n    dict(num=7),\n    dict(num=11),\n    dict(num=-2)\n]\nexamples += [\n    dict(num=2),\n    dict(num=-3),\n    dict(num=0),\n    dict(num=1.5),\n    dict(num=-1.5),\n    dict(num=10),\n    dict(num=-10),\n    dict(num=100),\n    dict(num=0.1),\n    dict(num=-0.1)\n]\nexamples += [\n    dict(num=1),\n    dict(num=2),\n    dict(num=3),\n    dict(num=-1),\n    dict(num=0.5),\n    dict(num=-2),\n    dict(num=10),\n    dict(num=100),\n    dict(num=-5),\n    dict(num=0)\n]", "code": "def fruitful_func(num):\n    return num ** 3\n", "func_name": "fruitful_func", "exec_status": true, "example_inputs": ["\"{'num': 1}\"", "\"{'num': 2.5}\"", "\"{'num': 0}\"", "\"{'num': -3}\"", "\"{'num': 10}\"", "\"{'num': 0.1}\"", "\"{'num': -0.5}\"", "\"{'num': 7}\"", "\"{'num': 11}\"", "\"{'num': -2}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"15.625\""}, {"return": "\"0\""}, {"return": "\"-27\""}, {"return": "\"1000\""}, {"return": "\"0.0010000000000000002\""}, {"return": "\"-0.125\""}, {"return": "\"343\""}, {"return": "\"1331\""}, {"return": "\"-8\""}, {"return": "\"8\""}, {"return": "\"-27\""}, {"return": "\"0\""}, {"return": "\"3.375\""}, {"return": "\"-3.375\""}, {"return": "\"1000\""}, {"return": "\"-1000\""}, {"return": "\"1000000\""}, {"return": "\"0.0010000000000000002\""}, {"return": "\"-0.0010000000000000002\""}, {"return": "\"1\""}, {"return": "\"8\""}, {"return": "\"27\""}, {"return": "\"-1\""}, {"return": "\"0.125\""}, {"return": "\"-8\""}, {"return": "\"1000\""}, {"return": "\"1000000\""}, {"return": "\"-125\""}, {"return": "\"0\""}], "parsed_inputs": [[["num", "1"]], [["num", "2.5"]], [["num", "0"]], [["num", "-3"]], [["num", "10"]], [["num", "0.1"]], [["num", "-0.5"]], [["num", "7"]], [["num", "11"]], [["num", "-2"]]], "exec_code": "def fruitful_func(num):\n    return num ** 3\n", "output": "The function is:\n\n```python\ndef fruitful_func(num):\n    return num ** 3\n\n```", "choosed_example_idx": [3, 8, 4, 7], "prompt": "Write a function that generates the output from the input.\nInput: dict(num=-3), Output: \"-27\"\nInput: dict(num=11), Output: \"1331\"\nInput: dict(num=10), Output: \"1000\"\nInput: dict(num=7), Output: \"343\"\n\nFunction: fruitful_func\n\n", "id": "e661fba9974bf7e8ecb8b9587a6b39716a485383_0"}
{"example_str": "examples = [\n    dict(arr=[1, 2, 3, 4, 5], ele=3),\n    dict(arr=[10, 20, 30, 40, 50], ele=20),\n    dict(arr=[-5, -3, -1, 0, 1], ele=-3),\n    dict(arr=[1, 2, 3, 4, 5], ele=6),\n    dict(arr=[10, 20, 30, 40, 50], ele=35),\n    dict(arr=[-5, -3, -1, 0, 1], ele=2),\n    dict(arr=[1, 1, 1, 1, 1], ele=1),\n    dict(arr=[1, 2, 3, 4, 5], ele=0),\n    dict(arr=[10, 20, 30, 40, 50], ele=51),\n    dict(arr=[-5, -3, -1, 0, 1], ele=-6),\n]\nexamples += [\n    dict(arr=[1, 2, 3, 4, 5], ele=3),\n    dict(arr=[10, 20, 30, 40, 50], ele=25),\n    dict(arr=[5, 10, 15, 20, 25], ele=5),\n    dict(arr=[-10, 0, 10, 20, 30], ele=-10),\n    dict(arr=[100, 200, 300, 400, 500], ele=400),\n    dict(arr=[1, 1, 1, 1, 1], ele=1),\n    dict(arr=[2, 4, 6, 8, 10], ele=11),\n    dict(arr=[3, 6, 9, 12, 15], ele=9),\n    dict(arr=[0, 2, 4, 6, 8, 10], ele=0),\n    dict(arr=[-50, -40, -30, -20, -10], ele=-30)\n]\nexamples += [\n    dict(arr=[1, 2, 3, 4, 5], ele=3),\n    dict(arr=[10, 20, 30, 40, 50], ele=40),\n    dict(arr=[5, 10, 15, 20, 25], ele=5),\n    dict(arr=[100, 200, 300, 400, 500], ele=600),\n    dict(arr=[-5, 0, 5, 10, 15], ele=-5),\n    dict(arr=[2, 4, 6, 8, 10], ele=7),\n    dict(arr=[1, 3, 5, 7, 9], ele=8),\n    dict(arr=[-10, -5, 0, 5, 10], ele=0),\n    dict(arr=[0, 2, 4, 6, 8], ele=4),\n    dict(arr=[10, 20, 30, 40, 50], ele=10)\n]", "code": "def BinSearch_iter(arr, ele):\n    first = 0\n    last = len(arr) - 1\n    found = False\n    while first <= last and not found:\n        mid = (first + last) // 2\n        if arr[mid] == ele:\n            found = True\n        elif ele < arr[mid]:\n            last = mid - 1\n        else:\n            first = mid + 1\n    return found\n", "func_name": "BinSearch_iter", "exec_status": true, "example_inputs": ["\"{'arr': [1, 2, 3, 4, 5], 'ele': 3}\"", "\"{'arr': [10, 20, 30, 40, 50], 'ele': 20}\"", "\"{'arr': [-5, -3, -1, 0, 1], 'ele': -3}\"", "\"{'arr': [1, 2, 3, 4, 5], 'ele': 6}\"", "\"{'arr': [10, 20, 30, 40, 50], 'ele': 35}\"", "\"{'arr': [-5, -3, -1, 0, 1], 'ele': 2}\"", "\"{'arr': [1, 1, 1, 1, 1], 'ele': 1}\"", "\"{'arr': [1, 2, 3, 4, 5], 'ele': 0}\"", "\"{'arr': [10, 20, 30, 40, 50], 'ele': 51}\"", "\"{'arr': [-5, -3, -1, 0, 1], 'ele': -6}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}], "parsed_inputs": [[["arr", "[1, 2, 3, 4, 5]"], ["ele", "3"]], [["arr", "[10, 20, 30, 40, 50]"], ["ele", "20"]], [["arr", "[-5, -3, -1, 0, 1]"], ["ele", "-3"]], [["arr", "[1, 2, 3, 4, 5]"], ["ele", "6"]], [["arr", "[10, 20, 30, 40, 50]"], ["ele", "35"]], [["arr", "[-5, -3, -1, 0, 1]"], ["ele", "2"]], [["arr", "[1, 1, 1, 1, 1]"], ["ele", "1"]], [["arr", "[1, 2, 3, 4, 5]"], ["ele", "0"]], [["arr", "[10, 20, 30, 40, 50]"], ["ele", "51"]], [["arr", "[-5, -3, -1, 0, 1]"], ["ele", "-6"]]], "exec_code": "def BinSearch_iter(arr, ele):\n    first = 0\n    last = len(arr) - 1\n    found = False\n    while first <= last and not found:\n        mid = (first + last) // 2\n        if arr[mid] == ele:\n            found = True\n        elif ele < arr[mid]:\n            last = mid - 1\n        else:\n            first = mid + 1\n    return found\n", "output": "The function is:\n\n```python\ndef BinSearch_iter(arr, ele):\n    first = 0\n    last = len(arr) - 1\n    found = False\n    while first <= last and not found:\n        mid = (first + last) // 2\n        if arr[mid] == ele:\n            found = True\n        elif ele < arr[mid]:\n            last = mid - 1\n        else:\n            first = mid + 1\n    return found\n\n```", "choosed_example_idx": [6, 1, 0, 4, 2, 9, 5, 3], "prompt": "Input: dict(arr=[1, 1, 1, 1, 1], ele=1), Output: \"True\"\nInput: dict(arr=[10, 20, 30, 40, 50], ele=20), Output: \"True\"\nInput: dict(arr=[1, 2, 3, 4, 5], ele=3), Output: \"True\"\nInput: dict(arr=[10, 20, 30, 40, 50], ele=35), Output: \"False\"\nInput: dict(arr=[-5, -3, -1, 0, 1], ele=-3), Output: \"True\"\nInput: dict(arr=[-5, -3, -1, 0, 1], ele=-6), Output: \"False\"\nInput: dict(arr=[-5, -3, -1, 0, 1], ele=2), Output: \"False\"\nInput: dict(arr=[1, 2, 3, 4, 5], ele=6), Output: \"False\"\n\n\n\nWrite a function that generates the output from the input.\nFunction: BinSearch_iter\n", "id": "85ca933403d197392afd8b7968a347caca51810d_0"}
{"example_str": "examples = [\n    dict(x='12345'),\n    dict(x='98765'),\n    dict(x='01234'),\n    dict(x='55555'),\n    dict(x='11111'),\n    dict(x='24680'),\n    dict(x='13579'),\n    dict(x='00000'),\n    dict(x='99999'),\n    dict(x='1234567890')\n]\nexamples += [\n    dict(x=\"1234567890\"),\n    dict(x=\"9876543210\"),\n    dict(x=\"5555555555\"),\n    dict(x=\"0000000000\"),\n    dict(x=\"1111122222\"),\n    dict(x=\"5678901234\"),\n    dict(x=\"4444433333\"),\n    dict(x=\"9999988888\"),\n    dict(x=\"1231231231\"),\n    dict(x=\"9081726354\")\n]\nexamples += [\n    dict(x='1234567890'),\n    dict(x='9876543210'),\n    dict(x='5555555555'),\n    dict(x='0000000000'),\n    dict(x='4444444444'),\n    dict(x='9999999999'),\n    dict(x='1234098765'),\n    dict(x='5678901234'),\n    dict(x='2486248624'),\n    dict(x='1357913579')\n]", "code": "def fake_bin(x):\n    \"\"\"Replace numbers in string with 0 for -lt 5 or 1 for -ge 5.\"\"\"\n    new = []\n    divvied = list(x)\n    idx = 0\n    while idx < len(divvied):\n        if int(divvied[idx]) < 5:\n            new.append('0')\n        else:\n            new.append('1')\n        idx += 1\n    return ''.join(new)\n", "func_name": "fake_bin", "exec_status": true, "example_inputs": ["\"{'x': '12345'}\"", "\"{'x': '98765'}\"", "\"{'x': '01234'}\"", "\"{'x': '55555'}\"", "\"{'x': '11111'}\"", "\"{'x': '24680'}\"", "\"{'x': '13579'}\"", "\"{'x': '00000'}\"", "\"{'x': '99999'}\"", "\"{'x': '1234567890'}\""], "example_outputs": [{"return": "\"'00001'\""}, {"return": "\"'11111'\""}, {"return": "\"'00000'\""}, {"return": "\"'11111'\""}, {"return": "\"'00000'\""}, {"return": "\"'00110'\""}, {"return": "\"'00111'\""}, {"return": "\"'00000'\""}, {"return": "\"'11111'\""}, {"return": "\"'0000111110'\""}, {"return": "\"'0000111110'\""}, {"return": "\"'1111100000'\""}, {"return": "\"'1111111111'\""}, {"return": "\"'0000000000'\""}, {"return": "\"'0000000000'\""}, {"return": "\"'1111100000'\""}, {"return": "\"'0000000000'\""}, {"return": "\"'1111111111'\""}, {"return": "\"'0000000000'\""}, {"return": "\"'1010101010'\""}, {"return": "\"'0000111110'\""}, {"return": "\"'1111100000'\""}, {"return": "\"'1111111111'\""}, {"return": "\"'0000000000'\""}, {"return": "\"'0000000000'\""}, {"return": "\"'1111111111'\""}, {"return": "\"'0000011111'\""}, {"return": "\"'1111100000'\""}, {"return": "\"'0011001100'\""}, {"return": "\"'0011100111'\""}], "parsed_inputs": [[["x", "\"12345\""]], [["x", "\"98765\""]], [["x", "\"01234\""]], [["x", "\"55555\""]], [["x", "\"11111\""]], [["x", "\"24680\""]], [["x", "\"13579\""]], [["x", "\"00000\""]], [["x", "\"99999\""]], [["x", "\"1234567890\""]]], "exec_code": "def fake_bin(x):\n    \"\"\"Replace numbers in string with 0 for -lt 5 or 1 for -ge 5.\"\"\"\n    new = []\n    divvied = list(x)\n    idx = 0\n    while idx < len(divvied):\n        if int(divvied[idx]) < 5:\n            new.append('0')\n        else:\n            new.append('1')\n        idx += 1\n    return ''.join(new)\n", "output": "The function is:\n\n```python\ndef fake_bin(x):\n    \"\"\"Replace numbers in string with 0 for -lt 5 or 1 for -ge 5.\"\"\"\n    new = []\n    divvied = list(x)\n    idx = 0\n    while idx < len(divvied):\n        if int(divvied[idx]) < 5:\n            new.append('0')\n        else:\n            new.append('1')\n        idx += 1\n    return ''.join(new)\n\n```", "choosed_example_idx": [6, 3, 2, 5, 1, 7], "prompt": "Function: fake_bin\nWrite a function that generates the output from the input.\nInput: dict(x=\"13579\"), Output: \"'00111'\"\nInput: dict(x=\"55555\"), Output: \"'11111'\"\nInput: dict(x=\"01234\"), Output: \"'00000'\"\nInput: dict(x=\"24680\"), Output: \"'00110'\"\nInput: dict(x=\"98765\"), Output: \"'11111'\"\nInput: dict(x=\"00000\"), Output: \"'00000'\"\n\n\n\n", "id": "b9b68ef8846b506fae02760a08f721c7c6194460_0"}
{"example_str": "examples = [\n    dict(nums=[-1, 0, 1, 2, -1, -4]),\n    dict(nums=[0, 1, 1]),\n    dict(nums=[0, 0, 0]),\n    dict(nums=[-2, 0, 0, 2, 2]),\n    dict(nums=[-5, 1, -2, -1, 3]),\n    dict(nums=[1, 2, 3, 4, 5]),\n    dict(nums=[-10, -5, 0, 3, 7]),\n    dict(nums=[-1, 0, 1, 0]),\n    dict(nums=[-2, 0, 1, 1, 2]),\n    dict(nums=[3, 0, -2, -1, 1, 2]),\n]\nexamples += [\n    dict(nums=[-1, 0, 1, 2, -1, -4]),  # Example with multiple valid triplets\n    dict(nums=[0, 0, 0, 0]),  # Example where all elements are zero\n    dict(nums=[-1, -1, 2]),  # Example with exactly one valid triplet\n    dict(nums=[1, 2, 3]),  # Example with no valid triplet\n    dict(nums=[]),  # Example with an empty list\n    dict(nums=[-5, 1, 10, 0, -3, 3, -3, 2, 2]),  # Example with positive, negative numbers and zero\n    dict(nums=[-2, -2, 1, 1, 4]),  # Example with duplicates and a valid triplet\n    dict(nums=[-4, -2, -2, -2, 0, 1, 2, 3, 3, 4, 4, 6, 6]),  # Larger array with duplicates\n    dict(nums=[3, -2, 1, 0]),  # Small array with one valid triplet\n    dict(nums=[-1, 0, 1, 0]),  # Example with zero included and a valid triplet\n]\nexamples += [\n    dict(nums=[-1, 0, 1, 2, -1, -4]),\n    dict(nums=[0, 0, 0, 0]),\n    dict(nums=[-2, -1, 0, 1, 2]),\n    dict(nums=[3, -2, -1, 0, 1, 2]),\n    dict(nums=[-5, 1, 10, -2, 8]),\n    dict(nums=[-3, -1, 1, 2, -1, -4]),\n    dict(nums=[-1, -1, 2, 2, -1, -4]),\n    dict(nums=[1, 2, -3, 4, -2]),\n    dict(nums=[-1, 2, -1, 0, 1, 0]),\n    dict(nums=[30, -10, -20, 0, 40, 10, -10])\n]", "code": "def threeSum(nums):\n    res = []\n    nums.sort()\n    for i, x in enumerate(nums):\n        if i > 0 and x == nums[i - 1]:\n            continue\n        l, r = i + 1, len(nums) - 1\n        while l < r:\n            threeS = x + nums[l] + nums[r]\n            if threeS > 0:\n                r -= 1\n            elif threeS < 0:\n                l += 1\n            else:\n                res.append([x, nums[l], nums[r]])\n                l += 1\n                while nums[l] == nums[l - 1] and l < r:\n                    l += 1\n    return res\n", "func_name": "threeSum", "exec_status": true, "example_inputs": ["\"{'nums': [-1, 0, 1, 2, -1, -4]}\"", "\"{'nums': [0, 1, 1]}\"", "\"{'nums': [0, 0, 0]}\"", "\"{'nums': [-2, 0, 0, 2, 2]}\"", "\"{'nums': [-5, 1, -2, -1, 3]}\"", "\"{'nums': [1, 2, 3, 4, 5]}\"", "\"{'nums': [-10, -5, 0, 3, 7]}\"", "\"{'nums': [-1, 0, 1, 0]}\"", "\"{'nums': [-2, 0, 1, 1, 2]}\"", "\"{'nums': [3, 0, -2, -1, 1, 2]}\""], "example_outputs": [{"return": "\"[[-1, -1, 2], [-1, 0, 1]]\""}, {"return": "\"[]\""}, {"return": "\"[[0, 0, 0]]\""}, {"return": "\"[[-2, 0, 2]]\""}, {"return": "\"[[-2, -1, 3]]\""}, {"return": "\"[]\""}, {"return": "\"[[-10, 3, 7]]\""}, {"return": "\"[[-1, 0, 1]]\""}, {"return": "\"[[-2, 0, 2], [-2, 1, 1]]\""}, {"return": "\"[[-2, -1, 3], [-2, 0, 2], [-1, 0, 1]]\""}, {"return": "\"[[-1, -1, 2], [-1, 0, 1]]\""}, {"return": "\"[[0, 0, 0]]\""}, {"return": "\"[[-1, -1, 2]]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[[-5, 2, 3], [-3, 0, 3], [-3, 1, 2]]\""}, {"return": "\"[[-2, -2, 4], [-2, 1, 1]]\""}, {"return": "\"[[-4, -2, 6], [-4, 0, 4], [-4, 1, 3], [-2, -2, 4], [-2, 0, 2]]\""}, {"return": "\"[]\""}, {"return": "\"[[-1, 0, 1]]\""}, {"return": "\"[[-1, -1, 2], [-1, 0, 1]]\""}, {"return": "\"[[0, 0, 0]]\""}, {"return": "\"[[-2, 0, 2], [-1, 0, 1]]\""}, {"return": "\"[[-2, -1, 3], [-2, 0, 2], [-1, 0, 1]]\""}, {"return": "\"[]\""}, {"return": "\"[[-3, 1, 2], [-1, -1, 2]]\""}, {"return": "\"[[-4, 2, 2], [-1, -1, 2]]\""}, {"return": "\"[[-3, 1, 2]]\""}, {"return": "\"[[-1, -1, 2], [-1, 0, 1]]\""}, {"return": "\"[[-20, -10, 30], [-10, 0, 10]]\""}], "parsed_inputs": [[["nums", "[-1, 0, 1, 2, -1, -4]"]], [["nums", "[0, 1, 1]"]], [["nums", "[0, 0, 0]"]], [["nums", "[-2, 0, 0, 2, 2]"]], [["nums", "[-5, 1, -2, -1, 3]"]], [["nums", "[1, 2, 3, 4, 5]"]], [["nums", "[-10, -5, 0, 3, 7]"]], [["nums", "[-1, 0, 1, 0]"]], [["nums", "[-2, 0, 1, 1, 2]"]], [["nums", "[3, 0, -2, -1, 1, 2]"]]], "exec_code": "def threeSum(nums):\n    res = []\n    nums.sort()\n    for i, x in enumerate(nums):\n        if i > 0 and x == nums[i - 1]:\n            continue\n        l, r = i + 1, len(nums) - 1\n        while l < r:\n            threeS = x + nums[l] + nums[r]\n            if threeS > 0:\n                r -= 1\n            elif threeS < 0:\n                l += 1\n            else:\n                res.append([x, nums[l], nums[r]])\n                l += 1\n                while nums[l] == nums[l - 1] and l < r:\n                    l += 1\n    return res\n", "output": "The function is:\n\n```python\ndef threeSum(nums):\n    res = []\n    nums.sort()\n    for i, x in enumerate(nums):\n        if i > 0 and x == nums[i - 1]:\n            continue\n        l, r = i + 1, len(nums) - 1\n        while l < r:\n            threeS = x + nums[l] + nums[r]\n            if threeS > 0:\n                r -= 1\n            elif threeS < 0:\n                l += 1\n            else:\n                res.append([x, nums[l], nums[r]])\n                l += 1\n                while nums[l] == nums[l - 1] and l < r:\n                    l += 1\n    return res\n\n```", "choosed_example_idx": [1, 7, 6, 9, 4, 3, 0, 8, 5, 2], "prompt": "Write a function that generates the output from the input.\nInput: dict(nums=[0, 1, 1]), Output: \"[]\"\nInput: dict(nums=[-1, 0, 1, 0]), Output: \"[[-1, 0, 1]]\"\nInput: dict(nums=[-10, -5, 0, 3, 7]), Output: \"[[-10, 3, 7]]\"\nInput: dict(nums=[3, 0, -2, -1, 1, 2]), Output: \"[[-2, -1, 3], [-2, 0, 2], [-1, 0, 1]]\"\nInput: dict(nums=[-5, 1, -2, -1, 3]), Output: \"[[-2, -1, 3]]\"\nInput: dict(nums=[-2, 0, 0, 2, 2]), Output: \"[[-2, 0, 2]]\"\nInput: dict(nums=[-1, 0, 1, 2, -1, -4]), Output: \"[[-1, -1, 2], [-1, 0, 1]]\"\nInput: dict(nums=[-2, 0, 1, 1, 2]), Output: \"[[-2, 0, 2], [-2, 1, 1]]\"\nInput: dict(nums=[1, 2, 3, 4, 5]), Output: \"[]\"\nInput: dict(nums=[0, 0, 0]), Output: \"[[0, 0, 0]]\"\n\n\nFunction: threeSum\n", "id": "2aeb381b3645138824b5a7ea038809dd91052fa4_0"}
{"example_str": "examples = [\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=5),\n    dict(n=8),\n    dict(n=10),\n    dict(n=15),\n    dict(n=20),\n    dict(n=25),\n    dict(n=30)\n]\nexamples += [\n    dict(n=1),  # Minimal case, the first Fibonacci number\n    dict(n=2),  # The first two Fibonacci numbers\n    dict(n=5),  # First five Fibonacci numbers\n    dict(n=10), # First ten Fibonacci numbers\n    dict(n=0),  # Edge case, no Fibonacci numbers\n    dict(n=15), # First fifteen Fibonacci numbers\n    dict(n=20), # First twenty Fibonacci numbers\n    dict(n=3),  # First three Fibonacci numbers\n    dict(n=8),  # First eight Fibonacci numbers\n    dict(n=12)  # First twelve Fibonacci numbers\n]\nexamples += [\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10)\n]", "code": "def fibonacci_series_to(n):\n    \"\"\"This function calculates the fibonacci series until the \"n\"th element\n        Args:\n            n (int): The last element of the fibonacci series required\n        Returns:\n            list: the fibonacci series until the \"n\"th element\n    \"\"\"\n    l = [0, 1]\n    for i in range(n - 1):\n        l = [*l, l[-1] + l[-2]]\n    return l[:n]\n", "func_name": "fibonacci_series_to", "exec_status": true, "example_inputs": ["\"{'n': 1}\"", "\"{'n': 2}\"", "\"{'n': 3}\"", "\"{'n': 5}\"", "\"{'n': 8}\"", "\"{'n': 10}\"", "\"{'n': 15}\"", "\"{'n': 20}\"", "\"{'n': 25}\"", "\"{'n': 30}\""], "example_outputs": [{"return": "\"[0]\""}, {"return": "\"[0, 1]\""}, {"return": "\"[0, 1, 1]\""}, {"return": "\"[0, 1, 1, 2, 3]\""}, {"return": "\"[0, 1, 1, 2, 3, 5, 8, 13]\""}, {"return": "\"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\""}, {"return": "\"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]\""}, {"return": "\"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]\""}, {"return": "\"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368]\""}, {"return": "\"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229]\""}, {"return": "\"[0]\""}, {"return": "\"[0, 1]\""}, {"return": "\"[0, 1, 1, 2, 3]\""}, {"return": "\"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\""}, {"return": "\"[]\""}, {"return": "\"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]\""}, {"return": "\"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]\""}, {"return": "\"[0, 1, 1]\""}, {"return": "\"[0, 1, 1, 2, 3, 5, 8, 13]\""}, {"return": "\"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\""}, {"return": "\"[0]\""}, {"return": "\"[0, 1]\""}, {"return": "\"[0, 1, 1]\""}, {"return": "\"[0, 1, 1, 2]\""}, {"return": "\"[0, 1, 1, 2, 3]\""}, {"return": "\"[0, 1, 1, 2, 3, 5]\""}, {"return": "\"[0, 1, 1, 2, 3, 5, 8]\""}, {"return": "\"[0, 1, 1, 2, 3, 5, 8, 13]\""}, {"return": "\"[0, 1, 1, 2, 3, 5, 8, 13, 21]\""}, {"return": "\"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\""}], "parsed_inputs": [[["n", "1"]], [["n", "2"]], [["n", "3"]], [["n", "5"]], [["n", "8"]], [["n", "10"]], [["n", "15"]], [["n", "20"]], [["n", "25"]], [["n", "30"]]], "exec_code": "def fibonacci_series_to(n):\n    \"\"\"This function calculates the fibonacci series until the \"n\"th element\n        Args:\n            n (int): The last element of the fibonacci series required\n        Returns:\n            list: the fibonacci series until the \"n\"th element\n    \"\"\"\n    l = [0, 1]\n    for i in range(n - 1):\n        l = [*l, l[-1] + l[-2]]\n    return l[:n]\n", "output": "The function is:\n\n```python\ndef fibonacci_series_to(n):\n    \"\"\"This function calculates the fibonacci series until the \"n\"th element\n        Args:\n            n (int): The last element of the fibonacci series required\n        Returns:\n            list: the fibonacci series until the \"n\"th element\n    \"\"\"\n    l = [0, 1]\n    for i in range(n - 1):\n        l = [*l, l[-1] + l[-2]]\n    return l[:n]\n\n```", "choosed_example_idx": [9, 7, 5, 4, 0, 2], "prompt": "Input: dict(n=30), Output: \"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229]\"\nInput: dict(n=20), Output: \"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]\"\nInput: dict(n=10), Output: \"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\"\nInput: dict(n=8), Output: \"[0, 1, 1, 2, 3, 5, 8, 13]\"\nInput: dict(n=1), Output: \"[0]\"\nInput: dict(n=3), Output: \"[0, 1, 1]\"\n\nFunction: fibonacci_series_to\nWrite a function that generates the output from the input.\n", "id": "4674501c6ca85d950c7f766a9e92a47c1a88ea65_0"}
{"example_str": "examples = [\n    dict(postfix=''),\n    dict(postfix='abc'),\n    dict(postfix='123'),\n    dict(postfix='xyz_'),\n    dict(postfix='_hello'),\n    dict(postfix='a'),\n    dict(postfix=' '),\n    dict(postfix='\\t'),\n    dict(postfix='__'),\n    dict(postfix='123abc'),\n]\nexamples += [\n    dict(postfix=''),\n    dict(postfix='a'),\n    dict(postfix='1'),\n    dict(postfix='Hello'),\n    dict(postfix='123'),\n    dict(postfix=' '),\n    dict(postfix='@'),\n    dict(postfix='longer string example'),\n    dict(postfix='1234567890'),\n    dict(postfix='\\n')\n]\nexamples += [\n    dict(postfix=''),\n    dict(postfix='abc'),\n    dict(postfix='123'),\n    dict(postfix='!@#'),\n    dict(postfix=' '),\n    dict(postfix='XYZ'),\n    dict(postfix='call'),\n    dict(postfix='type'),\n    dict(postfix='none'),\n    dict(postfix='implicit')\n]", "code": "def get_call_type(postfix):\n    if postfix == '':\n        return 'CallType.None'\n    else:\n        return 'CallType.ImplicitInstance'\n", "func_name": "get_call_type", "exec_status": true, "example_inputs": ["\"{'postfix': ''}\"", "\"{'postfix': 'abc'}\"", "\"{'postfix': '123'}\"", "\"{'postfix': 'xyz_'}\"", "\"{'postfix': '_hello'}\"", "\"{'postfix': 'a'}\"", "\"{'postfix': ' '}\"", "\"{'postfix': '\\\\t'}\"", "\"{'postfix': '__'}\"", "\"{'postfix': '123abc'}\""], "example_outputs": [{"return": "\"'CallType.None'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.None'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.None'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.ImplicitInstance'\""}, {"return": "\"'CallType.ImplicitInstance'\""}], "parsed_inputs": [[["postfix", "\"\""]], [["postfix", "\"abc\""]], [["postfix", "\"123\""]], [["postfix", "\"xyz_\""]], [["postfix", "\"_hello\""]], [["postfix", "\"a\""]], [["postfix", "\" \""]], [["postfix", "\"\\t\""]], [["postfix", "\"__\""]], [["postfix", "\"123abc\""]]], "exec_code": "def get_call_type(postfix):\n    if postfix == '':\n        return 'CallType.None'\n    else:\n        return 'CallType.ImplicitInstance'\n", "output": "The function is:\n\n```python\ndef get_call_type(postfix):\n    if postfix == '':\n        return 'CallType.None'\n    else:\n        return 'CallType.ImplicitInstance'\n\n```", "choosed_example_idx": [8, 4, 1, 2, 9], "prompt": "Write a function that generates the output from the input.\nFunction: get_call_type\nInput: dict(postfix=\"__\"), Output: \"'CallType.ImplicitInstance'\"\nInput: dict(postfix=\"_hello\"), Output: \"'CallType.ImplicitInstance'\"\nInput: dict(postfix=\"abc\"), Output: \"'CallType.ImplicitInstance'\"\nInput: dict(postfix=\"123\"), Output: \"'CallType.ImplicitInstance'\"\nInput: dict(postfix=\"123abc\"), Output: \"'CallType.ImplicitInstance'\"\n\n\n", "id": "3864b17d3f89634a47ae201c4f793fa3d3696415_0"}
{"example_str": "examples = [\n    dict(limit=1),\n    dict(limit=2),\n    dict(limit=3),\n    dict(limit=4),\n    dict(limit=5),\n    dict(limit=6),\n    dict(limit=7),\n    dict(limit=8),\n    dict(limit=9),\n    dict(limit=10),\n]\nexamples += [\n    {\"limit\": 1},  # Fibonacci numbers with 1 digit (1, 1, 2, 3, 5, 8)\n    {\"limit\": 2},  # Fibonacci numbers until the first with 2 digits (13)\n    {\"limit\": 3},  # Fibonacci numbers until the first with 3 digits (144)\n    {\"limit\": 4},  # Fibonacci numbers until the first with 4 digits (1597)\n    {\"limit\": 5},  # Fibonacci numbers until the first with 5 digits (10946)\n    {\"limit\": 6},  # Fibonacci numbers until the first with 6 digits (113490)\n    {\"limit\": 7},  # Fibonacci numbers until the first with 7 digits (1149851)\n    {\"limit\": 8},  # Fibonacci numbers until the first with 8 digits (117669030)\n    {\"limit\": 9},  # Fibonacci numbers until the first with 9 digits (1220016041)\n    {\"limit\": 10}  # Fibonacci numbers until the first with 10 digits (102334155)\n]\nexamples += [\n    dict(limit=1),\n    dict(limit=2),\n    dict(limit=3),\n    dict(limit=4),\n    dict(limit=5),\n    dict(limit=6),\n    dict(limit=7),\n    dict(limit=8),\n    dict(limit=9),\n    dict(limit=10)\n]", "code": "def fib_list(limit):\n    temp_list = [1, 1]\n    while True:\n        n_val = temp_list[len(temp_list) - 1] + temp_list[len(temp_list) - 2]\n        temp_list.append(n_val)\n        if len(str(temp_list[len(temp_list) - 1])) == limit:\n            return len(temp_list)\n", "func_name": "fib_list", "exec_status": true, "example_inputs": ["\"{'limit': 1}\"", "\"{'limit': 2}\"", "\"{'limit': 3}\"", "\"{'limit': 4}\"", "\"{'limit': 5}\"", "\"{'limit': 6}\"", "\"{'limit': 7}\"", "\"{'limit': 8}\"", "\"{'limit': 9}\"", "\"{'limit': 10}\""], "example_outputs": [{"return": "\"3\""}, {"return": "\"7\""}, {"return": "\"12\""}, {"return": "\"17\""}, {"return": "\"21\""}, {"return": "\"26\""}, {"return": "\"31\""}, {"return": "\"36\""}, {"return": "\"40\""}, {"return": "\"45\""}, {"return": "\"3\""}, {"return": "\"7\""}, {"return": "\"12\""}, {"return": "\"17\""}, {"return": "\"21\""}, {"return": "\"26\""}, {"return": "\"31\""}, {"return": "\"36\""}, {"return": "\"40\""}, {"return": "\"45\""}, {"return": "\"3\""}, {"return": "\"7\""}, {"return": "\"12\""}, {"return": "\"17\""}, {"return": "\"21\""}, {"return": "\"26\""}, {"return": "\"31\""}, {"return": "\"36\""}, {"return": "\"40\""}, {"return": "\"45\""}], "parsed_inputs": [[["limit", "1"]], [["limit", "2"]], [["limit", "3"]], [["limit", "4"]], [["limit", "5"]], [["limit", "6"]], [["limit", "7"]], [["limit", "8"]], [["limit", "9"]], [["limit", "10"]]], "exec_code": "def fib_list(limit):\n    temp_list = [1, 1]\n    while True:\n        n_val = temp_list[len(temp_list) - 1] + temp_list[len(temp_list) - 2]\n        temp_list.append(n_val)\n        if len(str(temp_list[len(temp_list) - 1])) == limit:\n            return len(temp_list)\n", "output": "The function is:\n\n```python\ndef fib_list(limit):\n    temp_list = [1, 1]\n    while True:\n        n_val = temp_list[len(temp_list) - 1] + temp_list[len(temp_list) - 2]\n        temp_list.append(n_val)\n        if len(str(temp_list[len(temp_list) - 1])) == limit:\n            return len(temp_list)\n\n```", "choosed_example_idx": [4, 8, 3, 9, 5, 2, 1, 6], "prompt": "Input: dict(limit=5), Output: \"21\"\nInput: dict(limit=9), Output: \"40\"\nInput: dict(limit=4), Output: \"17\"\nInput: dict(limit=10), Output: \"45\"\nInput: dict(limit=6), Output: \"26\"\nInput: dict(limit=3), Output: \"12\"\nInput: dict(limit=2), Output: \"7\"\nInput: dict(limit=7), Output: \"31\"\n\nFunction: fib_list\nWrite a function that generates the output from the input.\n", "id": "d8f63a89bfd145f4a240c4640e3b1fffd07cbf89_0"}
{"example_str": "examples = [\n    dict(program_id=1, location=2, gl_getter=lambda x, y, z: None, c_array=[1], length=1),\n    dict(program_id=42, location=0, gl_getter=lambda x, y, z: None, c_array=[1, 2, 3], length=3),\n    dict(program_id=10, location=5, gl_getter=lambda x, y, z: None, c_array=[4, 5, 6, 7], length=4),\n    dict(program_id=20, location=10, gl_getter=lambda x, y, z: None, c_array=[1], length=1),\n    dict(program_id=30, location=15, gl_getter=lambda x, y, z: None, c_array=[2, 3, 4, 5, 6], length=5),\n    dict(program_id=40, location=20, gl_getter=lambda x, y, z: None, c_array=[7, 8, 9], length=3),\n    dict(program_id=50, location=25, gl_getter=lambda x, y, z: None, c_array=[10, 11, 12, 13, 14, 15], length=6),\n    dict(program_id=60, location=30, gl_getter=lambda x, y, z: None, c_array=[16, 17, 18], length=3),\n    dict(program_id=70, location=35, gl_getter=lambda x, y, z: None, c_array=[19, 20, 21, 22, 23, 24, 25], length=7),\n    dict(program_id=80, location=40, gl_getter=lambda x, y, z: None, c_array=[26, 27, 28, 29, 30], length=5),\n]\nexamples += [\n    dict(program_id=1, location=0, gl_getter=lambda pid, loc, arr: arr.append(1), c_array=[], length=1),\n    dict(program_id=2, location=1, gl_getter=lambda pid, loc, arr: arr.extend([1, 2]), c_array=[], length=2),\n    dict(program_id=3, location=2, gl_getter=lambda pid, loc, arr: arr.extend([1, 2, 3]), c_array=[], length=3),\n    dict(program_id=4, location=3, gl_getter=lambda pid, loc, arr: arr.extend([0]), c_array=[], length=1),\n    dict(program_id=5, location=4, gl_getter=lambda pid, loc, arr: arr.extend([5, 6, 7, 8]), c_array=[], length=4),\n    dict(program_id=6, location=5, gl_getter=lambda pid, loc, arr: arr.extend([9, 10]), c_array=[], length=2),\n    dict(program_id=7, location=6, gl_getter=lambda pid, loc, arr: arr.extend([11]), c_array=[], length=1),\n    dict(program_id=8, location=7, gl_getter=lambda pid, loc, arr: arr.extend([12, 13, 14, 15, 16]), c_array=[], length=5),\n    dict(program_id=9, location=8, gl_getter=lambda pid, loc, arr: arr.extend([17, 18]), c_array=[], length=2),\n    dict(program_id=10, location=9, gl_getter=lambda pid, loc, arr: arr.extend([19]), c_array=[], length=1)\n]\nexamples += [\n    dict(program_id=101, location=1, gl_getter=lambda x, y, z: z.append(x + y), c_array=[], length=1),\n    dict(program_id=102, location=2, gl_getter=lambda x, y, z: z.extend([x, y]), c_array=[], length=2),\n    dict(program_id=103, location=3, gl_getter=lambda x, y, z: z.append(x * y), c_array=[], length=1),\n    dict(program_id=104, location=4, gl_getter=lambda x, y, z: z.extend([x - y]), c_array=[], length=2),\n    dict(program_id=105, location=5, gl_getter=lambda x, y, z: z.append(x / y if y != 0 else 0), c_array=[], length=1),\n    dict(program_id=106, location=6, gl_getter=lambda x, y, z: z.extend([x ** y]), c_array=[], length=2),\n    dict(program_id=107, location=7, gl_getter=lambda x, y, z: z.append(x % y if y != 0 else 0), c_array=[], length=1),\n    dict(program_id=108, location=8, gl_getter=lambda x, y, z: z.extend([x // y if y != 0 else 0]), c_array=[], length=2),\n    dict(program_id=109, location=9, gl_getter=lambda x, y, z: z.append(x & y), c_array=[], length=1),\n    dict(program_id=110, location=10, gl_getter=lambda x, y, z: z.extend([x | y]), c_array=[], length=2)\n]", "code": "def _create_getter_func(program_id, location, gl_getter, c_array, length):\n    if length == 1:\n\n        def getter_func():\n            gl_getter(program_id, location, c_array)\n            return c_array[0]\n    else:\n\n        def getter_func():\n            gl_getter(program_id, location, c_array)\n            return c_array[:]\n    return getter_func\n", "func_name": "_create_getter_func", "exec_status": true, "example_inputs": ["\"{'program_id': 1, 'location': 2, 'gl_getter': <function <lambda> at 0x7fe4176d4f70>, 'c_array': [1], 'length': 1}\"", "\"{'program_id': 42, 'location': 0, 'gl_getter': <function <lambda> at 0x7fe4176d48b0>, 'c_array': [1, 2, 3], 'length': 3}\"", "\"{'program_id': 10, 'location': 5, 'gl_getter': <function <lambda> at 0x7fe4176d4820>, 'c_array': [4, 5, 6, 7], 'length': 4}\"", "\"{'program_id': 20, 'location': 10, 'gl_getter': <function <lambda> at 0x7fe4176d44c0>, 'c_array': [1], 'length': 1}\"", "\"{'program_id': 30, 'location': 15, 'gl_getter': <function <lambda> at 0x7fe4176d4550>, 'c_array': [2, 3, 4, 5, 6], 'length': 5}\"", "\"{'program_id': 40, 'location': 20, 'gl_getter': <function <lambda> at 0x7fe4176d4670>, 'c_array': [7, 8, 9], 'length': 3}\"", "\"{'program_id': 50, 'location': 25, 'gl_getter': <function <lambda> at 0x7fe4176d4700>, 'c_array': [10, 11, 12, 13, 14, 15], 'length': 6}\"", "\"{'program_id': 60, 'location': 30, 'gl_getter': <function <lambda> at 0x7fe4176d4790>, 'c_array': [16, 17, 18], 'length': 3}\"", "\"{'program_id': 70, 'location': 35, 'gl_getter': <function <lambda> at 0x7fe4176d43a0>, 'c_array': [19, 20, 21, 22, 23, 24, 25], 'length': 7}\"", "\"{'program_id': 80, 'location': 40, 'gl_getter': <function <lambda> at 0x7fe4176d4310>, 'c_array': [26, 27, 28, 29, 30], 'length': 5}\""], "example_outputs": [{"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7fe4176d4430>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7fe4176d4c10>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7fe4176d4ca0>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7fe4176d4430>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7fe4176d4c10>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7fe4176d4430>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7fe4176d4ca0>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7fe4176d4c10>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7fe4176d4430>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7fe4176d4ca0>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7f23ed1604c0>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7f23ed160550>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7f23ed1604c0>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7f23ed160550>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7f23ed1604c0>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7f23ed160550>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7f23ed1604c0>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7f23ed160550>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7f23ed1604c0>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7f23ed160550>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7f43160044c0>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7f4316004550>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7f43160044c0>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7f4316004550>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7f43160044c0>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7f4316004550>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7f43160044c0>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7f4316004550>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7f43160044c0>\""}, {"return": "\"<function _create_getter_func.<locals>.getter_func at 0x7f4316004550>\""}], "parsed_inputs": [[["program_id", "1"], ["location", "2"], ["gl_getter", "(lambda x, y, z: None)"], ["c_array", "[1]"], ["length", "1"]], [["program_id", "42"], ["location", "0"], ["gl_getter", "(lambda x, y, z: None)"], ["c_array", "[1, 2, 3]"], ["length", "3"]], [["program_id", "10"], ["location", "5"], ["gl_getter", "(lambda x, y, z: None)"], ["c_array", "[4, 5, 6, 7]"], ["length", "4"]], [["program_id", "20"], ["location", "10"], ["gl_getter", "(lambda x, y, z: None)"], ["c_array", "[1]"], ["length", "1"]], [["program_id", "30"], ["location", "15"], ["gl_getter", "(lambda x, y, z: None)"], ["c_array", "[2, 3, 4, 5, 6]"], ["length", "5"]], [["program_id", "40"], ["location", "20"], ["gl_getter", "(lambda x, y, z: None)"], ["c_array", "[7, 8, 9]"], ["length", "3"]], [["program_id", "50"], ["location", "25"], ["gl_getter", "(lambda x, y, z: None)"], ["c_array", "[10, 11, 12, 13, 14, 15]"], ["length", "6"]], [["program_id", "60"], ["location", "30"], ["gl_getter", "(lambda x, y, z: None)"], ["c_array", "[16, 17, 18]"], ["length", "3"]], [["program_id", "70"], ["location", "35"], ["gl_getter", "(lambda x, y, z: None)"], ["c_array", "[19, 20, 21, 22, 23, 24, 25]"], ["length", "7"]], [["program_id", "80"], ["location", "40"], ["gl_getter", "(lambda x, y, z: None)"], ["c_array", "[26, 27, 28, 29, 30]"], ["length", "5"]]], "exec_code": "def _create_getter_func(program_id, location, gl_getter, c_array, length):\n    if length == 1:\n\n        def getter_func():\n            gl_getter(program_id, location, c_array)\n            return c_array[0]\n    else:\n\n        def getter_func():\n            gl_getter(program_id, location, c_array)\n            return c_array[:]\n    return getter_func\n", "output": "The function is:\n\n```python\ndef _create_getter_func(program_id, location, gl_getter, c_array, length):\n    if length == 1:\n\n        def getter_func():\n            gl_getter(program_id, location, c_array)\n            return c_array[0]\n    else:\n\n        def getter_func():\n            gl_getter(program_id, location, c_array)\n            return c_array[:]\n    return getter_func\n\n```", "choosed_example_idx": [5, 4, 2, 3, 6, 0, 1, 8, 7], "prompt": "Write a function that generates the output from the input.\n\n\nFunction: _create_getter_func\nInput: dict(program_id=40, location=20, gl_getter=(lambda x, y, z: None), c_array=[7, 8, 9], length=3), Output: \"<function _create_getter_func.<locals>.getter_func at 0x7fe4176d4430>\"\nInput: dict(program_id=30, location=15, gl_getter=(lambda x, y, z: None), c_array=[2, 3, 4, 5, 6], length=5), Output: \"<function _create_getter_func.<locals>.getter_func at 0x7fe4176d4c10>\"\nInput: dict(program_id=10, location=5, gl_getter=(lambda x, y, z: None), c_array=[4, 5, 6, 7], length=4), Output: \"<function _create_getter_func.<locals>.getter_func at 0x7fe4176d4ca0>\"\nInput: dict(program_id=20, location=10, gl_getter=(lambda x, y, z: None), c_array=[1], length=1), Output: \"<function _create_getter_func.<locals>.getter_func at 0x7fe4176d4430>\"\nInput: dict(program_id=50, location=25, gl_getter=(lambda x, y, z: None), c_array=[10, 11, 12, 13, 14, 15], length=6), Output: \"<function _create_getter_func.<locals>.getter_func at 0x7fe4176d4ca0>\"\nInput: dict(program_id=1, location=2, gl_getter=(lambda x, y, z: None), c_array=[1], length=1), Output: \"<function _create_getter_func.<locals>.getter_func at 0x7fe4176d4430>\"\nInput: dict(program_id=42, location=0, gl_getter=(lambda x, y, z: None), c_array=[1, 2, 3], length=3), Output: \"<function _create_getter_func.<locals>.getter_func at 0x7fe4176d4c10>\"\nInput: dict(program_id=70, location=35, gl_getter=(lambda x, y, z: None), c_array=[19, 20, 21, 22, 23, 24, 25], length=7), Output: \"<function _create_getter_func.<locals>.getter_func at 0x7fe4176d4430>\"\nInput: dict(program_id=60, location=30, gl_getter=(lambda x, y, z: None), c_array=[16, 17, 18], length=3), Output: \"<function _create_getter_func.<locals>.getter_func at 0x7fe4176d4c10>\"\n\n", "id": "75affa1b56c71c13a46f64ada3b0084a66022e07_0"}
{"example_str": "examples = [\n    dict(message=\"Hello, World!\"),\n    dict(message=\"This is a log message\"),\n    dict(message=\"Error: Something went wrong\"),\n    dict(message=\"Info: Application started\"),\n    dict(message=\"Debug: Variable x has value 5\"),\n    dict(message=\"Warning: Low disk space\"),\n    dict(message=\"Success: Operation completed\"),\n    dict(message=\"Failed to connect to database\"),\n    dict(message=\"User authenticated successfully\"),\n    dict(message=\"System shutdown initiated\")\n]\nexamples += [\n    dict(message=\"Hello, world!\"),\n    dict(message=\"Error: File not found.\"),\n    dict(message=12345),  # Integer\n    dict(message=3.14159),  # Float\n    dict(message=[1, 2, 3]),  # List\n    dict(message={\"key\": \"value\"}),  # Dictionary\n    dict(message=(1, 2, 3)),  # Tuple\n    dict(message={1, 2, 3}),  # Set\n    dict(message=True),  # Boolean\n    dict(message=None)  # NoneType\n]\nexamples += [\n    dict(message=\"Hello, World!\"),\n    dict(message=\"Error: File not found.\"),\n    dict(message=\"User logged in successfully.\"),\n    dict(message=\"Warning: Low battery.\"),\n    dict(message=\"Update completed.\"),\n    dict(message=\"No internet connection.\"),\n    dict(message=\"Payment processed.\"),\n    dict(message=\"You have new notifications.\"),\n    dict(message=\"Meeting at 10 AM.\"),\n    dict(message=\"Backup completed successfully.\")\n]", "code": "def log_message(message):\n    print(message)\n    return\n", "func_name": "log_message", "exec_status": true, "example_inputs": ["\"{'message': 'Hello, World!'}\"", "\"{'message': 'This is a log message'}\"", "\"{'message': 'Error: Something went wrong'}\"", "\"{'message': 'Info: Application started'}\"", "\"{'message': 'Debug: Variable x has value 5'}\"", "\"{'message': 'Warning: Low disk space'}\"", "\"{'message': 'Success: Operation completed'}\"", "\"{'message': 'Failed to connect to database'}\"", "\"{'message': 'User authenticated successfully'}\"", "\"{'message': 'System shutdown initiated'}\""], "example_outputs": [{"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}], "parsed_inputs": [[["message", "\"Hello, World!\""]], [["message", "\"This is a log message\""]], [["message", "\"Error: Something went wrong\""]], [["message", "\"Info: Application started\""]], [["message", "\"Debug: Variable x has value 5\""]], [["message", "\"Warning: Low disk space\""]], [["message", "\"Success: Operation completed\""]], [["message", "\"Failed to connect to database\""]], [["message", "\"User authenticated successfully\""]], [["message", "\"System shutdown initiated\""]]], "exec_code": "def log_message(message):\n    print(message)\n    return\n", "output": "The function is:\n\n```python\ndef log_message(message):\n    print(message)\n    return\n\n```", "choosed_example_idx": [9, 8, 1, 4, 0, 2, 5, 7, 6], "prompt": "Input: dict(message=\"System shutdown initiated\"), Output: \"None\"\nInput: dict(message=\"User authenticated successfully\"), Output: \"None\"\nInput: dict(message=\"This is a log message\"), Output: \"None\"\nInput: dict(message=\"Debug: Variable x has value 5\"), Output: \"None\"\nInput: dict(message=\"Hello, World!\"), Output: \"None\"\nInput: dict(message=\"Error: Something went wrong\"), Output: \"None\"\nInput: dict(message=\"Warning: Low disk space\"), Output: \"None\"\nInput: dict(message=\"Failed to connect to database\"), Output: \"None\"\nInput: dict(message=\"Success: Operation completed\"), Output: \"None\"\n\nWrite a function that generates the output from the input.\n\nFunction: log_message\n", "id": "5fce033077ffb8ad4cb60837d4aa2077a35e7108_0"}
{"example_str": "examples = [\n    dict(sent=\"The XXXXX bought a book from the XXXXX.\"),\n    dict(sent=\"XXXXX is going to meet XXXXX at the park.\"),\n    dict(sent=\"The teacher gave a homework to XXXXX and XXXXX.\"),\n    dict(sent=\"XXXXX and XXXXX are going to the movies tonight.\"),\n    dict(sent=\"The company will hire XXXXX or XXXXX for the job.\"),\n    dict(sent=\"XXXXX is taller than XXXXX by a few inches.\"),\n    dict(sent=\"The XXXXX is going to marry XXXXX next year.\"),\n    dict(sent=\"XXXXX and XXXXX are the best of friends.\"),\n    dict(sent=\"The XXXXX is going to visit XXXXX in New York.\"),\n    dict(sent=\"XXXXX is going to work with XXXXX on the project.\"),\n]\nexamples += [\n    dict(sent=\"I went to XXXXX and then moved to XXXXX after five years.\"),\n    dict(sent=\"XXXXX is much larger than XXXXX in terms of population.\"),\n    dict(sent=\"The weather in XXXXX is quite different from XXXXX.\"),\n    dict(sent=\"Many people travel from XXXXX to XXXXX during the holiday season.\"),\n    dict(sent=\"The connection between XXXXX and XXXXX is often congested.\"),\n    dict(sent=\"XXXXX offers more job opportunities than XXXXX in the tech sector.\"),\n    dict(sent=\"The cultural differences between XXXXX and XXXXX are significant.\"),\n    dict(sent=\"XXXXX has a higher cost of living than XXXXX.\"),\n    dict(sent=\"Education systems in XXXXX differ greatly from those in XXXXX.\"),\n    dict(sent=\"The flight from XXXXX to XXXXX was delayed due to bad weather.\")\n]\nexamples += [\n    dict(sent=\"The quick brown XXXXX fox jumps over the XXXXX lazy dog\"),\n    dict(sent=\"XXXXX Start of the sentence to the end XXXXX of it\"),\n    dict(sent=\"He said XXXXX hello world XXXXX and then left\"),\n    dict(sent=\"Data XXXXX are becoming increasingly XXXXX valuable\"),\n    dict(sent=\"We need to XXXXX focus on sustainable XXXXX solutions\"),\n    dict(sent=\"The XXXXX new algorithm performs better than the XXXXX old one\"),\n    dict(sent=\"XXXXX This is a test sentence with XXXXX multiple words\"),\n    dict(sent=\"It is important to XXXXX understand the implications XXXXX of this action\"),\n    dict(sent=\"Our goal is to XXXXX improve user experience across all XXXXX platforms\"),\n    dict(sent=\"She explained that the XXXXX solution was not feasible due XXXXX to cost constraints\")\n]", "code": "def sentenceToShortPath(sent):\n    \"\"\"\n    Returns the path between two arguments in a sentence, where the arguments have been masked\n    Args:\n        sent: the sentence\n    Returns:\n        the path between to arguments\n    \"\"\"\n    sent_toks = sent.split(' ')\n    indeces = [i for i, ltr in enumerate(sent_toks) if ltr == 'XXXXX']\n    pattern = ' '.join(sent_toks[indeces[0] + 1:indeces[1]])\n    return pattern\n", "func_name": "sentenceToShortPath", "exec_status": true, "example_inputs": ["\"{'sent': 'The XXXXX bought a book from the XXXXX.'}\"", "\"{'sent': 'XXXXX is going to meet XXXXX at the park.'}\"", "\"{'sent': 'The teacher gave a homework to XXXXX and XXXXX.'}\"", "\"{'sent': 'XXXXX and XXXXX are going to the movies tonight.'}\"", "\"{'sent': 'The company will hire XXXXX or XXXXX for the job.'}\"", "\"{'sent': 'XXXXX is taller than XXXXX by a few inches.'}\"", "\"{'sent': 'The XXXXX is going to marry XXXXX next year.'}\"", "\"{'sent': 'XXXXX and XXXXX are the best of friends.'}\"", "\"{'sent': 'The XXXXX is going to visit XXXXX in New York.'}\"", "\"{'sent': 'XXXXX is going to work with XXXXX on the project.'}\""], "example_outputs": [{"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"return": "\"'is going to meet'\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"return": "\"'and'\""}, {"return": "\"'or'\""}, {"return": "\"'is taller than'\""}, {"return": "\"'is going to marry'\""}, {"return": "\"'and'\""}, {"return": "\"'is going to visit'\""}, {"return": "\"'is going to work with'\""}, {"return": "\"'and then moved to'\""}, {"return": "\"'is much larger than'\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"return": "\"'to'\""}, {"return": "\"'and'\""}, {"return": "\"'offers more job opportunities than'\""}, {"return": "\"'and'\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"return": "\"'to'\""}, {"return": "\"'fox jumps over the'\""}, {"return": "\"'Start of the sentence to the end'\""}, {"return": "\"'hello world'\""}, {"return": "\"'are becoming increasingly'\""}, {"return": "\"'focus on sustainable'\""}, {"return": "\"'new algorithm performs better than the'\""}, {"return": "\"'This is a test sentence with'\""}, {"return": "\"'understand the implications'\""}, {"return": "\"'improve user experience across all'\""}, {"return": "\"'solution was not feasible due'\""}], "parsed_inputs": [[["sent", "\"The XXXXX bought a book from the XXXXX.\""]], [["sent", "\"XXXXX is going to meet XXXXX at the park.\""]], [["sent", "\"The teacher gave a homework to XXXXX and XXXXX.\""]], [["sent", "\"XXXXX and XXXXX are going to the movies tonight.\""]], [["sent", "\"The company will hire XXXXX or XXXXX for the job.\""]], [["sent", "\"XXXXX is taller than XXXXX by a few inches.\""]], [["sent", "\"The XXXXX is going to marry XXXXX next year.\""]], [["sent", "\"XXXXX and XXXXX are the best of friends.\""]], [["sent", "\"The XXXXX is going to visit XXXXX in New York.\""]], [["sent", "\"XXXXX is going to work with XXXXX on the project.\""]]], "exec_code": "def sentenceToShortPath(sent):\n    \"\"\"\n    Returns the path between two arguments in a sentence, where the arguments have been masked\n    Args:\n        sent: the sentence\n    Returns:\n        the path between to arguments\n    \"\"\"\n    sent_toks = sent.split(' ')\n    indeces = [i for i, ltr in enumerate(sent_toks) if ltr == 'XXXXX']\n    pattern = ' '.join(sent_toks[indeces[0] + 1:indeces[1]])\n    return pattern\n", "output": "The function is:\n\n```python\ndef sentenceToShortPath(sent):\n    \"\"\"\n    Returns the path between two arguments in a sentence, where the arguments have been masked\n    Args:\n        sent: the sentence\n    Returns:\n        the path between to arguments\n    \"\"\"\n    sent_toks = sent.split(' ')\n    indeces = [i for i, ltr in enumerate(sent_toks) if ltr == 'XXXXX']\n    pattern = ' '.join(sent_toks[indeces[0] + 1:indeces[1]])\n    return pattern\n\n```", "choosed_example_idx": [4, 8, 5, 7, 0, 2, 3, 1, 6], "prompt": "Function: sentenceToShortPath\nInput: dict(sent=\"The company will hire XXXXX or XXXXX for the job.\"), Output: \"'or'\"\nInput: dict(sent=\"The XXXXX is going to visit XXXXX in New York.\"), Output: \"'is going to visit'\"\nInput: dict(sent=\"XXXXX is taller than XXXXX by a few inches.\"), Output: \"'is taller than'\"\nInput: dict(sent=\"XXXXX and XXXXX are the best of friends.\"), Output: \"'and'\"\nInput: dict(sent=\"The XXXXX bought a book from the XXXXX.\"), Output: \"<class 'IndexError'>: list index out of range\"\nInput: dict(sent=\"The teacher gave a homework to XXXXX and XXXXX.\"), Output: \"<class 'IndexError'>: list index out of range\"\nInput: dict(sent=\"XXXXX and XXXXX are going to the movies tonight.\"), Output: \"'and'\"\nInput: dict(sent=\"XXXXX is going to meet XXXXX at the park.\"), Output: \"'is going to meet'\"\nInput: dict(sent=\"The XXXXX is going to marry XXXXX next year.\"), Output: \"'is going to marry'\"\n\nWrite a function that generates the output from the input.\n", "id": "c38f8fd870ec06b92768c8c2469d69f895baed98_0"}
{"example_str": "examples = [\n    dict(n=0),\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=10),\n    dict(n=15),\n    dict(n=20),\n    dict(n=30),\n]\nexamples += [\n    dict(n=0),        # Example 1: smallest Fibonacci number\n    dict(n=1),        # Example 2: second smallest Fibonacci number\n    dict(n=2),        # Example 3: typical small Fibonacci number\n    dict(n=10),       # Example 4: small Fibonacci number\n    dict(n=20),       # Example 5: medium Fibonacci number\n    dict(n=50),       # Example 6: larger Fibonacci number\n    dict(n=100),      # Example 7: even larger Fibonacci number\n    dict(n=200),      # Example 8: large Fibonacci number\n    dict(n=500),      # Example 9: very large Fibonacci number\n    dict(n=1000)      # Example 10: extremely large Fibonacci number\n]\nexamples += [\n    dict(n=0),\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10)\n]", "code": "def get_fibonacci_last_digit(n):\n    if n <= 1:\n        return n\n    previous = 0\n    current = 1\n    for _ in range(n - 1):\n        previous, current = current, (previous + current) % 10\n    return current\n", "func_name": "get_fibonacci_last_digit", "exec_status": true, "example_inputs": ["\"{'n': 0}\"", "\"{'n': 1}\"", "\"{'n': 2}\"", "\"{'n': 3}\"", "\"{'n': 4}\"", "\"{'n': 5}\"", "\"{'n': 10}\"", "\"{'n': 15}\"", "\"{'n': 20}\"", "\"{'n': 30}\""], "example_outputs": [{"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"5\""}, {"return": "\"8\""}, {"return": "\"3\""}, {"return": "\"1\""}, {"return": "\"4\""}, {"return": "\"5\""}], "parsed_inputs": [[["n", "0"]], [["n", "1"]], [["n", "2"]], [["n", "3"]], [["n", "4"]], [["n", "5"]], [["n", "10"]], [["n", "15"]], [["n", "20"]], [["n", "30"]]], "exec_code": "def get_fibonacci_last_digit(n):\n    if n <= 1:\n        return n\n    previous = 0\n    current = 1\n    for _ in range(n - 1):\n        previous, current = current, (previous + current) % 10\n    return current\n", "output": "The function is:\n\n```python\ndef get_fibonacci_last_digit(n):\n    if n <= 1:\n        return n\n    previous = 0\n    current = 1\n    for _ in range(n - 1):\n        previous, current = current, (previous + current) % 10\n    return current\n\n```", "choosed_example_idx": [7, 3, 9, 0, 8, 2, 5, 4], "prompt": "Function: get_fibonacci_last_digit\n\nWrite a function that generates the output from the input.\nInput: dict(n=15), Output: \"0\"\nInput: dict(n=3), Output: \"2\"\nInput: dict(n=30), Output: \"0\"\nInput: dict(n=0), Output: \"0\"\nInput: dict(n=20), Output: \"5\"\nInput: dict(n=2), Output: \"1\"\nInput: dict(n=5), Output: \"5\"\nInput: dict(n=4), Output: \"3\"\n\n", "id": "b364e7e96c873ef7921f361ba38c36e44f573321_0"}
{"example_str": "examples = [\n    dict(rom_list=['mario', 'zelda'], name='super mario bros'),\n    dict(rom_list=['mario', 'zelda'], name='the legend of zelda'),\n    dict(rom_list=['mario', 'zelda'], name='super smash bros'),\n    dict(rom_list=['mario', 'zelda'], name='mario kart'),\n    dict(rom_list=['mario', 'zelda'], name='zelda breath of the wild'),\n    dict(rom_list=['pokemon', 'final fantasy'], name='pokemon red'),\n    dict(rom_list=['pokemon', 'final fantasy'], name='final fantasy VII'),\n    dict(rom_list=['pokemon', 'final fantasy'], name='pokemon blue'),\n    dict(rom_list=['pokemon', 'final fantasy'], name='final fantasy XV'),\n    dict(rom_list=['pokemon', 'final fantasy'], name='digimon'),\n]\nexamples += [\n    dict(rom_list=[\"Super Mario\", \"Zelda\"], name=\"Super Mario Bros\"),\n    dict(rom_list=[\"Pac-Man\", \"Galaga\"], name=\"Pac-Man Classic\"),\n    dict(rom_list=[\"Sonic\", \"Tails\"], name=\"Sonic the Hedgehog\"),\n    dict(rom_list=[\"Metroid\"], name=\"Super Metroid\"),\n    dict(rom_list=[\"Street Fighter\", \"Mortal Kombat\"], name=\"Street Fighter II\"),\n    dict(rom_list=[\"Final Fantasy\"], name=\"Final Fantasy VII\"),\n    dict(rom_list=[\"Donkey Kong\"], name=\"Donkey Kong Country\"),\n    dict(rom_list=[\"Tetris\", \"Puyo Puyo\"], name=\"Tetris 99\"),\n    dict(rom_list=[\"Castlevania\"], name=\"Castlevania: Symphony of the Night\"),\n    dict(rom_list=[\"Mega Man\", \"Rockman\"], name=\"Mega Man X\")\n]\nexamples += [\n    dict(rom_list=['alpha', 'beta'], name='alphabet'),\n    dict(rom_list=['gamma', 'delta'], name='gamma rays'),\n    dict(rom_list=['epsilon'], name='epsilon theory'),\n    dict(rom_list=['zeta', 'eta'], name='zeta function'),\n    dict(rom_list=['theta'], name='theta wave'),\n    dict(rom_list=['iota'], name='iota account'),\n    dict(rom_list=['kappa'], name='kappa statistic'),\n    dict(rom_list=['lambda', 'mu'], name='lambda calculus'),\n    dict(rom_list=['nu'], name='nuclear'),\n    dict(rom_list=['xi', 'omicron'], name='xi variant'),\n]", "code": "def find_rom_list(rom_list, name):\n    for i in rom_list:\n        if name.find(i) >= 0:\n            return True\n    return False\n", "func_name": "find_rom_list", "exec_status": true, "example_inputs": ["\"{'rom_list': ['mario', 'zelda'], 'name': 'super mario bros'}\"", "\"{'rom_list': ['mario', 'zelda'], 'name': 'the legend of zelda'}\"", "\"{'rom_list': ['mario', 'zelda'], 'name': 'super smash bros'}\"", "\"{'rom_list': ['mario', 'zelda'], 'name': 'mario kart'}\"", "\"{'rom_list': ['mario', 'zelda'], 'name': 'zelda breath of the wild'}\"", "\"{'rom_list': ['pokemon', 'final fantasy'], 'name': 'pokemon red'}\"", "\"{'rom_list': ['pokemon', 'final fantasy'], 'name': 'final fantasy VII'}\"", "\"{'rom_list': ['pokemon', 'final fantasy'], 'name': 'pokemon blue'}\"", "\"{'rom_list': ['pokemon', 'final fantasy'], 'name': 'final fantasy XV'}\"", "\"{'rom_list': ['pokemon', 'final fantasy'], 'name': 'digimon'}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}], "parsed_inputs": [[["rom_list", "['mario', 'zelda']"], ["name", "\"super mario bros\""]], [["rom_list", "['mario', 'zelda']"], ["name", "\"the legend of zelda\""]], [["rom_list", "['mario', 'zelda']"], ["name", "\"super smash bros\""]], [["rom_list", "['mario', 'zelda']"], ["name", "\"mario kart\""]], [["rom_list", "['mario', 'zelda']"], ["name", "\"zelda breath of the wild\""]], [["rom_list", "['pokemon', 'final fantasy']"], ["name", "\"pokemon red\""]], [["rom_list", "['pokemon', 'final fantasy']"], ["name", "\"final fantasy VII\""]], [["rom_list", "['pokemon', 'final fantasy']"], ["name", "\"pokemon blue\""]], [["rom_list", "['pokemon', 'final fantasy']"], ["name", "\"final fantasy XV\""]], [["rom_list", "['pokemon', 'final fantasy']"], ["name", "\"digimon\""]]], "exec_code": "def find_rom_list(rom_list, name):\n    for i in rom_list:\n        if name.find(i) >= 0:\n            return True\n    return False\n", "output": "The function is:\n\n```python\ndef find_rom_list(rom_list, name):\n    for i in rom_list:\n        if name.find(i) >= 0:\n            return True\n    return False\n\n```", "choosed_example_idx": [7, 0, 2, 8, 6, 4], "prompt": "Input: dict(rom_list=['pokemon', 'final fantasy'], name=\"pokemon blue\"), Output: \"True\"\nInput: dict(rom_list=['mario', 'zelda'], name=\"super mario bros\"), Output: \"True\"\nInput: dict(rom_list=['mario', 'zelda'], name=\"super smash bros\"), Output: \"False\"\nInput: dict(rom_list=['pokemon', 'final fantasy'], name=\"final fantasy XV\"), Output: \"True\"\nInput: dict(rom_list=['pokemon', 'final fantasy'], name=\"final fantasy VII\"), Output: \"True\"\nInput: dict(rom_list=['mario', 'zelda'], name=\"zelda breath of the wild\"), Output: \"True\"\n\n\nFunction: find_rom_list\nWrite a function that generates the output from the input.\n\n", "id": "86cc5b40e8c98328c6ccddc7d9f4ebef5f0ad376_0"}
{"example_str": "examples = [\n    dict(list=[1, 2, 3, 4, 5]),\n    dict(list=[5, 4, 3, 2, 1]),\n    dict(list=[10, 20, 30, 40, 50]),\n    dict(list=[-1, -2, -3, -4, -5]),\n    dict(list=[1, 1, 1, 1, 1]),\n    dict(list=[5, 5, 5, 5, 4]),\n    dict(list=[10, 9, 8, 7, 6]),\n    dict(list=[100, 200, 300, 400, 500]),\n    dict(list=[-10, -20, -30, -40, -50]),\n    dict(list=[1, 3, 5, 7, 9]),\n]\nexamples += [\n    dict(list=[10, 20, 30, 40, 50]),\n    dict(list=[5, 1, 9, 2, 8]),\n    dict(list=[-3, -1, -2, -5, -4]),\n    dict(list=[100]),\n    dict(list=[2.5, 3.5, 1.5, 4.5, 0.5]),\n    dict(list=[0, 0, 0, 0, 1]),\n    dict(list=[99, 85, 76, 88, 100]),\n    dict(list=[-10, 10, 0]),\n    dict(list=[1]),\n    dict(list=[15, 15, 15, 14, 16])\n]\nexamples += [\n    dict(list=[1, 2, 3, 4, 5]),\n    dict(list=[10, 9, 8, 7, 6]),\n    dict(list=[5, 1, 4, 2, 3]),\n    dict(list=[100, 200, 300, 400, 500]),\n    dict(list=[-1, -2, -3, -4, -5]),\n    dict(list=[0, 2, 4, 6, 8]),\n    dict(list=[10, 20, 30, 40, 50]),\n    dict(list=[55, 45, 35, 25, 15]),\n    dict(list=[3, 1, 4, 1, 5]),\n    dict(list=[99, 88, 77, 66, 55])\n]", "code": "def secondHighestNumber(list):\n    isSorted = False\n    counter = 0\n    while not isSorted:\n        isSorted = True\n        for i in range(len(list) - 1 - counter):\n            if list[i] > list[i + 1]:\n                swap(i, i + 1, list)\n                isSorted = False\n        counter += 1\n    return list[-2]\n", "func_name": "secondHighestNumber", "exec_status": true, "example_inputs": ["\"{'list': [1, 2, 3, 4, 5]}\"", "\"{'list': [5, 4, 3, 2, 1]}\"", "\"{'list': [10, 20, 30, 40, 50]}\"", "\"{'list': [-1, -2, -3, -4, -5]}\"", "\"{'list': [1, 1, 1, 1, 1]}\"", "\"{'list': [5, 5, 5, 5, 4]}\"", "\"{'list': [10, 9, 8, 7, 6]}\"", "\"{'list': [100, 200, 300, 400, 500]}\"", "\"{'list': [-10, -20, -30, -40, -50]}\"", "\"{'list': [1, 3, 5, 7, 9]}\""], "example_outputs": [{"return": "\"4\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'swap' is not defined\""}, {"return": "\"40\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'swap' is not defined\""}, {"return": "\"1\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'swap' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'swap' is not defined\""}, {"return": "\"400\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'swap' is not defined\""}, {"return": "\"7\""}, {"return": "\"40\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'swap' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'swap' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'swap' is not defined\""}, {"return": "\"0\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'swap' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'swap' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'swap' is not defined\""}, {"return": "\"4\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'swap' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'swap' is not defined\""}, {"return": "\"400\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'swap' is not defined\""}, {"return": "\"6\""}, {"return": "\"40\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'swap' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'swap' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'swap' is not defined\""}], "parsed_inputs": [[["list", "[1, 2, 3, 4, 5]"]], [["list", "[5, 4, 3, 2, 1]"]], [["list", "[10, 20, 30, 40, 50]"]], [["list", "[-1, -2, -3, -4, -5]"]], [["list", "[1, 1, 1, 1, 1]"]], [["list", "[5, 5, 5, 5, 4]"]], [["list", "[10, 9, 8, 7, 6]"]], [["list", "[100, 200, 300, 400, 500]"]], [["list", "[-10, -20, -30, -40, -50]"]], [["list", "[1, 3, 5, 7, 9]"]]], "exec_code": "def secondHighestNumber(list):\n    isSorted = False\n    counter = 0\n    while not isSorted:\n        isSorted = True\n        for i in range(len(list) - 1 - counter):\n            if list[i] > list[i + 1]:\n                swap(i, i + 1, list)\n                isSorted = False\n        counter += 1\n    return list[-2]\n", "output": "The function is:\n\n```python\ndef secondHighestNumber(list):\n    isSorted = False\n    counter = 0\n    while not isSorted:\n        isSorted = True\n        for i in range(len(list) - 1 - counter):\n            if list[i] > list[i + 1]:\n                swap(i, i + 1, list)\n                isSorted = False\n        counter += 1\n    return list[-2]\n\n```", "choosed_example_idx": [2, 0, 6, 5, 4, 8, 7, 1, 3, 9], "prompt": "Input: dict(list=[10, 20, 30, 40, 50]), Output: \"40\"\nInput: dict(list=[1, 2, 3, 4, 5]), Output: \"4\"\nInput: dict(list=[10, 9, 8, 7, 6]), Output: \"<class 'NameError'>: name 'swap' is not defined\"\nInput: dict(list=[5, 5, 5, 5, 4]), Output: \"<class 'NameError'>: name 'swap' is not defined\"\nInput: dict(list=[1, 1, 1, 1, 1]), Output: \"1\"\nInput: dict(list=[-10, -20, -30, -40, -50]), Output: \"<class 'NameError'>: name 'swap' is not defined\"\nInput: dict(list=[100, 200, 300, 400, 500]), Output: \"400\"\nInput: dict(list=[5, 4, 3, 2, 1]), Output: \"<class 'NameError'>: name 'swap' is not defined\"\nInput: dict(list=[-1, -2, -3, -4, -5]), Output: \"<class 'NameError'>: name 'swap' is not defined\"\nInput: dict(list=[1, 3, 5, 7, 9]), Output: \"7\"\n\nWrite a function that generates the output from the input.\n\nFunction: secondHighestNumber\n", "id": "4eac87b16d3df41656c50ace5ad4253486d4a8b2_0"}
{"example_str": "examples = [\n    dict(a=[1, 2, 3, 4, 5]),\n    dict(a=[0, 0, 0, 0, 0]),\n    dict(a=[-1, -2, -3, -4, -5]),\n    dict(a=[1, 0, 2, 0, 3]),\n    dict(a=[10, 20, 30, 40, 50]),\n    dict(a=[5, 5, 5, 5, 5]),\n    dict(a=[-10, 0, 10, 0, -10]),\n    dict(a=[1.5, 2.5, 3.5, 4.5, 5.5]),\n    dict(a=[100, 200, 300, 400, 500]),\n    dict(a=[]),\n]\nexamples += [\n    dict(a=[1, 2, 3, 4, 5]),  # Simple case with positive integers\n    dict(a=[0, 0, 0, 0]),      # All elements are zero\n    dict(a=[-1, -2, -3]),      # All elements are negative integers\n    dict(a=[]),                # Empty list\n    dict(a=[0, 1, 2, 3]),      # Mix of zero and positive integers\n    dict(a=[1.5, 2.5, 3.5]),   # List of floating point numbers\n    dict(a=[-1, 0, 1]),        # Mix of negative, zero, and positive integers\n    dict(a=[10]),              # Single element list\n    dict(a=[0]),               # Single zero element\n    dict(a=[-10, 0, 10, 20])   # Mix of negative, zero, and positive integers\n]\nexamples += [\n    dict(a=[0, 0, 0]),          # All zeros\n    dict(a=[1, 2, 3]),          # Positive integers\n    dict(a=[-1, -2, -3]),       # Negative integers\n    dict(a=[0, 1, 2]),          # Mixed zeros and positive integers\n    dict(a=[]),                 # Empty list\n    dict(a=[0]),                # Single zero\n    dict(a=[100]),              # Single large number\n    dict(a=[-50, 0, 50]),       # Negative, zero, and positive\n    dict(a=[1.5, 2.5, 3.5]),    # Floating point numbers\n    dict(a=[0, 0, 1, 0, 2, 0])  # Interspersed zeros and positives\n]", "code": "def numbers(a):\n    c = 1\n    for i in a:\n        if i != 0:\n            c += i\n    return c\n", "func_name": "numbers", "exec_status": true, "example_inputs": ["\"{'a': [1, 2, 3, 4, 5]}\"", "\"{'a': [0, 0, 0, 0, 0]}\"", "\"{'a': [-1, -2, -3, -4, -5]}\"", "\"{'a': [1, 0, 2, 0, 3]}\"", "\"{'a': [10, 20, 30, 40, 50]}\"", "\"{'a': [5, 5, 5, 5, 5]}\"", "\"{'a': [-10, 0, 10, 0, -10]}\"", "\"{'a': [1.5, 2.5, 3.5, 4.5, 5.5]}\"", "\"{'a': [100, 200, 300, 400, 500]}\"", "\"{'a': []}\""], "example_outputs": [{"return": "\"16\""}, {"return": "\"1\""}, {"return": "\"-14\""}, {"return": "\"7\""}, {"return": "\"151\""}, {"return": "\"26\""}, {"return": "\"-9\""}, {"return": "\"18.5\""}, {"return": "\"1501\""}, {"return": "\"1\""}, {"return": "\"16\""}, {"return": "\"1\""}, {"return": "\"-5\""}, {"return": "\"1\""}, {"return": "\"7\""}, {"return": "\"8.5\""}, {"return": "\"1\""}, {"return": "\"11\""}, {"return": "\"1\""}, {"return": "\"21\""}, {"return": "\"1\""}, {"return": "\"7\""}, {"return": "\"-5\""}, {"return": "\"4\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"101\""}, {"return": "\"1\""}, {"return": "\"8.5\""}, {"return": "\"4\""}], "parsed_inputs": [[["a", "[1, 2, 3, 4, 5]"]], [["a", "[0, 0, 0, 0, 0]"]], [["a", "[-1, -2, -3, -4, -5]"]], [["a", "[1, 0, 2, 0, 3]"]], [["a", "[10, 20, 30, 40, 50]"]], [["a", "[5, 5, 5, 5, 5]"]], [["a", "[-10, 0, 10, 0, -10]"]], [["a", "[1.5, 2.5, 3.5, 4.5, 5.5]"]], [["a", "[100, 200, 300, 400, 500]"]], [["a", "[]"]]], "exec_code": "def numbers(a):\n    c = 1\n    for i in a:\n        if i != 0:\n            c += i\n    return c\n", "output": "The function is:\n\n```python\ndef numbers(a):\n    c = 1\n    for i in a:\n        if i != 0:\n            c += i\n    return c\n\n```", "choosed_example_idx": [7, 2, 4, 6, 1, 0], "prompt": "Input: dict(a=[1.5, 2.5, 3.5, 4.5, 5.5]), Output: \"18.5\"\nInput: dict(a=[-1, -2, -3, -4, -5]), Output: \"-14\"\nInput: dict(a=[10, 20, 30, 40, 50]), Output: \"151\"\nInput: dict(a=[-10, 0, 10, 0, -10]), Output: \"-9\"\nInput: dict(a=[0, 0, 0, 0, 0]), Output: \"1\"\nInput: dict(a=[1, 2, 3, 4, 5]), Output: \"16\"\n\nFunction: numbers\n\n\nWrite a function that generates the output from the input.\n", "id": "3b4efc75270a45e1f65525e5e23eb0a50644723d_0"}
{"example_str": "examples = [\n    dict(obj='arm_JNT'),\n    dict(obj='leg_CTRL'),\n    dict(obj='head_GRP'),\n    dict(obj='body_JNT_CTRL'),\n    dict(obj='finger_GRP_JNT'),\n    dict(obj='toe_CTRL_GRP'),\n    dict(obj='knee_JNT'),\n    dict(obj='elbow_CTRL'),\n    dict(obj='shoulder_GRP'),\n    dict(obj='spine_JNT_CTRL_GRP'),\n]\nexamples += [\n    dict(obj='character_JNT'),\n    dict(obj='character_CTRL'),\n    dict(obj='character_GRP'),\n    dict(obj='main_character_JNT_CTRL'),\n    dict(obj='side_character_GRP_JNT'),\n    dict(obj='vehicle_CTRL_GRP'),\n    dict(obj='environment_JNT'),\n    dict(obj='prop_CTRL_JNT_GRP'),\n    dict(obj='item_GRP_CTRL_JNT'),\n    dict(obj='asset_JNT_CTRL_GRP')\n]\nexamples += [\n    dict(obj='character_JNT'),\n    dict(obj='character_CTRL'),\n    dict(obj='main_GRP'),\n    dict(obj='left_arm_JNT'),\n    dict(obj='right_leg_CTRL'),\n    dict(obj='head_GRP'),\n    dict(obj='left_foot_JNT'),\n    dict(obj='right_hand_CTRL'),\n    dict(obj='torso_GRP'),\n    dict(obj='eye_JNT'),\n]", "code": "def get_base_name(obj):\n    return obj.replace('_JNT', '').replace('_CTRL', '').replace('_GRP', '')\n", "func_name": "get_base_name", "exec_status": true, "example_inputs": ["\"{'obj': 'arm_JNT'}\"", "\"{'obj': 'leg_CTRL'}\"", "\"{'obj': 'head_GRP'}\"", "\"{'obj': 'body_JNT_CTRL'}\"", "\"{'obj': 'finger_GRP_JNT'}\"", "\"{'obj': 'toe_CTRL_GRP'}\"", "\"{'obj': 'knee_JNT'}\"", "\"{'obj': 'elbow_CTRL'}\"", "\"{'obj': 'shoulder_GRP'}\"", "\"{'obj': 'spine_JNT_CTRL_GRP'}\""], "example_outputs": [{"return": "\"'arm'\""}, {"return": "\"'leg'\""}, {"return": "\"'head'\""}, {"return": "\"'body'\""}, {"return": "\"'finger'\""}, {"return": "\"'toe'\""}, {"return": "\"'knee'\""}, {"return": "\"'elbow'\""}, {"return": "\"'shoulder'\""}, {"return": "\"'spine'\""}, {"return": "\"'character'\""}, {"return": "\"'character'\""}, {"return": "\"'character'\""}, {"return": "\"'main_character'\""}, {"return": "\"'side_character'\""}, {"return": "\"'vehicle'\""}, {"return": "\"'environment'\""}, {"return": "\"'prop'\""}, {"return": "\"'item'\""}, {"return": "\"'asset'\""}, {"return": "\"'character'\""}, {"return": "\"'character'\""}, {"return": "\"'main'\""}, {"return": "\"'left_arm'\""}, {"return": "\"'right_leg'\""}, {"return": "\"'head'\""}, {"return": "\"'left_foot'\""}, {"return": "\"'right_hand'\""}, {"return": "\"'torso'\""}, {"return": "\"'eye'\""}], "parsed_inputs": [[["obj", "\"arm_JNT\""]], [["obj", "\"leg_CTRL\""]], [["obj", "\"head_GRP\""]], [["obj", "\"body_JNT_CTRL\""]], [["obj", "\"finger_GRP_JNT\""]], [["obj", "\"toe_CTRL_GRP\""]], [["obj", "\"knee_JNT\""]], [["obj", "\"elbow_CTRL\""]], [["obj", "\"shoulder_GRP\""]], [["obj", "\"spine_JNT_CTRL_GRP\""]]], "exec_code": "def get_base_name(obj):\n    return obj.replace('_JNT', '').replace('_CTRL', '').replace('_GRP', '')\n", "output": "The function is:\n\n```python\ndef get_base_name(obj):\n    return obj.replace('_JNT', '').replace('_CTRL', '').replace('_GRP', '')\n\n```", "choosed_example_idx": [7, 9, 6, 5, 0, 3, 2, 4], "prompt": "Function: get_base_name\nInput: dict(obj=\"elbow_CTRL\"), Output: \"'elbow'\"\nInput: dict(obj=\"spine_JNT_CTRL_GRP\"), Output: \"'spine'\"\nInput: dict(obj=\"knee_JNT\"), Output: \"'knee'\"\nInput: dict(obj=\"toe_CTRL_GRP\"), Output: \"'toe'\"\nInput: dict(obj=\"arm_JNT\"), Output: \"'arm'\"\nInput: dict(obj=\"body_JNT_CTRL\"), Output: \"'body'\"\nInput: dict(obj=\"head_GRP\"), Output: \"'head'\"\nInput: dict(obj=\"finger_GRP_JNT\"), Output: \"'finger'\"\n\n\n\nWrite a function that generates the output from the input.\n\n", "id": "9e62a197064be510ac0fa94d94dceaa371adfa80_0"}
{"example_str": "examples = [\n    dict(context={}),\n    dict(context={'a': 1, 'b': 2}),\n    dict(context={'foo': 'bar'}),\n    dict(context={'x': [1, 2, 3]}),\n    dict(context={'y': {'z': 1}}),\n    dict(context={'empty_list': []}),\n    dict(context={'empty_string': ''}),\n    dict(context={'none_value': None}),\n    dict(context={'bool_value': True}),\n    dict(context={'int_value': 42}),\n]\nexamples += [\n    dict(context={}),  # Example 1: Empty dictionary\n    dict(context={'title': 'Hello World'}),  # Example 2: Dictionary with a single key-value pair\n    dict(context={'title': 'New Article', 'content': 'This is the content of the new article.'}),  # Example 3: Multiple key-value pairs\n    dict(context={'user': 'John Doe', 'access_level': 'admin'}),  # Example 4: User information\n    dict(context={'config': {'theme': 'dark', 'layout': 'grid'}}),  # Example 5: Nested dictionary\n    dict(context={'articles': [{'id': 1, 'title': 'First'}, {'id': 2, 'title': 'Second'}]}),  # Example 6: List of dictionaries\n    dict(context={'error': None}),  # Example 7: Dictionary with a None value\n    dict(context={'numbers': [1, 2, 3, 4, 5]}),  # Example 8: Dictionary with a list of numbers\n    dict(context={'settings': {'notifications': True, 'email': 'example@example.com'}}),  # Example 9: Nested dictionary with boolean and string\n    dict(context={'mixed': {'number': 10, 'is_valid': False, 'tags': ['news', 'article']}})  # Example 10: Complex nested dictionary\n]\nexamples += [\n    dict(context={'user': 'Alice', 'access_level': 'admin'}),\n    dict(context={'user': 'Bob', 'access_level': 'guest'}),\n    dict(context={'page': 'home', 'theme': 'light'}),\n    dict(context={'page': 'about', 'theme': 'dark'}),\n    dict(context={'user': 'Charlie', 'access_level': 'member', 'theme': 'dark'}),\n    dict(context={'user': 'Dana', 'access_level': 'admin', 'notifications': True}),\n    dict(context={'user': 'Eve', 'access_level': 'guest', 'notifications': False}),\n    dict(context={'page': 'contact', 'contact_form': 'enabled'}),\n    dict(context={'user': 'Frank', 'access_level': 'member', 'theme': 'light', 'notifications': True}),\n    dict(context={'user': 'Grace', 'access_level': 'admin', 'theme': 'dark', 'notifications': False})\n]", "code": "def get_article_form(context):\n    return context\n", "func_name": "get_article_form", "exec_status": true, "example_inputs": ["\"{'context': {}}\"", "\"{'context': {'a': 1, 'b': 2}}\"", "\"{'context': {'foo': 'bar'}}\"", "\"{'context': {'x': [1, 2, 3]}}\"", "\"{'context': {'y': {'z': 1}}}\"", "\"{'context': {'empty_list': []}}\"", "\"{'context': {'empty_string': ''}}\"", "\"{'context': {'none_value': None}}\"", "\"{'context': {'bool_value': True}}\"", "\"{'context': {'int_value': 42}}\""], "example_outputs": [{"return": "\"{}\""}, {"return": "\"{'a': 1, 'b': 2}\""}, {"return": "\"{'foo': 'bar'}\""}, {"return": "\"{'x': [1, 2, 3]}\""}, {"return": "\"{'y': {'z': 1}}\""}, {"return": "\"{'empty_list': []}\""}, {"return": "\"{'empty_string': ''}\""}, {"return": "\"{'none_value': None}\""}, {"return": "\"{'bool_value': True}\""}, {"return": "\"{'int_value': 42}\""}, {"return": "\"{}\""}, {"return": "\"{'title': 'Hello World'}\""}, {"return": "\"{'title': 'New Article', 'content': 'This is the content of the new article.'}\""}, {"return": "\"{'user': 'John Doe', 'access_level': 'admin'}\""}, {"return": "\"{'config': {'theme': 'dark', 'layout': 'grid'}}\""}, {"return": "\"{'articles': [{'id': 1, 'title': 'First'}, {'id': 2, 'title': 'Second'}]}\""}, {"return": "\"{'error': None}\""}, {"return": "\"{'numbers': [1, 2, 3, 4, 5]}\""}, {"return": "\"{'settings': {'notifications': True, 'email': 'example@example.com'}}\""}, {"return": "\"{'mixed': {'number': 10, 'is_valid': False, 'tags': ['news', 'article']}}\""}, {"return": "\"{'user': 'Alice', 'access_level': 'admin'}\""}, {"return": "\"{'user': 'Bob', 'access_level': 'guest'}\""}, {"return": "\"{'page': 'home', 'theme': 'light'}\""}, {"return": "\"{'page': 'about', 'theme': 'dark'}\""}, {"return": "\"{'user': 'Charlie', 'access_level': 'member', 'theme': 'dark'}\""}, {"return": "\"{'user': 'Dana', 'access_level': 'admin', 'notifications': True}\""}, {"return": "\"{'user': 'Eve', 'access_level': 'guest', 'notifications': False}\""}, {"return": "\"{'page': 'contact', 'contact_form': 'enabled'}\""}, {"return": "\"{'user': 'Frank', 'access_level': 'member', 'theme': 'light', 'notifications': True}\""}, {"return": "\"{'user': 'Grace', 'access_level': 'admin', 'theme': 'dark', 'notifications': False}\""}], "parsed_inputs": [[["context", "{}"]], [["context", "{'a': 1, 'b': 2}"]], [["context", "{'foo': 'bar'}"]], [["context", "{'x': [1, 2, 3]}"]], [["context", "{'y': {'z': 1}}"]], [["context", "{'empty_list': []}"]], [["context", "{'empty_string': ''}"]], [["context", "{'none_value': None}"]], [["context", "{'bool_value': True}"]], [["context", "{'int_value': 42}"]]], "exec_code": "def get_article_form(context):\n    return context\n", "output": "The function is:\n\n```python\ndef get_article_form(context):\n    return context\n\n```", "choosed_example_idx": [6, 1, 9], "prompt": "Input: dict(context={'empty_string': ''}), Output: \"{'empty_string': ''}\"\nInput: dict(context={'a': 1, 'b': 2}), Output: \"{'a': 1, 'b': 2}\"\nInput: dict(context={'int_value': 42}), Output: \"{'int_value': 42}\"\n\n\nWrite a function that generates the output from the input.\nFunction: get_article_form\n\n", "id": "7c29691be08e6952085de9b05ff2f49de1ac1f89_0"}
{"example_str": "examples = [\n    dict(location='~/jupyter_sounds'),  # using default value\n    dict(location='/home/user/audio_files'),\n    dict(location='./audio'),\n    dict(location='../audio_files'),\n    dict(location='/audio'),\n    dict(location='C:/audio_files'),  # for Windows\n    dict(location='/Users/user/audio_files'),  # for Mac\n    dict(location='audio_files'),\n    dict(location='../Downloads/audio'),\n    dict(location='/mnt/c/audio_files'),  # for Linux with Windows mounted drive\n]\nexamples += [\n    dict(location='~/jupyter_sounds'),\n    dict(location='/tmp/audio_files'),\n    dict(location='C:/Users/username/Music'),\n    dict(location='/var/www/html/audio'),\n    dict(location='~/Desktop/audio_downloads'),\n    dict(location='/home/user/downloads/sounds'),\n    dict(location='D:/sound_collections'),\n    dict(location='/mnt/external_drive/audio'),\n    dict(location='~/Documents/Project_Audio'),\n    dict(location='/usr/local/share/sounds')\n]\nexamples += [\n    dict(location='~/jupyter_sounds'),\n    dict(location='~/music/sounds'),\n    dict(location='/var/www/html/sounds'),\n    dict(location='C:/Users/username/Documents/sounds'),\n    dict(location='/tmp/sounds'),\n    dict(location='~/Desktop/audio_files'),\n    dict(location='~/Downloads/audio'),\n    dict(location='/media/external_drive/sounds'),\n    dict(location='/home/user/custom_sounds'),\n    dict(location='~/data/sounds')\n]", "code": "def download_audio_files(location: str='~/jupyter_sounds') ->None:\n    \"\"\"Downloads the audio files to the specified location\"\"\"\n    x = \"\"\"\n    #electricity jet register baby error success\n    %mkdir --parents ~/jupyter_sounds\n    %cd ~/jupyter_sounds\n    !wget -O electricity.wav https://wav-sounds.com/wp-content/uploads/2017/09/Various-08.wav\n    !wget -O register-machine.wav https://wav-sounds.com/wp-content/uploads/2017/09/Various-06.wav\n    !wget -O jet.wav https://wav-sounds.com/wp-content/uploads/2017/09/Vehicle-08.wav\n\n    # success\n    !wget -O sound_success.wav http://soundbible.com/grab.php?id=1795&type=wav\n\n    # baby\n    !wget -O sound_baby_cry.wav https://wav-sounds.com/wp-content/uploads/2017/09/Various-02.wav\n\n    # Short Error Beep sound\n    !wget -O sound_error_beep.wav  http://soundbible.com/grab.php?id=419&type=wav\n    \"\"\"\n    print(x)\n    return\n", "func_name": "download_audio_files", "exec_status": true, "example_inputs": ["\"{'location': '~/jupyter_sounds'}\"", "\"{'location': '/home/user/audio_files'}\"", "\"{'location': './audio'}\"", "\"{'location': '../audio_files'}\"", "\"{'location': '/audio'}\"", "\"{'location': 'C:/audio_files'}\"", "\"{'location': '/Users/user/audio_files'}\"", "\"{'location': 'audio_files'}\"", "\"{'location': '../Downloads/audio'}\"", "\"{'location': '/mnt/c/audio_files'}\""], "example_outputs": [{"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}], "parsed_inputs": [[["location", "\"~/jupyter_sounds\""]], [["location", "\"/home/user/audio_files\""]], [["location", "\"./audio\""]], [["location", "\"../audio_files\""]], [["location", "\"/audio\""]], [["location", "\"C:/audio_files\""]], [["location", "\"/Users/user/audio_files\""]], [["location", "\"audio_files\""]], [["location", "\"../Downloads/audio\""]], [["location", "\"/mnt/c/audio_files\""]]], "exec_code": "def download_audio_files(location: str='~/jupyter_sounds') ->None:\n    \"\"\"Downloads the audio files to the specified location\"\"\"\n    x = \"\"\"\n    #electricity jet register baby error success\n    %mkdir --parents ~/jupyter_sounds\n    %cd ~/jupyter_sounds\n    !wget -O electricity.wav https://wav-sounds.com/wp-content/uploads/2017/09/Various-08.wav\n    !wget -O register-machine.wav https://wav-sounds.com/wp-content/uploads/2017/09/Various-06.wav\n    !wget -O jet.wav https://wav-sounds.com/wp-content/uploads/2017/09/Vehicle-08.wav\n\n    # success\n    !wget -O sound_success.wav http://soundbible.com/grab.php?id=1795&type=wav\n\n    # baby\n    !wget -O sound_baby_cry.wav https://wav-sounds.com/wp-content/uploads/2017/09/Various-02.wav\n\n    # Short Error Beep sound\n    !wget -O sound_error_beep.wav  http://soundbible.com/grab.php?id=419&type=wav\n    \"\"\"\n    print(x)\n    return\n", "output": "The function is:\n\n```python\ndef download_audio_files(location: str='~/jupyter_sounds') ->None:\n    \"\"\"Downloads the audio files to the specified location\"\"\"\n    x = \"\"\"\n    #electricity jet register baby error success\n    %mkdir --parents ~/jupyter_sounds\n    %cd ~/jupyter_sounds\n    !wget -O electricity.wav https://wav-sounds.com/wp-content/uploads/2017/09/Various-08.wav\n    !wget -O register-machine.wav https://wav-sounds.com/wp-content/uploads/2017/09/Various-06.wav\n    !wget -O jet.wav https://wav-sounds.com/wp-content/uploads/2017/09/Vehicle-08.wav\n\n    # success\n    !wget -O sound_success.wav http://soundbible.com/grab.php?id=1795&type=wav\n\n    # baby\n    !wget -O sound_baby_cry.wav https://wav-sounds.com/wp-content/uploads/2017/09/Various-02.wav\n\n    # Short Error Beep sound\n    !wget -O sound_error_beep.wav  http://soundbible.com/grab.php?id=419&type=wav\n    \"\"\"\n    print(x)\n    return\n\n```", "choosed_example_idx": [8, 0, 3, 7, 6, 5, 2, 9, 4, 1], "prompt": "Function: download_audio_files\nWrite a function that generates the output from the input.\nInput: dict(location=\"../Downloads/audio\"), Output: \"None\"\nInput: dict(location=\"~/jupyter_sounds\"), Output: \"None\"\nInput: dict(location=\"../audio_files\"), Output: \"None\"\nInput: dict(location=\"audio_files\"), Output: \"None\"\nInput: dict(location=\"/Users/user/audio_files\"), Output: \"None\"\nInput: dict(location=\"C:/audio_files\"), Output: \"None\"\nInput: dict(location=\"./audio\"), Output: \"None\"\nInput: dict(location=\"/mnt/c/audio_files\"), Output: \"None\"\nInput: dict(location=\"/audio\"), Output: \"None\"\nInput: dict(location=\"/home/user/audio_files\"), Output: \"None\"\n\n", "id": "4ca04793d15050a9953d4d40cddbdaa646b01926_0"}
{"example_str": "examples = [\n    dict(record=[\"Enter uid1234 Muzi\", \"Enter uid4567 Prodo\", \"Leave uid1234\", \"Enter uid1234 Prodo\", \"Change uid4567 Ryan\"]),\n    dict(record=[\"Enter uid1234 Muzi\", \"Enter uid4567 Prodo\", \"Leave uid1234\", \"Enter uid1234 Prodo\"]),\n    dict(record=[\"Enter uid1234 Muzi\", \"Enter uid4567 Prodo\", \"Change uid4567 Ryan\", \"Leave uid1234\"]),\n    dict(record=[\"Enter uid1234 Muzi\", \"Enter uid4567 Prodo\", \"Leave uid1234\", \"Change uid4567 Ryan\"]),\n    dict(record=[\"Enter uid1234 Muzi\", \"Enter uid4567 Prodo\", \"Change uid1234 Muzi\", \"Leave uid4567\"]),\n    dict(record=[\"Enter uid1234 Muzi\", \"Enter uid4567 Prodo\", \"Leave uid1234\", \"Leave uid4567\"]),\n    dict(record=[\"Enter uid1234 Muzi\", \"Enter uid4567 Prodo\", \"Change uid1234 Muzi\", \"Change uid4567 Ryan\"]),\n    dict(record=[\"Enter uid1234 Muzi\", \"Enter uid4567 Prodo\", \"Leave uid1234\", \"Enter uid7890 Fe\"]),\n    dict(record=[\"Enter uid1234 Muzi\", \"Enter uid4567 Prodo\", \"Change uid1234 Muzi\", \"Enter uid7890 Fe\"]),\n    dict(record=[\"Enter uid1234 Muzi\", \"Enter uid4567 Prodo\", \"Leave uid1234\", \"Change uid4567 Ryan\", \"Enter uid7890 Fe\"]),\n]\nexamples += [\n    dict(record=[\"Enter uid1234 Masha\", \"Enter uid2345 Alex\", \"Leave uid1234\", \"Enter uid3456 John\"]),\n    dict(record=[\"Enter uid1000 Alice\", \"Change uid1000 Alicia\", \"Leave uid1000\"]),\n    dict(record=[\"Leave uid9999\", \"Enter uid9999 John\", \"Change uid9999 Johnny\"]),\n    dict(record=[\"Enter uid2000 Nick\", \"Enter uid2001 Mike\", \"Change uid2000 Nicky\", \"Leave uid2001\"]),\n    dict(record=[\"Enter uid3000 Chris\", \"Leave uid3000\", \"Enter uid3000 Chris\"]),\n    dict(record=[\"Change uid4000 Max\", \"Enter uid4000 Max\", \"Leave uid4000\"]),\n    dict(record=[\"Enter uid5000 Sarah\", \"Change uid5000 Sara\", \"Leave uid5000\"]),\n    dict(record=[\"Enter uid6000 Jane\", \"Enter uid7000 Doe\", \"Leave uid6000\", \"Change uid7000 John\"]),\n    dict(record=[\"Enter uid8000 Bob\", \"Leave uid8000\", \"Enter uid8000 Robert\", \"Change uid8000 Bobby\"]),\n    dict(record=[\"Enter uid9000 Alice\", \"Leave uid9000\", \"Enter uid9000 Alicia\", \"Change uid9000 Alice\"])\n]\nexamples += [\n    dict(record=[\"Enter uid1234 Muzi\", \"Enter uid5678 Prodo\"]),\n    dict(record=[\"Leave uid1234\", \"Enter uid1234 Muzi\"]),\n    dict(record=[\"Enter uid1234 Muzi\", \"Change uid1234 Prodo\", \"Leave uid1234\"]),\n    dict(record=[\"Enter uid1234 Muzi\", \"Leave uid1234\", \"Enter uid1234 Prodo\"]),\n    dict(record=[\"Enter uid1234 Muzi\", \"Enter uid5678 Prodo\", \"Leave uid1234\", \"Enter uid1234 Prodo\"]),\n    dict(record=[\"Change uid1234 Muzi\", \"Enter uid1234 Muzi\"]),\n    dict(record=[\"Enter uid1234 Muzi\", \"Change uid1234 Prodo\", \"Enter uid5678 Prodo\"]),\n    dict(record=[\"Leave uid1234\", \"Change uid1234 Muzi\", \"Enter uid1234 Prodo\"]),\n    dict(record=[\"Enter uid1234 Muzi\", \"Leave uid1234\", \"Change uid1234 Prodo\", \"Enter uid1234 Muzi\"]),\n    dict(record=[\"Enter uid1234 Muzi\", \"Enter uid5678 Prodo\", \"Change uid5678 Ryan\", \"Leave uid1234\", \"Leave uid5678\"])\n]", "code": "def solution(record):\n    answer = []\n    li = []\n    change = {}\n    for i in record:\n        a = list(i.split())\n        if a[0] == 'Enter':\n            li.append(a[0:2])\n            change[a[1]] = a[2]\n        elif a[0] == 'Leave':\n            li.append(a[0:2])\n        elif a[0] == 'Change':\n            change[a[1]] = a[2]\n    for i in li:\n        if i[0] == 'Enter':\n            answer.append(change[i[1]] + '님이 들어왔습니다.')\n        else:\n            answer.append(change[i[1]] + '님이 나갔습니다.')\n    return answer\n", "func_name": "solution", "exec_status": true, "example_inputs": ["\"{'record': ['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Leave uid1234', 'Enter uid1234 Prodo', 'Change uid4567 Ryan']}\"", "\"{'record': ['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Leave uid1234', 'Enter uid1234 Prodo']}\"", "\"{'record': ['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Change uid4567 Ryan', 'Leave uid1234']}\"", "\"{'record': ['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Leave uid1234', 'Change uid4567 Ryan']}\"", "\"{'record': ['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Change uid1234 Muzi', 'Leave uid4567']}\"", "\"{'record': ['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Leave uid1234', 'Leave uid4567']}\"", "\"{'record': ['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Change uid1234 Muzi', 'Change uid4567 Ryan']}\"", "\"{'record': ['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Leave uid1234', 'Enter uid7890 Fe']}\"", "\"{'record': ['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Change uid1234 Muzi', 'Enter uid7890 Fe']}\"", "\"{'record': ['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Leave uid1234', 'Change uid4567 Ryan', 'Enter uid7890 Fe']}\""], "example_outputs": [{"return": "\"['Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Ryan\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Muzi\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Ryan\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Muzi\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Muzi\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Ryan\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Muzi\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Muzi\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Muzi\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Muzi\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Muzi\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Ryan\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Muzi\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Muzi\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.', 'Fe\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Muzi\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Fe\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Muzi\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Ryan\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Muzi\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.', 'Fe\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Masha\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Alex\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Masha\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.', 'John\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Alicia\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Alicia\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Johnny\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.', 'Johnny\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Nicky\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Mike\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Mike\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Chris\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Chris\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.', 'Chris\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Max\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Max\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Sara\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Sara\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Jane\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'John\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Jane\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Bobby\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Bobby\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.', 'Bobby\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Alice\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Alice\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.', 'Alice\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Muzi\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Muzi\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.', 'Muzi\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Muzi\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Prodo\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Muzi\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Muzi\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.', 'Muzi\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.']\""}, {"return": "\"['Muzi\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Ryan\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Muzi\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.', 'Ryan\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.']\""}], "parsed_inputs": [[["record", "['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Leave uid1234', 'Enter uid1234 Prodo', 'Change uid4567 Ryan']"]], [["record", "['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Leave uid1234', 'Enter uid1234 Prodo']"]], [["record", "['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Change uid4567 Ryan', 'Leave uid1234']"]], [["record", "['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Leave uid1234', 'Change uid4567 Ryan']"]], [["record", "['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Change uid1234 Muzi', 'Leave uid4567']"]], [["record", "['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Leave uid1234', 'Leave uid4567']"]], [["record", "['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Change uid1234 Muzi', 'Change uid4567 Ryan']"]], [["record", "['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Leave uid1234', 'Enter uid7890 Fe']"]], [["record", "['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Change uid1234 Muzi', 'Enter uid7890 Fe']"]], [["record", "['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Leave uid1234', 'Change uid4567 Ryan', 'Enter uid7890 Fe']"]]], "exec_code": "def solution(record):\n    answer = []\n    li = []\n    change = {}\n    for i in record:\n        a = list(i.split())\n        if a[0] == 'Enter':\n            li.append(a[0:2])\n            change[a[1]] = a[2]\n        elif a[0] == 'Leave':\n            li.append(a[0:2])\n        elif a[0] == 'Change':\n            change[a[1]] = a[2]\n    for i in li:\n        if i[0] == 'Enter':\n            answer.append(change[i[1]] + '님이 들어왔습니다.')\n        else:\n            answer.append(change[i[1]] + '님이 나갔습니다.')\n    return answer\n", "output": "The function is:\n\n```python\ndef solution(record):\n    answer = []\n    li = []\n    change = {}\n    for i in record:\n        a = list(i.split())\n        if a[0] == 'Enter':\n            li.append(a[0:2])\n            change[a[1]] = a[2]\n        elif a[0] == 'Leave':\n            li.append(a[0:2])\n        elif a[0] == 'Change':\n            change[a[1]] = a[2]\n    for i in li:\n        if i[0] == 'Enter':\n            answer.append(change[i[1]] + '님이 들어왔습니다.')\n        else:\n            answer.append(change[i[1]] + '님이 나갔습니다.')\n    return answer\n\n```", "choosed_example_idx": [6, 4, 8, 0, 7, 1], "prompt": "Input: dict(record=['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Change uid1234 Muzi', 'Change uid4567 Ryan']), Output: \"['Muzi\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Ryan\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.']\"\nInput: dict(record=['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Change uid1234 Muzi', 'Leave uid4567']), Output: \"['Muzi\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.']\"\nInput: dict(record=['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Change uid1234 Muzi', 'Enter uid7890 Fe']), Output: \"['Muzi\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Fe\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.']\"\nInput: dict(record=['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Leave uid1234', 'Enter uid1234 Prodo', 'Change uid4567 Ryan']), Output: \"['Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Ryan\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.']\"\nInput: dict(record=['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Leave uid1234', 'Enter uid7890 Fe']), Output: \"['Muzi\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Muzi\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.', 'Fe\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.']\"\nInput: dict(record=['Enter uid1234 Muzi', 'Enter uid4567 Prodo', 'Leave uid1234', 'Enter uid1234 Prodo']), Output: \"['Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub098\\uac14\\uc2b5\\ub2c8\\ub2e4.', 'Prodo\\ub2d8\\uc774 \\ub4e4\\uc5b4\\uc654\\uc2b5\\ub2c8\\ub2e4.']\"\n\nFunction: solution\n\nWrite a function that generates the output from the input.\n", "id": "edec9c14a51b429a54e04cf05ff3f01e588dacb1_0"}
{"example_str": "examples = [\n    dict(new_series={'a': 1, 'b': 2}),\n    dict(new_series={'hello': 3, 'world': 2}),\n    dict(new_series={'x': 5}),\n    dict(new_series={'foo': 1, 'bar': 2, 'baz': 3}),\n    dict(new_series={'A': 1, 'B': 2, 'C': 3}),\n    dict(new_series={'1': 1, '2': 2, '3': 3}),\n    dict(new_series={'abc': 4, 'def': 5}),\n    dict(new_series={'python': 1, 'is': 2, 'fun': 3}),\n    dict(new_series={'I': 1, 'love': 2, 'python': 3}),\n    dict(new_series={'apple': 2, 'banana': 3, 'cherry': 4}),\n]\nexamples += [\n    dict(new_series={\"apple\": 3, \"banana\": 2}),\n    dict(new_series={\"hello\": 1, \"world\": 5}),\n    dict(new_series={\"cat\": 0, \"dog\": 4}),\n    dict(new_series={\"sun\": 2, \"moon\": 3}),\n    dict(new_series={\"car\": 5, \"bike\": 1}),\n    dict(new_series={\"red\": 3, \"blue\": 2, \"green\": 1}),\n    dict(new_series={\"one\": 1, \"two\": 2, \"three\": 3}),\n    dict(new_series={\"x\": 4, \"y\": 2, \"z\": 3}),\n    dict(new_series={\"tree\": 2, \"bush\": 3}),\n    dict(new_series={\"pen\": 1, \"pencil\": 2, \"eraser\": 3})\n]\nexamples += [\n    dict(new_series={'apple': 3, 'banana': 2}),\n    dict(new_series={'car': 1, 'bike': 4}),\n    dict(new_series={'dog': 5}),\n    dict(new_series={'elephant': 2, 'tiger': 3, 'lion': 1}),\n    dict(new_series={'x': 10}),\n    dict(new_series={'hello': 3, 'world': 2}),\n    dict(new_series={'key1': 1, 'key2': 2, 'key3': 3}),\n    dict(new_series={'a': 5, 'b': 5, 'c': 5}),\n    dict(new_series={'one': 1, 'two': 2, 'three': 3, 'four': 4}),\n    dict(new_series={'python': 3, 'java': 2, 'c++': 1})\n]", "code": "def set_info(new_series):\n    arr = []\n    for key, val in new_series.items():\n        a = (key + ' ') * int(val)\n        arr.append(a.rstrip())\n    return arr\n", "func_name": "set_info", "exec_status": true, "example_inputs": ["\"{'new_series': {'a': 1, 'b': 2}}\"", "\"{'new_series': {'hello': 3, 'world': 2}}\"", "\"{'new_series': {'x': 5}}\"", "\"{'new_series': {'foo': 1, 'bar': 2, 'baz': 3}}\"", "\"{'new_series': {'A': 1, 'B': 2, 'C': 3}}\"", "\"{'new_series': {'1': 1, '2': 2, '3': 3}}\"", "\"{'new_series': {'abc': 4, 'def': 5}}\"", "\"{'new_series': {'python': 1, 'is': 2, 'fun': 3}}\"", "\"{'new_series': {'I': 1, 'love': 2, 'python': 3}}\"", "\"{'new_series': {'apple': 2, 'banana': 3, 'cherry': 4}}\""], "example_outputs": [{"return": "\"['a', 'b b']\""}, {"return": "\"['hello hello hello', 'world world']\""}, {"return": "\"['x x x x x']\""}, {"return": "\"['foo', 'bar bar', 'baz baz baz']\""}, {"return": "\"['A', 'B B', 'C C C']\""}, {"return": "\"['1', '2 2', '3 3 3']\""}, {"return": "\"['abc abc abc abc', 'def def def def def']\""}, {"return": "\"['python', 'is is', 'fun fun fun']\""}, {"return": "\"['I', 'love love', 'python python python']\""}, {"return": "\"['apple apple', 'banana banana banana', 'cherry cherry cherry cherry']\""}, {"return": "\"['apple apple apple', 'banana banana']\""}, {"return": "\"['hello', 'world world world world world']\""}, {"return": "\"['', 'dog dog dog dog']\""}, {"return": "\"['sun sun', 'moon moon moon']\""}, {"return": "\"['car car car car car', 'bike']\""}, {"return": "\"['red red red', 'blue blue', 'green']\""}, {"return": "\"['one', 'two two', 'three three three']\""}, {"return": "\"['x x x x', 'y y', 'z z z']\""}, {"return": "\"['tree tree', 'bush bush bush']\""}, {"return": "\"['pen', 'pencil pencil', 'eraser eraser eraser']\""}, {"return": "\"['apple apple apple', 'banana banana']\""}, {"return": "\"['car', 'bike bike bike bike']\""}, {"return": "\"['dog dog dog dog dog']\""}, {"return": "\"['elephant elephant', 'tiger tiger tiger', 'lion']\""}, {"return": "\"['x x x x x x x x x x']\""}, {"return": "\"['hello hello hello', 'world world']\""}, {"return": "\"['key1', 'key2 key2', 'key3 key3 key3']\""}, {"return": "\"['a a a a a', 'b b b b b', 'c c c c c']\""}, {"return": "\"['one', 'two two', 'three three three', 'four four four four']\""}, {"return": "\"['python python python', 'java java', 'c++']\""}], "parsed_inputs": [[["new_series", "{'a': 1, 'b': 2}"]], [["new_series", "{'hello': 3, 'world': 2}"]], [["new_series", "{'x': 5}"]], [["new_series", "{'foo': 1, 'bar': 2, 'baz': 3}"]], [["new_series", "{'A': 1, 'B': 2, 'C': 3}"]], [["new_series", "{'1': 1, '2': 2, '3': 3}"]], [["new_series", "{'abc': 4, 'def': 5}"]], [["new_series", "{'python': 1, 'is': 2, 'fun': 3}"]], [["new_series", "{'I': 1, 'love': 2, 'python': 3}"]], [["new_series", "{'apple': 2, 'banana': 3, 'cherry': 4}"]]], "exec_code": "def set_info(new_series):\n    arr = []\n    for key, val in new_series.items():\n        a = (key + ' ') * int(val)\n        arr.append(a.rstrip())\n    return arr\n", "output": "The function is:\n\n```python\ndef set_info(new_series):\n    arr = []\n    for key, val in new_series.items():\n        a = (key + ' ') * int(val)\n        arr.append(a.rstrip())\n    return arr\n\n```", "choosed_example_idx": [0, 1, 3, 9, 5, 7, 2, 8], "prompt": "Write a function that generates the output from the input.\nInput: dict(new_series={'a': 1, 'b': 2}), Output: \"['a', 'b b']\"\nInput: dict(new_series={'hello': 3, 'world': 2}), Output: \"['hello hello hello', 'world world']\"\nInput: dict(new_series={'foo': 1, 'bar': 2, 'baz': 3}), Output: \"['foo', 'bar bar', 'baz baz baz']\"\nInput: dict(new_series={'apple': 2, 'banana': 3, 'cherry': 4}), Output: \"['apple apple', 'banana banana banana', 'cherry cherry cherry cherry']\"\nInput: dict(new_series={'1': 1, '2': 2, '3': 3}), Output: \"['1', '2 2', '3 3 3']\"\nInput: dict(new_series={'python': 1, 'is': 2, 'fun': 3}), Output: \"['python', 'is is', 'fun fun fun']\"\nInput: dict(new_series={'x': 5}), Output: \"['x x x x x']\"\nInput: dict(new_series={'I': 1, 'love': 2, 'python': 3}), Output: \"['I', 'love love', 'python python python']\"\n\n\n\nFunction: set_info\n", "id": "43e68e14d7b30d4ba692f91d4dfd9c4cfb0160d4_0"}
{"example_str": "examples = [\n    dict(count=1),  # no additional args\n    dict(count=2, args=['a', 'b']),  # 2 additional string args\n    dict(count=3, args=[1, 2, 3]),  # 3 additional int args\n    dict(count=4, args=['x', 2, 'y']),  # 3 additional mixed-type args\n    dict(count=5),  # no additional args\n    dict(count=6, args=['foo']),  # 1 additional string arg\n    dict(count=7, args=[4.5, 6.7]),  # 2 additional float args\n    dict(count=8, args=[True, False]),  # 2 additional bool args\n    dict(count=9, args=['a', 'b', 'c', 'd']),  # 4 additional string args\n    dict(count=10, args=[]),  # no additional args (empty list)\n]\nexamples += [\n    dict(count=5),\n    dict(count=10, args=(1, 2, 3)),\n    dict(count=0, args=('a', 'b', 'c')),\n    dict(count=-1, args=(True, False)),\n    dict(count=3, args=(None,)),\n    dict(count=2, args=(5.5, 3.2)),\n    dict(count=1, args=(\"Hello\", \"World\")),\n    dict(count=4, args=(dict(), list(), set())),\n    dict(count=8, args=(0,)),\n    dict(count=6, args=([\"list\"], {\"set\"}, (1, 2)))\n]", "code": "def decide(count, *args):\n    return count\n", "func_name": "decide", "exec_status": true, "example_inputs": ["\"{'count': 1}\"", "\"{'count': 2, 'args': ['a', 'b']}\"", "\"{'count': 3, 'args': [1, 2, 3]}\"", "\"{'count': 4, 'args': ['x', 2, 'y']}\"", "\"{'count': 5}\"", "\"{'count': 6, 'args': ['foo']}\"", "\"{'count': 7, 'args': [4.5, 6.7]}\"", "\"{'count': 8, 'args': [True, False]}\"", "\"{'count': 9, 'args': ['a', 'b', 'c', 'd']}\"", "\"{'count': 10, 'args': []}\""], "example_outputs": [{"return": "\"1\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: decide() got an unexpected keyword argument 'args'\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: decide() got an unexpected keyword argument 'args'\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: decide() got an unexpected keyword argument 'args'\""}, {"return": "\"5\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: decide() got an unexpected keyword argument 'args'\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: decide() got an unexpected keyword argument 'args'\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: decide() got an unexpected keyword argument 'args'\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: decide() got an unexpected keyword argument 'args'\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: decide() got an unexpected keyword argument 'args'\""}, {"return": "\"5\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: decide() got an unexpected keyword argument 'args'\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: decide() got an unexpected keyword argument 'args'\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: decide() got an unexpected keyword argument 'args'\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: decide() got an unexpected keyword argument 'args'\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: decide() got an unexpected keyword argument 'args'\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: decide() got an unexpected keyword argument 'args'\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: decide() got an unexpected keyword argument 'args'\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: decide() got an unexpected keyword argument 'args'\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: decide() got an unexpected keyword argument 'args'\""}], "parsed_inputs": [[["count", "1"]], [["count", "2"], ["args", "['a', 'b']"]], [["count", "3"], ["args", "[1, 2, 3]"]], [["count", "4"], ["args", "['x', 2, 'y']"]], [["count", "5"]], [["count", "6"], ["args", "['foo']"]], [["count", "7"], ["args", "[4.5, 6.7]"]], [["count", "8"], ["args", "[True, False]"]], [["count", "9"], ["args", "['a', 'b', 'c', 'd']"]], [["count", "10"], ["args", "[]"]]], "exec_code": "def decide(count, *args):\n    return count\n", "output": "The function is:\n\n```python\ndef decide(count, *args):\n    return count\n\n```", "choosed_example_idx": [8, 6, 5, 4, 0], "prompt": "Input: dict(count=9, args=['a', 'b', 'c', 'd']), Output: \"<class 'TypeError'>: decide() got an unexpected keyword argument 'args'\"\nInput: dict(count=7, args=[4.5, 6.7]), Output: \"<class 'TypeError'>: decide() got an unexpected keyword argument 'args'\"\nInput: dict(count=6, args=['foo']), Output: \"<class 'TypeError'>: decide() got an unexpected keyword argument 'args'\"\nInput: dict(count=5), Output: \"5\"\nInput: dict(count=1), Output: \"1\"\n\n\nFunction: decide\n\n\nWrite a function that generates the output from the input.\n\n", "id": "fcfc80d12c617a7759acbed2eca9c786538a8101_0"}
{"example_str": "examples = [\n    dict(a=10, b=2),\n    dict(a=5, b=5),\n    dict(a=0, b=10),\n    dict(a=7, b=3),\n    dict(a=11, b=1),\n    dict(a=20, b=4),\n    dict(a=15, b=3),\n    dict(a=8, b=2),\n    dict(a=9, b=3),\n    dict(a=6, b=2)\n]\nexamples += [\n    dict(a=10, b=5),     # Example 1: both integers\n    dict(a=7, b=2),      # Example 2: both integers\n    dict(a=5.5, b=2.2),  # Example 3: both floats\n    dict(a=8, b=3),      # Example 4: both integers\n    dict(a=20, b=4),     # Example 5: both integers\n    dict(a=9.0, b=3.0),  # Example 6: both floats\n    dict(a=100, b=25),   # Example 7: both integers\n    dict(a=0, b=1),      # Example 8: zero divided by a non-zero integer\n    dict(a=3, b=0.5),    # Example 9: integer divided by a float\n    dict(a=1.2, b=0.3)   # Example 10: both floats\n]\nexamples += [\n    dict(a=10, b=2),\n    dict(a=20, b=4),\n    dict(a=30, b=5),\n    dict(a=40, b=8),\n    dict(a=50, b=10),\n    dict(a=60, b=12),\n    dict(a=70, b=14),\n    dict(a=80, b=16),\n    dict(a=90, b=18),\n    dict(a=100, b=20),\n]", "code": "def div(a=1, b=2):\n    return a / b\n", "func_name": "div", "exec_status": true, "example_inputs": ["\"{'a': 10, 'b': 2}\"", "\"{'a': 5, 'b': 5}\"", "\"{'a': 0, 'b': 10}\"", "\"{'a': 7, 'b': 3}\"", "\"{'a': 11, 'b': 1}\"", "\"{'a': 20, 'b': 4}\"", "\"{'a': 15, 'b': 3}\"", "\"{'a': 8, 'b': 2}\"", "\"{'a': 9, 'b': 3}\"", "\"{'a': 6, 'b': 2}\""], "example_outputs": [{"return": "\"5.0\""}, {"return": "\"1.0\""}, {"return": "\"0.0\""}, {"return": "\"2.3333333333333335\""}, {"return": "\"11.0\""}, {"return": "\"5.0\""}, {"return": "\"5.0\""}, {"return": "\"4.0\""}, {"return": "\"3.0\""}, {"return": "\"3.0\""}, {"return": "\"2.0\""}, {"return": "\"3.5\""}, {"return": "\"2.5\""}, {"return": "\"2.6666666666666665\""}, {"return": "\"5.0\""}, {"return": "\"3.0\""}, {"return": "\"4.0\""}, {"return": "\"0.0\""}, {"return": "\"6.0\""}, {"return": "\"4.0\""}, {"return": "\"5.0\""}, {"return": "\"5.0\""}, {"return": "\"6.0\""}, {"return": "\"5.0\""}, {"return": "\"5.0\""}, {"return": "\"5.0\""}, {"return": "\"5.0\""}, {"return": "\"5.0\""}, {"return": "\"5.0\""}, {"return": "\"5.0\""}], "parsed_inputs": [[["a", "10"], ["b", "2"]], [["a", "5"], ["b", "5"]], [["a", "0"], ["b", "10"]], [["a", "7"], ["b", "3"]], [["a", "11"], ["b", "1"]], [["a", "20"], ["b", "4"]], [["a", "15"], ["b", "3"]], [["a", "8"], ["b", "2"]], [["a", "9"], ["b", "3"]], [["a", "6"], ["b", "2"]]], "exec_code": "def div(a=1, b=2):\n    return a / b\n", "output": "The function is:\n\n```python\ndef div(a=1, b=2):\n    return a / b\n\n```", "choosed_example_idx": [7, 8, 5, 2, 0, 9, 6, 3, 4], "prompt": "Write a function that generates the output from the input.\nFunction: div\nInput: dict(a=8, b=2), Output: \"4.0\"\nInput: dict(a=9, b=3), Output: \"3.0\"\nInput: dict(a=20, b=4), Output: \"5.0\"\nInput: dict(a=0, b=10), Output: \"0.0\"\nInput: dict(a=10, b=2), Output: \"5.0\"\nInput: dict(a=6, b=2), Output: \"3.0\"\nInput: dict(a=15, b=3), Output: \"5.0\"\nInput: dict(a=7, b=3), Output: \"2.3333333333333335\"\nInput: dict(a=11, b=1), Output: \"11.0\"\n\n", "id": "1c73e905e7f9583682913d9e5ab24ec73a087314_0"}
{"example_str": "examples = [\n    dict(arr1=[1, 3, 5], arr2=[2, 4, 6]),\n    dict(arr1=[10, 20, 30], arr2=[5, 15, 25]),\n    dict(arr1=[1, 2, 3], arr2=[]),\n    dict(arr1=[], arr2=[4, 5, 6]),\n    dict(arr1=[1], arr2=[2]),\n    dict(arr1=[1, 3], arr2=[2]),\n    dict(arr1=[5, 10, 15], arr2=[3, 6, 9]),\n    dict(arr1=[-1, 0, 1], arr2=[-2, -3, -4]),\n    dict(arr1=[100, 200, 300], arr2=[50, 150, 250]),\n    dict(arr1=[1, 1, 1], arr2=[2, 2, 2]),\n]\nexamples += [\n    dict(arr1=[1, 3, 5], arr2=[2, 4, 6]),\n    dict(arr1=[10, 20, 30], arr2=[15, 25, 35]),\n    dict(arr1=[-1, -3, -5], arr2=[-2, -4, -6]),\n    dict(arr1=[], arr2=[1, 2, 3]),\n    dict(arr1=[5, 10, 15], arr2=[]),\n    dict(arr1=[0.1, 0.2, 0.3], arr2=[0.15, 0.25]),\n    dict(arr1=['a', 'c', 'e'], arr2=['b', 'd', 'f']),\n    dict(arr1=[100], arr2=[100]),\n    dict(arr1=[2, 2, 2, 2], arr2=[2, 2]),\n    dict(arr1=[-10, 0, 10, 20], arr2=[-5, 5, 15, 25])\n]\nexamples += [\n    dict(arr1=[1, 3, 5], arr2=[2, 4, 6]),\n    dict(arr1=[10, 20, 30], arr2=[15, 25, 35]),\n    dict(arr1=[], arr2=[1, 2, 3]),\n    dict(arr1=[-1, -3, -5], arr2=[-2, -4, -6]),\n    dict(arr1=[100], arr2=[50]),\n    dict(arr1=[5, 10, 15], arr2=[]),\n    dict(arr1=[1, 1, 1], arr2=[1, 1]),\n    dict(arr1=[0, 2, 4, 6], arr2=[1, 3, 5, 7]),\n    dict(arr1=[-10, 0, 10, 20], arr2=[-5, 5, 15]),\n    dict(arr1=[2, 3, 5, 7], arr2=[11, 13, 17, 19])\n]", "code": "def mergeSort(arr1, arr2):\n    a = len(arr1)\n    b = len(arr2)\n    newarr = [None] * (a + b)\n    i = j = k = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            newarr[k] = arr1[i]\n            i += 1\n        else:\n            newarr[k] = arr2[j]\n            j += 1\n        print(newarr)\n        k += 1\n    while i < len(arr1):\n        newarr[k] = arr1[i]\n        i += 1\n        k += 1\n        print(newarr)\n    while j < len(arr2):\n        newarr[k] = arr2[j]\n        j += 1\n        k += 1\n        print(newarr)\n    return newarr\n", "func_name": "mergeSort", "exec_status": true, "example_inputs": ["\"{'arr1': [1, 3, 5], 'arr2': [2, 4, 6]}\"", "\"{'arr1': [10, 20, 30], 'arr2': [5, 15, 25]}\"", "\"{'arr1': [1, 2, 3], 'arr2': []}\"", "\"{'arr1': [], 'arr2': [4, 5, 6]}\"", "\"{'arr1': [1], 'arr2': [2]}\"", "\"{'arr1': [1, 3], 'arr2': [2]}\"", "\"{'arr1': [5, 10, 15], 'arr2': [3, 6, 9]}\"", "\"{'arr1': [-1, 0, 1], 'arr2': [-2, -3, -4]}\"", "\"{'arr1': [100, 200, 300], 'arr2': [50, 150, 250]}\"", "\"{'arr1': [1, 1, 1], 'arr2': [2, 2, 2]}\""], "example_outputs": [{"return": "\"[1, 2, 3, 4, 5, 6]\""}, {"return": "\"[5, 10, 15, 20, 25, 30]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[4, 5, 6]\""}, {"return": "\"[1, 2]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[3, 5, 6, 9, 10, 15]\""}, {"return": "\"[-2, -3, -4, -1, 0, 1]\""}, {"return": "\"[50, 100, 150, 200, 250, 300]\""}, {"return": "\"[1, 1, 1, 2, 2, 2]\""}, {"return": "\"[1, 2, 3, 4, 5, 6]\""}, {"return": "\"[10, 15, 20, 25, 30, 35]\""}, {"return": "\"[-2, -4, -6, -1, -3, -5]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[5, 10, 15]\""}, {"return": "\"[0.1, 0.15, 0.2, 0.25, 0.3]\""}, {"return": "\"['a', 'b', 'c', 'd', 'e', 'f']\""}, {"return": "\"[100, 100]\""}, {"return": "\"[2, 2, 2, 2, 2, 2]\""}, {"return": "\"[-10, -5, 0, 5, 10, 15, 20, 25]\""}, {"return": "\"[1, 2, 3, 4, 5, 6]\""}, {"return": "\"[10, 15, 20, 25, 30, 35]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[-2, -4, -6, -1, -3, -5]\""}, {"return": "\"[50, 100]\""}, {"return": "\"[5, 10, 15]\""}, {"return": "\"[1, 1, 1, 1, 1]\""}, {"return": "\"[0, 1, 2, 3, 4, 5, 6, 7]\""}, {"return": "\"[-10, -5, 0, 5, 10, 15, 20]\""}, {"return": "\"[2, 3, 5, 7, 11, 13, 17, 19]\""}], "parsed_inputs": [[["arr1", "[1, 3, 5]"], ["arr2", "[2, 4, 6]"]], [["arr1", "[10, 20, 30]"], ["arr2", "[5, 15, 25]"]], [["arr1", "[1, 2, 3]"], ["arr2", "[]"]], [["arr1", "[]"], ["arr2", "[4, 5, 6]"]], [["arr1", "[1]"], ["arr2", "[2]"]], [["arr1", "[1, 3]"], ["arr2", "[2]"]], [["arr1", "[5, 10, 15]"], ["arr2", "[3, 6, 9]"]], [["arr1", "[-1, 0, 1]"], ["arr2", "[-2, -3, -4]"]], [["arr1", "[100, 200, 300]"], ["arr2", "[50, 150, 250]"]], [["arr1", "[1, 1, 1]"], ["arr2", "[2, 2, 2]"]]], "exec_code": "def mergeSort(arr1, arr2):\n    a = len(arr1)\n    b = len(arr2)\n    newarr = [None] * (a + b)\n    i = j = k = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            newarr[k] = arr1[i]\n            i += 1\n        else:\n            newarr[k] = arr2[j]\n            j += 1\n        print(newarr)\n        k += 1\n    while i < len(arr1):\n        newarr[k] = arr1[i]\n        i += 1\n        k += 1\n        print(newarr)\n    while j < len(arr2):\n        newarr[k] = arr2[j]\n        j += 1\n        k += 1\n        print(newarr)\n    return newarr\n", "output": "The function is:\n\n```python\ndef mergeSort(arr1, arr2):\n    a = len(arr1)\n    b = len(arr2)\n    newarr = [None] * (a + b)\n    i = j = k = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            newarr[k] = arr1[i]\n            i += 1\n        else:\n            newarr[k] = arr2[j]\n            j += 1\n        print(newarr)\n        k += 1\n    while i < len(arr1):\n        newarr[k] = arr1[i]\n        i += 1\n        k += 1\n        print(newarr)\n    while j < len(arr2):\n        newarr[k] = arr2[j]\n        j += 1\n        k += 1\n        print(newarr)\n    return newarr\n\n```", "choosed_example_idx": [7, 1, 3, 6], "prompt": "Write a function that generates the output from the input.\n\n\nInput: dict(arr1=[-1, 0, 1], arr2=[-2, -3, -4]), Output: \"[-2, -3, -4, -1, 0, 1]\"\nInput: dict(arr1=[10, 20, 30], arr2=[5, 15, 25]), Output: \"[5, 10, 15, 20, 25, 30]\"\nInput: dict(arr1=[], arr2=[4, 5, 6]), Output: \"[4, 5, 6]\"\nInput: dict(arr1=[5, 10, 15], arr2=[3, 6, 9]), Output: \"[3, 5, 6, 9, 10, 15]\"\n\n\nFunction: mergeSort\n\n\n", "id": "99650db9a1e69b6be9289d66df4d92afe07b4e25_0"}
{"example_str": "examples = [\n    dict(x=[\"90\", \"80\", \"70\", \"60\", \"50\"]),\n    dict(x=[\"95\", \"85\", \"75\", \"65\", \"55\"]),\n    dict(x=[\"100\", \"90\", \"80\", \"70\", \"60\"]),\n    dict(x=[\"40\", \"30\", \"20\", \"10\", \"0\"]),\n    dict(x=[\"75\", \"75\", \"75\", \"75\", \"75\"]),\n    dict(x=[\"60\", \"60\", \"60\", \"60\", \"60\"]),\n    dict(x=[\"50\", \"50\", \"50\", \"50\", \"50\"]),\n    dict(x=[\"45\", \"35\", \"25\", \"15\", \"5\"]),\n    dict(x=[\"99\", \"89\", \"79\", \"69\", \"59\"]),\n    dict(x=[\"10\", \"20\", \"30\", \"40\", \"50\"]),\n]\nexamples += [\n    dict(x=[\"75\", \"80\", \"85\", \"90\", \"95\"]),  # All grades in the highest category\n    dict(x=[\"70\", \"71\", \"72\", \"73\", \"74\"]),  # All grades in the second highest category\n    dict(x=[\"60\", \"61\", \"62\", \"63\", \"64\"]),  # All grades in the third category\n    dict(x=[\"50\", \"51\", \"52\", \"53\", \"54\"]),  # All grades in the fourth category\n    dict(x=[\"45\", \"40\", \"35\", \"30\", \"25\"]),  # All grades in the lowest category\n    dict(x=[\"76\", \"74\", \"69\", \"55\", \"49\"]),  # Mixed grades across all categories\n    dict(x=[\"90\", \"85\", \"80\", \"75\", \"70\"]),  # Descending order across categories\n    dict(x=[\"65\", \"66\", \"67\", \"68\", \"69\"]),  # All grades in the third category\n    dict(x=[\"72\", \"78\", \"84\", \"90\", \"96\"]),  # Grades spread across categories\n    dict(x=[\"49\", \"50\", \"60\", \"70\", \"80\"])   # One grade in each category\n]\nexamples += [\n    dict(x=['75', '80', '90', '100', '85']),  # All grades in the highest category\n    dict(x=['70', '72', '74', '71', '73']),   # All grades in the second highest category\n    dict(x=['60', '65', '69', '61', '68']),   # All grades in the third category\n    dict(x=['50', '55', '59', '51', '58']),   # All grades in the fourth category\n    dict(x=['49', '40', '30', '20', '10']),   # All grades in the lowest category\n    dict(x=['75', '70', '60', '50', '49']),   # One grade in each category\n    dict(x=['88', '77', '66', '55', '44']),   # Mixed grades across categories\n    dict(x=['100', '85', '75', '65', '55']),  # Gradually decreasing grades\n    dict(x=['90', '80', '70', '60', '50']),   # Evenly distributed grades\n    dict(x=['99', '84', '76', '69', '59'])    # Near the boundary grades\n]", "code": "def categorize(x):\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    for i in x:\n        i = eval(i)\n        if i >= 75:\n            a += 1\n        elif 70 <= i < 75:\n            b += 1\n        elif 60 <= i < 70:\n            c += 1\n        elif i >= 50:\n            d += 1\n        else:\n            e += 1\n    grades = [a, b, c, d, e]\n    return grades\n", "func_name": "categorize", "exec_status": true, "example_inputs": ["\"{'x': ['90', '80', '70', '60', '50']}\"", "\"{'x': ['95', '85', '75', '65', '55']}\"", "\"{'x': ['100', '90', '80', '70', '60']}\"", "\"{'x': ['40', '30', '20', '10', '0']}\"", "\"{'x': ['75', '75', '75', '75', '75']}\"", "\"{'x': ['60', '60', '60', '60', '60']}\"", "\"{'x': ['50', '50', '50', '50', '50']}\"", "\"{'x': ['45', '35', '25', '15', '5']}\"", "\"{'x': ['99', '89', '79', '69', '59']}\"", "\"{'x': ['10', '20', '30', '40', '50']}\""], "example_outputs": [{"return": "\"[2, 1, 1, 1, 0]\""}, {"return": "\"[3, 0, 1, 1, 0]\""}, {"return": "\"[3, 1, 1, 0, 0]\""}, {"return": "\"[0, 0, 0, 0, 5]\""}, {"return": "\"[5, 0, 0, 0, 0]\""}, {"return": "\"[0, 0, 5, 0, 0]\""}, {"return": "\"[0, 0, 0, 5, 0]\""}, {"return": "\"[0, 0, 0, 0, 5]\""}, {"return": "\"[3, 0, 1, 1, 0]\""}, {"return": "\"[0, 0, 0, 1, 4]\""}, {"return": "\"[5, 0, 0, 0, 0]\""}, {"return": "\"[0, 5, 0, 0, 0]\""}, {"return": "\"[0, 0, 5, 0, 0]\""}, {"return": "\"[0, 0, 0, 5, 0]\""}, {"return": "\"[0, 0, 0, 0, 5]\""}, {"return": "\"[1, 1, 1, 1, 1]\""}, {"return": "\"[4, 1, 0, 0, 0]\""}, {"return": "\"[0, 0, 5, 0, 0]\""}, {"return": "\"[4, 1, 0, 0, 0]\""}, {"return": "\"[1, 1, 1, 1, 1]\""}, {"return": "\"[5, 0, 0, 0, 0]\""}, {"return": "\"[0, 5, 0, 0, 0]\""}, {"return": "\"[0, 0, 5, 0, 0]\""}, {"return": "\"[0, 0, 0, 5, 0]\""}, {"return": "\"[0, 0, 0, 0, 5]\""}, {"return": "\"[1, 1, 1, 1, 1]\""}, {"return": "\"[2, 0, 1, 1, 1]\""}, {"return": "\"[3, 0, 1, 1, 0]\""}, {"return": "\"[2, 1, 1, 1, 0]\""}, {"return": "\"[3, 0, 1, 1, 0]\""}], "parsed_inputs": [[["x", "['90', '80', '70', '60', '50']"]], [["x", "['95', '85', '75', '65', '55']"]], [["x", "['100', '90', '80', '70', '60']"]], [["x", "['40', '30', '20', '10', '0']"]], [["x", "['75', '75', '75', '75', '75']"]], [["x", "['60', '60', '60', '60', '60']"]], [["x", "['50', '50', '50', '50', '50']"]], [["x", "['45', '35', '25', '15', '5']"]], [["x", "['99', '89', '79', '69', '59']"]], [["x", "['10', '20', '30', '40', '50']"]]], "exec_code": "def categorize(x):\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    for i in x:\n        i = eval(i)\n        if i >= 75:\n            a += 1\n        elif 70 <= i < 75:\n            b += 1\n        elif 60 <= i < 70:\n            c += 1\n        elif i >= 50:\n            d += 1\n        else:\n            e += 1\n    grades = [a, b, c, d, e]\n    return grades\n", "output": "The function is:\n\n```python\ndef categorize(x):\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    for i in x:\n        i = eval(i)\n        if i >= 75:\n            a += 1\n        elif 70 <= i < 75:\n            b += 1\n        elif 60 <= i < 70:\n            c += 1\n        elif i >= 50:\n            d += 1\n        else:\n            e += 1\n    grades = [a, b, c, d, e]\n    return grades\n\n```", "choosed_example_idx": [3, 1, 0, 4, 9, 2], "prompt": "Write a function that generates the output from the input.\nInput: dict(x=['40', '30', '20', '10', '0']), Output: \"[0, 0, 0, 0, 5]\"\nInput: dict(x=['95', '85', '75', '65', '55']), Output: \"[3, 0, 1, 1, 0]\"\nInput: dict(x=['90', '80', '70', '60', '50']), Output: \"[2, 1, 1, 1, 0]\"\nInput: dict(x=['75', '75', '75', '75', '75']), Output: \"[5, 0, 0, 0, 0]\"\nInput: dict(x=['10', '20', '30', '40', '50']), Output: \"[0, 0, 0, 1, 4]\"\nInput: dict(x=['100', '90', '80', '70', '60']), Output: \"[3, 1, 1, 0, 0]\"\n\nFunction: categorize\n\n", "id": "2678524e84b1e4105492ca209c7a92697d95e1fc_0"}
{"example_str": "examples = [\n    dict(num='1234567'),\n    dict(num='9151234567'),\n    dict(num='+19151234567'),\n    dict(num='5123456'),\n    dict(num='12345678'),\n    dict(num='123456'),\n    dict(num='09151234567'),\n    dict(num='1512345678'),\n    dict(num='123456789'),\n    dict(num='1234567890'),\n]\nexamples += [\n    dict(num=\"1234567\"),  # 7 digits, will prepend '915' and '+1'\n    dict(num=\"2345678\"),  # 7 digits, will prepend '915' and '+1'\n    dict(num=\"+11234567\"),  # starts with '+1' but has 8 digits\n    dict(num=\"9123456789\"),  # 10 digits, will prepend '+1'\n    dict(num=\"+19123456789\"),  # already in correct format\n    dict(num=\"1234567890\"),  # 10 digits, will prepend '+1'\n    dict(num=\"123456\"),  # 6 digits, will prepend '+1'\n    dict(num=\"+1234567\"),  # starts with '+', 7 digits after '+'\n    dict(num=\"9151234567\"),  # starts with '915', 10 digits, will prepend '+1'\n    dict(num=\"+19151234567\")  # already in correct format, 12 digits including country code\n]\nexamples += [\n    dict(num='1234567'),  # 7 digits, needs '915' and '+1'\n    dict(num='2345678'),  # 7 digits, needs '915' and '+1'\n    dict(num='9151234567'),  # 10 digits, needs '+1'\n    dict(num='+19151234567'),  # already valid\n    dict(num='31234567890'),  # 11 digits, needs '+1'\n    dict(num='+131234567890'),  # already valid\n    dict(num='123456'),  # 6 digits, incorrect but will be prefixed with '+1'\n    dict(num='123456789012'),  # 12 digits, needs '+1'\n    dict(num='8001234567'),  # 10 digits, needs '+1'\n    dict(num='+18001234567')  # already valid\n]", "code": "def makeValidSMSPhoneNumber(num):\n    if len(num) == 7:\n        num = '915' + num\n    if num[:2] != '+1':\n        num = '+1' + num\n    return num\n", "func_name": "makeValidSMSPhoneNumber", "exec_status": true, "example_inputs": ["\"{'num': '1234567'}\"", "\"{'num': '9151234567'}\"", "\"{'num': '+19151234567'}\"", "\"{'num': '5123456'}\"", "\"{'num': '12345678'}\"", "\"{'num': '123456'}\"", "\"{'num': '09151234567'}\"", "\"{'num': '1512345678'}\"", "\"{'num': '123456789'}\"", "\"{'num': '1234567890'}\""], "example_outputs": [{"return": "\"'+19151234567'\""}, {"return": "\"'+19151234567'\""}, {"return": "\"'+19151234567'\""}, {"return": "\"'+19155123456'\""}, {"return": "\"'+112345678'\""}, {"return": "\"'+1123456'\""}, {"return": "\"'+109151234567'\""}, {"return": "\"'+11512345678'\""}, {"return": "\"'+1123456789'\""}, {"return": "\"'+11234567890'\""}, {"return": "\"'+19151234567'\""}, {"return": "\"'+19152345678'\""}, {"return": "\"'+11234567'\""}, {"return": "\"'+19123456789'\""}, {"return": "\"'+19123456789'\""}, {"return": "\"'+11234567890'\""}, {"return": "\"'+1123456'\""}, {"return": "\"'+1234567'\""}, {"return": "\"'+19151234567'\""}, {"return": "\"'+19151234567'\""}, {"return": "\"'+19151234567'\""}, {"return": "\"'+19152345678'\""}, {"return": "\"'+19151234567'\""}, {"return": "\"'+19151234567'\""}, {"return": "\"'+131234567890'\""}, {"return": "\"'+131234567890'\""}, {"return": "\"'+1123456'\""}, {"return": "\"'+1123456789012'\""}, {"return": "\"'+18001234567'\""}, {"return": "\"'+18001234567'\""}], "parsed_inputs": [[["num", "\"1234567\""]], [["num", "\"9151234567\""]], [["num", "\"+19151234567\""]], [["num", "\"5123456\""]], [["num", "\"12345678\""]], [["num", "\"123456\""]], [["num", "\"09151234567\""]], [["num", "\"1512345678\""]], [["num", "\"123456789\""]], [["num", "\"1234567890\""]]], "exec_code": "def makeValidSMSPhoneNumber(num):\n    if len(num) == 7:\n        num = '915' + num\n    if num[:2] != '+1':\n        num = '+1' + num\n    return num\n", "output": "The function is:\n\n```python\ndef makeValidSMSPhoneNumber(num):\n    if len(num) == 7:\n        num = '915' + num\n    if num[:2] != '+1':\n        num = '+1' + num\n    return num\n\n```", "choosed_example_idx": [4, 0, 1, 9, 3, 8, 7, 5, 2], "prompt": "Input: dict(num=\"12345678\"), Output: \"'+112345678'\"\nInput: dict(num=\"1234567\"), Output: \"'+19151234567'\"\nInput: dict(num=\"9151234567\"), Output: \"'+19151234567'\"\nInput: dict(num=\"1234567890\"), Output: \"'+11234567890'\"\nInput: dict(num=\"5123456\"), Output: \"'+19155123456'\"\nInput: dict(num=\"123456789\"), Output: \"'+1123456789'\"\nInput: dict(num=\"1512345678\"), Output: \"'+11512345678'\"\nInput: dict(num=\"123456\"), Output: \"'+1123456'\"\nInput: dict(num=\"+19151234567\"), Output: \"'+19151234567'\"\n\nWrite a function that generates the output from the input.\n\nFunction: makeValidSMSPhoneNumber\n", "id": "8716104dfb56fc3cb53d54dde74ce52bfa968e2d_0"}
{"example_str": "examples = [\n    dict(freq='S'),\n    dict(freq='T2'),\n    dict(freq='H'),\n    dict(freq='D3'),\n    dict(freq='W4'),\n    dict(freq='M5'),\n    dict(freq='A6'),\n    dict(freq='S1'),\n    dict(freq='T10'),\n    dict(freq='H24'),\n]\nexamples += [\n    dict(freq='5S'),\n    dict(freq='10T'),\n    dict(freq='3H'),\n    dict(freq='1D'),\n    dict(freq='2W'),\n    dict(freq='6M'),\n    dict(freq='1A'),\n    dict(freq='15 S'),\n    dict(freq='30 T'),\n    dict(freq='24H')\n]\nexamples += [\n    dict(freq='1S'),\n    dict(freq='2T'),\n    dict(freq='3H'),\n    dict(freq='4D'),\n    dict(freq='5W'),\n    dict(freq='6M'),\n    dict(freq='7A'),\n    dict(freq='10S'),\n    dict(freq='15M'),\n    dict(freq='20A')\n]", "code": "def getFreqName(freq):\n    name = freq\n    clean = ''.join([i for i in freq if not i.isdigit()]).strip()\n    if clean == 'S':\n        name = 'second(s)'\n    elif clean == 'T':\n        name = 'minute(s)'\n    elif clean == 'H':\n        name = 'hour(s)'\n    elif clean == 'D':\n        name = 'day(s)'\n    elif clean == 'W':\n        name = 'week(s)'\n    elif clean == 'M':\n        name = 'month(s)'\n    elif clean == 'A':\n        name = 'year(s)'\n    return name\n", "func_name": "getFreqName", "exec_status": true, "example_inputs": ["\"{'freq': 'S'}\"", "\"{'freq': 'T2'}\"", "\"{'freq': 'H'}\"", "\"{'freq': 'D3'}\"", "\"{'freq': 'W4'}\"", "\"{'freq': 'M5'}\"", "\"{'freq': 'A6'}\"", "\"{'freq': 'S1'}\"", "\"{'freq': 'T10'}\"", "\"{'freq': 'H24'}\""], "example_outputs": [{"return": "\"'second(s)'\""}, {"return": "\"'minute(s)'\""}, {"return": "\"'hour(s)'\""}, {"return": "\"'day(s)'\""}, {"return": "\"'week(s)'\""}, {"return": "\"'month(s)'\""}, {"return": "\"'year(s)'\""}, {"return": "\"'second(s)'\""}, {"return": "\"'minute(s)'\""}, {"return": "\"'hour(s)'\""}, {"return": "\"'second(s)'\""}, {"return": "\"'minute(s)'\""}, {"return": "\"'hour(s)'\""}, {"return": "\"'day(s)'\""}, {"return": "\"'week(s)'\""}, {"return": "\"'month(s)'\""}, {"return": "\"'year(s)'\""}, {"return": "\"'second(s)'\""}, {"return": "\"'minute(s)'\""}, {"return": "\"'hour(s)'\""}, {"return": "\"'second(s)'\""}, {"return": "\"'minute(s)'\""}, {"return": "\"'hour(s)'\""}, {"return": "\"'day(s)'\""}, {"return": "\"'week(s)'\""}, {"return": "\"'month(s)'\""}, {"return": "\"'year(s)'\""}, {"return": "\"'second(s)'\""}, {"return": "\"'month(s)'\""}, {"return": "\"'year(s)'\""}], "parsed_inputs": [[["freq", "\"S\""]], [["freq", "\"T2\""]], [["freq", "\"H\""]], [["freq", "\"D3\""]], [["freq", "\"W4\""]], [["freq", "\"M5\""]], [["freq", "\"A6\""]], [["freq", "\"S1\""]], [["freq", "\"T10\""]], [["freq", "\"H24\""]]], "exec_code": "def getFreqName(freq):\n    name = freq\n    clean = ''.join([i for i in freq if not i.isdigit()]).strip()\n    if clean == 'S':\n        name = 'second(s)'\n    elif clean == 'T':\n        name = 'minute(s)'\n    elif clean == 'H':\n        name = 'hour(s)'\n    elif clean == 'D':\n        name = 'day(s)'\n    elif clean == 'W':\n        name = 'week(s)'\n    elif clean == 'M':\n        name = 'month(s)'\n    elif clean == 'A':\n        name = 'year(s)'\n    return name\n", "output": "The function is:\n\n```python\ndef getFreqName(freq):\n    name = freq\n    clean = ''.join([i for i in freq if not i.isdigit()]).strip()\n    if clean == 'S':\n        name = 'second(s)'\n    elif clean == 'T':\n        name = 'minute(s)'\n    elif clean == 'H':\n        name = 'hour(s)'\n    elif clean == 'D':\n        name = 'day(s)'\n    elif clean == 'W':\n        name = 'week(s)'\n    elif clean == 'M':\n        name = 'month(s)'\n    elif clean == 'A':\n        name = 'year(s)'\n    return name\n\n```", "choosed_example_idx": [0, 3, 1, 9, 6, 4, 5, 8, 7, 2], "prompt": "Write a function that generates the output from the input.\n\n\nFunction: getFreqName\n\nInput: dict(freq=\"S\"), Output: \"'second(s)'\"\nInput: dict(freq=\"D3\"), Output: \"'day(s)'\"\nInput: dict(freq=\"T2\"), Output: \"'minute(s)'\"\nInput: dict(freq=\"H24\"), Output: \"'hour(s)'\"\nInput: dict(freq=\"A6\"), Output: \"'year(s)'\"\nInput: dict(freq=\"W4\"), Output: \"'week(s)'\"\nInput: dict(freq=\"M5\"), Output: \"'month(s)'\"\nInput: dict(freq=\"T10\"), Output: \"'minute(s)'\"\nInput: dict(freq=\"S1\"), Output: \"'second(s)'\"\nInput: dict(freq=\"H\"), Output: \"'hour(s)'\"\n\n\n", "id": "facedd8a197f7fdcd20e0e97cda2d73bbd2f9d9f_0"}
{"example_str": "examples = [\n    dict(start_time=1643723400, end_time=1643723500),\n    dict(start_time=0, end_time=60),\n    dict(start_time=1643723000, end_time=1643723100),\n    dict(start_time=100, end_time=200),\n    dict(start_time=1643723200, end_time=1643723300),\n    dict(start_time=30, end_time=90),\n    dict(start_time=1643722900, end_time=1643723000),\n    dict(start_time=150, end_time=210),\n    dict(start_time=1643723100, end_time=1643723200),\n    dict(start_time=10, end_time=70),\n]\nexamples += [\n    dict(start_time=1700000000, end_time=1700000060),  # exactly 1 minute apart\n    dict(start_time=1700000000, end_time=1700000120),  # 2 minutes apart\n    dict(start_time=1700000000, end_time=1700000010),  # 10 seconds apart\n    dict(start_time=1700000000, end_time=1700000600),  # 10 minutes apart\n    dict(start_time=1700000000, end_time=1700001200),  # 20 minutes apart\n    dict(start_time=1700000000, end_time=1700001800),  # 30 minutes apart\n    dict(start_time=1700000000, end_time=1700002400),  # 40 minutes apart\n    dict(start_time=1700000000, end_time=1700003000),  # 50 minutes apart\n    dict(start_time=1700000000, end_time=1700003600),  # 1 hour apart\n    dict(start_time=1700000000, end_time=1700007200)   # 2 hours apart\n]\nexamples += [\n    dict(start_time=0, end_time=120),      # 2 minutes, 0 seconds\n    dict(start_time=60, end_time=360),     # 5 minutes, 0 seconds\n    dict(start_time=150, end_time=390),    # 4 minutes, 0 seconds\n    dict(start_time=200, end_time=650),    # 7 minutes, 30 seconds\n    dict(start_time=800, end_time=1400),   # 10 minutes, 0 seconds\n    dict(start_time=0, end_time=59),       # 0 minutes, 59 seconds\n    dict(start_time=123, end_time=1023),   # 15 minutes, 0 seconds\n    dict(start_time=3600, end_time=3661),  # 1 minute, 1 second\n    dict(start_time=7200, end_time=7265),  # 1 minute, 5 seconds\n    dict(start_time=500, end_time=1000)    # 8 minutes, 20 seconds\n]", "code": "def epoch_time(start_time, end_time):\n    elapsed_time = end_time - start_time\n    elapsed_mins = int(elapsed_time / 60)\n    elapsed_secs = int(elapsed_time - elapsed_mins * 60)\n    return elapsed_mins, elapsed_secs\n", "func_name": "epoch_time", "exec_status": true, "example_inputs": ["\"{'start_time': 1643723400, 'end_time': 1643723500}\"", "\"{'start_time': 0, 'end_time': 60}\"", "\"{'start_time': 1643723000, 'end_time': 1643723100}\"", "\"{'start_time': 100, 'end_time': 200}\"", "\"{'start_time': 1643723200, 'end_time': 1643723300}\"", "\"{'start_time': 30, 'end_time': 90}\"", "\"{'start_time': 1643722900, 'end_time': 1643723000}\"", "\"{'start_time': 150, 'end_time': 210}\"", "\"{'start_time': 1643723100, 'end_time': 1643723200}\"", "\"{'start_time': 10, 'end_time': 70}\""], "example_outputs": [{"return": "\"(1, 40)\""}, {"return": "\"(1, 0)\""}, {"return": "\"(1, 40)\""}, {"return": "\"(1, 40)\""}, {"return": "\"(1, 40)\""}, {"return": "\"(1, 0)\""}, {"return": "\"(1, 40)\""}, {"return": "\"(1, 0)\""}, {"return": "\"(1, 40)\""}, {"return": "\"(1, 0)\""}, {"return": "\"(1, 0)\""}, {"return": "\"(2, 0)\""}, {"return": "\"(0, 10)\""}, {"return": "\"(10, 0)\""}, {"return": "\"(20, 0)\""}, {"return": "\"(30, 0)\""}, {"return": "\"(40, 0)\""}, {"return": "\"(50, 0)\""}, {"return": "\"(60, 0)\""}, {"return": "\"(120, 0)\""}, {"return": "\"(2, 0)\""}, {"return": "\"(5, 0)\""}, {"return": "\"(4, 0)\""}, {"return": "\"(7, 30)\""}, {"return": "\"(10, 0)\""}, {"return": "\"(0, 59)\""}, {"return": "\"(15, 0)\""}, {"return": "\"(1, 1)\""}, {"return": "\"(1, 5)\""}, {"return": "\"(8, 20)\""}], "parsed_inputs": [[["start_time", "1643723400"], ["end_time", "1643723500"]], [["start_time", "0"], ["end_time", "60"]], [["start_time", "1643723000"], ["end_time", "1643723100"]], [["start_time", "100"], ["end_time", "200"]], [["start_time", "1643723200"], ["end_time", "1643723300"]], [["start_time", "30"], ["end_time", "90"]], [["start_time", "1643722900"], ["end_time", "1643723000"]], [["start_time", "150"], ["end_time", "210"]], [["start_time", "1643723100"], ["end_time", "1643723200"]], [["start_time", "10"], ["end_time", "70"]]], "exec_code": "def epoch_time(start_time, end_time):\n    elapsed_time = end_time - start_time\n    elapsed_mins = int(elapsed_time / 60)\n    elapsed_secs = int(elapsed_time - elapsed_mins * 60)\n    return elapsed_mins, elapsed_secs\n", "output": "The function is:\n\n```python\ndef epoch_time(start_time, end_time):\n    elapsed_time = end_time - start_time\n    elapsed_mins = int(elapsed_time / 60)\n    elapsed_secs = int(elapsed_time - elapsed_mins * 60)\n    return elapsed_mins, elapsed_secs\n\n```", "choosed_example_idx": [9, 3, 8, 2, 4, 0, 6, 5], "prompt": "Write a function that generates the output from the input.\nFunction: epoch_time\nInput: dict(start_time=10, end_time=70), Output: \"(1, 0)\"\nInput: dict(start_time=100, end_time=200), Output: \"(1, 40)\"\nInput: dict(start_time=1643723100, end_time=1643723200), Output: \"(1, 40)\"\nInput: dict(start_time=1643723000, end_time=1643723100), Output: \"(1, 40)\"\nInput: dict(start_time=1643723200, end_time=1643723300), Output: \"(1, 40)\"\nInput: dict(start_time=1643723400, end_time=1643723500), Output: \"(1, 40)\"\nInput: dict(start_time=1643722900, end_time=1643723000), Output: \"(1, 40)\"\nInput: dict(start_time=30, end_time=90), Output: \"(1, 0)\"\n\n", "id": "4ba115f73eb571615c6f24dc886f5bb04955bc1b_0"}
{"example_str": "examples = [\n    dict(orig_data=[0, 2, 7, 0], verbose=False),\n    dict(orig_data=[1, 1, 1, 1], verbose=True),\n    dict(orig_data=[5, 5, 5, 5], verbose=False),\n    dict(orig_data=[10, 3, 5, 2], verbose=True),\n    dict(orig_data=[1, 2, 3, 4, 5], verbose=False),\n    dict(orig_data=[0, 0, 0, 0], verbose=True),\n    dict(orig_data=[9, 9, 9, 9], verbose=False),\n    dict(orig_data=[1, 3, 5, 7, 9], verbose=True),\n    dict(orig_data=[2, 4, 6, 8, 10], verbose=False),\n    dict(orig_data=[11, 13, 15, 17, 19], verbose=True)\n]\nexamples += [\n    dict(orig_data=[0, 2, 7, 0], verbose=False),\n    dict(orig_data=[1, 3, 2, 3, 1], verbose=True),\n    dict(orig_data=[4, 1, 2], verbose=False),\n    dict(orig_data=[10, 10, 10, 10], verbose=False),\n    dict(orig_data=[0, 0, 0, 0], verbose=False),\n    dict(orig_data=[5, 1, 1, 5], verbose=True),\n    dict(orig_data=[3, 1, 2, 3], verbose=False),\n    dict(orig_data=[1, 0, 2, 4, 3], verbose=False),\n    dict(orig_data=[8, 0, 7, 3, 5], verbose=True),\n    dict(orig_data=[2, 4, 1, 2], verbose=False)\n]\nexamples += [\n    dict(orig_data=[0, 2, 7, 0], verbose=False),\n    dict(orig_data=[1, 3, 2, 3, 1], verbose=True),\n    dict(orig_data=[4, 1, 2], verbose=False),\n    dict(orig_data=[10, 10, 10, 10], verbose=True),\n    dict(orig_data=[0, 0, 0, 5], verbose=False),\n    dict(orig_data=[3, 1, 2, 3], verbose=False),\n    dict(orig_data=[1, 0, 0, 1], verbose=True),\n    dict(orig_data=[5, 5, 5, 5, 5], verbose=False),\n    dict(orig_data=[2, 4, 1, 2], verbose=True),\n    dict(orig_data=[8, 6, 7, 5, 3, 0, 9], verbose=False)\n]", "code": "def cycles_loop(orig_data, verbose=False):\n    data = orig_data[:]\n    steps = 0\n    len_data = len(data)\n    history = {'-'.join(map(str, data)): 0}\n    while True:\n        steps += 1\n        pos_biggest, val_biggest = max(enumerate(data), key=lambda x: x[1])\n        added = val_biggest // len_data\n        rem = val_biggest % len_data\n        data[pos_biggest] = 0\n        if verbose:\n            print(pos_biggest, val_biggest, '  a:', added, '  r:', rem)\n            print([((i - pos_biggest - 1) % len_data < rem) for i in range(\n                len_data)])\n        new_data = [(x + added + ((i - pos_biggest - 1) % len_data < rem)) for\n            i, x in enumerate(data)]\n        new_data_repr = '-'.join(map(str, new_data))\n        if new_data_repr in history:\n            if verbose:\n                print(new_data_repr, '<=====')\n            loop_size = steps - history[new_data_repr]\n            break\n        else:\n            if verbose:\n                print(new_data_repr, '<=====')\n            history[new_data_repr] = steps\n            data = new_data\n    return loop_size\n", "func_name": "cycles_loop", "exec_status": true, "example_inputs": ["\"{'orig_data': [0, 2, 7, 0], 'verbose': False}\"", "\"{'orig_data': [1, 1, 1, 1], 'verbose': True}\"", "\"{'orig_data': [5, 5, 5, 5], 'verbose': False}\"", "\"{'orig_data': [10, 3, 5, 2], 'verbose': True}\"", "\"{'orig_data': [1, 2, 3, 4, 5], 'verbose': False}\"", "\"{'orig_data': [0, 0, 0, 0], 'verbose': True}\"", "\"{'orig_data': [9, 9, 9, 9], 'verbose': False}\"", "\"{'orig_data': [1, 3, 5, 7, 9], 'verbose': True}\"", "\"{'orig_data': [2, 4, 6, 8, 10], 'verbose': False}\"", "\"{'orig_data': [11, 13, 15, 17, 19], 'verbose': True}\""], "example_outputs": [{"return": "\"4\""}, {"return": "\"4\""}, {"return": "\"4\""}, {"return": "\"4\""}, {"return": "\"5\""}, {"return": "\"1\""}, {"return": "\"4\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"4\""}, {"return": "\"5\""}, {"return": "\"3\""}, {"return": "\"4\""}, {"return": "\"1\""}, {"return": "\"4\""}, {"return": "\"4\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"4\""}, {"return": "\"4\""}, {"return": "\"5\""}, {"return": "\"3\""}, {"return": "\"4\""}, {"return": "\"15\""}, {"return": "\"4\""}, {"return": "\"4\""}, {"return": "\"5\""}, {"return": "\"4\""}, {"return": "\"7\""}], "parsed_inputs": [[["orig_data", "[0, 2, 7, 0]"], ["verbose", "False"]], [["orig_data", "[1, 1, 1, 1]"], ["verbose", "True"]], [["orig_data", "[5, 5, 5, 5]"], ["verbose", "False"]], [["orig_data", "[10, 3, 5, 2]"], ["verbose", "True"]], [["orig_data", "[1, 2, 3, 4, 5]"], ["verbose", "False"]], [["orig_data", "[0, 0, 0, 0]"], ["verbose", "True"]], [["orig_data", "[9, 9, 9, 9]"], ["verbose", "False"]], [["orig_data", "[1, 3, 5, 7, 9]"], ["verbose", "True"]], [["orig_data", "[2, 4, 6, 8, 10]"], ["verbose", "False"]], [["orig_data", "[11, 13, 15, 17, 19]"], ["verbose", "True"]]], "exec_code": "def cycles_loop(orig_data, verbose=False):\n    data = orig_data[:]\n    steps = 0\n    len_data = len(data)\n    history = {'-'.join(map(str, data)): 0}\n    while True:\n        steps += 1\n        pos_biggest, val_biggest = max(enumerate(data), key=lambda x: x[1])\n        added = val_biggest // len_data\n        rem = val_biggest % len_data\n        data[pos_biggest] = 0\n        if verbose:\n            print(pos_biggest, val_biggest, '  a:', added, '  r:', rem)\n            print([((i - pos_biggest - 1) % len_data < rem) for i in range(\n                len_data)])\n        new_data = [(x + added + ((i - pos_biggest - 1) % len_data < rem)) for\n            i, x in enumerate(data)]\n        new_data_repr = '-'.join(map(str, new_data))\n        if new_data_repr in history:\n            if verbose:\n                print(new_data_repr, '<=====')\n            loop_size = steps - history[new_data_repr]\n            break\n        else:\n            if verbose:\n                print(new_data_repr, '<=====')\n            history[new_data_repr] = steps\n            data = new_data\n    return loop_size\n", "output": "The function is:\n\n```python\ndef cycles_loop(orig_data, verbose=False):\n    data = orig_data[:]\n    steps = 0\n    len_data = len(data)\n    history = {'-'.join(map(str, data)): 0}\n    while True:\n        steps += 1\n        pos_biggest, val_biggest = max(enumerate(data), key=lambda x: x[1])\n        added = val_biggest // len_data\n        rem = val_biggest % len_data\n        data[pos_biggest] = 0\n        if verbose:\n            print(pos_biggest, val_biggest, '  a:', added, '  r:', rem)\n            print([((i - pos_biggest - 1) % len_data < rem) for i in range(\n                len_data)])\n        new_data = [(x + added + ((i - pos_biggest - 1) % len_data < rem)) for\n            i, x in enumerate(data)]\n        new_data_repr = '-'.join(map(str, new_data))\n        if new_data_repr in history:\n            if verbose:\n                print(new_data_repr, '<=====')\n            loop_size = steps - history[new_data_repr]\n            break\n        else:\n            if verbose:\n                print(new_data_repr, '<=====')\n            history[new_data_repr] = steps\n            data = new_data\n    return loop_size\n\n```", "choosed_example_idx": [2, 1, 3, 4, 6, 9, 5, 0, 8], "prompt": "Write a function that generates the output from the input.\nInput: dict(orig_data=[5, 5, 5, 5], verbose=False), Output: \"4\"\nInput: dict(orig_data=[1, 1, 1, 1], verbose=True), Output: \"4\"\nInput: dict(orig_data=[10, 3, 5, 2], verbose=True), Output: \"4\"\nInput: dict(orig_data=[1, 2, 3, 4, 5], verbose=False), Output: \"5\"\nInput: dict(orig_data=[9, 9, 9, 9], verbose=False), Output: \"4\"\nInput: dict(orig_data=[11, 13, 15, 17, 19], verbose=True), Output: \"5\"\nInput: dict(orig_data=[0, 0, 0, 0], verbose=True), Output: \"1\"\nInput: dict(orig_data=[0, 2, 7, 0], verbose=False), Output: \"4\"\nInput: dict(orig_data=[2, 4, 6, 8, 10], verbose=False), Output: \"5\"\n\nFunction: cycles_loop\n\n", "id": "89c43a5258a7ada0c0e2689d0a12f8441ca844c8_0"}
{"example_str": "examples = [\n    dict(text='hello đorld'),\n    dict(text='đynamic programming'),\n    dict(text='đefault value'),\n    dict(text='đouble click'),\n    dict(text='đelete file'),\n    dict(text='đialog box'),\n    dict(text='đirectory path'),\n    dict(text='đisabled button'),\n    dict(text='đocumentation'),\n    dict(text='đownload file'),\n]\nexamples += [\n    dict(text=\"điện thoại\"),  # Contains the character 'đ'\n    dict(text=\"cà phê đặc\"),  # Contains the character 'đ'\n    dict(text=\"lập trình viên\"),  # Does not contain the character 'đ'\n    dict(text=\"đường đi\"),  # Contains the character 'đ'\n    dict(text=\"học sinh đoàn\"),  # Contains the character 'đ'\n    dict(text=\"đèn đóm\"),  # Contains the character 'đ'\n    dict(text=\"bánh mì đậu\"),  # Contains the character 'đ'\n    dict(text=\"đại học\"),  # Contains the character 'đ'\n    dict(text=\"nước đá\"),  # Contains the character 'đ'\n    dict(text=\"đồng hồ\")  # Contains the character 'đ'\n]\nexamples += [\n    dict(text='đragon'),\n    dict(text='Đragon'),\n    dict(text='điện thoại'),\n    dict(text='mặt đường'),\n    dict(text='học sinh đại học'),\n    dict(text='bánh mì đặc biệt'),\n    dict(text='lịch sử Việt Nam có nhiều đổi thay'),\n    dict(text='đồng hồ đeo tay'),\n    dict(text='đèn đường'),\n    dict(text='sử dụng điện thoại mới'),\n]", "code": "def replace(text):\n    x = text.replace('đ', 'd')\n    return x\n", "func_name": "replace", "exec_status": true, "example_inputs": ["\"{'text': 'hello \\u0111orld'}\"", "\"{'text': '\\u0111ynamic programming'}\"", "\"{'text': '\\u0111efault value'}\"", "\"{'text': '\\u0111ouble click'}\"", "\"{'text': '\\u0111elete file'}\"", "\"{'text': '\\u0111ialog box'}\"", "\"{'text': '\\u0111irectory path'}\"", "\"{'text': '\\u0111isabled button'}\"", "\"{'text': '\\u0111ocumentation'}\"", "\"{'text': '\\u0111ownload file'}\""], "example_outputs": [{"return": "\"'hello dorld'\""}, {"return": "\"'dynamic programming'\""}, {"return": "\"'default value'\""}, {"return": "\"'double click'\""}, {"return": "\"'delete file'\""}, {"return": "\"'dialog box'\""}, {"return": "\"'directory path'\""}, {"return": "\"'disabled button'\""}, {"return": "\"'documentation'\""}, {"return": "\"'download file'\""}, {"return": "\"'di\\u1ec7n tho\\u1ea1i'\""}, {"return": "\"'c\\u00e0 ph\\u00ea d\\u1eb7c'\""}, {"return": "\"'l\\u1eadp tr\\u00ecnh vi\\u00ean'\""}, {"return": "\"'d\\u01b0\\u1eddng di'\""}, {"return": "\"'h\\u1ecdc sinh do\\u00e0n'\""}, {"return": "\"'d\\u00e8n d\\u00f3m'\""}, {"return": "\"'b\\u00e1nh m\\u00ec d\\u1eadu'\""}, {"return": "\"'d\\u1ea1i h\\u1ecdc'\""}, {"return": "\"'n\\u01b0\\u1edbc d\\u00e1'\""}, {"return": "\"'d\\u1ed3ng h\\u1ed3'\""}, {"return": "\"'dragon'\""}, {"return": "\"'\\u0110ragon'\""}, {"return": "\"'di\\u1ec7n tho\\u1ea1i'\""}, {"return": "\"'m\\u1eb7t d\\u01b0\\u1eddng'\""}, {"return": "\"'h\\u1ecdc sinh d\\u1ea1i h\\u1ecdc'\""}, {"return": "\"'b\\u00e1nh m\\u00ec d\\u1eb7c bi\\u1ec7t'\""}, {"return": "\"'l\\u1ecbch s\\u1eed Vi\\u1ec7t Nam c\\u00f3 nhi\\u1ec1u d\\u1ed5i thay'\""}, {"return": "\"'d\\u1ed3ng h\\u1ed3 deo tay'\""}, {"return": "\"'d\\u00e8n d\\u01b0\\u1eddng'\""}, {"return": "\"'s\\u1eed d\\u1ee5ng di\\u1ec7n tho\\u1ea1i m\\u1edbi'\""}], "parsed_inputs": [[["text", "\"hello \\u0111orld\""]], [["text", "\"\\u0111ynamic programming\""]], [["text", "\"\\u0111efault value\""]], [["text", "\"\\u0111ouble click\""]], [["text", "\"\\u0111elete file\""]], [["text", "\"\\u0111ialog box\""]], [["text", "\"\\u0111irectory path\""]], [["text", "\"\\u0111isabled button\""]], [["text", "\"\\u0111ocumentation\""]], [["text", "\"\\u0111ownload file\""]]], "exec_code": "def replace(text):\n    x = text.replace('đ', 'd')\n    return x\n", "output": "The function is:\n\n```python\ndef replace(text):\n    x = text.replace('đ', 'd')\n    return x\n\n```", "choosed_example_idx": [9, 5, 2, 7, 6, 3], "prompt": "Input: dict(text=\"\\u0111ownload file\"), Output: \"'download file'\"\nInput: dict(text=\"\\u0111ialog box\"), Output: \"'dialog box'\"\nInput: dict(text=\"\\u0111efault value\"), Output: \"'default value'\"\nInput: dict(text=\"\\u0111isabled button\"), Output: \"'disabled button'\"\nInput: dict(text=\"\\u0111irectory path\"), Output: \"'directory path'\"\nInput: dict(text=\"\\u0111ouble click\"), Output: \"'double click'\"\n\nWrite a function that generates the output from the input.\nFunction: replace\n", "id": "7c5253d1e44dbe54289fcab5339c1bc466302217_0"}
{"example_str": "import numpy as np\n\nexamples = [\n    dict(v=np.array([1, 2, 3, 4, 5])),\n    dict(v=np.array([10, 20, 30, 40, 50])),\n    dict(v=np.array([0.1, 0.2, 0.3, 0.4, 0.5])),\n    dict(v=np.array([-1, -2, -3, -4, -5])),\n    dict(v=np.array([100, 200, 300, 400, 500])),\n    dict(v=np.array([1.1, 2.2, 3.3, 4.4, 5.5])),\n    dict(v=np.array([5, 5, 5, 5, 5])),\n    dict(v=np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])),\n    dict(v=np.array([-10, -5, 0, 5, 10])),\n    dict(v=np.array([0.01, 0.1, 1, 10, 100])),\n]\nimport numpy as np\n\nexamples += [\n    dict(v=np.array([1, 2, 3, 4, 5])),\n    dict(v=np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])),\n    dict(v=np.array([5.5, 6.5, 7.5, 8.5, 9.5])),\n    dict(v=np.array([0, 0, 1, 1, 1, 2, 2, 2, 2])),\n    dict(v=np.array([-1, -2, -3, -4, -5])),\n    dict(v=np.array([100, 200, 300, 400, 500, 600])),\n    dict(v=np.array([10])),\n    dict(v=np.array([1.1, 2.2, 3.3, 4.4, 5.5])),\n    dict(v=np.array([0.1, 0.01, 0.001, 0.0001, 0.00001])),\n    dict(v=np.array([123, 456, 789, 101112, 131415]))\n]\nimport numpy as np\n\nexamples += [\n    dict(v=np.array([1, 2, 3, 4, 5])),\n    dict(v=np.array([10, 20, 30, 40, 50])),\n    dict(v=np.array([100, 200, 300, 400, 500])),\n    dict(v=np.array([1, 1, 1, 1, 1])),\n    dict(v=np.array([2, 4, 6, 8, 10])),\n    dict(v=np.array([5, 10, 15, 20, 25])),\n    dict(v=np.array([0, 0, 0, 0, 0])),\n    dict(v=np.array([-1, -2, -3, -4, -5])),\n    dict(v=np.array([1.5, 2.5, 3.5, 4.5, 5.5])),\n    dict(v=np.array([10, 10, 20, 20, 30, 30, 40, 40, 50, 50]))\n]", "code": "def make_ci95(v):\n    \"\"\"return tuple with 95 percent confidence interval for the value in np.array v\"\"\"\n    n_samples = 10000\n    samples = np.random.choice(v, size=n_samples, replace=True)\n    sorted_samples = np.sort(samples)\n    ci = sorted_samples[int(n_samples * 0.025) - 1], sorted_samples[int(\n        n_samples * 0.975) - 1]\n    return ci\n", "func_name": "make_ci95", "exec_status": true, "example_inputs": ["\"{'v': array([1, 2, 3, 4, 5])}\"", "\"{'v': array([10, 20, 30, 40, 50])}\"", "\"{'v': array([0.1, 0.2, 0.3, 0.4, 0.5])}\"", "\"{'v': array([-1, -2, -3, -4, -5])}\"", "\"{'v': array([100, 200, 300, 400, 500])}\"", "\"{'v': array([1.1, 2.2, 3.3, 4.4, 5.5])}\"", "\"{'v': array([5, 5, 5, 5, 5])}\"", "\"{'v': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10])}\"", "\"{'v': array([-10,  -5,   0,   5,  10])}\"", "\"{'v': array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])}\""], "example_outputs": [{"return": "\"(1, 5)\""}, {"return": "\"(10, 50)\""}, {"return": "\"(0.1, 0.5)\""}, {"return": "\"(-5, -1)\""}, {"return": "\"(100, 500)\""}, {"return": "\"(1.1, 5.5)\""}, {"return": "\"(5, 5)\""}, {"return": "\"(1, 10)\""}, {"return": "\"(-10, 10)\""}, {"return": "\"(0.01, 100.0)\""}, {"return": "\"(1, 5)\""}, {"return": "\"(10, 100)\""}, {"return": "\"(5.5, 9.5)\""}, {"return": "\"(0, 2)\""}, {"return": "\"(-5, -1)\""}, {"return": "\"(100, 600)\""}, {"return": "\"(10, 10)\""}, {"return": "\"(1.1, 5.5)\""}, {"return": "\"(1e-05, 0.1)\""}, {"return": "\"(123, 131415)\""}, {"return": "\"(1, 5)\""}, {"return": "\"(10, 50)\""}, {"return": "\"(100, 500)\""}, {"return": "\"(1, 1)\""}, {"return": "\"(2, 10)\""}, {"return": "\"(5, 25)\""}, {"return": "\"(0, 0)\""}, {"return": "\"(-5, -1)\""}, {"return": "\"(1.5, 5.5)\""}, {"return": "\"(10, 50)\""}], "parsed_inputs": [[["v", "np.array([1, 2, 3, 4, 5])"]], [["v", "np.array([10, 20, 30, 40, 50])"]], [["v", "np.array([0.1, 0.2, 0.3, 0.4, 0.5])"]], [["v", "np.array([-1, -2, -3, -4, -5])"]], [["v", "np.array([100, 200, 300, 400, 500])"]], [["v", "np.array([1.1, 2.2, 3.3, 4.4, 5.5])"]], [["v", "np.array([5, 5, 5, 5, 5])"]], [["v", "np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"]], [["v", "np.array([-10, -5, 0, 5, 10])"]], [["v", "np.array([0.01, 0.1, 1, 10, 100])"]]], "exec_code": "def make_ci95(v):\n    \"\"\"return tuple with 95 percent confidence interval for the value in np.array v\"\"\"\n    n_samples = 10000\n    samples = np.random.choice(v, size=n_samples, replace=True)\n    sorted_samples = np.sort(samples)\n    ci = sorted_samples[int(n_samples * 0.025) - 1], sorted_samples[int(\n        n_samples * 0.975) - 1]\n    return ci\n", "output": "The function is:\n\n```python\ndef make_ci95(v):\n    \"\"\"return tuple with 95 percent confidence interval for the value in np.array v\"\"\"\n    n_samples = 10000\n    samples = np.random.choice(v, size=n_samples, replace=True)\n    sorted_samples = np.sort(samples)\n    ci = sorted_samples[int(n_samples * 0.025) - 1], sorted_samples[int(\n        n_samples * 0.975) - 1]\n    return ci\n\n```", "choosed_example_idx": [2, 8, 3, 0], "prompt": "Function: make_ci95\nInput: dict(v=np.array([0.1, 0.2, 0.3, 0.4, 0.5])), Output: \"(0.1, 0.5)\"\nInput: dict(v=np.array([-10, -5, 0, 5, 10])), Output: \"(-10, 10)\"\nInput: dict(v=np.array([-1, -2, -3, -4, -5])), Output: \"(-5, -1)\"\nInput: dict(v=np.array([1, 2, 3, 4, 5])), Output: \"(1, 5)\"\n\n\nWrite a function that generates the output from the input.\n", "id": "b9f0808e0a3354a7f79db7d52e91766f19d9c8c8_0"}
{"example_str": "examples = [\n    dict(arr1=[[1, 2], [3, 4]], arr2=[[5, 6], [7, 8]]),\n    dict(arr1=[[1, 1], [1, 1]], arr2=[[1, 1], [1, 1]]),\n    dict(arr1=[[0, 0], [0, 0]], arr2=[[0, 0], [0, 0]]),\n    dict(arr1=[[10, 20], [30, 40]], arr2=[[50, 60], [70, 80]]),\n    dict(arr1=[[1, 2, 3], [4, 5, 6]], arr2=[[7, 8, 9], [10, 11, 12]]),\n    dict(arr1=[[1, 1, 1], [1, 1, 1]], arr2=[[1, 1, 1], [1, 1, 1]]),\n    dict(arr1=[[0, 0, 0], [0, 0, 0]], arr2=[[0, 0, 0], [0, 0, 0]]),\n    dict(arr1=[[10, 20, 30], [40, 50, 60]], arr2=[[70, 80, 90], [100, 110, 120]]),\n    dict(arr1=[[1, 2, 3, 4], [5, 6, 7, 8]], arr2=[[9, 10, 11, 12], [13, 14, 15, 16]]),\n    dict(arr1=[[1, 1, 1, 1], [1, 1, 1, 1]], arr2=[[1, 1, 1, 1], [1, 1, 1, 1]])\n]\nexamples += [\n    dict(arr1=[[1, 2], [3, 4]], arr2=[[5, 6], [7, 8]]),\n    dict(arr1=[[0, 0], [0, 0]], arr2=[[1, 1], [1, 1]]),\n    dict(arr1=[[10, 20], [30, 40]], arr2=[[50, 60], [70, 80]]),\n    dict(arr1=[[1, 1], [1, 1]], arr2=[[2, 2], [2, 2]]),\n    dict(arr1=[[-1, -2], [-3, -4]], arr2=[[1, 2], [3, 4]]),\n    dict(arr1=[[100, 200], [300, 400]], arr2=[[400, 300], [200, 100]]),\n    dict(arr1=[[0, 0], [0, 0]], arr2=[[0, 0], [0, 0]]),\n    dict(arr1=[[5, 5], [5, 5]], arr2=[[-5, -5], [-5, -5]]),\n    dict(arr1=[[1, 2, 3], [4, 5, 6]], arr2=[[7, 8, 9], [10, 11, 12]]),\n    dict(arr1=[[11, 22], [33, 44]], arr2=[[55, 66], [77, 88]])\n]\nexamples += [\n    dict(arr1=[[1, 2], [3, 4]], arr2=[[5, 6], [7, 8]]),\n    dict(arr1=[[0, 0], [0, 0]], arr2=[[1, 1], [1, 1]]),\n    dict(arr1=[[10, 20], [30, 40]], arr2=[[1, 2], [3, 4]]),\n    dict(arr1=[[1, 1], [1, 1]], arr2=[[2, 2], [2, 2]]),\n    dict(arr1=[[9, 8], [7, 6]], arr2=[[1, 2], [3, 4]]),\n    dict(arr1=[[100, 200], [300, 400]], arr2=[[500, 600], [700, 800]]),\n    dict(arr1=[[-1, -2], [-3, -4]], arr2=[[1, 2], [3, 4]]),\n    dict(arr1=[[0, 0], [0, 0]], arr2=[[0, 0], [0, 0]]),\n    dict(arr1=[[5, 5], [5, 5]], arr2=[[5, 5], [5, 5]]),\n    dict(arr1=[[2, 4], [6, 8]], arr2=[[10, 20], [30, 40]])\n]", "code": "def sum_2d_arrays(arr1, arr2):\n    for i in range(len(arr2)):\n        for j in range(len(arr2[0])):\n            arr1[i][j] = arr1[i][j] + arr2[i][j]\n    return arr1\n", "func_name": "sum_2d_arrays", "exec_status": true, "example_inputs": ["\"{'arr1': [[1, 2], [3, 4]], 'arr2': [[5, 6], [7, 8]]}\"", "\"{'arr1': [[1, 1], [1, 1]], 'arr2': [[1, 1], [1, 1]]}\"", "\"{'arr1': [[0, 0], [0, 0]], 'arr2': [[0, 0], [0, 0]]}\"", "\"{'arr1': [[10, 20], [30, 40]], 'arr2': [[50, 60], [70, 80]]}\"", "\"{'arr1': [[1, 2, 3], [4, 5, 6]], 'arr2': [[7, 8, 9], [10, 11, 12]]}\"", "\"{'arr1': [[1, 1, 1], [1, 1, 1]], 'arr2': [[1, 1, 1], [1, 1, 1]]}\"", "\"{'arr1': [[0, 0, 0], [0, 0, 0]], 'arr2': [[0, 0, 0], [0, 0, 0]]}\"", "\"{'arr1': [[10, 20, 30], [40, 50, 60]], 'arr2': [[70, 80, 90], [100, 110, 120]]}\"", "\"{'arr1': [[1, 2, 3, 4], [5, 6, 7, 8]], 'arr2': [[9, 10, 11, 12], [13, 14, 15, 16]]}\"", "\"{'arr1': [[1, 1, 1, 1], [1, 1, 1, 1]], 'arr2': [[1, 1, 1, 1], [1, 1, 1, 1]]}\""], "example_outputs": [{"return": "\"[[6, 8], [10, 12]]\""}, {"return": "\"[[2, 2], [2, 2]]\""}, {"return": "\"[[0, 0], [0, 0]]\""}, {"return": "\"[[60, 80], [100, 120]]\""}, {"return": "\"[[8, 10, 12], [14, 16, 18]]\""}, {"return": "\"[[2, 2, 2], [2, 2, 2]]\""}, {"return": "\"[[0, 0, 0], [0, 0, 0]]\""}, {"return": "\"[[80, 100, 120], [140, 160, 180]]\""}, {"return": "\"[[10, 12, 14, 16], [18, 20, 22, 24]]\""}, {"return": "\"[[2, 2, 2, 2], [2, 2, 2, 2]]\""}, {"return": "\"[[6, 8], [10, 12]]\""}, {"return": "\"[[1, 1], [1, 1]]\""}, {"return": "\"[[60, 80], [100, 120]]\""}, {"return": "\"[[3, 3], [3, 3]]\""}, {"return": "\"[[0, 0], [0, 0]]\""}, {"return": "\"[[500, 500], [500, 500]]\""}, {"return": "\"[[0, 0], [0, 0]]\""}, {"return": "\"[[0, 0], [0, 0]]\""}, {"return": "\"[[8, 10, 12], [14, 16, 18]]\""}, {"return": "\"[[66, 88], [110, 132]]\""}, {"return": "\"[[6, 8], [10, 12]]\""}, {"return": "\"[[1, 1], [1, 1]]\""}, {"return": "\"[[11, 22], [33, 44]]\""}, {"return": "\"[[3, 3], [3, 3]]\""}, {"return": "\"[[10, 10], [10, 10]]\""}, {"return": "\"[[600, 800], [1000, 1200]]\""}, {"return": "\"[[0, 0], [0, 0]]\""}, {"return": "\"[[0, 0], [0, 0]]\""}, {"return": "\"[[10, 10], [10, 10]]\""}, {"return": "\"[[12, 24], [36, 48]]\""}], "parsed_inputs": [[["arr1", "[[1, 2], [3, 4]]"], ["arr2", "[[5, 6], [7, 8]]"]], [["arr1", "[[1, 1], [1, 1]]"], ["arr2", "[[1, 1], [1, 1]]"]], [["arr1", "[[0, 0], [0, 0]]"], ["arr2", "[[0, 0], [0, 0]]"]], [["arr1", "[[10, 20], [30, 40]]"], ["arr2", "[[50, 60], [70, 80]]"]], [["arr1", "[[1, 2, 3], [4, 5, 6]]"], ["arr2", "[[7, 8, 9], [10, 11, 12]]"]], [["arr1", "[[1, 1, 1], [1, 1, 1]]"], ["arr2", "[[1, 1, 1], [1, 1, 1]]"]], [["arr1", "[[0, 0, 0], [0, 0, 0]]"], ["arr2", "[[0, 0, 0], [0, 0, 0]]"]], [["arr1", "[[10, 20, 30], [40, 50, 60]]"], ["arr2", "[[70, 80, 90], [100, 110, 120]]"]], [["arr1", "[[1, 2, 3, 4], [5, 6, 7, 8]]"], ["arr2", "[[9, 10, 11, 12], [13, 14, 15, 16]]"]], [["arr1", "[[1, 1, 1, 1], [1, 1, 1, 1]]"], ["arr2", "[[1, 1, 1, 1], [1, 1, 1, 1]]"]]], "exec_code": "def sum_2d_arrays(arr1, arr2):\n    for i in range(len(arr2)):\n        for j in range(len(arr2[0])):\n            arr1[i][j] = arr1[i][j] + arr2[i][j]\n    return arr1\n", "output": "The function is:\n\n```python\ndef sum_2d_arrays(arr1, arr2):\n    for i in range(len(arr2)):\n        for j in range(len(arr2[0])):\n            arr1[i][j] = arr1[i][j] + arr2[i][j]\n    return arr1\n\n```", "choosed_example_idx": [0, 9, 7, 1, 5], "prompt": "Input: dict(arr1=[[1, 2], [3, 4]], arr2=[[5, 6], [7, 8]]), Output: \"[[6, 8], [10, 12]]\"\nInput: dict(arr1=[[1, 1, 1, 1], [1, 1, 1, 1]], arr2=[[1, 1, 1, 1], [1, 1, 1, 1]]), Output: \"[[2, 2, 2, 2], [2, 2, 2, 2]]\"\nInput: dict(arr1=[[10, 20, 30], [40, 50, 60]], arr2=[[70, 80, 90], [100, 110, 120]]), Output: \"[[80, 100, 120], [140, 160, 180]]\"\nInput: dict(arr1=[[1, 1], [1, 1]], arr2=[[1, 1], [1, 1]]), Output: \"[[2, 2], [2, 2]]\"\nInput: dict(arr1=[[1, 1, 1], [1, 1, 1]], arr2=[[1, 1, 1], [1, 1, 1]]), Output: \"[[2, 2, 2], [2, 2, 2]]\"\n\n\nWrite a function that generates the output from the input.\n\n\nFunction: sum_2d_arrays\n", "id": "7e9c2d7e84ca1057b54f01516068eaba13a103c5_0"}
{"example_str": "examples = [\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=10),\n    dict(n=20),\n    dict(n=50),\n    dict(n=100),\n    dict(n=200),\n]\nexamples += [\n    dict(n=1),\n    dict(n=5),\n    dict(n=10),\n    dict(n=15),\n    dict(n=20),\n    dict(n=25),\n    dict(n=30),\n    dict(n=50),\n    dict(n=100),\n    dict(n=0)\n]\nexamples += [\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10)\n]", "code": "def sumas(n):\n    suma = 0\n    for i in range(1, n + 1):\n        suma = suma + i\n    return suma ** 2\n", "func_name": "sumas", "exec_status": true, "example_inputs": ["\"{'n': 1}\"", "\"{'n': 2}\"", "\"{'n': 3}\"", "\"{'n': 4}\"", "\"{'n': 5}\"", "\"{'n': 10}\"", "\"{'n': 20}\"", "\"{'n': 50}\"", "\"{'n': 100}\"", "\"{'n': 200}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"9\""}, {"return": "\"36\""}, {"return": "\"100\""}, {"return": "\"225\""}, {"return": "\"3025\""}, {"return": "\"44100\""}, {"return": "\"1625625\""}, {"return": "\"25502500\""}, {"return": "\"404010000\""}, {"return": "\"1\""}, {"return": "\"225\""}, {"return": "\"3025\""}, {"return": "\"14400\""}, {"return": "\"44100\""}, {"return": "\"105625\""}, {"return": "\"216225\""}, {"return": "\"1625625\""}, {"return": "\"25502500\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"9\""}, {"return": "\"36\""}, {"return": "\"100\""}, {"return": "\"225\""}, {"return": "\"441\""}, {"return": "\"784\""}, {"return": "\"1296\""}, {"return": "\"2025\""}, {"return": "\"3025\""}], "parsed_inputs": [[["n", "1"]], [["n", "2"]], [["n", "3"]], [["n", "4"]], [["n", "5"]], [["n", "10"]], [["n", "20"]], [["n", "50"]], [["n", "100"]], [["n", "200"]]], "exec_code": "def sumas(n):\n    suma = 0\n    for i in range(1, n + 1):\n        suma = suma + i\n    return suma ** 2\n", "output": "The function is:\n\n```python\ndef sumas(n):\n    suma = 0\n    for i in range(1, n + 1):\n        suma = suma + i\n    return suma ** 2\n\n```", "choosed_example_idx": [2, 9, 4, 0, 6, 7, 5], "prompt": "Input: dict(n=3), Output: \"36\"\nInput: dict(n=200), Output: \"404010000\"\nInput: dict(n=5), Output: \"225\"\nInput: dict(n=1), Output: \"1\"\nInput: dict(n=20), Output: \"44100\"\nInput: dict(n=50), Output: \"1625625\"\nInput: dict(n=10), Output: \"3025\"\n\nFunction: sumas\n\nWrite a function that generates the output from the input.\n", "id": "c3003bd5195d9bd9746c953f47f802aba5dbd1ed_0"}
{"example_str": "examples = [\n    dict(key=1),\n    dict(key=2),\n    dict(key=3),\n    dict(key=4),\n    dict(key=5),\n    dict(key=10),\n    dict(key=15),\n    dict(key=20),\n    dict(key=25),\n    dict(key=26),\n]\nexamples += [\n    dict(key=0),\n    dict(key=1),\n    dict(key=2),\n    dict(key=3),\n    dict(key=4),\n    dict(key=5),\n    dict(key=6),\n    dict(key=7),\n    dict(key=8),\n    dict(key=9),\n    dict(key=10),\n    dict(key=11),\n    dict(key=12),\n    dict(key=13),\n    dict(key=14),\n    dict(key=15),\n    dict(key=16),\n    dict(key=17),\n    dict(key=18),\n    dict(key=19),\n    dict(key=20),\n    dict(key=21),\n    dict(key=22),\n    dict(key=23),\n    dict(key=24),\n    dict(key=25)\n]\nexamples += [\n    dict(key=1),\n    dict(key=2),\n    dict(key=3),\n    dict(key=4),\n    dict(key=5),\n    dict(key=6),\n    dict(key=7),\n    dict(key=8),\n    dict(key=9),\n    dict(key=10)\n]", "code": "def AInverseKey(key):\n    for i in range(26):\n        if (key + i) % 26 == 1:\n            return i\n", "func_name": "AInverseKey", "exec_status": true, "example_inputs": ["\"{'key': 1}\"", "\"{'key': 2}\"", "\"{'key': 3}\"", "\"{'key': 4}\"", "\"{'key': 5}\"", "\"{'key': 10}\"", "\"{'key': 15}\"", "\"{'key': 20}\"", "\"{'key': 25}\"", "\"{'key': 26}\""], "example_outputs": [{"return": "\"0\""}, {"return": "\"25\""}, {"return": "\"24\""}, {"return": "\"23\""}, {"return": "\"22\""}, {"return": "\"17\""}, {"return": "\"12\""}, {"return": "\"7\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"25\""}, {"return": "\"24\""}, {"return": "\"23\""}, {"return": "\"22\""}, {"return": "\"21\""}, {"return": "\"20\""}, {"return": "\"19\""}, {"return": "\"18\""}, {"return": "\"17\""}, {"return": "\"16\""}, {"return": "\"15\""}, {"return": "\"14\""}, {"return": "\"13\""}, {"return": "\"12\""}, {"return": "\"11\""}, {"return": "\"10\""}, {"return": "\"9\""}, {"return": "\"8\""}, {"return": "\"7\""}, {"return": "\"6\""}, {"return": "\"5\""}, {"return": "\"4\""}, {"return": "\"3\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"25\""}, {"return": "\"24\""}, {"return": "\"23\""}, {"return": "\"22\""}, {"return": "\"21\""}, {"return": "\"20\""}, {"return": "\"19\""}, {"return": "\"18\""}, {"return": "\"17\""}], "parsed_inputs": [[["key", "1"]], [["key", "2"]], [["key", "3"]], [["key", "4"]], [["key", "5"]], [["key", "10"]], [["key", "15"]], [["key", "20"]], [["key", "25"]], [["key", "26"]]], "exec_code": "def AInverseKey(key):\n    for i in range(26):\n        if (key + i) % 26 == 1:\n            return i\n", "output": "The function is:\n\n```python\ndef AInverseKey(key):\n    for i in range(26):\n        if (key + i) % 26 == 1:\n            return i\n\n```", "choosed_example_idx": [9, 2, 7, 4, 1, 3, 5], "prompt": "Write a function that generates the output from the input.\nInput: dict(key=26), Output: \"1\"\nInput: dict(key=3), Output: \"24\"\nInput: dict(key=20), Output: \"7\"\nInput: dict(key=5), Output: \"22\"\nInput: dict(key=2), Output: \"25\"\nInput: dict(key=4), Output: \"23\"\nInput: dict(key=10), Output: \"17\"\n\nFunction: AInverseKey\n", "id": "58cb20c1a32e40a00f3f1cdd72a9544e9a4a26af_0"}
{"example_str": "examples = [\n    dict(label='rightarrow'),\n    dict(label='sum'),\n    dict(label='π'),\n    dict(label='≤'),\n    dict(label='∞'),\n    dict(label='×'),\n    dict(label='alpha'),\n    dict(label='≠'),\n    dict(label='∫'),\n    dict(label='→'),\n]\nexamples += [\n    dict(label='rightarrow'),\n    dict(label='÷'),\n    dict(label='×'),\n    dict(label='±'),\n    dict(label='∑'),\n    dict(label='π'),\n    dict(label='∫'),\n    dict(label='θ'),\n    dict(label='∞'),\n    dict(label='…'),\n    dict(label='β'),\n    dict(label='→'),\n    dict(label='≤'),\n    dict(label='≥'),\n    dict(label='<'),\n    dict(label='>'),\n    dict(label='σ'),\n    dict(label='ϕ'),\n    dict(label='′'),\n    dict(label='Γ'),\n    dict(label='γ'),\n    dict(label='μ'),\n    dict(label='λ'),\n    dict(label='Δ'),\n    dict(label='∃'),\n    dict(label='∀'),\n    dict(label='∈'),\n    dict(label='∂'),\n    dict(label='≠'),\n    dict(label='α'),\n    dict(label='−')\n]\nexamples += [\n    dict(label='rightarrow'),\n    dict(label='÷'),\n    dict(label='×'),\n    dict(label='±'),\n    dict(label='∑'),\n    dict(label='π'),\n    dict(label='∫'),\n    dict(label='θ'),\n    dict(label='∞'),\n    dict(label='…'),\n    dict(label='β'),\n    dict(label='→'),\n    dict(label='≤'),\n    dict(label='≥'),\n    dict(label='<'),\n    dict(label='>'),\n    dict(label='σ'),\n    dict(label='ϕ'),\n    dict(label='′'),\n    dict(label='Γ'),\n    dict(label='γ'),\n    dict(label='μ'),\n    dict(label='λ'),\n    dict(label='Δ'),\n    dict(label='∃'),\n    dict(label='∀'),\n    dict(label='∈'),\n    dict(label='∂'),\n    dict(label='≠'),\n    dict(label='α'),\n    dict(label='−')\n]", "code": "def normalizeSymbol(label):\n    if label in ['rightarrow', 'sum', 'int', 'pi', 'leq', 'sin', 'cos',\n        'tan', 'lim', 'geq', 'infty', 'prime', 'times', 'alpha', 'beta',\n        'pm', 'log', '}', '{']:\n        return '\\\\' + label\n    if label == '÷':\n        label = '\\\\div'\n    if label == '×':\n        label = '\\\\times'\n    if label == '±':\n        label = '\\\\pm'\n    if label == '∑':\n        label = '\\\\sum'\n    if label == 'π':\n        label = '\\\\pi'\n    if label == '∫':\n        label = '\\\\int'\n    if label == 'θ':\n        label = '\\\\theta'\n    if label == '∞':\n        label = '\\\\infty'\n    if label == '…':\n        label = '\\\\ldots'\n    if label == 'β':\n        label = '\\\\beta'\n    if label == '→':\n        label = '\\\\rightarrow'\n    if label == '≤':\n        label = '\\\\leq'\n    if label == '≥':\n        label = '\\\\geq'\n    if label == '<':\n        label = '\\\\lt'\n    if label == '>':\n        label = '\\\\gt'\n    if label == 'σ':\n        label = '\\\\sigma'\n    if label == 'ϕ':\n        label = '\\\\phi'\n    if label == '′':\n        label = '\\\\prime'\n    if label == 'Γ':\n        label = '\\\\gamma'\n    if label == 'γ':\n        label = '\\\\gamma'\n    if label == 'μ':\n        label = '\\\\mu'\n    if label == 'λ':\n        label = '\\\\lambda'\n    if label == 'Δ':\n        label = '\\\\Delta'\n    if label == '∃':\n        label = '\\\\exists'\n    if label == '∀':\n        label = '\\\\forall'\n    if label == '∈':\n        label = '\\\\in'\n    if label == '∂':\n        label = '\\\\partial'\n    if label == '≠':\n        label = '\\\\neq'\n    if label == 'α':\n        label = '\\\\alpha'\n    if label == '−':\n        label = '-'\n    return label\n", "func_name": "normalizeSymbol", "exec_status": true, "example_inputs": ["\"{'label': 'rightarrow'}\"", "\"{'label': 'sum'}\"", "\"{'label': '\\u03c0'}\"", "\"{'label': '\\u2264'}\"", "\"{'label': '\\u221e'}\"", "\"{'label': '\\u00d7'}\"", "\"{'label': 'alpha'}\"", "\"{'label': '\\u2260'}\"", "\"{'label': '\\u222b'}\"", "\"{'label': '\\u2192'}\""], "example_outputs": [{"return": "\"'\\\\\\\\rightarrow'\""}, {"return": "\"'\\\\\\\\sum'\""}, {"return": "\"'\\\\\\\\pi'\""}, {"return": "\"'\\\\\\\\leq'\""}, {"return": "\"'\\\\\\\\infty'\""}, {"return": "\"'\\\\\\\\times'\""}, {"return": "\"'\\\\\\\\alpha'\""}, {"return": "\"'\\\\\\\\neq'\""}, {"return": "\"'\\\\\\\\int'\""}, {"return": "\"'\\\\\\\\rightarrow'\""}, {"return": "\"'\\\\\\\\rightarrow'\""}, {"return": "\"'\\\\\\\\div'\""}, {"return": "\"'\\\\\\\\times'\""}, {"return": "\"'\\\\\\\\pm'\""}, {"return": "\"'\\\\\\\\sum'\""}, {"return": "\"'\\\\\\\\pi'\""}, {"return": "\"'\\\\\\\\int'\""}, {"return": "\"'\\\\\\\\theta'\""}, {"return": "\"'\\\\\\\\infty'\""}, {"return": "\"'\\\\\\\\ldots'\""}, {"return": "\"'\\\\\\\\beta'\""}, {"return": "\"'\\\\\\\\rightarrow'\""}, {"return": "\"'\\\\\\\\leq'\""}, {"return": "\"'\\\\\\\\geq'\""}, {"return": "\"'\\\\\\\\lt'\""}, {"return": "\"'\\\\\\\\gt'\""}, {"return": "\"'\\\\\\\\sigma'\""}, {"return": "\"'\\\\\\\\phi'\""}, {"return": "\"'\\\\\\\\prime'\""}, {"return": "\"'\\\\\\\\gamma'\""}, {"return": "\"'\\\\\\\\gamma'\""}, {"return": "\"'\\\\\\\\mu'\""}, {"return": "\"'\\\\\\\\lambda'\""}, {"return": "\"'\\\\\\\\Delta'\""}, {"return": "\"'\\\\\\\\exists'\""}, {"return": "\"'\\\\\\\\forall'\""}, {"return": "\"'\\\\\\\\in'\""}, {"return": "\"'\\\\\\\\partial'\""}, {"return": "\"'\\\\\\\\neq'\""}, {"return": "\"'\\\\\\\\alpha'\""}, {"return": "\"'-'\""}, {"return": "\"'\\\\\\\\rightarrow'\""}, {"return": "\"'\\\\\\\\div'\""}, {"return": "\"'\\\\\\\\times'\""}, {"return": "\"'\\\\\\\\pm'\""}, {"return": "\"'\\\\\\\\sum'\""}, {"return": "\"'\\\\\\\\pi'\""}, {"return": "\"'\\\\\\\\int'\""}, {"return": "\"'\\\\\\\\theta'\""}, {"return": "\"'\\\\\\\\infty'\""}, {"return": "\"'\\\\\\\\ldots'\""}, {"return": "\"'\\\\\\\\beta'\""}, {"return": "\"'\\\\\\\\rightarrow'\""}, {"return": "\"'\\\\\\\\leq'\""}, {"return": "\"'\\\\\\\\geq'\""}, {"return": "\"'\\\\\\\\lt'\""}, {"return": "\"'\\\\\\\\gt'\""}, {"return": "\"'\\\\\\\\sigma'\""}, {"return": "\"'\\\\\\\\phi'\""}, {"return": "\"'\\\\\\\\prime'\""}, {"return": "\"'\\\\\\\\gamma'\""}, {"return": "\"'\\\\\\\\gamma'\""}, {"return": "\"'\\\\\\\\mu'\""}, {"return": "\"'\\\\\\\\lambda'\""}, {"return": "\"'\\\\\\\\Delta'\""}, {"return": "\"'\\\\\\\\exists'\""}, {"return": "\"'\\\\\\\\forall'\""}, {"return": "\"'\\\\\\\\in'\""}, {"return": "\"'\\\\\\\\partial'\""}, {"return": "\"'\\\\\\\\neq'\""}, {"return": "\"'\\\\\\\\alpha'\""}, {"return": "\"'-'\""}], "parsed_inputs": [[["label", "\"rightarrow\""]], [["label", "\"sum\""]], [["label", "\"\\u03c0\""]], [["label", "\"\\u2264\""]], [["label", "\"\\u221e\""]], [["label", "\"\\u00d7\""]], [["label", "\"alpha\""]], [["label", "\"\\u2260\""]], [["label", "\"\\u222b\""]], [["label", "\"\\u2192\""]]], "exec_code": "def normalizeSymbol(label):\n    if label in ['rightarrow', 'sum', 'int', 'pi', 'leq', 'sin', 'cos',\n        'tan', 'lim', 'geq', 'infty', 'prime', 'times', 'alpha', 'beta',\n        'pm', 'log', '}', '{']:\n        return '\\\\' + label\n    if label == '÷':\n        label = '\\\\div'\n    if label == '×':\n        label = '\\\\times'\n    if label == '±':\n        label = '\\\\pm'\n    if label == '∑':\n        label = '\\\\sum'\n    if label == 'π':\n        label = '\\\\pi'\n    if label == '∫':\n        label = '\\\\int'\n    if label == 'θ':\n        label = '\\\\theta'\n    if label == '∞':\n        label = '\\\\infty'\n    if label == '…':\n        label = '\\\\ldots'\n    if label == 'β':\n        label = '\\\\beta'\n    if label == '→':\n        label = '\\\\rightarrow'\n    if label == '≤':\n        label = '\\\\leq'\n    if label == '≥':\n        label = '\\\\geq'\n    if label == '<':\n        label = '\\\\lt'\n    if label == '>':\n        label = '\\\\gt'\n    if label == 'σ':\n        label = '\\\\sigma'\n    if label == 'ϕ':\n        label = '\\\\phi'\n    if label == '′':\n        label = '\\\\prime'\n    if label == 'Γ':\n        label = '\\\\gamma'\n    if label == 'γ':\n        label = '\\\\gamma'\n    if label == 'μ':\n        label = '\\\\mu'\n    if label == 'λ':\n        label = '\\\\lambda'\n    if label == 'Δ':\n        label = '\\\\Delta'\n    if label == '∃':\n        label = '\\\\exists'\n    if label == '∀':\n        label = '\\\\forall'\n    if label == '∈':\n        label = '\\\\in'\n    if label == '∂':\n        label = '\\\\partial'\n    if label == '≠':\n        label = '\\\\neq'\n    if label == 'α':\n        label = '\\\\alpha'\n    if label == '−':\n        label = '-'\n    return label\n", "output": "The function is:\n\n```python\ndef normalizeSymbol(label):\n    if label in ['rightarrow', 'sum', 'int', 'pi', 'leq', 'sin', 'cos',\n        'tan', 'lim', 'geq', 'infty', 'prime', 'times', 'alpha', 'beta',\n        'pm', 'log', '}', '{']:\n        return '\\\\' + label\n    if label == '÷':\n        label = '\\\\div'\n    if label == '×':\n        label = '\\\\times'\n    if label == '±':\n        label = '\\\\pm'\n    if label == '∑':\n        label = '\\\\sum'\n    if label == 'π':\n        label = '\\\\pi'\n    if label == '∫':\n        label = '\\\\int'\n    if label == 'θ':\n        label = '\\\\theta'\n    if label == '∞':\n        label = '\\\\infty'\n    if label == '…':\n        label = '\\\\ldots'\n    if label == 'β':\n        label = '\\\\beta'\n    if label == '→':\n        label = '\\\\rightarrow'\n    if label == '≤':\n        label = '\\\\leq'\n    if label == '≥':\n        label = '\\\\geq'\n    if label == '<':\n        label = '\\\\lt'\n    if label == '>':\n        label = '\\\\gt'\n    if label == 'σ':\n        label = '\\\\sigma'\n    if label == 'ϕ':\n        label = '\\\\phi'\n    if label == '′':\n        label = '\\\\prime'\n    if label == 'Γ':\n        label = '\\\\gamma'\n    if label == 'γ':\n        label = '\\\\gamma'\n    if label == 'μ':\n        label = '\\\\mu'\n    if label == 'λ':\n        label = '\\\\lambda'\n    if label == 'Δ':\n        label = '\\\\Delta'\n    if label == '∃':\n        label = '\\\\exists'\n    if label == '∀':\n        label = '\\\\forall'\n    if label == '∈':\n        label = '\\\\in'\n    if label == '∂':\n        label = '\\\\partial'\n    if label == '≠':\n        label = '\\\\neq'\n    if label == 'α':\n        label = '\\\\alpha'\n    if label == '−':\n        label = '-'\n    return label\n\n```", "choosed_example_idx": [2, 8, 9, 3, 4, 0, 6], "prompt": "Input: dict(label=\"\\u03c0\"), Output: \"'\\\\\\\\pi'\"\nInput: dict(label=\"\\u222b\"), Output: \"'\\\\\\\\int'\"\nInput: dict(label=\"\\u2192\"), Output: \"'\\\\\\\\rightarrow'\"\nInput: dict(label=\"\\u2264\"), Output: \"'\\\\\\\\leq'\"\nInput: dict(label=\"\\u221e\"), Output: \"'\\\\\\\\infty'\"\nInput: dict(label=\"rightarrow\"), Output: \"'\\\\\\\\rightarrow'\"\nInput: dict(label=\"alpha\"), Output: \"'\\\\\\\\alpha'\"\n\n\n\nFunction: normalizeSymbol\nWrite a function that generates the output from the input.\n", "id": "e12ee1eb4bc519aac72b2fd72133d8ac58f0bad4_0"}
{"example_str": "examples = [\n    dict(in_type=int),\n    dict(in_type=str),\n    dict(in_type=list),\n    dict(in_type=tuple),\n    dict(in_type=dict),\n    dict(in_type=set),\n    dict(in_type=frozenset),\n    dict(in_type=range),\n    dict(in_type=bytes),\n    dict(in_type=bytearray),\n]\nexamples += [\n    dict(in_type=int),\n    dict(in_type=str),\n    dict(in_type=list),\n    dict(in_type=dict),\n    dict(in_type=set),\n    dict(in_type=tuple),\n    dict(in_type=float),\n    dict(in_type=bytes),\n    dict(in_type=complex),\n    dict(in_type=bool)\n]", "code": "def is_iterable(in_type):\n    l = dir(in_type)\n    if '__iter__' in l:\n        return True\n    else:\n        return False\n", "func_name": "is_iterable", "exec_status": true, "example_inputs": ["\"{'in_type': <class 'int'>}\"", "\"{'in_type': <class 'str'>}\"", "\"{'in_type': <class 'list'>}\"", "\"{'in_type': <class 'tuple'>}\"", "\"{'in_type': <class 'dict'>}\"", "\"{'in_type': <class 'set'>}\"", "\"{'in_type': <class 'frozenset'>}\"", "\"{'in_type': <class 'range'>}\"", "\"{'in_type': <class 'bytes'>}\"", "\"{'in_type': <class 'bytearray'>}\""], "example_outputs": [{"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}], "parsed_inputs": [[["in_type", "int"]], [["in_type", "str"]], [["in_type", "list"]], [["in_type", "tuple"]], [["in_type", "dict"]], [["in_type", "set"]], [["in_type", "frozenset"]], [["in_type", "range"]], [["in_type", "bytes"]], [["in_type", "bytearray"]]], "exec_code": "def is_iterable(in_type):\n    l = dir(in_type)\n    if '__iter__' in l:\n        return True\n    else:\n        return False\n", "output": "The function is:\n\n```python\ndef is_iterable(in_type):\n    l = dir(in_type)\n    if '__iter__' in l:\n        return True\n    else:\n        return False\n\n```", "choosed_example_idx": [8, 7, 2, 1, 4, 6, 9], "prompt": "Write a function that generates the output from the input.\nInput: dict(in_type=bytes), Output: \"True\"\nInput: dict(in_type=range), Output: \"True\"\nInput: dict(in_type=list), Output: \"True\"\nInput: dict(in_type=str), Output: \"True\"\nInput: dict(in_type=dict), Output: \"True\"\nInput: dict(in_type=frozenset), Output: \"True\"\nInput: dict(in_type=bytearray), Output: \"True\"\n\nFunction: is_iterable\n\n", "id": "7256c475503cec201855c62b735be314baa87280_0"}
{"example_str": "examples = [\n    dict(text=[1, 2, 3, 4, 5]),\n    dict(text=[10, 20, 30]),\n    dict(text=[]),\n    dict(text=[1, 1, 1, 1]),\n    dict(text=[100, 200, 300, 400, 500]),\n    dict(text=[5, 4, 3, 2, 1]),\n    dict(text=[1, 2, 3, 'a', 5]),  # This will raise a TypeError\n    dict(text=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),\n    dict(text=[1]),\n    dict(text=[1, 2, 3, 4, 5, 6, 7, 8, 9]),\n    dict(text=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]),\n]\nexamples += [\n    dict(text=[1, 2, 3, 4]),  # Basic case with sequential integers\n    dict(text=[10, 20, 30, 40]),  # Case with larger integers\n    dict(text=[]),  # Empty list case\n    dict(text=[999]),  # Case with an integer not in `reverse_word_index`\n    dict(text=[1, 1, 1, 1]),  # Case with repeated integers\n    dict(text=[5, 10, 15, 20]),  # Case with spaced integers\n    dict(text=[-1, -2, -3]),  # Case with negative integers (likely not in `reverse_word_index`)\n    dict(text=[100, 200, 300, 400]),  # Case with very large integers\n    dict(text=[2, 4, 6, 8]),  # Case with even integers\n    dict(text=[3, 6, 9, 12])  # Case with multiples of three\n]", "code": "def decode_review(text):\n    return ' '.join([reverse_word_index.get(i, '?') for i in text])\n", "func_name": "decode_review", "exec_status": true, "example_inputs": ["\"{'text': [1, 2, 3, 4, 5]}\"", "\"{'text': [10, 20, 30]}\"", "\"{'text': []}\"", "\"{'text': [1, 1, 1, 1]}\"", "\"{'text': [100, 200, 300, 400, 500]}\"", "\"{'text': [5, 4, 3, 2, 1]}\"", "\"{'text': [1, 2, 3, 'a', 5]}\"", "\"{'text': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}\"", "\"{'text': [1]}\"", "\"{'text': [1, 2, 3, 4, 5, 6, 7, 8, 9]}\"", "\"{'text': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]}\""], "example_outputs": [{"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'reverse_word_index' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'reverse_word_index' is not defined\""}, {"return": "\"''\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'reverse_word_index' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'reverse_word_index' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'reverse_word_index' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'reverse_word_index' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'reverse_word_index' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'reverse_word_index' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'reverse_word_index' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'reverse_word_index' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'reverse_word_index' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'reverse_word_index' is not defined\""}, {"return": "\"''\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'reverse_word_index' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'reverse_word_index' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'reverse_word_index' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'reverse_word_index' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'reverse_word_index' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'reverse_word_index' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'reverse_word_index' is not defined\""}], "parsed_inputs": [[["text", "[1, 2, 3, 4, 5]"]], [["text", "[10, 20, 30]"]], [["text", "[]"]], [["text", "[1, 1, 1, 1]"]], [["text", "[100, 200, 300, 400, 500]"]], [["text", "[5, 4, 3, 2, 1]"]], [["text", "[1, 2, 3, 'a', 5]"]], [["text", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"]], [["text", "[1]"]], [["text", "[1, 2, 3, 4, 5, 6, 7, 8, 9]"]], [["text", "[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]"]]], "exec_code": "def decode_review(text):\n    return ' '.join([reverse_word_index.get(i, '?') for i in text])\n", "output": "The function is:\n\n```python\ndef decode_review(text):\n    return ' '.join([reverse_word_index.get(i, '?') for i in text])\n\n```", "choosed_example_idx": [3, 10, 6, 9, 7, 5], "prompt": "Input: dict(text=[1, 1, 1, 1]), Output: \"<class 'NameError'>: name 'reverse_word_index' is not defined\"\nInput: dict(text=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]), Output: \"<class 'NameError'>: name 'reverse_word_index' is not defined\"\nInput: dict(text=[1, 2, 3, 'a', 5]), Output: \"<class 'NameError'>: name 'reverse_word_index' is not defined\"\nInput: dict(text=[1, 2, 3, 4, 5, 6, 7, 8, 9]), Output: \"<class 'NameError'>: name 'reverse_word_index' is not defined\"\nInput: dict(text=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), Output: \"<class 'NameError'>: name 'reverse_word_index' is not defined\"\nInput: dict(text=[5, 4, 3, 2, 1]), Output: \"<class 'NameError'>: name 'reverse_word_index' is not defined\"\n\nFunction: decode_review\nWrite a function that generates the output from the input.\n\n", "id": "3b73cd7a76cb375efd5f29cde7b9931d790f6427_0"}
{"example_str": "examples = [\n    dict(n=16),\n    dict(n=25),\n    dict(n=32),\n    dict(n=1),\n    dict(n=0),\n    dict(n=36),\n    dict(n=49),\n    dict(n=64),\n    dict(n=81),\n    dict(n=100),\n]\nexamples += [\n    dict(n=1),     # 1 is a perfect square (1*1)\n    dict(n=4),     # 4 is a perfect square (2*2)\n    dict(n=9),     # 9 is a perfect square (3*3)\n    dict(n=16),    # 16 is a perfect square (4*4)\n    dict(n=25),    # 25 is a perfect square (5*5)\n    dict(n=2),     # 2 is not a perfect square\n    dict(n=3),     # 3 is not a perfect square\n    dict(n=0),     # 0 is a perfect square (0*0)\n    dict(n=15),    # 15 is not a perfect square\n    dict(n=100)    # 100 is a perfect square (10*10)\n]\nexamples += [\n    dict(n=1),    # 1 is a perfect square (1*1)\n    dict(n=2),    # 2 is not a perfect square\n    dict(n=4),    # 4 is a perfect square (2*2)\n    dict(n=9),    # 9 is a perfect square (3*3)\n    dict(n=16),   # 16 is a perfect square (4*4)\n    dict(n=25),   # 25 is a perfect square (5*5)\n    dict(n=36),   # 36 is a perfect square (6*6)\n    dict(n=49),   # 49 is a perfect square (7*7)\n    dict(n=64),   # 64 is a perfect square (8*8)\n    dict(n=100)   # 100 is a perfect square (10*10)\n]", "code": "def isPower2(n):\n    \"\"\"\n\t二分查找法\n\tmid = 1和n的中位数，将1和n平分\n\t如果mid的平方大于n，则在前半段继续查找；\n\t如果mid的平方小于n，则在后半段继续查找。\n\t\"\"\"\n    low = 1\n    high = n\n    while low < high:\n        mid = int((low + high) / 2)\n        print(mid)\n        power = mid * mid\n        if power > n:\n            high = mid - 1\n        elif power < n:\n            low = mid + 1\n        else:\n            return True\n    return False\n", "func_name": "isPower2", "exec_status": true, "example_inputs": ["\"{'n': 16}\"", "\"{'n': 25}\"", "\"{'n': 32}\"", "\"{'n': 1}\"", "\"{'n': 0}\"", "\"{'n': 36}\"", "\"{'n': 49}\"", "\"{'n': 64}\"", "\"{'n': 81}\"", "\"{'n': 100}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}], "parsed_inputs": [[["n", "16"]], [["n", "25"]], [["n", "32"]], [["n", "1"]], [["n", "0"]], [["n", "36"]], [["n", "49"]], [["n", "64"]], [["n", "81"]], [["n", "100"]]], "exec_code": "def isPower2(n):\n    \"\"\"\n\t二分查找法\n\tmid = 1和n的中位数，将1和n平分\n\t如果mid的平方大于n，则在前半段继续查找；\n\t如果mid的平方小于n，则在后半段继续查找。\n\t\"\"\"\n    low = 1\n    high = n\n    while low < high:\n        mid = int((low + high) / 2)\n        print(mid)\n        power = mid * mid\n        if power > n:\n            high = mid - 1\n        elif power < n:\n            low = mid + 1\n        else:\n            return True\n    return False\n", "output": "The function is:\n\n```python\ndef isPower2(n):\n    \"\"\"\n\t二分查找法\n\tmid = 1和n的中位数，将1和n平分\n\t如果mid的平方大于n，则在前半段继续查找；\n\t如果mid的平方小于n，则在后半段继续查找。\n\t\"\"\"\n    low = 1\n    high = n\n    while low < high:\n        mid = int((low + high) / 2)\n        print(mid)\n        power = mid * mid\n        if power > n:\n            high = mid - 1\n        elif power < n:\n            low = mid + 1\n        else:\n            return True\n    return False\n\n```", "choosed_example_idx": [3, 5, 2, 1, 7], "prompt": "Function: isPower2\nWrite a function that generates the output from the input.\nInput: dict(n=1), Output: \"False\"\nInput: dict(n=36), Output: \"True\"\nInput: dict(n=32), Output: \"False\"\nInput: dict(n=25), Output: \"False\"\nInput: dict(n=64), Output: \"True\"\n\n", "id": "83c9ee409d14b4a7f192a6ed00a99aa1d58c8d6d_0"}
{"example_str": "examples = [\n    dict(w=50.0),\n    dict(w=59.9),\n    dict(w=60.0),\n    dict(w=63.9),\n    dict(w=64.0),\n    dict(w=70.0),\n    dict(w=80.0),\n    dict(w=90.0),\n    dict(w=120.0),\n    dict(w=150.0),\n]\nexamples += [\n    dict(w=59.9),\n    dict(w=60),\n    dict(w=63.9),\n    dict(w=64),\n    dict(w=70),\n    dict(w=59),\n    dict(w=61),\n    dict(w=62.5),\n    dict(w=65),\n    dict(w=100)\n]\nexamples += [\n    dict(w=59.5),\n    dict(w=60.0),\n    dict(w=63.5),\n    dict(w=64.0),\n    dict(w=70.0),\n    dict(w=57.8),\n    dict(w=62.3),\n    dict(w=65.2),\n    dict(w=58.9),\n    dict(w=61.1)\n]", "code": "def choose_cat(w: float) ->str:\n    if w < 60:\n        return 'легкий'\n    elif 60 <= w < 64:\n        return 'первый полусредний'\n    else:\n        return 'полусредний'\n", "func_name": "choose_cat", "exec_status": true, "example_inputs": ["\"{'w': 50.0}\"", "\"{'w': 59.9}\"", "\"{'w': 60.0}\"", "\"{'w': 63.9}\"", "\"{'w': 64.0}\"", "\"{'w': 70.0}\"", "\"{'w': 80.0}\"", "\"{'w': 90.0}\"", "\"{'w': 120.0}\"", "\"{'w': 150.0}\""], "example_outputs": [{"return": "\"'\\u043b\\u0435\\u0433\\u043a\\u0438\\u0439'\""}, {"return": "\"'\\u043b\\u0435\\u0433\\u043a\\u0438\\u0439'\""}, {"return": "\"'\\u043f\\u0435\\u0440\\u0432\\u044b\\u0439 \\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\""}, {"return": "\"'\\u043f\\u0435\\u0440\\u0432\\u044b\\u0439 \\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\""}, {"return": "\"'\\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\""}, {"return": "\"'\\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\""}, {"return": "\"'\\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\""}, {"return": "\"'\\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\""}, {"return": "\"'\\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\""}, {"return": "\"'\\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\""}, {"return": "\"'\\u043b\\u0435\\u0433\\u043a\\u0438\\u0439'\""}, {"return": "\"'\\u043f\\u0435\\u0440\\u0432\\u044b\\u0439 \\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\""}, {"return": "\"'\\u043f\\u0435\\u0440\\u0432\\u044b\\u0439 \\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\""}, {"return": "\"'\\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\""}, {"return": "\"'\\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\""}, {"return": "\"'\\u043b\\u0435\\u0433\\u043a\\u0438\\u0439'\""}, {"return": "\"'\\u043f\\u0435\\u0440\\u0432\\u044b\\u0439 \\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\""}, {"return": "\"'\\u043f\\u0435\\u0440\\u0432\\u044b\\u0439 \\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\""}, {"return": "\"'\\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\""}, {"return": "\"'\\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\""}, {"return": "\"'\\u043b\\u0435\\u0433\\u043a\\u0438\\u0439'\""}, {"return": "\"'\\u043f\\u0435\\u0440\\u0432\\u044b\\u0439 \\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\""}, {"return": "\"'\\u043f\\u0435\\u0440\\u0432\\u044b\\u0439 \\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\""}, {"return": "\"'\\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\""}, {"return": "\"'\\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\""}, {"return": "\"'\\u043b\\u0435\\u0433\\u043a\\u0438\\u0439'\""}, {"return": "\"'\\u043f\\u0435\\u0440\\u0432\\u044b\\u0439 \\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\""}, {"return": "\"'\\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\""}, {"return": "\"'\\u043b\\u0435\\u0433\\u043a\\u0438\\u0439'\""}, {"return": "\"'\\u043f\\u0435\\u0440\\u0432\\u044b\\u0439 \\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\""}], "parsed_inputs": [[["w", "50.0"]], [["w", "59.9"]], [["w", "60.0"]], [["w", "63.9"]], [["w", "64.0"]], [["w", "70.0"]], [["w", "80.0"]], [["w", "90.0"]], [["w", "120.0"]], [["w", "150.0"]]], "exec_code": "def choose_cat(w: float) ->str:\n    if w < 60:\n        return 'легкий'\n    elif 60 <= w < 64:\n        return 'первый полусредний'\n    else:\n        return 'полусредний'\n", "output": "The function is:\n\n```python\ndef choose_cat(w: float) ->str:\n    if w < 60:\n        return 'легкий'\n    elif 60 <= w < 64:\n        return 'первый полусредний'\n    else:\n        return 'полусредний'\n\n```", "choosed_example_idx": [8, 0, 7, 9, 2, 4, 6, 3], "prompt": "Write a function that generates the output from the input.\n\n\nInput: dict(w=120.0), Output: \"'\\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\"\nInput: dict(w=50.0), Output: \"'\\u043b\\u0435\\u0433\\u043a\\u0438\\u0439'\"\nInput: dict(w=90.0), Output: \"'\\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\"\nInput: dict(w=150.0), Output: \"'\\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\"\nInput: dict(w=60.0), Output: \"'\\u043f\\u0435\\u0440\\u0432\\u044b\\u0439 \\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\"\nInput: dict(w=64.0), Output: \"'\\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\"\nInput: dict(w=80.0), Output: \"'\\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\"\nInput: dict(w=63.9), Output: \"'\\u043f\\u0435\\u0440\\u0432\\u044b\\u0439 \\u043f\\u043e\\u043b\\u0443\\u0441\\u0440\\u0435\\u0434\\u043d\\u0438\\u0439'\"\n\nFunction: choose_cat\n", "id": "01b29fe1a34ea653a5f3bd21404178513bf804b7_0"}
{"example_str": "import re\n\nexamples = [\n    dict(i1=1, i21=re.search('a', 'abc'), i22=re.search('b', 'abc'), i23=re.search('c', 'abc')),\n    dict(i1=2, i21=re.search('x', 'xyz'), i22=re.search('y', 'xyz'), i23=re.search('z', 'xyz')),\n    dict(i1=3, i21=re.search('1', '123'), i22=re.search('2', '123'), i23=re.search('3', '123')),\n    dict(i1=4, i21=re.search('a', 'aabbcc'), i22=re.search('b', 'aabbcc'), i23=re.search('c', 'aabbcc')),\n    dict(i1=5, i21=re.search('hello', 'hello world'), i22=re.search('world', 'hello world'), i23=re.search('!', 'hello world')),\n    dict(i1=6, i21=re.search('foo', 'foo bar baz'), i22=re.search('bar', 'foo bar baz'), i23=re.search('baz', 'foo bar baz')),\n    dict(i1=7, i21=re.search('abc', 'abcabcabc'), i22=re.search('bcd', 'abcabcabc'), i23=re.search('cde', 'abcabcabc')),\n    dict(i1=8, i21=re.search('xyz', 'xyzxyzxyz'), i22=re.search('yza', 'xyzxyzxyz'), i23=re.search('zab', 'xyzxyzxyz')),\n    dict(i1=9, i21=re.search('123', '123123123'), i22=re.search('234', '123123123'), i23=re.search('345', '123123123')),\n    dict(i1=10, i21=re.search('abc', 'abc'), i22=re.search('abc', 'abc'), i23=re.search('abc', 'abc')),\n]\nclass MockMatch:\n    def __init__(self, start_index):\n        self._start_index = start_index\n    \n    def start(self):\n        return self._start_index\n\nexamples += [\n    dict(i1=None, i21=MockMatch(5), i22=MockMatch(10), i23=MockMatch(15)),\n    dict(i1=None, i21=MockMatch(3), i22=MockMatch(6), i23=MockMatch(9)),\n    dict(i1=None, i21=MockMatch(8), i22=MockMatch(2), i23=MockMatch(14)),\n    dict(i1=None, i21=MockMatch(20), i22=MockMatch(10), i23=MockMatch(5)),\n    dict(i1=None, i21=MockMatch(1), i22=MockMatch(1), i23=MockMatch(1)),\n    dict(i1=None, i21=MockMatch(7), i22=MockMatch(13), i23=MockMatch(2)),\n    dict(i1=None, i21=MockMatch(4), i22=MockMatch(4), i23=MockMatch(4)),\n    dict(i1=None, i21=MockMatch(11), i22=MockMatch(7), i23=MockMatch(3)),\n    dict(i1=None, i21=MockMatch(9), i22=MockMatch(9), i23=MockMatch(9)),\n    dict(i1=None, i21=MockMatch(0), i22=MockMatch(5), i23=MockMatch(10))\n]\nimport re\n\n# Creating some match objects for demonstration\nmatch1 = re.search(r'a', 'a')\nmatch2 = re.search(r'b', 'b')\nmatch3 = re.search(r'c', 'c')\nmatch4 = re.search(r'd', 'd')\nmatch5 = re.search(r'e', 'e')\nmatch6 = re.search(r'f', 'f')\nmatch7 = re.search(r'g', 'g')\nmatch8 = re.search(r'h', 'h')\nmatch9 = re.search(r'i', 'i')\nmatch10 = re.search(r'j', 'j')\n\nexamples += [\n    dict(i1=None, i21=match1, i22=match2, i23=match3),\n    dict(i1=None, i21=match2, i22=match3, i23=match4),\n    dict(i1=None, i21=match3, i22=match4, i23=match5),\n    dict(i1=None, i21=match4, i22=match5, i23=match6),\n    dict(i1=None, i21=match5, i22=match6, i23=match7),\n    dict(i1=None, i21=match6, i22=match7, i23=match8),\n    dict(i1=None, i21=match7, i22=match8, i23=match9),\n    dict(i1=None, i21=match8, i22=match9, i23=match10),\n    dict(i1=None, i21=match9, i22=match1, i23=match2),\n    dict(i1=None, i21=match10, i22=match2, i23=match3),\n]", "code": "def find_Endindex(i1, i21, i22, i23):\n    index2 = [i21.start(), i22.start(), i23.start()]\n    count = 0\n    mid = min(index2)\n    for i in index2:\n        if max(index2) < i < max(index2):\n            mid = i\n        if i > 1:\n            count = count + 1\n    if count == 3:\n        return min(index2)\n    elif count == 1:\n        return max(index2)\n    else:\n        return mid\n", "func_name": "find_Endindex", "exec_status": true, "example_inputs": ["\"{'i1': 1, 'i21': <re.Match object; span=(0, 1), match='a'>, 'i22': <re.Match object; span=(1, 2), match='b'>, 'i23': <re.Match object; span=(2, 3), match='c'>}\"", "\"{'i1': 2, 'i21': <re.Match object; span=(0, 1), match='x'>, 'i22': <re.Match object; span=(1, 2), match='y'>, 'i23': <re.Match object; span=(2, 3), match='z'>}\"", "\"{'i1': 3, 'i21': <re.Match object; span=(0, 1), match='1'>, 'i22': <re.Match object; span=(1, 2), match='2'>, 'i23': <re.Match object; span=(2, 3), match='3'>}\"", "\"{'i1': 4, 'i21': <re.Match object; span=(0, 1), match='a'>, 'i22': <re.Match object; span=(2, 3), match='b'>, 'i23': <re.Match object; span=(4, 5), match='c'>}\"", "\"{'i1': 5, 'i21': <re.Match object; span=(0, 5), match='hello'>, 'i22': <re.Match object; span=(6, 11), match='world'>, 'i23': None}\"", "\"{'i1': 6, 'i21': <re.Match object; span=(0, 3), match='foo'>, 'i22': <re.Match object; span=(4, 7), match='bar'>, 'i23': <re.Match object; span=(8, 11), match='baz'>}\"", "\"{'i1': 7, 'i21': <re.Match object; span=(0, 3), match='abc'>, 'i22': None, 'i23': None}\"", "\"{'i1': 8, 'i21': <re.Match object; span=(0, 3), match='xyz'>, 'i22': None, 'i23': None}\"", "\"{'i1': 9, 'i21': <re.Match object; span=(0, 3), match='123'>, 'i22': None, 'i23': None}\"", "\"{'i1': 10, 'i21': <re.Match object; span=(0, 3), match='abc'>, 'i22': <re.Match object; span=(0, 3), match='abc'>, 'i23': <re.Match object; span=(0, 3), match='abc'>}\""], "example_outputs": [{"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'NoneType' object has no attribute 'start'\""}, {"return": "\"0\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'NoneType' object has no attribute 'start'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'NoneType' object has no attribute 'start'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'NoneType' object has no attribute 'start'\""}, {"return": "\"0\""}, {"return": "\"5\""}, {"return": "\"3\""}, {"return": "\"2\""}, {"return": "\"5\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"4\""}, {"return": "\"3\""}, {"return": "\"9\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}], "parsed_inputs": [[["i1", "1"], ["i21", "re.search('a', 'abc')"], ["i22", "re.search('b', 'abc')"], ["i23", "re.search('c', 'abc')"]], [["i1", "2"], ["i21", "re.search('x', 'xyz')"], ["i22", "re.search('y', 'xyz')"], ["i23", "re.search('z', 'xyz')"]], [["i1", "3"], ["i21", "re.search('1', '123')"], ["i22", "re.search('2', '123')"], ["i23", "re.search('3', '123')"]], [["i1", "4"], ["i21", "re.search('a', 'aabbcc')"], ["i22", "re.search('b', 'aabbcc')"], ["i23", "re.search('c', 'aabbcc')"]], [["i1", "5"], ["i21", "re.search('hello', 'hello world')"], ["i22", "re.search('world', 'hello world')"], ["i23", "re.search('!', 'hello world')"]], [["i1", "6"], ["i21", "re.search('foo', 'foo bar baz')"], ["i22", "re.search('bar', 'foo bar baz')"], ["i23", "re.search('baz', 'foo bar baz')"]], [["i1", "7"], ["i21", "re.search('abc', 'abcabcabc')"], ["i22", "re.search('bcd', 'abcabcabc')"], ["i23", "re.search('cde', 'abcabcabc')"]], [["i1", "8"], ["i21", "re.search('xyz', 'xyzxyzxyz')"], ["i22", "re.search('yza', 'xyzxyzxyz')"], ["i23", "re.search('zab', 'xyzxyzxyz')"]], [["i1", "9"], ["i21", "re.search('123', '123123123')"], ["i22", "re.search('234', '123123123')"], ["i23", "re.search('345', '123123123')"]], [["i1", "10"], ["i21", "re.search('abc', 'abc')"], ["i22", "re.search('abc', 'abc')"], ["i23", "re.search('abc', 'abc')"]]], "exec_code": "def find_Endindex(i1, i21, i22, i23):\n    index2 = [i21.start(), i22.start(), i23.start()]\n    count = 0\n    mid = min(index2)\n    for i in index2:\n        if max(index2) < i < max(index2):\n            mid = i\n        if i > 1:\n            count = count + 1\n    if count == 3:\n        return min(index2)\n    elif count == 1:\n        return max(index2)\n    else:\n        return mid\n", "output": "The function is:\n\n```python\ndef find_Endindex(i1, i21, i22, i23):\n    index2 = [i21.start(), i22.start(), i23.start()]\n    count = 0\n    mid = min(index2)\n    for i in index2:\n        if max(index2) < i < max(index2):\n            mid = i\n        if i > 1:\n            count = count + 1\n    if count == 3:\n        return min(index2)\n    elif count == 1:\n        return max(index2)\n    else:\n        return mid\n\n```", "choosed_example_idx": [4, 0, 8, 3], "prompt": "Function: find_Endindex\nWrite a function that generates the output from the input.\nInput: dict(i1=5, i21=re.search('hello', 'hello world'), i22=re.search('world', 'hello world'), i23=re.search('!', 'hello world')), Output: \"<class 'AttributeError'>: 'NoneType' object has no attribute 'start'\"\nInput: dict(i1=1, i21=re.search('a', 'abc'), i22=re.search('b', 'abc'), i23=re.search('c', 'abc')), Output: \"2\"\nInput: dict(i1=9, i21=re.search('123', '123123123'), i22=re.search('234', '123123123'), i23=re.search('345', '123123123')), Output: \"<class 'AttributeError'>: 'NoneType' object has no attribute 'start'\"\nInput: dict(i1=4, i21=re.search('a', 'aabbcc'), i22=re.search('b', 'aabbcc'), i23=re.search('c', 'aabbcc')), Output: \"0\"\n\n", "id": "25e39dd302548e55e1df4e7c56d4a9224d147473_0"}
{"example_str": "examples = [\n    dict(data=[1, 2, 3, 4, 5], cutoff=3),\n    dict(data=[10, 20, 30, 40, 50], cutoff=35),\n    dict(data=[-1, -2, -3, -4, -5], cutoff=-3),\n    dict(data=[1.1, 2.2, 3.3, 4.4, 5.5], cutoff=3.3),\n    dict(data=[100, 200, 300, 400, 500], cutoff=350),\n    dict(data=[5, 4, 3, 2, 1], cutoff=3),\n    dict(data=[1, 1, 1, 1, 1], cutoff=1),\n    dict(data=[10, 20, 30, 40, 50], cutoff=0),\n    dict(data=[-10, -20, -30, -40, -50], cutoff=-30),\n    dict(data=[1, 2, 3, 4, 5], cutoff=6),\n]\nexamples += [\n    dict(data=[1, 2, 3, 4, 5], cutoff=3),\n    dict(data=[10, 20, 30, 40, 50], cutoff=25),\n    dict(data=[-5, -10, 0, 5, 10], cutoff=0),\n    dict(data=[0.1, 0.2, 0.3, 0.4, 0.5], cutoff=0.35),\n    dict(data=[100, 200, 300, 400, 500], cutoff=350),\n    dict(data=[-1, -2, -3, -4, -5], cutoff=-3),\n    dict(data=[2.5, 3.5, 4.5, 5.5, 6.5], cutoff=4),\n    dict(data=[1000, 2000, 3000, 4000, 5000], cutoff=4500),\n    dict(data=[1, 1, 1, 1, 1], cutoff=1),\n    dict(data=[0, 0, 0, 0, 0], cutoff=-1)\n]\nexamples += [\n    dict(data=[1, 2, 3, 4, 5], cutoff=3),\n    dict(data=[10, 20, 30, 40, 50], cutoff=25),\n    dict(data=[-1, -2, -3, -4, -5], cutoff=-3),\n    dict(data=[0.5, 1.5, 2.5, 3.5, 4.5], cutoff=2.5),\n    dict(data=[100, 200, 300, 400, 500], cutoff=350),\n    dict(data=[1, 1, 1, 1, 1], cutoff=0),\n    dict(data=[5, 10, 15, 20, 25], cutoff=10),\n    dict(data=[-10, 0, 10, 20, 30], cutoff=5),\n    dict(data=[2, 4, 6, 8, 10], cutoff=7),\n    dict(data=[3.1, 3.2, 3.3, 3.4, 3.5], cutoff=3.25)\n]", "code": "def show_cutoff(data, cutoff):\n    cut_index = []\n    out_num = 0\n    for ind, i in enumerate(data):\n        if i > cutoff:\n            out_num += 1\n            cut_index.append(ind)\n    return cut_index, out_num\n", "func_name": "show_cutoff", "exec_status": true, "example_inputs": ["\"{'data': [1, 2, 3, 4, 5], 'cutoff': 3}\"", "\"{'data': [10, 20, 30, 40, 50], 'cutoff': 35}\"", "\"{'data': [-1, -2, -3, -4, -5], 'cutoff': -3}\"", "\"{'data': [1.1, 2.2, 3.3, 4.4, 5.5], 'cutoff': 3.3}\"", "\"{'data': [100, 200, 300, 400, 500], 'cutoff': 350}\"", "\"{'data': [5, 4, 3, 2, 1], 'cutoff': 3}\"", "\"{'data': [1, 1, 1, 1, 1], 'cutoff': 1}\"", "\"{'data': [10, 20, 30, 40, 50], 'cutoff': 0}\"", "\"{'data': [-10, -20, -30, -40, -50], 'cutoff': -30}\"", "\"{'data': [1, 2, 3, 4, 5], 'cutoff': 6}\""], "example_outputs": [{"return": "\"([3, 4], 2)\""}, {"return": "\"([3, 4], 2)\""}, {"return": "\"([0, 1], 2)\""}, {"return": "\"([3, 4], 2)\""}, {"return": "\"([3, 4], 2)\""}, {"return": "\"([0, 1], 2)\""}, {"return": "\"([], 0)\""}, {"return": "\"([0, 1, 2, 3, 4], 5)\""}, {"return": "\"([0, 1], 2)\""}, {"return": "\"([], 0)\""}, {"return": "\"([3, 4], 2)\""}, {"return": "\"([2, 3, 4], 3)\""}, {"return": "\"([3, 4], 2)\""}, {"return": "\"([3, 4], 2)\""}, {"return": "\"([3, 4], 2)\""}, {"return": "\"([0, 1], 2)\""}, {"return": "\"([2, 3, 4], 3)\""}, {"return": "\"([4], 1)\""}, {"return": "\"([], 0)\""}, {"return": "\"([0, 1, 2, 3, 4], 5)\""}, {"return": "\"([3, 4], 2)\""}, {"return": "\"([2, 3, 4], 3)\""}, {"return": "\"([0, 1], 2)\""}, {"return": "\"([3, 4], 2)\""}, {"return": "\"([3, 4], 2)\""}, {"return": "\"([0, 1, 2, 3, 4], 5)\""}, {"return": "\"([2, 3, 4], 3)\""}, {"return": "\"([2, 3, 4], 3)\""}, {"return": "\"([3, 4], 2)\""}, {"return": "\"([2, 3, 4], 3)\""}], "parsed_inputs": [[["data", "[1, 2, 3, 4, 5]"], ["cutoff", "3"]], [["data", "[10, 20, 30, 40, 50]"], ["cutoff", "35"]], [["data", "[-1, -2, -3, -4, -5]"], ["cutoff", "-3"]], [["data", "[1.1, 2.2, 3.3, 4.4, 5.5]"], ["cutoff", "3.3"]], [["data", "[100, 200, 300, 400, 500]"], ["cutoff", "350"]], [["data", "[5, 4, 3, 2, 1]"], ["cutoff", "3"]], [["data", "[1, 1, 1, 1, 1]"], ["cutoff", "1"]], [["data", "[10, 20, 30, 40, 50]"], ["cutoff", "0"]], [["data", "[-10, -20, -30, -40, -50]"], ["cutoff", "-30"]], [["data", "[1, 2, 3, 4, 5]"], ["cutoff", "6"]]], "exec_code": "def show_cutoff(data, cutoff):\n    cut_index = []\n    out_num = 0\n    for ind, i in enumerate(data):\n        if i > cutoff:\n            out_num += 1\n            cut_index.append(ind)\n    return cut_index, out_num\n", "output": "The function is:\n\n```python\ndef show_cutoff(data, cutoff):\n    cut_index = []\n    out_num = 0\n    for ind, i in enumerate(data):\n        if i > cutoff:\n            out_num += 1\n            cut_index.append(ind)\n    return cut_index, out_num\n\n```", "choosed_example_idx": [8, 9, 5, 4], "prompt": "Function: show_cutoff\n\nInput: dict(data=[-10, -20, -30, -40, -50], cutoff=-30), Output: \"([0, 1], 2)\"\nInput: dict(data=[1, 2, 3, 4, 5], cutoff=6), Output: \"([], 0)\"\nInput: dict(data=[5, 4, 3, 2, 1], cutoff=3), Output: \"([0, 1], 2)\"\nInput: dict(data=[100, 200, 300, 400, 500], cutoff=350), Output: \"([3, 4], 2)\"\n\n\nWrite a function that generates the output from the input.\n", "id": "3762affc5ea158cbbdf47bb78f3890288ef62081_0"}
{"example_str": "examples = [\n    dict(xmin=0, xmax=1, ymin=0, ymax=1, zmin=0, zmax=1),\n    dict(xmin=-1, xmax=1, ymin=-1, ymax=1, zmin=-1, zmax=1),\n    dict(xmin=10, xmax=20, ymin=10, ymax=20, zmin=10, zmax=20),\n    dict(xmin=0, xmax=10, ymin=0, ymax=10, zmin=0, zmax=10),\n    dict(xmin=-5, xmax=5, ymin=-5, ymax=5, zmin=-5, zmax=5),\n    dict(xmin=1, xmax=2, ymin=1, ymax=2, zmin=1, zmax=2),\n    dict(xmin=-10, xmax=0, ymin=-10, ymax=0, zmin=-10, zmax=0),\n    dict(xmin=5, xmax=10, ymin=5, ymax=10, zmin=5, zmax=10),\n    dict(xmin=-2, xmax=2, ymin=-2, ymax=2, zmin=-2, zmax=2),\n    dict(xmin=0, xmax=5, ymin=0, ymax=5, zmin=0, zmax=5),\n]\nexamples += [\n    dict(xmin=0, xmax=1, ymin=0, ymax=1, zmin=0, zmax=1),\n    dict(xmin=-1, xmax=1, ymin=-1, ymax=1, zmin=-1, zmax=1),\n    dict(xmin=0, xmax=10, ymin=0, ymax=10, zmin=0, zmax=10),\n    dict(xmin=-5, xmax=5, ymin=-5, ymax=5, zmin=-5, zmax=5),\n    dict(xmin=1, xmax=2, ymin=1, ymax=2, zmin=1, zmax=2),\n    dict(xmin=-10, xmax=0, ymin=-10, ymax=0, zmin=-10, zmax=0),\n    dict(xmin=0.5, xmax=1.5, ymin=0.5, ymax=1.5, zmin=0.5, zmax=1.5),\n    dict(xmin=-2, xmax=3, ymin=-2, ymax=3, zmin=-2, zmax=3),\n    dict(xmin=100, xmax=110, ymin=100, ymax=110, zmin=100, zmax=110),\n    dict(xmin=-50, xmax=50, ymin=-50, ymax=50, zmin=-50, zmax=50)\n]\nexamples += [\n    dict(xmin=0, xmax=1, ymin=0, ymax=1, zmin=0, zmax=1),\n    dict(xmin=-1, xmax=1, ymin=-1, ymax=1, zmin=-1, zmax=1),\n    dict(xmin=10, xmax=20, ymin=10, ymax=20, zmin=10, zmax=20),\n    dict(xmin=-5, xmax=5, ymin=-5, ymax=5, zmin=-5, zmax=5),\n    dict(xmin=0, xmax=2, ymin=0, ymax=2, zmin=0, zmax=2),\n    dict(xmin=-10, xmax=0, ymin=-10, ymax=0, zmin=-10, zmax=0),\n    dict(xmin=1, xmax=3, ymin=1, ymax=3, zmin=1, zmax=3),\n    dict(xmin=-2, xmax=2, ymin=-2, ymax=2, zmin=-2, zmax=2),\n    dict(xmin=0.5, xmax=1.5, ymin=0.5, ymax=1.5, zmin=0.5, zmax=1.5),\n    dict(xmin=-3, xmax=1, ymin=-3, ymax=1, zmin=-3, zmax=1)\n]", "code": "def create_cube(xmin, xmax, ymin, ymax, zmin, zmax):\n    od = {'vertices': ((xmin, ymin, zmin), (xmax, ymin, zmin), (xmax, ymax,\n        zmin), (xmin, ymax, zmin), (xmin, ymin, zmax), (xmax, ymin, zmax),\n        (xmax, ymax, zmax), (xmin, ymax, zmax))}\n    return od\n", "func_name": "create_cube", "exec_status": true, "example_inputs": ["\"{'xmin': 0, 'xmax': 1, 'ymin': 0, 'ymax': 1, 'zmin': 0, 'zmax': 1}\"", "\"{'xmin': -1, 'xmax': 1, 'ymin': -1, 'ymax': 1, 'zmin': -1, 'zmax': 1}\"", "\"{'xmin': 10, 'xmax': 20, 'ymin': 10, 'ymax': 20, 'zmin': 10, 'zmax': 20}\"", "\"{'xmin': 0, 'xmax': 10, 'ymin': 0, 'ymax': 10, 'zmin': 0, 'zmax': 10}\"", "\"{'xmin': -5, 'xmax': 5, 'ymin': -5, 'ymax': 5, 'zmin': -5, 'zmax': 5}\"", "\"{'xmin': 1, 'xmax': 2, 'ymin': 1, 'ymax': 2, 'zmin': 1, 'zmax': 2}\"", "\"{'xmin': -10, 'xmax': 0, 'ymin': -10, 'ymax': 0, 'zmin': -10, 'zmax': 0}\"", "\"{'xmin': 5, 'xmax': 10, 'ymin': 5, 'ymax': 10, 'zmin': 5, 'zmax': 10}\"", "\"{'xmin': -2, 'xmax': 2, 'ymin': -2, 'ymax': 2, 'zmin': -2, 'zmax': 2}\"", "\"{'xmin': 0, 'xmax': 5, 'ymin': 0, 'ymax': 5, 'zmin': 0, 'zmax': 5}\""], "example_outputs": [{"return": "\"{'vertices': ((0, 0, 0), (1, 0, 0), (1, 1, 0), (0, 1, 0), (0, 0, 1), (1, 0, 1), (1, 1, 1), (0, 1, 1))}\""}, {"return": "\"{'vertices': ((-1, -1, -1), (1, -1, -1), (1, 1, -1), (-1, 1, -1), (-1, -1, 1), (1, -1, 1), (1, 1, 1), (-1, 1, 1))}\""}, {"return": "\"{'vertices': ((10, 10, 10), (20, 10, 10), (20, 20, 10), (10, 20, 10), (10, 10, 20), (20, 10, 20), (20, 20, 20), (10, 20, 20))}\""}, {"return": "\"{'vertices': ((0, 0, 0), (10, 0, 0), (10, 10, 0), (0, 10, 0), (0, 0, 10), (10, 0, 10), (10, 10, 10), (0, 10, 10))}\""}, {"return": "\"{'vertices': ((-5, -5, -5), (5, -5, -5), (5, 5, -5), (-5, 5, -5), (-5, -5, 5), (5, -5, 5), (5, 5, 5), (-5, 5, 5))}\""}, {"return": "\"{'vertices': ((1, 1, 1), (2, 1, 1), (2, 2, 1), (1, 2, 1), (1, 1, 2), (2, 1, 2), (2, 2, 2), (1, 2, 2))}\""}, {"return": "\"{'vertices': ((-10, -10, -10), (0, -10, -10), (0, 0, -10), (-10, 0, -10), (-10, -10, 0), (0, -10, 0), (0, 0, 0), (-10, 0, 0))}\""}, {"return": "\"{'vertices': ((5, 5, 5), (10, 5, 5), (10, 10, 5), (5, 10, 5), (5, 5, 10), (10, 5, 10), (10, 10, 10), (5, 10, 10))}\""}, {"return": "\"{'vertices': ((-2, -2, -2), (2, -2, -2), (2, 2, -2), (-2, 2, -2), (-2, -2, 2), (2, -2, 2), (2, 2, 2), (-2, 2, 2))}\""}, {"return": "\"{'vertices': ((0, 0, 0), (5, 0, 0), (5, 5, 0), (0, 5, 0), (0, 0, 5), (5, 0, 5), (5, 5, 5), (0, 5, 5))}\""}, {"return": "\"{'vertices': ((0, 0, 0), (1, 0, 0), (1, 1, 0), (0, 1, 0), (0, 0, 1), (1, 0, 1), (1, 1, 1), (0, 1, 1))}\""}, {"return": "\"{'vertices': ((-1, -1, -1), (1, -1, -1), (1, 1, -1), (-1, 1, -1), (-1, -1, 1), (1, -1, 1), (1, 1, 1), (-1, 1, 1))}\""}, {"return": "\"{'vertices': ((0, 0, 0), (10, 0, 0), (10, 10, 0), (0, 10, 0), (0, 0, 10), (10, 0, 10), (10, 10, 10), (0, 10, 10))}\""}, {"return": "\"{'vertices': ((-5, -5, -5), (5, -5, -5), (5, 5, -5), (-5, 5, -5), (-5, -5, 5), (5, -5, 5), (5, 5, 5), (-5, 5, 5))}\""}, {"return": "\"{'vertices': ((1, 1, 1), (2, 1, 1), (2, 2, 1), (1, 2, 1), (1, 1, 2), (2, 1, 2), (2, 2, 2), (1, 2, 2))}\""}, {"return": "\"{'vertices': ((-10, -10, -10), (0, -10, -10), (0, 0, -10), (-10, 0, -10), (-10, -10, 0), (0, -10, 0), (0, 0, 0), (-10, 0, 0))}\""}, {"return": "\"{'vertices': ((0.5, 0.5, 0.5), (1.5, 0.5, 0.5), (1.5, 1.5, 0.5), (0.5, 1.5, 0.5), (0.5, 0.5, 1.5), (1.5, 0.5, 1.5), (1.5, 1.5, 1.5), (0.5, 1.5, 1.5))}\""}, {"return": "\"{'vertices': ((-2, -2, -2), (3, -2, -2), (3, 3, -2), (-2, 3, -2), (-2, -2, 3), (3, -2, 3), (3, 3, 3), (-2, 3, 3))}\""}, {"return": "\"{'vertices': ((100, 100, 100), (110, 100, 100), (110, 110, 100), (100, 110, 100), (100, 100, 110), (110, 100, 110), (110, 110, 110), (100, 110, 110))}\""}, {"return": "\"{'vertices': ((-50, -50, -50), (50, -50, -50), (50, 50, -50), (-50, 50, -50), (-50, -50, 50), (50, -50, 50), (50, 50, 50), (-50, 50, 50))}\""}, {"return": "\"{'vertices': ((0, 0, 0), (1, 0, 0), (1, 1, 0), (0, 1, 0), (0, 0, 1), (1, 0, 1), (1, 1, 1), (0, 1, 1))}\""}, {"return": "\"{'vertices': ((-1, -1, -1), (1, -1, -1), (1, 1, -1), (-1, 1, -1), (-1, -1, 1), (1, -1, 1), (1, 1, 1), (-1, 1, 1))}\""}, {"return": "\"{'vertices': ((10, 10, 10), (20, 10, 10), (20, 20, 10), (10, 20, 10), (10, 10, 20), (20, 10, 20), (20, 20, 20), (10, 20, 20))}\""}, {"return": "\"{'vertices': ((-5, -5, -5), (5, -5, -5), (5, 5, -5), (-5, 5, -5), (-5, -5, 5), (5, -5, 5), (5, 5, 5), (-5, 5, 5))}\""}, {"return": "\"{'vertices': ((0, 0, 0), (2, 0, 0), (2, 2, 0), (0, 2, 0), (0, 0, 2), (2, 0, 2), (2, 2, 2), (0, 2, 2))}\""}, {"return": "\"{'vertices': ((-10, -10, -10), (0, -10, -10), (0, 0, -10), (-10, 0, -10), (-10, -10, 0), (0, -10, 0), (0, 0, 0), (-10, 0, 0))}\""}, {"return": "\"{'vertices': ((1, 1, 1), (3, 1, 1), (3, 3, 1), (1, 3, 1), (1, 1, 3), (3, 1, 3), (3, 3, 3), (1, 3, 3))}\""}, {"return": "\"{'vertices': ((-2, -2, -2), (2, -2, -2), (2, 2, -2), (-2, 2, -2), (-2, -2, 2), (2, -2, 2), (2, 2, 2), (-2, 2, 2))}\""}, {"return": "\"{'vertices': ((0.5, 0.5, 0.5), (1.5, 0.5, 0.5), (1.5, 1.5, 0.5), (0.5, 1.5, 0.5), (0.5, 0.5, 1.5), (1.5, 0.5, 1.5), (1.5, 1.5, 1.5), (0.5, 1.5, 1.5))}\""}, {"return": "\"{'vertices': ((-3, -3, -3), (1, -3, -3), (1, 1, -3), (-3, 1, -3), (-3, -3, 1), (1, -3, 1), (1, 1, 1), (-3, 1, 1))}\""}], "parsed_inputs": [[["xmin", "0"], ["xmax", "1"], ["ymin", "0"], ["ymax", "1"], ["zmin", "0"], ["zmax", "1"]], [["xmin", "-1"], ["xmax", "1"], ["ymin", "-1"], ["ymax", "1"], ["zmin", "-1"], ["zmax", "1"]], [["xmin", "10"], ["xmax", "20"], ["ymin", "10"], ["ymax", "20"], ["zmin", "10"], ["zmax", "20"]], [["xmin", "0"], ["xmax", "10"], ["ymin", "0"], ["ymax", "10"], ["zmin", "0"], ["zmax", "10"]], [["xmin", "-5"], ["xmax", "5"], ["ymin", "-5"], ["ymax", "5"], ["zmin", "-5"], ["zmax", "5"]], [["xmin", "1"], ["xmax", "2"], ["ymin", "1"], ["ymax", "2"], ["zmin", "1"], ["zmax", "2"]], [["xmin", "-10"], ["xmax", "0"], ["ymin", "-10"], ["ymax", "0"], ["zmin", "-10"], ["zmax", "0"]], [["xmin", "5"], ["xmax", "10"], ["ymin", "5"], ["ymax", "10"], ["zmin", "5"], ["zmax", "10"]], [["xmin", "-2"], ["xmax", "2"], ["ymin", "-2"], ["ymax", "2"], ["zmin", "-2"], ["zmax", "2"]], [["xmin", "0"], ["xmax", "5"], ["ymin", "0"], ["ymax", "5"], ["zmin", "0"], ["zmax", "5"]]], "exec_code": "def create_cube(xmin, xmax, ymin, ymax, zmin, zmax):\n    od = {'vertices': ((xmin, ymin, zmin), (xmax, ymin, zmin), (xmax, ymax,\n        zmin), (xmin, ymax, zmin), (xmin, ymin, zmax), (xmax, ymin, zmax),\n        (xmax, ymax, zmax), (xmin, ymax, zmax))}\n    return od\n", "output": "The function is:\n\n```python\ndef create_cube(xmin, xmax, ymin, ymax, zmin, zmax):\n    od = {'vertices': ((xmin, ymin, zmin), (xmax, ymin, zmin), (xmax, ymax,\n        zmin), (xmin, ymax, zmin), (xmin, ymin, zmax), (xmax, ymin, zmax),\n        (xmax, ymax, zmax), (xmin, ymax, zmax))}\n    return od\n\n```", "choosed_example_idx": [1, 9, 8, 6, 5, 7, 3], "prompt": "Function: create_cube\nInput: dict(xmin=-1, xmax=1, ymin=-1, ymax=1, zmin=-1, zmax=1), Output: \"{'vertices': ((-1, -1, -1), (1, -1, -1), (1, 1, -1), (-1, 1, -1), (-1, -1, 1), (1, -1, 1), (1, 1, 1), (-1, 1, 1))}\"\nInput: dict(xmin=0, xmax=5, ymin=0, ymax=5, zmin=0, zmax=5), Output: \"{'vertices': ((0, 0, 0), (5, 0, 0), (5, 5, 0), (0, 5, 0), (0, 0, 5), (5, 0, 5), (5, 5, 5), (0, 5, 5))}\"\nInput: dict(xmin=-2, xmax=2, ymin=-2, ymax=2, zmin=-2, zmax=2), Output: \"{'vertices': ((-2, -2, -2), (2, -2, -2), (2, 2, -2), (-2, 2, -2), (-2, -2, 2), (2, -2, 2), (2, 2, 2), (-2, 2, 2))}\"\nInput: dict(xmin=-10, xmax=0, ymin=-10, ymax=0, zmin=-10, zmax=0), Output: \"{'vertices': ((-10, -10, -10), (0, -10, -10), (0, 0, -10), (-10, 0, -10), (-10, -10, 0), (0, -10, 0), (0, 0, 0), (-10, 0, 0))}\"\nInput: dict(xmin=1, xmax=2, ymin=1, ymax=2, zmin=1, zmax=2), Output: \"{'vertices': ((1, 1, 1), (2, 1, 1), (2, 2, 1), (1, 2, 1), (1, 1, 2), (2, 1, 2), (2, 2, 2), (1, 2, 2))}\"\nInput: dict(xmin=5, xmax=10, ymin=5, ymax=10, zmin=5, zmax=10), Output: \"{'vertices': ((5, 5, 5), (10, 5, 5), (10, 10, 5), (5, 10, 5), (5, 5, 10), (10, 5, 10), (10, 10, 10), (5, 10, 10))}\"\nInput: dict(xmin=0, xmax=10, ymin=0, ymax=10, zmin=0, zmax=10), Output: \"{'vertices': ((0, 0, 0), (10, 0, 0), (10, 10, 0), (0, 10, 0), (0, 0, 10), (10, 0, 10), (10, 10, 10), (0, 10, 10))}\"\n\nWrite a function that generates the output from the input.\n", "id": "b0be3a3ec0583cf0a6b49845815341d0633d4411_0"}
{"example_str": "examples = [\n    dict(n=1),\n    dict(n=12),\n    dict(n=45),\n    dict(n=100),\n    dict(n=101),\n    dict(n=120),\n    dict(n=200),\n    dict(n=345),\n    dict(n=500),\n    dict(n=1000),\n]\nexamples += [\n    dict(n=0),        # Assuming '0' maps to \"zero\" in the lookup\n    dict(n=13),       # Typically a direct lookup, e.g., \"thirteen\"\n    dict(n=85),       # Decomposed into \"eighty-five\"\n    dict(n=100),      # Exactly one hundred, should return \"one hundred\"\n    dict(n=999),      # Decomposed into \"nine hundred and ninety-nine\"\n    dict(n=1000),     # Special case handled by the function, \"one thousand\"\n    dict(n=250),      # Decomposed into \"two hundred and fifty\"\n    dict(n=42),       # Decomposed into \"forty-two\"\n    dict(n=507),      # Decomposed into \"five hundred and seven\"\n    dict(n=620)       # Decomposed into \"six hundred and twenty\"\n]\nexamples += [\n    dict(n=0),\n    dict(n=1),\n    dict(n=12),\n    dict(n=23),\n    dict(n=45),\n    dict(n=99),\n    dict(n=100),\n    dict(n=101),\n    dict(n=234),\n    dict(n=1000)\n]", "code": "def numberToWord(n):\n    word = ''\n    if n == 1000:\n        return 'one thousand'\n    if n >= 100:\n        word += numberToWord.lookup[n // 100] + ' hundred'\n        remainder = numberToWord(n % 100)\n        if remainder:\n            word += ' and ' + remainder\n        return word\n    if n / 10 < 2:\n        return numberToWord.lookup[n]\n    word = numberToWord.lookup[n // 10 * 10]\n    if n % 10 != 0:\n        word += '-' + numberToWord.lookup[n % 10]\n    return word\n", "func_name": "numberToWord", "exec_status": true, "example_inputs": ["\"{'n': 1}\"", "\"{'n': 12}\"", "\"{'n': 45}\"", "\"{'n': 100}\"", "\"{'n': 101}\"", "\"{'n': 120}\"", "\"{'n': 200}\"", "\"{'n': 345}\"", "\"{'n': 500}\"", "\"{'n': 1000}\""], "example_outputs": [{"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"return": "\"'one thousand'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"return": "\"'one thousand'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\""}, {"return": "\"'one thousand'\""}], "parsed_inputs": [[["n", "1"]], [["n", "12"]], [["n", "45"]], [["n", "100"]], [["n", "101"]], [["n", "120"]], [["n", "200"]], [["n", "345"]], [["n", "500"]], [["n", "1000"]]], "exec_code": "def numberToWord(n):\n    word = ''\n    if n == 1000:\n        return 'one thousand'\n    if n >= 100:\n        word += numberToWord.lookup[n // 100] + ' hundred'\n        remainder = numberToWord(n % 100)\n        if remainder:\n            word += ' and ' + remainder\n        return word\n    if n / 10 < 2:\n        return numberToWord.lookup[n]\n    word = numberToWord.lookup[n // 10 * 10]\n    if n % 10 != 0:\n        word += '-' + numberToWord.lookup[n % 10]\n    return word\n", "output": "The function is:\n\n```python\ndef numberToWord(n):\n    word = ''\n    if n == 1000:\n        return 'one thousand'\n    if n >= 100:\n        word += numberToWord.lookup[n // 100] + ' hundred'\n        remainder = numberToWord(n % 100)\n        if remainder:\n            word += ' and ' + remainder\n        return word\n    if n / 10 < 2:\n        return numberToWord.lookup[n]\n    word = numberToWord.lookup[n // 10 * 10]\n    if n % 10 != 0:\n        word += '-' + numberToWord.lookup[n % 10]\n    return word\n\n```", "choosed_example_idx": [8, 9, 3, 2, 4, 1, 5, 0], "prompt": "Function: numberToWord\nWrite a function that generates the output from the input.\nInput: dict(n=500), Output: \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\"\nInput: dict(n=1000), Output: \"'one thousand'\"\nInput: dict(n=100), Output: \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\"\nInput: dict(n=45), Output: \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\"\nInput: dict(n=101), Output: \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\"\nInput: dict(n=12), Output: \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\"\nInput: dict(n=120), Output: \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\"\nInput: dict(n=1), Output: \"<class 'AttributeError'>: 'function' object has no attribute 'lookup'\"\n\n\n", "id": "a036f3df819a24841c339b7f2ec348b672454cf6_0"}
{"example_str": "examples = [\n    dict(n=10),\n    dict(n=3),\n    dict(n=0),\n    dict(n=42),\n    dict(n=9),\n    dict(n=20),\n    dict(n=1),\n    dict(n=68),\n    dict(n=25),\n    dict(n=100),\n]\nexamples += [\n    dict(n=1),\n    dict(n=2),\n    dict(n=0),\n    dict(n=-1),\n    dict(n=-2),\n    dict(n=100),\n    dict(n=101),\n    dict(n=999),\n    dict(n=-500),\n    dict(n=123456)\n]\nexamples += [\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10),\n]", "code": "def even_or_odd(n):\n    if n % 2 == 0:\n        print('Even')\n        return\n    print('Odd')\n    return\n", "func_name": "even_or_odd", "exec_status": true, "example_inputs": ["\"{'n': 10}\"", "\"{'n': 3}\"", "\"{'n': 0}\"", "\"{'n': 42}\"", "\"{'n': 9}\"", "\"{'n': 20}\"", "\"{'n': 1}\"", "\"{'n': 68}\"", "\"{'n': 25}\"", "\"{'n': 100}\""], "example_outputs": [{"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}], "parsed_inputs": [[["n", "10"]], [["n", "3"]], [["n", "0"]], [["n", "42"]], [["n", "9"]], [["n", "20"]], [["n", "1"]], [["n", "68"]], [["n", "25"]], [["n", "100"]]], "exec_code": "def even_or_odd(n):\n    if n % 2 == 0:\n        print('Even')\n        return\n    print('Odd')\n    return\n", "output": "The function is:\n\n```python\ndef even_or_odd(n):\n    if n % 2 == 0:\n        print('Even')\n        return\n    print('Odd')\n    return\n\n```", "choosed_example_idx": [5, 0, 6, 2, 8, 3], "prompt": "Function: even_or_odd\nInput: dict(n=20), Output: \"None\"\nInput: dict(n=10), Output: \"None\"\nInput: dict(n=1), Output: \"None\"\nInput: dict(n=0), Output: \"None\"\nInput: dict(n=25), Output: \"None\"\nInput: dict(n=42), Output: \"None\"\n\nWrite a function that generates the output from the input.\n", "id": "3a64acf59846f24d25a8344676a22bb208d5075e_0"}
{"example_str": "examples = [\n    dict(value=100),\n    dict(value=50),\n    dict(value=200),\n    dict(value=10),\n    dict(value=500),\n    dict(value=80),\n    dict(value=20),\n    dict(value=150),\n    dict(value=300),\n    dict(value=600),\n]\nexamples += [\n    dict(value=10),        # 3% of 10 is 0.3, but minimum charge is 2.5\n    dict(value=100),       # 3% of 100 is 3\n    dict(value=50),        # 3% of 50 is 1.5, but minimum charge is 2.5\n    dict(value=83.33),     # 3% of 83.33 is approximately 2.5\n    dict(value=150),       # 3% of 150 is 4.5\n    dict(value=200),       # 3% of 200 is 6\n    dict(value=1),         # 3% of 1 is 0.03, but minimum charge is 2.5\n    dict(value=500),       # 3% of 500 is 15\n    dict(value=0),         # 3% of 0 is 0, but minimum charge is 2.5\n    dict(value=2500)       # 3% of 2500 is 75\n]\nexamples += [\n    dict(value=10),     # 10 * 0.03 = 0.3, but minimum charge is 2.5\n    dict(value=100),    # 100 * 0.03 = 3.0\n    dict(value=50),     # 50 * 0.03 = 1.5, but minimum charge is 2.5\n    dict(value=85),     # 85 * 0.03 = 2.55\n    dict(value=200),    # 200 * 0.03 = 6.0\n    dict(value=1),      # 1 * 0.03 = 0.03, but minimum charge is 2.5\n    dict(value=500),    # 500 * 0.03 = 15.0\n    dict(value=33),     # 33 * 0.03 = 0.99, but minimum charge is 2.5\n    dict(value=150),    # 150 * 0.03 = 4.5\n    dict(value=2500),   # 2500 * 0.03 = 75.0\n]", "code": "def credit_charge(value):\n    charge = value * 0.03\n    if charge < 2.5:\n        charge = 2.5\n    return charge\n", "func_name": "credit_charge", "exec_status": true, "example_inputs": ["\"{'value': 100}\"", "\"{'value': 50}\"", "\"{'value': 200}\"", "\"{'value': 10}\"", "\"{'value': 500}\"", "\"{'value': 80}\"", "\"{'value': 20}\"", "\"{'value': 150}\"", "\"{'value': 300}\"", "\"{'value': 600}\""], "example_outputs": [{"return": "\"3.0\""}, {"return": "\"2.5\""}, {"return": "\"6.0\""}, {"return": "\"2.5\""}, {"return": "\"15.0\""}, {"return": "\"2.5\""}, {"return": "\"2.5\""}, {"return": "\"4.5\""}, {"return": "\"9.0\""}, {"return": "\"18.0\""}, {"return": "\"2.5\""}, {"return": "\"3.0\""}, {"return": "\"2.5\""}, {"return": "\"2.5\""}, {"return": "\"4.5\""}, {"return": "\"6.0\""}, {"return": "\"2.5\""}, {"return": "\"15.0\""}, {"return": "\"2.5\""}, {"return": "\"75.0\""}, {"return": "\"2.5\""}, {"return": "\"3.0\""}, {"return": "\"2.5\""}, {"return": "\"2.55\""}, {"return": "\"6.0\""}, {"return": "\"2.5\""}, {"return": "\"15.0\""}, {"return": "\"2.5\""}, {"return": "\"4.5\""}, {"return": "\"75.0\""}], "parsed_inputs": [[["value", "100"]], [["value", "50"]], [["value", "200"]], [["value", "10"]], [["value", "500"]], [["value", "80"]], [["value", "20"]], [["value", "150"]], [["value", "300"]], [["value", "600"]]], "exec_code": "def credit_charge(value):\n    charge = value * 0.03\n    if charge < 2.5:\n        charge = 2.5\n    return charge\n", "output": "The function is:\n\n```python\ndef credit_charge(value):\n    charge = value * 0.03\n    if charge < 2.5:\n        charge = 2.5\n    return charge\n\n```", "choosed_example_idx": [8, 5, 1, 9, 0, 3, 2, 7], "prompt": "Function: credit_charge\nWrite a function that generates the output from the input.\n\n\nInput: dict(value=300), Output: \"9.0\"\nInput: dict(value=80), Output: \"2.5\"\nInput: dict(value=50), Output: \"2.5\"\nInput: dict(value=600), Output: \"18.0\"\nInput: dict(value=100), Output: \"3.0\"\nInput: dict(value=10), Output: \"2.5\"\nInput: dict(value=200), Output: \"6.0\"\nInput: dict(value=150), Output: \"4.5\"\n\n", "id": "ad3027ec6c9b0979d35c24b38711599d09f5f026_0"}
{"example_str": "examples = [\n    dict(state=(True,)),\n    dict(state=(False,)),\n    dict(state=(True, True)),\n    dict(state=(False, False)),\n    dict(state=(True, False)),\n    dict(state=(False, True)),\n    dict(state=(True, True, True)),\n    dict(state=(False, False, False)),\n    dict(state=(True, False, True)),\n    dict(state=(False, True, False)),\n]\nexamples += [\n    dict(state=(True, False, True)),\n    dict(state=(False, False, False)),\n    dict(state=(True, True, True)),\n    dict(state=(False,)),\n    dict(state=(True,)),\n    dict(state=(True, False)),\n    dict(state=(False, True)),\n    dict(state=(True, True, False, False)),\n    dict(state=(False, False, True, True)),\n    dict(state=(True, False, True, False, True))\n]\nexamples += [\n    dict(state=(True,)),\n    dict(state=(False,)),\n    dict(state=(True, False)),\n    dict(state=(False, True)),\n    dict(state=(True, True)),\n    dict(state=(False, False)),\n    dict(state=(True, False, True)),\n    dict(state=(False, True, False)),\n    dict(state=(True, True, True)),\n    dict(state=(False, False, False))\n]", "code": "def graycode(state):\n    nextstates = []\n    for i in range(len(state)):\n        a = list(state)\n        a[i] = not a[i]\n        nextstates.append(tuple(a))\n    return nextstates\n", "func_name": "graycode", "exec_status": true, "example_inputs": ["\"{'state': (True,)}\"", "\"{'state': (False,)}\"", "\"{'state': (True, True)}\"", "\"{'state': (False, False)}\"", "\"{'state': (True, False)}\"", "\"{'state': (False, True)}\"", "\"{'state': (True, True, True)}\"", "\"{'state': (False, False, False)}\"", "\"{'state': (True, False, True)}\"", "\"{'state': (False, True, False)}\""], "example_outputs": [{"return": "\"[(False,)]\""}, {"return": "\"[(True,)]\""}, {"return": "\"[(False, True), (True, False)]\""}, {"return": "\"[(True, False), (False, True)]\""}, {"return": "\"[(False, False), (True, True)]\""}, {"return": "\"[(True, True), (False, False)]\""}, {"return": "\"[(False, True, True), (True, False, True), (True, True, False)]\""}, {"return": "\"[(True, False, False), (False, True, False), (False, False, True)]\""}, {"return": "\"[(False, False, True), (True, True, True), (True, False, False)]\""}, {"return": "\"[(True, True, False), (False, False, False), (False, True, True)]\""}, {"return": "\"[(False, False, True), (True, True, True), (True, False, False)]\""}, {"return": "\"[(True, False, False), (False, True, False), (False, False, True)]\""}, {"return": "\"[(False, True, True), (True, False, True), (True, True, False)]\""}, {"return": "\"[(True,)]\""}, {"return": "\"[(False,)]\""}, {"return": "\"[(False, False), (True, True)]\""}, {"return": "\"[(True, True), (False, False)]\""}, {"return": "\"[(False, True, False, False), (True, False, False, False), (True, True, True, False), (True, True, False, True)]\""}, {"return": "\"[(True, False, True, True), (False, True, True, True), (False, False, False, True), (False, False, True, False)]\""}, {"return": "\"[(False, False, True, False, True), (True, True, True, False, True), (True, False, False, False, True), (True, False, True, True, True), (True, False, True, False, False)]\""}, {"return": "\"[(False,)]\""}, {"return": "\"[(True,)]\""}, {"return": "\"[(False, False), (True, True)]\""}, {"return": "\"[(True, True), (False, False)]\""}, {"return": "\"[(False, True), (True, False)]\""}, {"return": "\"[(True, False), (False, True)]\""}, {"return": "\"[(False, False, True), (True, True, True), (True, False, False)]\""}, {"return": "\"[(True, True, False), (False, False, False), (False, True, True)]\""}, {"return": "\"[(False, True, True), (True, False, True), (True, True, False)]\""}, {"return": "\"[(True, False, False), (False, True, False), (False, False, True)]\""}], "parsed_inputs": [[["state", "(True,)"]], [["state", "(False,)"]], [["state", "(True, True)"]], [["state", "(False, False)"]], [["state", "(True, False)"]], [["state", "(False, True)"]], [["state", "(True, True, True)"]], [["state", "(False, False, False)"]], [["state", "(True, False, True)"]], [["state", "(False, True, False)"]]], "exec_code": "def graycode(state):\n    nextstates = []\n    for i in range(len(state)):\n        a = list(state)\n        a[i] = not a[i]\n        nextstates.append(tuple(a))\n    return nextstates\n", "output": "The function is:\n\n```python\ndef graycode(state):\n    nextstates = []\n    for i in range(len(state)):\n        a = list(state)\n        a[i] = not a[i]\n        nextstates.append(tuple(a))\n    return nextstates\n\n```", "choosed_example_idx": [7, 9, 8, 1, 3], "prompt": "Function: graycode\nWrite a function that generates the output from the input.\n\nInput: dict(state=(False, False, False)), Output: \"[(True, False, False), (False, True, False), (False, False, True)]\"\nInput: dict(state=(False, True, False)), Output: \"[(True, True, False), (False, False, False), (False, True, True)]\"\nInput: dict(state=(True, False, True)), Output: \"[(False, False, True), (True, True, True), (True, False, False)]\"\nInput: dict(state=(False,)), Output: \"[(True,)]\"\nInput: dict(state=(False, False)), Output: \"[(True, False), (False, True)]\"\n\n", "id": "00a227a54f3f203ff1af02d7e9e0aa9f2a2eb24d_0"}
{"example_str": "examples = [\n    dict(word=\"madam\"),\n    dict(word=\"hello\"),\n    dict(word=\"radar\"),\n    dict(word=\"python\"),\n    dict(word=\"level\"),\n    dict(word=\"deed\"),\n    dict(word=\"civic\"),\n    dict(word=\"refer\"),\n    dict(word=\"pop\"),\n    dict(word=\"\"),\n]\nexamples += [\n    dict(word=\"racecar\"),\n    dict(word=\"level\"),\n    dict(word=\"hello\"),\n    dict(word=\"madam\"),\n    dict(word=\"12321\"),\n    dict(word=\"Python\"),\n    dict(word=\"\"),\n    dict(word=\"A\"),\n    dict(word=\"radar\"),\n    dict(word=\"wasitacaroracatisaw\")\n]\nexamples += [\n    dict(word='racecar'),\n    dict(word='level'),\n    dict(word='hello'),\n    dict(word='madam'),\n    dict(word='refer'),\n    dict(word='12321'),\n    dict(word='example'),\n    dict(word='noon'),\n    dict(word='civic'),\n    dict(word='rotor')\n]", "code": "def is_palindrome(word):\n    check_pal = list(word)\n    for i in range(len(check_pal) // 2):\n        if check_pal[i] != check_pal[-(i + 1)]:\n            return False\n    return True\n", "func_name": "is_palindrome", "exec_status": true, "example_inputs": ["\"{'word': 'madam'}\"", "\"{'word': 'hello'}\"", "\"{'word': 'radar'}\"", "\"{'word': 'python'}\"", "\"{'word': 'level'}\"", "\"{'word': 'deed'}\"", "\"{'word': 'civic'}\"", "\"{'word': 'refer'}\"", "\"{'word': 'pop'}\"", "\"{'word': ''}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}], "parsed_inputs": [[["word", "\"madam\""]], [["word", "\"hello\""]], [["word", "\"radar\""]], [["word", "\"python\""]], [["word", "\"level\""]], [["word", "\"deed\""]], [["word", "\"civic\""]], [["word", "\"refer\""]], [["word", "\"pop\""]], [["word", "\"\""]]], "exec_code": "def is_palindrome(word):\n    check_pal = list(word)\n    for i in range(len(check_pal) // 2):\n        if check_pal[i] != check_pal[-(i + 1)]:\n            return False\n    return True\n", "output": "The function is:\n\n```python\ndef is_palindrome(word):\n    check_pal = list(word)\n    for i in range(len(check_pal) // 2):\n        if check_pal[i] != check_pal[-(i + 1)]:\n            return False\n    return True\n\n```", "choosed_example_idx": [0, 3, 4, 6, 1, 5, 2, 8], "prompt": "Function: is_palindrome\nWrite a function that generates the output from the input.\n\n\nInput: dict(word=\"madam\"), Output: \"True\"\nInput: dict(word=\"python\"), Output: \"False\"\nInput: dict(word=\"level\"), Output: \"True\"\nInput: dict(word=\"civic\"), Output: \"True\"\nInput: dict(word=\"hello\"), Output: \"False\"\nInput: dict(word=\"deed\"), Output: \"True\"\nInput: dict(word=\"radar\"), Output: \"True\"\nInput: dict(word=\"pop\"), Output: \"True\"\n\n", "id": "b5e4fcd70c7e611e6166ef069331f94542cb58f0_0"}
{"example_str": "examples = [\n    dict(bot='O'),\n    dict(bot='B'),\n    dict(bot='o'),  # note: this will not work as expected because the function is case-sensitive\n    dict(bot='b'),  # note: this will not work as expected because the function is case-sensitive\n    dict(bot='X'),  # note: this will not work as expected because the function only handles 'O' and 'B'\n    dict(bot=''),\n    dict(bot='OO'),\n    dict(bot='OB'),\n    dict(bot='A'),\n    dict(bot=None),\n    dict(bot='1'),\n]\nexamples += [\n    dict(bot='O'),\n    dict(bot='B'),\n    dict(bot='O'),\n    dict(bot='B'),\n    dict(bot='O'),\n    dict(bot='B'),\n    dict(bot='O'),\n    dict(bot='B'),\n    dict(bot='O'),\n    dict(bot='B')\n]\nexamples += [\n    dict(bot='O'),\n    dict(bot='B'),\n    dict(bot='O'),\n    dict(bot='B'),\n    dict(bot='O'),\n    dict(bot='B'),\n    dict(bot='O'),\n    dict(bot='B'),\n    dict(bot='O'),\n    dict(bot='B')\n]", "code": "def oppositeBot(bot):\n    if bot == 'O':\n        return 'B'\n    elif bot == 'B':\n        return 'O'\n", "func_name": "oppositeBot", "exec_status": true, "example_inputs": ["\"{'bot': 'O'}\"", "\"{'bot': 'B'}\"", "\"{'bot': 'o'}\"", "\"{'bot': 'b'}\"", "\"{'bot': 'X'}\"", "\"{'bot': ''}\"", "\"{'bot': 'OO'}\"", "\"{'bot': 'OB'}\"", "\"{'bot': 'A'}\"", "\"{'bot': None}\"", "\"{'bot': '1'}\""], "example_outputs": [{"return": "\"'B'\""}, {"return": "\"'O'\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"'B'\""}, {"return": "\"'O'\""}, {"return": "\"'B'\""}, {"return": "\"'O'\""}, {"return": "\"'B'\""}, {"return": "\"'O'\""}, {"return": "\"'B'\""}, {"return": "\"'O'\""}, {"return": "\"'B'\""}, {"return": "\"'O'\""}, {"return": "\"'B'\""}, {"return": "\"'O'\""}, {"return": "\"'B'\""}, {"return": "\"'O'\""}, {"return": "\"'B'\""}, {"return": "\"'O'\""}, {"return": "\"'B'\""}, {"return": "\"'O'\""}, {"return": "\"'B'\""}, {"return": "\"'O'\""}], "parsed_inputs": [[["bot", "\"O\""]], [["bot", "\"B\""]], [["bot", "\"o\""]], [["bot", "\"b\""]], [["bot", "\"X\""]], [["bot", "\"\""]], [["bot", "\"OO\""]], [["bot", "\"OB\""]], [["bot", "\"A\""]], [["bot", "None"]], [["bot", "\"1\""]]], "exec_code": "def oppositeBot(bot):\n    if bot == 'O':\n        return 'B'\n    elif bot == 'B':\n        return 'O'\n", "output": "The function is:\n\n```python\ndef oppositeBot(bot):\n    if bot == 'O':\n        return 'B'\n    elif bot == 'B':\n        return 'O'\n\n```", "choosed_example_idx": [1, 10, 2, 5, 8, 9, 4, 6, 0, 3, 7], "prompt": "Input: dict(bot=\"B\"), Output: \"'O'\"\nInput: dict(bot=\"1\"), Output: \"None\"\nInput: dict(bot=\"o\"), Output: \"None\"\nInput: dict(bot=\"\"), Output: \"None\"\nInput: dict(bot=\"A\"), Output: \"None\"\nInput: dict(bot=None), Output: \"None\"\nInput: dict(bot=\"X\"), Output: \"None\"\nInput: dict(bot=\"OO\"), Output: \"None\"\nInput: dict(bot=\"O\"), Output: \"'B'\"\nInput: dict(bot=\"b\"), Output: \"None\"\nInput: dict(bot=\"OB\"), Output: \"None\"\n\nWrite a function that generates the output from the input.\nFunction: oppositeBot\n", "id": "690fb6538619052d28187ee1f4749a4e08486611_0"}
{"example_str": "examples = [\n    dict(s='True'),\n    dict(s='False'),\n    dict(s='true'),\n    dict(s='false'),\n    dict(s='t'),\n    dict(s='f'),\n    dict(s='1'),\n    dict(s='0'),\n    dict(s='yes'),\n    dict(s='no'),\n]\nexamples += [\n    dict(s='True'),       # True, exact match\n    dict(s='False'),      # False, not 'True'\n    dict(s='true'),       # False, case-sensitive check fails\n    dict(s=''),           # False, empty string\n    dict(s='1'),          # False, not 'True'\n    dict(s='TRUE'),       # False, case-sensitive check fails\n    dict(s='TruE'),       # False, case-sensitive check fails\n    dict(s='yes'),        # False, not 'True'\n    dict(s='false'),      # False, not 'True'\n    dict(s='True '),      # False, extra space at the end\n]\nexamples += [\n    dict(s='True'),\n    dict(s='False'),\n    dict(s='true'),  # Case sensitivity test\n    dict(s='yes'),   # Different string that might be considered true\n    dict(s='no'),    # Different string that might be considered false\n    dict(s='1'),     # Numeric string that might be considered true\n    dict(s='0'),     # Numeric string that might be considered false\n    dict(s='TRUE'),  # Uppercase version of true\n    dict(s=''),      # Empty string\n    dict(s='True '), # String with extra whitespace\n]", "code": "def str_to_bool(s):\n    return True if s == 'True' else False\n", "func_name": "str_to_bool", "exec_status": true, "example_inputs": ["\"{'s': 'True'}\"", "\"{'s': 'False'}\"", "\"{'s': 'true'}\"", "\"{'s': 'false'}\"", "\"{'s': 't'}\"", "\"{'s': 'f'}\"", "\"{'s': '1'}\"", "\"{'s': '0'}\"", "\"{'s': 'yes'}\"", "\"{'s': 'no'}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}], "parsed_inputs": [[["s", "\"True\""]], [["s", "\"False\""]], [["s", "\"true\""]], [["s", "\"false\""]], [["s", "\"t\""]], [["s", "\"f\""]], [["s", "\"1\""]], [["s", "\"0\""]], [["s", "\"yes\""]], [["s", "\"no\""]]], "exec_code": "def str_to_bool(s):\n    return True if s == 'True' else False\n", "output": "The function is:\n\n```python\ndef str_to_bool(s):\n    return True if s == 'True' else False\n\n```", "choosed_example_idx": [4, 3, 1, 6, 5, 8, 0, 7], "prompt": "Write a function that generates the output from the input.\n\n\nFunction: str_to_bool\n\nInput: dict(s=\"t\"), Output: \"False\"\nInput: dict(s=\"false\"), Output: \"False\"\nInput: dict(s=\"False\"), Output: \"False\"\nInput: dict(s=\"1\"), Output: \"False\"\nInput: dict(s=\"f\"), Output: \"False\"\nInput: dict(s=\"yes\"), Output: \"False\"\nInput: dict(s=\"True\"), Output: \"True\"\nInput: dict(s=\"0\"), Output: \"False\"\n\n\n", "id": "cf4072fe5b5a88f235305aeffe26299a19070984_0"}
{"example_str": "examples = [\n    dict(tab=[(1, 2), (3, 4)], first=5, end=10),\n    dict(tab=[(-1, 1), (2, 3)], first=0, end=2),\n    dict(tab=[(5, 5), (5, 5)], first=10, end=20),\n    dict(tab=[(1, 1), (1, 1), (1, 1)], first=3, end=6),\n    dict(tab=[(-2, 2), (3, 3)], first=-1, end=2),\n    dict(tab=[(0, 0), (0, 0)], first=0, end=0),\n    dict(tab=[(10, 10)], first=5, end=15),\n    dict(tab=[(1, 2), (3, 4), (5, 6)], first=10, end=25),\n    dict(tab=[(-5, 5), (5, 5)], first=-5, end=5),\n    dict(tab=[(2, 2), (2, 2), (2, 2)], first=6, end=12)\n]\nexamples += [\n    dict(tab=[(1, 2), (3, 4)], first=5, end=9),\n    dict(tab=[(-1, 0), (2, 3)], first=4, end=5),\n    dict(tab=[(5, 10), (-3, 1)], first=10, end=12),\n    dict(tab=[(0, 0), (0, 0)], first=0, end=0),\n    dict(tab=[(2, 2), (3, 3)], first=1, end=6),\n    dict(tab=[(1, 1), (1, 1), (1, 1)], first=0, end=3),\n    dict(tab=[(10, 5), (-5, 0)], first=5, end=10),\n    dict(tab=[(-2, 3), (4, 1)], first=5, end=7),\n    dict(tab=[(3, 3), (-1, 2), (2, 1)], first=2, end=6),\n    dict(tab=[(0, 1), (0, 1), (0, 1)], first=1, end=1)\n]\nexamples += [\n    dict(tab=[(1, 0), (2, 3)], first=0, end=3),\n    dict(tab=[(3, 1), (1, 4)], first=1, end=5),\n    dict(tab=[(-1, 0), (2, 1)], first=2, end=3),\n    dict(tab=[(1, 0), (1, 2), (-2, 0)], first=0, end=-1),\n    dict(tab=[(5, 0), (-3, 2)], first=0, end=2),\n    dict(tab=[(2, 1), (3, 5)], first=1, end=6),\n    dict(tab=[(1, 0), (1, 1), (1, 2)], first=0, end=3),\n    dict(tab=[(0, 0), (0, 0)], first=0, end=0),\n    dict(tab=[(4, 3), (-1, 2), (2, 5)], first=3, end=8),\n    dict(tab=[(10, 5), (-5, 5)], first=5, end=10)\n]", "code": "def process(tab, first, end):\n    total = first\n    for i in tab:\n        if i[1] > total:\n            return 'No'\n        total += i[0]\n        if total < 0:\n            return 'No'\n    if total == end:\n        return 'Yes'\n    return 'No'\n", "func_name": "process", "exec_status": true, "example_inputs": ["\"{'tab': [(1, 2), (3, 4)], 'first': 5, 'end': 10}\"", "\"{'tab': [(-1, 1), (2, 3)], 'first': 0, 'end': 2}\"", "\"{'tab': [(5, 5), (5, 5)], 'first': 10, 'end': 20}\"", "\"{'tab': [(1, 1), (1, 1), (1, 1)], 'first': 3, 'end': 6}\"", "\"{'tab': [(-2, 2), (3, 3)], 'first': -1, 'end': 2}\"", "\"{'tab': [(0, 0), (0, 0)], 'first': 0, 'end': 0}\"", "\"{'tab': [(10, 10)], 'first': 5, 'end': 15}\"", "\"{'tab': [(1, 2), (3, 4), (5, 6)], 'first': 10, 'end': 25}\"", "\"{'tab': [(-5, 5), (5, 5)], 'first': -5, 'end': 5}\"", "\"{'tab': [(2, 2), (2, 2), (2, 2)], 'first': 6, 'end': 12}\""], "example_outputs": [{"return": "\"'No'\""}, {"return": "\"'No'\""}, {"return": "\"'Yes'\""}, {"return": "\"'Yes'\""}, {"return": "\"'No'\""}, {"return": "\"'Yes'\""}, {"return": "\"'No'\""}, {"return": "\"'No'\""}, {"return": "\"'No'\""}, {"return": "\"'Yes'\""}, {"return": "\"'Yes'\""}, {"return": "\"'Yes'\""}, {"return": "\"'Yes'\""}, {"return": "\"'Yes'\""}, {"return": "\"'No'\""}, {"return": "\"'No'\""}, {"return": "\"'Yes'\""}, {"return": "\"'Yes'\""}, {"return": "\"'No'\""}, {"return": "\"'Yes'\""}, {"return": "\"'No'\""}, {"return": "\"'Yes'\""}, {"return": "\"'Yes'\""}, {"return": "\"'No'\""}, {"return": "\"'Yes'\""}, {"return": "\"'No'\""}, {"return": "\"'Yes'\""}, {"return": "\"'Yes'\""}, {"return": "\"'Yes'\""}, {"return": "\"'Yes'\""}], "parsed_inputs": [[["tab", "[(1, 2), (3, 4)]"], ["first", "5"], ["end", "10"]], [["tab", "[(-1, 1), (2, 3)]"], ["first", "0"], ["end", "2"]], [["tab", "[(5, 5), (5, 5)]"], ["first", "10"], ["end", "20"]], [["tab", "[(1, 1), (1, 1), (1, 1)]"], ["first", "3"], ["end", "6"]], [["tab", "[(-2, 2), (3, 3)]"], ["first", "-1"], ["end", "2"]], [["tab", "[(0, 0), (0, 0)]"], ["first", "0"], ["end", "0"]], [["tab", "[(10, 10)]"], ["first", "5"], ["end", "15"]], [["tab", "[(1, 2), (3, 4), (5, 6)]"], ["first", "10"], ["end", "25"]], [["tab", "[(-5, 5), (5, 5)]"], ["first", "-5"], ["end", "5"]], [["tab", "[(2, 2), (2, 2), (2, 2)]"], ["first", "6"], ["end", "12"]]], "exec_code": "def process(tab, first, end):\n    total = first\n    for i in tab:\n        if i[1] > total:\n            return 'No'\n        total += i[0]\n        if total < 0:\n            return 'No'\n    if total == end:\n        return 'Yes'\n    return 'No'\n", "output": "The function is:\n\n```python\ndef process(tab, first, end):\n    total = first\n    for i in tab:\n        if i[1] > total:\n            return 'No'\n        total += i[0]\n        if total < 0:\n            return 'No'\n    if total == end:\n        return 'Yes'\n    return 'No'\n\n```", "choosed_example_idx": [0, 6, 7], "prompt": "Function: process\nWrite a function that generates the output from the input.\nInput: dict(tab=[(1, 2), (3, 4)], first=5, end=10), Output: \"'No'\"\nInput: dict(tab=[(10, 10)], first=5, end=15), Output: \"'No'\"\nInput: dict(tab=[(1, 2), (3, 4), (5, 6)], first=10, end=25), Output: \"'No'\"\n\n", "id": "1f1744d3e03836071c02b0fd8b8b8a50fc8e8c42_0"}
{"example_str": "examples = [\n    dict(collections={1, 2, 3, 4, 5}, edges=[(1, 2), (2, 3), (3, 4)]),\n    dict(collections={1, 2, 3, 4, 5}, edges=[]),\n    dict(collections={1, 2, 3, 4, 5}, edges=[(1, 2), (2, 3), (3, 4), (4, 5)]),\n    dict(collections={1, 2, 3, 4, 5}, edges=[(1, 2), (3, 4)]),\n    dict(collections={1, 2, 3, 4, 5}, edges=[(1, 2), (2, 3), (4, 5)]),\n    dict(collections={1, 2, 3, 4, 5}, edges=[(1, 2), (3, 4), (4, 5)]),\n    dict(collections={1, 2, 3, 4, 5}, edges=[(1, 2), (2, 3), (3, 4), (4, 5), (5, 1)]),\n    dict(collections={1, 2, 3, 4, 5}, edges=[(1, 2), (2, 3), (3, 4), (4, 5), (5, 1), (1, 3)]),\n    dict(collections={1, 2, 3, 4, 5}, edges=[(1, 2), (2, 3), (3, 4), (4, 5), (5, 1), (1, 3), (2, 4)]),\n    dict(collections={1, 2, 3, 4, 5}, edges=[]),\n]\nexamples += [\n    dict(collections={1, 2, 3, 4}, edges=[(1, 2), (3, 4)]),\n    dict(collections={1, 2, 3, 4, 5}, edges=[(1, 2), (2, 3)]),\n    dict(collections={'a', 'b', 'c', 'd'}, edges=[('a', 'b'), ('c', 'd')]),\n    dict(collections={10, 20, 30, 40}, edges=[(10, 20)]),\n    dict(collections={1, 2, 3, 4, 5, 6}, edges=[(1, 2), (3, 4), (5, 6)]),\n    dict(collections={'apple', 'banana', 'cherry'}, edges=[('apple', 'banana')]),\n    dict(collections={100, 200, 300, 400, 500}, edges=[(100, 200), (300, 400), (200, 300)]),\n    dict(collections={0, 1, 2, 3, 4, 5, 6}, edges=[(0, 1), (1, 2), (2, 3)]),\n    dict(collections={'x', 'y', 'z'}, edges=[]),\n    dict(collections={-1, -2, -3, -4}, edges=[(-1, -2), (-2, -3)])\n]\nexamples += [\n    dict(collections={1, 2, 3, 4, 5}, edges=[(1, 2), (2, 3)]),\n    dict(collections={1, 2, 3, 4, 5}, edges=[(1, 2), (4, 5)]),\n    dict(collections={1, 2, 3, 4, 5}, edges=[(1, 3), (3, 5)]),\n    dict(collections={1, 2, 3, 4, 5}, edges=[]),\n    dict(collections={'a', 'b', 'c', 'd'}, edges=[('a', 'b'), ('b', 'c')]),\n    dict(collections={'apple', 'banana', 'cherry'}, edges=[('apple', 'banana')]),\n    dict(collections={10, 20, 30, 40}, edges=[(10, 20), (20, 30)]),\n    dict(collections={0, 1, 2, 3, 4, 5}, edges=[(0, 1), (1, 2), (2, 3), (3, 4)]),\n    dict(collections={'x', 'y', 'z'}, edges=[]),\n    dict(collections={100, 200, 300, 400, 500}, edges=[(100, 200), (300, 400)])\n]", "code": "def disconnetted(collections, edges):\n    connected_a = set([edge[0] for edge in edges])\n    connected_b = set([edge[1] for edge in edges])\n    connected = connected_a | connected_b\n    return collections - connected\n", "func_name": "disconnetted", "exec_status": true, "example_inputs": ["\"{'collections': {1, 2, 3, 4, 5}, 'edges': [(1, 2), (2, 3), (3, 4)]}\"", "\"{'collections': {1, 2, 3, 4, 5}, 'edges': []}\"", "\"{'collections': {1, 2, 3, 4, 5}, 'edges': [(1, 2), (2, 3), (3, 4), (4, 5)]}\"", "\"{'collections': {1, 2, 3, 4, 5}, 'edges': [(1, 2), (3, 4)]}\"", "\"{'collections': {1, 2, 3, 4, 5}, 'edges': [(1, 2), (2, 3), (4, 5)]}\"", "\"{'collections': {1, 2, 3, 4, 5}, 'edges': [(1, 2), (3, 4), (4, 5)]}\"", "\"{'collections': {1, 2, 3, 4, 5}, 'edges': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 1)]}\"", "\"{'collections': {1, 2, 3, 4, 5}, 'edges': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 1), (1, 3)]}\"", "\"{'collections': {1, 2, 3, 4, 5}, 'edges': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 1), (1, 3), (2, 4)]}\"", "\"{'collections': {1, 2, 3, 4, 5}, 'edges': []}\""], "example_outputs": [{"return": "\"{5}\""}, {"return": "\"{1, 2, 3, 4, 5}\""}, {"return": "\"set()\""}, {"return": "\"{5}\""}, {"return": "\"set()\""}, {"return": "\"set()\""}, {"return": "\"set()\""}, {"return": "\"set()\""}, {"return": "\"set()\""}, {"return": "\"{1, 2, 3, 4, 5}\""}, {"return": "\"set()\""}, {"return": "\"{4, 5}\""}, {"return": "\"set()\""}, {"return": "\"{40, 30}\""}, {"return": "\"set()\""}, {"return": "\"{'cherry'}\""}, {"return": "\"{500}\""}, {"return": "\"{4, 5, 6}\""}, {"return": "\"{'x', 'z', 'y'}\""}, {"return": "\"{-4}\""}, {"return": "\"{4, 5}\""}, {"return": "\"{3}\""}, {"return": "\"{2, 4}\""}, {"return": "\"{1, 2, 3, 4, 5}\""}, {"return": "\"{'d'}\""}, {"return": "\"{'cherry'}\""}, {"return": "\"{40}\""}, {"return": "\"{5}\""}, {"return": "\"{'y', 'x', 'z'}\""}, {"return": "\"{500}\""}], "parsed_inputs": [[["collections", "{1, 2, 3, 4, 5}"], ["edges", "[(1, 2), (2, 3), (3, 4)]"]], [["collections", "{1, 2, 3, 4, 5}"], ["edges", "[]"]], [["collections", "{1, 2, 3, 4, 5}"], ["edges", "[(1, 2), (2, 3), (3, 4), (4, 5)]"]], [["collections", "{1, 2, 3, 4, 5}"], ["edges", "[(1, 2), (3, 4)]"]], [["collections", "{1, 2, 3, 4, 5}"], ["edges", "[(1, 2), (2, 3), (4, 5)]"]], [["collections", "{1, 2, 3, 4, 5}"], ["edges", "[(1, 2), (3, 4), (4, 5)]"]], [["collections", "{1, 2, 3, 4, 5}"], ["edges", "[(1, 2), (2, 3), (3, 4), (4, 5), (5, 1)]"]], [["collections", "{1, 2, 3, 4, 5}"], ["edges", "[(1, 2), (2, 3), (3, 4), (4, 5), (5, 1), (1, 3)]"]], [["collections", "{1, 2, 3, 4, 5}"], ["edges", "[(1, 2), (2, 3), (3, 4), (4, 5), (5, 1), (1, 3), (2, 4)]"]], [["collections", "{1, 2, 3, 4, 5}"], ["edges", "[]"]]], "exec_code": "def disconnetted(collections, edges):\n    connected_a = set([edge[0] for edge in edges])\n    connected_b = set([edge[1] for edge in edges])\n    connected = connected_a | connected_b\n    return collections - connected\n", "output": "The function is:\n\n```python\ndef disconnetted(collections, edges):\n    connected_a = set([edge[0] for edge in edges])\n    connected_b = set([edge[1] for edge in edges])\n    connected = connected_a | connected_b\n    return collections - connected\n\n```", "choosed_example_idx": [3, 1, 7], "prompt": "Input: dict(collections={1, 2, 3, 4, 5}, edges=[(1, 2), (3, 4)]), Output: \"{5}\"\nInput: dict(collections={1, 2, 3, 4, 5}, edges=[]), Output: \"{1, 2, 3, 4, 5}\"\nInput: dict(collections={1, 2, 3, 4, 5}, edges=[(1, 2), (2, 3), (3, 4), (4, 5), (5, 1), (1, 3)]), Output: \"set()\"\n\n\n\nFunction: disconnetted\n\nWrite a function that generates the output from the input.\n", "id": "1f2b85e0386a4a6c8bf2f6537515f8fc6606a592_0"}
{"example_str": "examples = [\n    dict(metal=1, plastic=2, glass=3),\n    dict(metal=5, plastic=0, glass=1),\n    dict(metal=0, plastic=10, glass=0),\n    dict(metal=2, plastic=3, glass=4),\n    dict(metal=10, plastic=5, glass=2),\n    dict(metal=0, plastic=0, glass=10),\n    dict(metal=7, plastic=2, glass=1),\n    dict(metal=3, plastic=4, glass=5),\n    dict(metal=9, plastic=8, glass=7),\n    dict(metal=6, plastic=6, glass=6),\n]\nexamples += [\n    dict(metal=1, plastic=1, glass=1),\n    dict(metal=0, plastic=0, glass=0),\n    dict(metal=5, plastic=3, glass=2),\n    dict(metal=10, plastic=5, glass=3),\n    dict(metal=2, plastic=10, glass=5),\n    dict(metal=0, plastic=5, glass=10),\n    dict(metal=3, plastic=2, glass=1),\n    dict(metal=7, plastic=0, glass=0),\n    dict(metal=1, plastic=2, glass=3),\n    dict(metal=4, plastic=4, glass=4)\n]\nexamples += [\n    dict(metal=1, plastic=1, glass=1),\n    dict(metal=0, plastic=0, glass=0),\n    dict(metal=5, plastic=3, glass=2),\n    dict(metal=10, plastic=5, glass=3),\n    dict(metal=2, plastic=4, glass=6),\n    dict(metal=3, plastic=2, glass=1),\n    dict(metal=8, plastic=7, glass=5),\n    dict(metal=6, plastic=6, glass=6),\n    dict(metal=9, plastic=8, glass=7),\n    dict(metal=4, plastic=3, glass=2)\n]", "code": "def calculatePoints(metal, plastic, glass):\n    earnedPoint = metal * 2.5 + plastic * 2 + glass * 1.5\n    return earnedPoint\n", "func_name": "calculatePoints", "exec_status": true, "example_inputs": ["\"{'metal': 1, 'plastic': 2, 'glass': 3}\"", "\"{'metal': 5, 'plastic': 0, 'glass': 1}\"", "\"{'metal': 0, 'plastic': 10, 'glass': 0}\"", "\"{'metal': 2, 'plastic': 3, 'glass': 4}\"", "\"{'metal': 10, 'plastic': 5, 'glass': 2}\"", "\"{'metal': 0, 'plastic': 0, 'glass': 10}\"", "\"{'metal': 7, 'plastic': 2, 'glass': 1}\"", "\"{'metal': 3, 'plastic': 4, 'glass': 5}\"", "\"{'metal': 9, 'plastic': 8, 'glass': 7}\"", "\"{'metal': 6, 'plastic': 6, 'glass': 6}\""], "example_outputs": [{"return": "\"11.0\""}, {"return": "\"14.0\""}, {"return": "\"20.0\""}, {"return": "\"17.0\""}, {"return": "\"38.0\""}, {"return": "\"15.0\""}, {"return": "\"23.0\""}, {"return": "\"23.0\""}, {"return": "\"49.0\""}, {"return": "\"36.0\""}, {"return": "\"6.0\""}, {"return": "\"0.0\""}, {"return": "\"21.5\""}, {"return": "\"39.5\""}, {"return": "\"32.5\""}, {"return": "\"25.0\""}, {"return": "\"13.0\""}, {"return": "\"17.5\""}, {"return": "\"11.0\""}, {"return": "\"24.0\""}, {"return": "\"6.0\""}, {"return": "\"0.0\""}, {"return": "\"21.5\""}, {"return": "\"39.5\""}, {"return": "\"22.0\""}, {"return": "\"13.0\""}, {"return": "\"41.5\""}, {"return": "\"36.0\""}, {"return": "\"49.0\""}, {"return": "\"19.0\""}], "parsed_inputs": [[["metal", "1"], ["plastic", "2"], ["glass", "3"]], [["metal", "5"], ["plastic", "0"], ["glass", "1"]], [["metal", "0"], ["plastic", "10"], ["glass", "0"]], [["metal", "2"], ["plastic", "3"], ["glass", "4"]], [["metal", "10"], ["plastic", "5"], ["glass", "2"]], [["metal", "0"], ["plastic", "0"], ["glass", "10"]], [["metal", "7"], ["plastic", "2"], ["glass", "1"]], [["metal", "3"], ["plastic", "4"], ["glass", "5"]], [["metal", "9"], ["plastic", "8"], ["glass", "7"]], [["metal", "6"], ["plastic", "6"], ["glass", "6"]]], "exec_code": "def calculatePoints(metal, plastic, glass):\n    earnedPoint = metal * 2.5 + plastic * 2 + glass * 1.5\n    return earnedPoint\n", "output": "The function is:\n\n```python\ndef calculatePoints(metal, plastic, glass):\n    earnedPoint = metal * 2.5 + plastic * 2 + glass * 1.5\n    return earnedPoint\n\n```", "choosed_example_idx": [4, 1, 9, 2, 0, 7, 8], "prompt": "Input: dict(metal=10, plastic=5, glass=2), Output: \"38.0\"\nInput: dict(metal=5, plastic=0, glass=1), Output: \"14.0\"\nInput: dict(metal=6, plastic=6, glass=6), Output: \"36.0\"\nInput: dict(metal=0, plastic=10, glass=0), Output: \"20.0\"\nInput: dict(metal=1, plastic=2, glass=3), Output: \"11.0\"\nInput: dict(metal=3, plastic=4, glass=5), Output: \"23.0\"\nInput: dict(metal=9, plastic=8, glass=7), Output: \"49.0\"\n\nFunction: calculatePoints\nWrite a function that generates the output from the input.\n\n\n", "id": "32b0bd4e2240c8bdfd05103f4da99eb3246ecb54_0"}
{"example_str": "examples = [\n    dict(numHeads=5, numLegs=10),\n    dict(numHeads=3, numLegs=8),\n    dict(numHeads=2, numLegs=6),\n    dict(numHeads=10, numLegs=28),\n    dict(numHeads=7, numLegs=18),\n    dict(numHeads=1, numLegs=2),\n    dict(numHeads=4, numLegs=12),\n    dict(numHeads=9, numLegs=24),\n    dict(numHeads=6, numLegs=16),\n    dict(numHeads=8, numLegs=20),\n]\nexamples += [\n    dict(numHeads=5, numLegs=14),  # 3 chickens, 2 dogs\n    dict(numHeads=3, numLegs=10),  # 1 chicken, 2 dogs\n    dict(numHeads=2, numLegs=8),   # 0 chickens, 2 dogs\n    dict(numHeads=4, numLegs=16),  # 0 chickens, 4 dogs\n    dict(numHeads=6, numLegs=20),  # 2 chickens, 4 dogs\n    dict(numHeads=1, numLegs=4),   # 0 chickens, 1 dog\n    dict(numHeads=10, numLegs=32), # 4 chickens, 6 dogs\n    dict(numHeads=8, numLegs=24),  # 4 chickens, 4 dogs\n    dict(numHeads=7, numLegs=18),  # 3 chickens, 4 dogs\n    dict(numHeads=9, numLegs=22)   # 1 chicken, 8 dogs\n]\nexamples += [\n    dict(numHeads=5, numLegs=14),\n    dict(numHeads=3, numLegs=10),\n    dict(numHeads=10, numLegs=32),\n    dict(numHeads=6, numLegs=18),\n    dict(numHeads=8, numLegs=28),\n    dict(numHeads=4, numLegs=16),\n    dict(numHeads=7, numLegs=20),\n    dict(numHeads=9, numLegs=26),\n    dict(numHeads=2, numLegs=8),\n    dict(numHeads=12, numLegs=36)\n]", "code": "def test_function(numHeads, numLegs):\n    for numChick in range(0, numHeads + 1):\n        numDogs = numHeads - numChick\n        totLegs = 4 * numDogs + 2 * numChick\n        if totLegs == numLegs:\n            return [numChick, numDogs]\n    return None\n", "func_name": "test_function", "exec_status": true, "example_inputs": ["\"{'numHeads': 5, 'numLegs': 10}\"", "\"{'numHeads': 3, 'numLegs': 8}\"", "\"{'numHeads': 2, 'numLegs': 6}\"", "\"{'numHeads': 10, 'numLegs': 28}\"", "\"{'numHeads': 7, 'numLegs': 18}\"", "\"{'numHeads': 1, 'numLegs': 2}\"", "\"{'numHeads': 4, 'numLegs': 12}\"", "\"{'numHeads': 9, 'numLegs': 24}\"", "\"{'numHeads': 6, 'numLegs': 16}\"", "\"{'numHeads': 8, 'numLegs': 20}\""], "example_outputs": [{"return": "\"[5, 0]\""}, {"return": "\"[2, 1]\""}, {"return": "\"[1, 1]\""}, {"return": "\"[6, 4]\""}, {"return": "\"[5, 2]\""}, {"return": "\"[1, 0]\""}, {"return": "\"[2, 2]\""}, {"return": "\"[6, 3]\""}, {"return": "\"[4, 2]\""}, {"return": "\"[6, 2]\""}, {"return": "\"[3, 2]\""}, {"return": "\"[1, 2]\""}, {"return": "\"[0, 2]\""}, {"return": "\"[0, 4]\""}, {"return": "\"[2, 4]\""}, {"return": "\"[0, 1]\""}, {"return": "\"[4, 6]\""}, {"return": "\"[4, 4]\""}, {"return": "\"[5, 2]\""}, {"return": "\"[7, 2]\""}, {"return": "\"[3, 2]\""}, {"return": "\"[1, 2]\""}, {"return": "\"[4, 6]\""}, {"return": "\"[3, 3]\""}, {"return": "\"[2, 6]\""}, {"return": "\"[0, 4]\""}, {"return": "\"[4, 3]\""}, {"return": "\"[5, 4]\""}, {"return": "\"[0, 2]\""}, {"return": "\"[6, 6]\""}], "parsed_inputs": [[["numHeads", "5"], ["numLegs", "10"]], [["numHeads", "3"], ["numLegs", "8"]], [["numHeads", "2"], ["numLegs", "6"]], [["numHeads", "10"], ["numLegs", "28"]], [["numHeads", "7"], ["numLegs", "18"]], [["numHeads", "1"], ["numLegs", "2"]], [["numHeads", "4"], ["numLegs", "12"]], [["numHeads", "9"], ["numLegs", "24"]], [["numHeads", "6"], ["numLegs", "16"]], [["numHeads", "8"], ["numLegs", "20"]]], "exec_code": "def test_function(numHeads, numLegs):\n    for numChick in range(0, numHeads + 1):\n        numDogs = numHeads - numChick\n        totLegs = 4 * numDogs + 2 * numChick\n        if totLegs == numLegs:\n            return [numChick, numDogs]\n    return None\n", "output": "The function is:\n\n```python\ndef test_function(numHeads, numLegs):\n    for numChick in range(0, numHeads + 1):\n        numDogs = numHeads - numChick\n        totLegs = 4 * numDogs + 2 * numChick\n        if totLegs == numLegs:\n            return [numChick, numDogs]\n    return None\n\n```", "choosed_example_idx": [0, 9, 1, 4, 2, 8, 6], "prompt": "Write a function that generates the output from the input.\nInput: dict(numHeads=5, numLegs=10), Output: \"[5, 0]\"\nInput: dict(numHeads=8, numLegs=20), Output: \"[6, 2]\"\nInput: dict(numHeads=3, numLegs=8), Output: \"[2, 1]\"\nInput: dict(numHeads=7, numLegs=18), Output: \"[5, 2]\"\nInput: dict(numHeads=2, numLegs=6), Output: \"[1, 1]\"\nInput: dict(numHeads=6, numLegs=16), Output: \"[4, 2]\"\nInput: dict(numHeads=4, numLegs=12), Output: \"[2, 2]\"\n\nFunction: test_function\n", "id": "d34687683951a62866589901068e66f2e003d455_0"}
{"example_str": "examples = [\n    dict(height=5, step_sizes=[1, 2]),\n    dict(height=10, step_sizes=[1, 2, 3, 4]),\n    dict(height=3, step_sizes=[1]),\n    dict(height=7, step_sizes=[2, 3]),\n    dict(height=15, step_sizes=[1, 3, 5]),\n    dict(height=20, step_sizes=[2, 4, 6, 8]),\n    dict(height=1, step_sizes=[1]),\n    dict(height=6, step_sizes=[1, 2, 3]),\n    dict(height=9, step_sizes=[3, 4, 5]),\n    dict(height=12, step_sizes=[1, 2, 3, 4, 5]),\n]\nexamples += [\n    dict(height=5, step_sizes=[1, 2], cache=None),\n    dict(height=10, step_sizes=[1, 2, 3], cache=None),\n    dict(height=15, step_sizes=[1, 2, 3, 4], cache=None),\n    dict(height=20, step_sizes=[1, 3, 5], cache=None),\n    dict(height=8, step_sizes=[1, 2, 3, 4], cache=None),\n    dict(height=12, step_sizes=[2, 3, 4], cache=None),\n    dict(height=7, step_sizes=[1, 2], cache=None),\n    dict(height=9, step_sizes=[1, 3], cache=None),\n    dict(height=6, step_sizes=[1, 2, 3], cache=None),\n    dict(height=11, step_sizes=[1, 2, 3, 4, 5], cache=None)\n]\nexamples += [\n    dict(height=5, step_sizes=[1, 2], cache=None),\n    dict(height=10, step_sizes=[1, 2, 3], cache=None),\n    dict(height=15, step_sizes=[1, 2, 3, 4], cache=None),\n    dict(height=20, step_sizes=[1, 2, 3, 4, 5], cache=None),\n    dict(height=8, step_sizes=[1, 3], cache=None),\n    dict(height=12, step_sizes=[1, 2, 3, 4, 5, 6], cache=None),\n    dict(height=7, step_sizes=[1, 2], cache=None),\n    dict(height=3, step_sizes=[1], cache=None),\n    dict(height=9, step_sizes=[1, 2, 3], cache=None),\n    dict(height=6, step_sizes=[1, 2, 3, 4], cache=None)\n]", "code": "def staircase(height: int, step_sizes: list, cache: dict=None) ->int:\n    \"\"\"\n    :param cache: cache stores a cache of each visit. If cache is not provided\n                during the call the a blank $dict$ is initialized. Then this\n                instance is updated and reused in the recursive calls.\n    :raises: No exception.\n    :rtype: integer denoting number of ways.\n    :param height: height of the staircase\n    :param step_sizes: Allowed step sizes, step_sizes is required to be sorted.\n    :return: return the number of ways to reach to the top\n            with the available step sizes.\n    =============================================================================\n    :example:\n        Q. How many ways there are to reach to the top of a staircase of height\n            5 with allowed step sizes {1, 2}\n        Ans.\n    >>> staircase(5, [1, 2])\n    8\n    >>> staircase(10, [1, 2, 3, 4])\n    401\n\n    thus number of ways is 8.\n\n\n    \"\"\"\n    if cache is None:\n        cache = {}\n    ways = 0\n    if height == 0:\n        return 1\n    elif height == step_sizes[0]:\n        return 1\n    else:\n        for size in step_sizes:\n            if height >= size:\n                if not height - size in cache:\n                    cache[height - size] = staircase(height - size,\n                        step_sizes, cache)\n                ways += cache[height - size]\n        return ways\n", "func_name": "staircase", "exec_status": true, "example_inputs": ["\"{'height': 5, 'step_sizes': [1, 2]}\"", "\"{'height': 10, 'step_sizes': [1, 2, 3, 4]}\"", "\"{'height': 3, 'step_sizes': [1]}\"", "\"{'height': 7, 'step_sizes': [2, 3]}\"", "\"{'height': 15, 'step_sizes': [1, 3, 5]}\"", "\"{'height': 20, 'step_sizes': [2, 4, 6, 8]}\"", "\"{'height': 1, 'step_sizes': [1]}\"", "\"{'height': 6, 'step_sizes': [1, 2, 3]}\"", "\"{'height': 9, 'step_sizes': [3, 4, 5]}\"", "\"{'height': 12, 'step_sizes': [1, 2, 3, 4, 5]}\""], "example_outputs": [{"return": "\"8\""}, {"return": "\"401\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"449\""}, {"return": "\"401\""}, {"return": "\"1\""}, {"return": "\"24\""}, {"return": "\"3\""}, {"return": "\"1793\""}, {"return": "\"8\""}, {"return": "\"274\""}, {"return": "\"10671\""}, {"return": "\"4285\""}, {"return": "\"108\""}, {"return": "\"36\""}, {"return": "\"21\""}, {"return": "\"19\""}, {"return": "\"24\""}, {"return": "\"912\""}, {"return": "\"8\""}, {"return": "\"274\""}, {"return": "\"10671\""}, {"return": "\"400096\""}, {"return": "\"13\""}, {"return": "\"1936\""}, {"return": "\"21\""}, {"return": "\"1\""}, {"return": "\"149\""}, {"return": "\"29\""}], "parsed_inputs": [[["height", "5"], ["step_sizes", "[1, 2]"]], [["height", "10"], ["step_sizes", "[1, 2, 3, 4]"]], [["height", "3"], ["step_sizes", "[1]"]], [["height", "7"], ["step_sizes", "[2, 3]"]], [["height", "15"], ["step_sizes", "[1, 3, 5]"]], [["height", "20"], ["step_sizes", "[2, 4, 6, 8]"]], [["height", "1"], ["step_sizes", "[1]"]], [["height", "6"], ["step_sizes", "[1, 2, 3]"]], [["height", "9"], ["step_sizes", "[3, 4, 5]"]], [["height", "12"], ["step_sizes", "[1, 2, 3, 4, 5]"]]], "exec_code": "def staircase(height: int, step_sizes: list, cache: dict=None) ->int:\n    \"\"\"\n    :param cache: cache stores a cache of each visit. If cache is not provided\n                during the call the a blank $dict$ is initialized. Then this\n                instance is updated and reused in the recursive calls.\n    :raises: No exception.\n    :rtype: integer denoting number of ways.\n    :param height: height of the staircase\n    :param step_sizes: Allowed step sizes, step_sizes is required to be sorted.\n    :return: return the number of ways to reach to the top\n            with the available step sizes.\n    =============================================================================\n    :example:\n        Q. How many ways there are to reach to the top of a staircase of height\n            5 with allowed step sizes {1, 2}\n        Ans.\n    >>> staircase(5, [1, 2])\n    8\n    >>> staircase(10, [1, 2, 3, 4])\n    401\n\n    thus number of ways is 8.\n\n\n    \"\"\"\n    if cache is None:\n        cache = {}\n    ways = 0\n    if height == 0:\n        return 1\n    elif height == step_sizes[0]:\n        return 1\n    else:\n        for size in step_sizes:\n            if height >= size:\n                if not height - size in cache:\n                    cache[height - size] = staircase(height - size,\n                        step_sizes, cache)\n                ways += cache[height - size]\n        return ways\n", "output": "The function is:\n\n```python\ndef staircase(height: int, step_sizes: list, cache: dict=None) ->int:\n    \"\"\"\n    :param cache: cache stores a cache of each visit. If cache is not provided\n                during the call the a blank $dict$ is initialized. Then this\n                instance is updated and reused in the recursive calls.\n    :raises: No exception.\n    :rtype: integer denoting number of ways.\n    :param height: height of the staircase\n    :param step_sizes: Allowed step sizes, step_sizes is required to be sorted.\n    :return: return the number of ways to reach to the top\n            with the available step sizes.\n    =============================================================================\n    :example:\n        Q. How many ways there are to reach to the top of a staircase of height\n            5 with allowed step sizes {1, 2}\n        Ans.\n    >>> staircase(5, [1, 2])\n    8\n    >>> staircase(10, [1, 2, 3, 4])\n    401\n\n    thus number of ways is 8.\n\n\n    \"\"\"\n    if cache is None:\n        cache = {}\n    ways = 0\n    if height == 0:\n        return 1\n    elif height == step_sizes[0]:\n        return 1\n    else:\n        for size in step_sizes:\n            if height >= size:\n                if not height - size in cache:\n                    cache[height - size] = staircase(height - size,\n                        step_sizes, cache)\n                ways += cache[height - size]\n        return ways\n\n```", "choosed_example_idx": [4, 8, 7, 5, 3, 6, 9], "prompt": "Function: staircase\nWrite a function that generates the output from the input.\nInput: dict(height=15, step_sizes=[1, 3, 5]), Output: \"449\"\nInput: dict(height=9, step_sizes=[3, 4, 5]), Output: \"3\"\nInput: dict(height=6, step_sizes=[1, 2, 3]), Output: \"24\"\nInput: dict(height=20, step_sizes=[2, 4, 6, 8]), Output: \"401\"\nInput: dict(height=7, step_sizes=[2, 3]), Output: \"3\"\nInput: dict(height=1, step_sizes=[1]), Output: \"1\"\nInput: dict(height=12, step_sizes=[1, 2, 3, 4, 5]), Output: \"1793\"\n\n", "id": "8f98638beacf0ae12b351cb81f0ea520b6c86b61_0"}
{"example_str": "examples = [\n    dict(a=8),\n    dict(a=16),\n    dict(a=32),\n    dict(a=64),\n    dict(a=128),\n    dict(a=256),\n    dict(a=512),\n    dict(a=1024),\n    dict(a=2048),\n    dict(a=4096),\n]\nexamples += [\n    dict(a=1),      # log2(1) = 0\n    dict(a=2),      # log2(2) = 1\n    dict(a=4),      # log2(4) = 2\n    dict(a=8),      # log2(8) = 3\n    dict(a=16),     # log2(16) = 4\n    dict(a=32),     # log2(32) = 5\n    dict(a=64),     # log2(64) = 6\n    dict(a=128),    # log2(128) = 7\n    dict(a=256),    # log2(256) = 8\n    dict(a=512)     # log2(512) = 9\n]\nexamples += [\n    dict(a=1),\n    dict(a=2),\n    dict(a=4),\n    dict(a=8),\n    dict(a=16),\n    dict(a=32),\n    dict(a=64),\n    dict(a=128),\n    dict(a=256),\n    dict(a=512)\n]", "code": "def log2(a):\n    r = 0\n    while a != 0:\n        r += 1\n        a >>= 1\n    return r\n", "func_name": "log2", "exec_status": true, "example_inputs": ["\"{'a': 8}\"", "\"{'a': 16}\"", "\"{'a': 32}\"", "\"{'a': 64}\"", "\"{'a': 128}\"", "\"{'a': 256}\"", "\"{'a': 512}\"", "\"{'a': 1024}\"", "\"{'a': 2048}\"", "\"{'a': 4096}\""], "example_outputs": [{"return": "\"4\""}, {"return": "\"5\""}, {"return": "\"6\""}, {"return": "\"7\""}, {"return": "\"8\""}, {"return": "\"9\""}, {"return": "\"10\""}, {"return": "\"11\""}, {"return": "\"12\""}, {"return": "\"13\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"4\""}, {"return": "\"5\""}, {"return": "\"6\""}, {"return": "\"7\""}, {"return": "\"8\""}, {"return": "\"9\""}, {"return": "\"10\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"4\""}, {"return": "\"5\""}, {"return": "\"6\""}, {"return": "\"7\""}, {"return": "\"8\""}, {"return": "\"9\""}, {"return": "\"10\""}], "parsed_inputs": [[["a", "8"]], [["a", "16"]], [["a", "32"]], [["a", "64"]], [["a", "128"]], [["a", "256"]], [["a", "512"]], [["a", "1024"]], [["a", "2048"]], [["a", "4096"]]], "exec_code": "def log2(a):\n    r = 0\n    while a != 0:\n        r += 1\n        a >>= 1\n    return r\n", "output": "The function is:\n\n```python\ndef log2(a):\n    r = 0\n    while a != 0:\n        r += 1\n        a >>= 1\n    return r\n\n```", "choosed_example_idx": [8, 4, 3, 1, 2, 0, 6, 9, 5], "prompt": "Function: log2\nInput: dict(a=2048), Output: \"12\"\nInput: dict(a=128), Output: \"8\"\nInput: dict(a=64), Output: \"7\"\nInput: dict(a=16), Output: \"5\"\nInput: dict(a=32), Output: \"6\"\nInput: dict(a=8), Output: \"4\"\nInput: dict(a=512), Output: \"10\"\nInput: dict(a=4096), Output: \"13\"\nInput: dict(a=256), Output: \"9\"\n\nWrite a function that generates the output from the input.\n", "id": "6d229bae77c4e27ccb316de8933742ef10a29505_0"}
{"example_str": "examples = [\n    dict(strtab=[\"1\", \"2\", \"3\"]),\n    dict(strtab=[\"10\", \"20\", \"30\"]),\n    dict(strtab=[\"-1\", \"0\", \"1\"]),\n    dict(strtab=[\"5\", \"10\", \"15\", \"20\"]),\n    dict(strtab=[\"100\", \"200\", \"300\", \"400\", \"500\"]),\n    dict(strtab=[\"1.0\", \"2.0\", \"3.0\"]),  # this will raise a ValueError\n    dict(strtab=[\"a\", \"b\", \"c\"]),  # this will raise a ValueError\n    dict(strtab=[\"1\", \"2\", \"three\"]),  # this will raise a ValueError\n    dict(strtab=[]),\n    dict(strtab=[\"1\"]),\n]\nexamples += [\n    dict(strtab=[\"1\", \"2\", \"3\"]),\n    dict(strtab=[\"10\", \"20\", \"30\"]),\n    dict(strtab=[\"-1\", \"-2\", \"-3\"]),\n    dict(strtab=[\"100\", \"200\", \"300\"]),\n    dict(strtab=[\"0\", \"0\", \"0\"]),\n    dict(strtab=[\"123\", \"456\", \"789\"]),\n    dict(strtab=[\"001\", \"002\", \"003\"]),\n    dict(strtab=[\"-10\", \"-20\", \"-30\"]),\n    dict(strtab=[\"50\", \"60\", \"70\"]),\n    dict(strtab=[\"111\", \"222\", \"333\"])\n]\nexamples += [\n    dict(strtab=[\"1\", \"2\", \"3\"]),\n    dict(strtab=[\"10\", \"20\", \"30\"]),\n    dict(strtab=[\"100\", \"200\", \"300\"]),\n    dict(strtab=[\"0\", \"-1\", \"-2\"]),\n    dict(strtab=[\"123\", \"456\", \"789\"]),\n    dict(strtab=[\"001\", \"002\", \"003\"]),\n    dict(strtab=[\"-100\", \"-200\", \"-300\"]),\n    dict(strtab=[\"999\", \"888\", \"777\"]),\n    dict(strtab=[\"50\", \"60\", \"70\"]),\n    dict(strtab=[\"-10\", \"0\", \"10\"]),\n]", "code": "def str_to_nb(strtab):\n    return [int(value) for value in strtab]\n", "func_name": "str_to_nb", "exec_status": true, "example_inputs": ["\"{'strtab': ['1', '2', '3']}\"", "\"{'strtab': ['10', '20', '30']}\"", "\"{'strtab': ['-1', '0', '1']}\"", "\"{'strtab': ['5', '10', '15', '20']}\"", "\"{'strtab': ['100', '200', '300', '400', '500']}\"", "\"{'strtab': ['1.0', '2.0', '3.0']}\"", "\"{'strtab': ['a', 'b', 'c']}\"", "\"{'strtab': ['1', '2', 'three']}\"", "\"{'strtab': []}\"", "\"{'strtab': ['1']}\""], "example_outputs": [{"return": "\"[1, 2, 3]\""}, {"return": "\"[10, 20, 30]\""}, {"return": "\"[-1, 0, 1]\""}, {"return": "\"[5, 10, 15, 20]\""}, {"return": "\"[100, 200, 300, 400, 500]\""}, {"error": "<|EXCEPTION|> \"<class 'ValueError'>: invalid literal for int() with base 10: '1.0'\""}, {"error": "<|EXCEPTION|> \"<class 'ValueError'>: invalid literal for int() with base 10: 'a'\""}, {"error": "<|EXCEPTION|> \"<class 'ValueError'>: invalid literal for int() with base 10: 'three'\""}, {"return": "\"[]\""}, {"return": "\"[1]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[10, 20, 30]\""}, {"return": "\"[-1, -2, -3]\""}, {"return": "\"[100, 200, 300]\""}, {"return": "\"[0, 0, 0]\""}, {"return": "\"[123, 456, 789]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[-10, -20, -30]\""}, {"return": "\"[50, 60, 70]\""}, {"return": "\"[111, 222, 333]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[10, 20, 30]\""}, {"return": "\"[100, 200, 300]\""}, {"return": "\"[0, -1, -2]\""}, {"return": "\"[123, 456, 789]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[-100, -200, -300]\""}, {"return": "\"[999, 888, 777]\""}, {"return": "\"[50, 60, 70]\""}, {"return": "\"[-10, 0, 10]\""}], "parsed_inputs": [[["strtab", "['1', '2', '3']"]], [["strtab", "['10', '20', '30']"]], [["strtab", "['-1', '0', '1']"]], [["strtab", "['5', '10', '15', '20']"]], [["strtab", "['100', '200', '300', '400', '500']"]], [["strtab", "['1.0', '2.0', '3.0']"]], [["strtab", "['a', 'b', 'c']"]], [["strtab", "['1', '2', 'three']"]], [["strtab", "[]"]], [["strtab", "['1']"]]], "exec_code": "def str_to_nb(strtab):\n    return [int(value) for value in strtab]\n", "output": "The function is:\n\n```python\ndef str_to_nb(strtab):\n    return [int(value) for value in strtab]\n\n```", "choosed_example_idx": [7, 9, 3, 0, 2, 5, 6, 4], "prompt": "Function: str_to_nb\nInput: dict(strtab=['1', '2', 'three']), Output: \"<class 'ValueError'>: invalid literal for int() with base 10: 'three'\"\nInput: dict(strtab=['1']), Output: \"[1]\"\nInput: dict(strtab=['5', '10', '15', '20']), Output: \"[5, 10, 15, 20]\"\nInput: dict(strtab=['1', '2', '3']), Output: \"[1, 2, 3]\"\nInput: dict(strtab=['-1', '0', '1']), Output: \"[-1, 0, 1]\"\nInput: dict(strtab=['1.0', '2.0', '3.0']), Output: \"<class 'ValueError'>: invalid literal for int() with base 10: '1.0'\"\nInput: dict(strtab=['a', 'b', 'c']), Output: \"<class 'ValueError'>: invalid literal for int() with base 10: 'a'\"\nInput: dict(strtab=['100', '200', '300', '400', '500']), Output: \"[100, 200, 300, 400, 500]\"\n\n\nWrite a function that generates the output from the input.\n", "id": "40b58eb3c91ea9cef064dcbcd01101b581908ff1_0"}
{"example_str": "examples = [\n    dict(number=1),\n    dict(number=2),\n    dict(number=3),\n    dict(number=5),\n    dict(number=8),\n    dict(number=13),\n    dict(number=21),\n    dict(number=0),\n    dict(number=-1),  # this will print an error message and quit\n    dict(number=10),\n]\nexamples += [\n    dict(number=0),  # Edge case: 0 is not handled explicitly in the function, but should return None or an error\n    dict(number=1),  # Base case: first Fibonacci number\n    dict(number=2),  # Base case: second Fibonacci number\n    dict(number=3),  # Fibonacci number for 3\n    dict(number=5),  # Fibonacci number for 5\n    dict(number=10), # Fibonacci number for 10\n    dict(number=15), # Fibonacci number for 15\n    dict(number=20), # Fibonacci number for 20\n    dict(number=-1), # Edge case: negative input\n    dict(number=25)  # Fibonacci number for 25\n]\nexamples += [\n    dict(number=0),\n    dict(number=1),\n    dict(number=2),\n    dict(number=3),\n    dict(number=5),\n    dict(number=8),\n    dict(number=10),\n    dict(number=13),\n    dict(number=21),\n    dict(number=34),\n]", "code": "def fibonacci(number):\n    if number < 0:\n        print('Liczba nie może być ujemna')\n        quit()\n    if number == 1 or number == 2:\n        return 1\n    previousNumber = 1\n    previousNumber2 = 1\n    for i in range(2, number):\n        temp = previousNumber2\n        previousNumber2 = previousNumber\n        previousNumber = temp + previousNumber\n    return previousNumber\n", "func_name": "fibonacci", "exec_status": true, "example_inputs": ["\"{'number': 1}\"", "\"{'number': 2}\"", "\"{'number': 3}\"", "\"{'number': 5}\"", "\"{'number': 8}\"", "\"{'number': 13}\"", "\"{'number': 21}\"", "\"{'number': 0}\"", "\"{'number': -1}\"", "\"{'number': 10}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"5\""}, {"return": "\"21\""}, {"return": "\"233\""}, {"return": "\"10946\""}, {"return": "\"1\""}, {"error": "Liczba nie może być ujemna\n<|EXCEPTION|> \"<class 'TypeError'>: 'NoneType' object is not callable\""}, {"return": "\"55\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"5\""}, {"return": "\"55\""}, {"return": "\"610\""}, {"return": "\"6765\""}, {"error": "Liczba nie może być ujemna\n<|EXCEPTION|> \"<class 'TypeError'>: 'NoneType' object is not callable\""}, {"return": "\"75025\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"5\""}, {"return": "\"21\""}, {"return": "\"55\""}, {"return": "\"233\""}, {"return": "\"10946\""}, {"return": "\"5702887\""}], "parsed_inputs": [[["number", "1"]], [["number", "2"]], [["number", "3"]], [["number", "5"]], [["number", "8"]], [["number", "13"]], [["number", "21"]], [["number", "0"]], [["number", "-1"]], [["number", "10"]]], "exec_code": "def fibonacci(number):\n    if number < 0:\n        print('Liczba nie może być ujemna')\n        quit()\n    if number == 1 or number == 2:\n        return 1\n    previousNumber = 1\n    previousNumber2 = 1\n    for i in range(2, number):\n        temp = previousNumber2\n        previousNumber2 = previousNumber\n        previousNumber = temp + previousNumber\n    return previousNumber\n", "output": "The function is:\n\n```python\ndef fibonacci(number):\n    if number < 0:\n        print('Liczba nie może być ujemna')\n        quit()\n    if number == 1 or number == 2:\n        return 1\n    previousNumber = 1\n    previousNumber2 = 1\n    for i in range(2, number):\n        temp = previousNumber2\n        previousNumber2 = previousNumber\n        previousNumber = temp + previousNumber\n    return previousNumber\n\n```", "choosed_example_idx": [4, 9, 3, 8], "prompt": "Input: dict(number=8), Output: \"21\"\nInput: dict(number=10), Output: \"55\"\nInput: dict(number=5), Output: \"5\"\nInput: dict(number=-1), Output: Liczba nie może być ujemna\n \"<class 'TypeError'>: 'NoneType' object is not callable\"\n\nFunction: fibonacci\nWrite a function that generates the output from the input.\n", "id": "45b240cf6ba924c8955255f82384d0a55752acc4_0"}
{"example_str": "examples = [\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10),\n    dict(n=11),\n]\nexamples += [\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=11),\n    dict(n=13),\n    dict(n=17),\n    dict(n=19),\n    dict(n=23),\n    dict(n=29)\n]\nexamples += [\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10),\n    dict(n=11)\n]", "code": "def isPrime(n):\n    return all(n % i for i in range(2, n))\n", "func_name": "isPrime", "exec_status": true, "example_inputs": ["\"{'n': 2}\"", "\"{'n': 3}\"", "\"{'n': 4}\"", "\"{'n': 5}\"", "\"{'n': 6}\"", "\"{'n': 7}\"", "\"{'n': 8}\"", "\"{'n': 9}\"", "\"{'n': 10}\"", "\"{'n': 11}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}], "parsed_inputs": [[["n", "2"]], [["n", "3"]], [["n", "4"]], [["n", "5"]], [["n", "6"]], [["n", "7"]], [["n", "8"]], [["n", "9"]], [["n", "10"]], [["n", "11"]]], "exec_code": "def isPrime(n):\n    return all(n % i for i in range(2, n))\n", "output": "The function is:\n\n```python\ndef isPrime(n):\n    return all(n % i for i in range(2, n))\n\n```", "choosed_example_idx": [6, 0, 3, 1, 7], "prompt": "Write a function that generates the output from the input.\n\nInput: dict(n=8), Output: \"False\"\nInput: dict(n=2), Output: \"True\"\nInput: dict(n=5), Output: \"True\"\nInput: dict(n=3), Output: \"True\"\nInput: dict(n=9), Output: \"False\"\n\nFunction: isPrime\n", "id": "d8ec80992cc19f788267414aae0efb40513a5f8c_0"}
{"example_str": "examples = [\n    dict(key='DEBUG', value='True'),\n    dict(key='VERSION', value='1.0.0'),\n    dict(key='HOST', value='localhost'),\n    dict(key='PORT', value='8080'),\n    dict(key='USERNAME', value='admin'),\n    dict(key='PASSWORD', value='password123'),\n    dict(key='ENV', value='dev'),\n    dict(key='LOG_LEVEL', value='INFO'),\n    dict(key='TIMEZONE', value='UTC'),\n    dict(key='MAX_CONNECTIONS', value='100'),\n]\nexamples += [\n    dict(key=\"DEBUG\", value=\"1\"),\n    dict(key=\"VERSION\", value=\"1.0.0\"),\n    dict(key=\"ENV\", value=\"production\"),\n    dict(key=\"MAX_USERS\", value=\"500\"),\n    dict(key=\"API_KEY\", value=\"abc123xyz\"),\n    dict(key=\"TIMEOUT\", value=\"30\"),\n    dict(key=\"LOG_LEVEL\", value=\"verbose\"),\n    dict(key=\"COUNTRY\", value=\"USA\"),\n    dict(key=\"PORT\", value=\"8080\"),\n    dict(key=\"INTERVAL\", value=\"15\")\n]\nexamples += [\n    dict(key='HOST', value='localhost'),\n    dict(key='PORT', value='8080'),\n    dict(key='DB_NAME', value='test_db'),\n    dict(key='USER', value='admin'),\n    dict(key='PASSWORD', value='12345'),\n    dict(key='ENV', value='production'),\n    dict(key='DEBUG', value='true'),\n    dict(key='VERSION', value='1.0.0'),\n    dict(key='API_KEY', value='ABCD1234'),\n    dict(key='TIMEOUT', value='30')\n]", "code": "def define(key: str, value: str):\n    return ['-D', f'{key}={value}']\n", "func_name": "define", "exec_status": true, "example_inputs": ["\"{'key': 'DEBUG', 'value': 'True'}\"", "\"{'key': 'VERSION', 'value': '1.0.0'}\"", "\"{'key': 'HOST', 'value': 'localhost'}\"", "\"{'key': 'PORT', 'value': '8080'}\"", "\"{'key': 'USERNAME', 'value': 'admin'}\"", "\"{'key': 'PASSWORD', 'value': 'password123'}\"", "\"{'key': 'ENV', 'value': 'dev'}\"", "\"{'key': 'LOG_LEVEL', 'value': 'INFO'}\"", "\"{'key': 'TIMEZONE', 'value': 'UTC'}\"", "\"{'key': 'MAX_CONNECTIONS', 'value': '100'}\""], "example_outputs": [{"return": "\"['-D', 'DEBUG=True']\""}, {"return": "\"['-D', 'VERSION=1.0.0']\""}, {"return": "\"['-D', 'HOST=localhost']\""}, {"return": "\"['-D', 'PORT=8080']\""}, {"return": "\"['-D', 'USERNAME=admin']\""}, {"return": "\"['-D', 'PASSWORD=password123']\""}, {"return": "\"['-D', 'ENV=dev']\""}, {"return": "\"['-D', 'LOG_LEVEL=INFO']\""}, {"return": "\"['-D', 'TIMEZONE=UTC']\""}, {"return": "\"['-D', 'MAX_CONNECTIONS=100']\""}, {"return": "\"['-D', 'DEBUG=1']\""}, {"return": "\"['-D', 'VERSION=1.0.0']\""}, {"return": "\"['-D', 'ENV=production']\""}, {"return": "\"['-D', 'MAX_USERS=500']\""}, {"return": "\"['-D', 'API_KEY=abc123xyz']\""}, {"return": "\"['-D', 'TIMEOUT=30']\""}, {"return": "\"['-D', 'LOG_LEVEL=verbose']\""}, {"return": "\"['-D', 'COUNTRY=USA']\""}, {"return": "\"['-D', 'PORT=8080']\""}, {"return": "\"['-D', 'INTERVAL=15']\""}, {"return": "\"['-D', 'HOST=localhost']\""}, {"return": "\"['-D', 'PORT=8080']\""}, {"return": "\"['-D', 'DB_NAME=test_db']\""}, {"return": "\"['-D', 'USER=admin']\""}, {"return": "\"['-D', 'PASSWORD=12345']\""}, {"return": "\"['-D', 'ENV=production']\""}, {"return": "\"['-D', 'DEBUG=true']\""}, {"return": "\"['-D', 'VERSION=1.0.0']\""}, {"return": "\"['-D', 'API_KEY=ABCD1234']\""}, {"return": "\"['-D', 'TIMEOUT=30']\""}], "parsed_inputs": [[["key", "\"DEBUG\""], ["value", "\"True\""]], [["key", "\"VERSION\""], ["value", "\"1.0.0\""]], [["key", "\"HOST\""], ["value", "\"localhost\""]], [["key", "\"PORT\""], ["value", "\"8080\""]], [["key", "\"USERNAME\""], ["value", "\"admin\""]], [["key", "\"PASSWORD\""], ["value", "\"password123\""]], [["key", "\"ENV\""], ["value", "\"dev\""]], [["key", "\"LOG_LEVEL\""], ["value", "\"INFO\""]], [["key", "\"TIMEZONE\""], ["value", "\"UTC\""]], [["key", "\"MAX_CONNECTIONS\""], ["value", "\"100\""]]], "exec_code": "def define(key: str, value: str):\n    return ['-D', f'{key}={value}']\n", "output": "The function is:\n\n```python\ndef define(key: str, value: str):\n    return ['-D', f'{key}={value}']\n\n```", "choosed_example_idx": [1, 4, 3, 5, 7], "prompt": "Function: define\nWrite a function that generates the output from the input.\nInput: dict(key=\"VERSION\", value=\"1.0.0\"), Output: \"['-D', 'VERSION=1.0.0']\"\nInput: dict(key=\"USERNAME\", value=\"admin\"), Output: \"['-D', 'USERNAME=admin']\"\nInput: dict(key=\"PORT\", value=\"8080\"), Output: \"['-D', 'PORT=8080']\"\nInput: dict(key=\"PASSWORD\", value=\"password123\"), Output: \"['-D', 'PASSWORD=password123']\"\nInput: dict(key=\"LOG_LEVEL\", value=\"INFO\"), Output: \"['-D', 'LOG_LEVEL=INFO']\"\n\n", "id": "cd15fee66abcf3d93df4dd3a6c2294d7fc366ab1_0"}
{"example_str": "examples = [\n    dict(best_mirror='http://mirror1.example.com/archlinux/$repo/os/$arch', repos=['core', 'extra', 'community']),\n    dict(best_mirror='https://mirror2.example.net/archlinux/$repo/os/$arch', repos=['multilib', 'testing']),\n    dict(best_mirror='ftp://mirror3.example.io/archlinux/$repo/os/$arch', repos=['core', 'extra']),\n    dict(best_mirror='http://mirror4.example.com/archlinux/$repo/os/$arch', repos=['community', 'multilib']),\n    dict(best_mirror='https://mirror5.example.net/archlinux/$repo/os/$arch', repos=['testing', 'staging']),\n    dict(best_mirror='ftp://mirror6.example.io/archlinux/$repo/os/$arch', repos=['core', 'community', 'extra']),\n    dict(best_mirror='http://mirror7.example.com/archlinux/$repo/os/$arch', repos=['multilib', 'testing', 'staging']),\n    dict(best_mirror='https://mirror8.example.net/archlinux/$repo/os/$arch', repos=['core', 'extra', 'community', 'multilib']),\n    dict(best_mirror='ftp://mirror9.example.io/archlinux/$repo/os/$arch', repos=['testing', 'staging', 'community']),\n    dict(best_mirror='http://mirror10.example.com/archlinux/$repo/os/$arch', repos=['core', 'extra', 'multilib', 'testing', 'staging']),\n]\nexamples += [\n    dict(best_mirror=\"Server = http://example.com/$arch/$repo\", repos=[\"core\", \"extra\"]),\n    dict(best_mirror=\"Server = https://mirror.example.org/$arch/$repo\", repos=[\"community\", \"multilib\"]),\n    dict(best_mirror=\"Server = http://fastmirror.example.net/$arch/$repo\", repos=[\"testing\"]),\n    dict(best_mirror=\"Server = https://repo.example.com/$arch/$repo\", repos=[\"core\", \"extra\", \"community\"]),\n    dict(best_mirror=\"Server = http://download.example.org/$arch/$repo\", repos=[]),\n    dict(best_mirror=\"Server = https://bestmirror.example.io/$arch/$repo\", repos=[\"nonfree\", \"contrib\"]),\n    dict(best_mirror=\"Server = http://mirror.example.co.uk/$arch/$repo\", repos=[\"main\", \"non-free\"]),\n    dict(best_mirror=\"Server = https://examplemirror.com/$arch/$repo\", repos=[\"universe\", \"restricted\"]),\n    dict(best_mirror=\"Server = http://example.repo.net/$arch/$repo\", repos=[\"updates\", \"security\"]),\n    dict(best_mirror=\"Server = https://mirror.example.jp/$arch/$repo\", repos=[\"alpha\", \"beta\", \"stable\"])\n]\nexamples += [\n    dict(best_mirror='Server = http://mirror1.com/$arch/$repo', repos=['core', 'extra']),\n    dict(best_mirror='Server = http://mirror2.com/$arch/$repo', repos=['community', 'multilib']),\n    dict(best_mirror='Server = https://fastmirror.com/$arch/$repo', repos=['testing']),\n    dict(best_mirror='Server = https://mirror3.com/$arch/$repo', repos=['core', 'extra', 'community']),\n    dict(best_mirror='Server = http://mirror4.com/$arch/$repo', repos=['custom']),\n    dict(best_mirror='Server = https://mirror5.com/$arch/$repo', repos=['core', 'nonfree']),\n    dict(best_mirror='Server = http://mirror6.com/$arch/$repo', repos=['free', 'nonfree', 'extra']),\n    dict(best_mirror='Server = https://mirror7.com/$arch/$repo', repos=['community', 'testing', 'staging']),\n    dict(best_mirror='Server = http://mirror8.com/$arch/$repo', repos=['core']),\n    dict(best_mirror='Server = https://mirror9.com/$arch/$repo', repos=['multilib', 'custom', 'nonfree'])\n]", "code": "def _get_all_repo_mirrors(best_mirror, repos):\n    \"\"\"Reference each repository with the best mirror found.\n\n    Args:\n        best_mirror (str): The best mirror found to search the package list with\n        repos (list): List of repositories to search\n\n    Returns:\n        list: A collection of mirrors for each repo as a URL\n    \"\"\"\n    print(f'Using {best_mirror} for the following repos: {repos}')\n    mirrors = []\n    for repo in repos:\n        mirror = best_mirror.replace('Server = ', '').replace('$arch', 'x86_64'\n            ).replace('$repo', repo) + f'/{repo}.db'\n        mirrors.append(mirror)\n    return mirrors\n", "func_name": "_get_all_repo_mirrors", "exec_status": true, "example_inputs": ["\"{'best_mirror': 'http://mirror1.example.com/archlinux/$repo/os/$arch', 'repos': ['core', 'extra', 'community']}\"", "\"{'best_mirror': 'https://mirror2.example.net/archlinux/$repo/os/$arch', 'repos': ['multilib', 'testing']}\"", "\"{'best_mirror': 'ftp://mirror3.example.io/archlinux/$repo/os/$arch', 'repos': ['core', 'extra']}\"", "\"{'best_mirror': 'http://mirror4.example.com/archlinux/$repo/os/$arch', 'repos': ['community', 'multilib']}\"", "\"{'best_mirror': 'https://mirror5.example.net/archlinux/$repo/os/$arch', 'repos': ['testing', 'staging']}\"", "\"{'best_mirror': 'ftp://mirror6.example.io/archlinux/$repo/os/$arch', 'repos': ['core', 'community', 'extra']}\"", "\"{'best_mirror': 'http://mirror7.example.com/archlinux/$repo/os/$arch', 'repos': ['multilib', 'testing', 'staging']}\"", "\"{'best_mirror': 'https://mirror8.example.net/archlinux/$repo/os/$arch', 'repos': ['core', 'extra', 'community', 'multilib']}\"", "\"{'best_mirror': 'ftp://mirror9.example.io/archlinux/$repo/os/$arch', 'repos': ['testing', 'staging', 'community']}\"", "\"{'best_mirror': 'http://mirror10.example.com/archlinux/$repo/os/$arch', 'repos': ['core', 'extra', 'multilib', 'testing', 'staging']}\""], "example_outputs": [{"return": "\"['http://mirror1.example.com/archlinux/core/os/x86_64/core.db', 'http://mirror1.example.com/archlinux/extra/os/x86_64/extra.db', 'http://mirror1.example.com/archlinux/community/os/x86_64/community.db']\""}, {"return": "\"['https://mirror2.example.net/archlinux/multilib/os/x86_64/multilib.db', 'https://mirror2.example.net/archlinux/testing/os/x86_64/testing.db']\""}, {"return": "\"['ftp://mirror3.example.io/archlinux/core/os/x86_64/core.db', 'ftp://mirror3.example.io/archlinux/extra/os/x86_64/extra.db']\""}, {"return": "\"['http://mirror4.example.com/archlinux/community/os/x86_64/community.db', 'http://mirror4.example.com/archlinux/multilib/os/x86_64/multilib.db']\""}, {"return": "\"['https://mirror5.example.net/archlinux/testing/os/x86_64/testing.db', 'https://mirror5.example.net/archlinux/staging/os/x86_64/staging.db']\""}, {"return": "\"['ftp://mirror6.example.io/archlinux/core/os/x86_64/core.db', 'ftp://mirror6.example.io/archlinux/community/os/x86_64/community.db', 'ftp://mirror6.example.io/archlinux/extra/os/x86_64/extra.db']\""}, {"return": "\"['http://mirror7.example.com/archlinux/multilib/os/x86_64/multilib.db', 'http://mirror7.example.com/archlinux/testing/os/x86_64/testing.db', 'http://mirror7.example.com/archlinux/staging/os/x86_64/staging.db']\""}, {"return": "\"['https://mirror8.example.net/archlinux/core/os/x86_64/core.db', 'https://mirror8.example.net/archlinux/extra/os/x86_64/extra.db', 'https://mirror8.example.net/archlinux/community/os/x86_64/community.db', 'https://mirror8.example.net/archlinux/multilib/os/x86_64/multilib.db']\""}, {"return": "\"['ftp://mirror9.example.io/archlinux/testing/os/x86_64/testing.db', 'ftp://mirror9.example.io/archlinux/staging/os/x86_64/staging.db', 'ftp://mirror9.example.io/archlinux/community/os/x86_64/community.db']\""}, {"return": "\"['http://mirror10.example.com/archlinux/core/os/x86_64/core.db', 'http://mirror10.example.com/archlinux/extra/os/x86_64/extra.db', 'http://mirror10.example.com/archlinux/multilib/os/x86_64/multilib.db', 'http://mirror10.example.com/archlinux/testing/os/x86_64/testing.db', 'http://mirror10.example.com/archlinux/staging/os/x86_64/staging.db']\""}, {"return": "\"['http://example.com/x86_64/core/core.db', 'http://example.com/x86_64/extra/extra.db']\""}, {"return": "\"['https://mirror.example.org/x86_64/community/community.db', 'https://mirror.example.org/x86_64/multilib/multilib.db']\""}, {"return": "\"['http://fastmirror.example.net/x86_64/testing/testing.db']\""}, {"return": "\"['https://repo.example.com/x86_64/core/core.db', 'https://repo.example.com/x86_64/extra/extra.db', 'https://repo.example.com/x86_64/community/community.db']\""}, {"return": "\"[]\""}, {"return": "\"['https://bestmirror.example.io/x86_64/nonfree/nonfree.db', 'https://bestmirror.example.io/x86_64/contrib/contrib.db']\""}, {"return": "\"['http://mirror.example.co.uk/x86_64/main/main.db', 'http://mirror.example.co.uk/x86_64/non-free/non-free.db']\""}, {"return": "\"['https://examplemirror.com/x86_64/universe/universe.db', 'https://examplemirror.com/x86_64/restricted/restricted.db']\""}, {"return": "\"['http://example.repo.net/x86_64/updates/updates.db', 'http://example.repo.net/x86_64/security/security.db']\""}, {"return": "\"['https://mirror.example.jp/x86_64/alpha/alpha.db', 'https://mirror.example.jp/x86_64/beta/beta.db', 'https://mirror.example.jp/x86_64/stable/stable.db']\""}, {"return": "\"['http://mirror1.com/x86_64/core/core.db', 'http://mirror1.com/x86_64/extra/extra.db']\""}, {"return": "\"['http://mirror2.com/x86_64/community/community.db', 'http://mirror2.com/x86_64/multilib/multilib.db']\""}, {"return": "\"['https://fastmirror.com/x86_64/testing/testing.db']\""}, {"return": "\"['https://mirror3.com/x86_64/core/core.db', 'https://mirror3.com/x86_64/extra/extra.db', 'https://mirror3.com/x86_64/community/community.db']\""}, {"return": "\"['http://mirror4.com/x86_64/custom/custom.db']\""}, {"return": "\"['https://mirror5.com/x86_64/core/core.db', 'https://mirror5.com/x86_64/nonfree/nonfree.db']\""}, {"return": "\"['http://mirror6.com/x86_64/free/free.db', 'http://mirror6.com/x86_64/nonfree/nonfree.db', 'http://mirror6.com/x86_64/extra/extra.db']\""}, {"return": "\"['https://mirror7.com/x86_64/community/community.db', 'https://mirror7.com/x86_64/testing/testing.db', 'https://mirror7.com/x86_64/staging/staging.db']\""}, {"return": "\"['http://mirror8.com/x86_64/core/core.db']\""}, {"return": "\"['https://mirror9.com/x86_64/multilib/multilib.db', 'https://mirror9.com/x86_64/custom/custom.db', 'https://mirror9.com/x86_64/nonfree/nonfree.db']\""}], "parsed_inputs": [[["best_mirror", "\"http://mirror1.example.com/archlinux/$repo/os/$arch\""], ["repos", "['core', 'extra', 'community']"]], [["best_mirror", "\"https://mirror2.example.net/archlinux/$repo/os/$arch\""], ["repos", "['multilib', 'testing']"]], [["best_mirror", "\"ftp://mirror3.example.io/archlinux/$repo/os/$arch\""], ["repos", "['core', 'extra']"]], [["best_mirror", "\"http://mirror4.example.com/archlinux/$repo/os/$arch\""], ["repos", "['community', 'multilib']"]], [["best_mirror", "\"https://mirror5.example.net/archlinux/$repo/os/$arch\""], ["repos", "['testing', 'staging']"]], [["best_mirror", "\"ftp://mirror6.example.io/archlinux/$repo/os/$arch\""], ["repos", "['core', 'community', 'extra']"]], [["best_mirror", "\"http://mirror7.example.com/archlinux/$repo/os/$arch\""], ["repos", "['multilib', 'testing', 'staging']"]], [["best_mirror", "\"https://mirror8.example.net/archlinux/$repo/os/$arch\""], ["repos", "['core', 'extra', 'community', 'multilib']"]], [["best_mirror", "\"ftp://mirror9.example.io/archlinux/$repo/os/$arch\""], ["repos", "['testing', 'staging', 'community']"]], [["best_mirror", "\"http://mirror10.example.com/archlinux/$repo/os/$arch\""], ["repos", "['core', 'extra', 'multilib', 'testing', 'staging']"]]], "exec_code": "def _get_all_repo_mirrors(best_mirror, repos):\n    \"\"\"Reference each repository with the best mirror found.\n\n    Args:\n        best_mirror (str): The best mirror found to search the package list with\n        repos (list): List of repositories to search\n\n    Returns:\n        list: A collection of mirrors for each repo as a URL\n    \"\"\"\n    print(f'Using {best_mirror} for the following repos: {repos}')\n    mirrors = []\n    for repo in repos:\n        mirror = best_mirror.replace('Server = ', '').replace('$arch', 'x86_64'\n            ).replace('$repo', repo) + f'/{repo}.db'\n        mirrors.append(mirror)\n    return mirrors\n", "output": "The function is:\n\n```python\ndef _get_all_repo_mirrors(best_mirror, repos):\n    \"\"\"Reference each repository with the best mirror found.\n\n    Args:\n        best_mirror (str): The best mirror found to search the package list with\n        repos (list): List of repositories to search\n\n    Returns:\n        list: A collection of mirrors for each repo as a URL\n    \"\"\"\n    print(f'Using {best_mirror} for the following repos: {repos}')\n    mirrors = []\n    for repo in repos:\n        mirror = best_mirror.replace('Server = ', '').replace('$arch', 'x86_64'\n            ).replace('$repo', repo) + f'/{repo}.db'\n        mirrors.append(mirror)\n    return mirrors\n\n```", "choosed_example_idx": [2, 6, 7, 8, 4, 0], "prompt": "Function: _get_all_repo_mirrors\nInput: dict(best_mirror=\"ftp://mirror3.example.io/archlinux/$repo/os/$arch\", repos=['core', 'extra']), Output: \"['ftp://mirror3.example.io/archlinux/core/os/x86_64/core.db', 'ftp://mirror3.example.io/archlinux/extra/os/x86_64/extra.db']\"\nInput: dict(best_mirror=\"http://mirror7.example.com/archlinux/$repo/os/$arch\", repos=['multilib', 'testing', 'staging']), Output: \"['http://mirror7.example.com/archlinux/multilib/os/x86_64/multilib.db', 'http://mirror7.example.com/archlinux/testing/os/x86_64/testing.db', 'http://mirror7.example.com/archlinux/staging/os/x86_64/staging.db']\"\nInput: dict(best_mirror=\"https://mirror8.example.net/archlinux/$repo/os/$arch\", repos=['core', 'extra', 'community', 'multilib']), Output: \"['https://mirror8.example.net/archlinux/core/os/x86_64/core.db', 'https://mirror8.example.net/archlinux/extra/os/x86_64/extra.db', 'https://mirror8.example.net/archlinux/community/os/x86_64/community.db', 'https://mirror8.example.net/archlinux/multilib/os/x86_64/multilib.db']\"\nInput: dict(best_mirror=\"ftp://mirror9.example.io/archlinux/$repo/os/$arch\", repos=['testing', 'staging', 'community']), Output: \"['ftp://mirror9.example.io/archlinux/testing/os/x86_64/testing.db', 'ftp://mirror9.example.io/archlinux/staging/os/x86_64/staging.db', 'ftp://mirror9.example.io/archlinux/community/os/x86_64/community.db']\"\nInput: dict(best_mirror=\"https://mirror5.example.net/archlinux/$repo/os/$arch\", repos=['testing', 'staging']), Output: \"['https://mirror5.example.net/archlinux/testing/os/x86_64/testing.db', 'https://mirror5.example.net/archlinux/staging/os/x86_64/staging.db']\"\nInput: dict(best_mirror=\"http://mirror1.example.com/archlinux/$repo/os/$arch\", repos=['core', 'extra', 'community']), Output: \"['http://mirror1.example.com/archlinux/core/os/x86_64/core.db', 'http://mirror1.example.com/archlinux/extra/os/x86_64/extra.db', 'http://mirror1.example.com/archlinux/community/os/x86_64/community.db']\"\n\nWrite a function that generates the output from the input.\n", "id": "a2e08739c8c5996c41f98aada4a6cf6f35e7d101_0"}
{"example_str": "examples = [\n    dict(task={'_id': 1, 'task_name': 'Task1', 'due_date': '2022-01-01', 'done': False}),\n    dict(task={'_id': 'id1', 'task_name': 'Task2', 'due_date': '2022-01-02', 'done': True}),\n    dict(task={'_id': 2, 'task_name': 'Task3', 'due_date': '2022-01-03', 'done': False}),\n    dict(task={'_id': 'id2', 'task_name': 'Task4', 'due_date': '2022-01-04', 'done': True}),\n    dict(task={'_id': 3, 'task_name': 'Task5', 'due_date': '2022-01-05', 'done': False}),\n    dict(task={'_id': 'id3', 'task_name': 'Task6', 'due_date': '2022-01-06', 'done': True}),\n    dict(task={'_id': 4, 'task_name': 'Task7', 'due_date': '2022-01-07', 'done': False}),\n    dict(task={'_id': 'id4', 'task_name': 'Task8', 'due_date': '2022-01-08', 'done': True}),\n    dict(task={'_id': 5, 'task_name': 'Task9', 'due_date': '2022-01-09', 'done': False}),\n    dict(task={'_id': 'id5', 'task_name': 'Task10', 'due_date': '2022-01-10', 'done': True}),\n]\nexamples += [\n    dict(task={'_id': 1, 'task_name': 'Submit report', 'due_date': '2023-10-01', 'done': False}),\n    dict(task={'_id': 2, 'task_name': 'Attend meeting', 'due_date': '2023-10-02', 'done': True}),\n    dict(task={'_id': 3, 'task_name': 'Update software', 'due_date': '2023-10-03', 'done': False}),\n    dict(task={'_id': 4, 'task_name': 'Call client', 'due_date': '2023-10-04', 'done': True}),\n    dict(task={'_id': 5, 'task_name': 'Prepare presentation', 'due_date': '2023-10-05', 'done': False}),\n    dict(task={'_id': 6, 'task_name': 'Review contracts', 'due_date': '2023-10-06', 'done': True}),\n    dict(task={'_id': 7, 'task_name': 'Write proposal', 'due_date': '2023-10-07', 'done': False}),\n    dict(task={'_id': 8, 'task_name': 'Conduct survey', 'due_date': '2023-10-08', 'done': True}),\n    dict(task={'_id': 9, 'task_name': 'Plan event', 'due_date': '2023-10-09', 'done': False}),\n    dict(task={'_id': 10, 'task_name': 'Organize files', 'due_date': '2023-10-10', 'done': True})\n]\nexamples += [\n    dict(task={'_id': 1, 'task_name': 'Task 1', 'due_date': '2023-01-01', 'done': True}),\n    dict(task={'_id': 2, 'task_name': 'Task 2', 'due_date': '2023-01-02', 'done': False}),\n    dict(task={'_id': 3, 'task_name': 'Task 3', 'due_date': '2023-01-03', 'done': True}),\n    dict(task={'_id': 4, 'task_name': 'Task 4', 'due_date': '2023-01-04', 'done': False}),\n    dict(task={'_id': 5, 'task_name': 'Task 5', 'due_date': '2023-01-05', 'done': True}),\n    dict(task={'_id': 6, 'task_name': 'Task 6', 'due_date': '2023-01-06', 'done': False}),\n    dict(task={'_id': 7, 'task_name': 'Task 7', 'due_date': '2023-01-07', 'done': True}),\n    dict(task={'_id': 8, 'task_name': 'Task 8', 'due_date': '2023-01-08', 'done': False}),\n    dict(task={'_id': 9, 'task_name': 'Task 9', 'due_date': '2023-01-09', 'done': True}),\n    dict(task={'_id': 10, 'task_name': 'Task 10', 'due_date': '2023-01-10', 'done': False})\n]", "code": "def task_helper(task) ->dict:\n    \"\"\"\n    helper to make the mongo query into dict form\n    \"\"\"\n    return {'id': str(task['_id']), 'task_name': task['task_name'],\n        'due_date': task['due_date'], 'done': task['done']}\n", "func_name": "task_helper", "exec_status": true, "example_inputs": ["\"{'task': {'_id': 1, 'task_name': 'Task1', 'due_date': '2022-01-01', 'done': False}}\"", "\"{'task': {'_id': 'id1', 'task_name': 'Task2', 'due_date': '2022-01-02', 'done': True}}\"", "\"{'task': {'_id': 2, 'task_name': 'Task3', 'due_date': '2022-01-03', 'done': False}}\"", "\"{'task': {'_id': 'id2', 'task_name': 'Task4', 'due_date': '2022-01-04', 'done': True}}\"", "\"{'task': {'_id': 3, 'task_name': 'Task5', 'due_date': '2022-01-05', 'done': False}}\"", "\"{'task': {'_id': 'id3', 'task_name': 'Task6', 'due_date': '2022-01-06', 'done': True}}\"", "\"{'task': {'_id': 4, 'task_name': 'Task7', 'due_date': '2022-01-07', 'done': False}}\"", "\"{'task': {'_id': 'id4', 'task_name': 'Task8', 'due_date': '2022-01-08', 'done': True}}\"", "\"{'task': {'_id': 5, 'task_name': 'Task9', 'due_date': '2022-01-09', 'done': False}}\"", "\"{'task': {'_id': 'id5', 'task_name': 'Task10', 'due_date': '2022-01-10', 'done': True}}\""], "example_outputs": [{"return": "\"{'id': '1', 'task_name': 'Task1', 'due_date': '2022-01-01', 'done': False}\""}, {"return": "\"{'id': 'id1', 'task_name': 'Task2', 'due_date': '2022-01-02', 'done': True}\""}, {"return": "\"{'id': '2', 'task_name': 'Task3', 'due_date': '2022-01-03', 'done': False}\""}, {"return": "\"{'id': 'id2', 'task_name': 'Task4', 'due_date': '2022-01-04', 'done': True}\""}, {"return": "\"{'id': '3', 'task_name': 'Task5', 'due_date': '2022-01-05', 'done': False}\""}, {"return": "\"{'id': 'id3', 'task_name': 'Task6', 'due_date': '2022-01-06', 'done': True}\""}, {"return": "\"{'id': '4', 'task_name': 'Task7', 'due_date': '2022-01-07', 'done': False}\""}, {"return": "\"{'id': 'id4', 'task_name': 'Task8', 'due_date': '2022-01-08', 'done': True}\""}, {"return": "\"{'id': '5', 'task_name': 'Task9', 'due_date': '2022-01-09', 'done': False}\""}, {"return": "\"{'id': 'id5', 'task_name': 'Task10', 'due_date': '2022-01-10', 'done': True}\""}, {"return": "\"{'id': '1', 'task_name': 'Submit report', 'due_date': '2023-10-01', 'done': False}\""}, {"return": "\"{'id': '2', 'task_name': 'Attend meeting', 'due_date': '2023-10-02', 'done': True}\""}, {"return": "\"{'id': '3', 'task_name': 'Update software', 'due_date': '2023-10-03', 'done': False}\""}, {"return": "\"{'id': '4', 'task_name': 'Call client', 'due_date': '2023-10-04', 'done': True}\""}, {"return": "\"{'id': '5', 'task_name': 'Prepare presentation', 'due_date': '2023-10-05', 'done': False}\""}, {"return": "\"{'id': '6', 'task_name': 'Review contracts', 'due_date': '2023-10-06', 'done': True}\""}, {"return": "\"{'id': '7', 'task_name': 'Write proposal', 'due_date': '2023-10-07', 'done': False}\""}, {"return": "\"{'id': '8', 'task_name': 'Conduct survey', 'due_date': '2023-10-08', 'done': True}\""}, {"return": "\"{'id': '9', 'task_name': 'Plan event', 'due_date': '2023-10-09', 'done': False}\""}, {"return": "\"{'id': '10', 'task_name': 'Organize files', 'due_date': '2023-10-10', 'done': True}\""}, {"return": "\"{'id': '1', 'task_name': 'Task 1', 'due_date': '2023-01-01', 'done': True}\""}, {"return": "\"{'id': '2', 'task_name': 'Task 2', 'due_date': '2023-01-02', 'done': False}\""}, {"return": "\"{'id': '3', 'task_name': 'Task 3', 'due_date': '2023-01-03', 'done': True}\""}, {"return": "\"{'id': '4', 'task_name': 'Task 4', 'due_date': '2023-01-04', 'done': False}\""}, {"return": "\"{'id': '5', 'task_name': 'Task 5', 'due_date': '2023-01-05', 'done': True}\""}, {"return": "\"{'id': '6', 'task_name': 'Task 6', 'due_date': '2023-01-06', 'done': False}\""}, {"return": "\"{'id': '7', 'task_name': 'Task 7', 'due_date': '2023-01-07', 'done': True}\""}, {"return": "\"{'id': '8', 'task_name': 'Task 8', 'due_date': '2023-01-08', 'done': False}\""}, {"return": "\"{'id': '9', 'task_name': 'Task 9', 'due_date': '2023-01-09', 'done': True}\""}, {"return": "\"{'id': '10', 'task_name': 'Task 10', 'due_date': '2023-01-10', 'done': False}\""}], "parsed_inputs": [[["task", "{'_id': 1, 'task_name': 'Task1', 'due_date': '2022-01-01', 'done': False}"]], [["task", "{'_id': 'id1', 'task_name': 'Task2', 'due_date': '2022-01-02', 'done': True}"]], [["task", "{'_id': 2, 'task_name': 'Task3', 'due_date': '2022-01-03', 'done': False}"]], [["task", "{'_id': 'id2', 'task_name': 'Task4', 'due_date': '2022-01-04', 'done': True}"]], [["task", "{'_id': 3, 'task_name': 'Task5', 'due_date': '2022-01-05', 'done': False}"]], [["task", "{'_id': 'id3', 'task_name': 'Task6', 'due_date': '2022-01-06', 'done': True}"]], [["task", "{'_id': 4, 'task_name': 'Task7', 'due_date': '2022-01-07', 'done': False}"]], [["task", "{'_id': 'id4', 'task_name': 'Task8', 'due_date': '2022-01-08', 'done': True}"]], [["task", "{'_id': 5, 'task_name': 'Task9', 'due_date': '2022-01-09', 'done': False}"]], [["task", "{'_id': 'id5', 'task_name': 'Task10', 'due_date': '2022-01-10', 'done': True}"]]], "exec_code": "def task_helper(task) ->dict:\n    \"\"\"\n    helper to make the mongo query into dict form\n    \"\"\"\n    return {'id': str(task['_id']), 'task_name': task['task_name'],\n        'due_date': task['due_date'], 'done': task['done']}\n", "output": "The function is:\n\n```python\ndef task_helper(task) ->dict:\n    \"\"\"\n    helper to make the mongo query into dict form\n    \"\"\"\n    return {'id': str(task['_id']), 'task_name': task['task_name'],\n        'due_date': task['due_date'], 'done': task['done']}\n\n```", "choosed_example_idx": [7, 2, 5, 0, 3, 6, 8, 9, 1], "prompt": "Input: dict(task={'_id': 'id4', 'task_name': 'Task8', 'due_date': '2022-01-08', 'done': True}), Output: \"{'id': 'id4', 'task_name': 'Task8', 'due_date': '2022-01-08', 'done': True}\"\nInput: dict(task={'_id': 2, 'task_name': 'Task3', 'due_date': '2022-01-03', 'done': False}), Output: \"{'id': '2', 'task_name': 'Task3', 'due_date': '2022-01-03', 'done': False}\"\nInput: dict(task={'_id': 'id3', 'task_name': 'Task6', 'due_date': '2022-01-06', 'done': True}), Output: \"{'id': 'id3', 'task_name': 'Task6', 'due_date': '2022-01-06', 'done': True}\"\nInput: dict(task={'_id': 1, 'task_name': 'Task1', 'due_date': '2022-01-01', 'done': False}), Output: \"{'id': '1', 'task_name': 'Task1', 'due_date': '2022-01-01', 'done': False}\"\nInput: dict(task={'_id': 'id2', 'task_name': 'Task4', 'due_date': '2022-01-04', 'done': True}), Output: \"{'id': 'id2', 'task_name': 'Task4', 'due_date': '2022-01-04', 'done': True}\"\nInput: dict(task={'_id': 4, 'task_name': 'Task7', 'due_date': '2022-01-07', 'done': False}), Output: \"{'id': '4', 'task_name': 'Task7', 'due_date': '2022-01-07', 'done': False}\"\nInput: dict(task={'_id': 5, 'task_name': 'Task9', 'due_date': '2022-01-09', 'done': False}), Output: \"{'id': '5', 'task_name': 'Task9', 'due_date': '2022-01-09', 'done': False}\"\nInput: dict(task={'_id': 'id5', 'task_name': 'Task10', 'due_date': '2022-01-10', 'done': True}), Output: \"{'id': 'id5', 'task_name': 'Task10', 'due_date': '2022-01-10', 'done': True}\"\nInput: dict(task={'_id': 'id1', 'task_name': 'Task2', 'due_date': '2022-01-02', 'done': True}), Output: \"{'id': 'id1', 'task_name': 'Task2', 'due_date': '2022-01-02', 'done': True}\"\n\nWrite a function that generates the output from the input.\n\nFunction: task_helper\n", "id": "3c0bcafaf3014042094bff815b44aad861fa6bdd_0"}
{"example_str": "examples = [\n    dict(phoneBook=[\"119\", \"97674223\", \"1195524421\"]),\n    dict(phoneBook=[\"123\",\"456\",\"789\"]),\n    dict(phoneBook=[\"12\",\"123\",\"1234\",\"12345\"]),\n    dict(phoneBook=[\"911119\",\"97674223\",\"1195524421\"]),\n    dict(phoneBook=[\"123\",\"456\",\"789\",\"901\"]),\n    dict(phoneBook=[\"1\",\"12\",\"123\"]),\n    dict(phoneBook=[\"12345\",\"1234\",\"123\",\"12\",\"1\"]),\n    dict(phoneBook=[\"113\",\"12340\",\"12341234\",\"12345\",\"98346\"]),\n    dict(phoneBook=[\"552\",\"5522\",\"55221\",\"552211\"]),\n    dict(phoneBook=[\"552\",\"5522\",\"55221\",\"552211\",\"552212\"]),\n]\nexamples += [\n    dict(phoneBook=[\"123\", \"456\", \"789\"]),\n    dict(phoneBook=[\"123\", \"1234\", \"567\"]),\n    dict(phoneBook=[\"12\", \"12\", \"123\"]),\n    dict(phoneBook=[\"987\", \"9876\", \"98765\"]),\n    dict(phoneBook=[\"111\", \"112\", \"113\"]),\n    dict(phoneBook=[\"5555\", \"555\", \"55555\"]),\n    dict(phoneBook=[\"101\", \"102\", \"103\", \"104\"]),\n    dict(phoneBook=[\"202\", \"2021\", \"2022\"]),\n    dict(phoneBook=[\"303\", \"3030\", \"30300\"]),\n    dict(phoneBook=[\"404\", \"405\", \"406\", \"407\"])\n]\nexamples += [\n    dict(phoneBook=[\"123\", \"456\", \"789\"]),\n    dict(phoneBook=[\"12\", \"123\", \"1234\"]),\n    dict(phoneBook=[\"101\", \"102\", \"103\"]),\n    dict(phoneBook=[\"900\", \"800\", \"700\", \"600\"]),\n    dict(phoneBook=[\"123\", \"456\", \"123456\"]),\n    dict(phoneBook=[\"555\"]),\n    dict(phoneBook=[\"123\", \"234\", \"345\", \"456\"]),\n    dict(phoneBook=[\"111\", \"112\", \"113\", \"114\"]),\n    dict(phoneBook=[\"987654\", \"987\"]),\n    dict(phoneBook=[\"1230\", \"1231\", \"1232\", \"1233\"])\n]", "code": "def solution(phoneBook):\n    phoneBook = sorted(phoneBook)\n    for p1, p2 in zip(phoneBook, phoneBook[1:]):\n        if p2.startswith(p1):\n            return False\n    return True\n", "func_name": "solution", "exec_status": true, "example_inputs": ["\"{'phoneBook': ['119', '97674223', '1195524421']}\"", "\"{'phoneBook': ['123', '456', '789']}\"", "\"{'phoneBook': ['12', '123', '1234', '12345']}\"", "\"{'phoneBook': ['911119', '97674223', '1195524421']}\"", "\"{'phoneBook': ['123', '456', '789', '901']}\"", "\"{'phoneBook': ['1', '12', '123']}\"", "\"{'phoneBook': ['12345', '1234', '123', '12', '1']}\"", "\"{'phoneBook': ['113', '12340', '12341234', '12345', '98346']}\"", "\"{'phoneBook': ['552', '5522', '55221', '552211']}\"", "\"{'phoneBook': ['552', '5522', '55221', '552211', '552212']}\""], "example_outputs": [{"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}], "parsed_inputs": [[["phoneBook", "['119', '97674223', '1195524421']"]], [["phoneBook", "['123', '456', '789']"]], [["phoneBook", "['12', '123', '1234', '12345']"]], [["phoneBook", "['911119', '97674223', '1195524421']"]], [["phoneBook", "['123', '456', '789', '901']"]], [["phoneBook", "['1', '12', '123']"]], [["phoneBook", "['12345', '1234', '123', '12', '1']"]], [["phoneBook", "['113', '12340', '12341234', '12345', '98346']"]], [["phoneBook", "['552', '5522', '55221', '552211']"]], [["phoneBook", "['552', '5522', '55221', '552211', '552212']"]]], "exec_code": "def solution(phoneBook):\n    phoneBook = sorted(phoneBook)\n    for p1, p2 in zip(phoneBook, phoneBook[1:]):\n        if p2.startswith(p1):\n            return False\n    return True\n", "output": "The function is:\n\n```python\ndef solution(phoneBook):\n    phoneBook = sorted(phoneBook)\n    for p1, p2 in zip(phoneBook, phoneBook[1:]):\n        if p2.startswith(p1):\n            return False\n    return True\n\n```", "choosed_example_idx": [4, 8, 9, 1, 5, 3, 6, 0, 2], "prompt": "Input: dict(phoneBook=['123', '456', '789', '901']), Output: \"True\"\nInput: dict(phoneBook=['552', '5522', '55221', '552211']), Output: \"False\"\nInput: dict(phoneBook=['552', '5522', '55221', '552211', '552212']), Output: \"False\"\nInput: dict(phoneBook=['123', '456', '789']), Output: \"True\"\nInput: dict(phoneBook=['1', '12', '123']), Output: \"False\"\nInput: dict(phoneBook=['911119', '97674223', '1195524421']), Output: \"True\"\nInput: dict(phoneBook=['12345', '1234', '123', '12', '1']), Output: \"False\"\nInput: dict(phoneBook=['119', '97674223', '1195524421']), Output: \"False\"\nInput: dict(phoneBook=['12', '123', '1234', '12345']), Output: \"False\"\n\n\nFunction: solution\nWrite a function that generates the output from the input.\n\n", "id": "4a2422ff59f0227aff7ed76a8dd265ec0ecf3b12_0"}
{"example_str": "examples = [\n    dict(rows=[[1, 2], [3, 4]], header=['Col1', 'Col2']),\n    dict(rows=[[1, 2, 3], [4, 5, 6]], header=['A', 'B', 'C']),\n    dict(rows=[]),\n    dict(rows=[[1, 2], [3, 4]]),\n    dict(rows=[[1, 2, 3], [4, 5, 6]], header=['X', 'Y', 'Z']),\n    dict(rows=[[1, 2], [3, 4]], header=[]),\n    dict(rows=[[1, 2, 3, 4], [5, 6, 7, 8]], header=['W', 'X', 'Y', 'Z']),\n    dict(rows=[[1], [2], [3]]),\n    dict(rows=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], header=['A', 'B', 'C']),\n    dict(rows=[[1, 2], [3, 4], [5, 6]], header=['Operation', 'OPS']),\n]\nexamples += [\n    dict(rows=[[1, 2], [3, 4]], header=['Number', 'Square']),\n    dict(rows=[[10, 100], [20, 400], [30, 900]], header=['Value', 'Square']),\n    dict(rows=[['John', 30], ['Jane', 25]], header=['Name', 'Age']),\n    dict(rows=[[5, 25, 125], [6, 36, 216]], header=['Number', 'Square', 'Cube']),\n    dict(rows=[['Apple', 150], ['Banana', 200]], header=['Fruit', 'Calories']),\n    dict(rows=[[True, False], [False, True]], header=['A', 'B']),\n    dict(rows=[[123.456, 789.123], [456.789, 123.456]], header=['Decimal1', 'Decimal2']),\n    dict(rows=[['USA', 'Washington'], ['Canada', 'Ottawa']], header=['Country', 'Capital']),\n    dict(rows=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], header=['X', 'Y', 'Z']),\n    dict(rows=[['Python', 'Programming'], ['Java', 'Development']], header=['Language', 'Usage'])\n]\nexamples += [\n    dict(rows=[[1, 2], [3, 4]], header=['Num1', 'Num2']),\n    dict(rows=[[10, 20, 30], [40, 50, 60]], header=['Col1', 'Col2', 'Col3']),\n    dict(rows=[['apple', 'banana'], ['cherry', 'date']], header=['Fruit A', 'Fruit B']),\n    dict(rows=[[100]], header=['Single']),\n    dict(rows=[[1, 2], [3, 4], [5, 6]], header=['First', 'Second']),\n    dict(rows=[[0.1, 0.2], [0.3, 0.4]], header=['Decimal1', 'Decimal2']),\n    dict(rows=[['John', 'Doe'], ['Jane', 'Doe']], header=['First Name', 'Last Name']),\n    dict(rows=[[True, False], [False, True]], header=['Boolean1', 'Boolean2']),\n    dict(rows=[[None, 'None'], ['Empty', '']], header=['Null Value', 'Empty String']),\n    dict(rows=[[1, 2, 3, 4], [5, 6, 7, 8]], header=['Q1', 'Q2', 'Q3', 'Q4'])\n]", "code": "def print_table(rows, header=['Operation', 'OPS']):\n    \"\"\"Simple helper function to print a list of lists as a table\n\n    :param rows: a :class:`list` of :class:`list` containing the data to be printed. Each entry in the list\n    represents an individual row\n    :param input: (optional) a :class:`list` containing the header of the table\n    \"\"\"\n    if len(rows) == 0:\n        return\n    col_max = [(max([len(str(val[i])) for val in rows]) + 3) for i in range\n        (len(rows[0]))]\n    row_format = ''.join([('{:<' + str(length) + '}') for length in col_max])\n    if len(header) > 0:\n        print(row_format.format(*header))\n        print(row_format.format(*[('-' * (val - 2)) for val in col_max]))\n    for row in rows:\n        print(row_format.format(*row))\n    print(row_format.format(*[('-' * (val - 3)) for val in col_max]))\n", "func_name": "print_table", "exec_status": true, "example_inputs": ["\"{'rows': [[1, 2], [3, 4]], 'header': ['Col1', 'Col2']}\"", "\"{'rows': [[1, 2, 3], [4, 5, 6]], 'header': ['A', 'B', 'C']}\"", "\"{'rows': []}\"", "\"{'rows': [[1, 2], [3, 4]]}\"", "\"{'rows': [[1, 2, 3], [4, 5, 6]], 'header': ['X', 'Y', 'Z']}\"", "\"{'rows': [[1, 2], [3, 4]], 'header': []}\"", "\"{'rows': [[1, 2, 3, 4], [5, 6, 7, 8]], 'header': ['W', 'X', 'Y', 'Z']}\"", "\"{'rows': [[1], [2], [3]]}\"", "\"{'rows': [[1, 2, 3], [4, 5, 6], [7, 8, 9]], 'header': ['A', 'B', 'C']}\"", "\"{'rows': [[1, 2], [3, 4], [5, 6]], 'header': ['Operation', 'OPS']}\""], "example_outputs": [{"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"error": "Null ValueEmpty String\n------  -----  \n<|EXCEPTION|> \"<class 'TypeError'>: unsupported format string passed to NoneType.__format__\""}, {"return": "\"None\""}], "parsed_inputs": [[["rows", "[[1, 2], [3, 4]]"], ["header", "['Col1', 'Col2']"]], [["rows", "[[1, 2, 3], [4, 5, 6]]"], ["header", "['A', 'B', 'C']"]], [["rows", "[]"]], [["rows", "[[1, 2], [3, 4]]"]], [["rows", "[[1, 2, 3], [4, 5, 6]]"], ["header", "['X', 'Y', 'Z']"]], [["rows", "[[1, 2], [3, 4]]"], ["header", "[]"]], [["rows", "[[1, 2, 3, 4], [5, 6, 7, 8]]"], ["header", "['W', 'X', 'Y', 'Z']"]], [["rows", "[[1], [2], [3]]"]], [["rows", "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]"], ["header", "['A', 'B', 'C']"]], [["rows", "[[1, 2], [3, 4], [5, 6]]"], ["header", "['Operation', 'OPS']"]]], "exec_code": "def print_table(rows, header=['Operation', 'OPS']):\n    \"\"\"Simple helper function to print a list of lists as a table\n\n    :param rows: a :class:`list` of :class:`list` containing the data to be printed. Each entry in the list\n    represents an individual row\n    :param input: (optional) a :class:`list` containing the header of the table\n    \"\"\"\n    if len(rows) == 0:\n        return\n    col_max = [(max([len(str(val[i])) for val in rows]) + 3) for i in range\n        (len(rows[0]))]\n    row_format = ''.join([('{:<' + str(length) + '}') for length in col_max])\n    if len(header) > 0:\n        print(row_format.format(*header))\n        print(row_format.format(*[('-' * (val - 2)) for val in col_max]))\n    for row in rows:\n        print(row_format.format(*row))\n    print(row_format.format(*[('-' * (val - 3)) for val in col_max]))\n", "output": "The function is:\n\n```python\ndef print_table(rows, header=['Operation', 'OPS']):\n    \"\"\"Simple helper function to print a list of lists as a table\n\n    :param rows: a :class:`list` of :class:`list` containing the data to be printed. Each entry in the list\n    represents an individual row\n    :param input: (optional) a :class:`list` containing the header of the table\n    \"\"\"\n    if len(rows) == 0:\n        return\n    col_max = [(max([len(str(val[i])) for val in rows]) + 3) for i in range\n        (len(rows[0]))]\n    row_format = ''.join([('{:<' + str(length) + '}') for length in col_max])\n    if len(header) > 0:\n        print(row_format.format(*header))\n        print(row_format.format(*[('-' * (val - 2)) for val in col_max]))\n    for row in rows:\n        print(row_format.format(*row))\n    print(row_format.format(*[('-' * (val - 3)) for val in col_max]))\n\n```", "choosed_example_idx": [6, 3, 5, 4, 2, 1], "prompt": "Function: print_table\nWrite a function that generates the output from the input.\nInput: dict(rows=[[1, 2, 3, 4], [5, 6, 7, 8]], header=['W', 'X', 'Y', 'Z']), Output: \"None\"\nInput: dict(rows=[[1, 2], [3, 4]]), Output: \"None\"\nInput: dict(rows=[[1, 2], [3, 4]], header=[]), Output: \"None\"\nInput: dict(rows=[[1, 2, 3], [4, 5, 6]], header=['X', 'Y', 'Z']), Output: \"None\"\nInput: dict(rows=[]), Output: \"None\"\nInput: dict(rows=[[1, 2, 3], [4, 5, 6]], header=['A', 'B', 'C']), Output: \"None\"\n\n", "id": "001f43d42f9cc028689ea0328adea24911720026_0"}
{"example_str": "examples = [\n    dict(nums=[-1, 0, 1, 2, -1, -4]),\n    dict(nums=[0, 1, 1]),\n    dict(nums=[-2, 0, 0, 2, 2]),\n    dict(nums=[-5, 1, -2, -1, 3]),\n    dict(nums=[1, 2, 3, 4, 5]),\n    dict(nums=[-10, -5, 0, 3, 7]),\n    dict(nums=[-1, 0, 1, 0]),\n    dict(nums=[-2, 0, 1, 1, 2]),\n    dict(nums=[3, -2, 1, 0]),\n    dict(nums=[-5, -3, -2, -1, 0, 1, 2, 3]),\n]\nexamples += [\n    dict(nums=[-1, 0, 1, 2, -1, -4]),\n    dict(nums=[0, 0, 0, 0]),\n    dict(nums=[-2, -1, 1, 2]),\n    dict(nums=[3, -2, 1, 0]),\n    dict(nums=[-5, 1, 10, 4, -10]),\n    dict(nums=[-20, 5, 15, 0, 20]),\n    dict(nums=[-3, -3, 2, 3, 5, 6]),\n    dict(nums=[1, 2, 3, 4, 5]),\n    dict(nums=[-1, -1, 2, 2, -2, -2]),\n    dict(nums=[-4, -2, -2, 0, 1, 2, 3, 4, 5, 6])\n]\nexamples += [\n    dict(nums=[-1, 0, 1, 2, -1, -4]),\n    dict(nums=[0, 0, 0, 0]),\n    dict(nums=[-2, -1, 1, 2]),\n    dict(nums=[3, -2, -1, 0, 1, 2]),\n    dict(nums=[-5, 1, 10, -2, 8]),\n    dict(nums=[-3, -1, 2, 1, -1, 0]),\n    dict(nums=[-10, 5, 3, -6, 1, 2]),\n    dict(nums=[1, 2, -3, 4, -2, -1]),\n    dict(nums=[-1, -1, 2, -2, 0]),\n    dict(nums=[30, -10, -20, 0, 40])\n]", "code": "def ThreeSum(nums):\n    nums.sort()\n    res = []\n    for i in range(len(nums) - 2):\n        if nums[i] > 0:\n            break\n        if nums[i] == nums[i - 1] and i > 0:\n            continue\n        lower = i + 1\n        upper = len(nums) - 1\n        while lower < upper:\n            s = nums[i] + nums[lower] + nums[upper]\n            if s == 0:\n                res.append((nums[i], nums[lower], nums[upper]))\n            if s <= 0:\n                lower += 1\n                while nums[lower] == nums[lower - 1] and lower < upper:\n                    lower += 1\n            else:\n                upper -= 1\n    return res\n", "func_name": "ThreeSum", "exec_status": true, "example_inputs": ["\"{'nums': [-1, 0, 1, 2, -1, -4]}\"", "\"{'nums': [0, 1, 1]}\"", "\"{'nums': [-2, 0, 0, 2, 2]}\"", "\"{'nums': [-5, 1, -2, -1, 3]}\"", "\"{'nums': [1, 2, 3, 4, 5]}\"", "\"{'nums': [-10, -5, 0, 3, 7]}\"", "\"{'nums': [-1, 0, 1, 0]}\"", "\"{'nums': [-2, 0, 1, 1, 2]}\"", "\"{'nums': [3, -2, 1, 0]}\"", "\"{'nums': [-5, -3, -2, -1, 0, 1, 2, 3]}\""], "example_outputs": [{"return": "\"[(-1, -1, 2), (-1, 0, 1)]\""}, {"return": "\"[]\""}, {"return": "\"[(-2, 0, 2)]\""}, {"return": "\"[(-2, -1, 3)]\""}, {"return": "\"[]\""}, {"return": "\"[(-10, 3, 7)]\""}, {"return": "\"[(-1, 0, 1)]\""}, {"return": "\"[(-2, 0, 2), (-2, 1, 1)]\""}, {"return": "\"[]\""}, {"return": "\"[(-5, 2, 3), (-3, 0, 3), (-3, 1, 2), (-2, -1, 3), (-2, 0, 2), (-1, 0, 1)]\""}, {"return": "\"[(-1, -1, 2), (-1, 0, 1)]\""}, {"return": "\"[(0, 0, 0)]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[(-5, 1, 4)]\""}, {"return": "\"[(-20, 0, 20), (-20, 5, 15)]\""}, {"return": "\"[(-3, -3, 6)]\""}, {"return": "\"[]\""}, {"return": "\"[(-1, -1, 2)]\""}, {"return": "\"[(-4, -2, 6), (-4, 0, 4), (-4, 1, 3), (-2, -2, 4), (-2, 0, 2)]\""}, {"return": "\"[(-1, -1, 2), (-1, 0, 1)]\""}, {"return": "\"[(0, 0, 0)]\""}, {"return": "\"[]\""}, {"return": "\"[(-2, -1, 3), (-2, 0, 2), (-1, 0, 1)]\""}, {"return": "\"[]\""}, {"return": "\"[(-3, 1, 2), (-1, -1, 2), (-1, 0, 1)]\""}, {"return": "\"[(-6, 1, 5)]\""}, {"return": "\"[(-3, -1, 4), (-3, 1, 2)]\""}, {"return": "\"[(-2, 0, 2), (-1, -1, 2)]\""}, {"return": "\"[(-20, -10, 30)]\""}], "parsed_inputs": [[["nums", "[-1, 0, 1, 2, -1, -4]"]], [["nums", "[0, 1, 1]"]], [["nums", "[-2, 0, 0, 2, 2]"]], [["nums", "[-5, 1, -2, -1, 3]"]], [["nums", "[1, 2, 3, 4, 5]"]], [["nums", "[-10, -5, 0, 3, 7]"]], [["nums", "[-1, 0, 1, 0]"]], [["nums", "[-2, 0, 1, 1, 2]"]], [["nums", "[3, -2, 1, 0]"]], [["nums", "[-5, -3, -2, -1, 0, 1, 2, 3]"]]], "exec_code": "def ThreeSum(nums):\n    nums.sort()\n    res = []\n    for i in range(len(nums) - 2):\n        if nums[i] > 0:\n            break\n        if nums[i] == nums[i - 1] and i > 0:\n            continue\n        lower = i + 1\n        upper = len(nums) - 1\n        while lower < upper:\n            s = nums[i] + nums[lower] + nums[upper]\n            if s == 0:\n                res.append((nums[i], nums[lower], nums[upper]))\n            if s <= 0:\n                lower += 1\n                while nums[lower] == nums[lower - 1] and lower < upper:\n                    lower += 1\n            else:\n                upper -= 1\n    return res\n", "output": "The function is:\n\n```python\ndef ThreeSum(nums):\n    nums.sort()\n    res = []\n    for i in range(len(nums) - 2):\n        if nums[i] > 0:\n            break\n        if nums[i] == nums[i - 1] and i > 0:\n            continue\n        lower = i + 1\n        upper = len(nums) - 1\n        while lower < upper:\n            s = nums[i] + nums[lower] + nums[upper]\n            if s == 0:\n                res.append((nums[i], nums[lower], nums[upper]))\n            if s <= 0:\n                lower += 1\n                while nums[lower] == nums[lower - 1] and lower < upper:\n                    lower += 1\n            else:\n                upper -= 1\n    return res\n\n```", "choosed_example_idx": [4, 9, 3], "prompt": "Input: dict(nums=[1, 2, 3, 4, 5]), Output: \"[]\"\nInput: dict(nums=[-5, -3, -2, -1, 0, 1, 2, 3]), Output: \"[(-5, 2, 3), (-3, 0, 3), (-3, 1, 2), (-2, -1, 3), (-2, 0, 2), (-1, 0, 1)]\"\nInput: dict(nums=[-5, 1, -2, -1, 3]), Output: \"[(-2, -1, 3)]\"\n\n\nFunction: ThreeSum\nWrite a function that generates the output from the input.\n\n", "id": "b826bd3f447a08899aaaeb08f7a9ca387d7718ae_0"}
{"example_str": "examples = [\n    dict(pw=111111),\n    dict(pw=223450),\n    dict(pw=123789),\n    dict(pw=122345),\n    dict(pw=111123),\n    dict(pw=135679),\n    dict(pw=124433),\n    dict(pw=1111111),\n    dict(pw=123321),\n    dict(pw=145678),\n]\nexamples += [\n    dict(pw=112233),  # Valid: increasing sequence, exactly two 1s, 2s, and 3s\n    dict(pw=123444),  # Invalid: 444 is a larger group, not a pair\n    dict(pw=111122),  # Valid: increasing sequence, exactly two 2s\n    dict(pw=223450),  # Invalid: decreasing sequence (50)\n    dict(pw=123789),  # Invalid: no double\n    dict(pw=135679),  # Invalid: no double\n    dict(pw=111111),  # Invalid: all same, no valid double\n    dict(pw=122345),  # Valid: increasing sequence, exactly two 2s\n    dict(pw=112222),  # Invalid: 2222 is a larger group, not a pair\n    dict(pw=123455),  # Valid: increasing sequence, exactly two 5s\n]\nexamples += [\n    dict(pw=112233),  # True: 112233 is non-decreasing and has exactly two 1s, two 2s, and two 3s\n    dict(pw=123444),  # False: 123444 is non-decreasing but the double 44 is part of a larger group of 444\n    dict(pw=111122),  # True: 111122 is non-decreasing and has exactly two 2s\n    dict(pw=223450),  # False: 223450 is not non-decreasing (5 > 0)\n    dict(pw=123789),  # False: 123789 is non-decreasing but has no doubles\n    dict(pw=135679),  # False: 135679 is non-decreasing but has no doubles\n    dict(pw=111111),  # False: 111111 is non-decreasing but the doubles are part of a larger group\n    dict(pw=122345),  # True: 122345 is non-decreasing and has exactly two 2s\n    dict(pw=112233),  # True: 112233 is non-decreasing and has exactly two 1s, two 2s, and two 3s\n    dict(pw=223344),  # True: 223344 is non-decreasing and has exactly two 2s, two 3s, and two 4s\n]", "code": "def valid(pw):\n    as_str = '%s' % pw\n    has_double = False\n    for i in range(len(as_str) - 1):\n        if int(as_str[i]) > int(as_str[i + 1]):\n            return False\n    for i in range(len(as_str) - 1):\n        c0 = as_str[i - 1] if i > 0 else None\n        c1 = as_str[i]\n        c2 = as_str[i + 1]\n        c3 = as_str[i + 2] if i < len(as_str) - 2 else None\n        if c1 == c2:\n            if c1 != c0 and c1 != c3:\n                has_double = True\n    return has_double\n", "func_name": "valid", "exec_status": true, "example_inputs": ["\"{'pw': 111111}\"", "\"{'pw': 223450}\"", "\"{'pw': 123789}\"", "\"{'pw': 122345}\"", "\"{'pw': 111123}\"", "\"{'pw': 135679}\"", "\"{'pw': 124433}\"", "\"{'pw': 1111111}\"", "\"{'pw': 123321}\"", "\"{'pw': 145678}\""], "example_outputs": [{"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}], "parsed_inputs": [[["pw", "111111"]], [["pw", "223450"]], [["pw", "123789"]], [["pw", "122345"]], [["pw", "111123"]], [["pw", "135679"]], [["pw", "124433"]], [["pw", "1111111"]], [["pw", "123321"]], [["pw", "145678"]]], "exec_code": "def valid(pw):\n    as_str = '%s' % pw\n    has_double = False\n    for i in range(len(as_str) - 1):\n        if int(as_str[i]) > int(as_str[i + 1]):\n            return False\n    for i in range(len(as_str) - 1):\n        c0 = as_str[i - 1] if i > 0 else None\n        c1 = as_str[i]\n        c2 = as_str[i + 1]\n        c3 = as_str[i + 2] if i < len(as_str) - 2 else None\n        if c1 == c2:\n            if c1 != c0 and c1 != c3:\n                has_double = True\n    return has_double\n", "output": "The function is:\n\n```python\ndef valid(pw):\n    as_str = '%s' % pw\n    has_double = False\n    for i in range(len(as_str) - 1):\n        if int(as_str[i]) > int(as_str[i + 1]):\n            return False\n    for i in range(len(as_str) - 1):\n        c0 = as_str[i - 1] if i > 0 else None\n        c1 = as_str[i]\n        c2 = as_str[i + 1]\n        c3 = as_str[i + 2] if i < len(as_str) - 2 else None\n        if c1 == c2:\n            if c1 != c0 and c1 != c3:\n                has_double = True\n    return has_double\n\n```", "choosed_example_idx": [5, 4, 7, 8], "prompt": "Write a function that generates the output from the input.\nFunction: valid\n\nInput: dict(pw=135679), Output: \"False\"\nInput: dict(pw=111123), Output: \"False\"\nInput: dict(pw=1111111), Output: \"False\"\nInput: dict(pw=123321), Output: \"False\"\n\n", "id": "66321d44de6ec8ab617ab563bebddd708a00b9c1_0"}
{"example_str": "examples = [\n    dict(typeNum=1, valueDic={1: 'a', 2: 'b'}),\n    dict(typeNum='a', valueDic={'a': 1, 'b': 2}),\n    dict(typeNum=3, valueDic={1: 'a', 2: 'b'}),\n    dict(typeNum='c', valueDic={'a': 1, 'b': 2}),\n    dict(typeNum=1, valueDic={}),\n    dict(typeNum='a', valueDic={}),\n    dict(typeNum=(1, 2), valueDic={(1, 2): 'a', (3, 4): 'b'}),\n    dict(typeNum=(3, 4), valueDic={(1, 2): 'a', (3, 4): 'b'}),\n    dict(typeNum=True, valueDic={True: 'a', False: 'b'}),\n    dict(typeNum=False, valueDic={True: 'a', False: 'b'}),\n]\nexamples += [\n    dict(typeNum=1, valueDic={1: 100, 2: 200}),\n    dict(typeNum=2, valueDic={1: 100, 2: 200}),\n    dict(typeNum=3, valueDic={1: 100, 2: 200}),\n    dict(typeNum='a', valueDic={'a': 300, 'b': 400}),\n    dict(typeNum='b', valueDic={'a': 300, 'b': 400}),\n    dict(typeNum='c', valueDic={'a': 300, 'b': 400}),\n    dict(typeNum=0, valueDic={0: 500, 1: 600}),\n    dict(typeNum=1, valueDic={0: 500, 1: 600}),\n    dict(typeNum=2, valueDic={0: 500, 1: 600}),\n    dict(typeNum='x', valueDic={'x': 700, 'y': 800, 'z': 900})\n]\nexamples += [\n    dict(typeNum=1, valueDic={1: 100, 2: 200}),\n    dict(typeNum=2, valueDic={1: 100, 2: 200}),\n    dict(typeNum=3, valueDic={1: 100, 2: 200}),\n    dict(typeNum='a', valueDic={'a': 300, 'b': 400}),\n    dict(typeNum='b', valueDic={'a': 300, 'b': 400}),\n    dict(typeNum='c', valueDic={'a': 300, 'b': 400}),\n    dict(typeNum=1, valueDic={}),\n    dict(typeNum='x', valueDic={'y': 500, 'z': 600}),\n    dict(typeNum=5, valueDic={5: 555}),\n    dict(typeNum='key', valueDic={'key': 'value', 'lock': 'secure'})\n]", "code": "def if_value_in(typeNum, valueDic):\n    if typeNum in valueDic:\n        outValue = valueDic[typeNum]\n    else:\n        outValue = 0\n    return outValue\n", "func_name": "if_value_in", "exec_status": true, "example_inputs": ["\"{'typeNum': 1, 'valueDic': {1: 'a', 2: 'b'}}\"", "\"{'typeNum': 'a', 'valueDic': {'a': 1, 'b': 2}}\"", "\"{'typeNum': 3, 'valueDic': {1: 'a', 2: 'b'}}\"", "\"{'typeNum': 'c', 'valueDic': {'a': 1, 'b': 2}}\"", "\"{'typeNum': 1, 'valueDic': {}}\"", "\"{'typeNum': 'a', 'valueDic': {}}\"", "\"{'typeNum': (1, 2), 'valueDic': {(1, 2): 'a', (3, 4): 'b'}}\"", "\"{'typeNum': (3, 4), 'valueDic': {(1, 2): 'a', (3, 4): 'b'}}\"", "\"{'typeNum': True, 'valueDic': {True: 'a', False: 'b'}}\"", "\"{'typeNum': False, 'valueDic': {True: 'a', False: 'b'}}\""], "example_outputs": [{"return": "\"'a'\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"'a'\""}, {"return": "\"'b'\""}, {"return": "\"'a'\""}, {"return": "\"'b'\""}, {"return": "\"100\""}, {"return": "\"200\""}, {"return": "\"0\""}, {"return": "\"300\""}, {"return": "\"400\""}, {"return": "\"0\""}, {"return": "\"500\""}, {"return": "\"600\""}, {"return": "\"0\""}, {"return": "\"700\""}, {"return": "\"100\""}, {"return": "\"200\""}, {"return": "\"0\""}, {"return": "\"300\""}, {"return": "\"400\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"555\""}, {"return": "\"'value'\""}], "parsed_inputs": [[["typeNum", "1"], ["valueDic", "{1: 'a', 2: 'b'}"]], [["typeNum", "\"a\""], ["valueDic", "{'a': 1, 'b': 2}"]], [["typeNum", "3"], ["valueDic", "{1: 'a', 2: 'b'}"]], [["typeNum", "\"c\""], ["valueDic", "{'a': 1, 'b': 2}"]], [["typeNum", "1"], ["valueDic", "{}"]], [["typeNum", "\"a\""], ["valueDic", "{}"]], [["typeNum", "(1, 2)"], ["valueDic", "{(1, 2): 'a', (3, 4): 'b'}"]], [["typeNum", "(3, 4)"], ["valueDic", "{(1, 2): 'a', (3, 4): 'b'}"]], [["typeNum", "True"], ["valueDic", "{True: 'a', False: 'b'}"]], [["typeNum", "False"], ["valueDic", "{True: 'a', False: 'b'}"]]], "exec_code": "def if_value_in(typeNum, valueDic):\n    if typeNum in valueDic:\n        outValue = valueDic[typeNum]\n    else:\n        outValue = 0\n    return outValue\n", "output": "The function is:\n\n```python\ndef if_value_in(typeNum, valueDic):\n    if typeNum in valueDic:\n        outValue = valueDic[typeNum]\n    else:\n        outValue = 0\n    return outValue\n\n```", "choosed_example_idx": [0, 6, 8, 5, 1, 9, 7], "prompt": "Write a function that generates the output from the input.\n\n\nInput: dict(typeNum=1, valueDic={1: 'a', 2: 'b'}), Output: \"'a'\"\nInput: dict(typeNum=(1, 2), valueDic={(1, 2): 'a', (3, 4): 'b'}), Output: \"'a'\"\nInput: dict(typeNum=True, valueDic={True: 'a', False: 'b'}), Output: \"'a'\"\nInput: dict(typeNum=\"a\", valueDic={}), Output: \"0\"\nInput: dict(typeNum=\"a\", valueDic={'a': 1, 'b': 2}), Output: \"1\"\nInput: dict(typeNum=False, valueDic={True: 'a', False: 'b'}), Output: \"'b'\"\nInput: dict(typeNum=(3, 4), valueDic={(1, 2): 'a', (3, 4): 'b'}), Output: \"'b'\"\n\nFunction: if_value_in\n", "id": "25d1f287a801c4b8b6fe383b14d4477d2b9967dd_0"}
{"example_str": "examples = [\n    dict(text=\"123\"),\n    dict(text=\"abc\"),\n    dict(text=\"123abc\"),\n    dict(text=\"\"),\n    dict(text=\"   \"),\n    dict(text=\"-123\"),\n    dict(text=\"+123\"),\n    dict(text=\"123.45\"),\n    dict(text=\"0x123\"),\n    dict(text=\"abcdefg\")\n]\nexamples += [\n    dict(text=\"123\"),        # All digits, should return integer 123\n    dict(text=\"hello\"),      # No digits, should return string \"hello\"\n    dict(text=\"123abc\"),     # Alphanumeric, should return string \"123abc\"\n    dict(text=\"4567\"),       # All digits, should return integer 4567\n    dict(text=\"000123\"),     # All digits with leading zeros, should return integer 123\n    dict(text=\"98.76\"),      # Contains a dot, should return string \"98.76\"\n    dict(text=\"\"),           # Empty string, should return string \"\"\n    dict(text=\"123 \"),       # Contains space, should return string \"123 \"\n    dict(text=\"007 James\"),  # Starts with digits, should return string \"007 James\"\n    dict(text=\"-123\")        # Negative number, should return string \"-123\"\n]\nexamples += [\n    dict(text='123'),      # Input is a string of digits, output will be integer 123\n    dict(text='hello'),    # Input is a non-digit string, output will be 'hello'\n    dict(text='4567'),     # Input is a string of digits, output will be integer 4567\n    dict(text='test123'),  # Input is a mixed string, output will be 'test123'\n    dict(text='0001'),     # Input is a string of digits including leading zeros, output will be integer 1\n    dict(text='10.5'),     # Input is a numeric but not integer string, output will be '10.5'\n    dict(text=''),         # Input is an empty string, output will be ''\n    dict(text='123abc'),   # Input is a mixed string starting with digits, output will be '123abc'\n    dict(text='789'),      # Input is a string of digits, output will be integer 789\n    dict(text='Python3')   # Input is a mixed string, output will be 'Python3'\n]", "code": "def atoi(text):\n    return int(text) if text.isdigit() else text\n", "func_name": "atoi", "exec_status": true, "example_inputs": ["\"{'text': '123'}\"", "\"{'text': 'abc'}\"", "\"{'text': '123abc'}\"", "\"{'text': ''}\"", "\"{'text': '   '}\"", "\"{'text': '-123'}\"", "\"{'text': '+123'}\"", "\"{'text': '123.45'}\"", "\"{'text': '0x123'}\"", "\"{'text': 'abcdefg'}\""], "example_outputs": [{"return": "\"123\""}, {"return": "\"'abc'\""}, {"return": "\"'123abc'\""}, {"return": "\"''\""}, {"return": "\"'   '\""}, {"return": "\"'-123'\""}, {"return": "\"'+123'\""}, {"return": "\"'123.45'\""}, {"return": "\"'0x123'\""}, {"return": "\"'abcdefg'\""}, {"return": "\"123\""}, {"return": "\"'hello'\""}, {"return": "\"'123abc'\""}, {"return": "\"4567\""}, {"return": "\"123\""}, {"return": "\"'98.76'\""}, {"return": "\"''\""}, {"return": "\"'123 '\""}, {"return": "\"'007 James'\""}, {"return": "\"'-123'\""}, {"return": "\"123\""}, {"return": "\"'hello'\""}, {"return": "\"4567\""}, {"return": "\"'test123'\""}, {"return": "\"1\""}, {"return": "\"'10.5'\""}, {"return": "\"''\""}, {"return": "\"'123abc'\""}, {"return": "\"789\""}, {"return": "\"'Python3'\""}], "parsed_inputs": [[["text", "\"123\""]], [["text", "\"abc\""]], [["text", "\"123abc\""]], [["text", "\"\""]], [["text", "\"   \""]], [["text", "\"-123\""]], [["text", "\"+123\""]], [["text", "\"123.45\""]], [["text", "\"0x123\""]], [["text", "\"abcdefg\""]]], "exec_code": "def atoi(text):\n    return int(text) if text.isdigit() else text\n", "output": "The function is:\n\n```python\ndef atoi(text):\n    return int(text) if text.isdigit() else text\n\n```", "choosed_example_idx": [2, 0, 4, 9, 7, 1], "prompt": "Input: dict(text=\"123abc\"), Output: \"'123abc'\"\nInput: dict(text=\"123\"), Output: \"123\"\nInput: dict(text=\"   \"), Output: \"'   '\"\nInput: dict(text=\"abcdefg\"), Output: \"'abcdefg'\"\nInput: dict(text=\"123.45\"), Output: \"'123.45'\"\nInput: dict(text=\"abc\"), Output: \"'abc'\"\n\nFunction: atoi\nWrite a function that generates the output from the input.\n\n", "id": "6a9e1053c07bd30831149ae280db29ab29ca37ab_0"}
{"example_str": "examples = [\n    dict(L=[1, 2, 3, 4, 5]),\n    dict(L=[5, 4, 3, 2, 1]),\n    dict(L=[1, 1, 1, 1, 1]),\n    dict(L=[1, 2, 1, 2, 1]),\n    dict(L=[10, 9, 8, 7, 6]),\n    dict(L=[1]),\n    dict(L=[1, 2]),\n    dict(L=[5, 4, 3, 2, 1, 0]),\n    dict(L=[1, 3, 5, 7, 9]),\n    dict(L=[10, 8, 6, 4, 2]),\n    dict(L=[1, 1, 2, 2, 3, 3]),\n]\nexamples += [\n    dict(L=[1, 2, 3, 4, 5]),  # Increasing sequence\n    dict(L=[5, 4, 3, 2, 1]),  # Decreasing sequence\n    dict(L=[1, 2, 2, 3, 4]),  # Sequence with plateau\n    dict(L=[10, 20, 10, 20, 30, 40]),  # Sequence with dips and rises\n    dict(L=[1, 3, 5, 7, 6, 4, 2, 1]),  # Peak sequence\n    dict(L=[100, 200, 300, 400, 500]),  # Large numbers increasing\n    dict(L=[-1, -2, -3, -2, -1]),  # Negative numbers, mixed sequence\n    dict(L=[2, 2, 2, 2, 2]),  # Constant values\n    dict(L=[1]),  # Single element\n    dict(L=[9, 7, 8, 5, 6, 7, 8, 9, 10])  # Complex sequence with multiple runs\n]\nexamples += [\n    dict(L=[1, 2, 3, 4, 5]),  # Increasing sequence\n    dict(L=[5, 4, 3, 2, 1]),  # Decreasing sequence\n    dict(L=[1, 2, 2, 3, 4]),  # Sequence with a plateau\n    dict(L=[10, 20, 10, 20, 30]),  # Sequence with peaks\n    dict(L=[1, 3, 5, 7, 6, 4, 2, 1]),  # Peak in the middle\n    dict(L=[100, 200, 300, 400, 100, 200, 300, 400, 500]),  # Two increasing subsequences\n    dict(L=[1]),  # Single element\n    dict(L=[2, 2, 2, 2, 2]),  # All elements the same\n    dict(L=[-1, -2, -3, -2, -1]),  # Negative numbers with a minimum point\n    dict(L=[0, 1, 0, 1, 0, 1, 0, 1])  # Alternating increase and decrease\n]", "code": "def longestRun(L):\n    finalL = []\n    newL = []\n    newL.append(L[0])\n    for j in range(len(L) - 1):\n        if L[j] > L[j + 1]:\n            finalL.append(newL)\n            newL = []\n            newL.append(L[j + 1])\n        else:\n            newL.append(L[j + 1])\n    finalL.append(newL)\n    return max([len(x) for x in finalL])\n", "func_name": "longestRun", "exec_status": true, "example_inputs": ["\"{'L': [1, 2, 3, 4, 5]}\"", "\"{'L': [5, 4, 3, 2, 1]}\"", "\"{'L': [1, 1, 1, 1, 1]}\"", "\"{'L': [1, 2, 1, 2, 1]}\"", "\"{'L': [10, 9, 8, 7, 6]}\"", "\"{'L': [1]}\"", "\"{'L': [1, 2]}\"", "\"{'L': [5, 4, 3, 2, 1, 0]}\"", "\"{'L': [1, 3, 5, 7, 9]}\"", "\"{'L': [10, 8, 6, 4, 2]}\"", "\"{'L': [1, 1, 2, 2, 3, 3]}\""], "example_outputs": [{"return": "\"5\""}, {"return": "\"1\""}, {"return": "\"5\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"5\""}, {"return": "\"1\""}, {"return": "\"6\""}, {"return": "\"5\""}, {"return": "\"1\""}, {"return": "\"5\""}, {"return": "\"4\""}, {"return": "\"4\""}, {"return": "\"5\""}, {"return": "\"3\""}, {"return": "\"5\""}, {"return": "\"1\""}, {"return": "\"6\""}, {"return": "\"5\""}, {"return": "\"1\""}, {"return": "\"5\""}, {"return": "\"3\""}, {"return": "\"4\""}, {"return": "\"5\""}, {"return": "\"1\""}, {"return": "\"5\""}, {"return": "\"3\""}, {"return": "\"2\""}], "parsed_inputs": [[["L", "[1, 2, 3, 4, 5]"]], [["L", "[5, 4, 3, 2, 1]"]], [["L", "[1, 1, 1, 1, 1]"]], [["L", "[1, 2, 1, 2, 1]"]], [["L", "[10, 9, 8, 7, 6]"]], [["L", "[1]"]], [["L", "[1, 2]"]], [["L", "[5, 4, 3, 2, 1, 0]"]], [["L", "[1, 3, 5, 7, 9]"]], [["L", "[10, 8, 6, 4, 2]"]], [["L", "[1, 1, 2, 2, 3, 3]"]]], "exec_code": "def longestRun(L):\n    finalL = []\n    newL = []\n    newL.append(L[0])\n    for j in range(len(L) - 1):\n        if L[j] > L[j + 1]:\n            finalL.append(newL)\n            newL = []\n            newL.append(L[j + 1])\n        else:\n            newL.append(L[j + 1])\n    finalL.append(newL)\n    return max([len(x) for x in finalL])\n", "output": "The function is:\n\n```python\ndef longestRun(L):\n    finalL = []\n    newL = []\n    newL.append(L[0])\n    for j in range(len(L) - 1):\n        if L[j] > L[j + 1]:\n            finalL.append(newL)\n            newL = []\n            newL.append(L[j + 1])\n        else:\n            newL.append(L[j + 1])\n    finalL.append(newL)\n    return max([len(x) for x in finalL])\n\n```", "choosed_example_idx": [1, 5, 3, 10, 9], "prompt": "Input: dict(L=[5, 4, 3, 2, 1]), Output: \"1\"\nInput: dict(L=[1]), Output: \"1\"\nInput: dict(L=[1, 2, 1, 2, 1]), Output: \"2\"\nInput: dict(L=[1, 1, 2, 2, 3, 3]), Output: \"6\"\nInput: dict(L=[10, 8, 6, 4, 2]), Output: \"1\"\n\nWrite a function that generates the output from the input.\n\n\nFunction: longestRun\n\n", "id": "e268d12a6a4c1779eccd1276fad250dd12bbb2a0_0"}
{"example_str": "examples = [\n    dict(n=\"hello\"),\n    dict(n=\"world\"),\n    dict(n=\"abcde\"),\n    dict(n=\"12345\"),\n    dict(n=\"\"),\n    dict(n=\"a\"),\n    dict(n=\"abc\"),\n    dict(n=\"abcdefg\"),\n    dict(n=\"hello world\"),\n    dict(n=\"python is fun\"),\n]\nexamples += [\n    dict(n=\"hello\"),               # length is 5\n    dict(n=\"\"),                    # length is 0\n    dict(n=\"1234567890\"),          # length is 10\n    dict(n=\"a\"),                   # length is 1\n    dict(n=\"Python programming\"),  # length is 18 (including space)\n    dict(n=\"new\\nline\"),           # length is 8 (including newline character)\n    dict(n=\"123 abc\"),             # length is 7 (including space)\n    dict(n=\"!@#$%^&*()\"),          # length is 10\n    dict(n=\"long string with multiple words\"),  # length is 31\n    dict(n=\"tabs\\tare\\there\")      # length is 13 (including tab characters)\n]\nexamples += [\n    dict(n='hello'),\n    dict(n=''),\n    dict(n='1234567890'),\n    dict(n='Python!'),\n    dict(n='data'),\n    dict(n=' '),\n    dict(n='This is a test string.'),\n    dict(n='Newline\\n'),\n    dict(n='Special characters !@#$%^&*()'),\n    dict(n='Unicode 😊🚀🌟'),\n]", "code": "def get_length(n: str) ->int:\n    return len(n)\n", "func_name": "get_length", "exec_status": true, "example_inputs": ["\"{'n': 'hello'}\"", "\"{'n': 'world'}\"", "\"{'n': 'abcde'}\"", "\"{'n': '12345'}\"", "\"{'n': ''}\"", "\"{'n': 'a'}\"", "\"{'n': 'abc'}\"", "\"{'n': 'abcdefg'}\"", "\"{'n': 'hello world'}\"", "\"{'n': 'python is fun'}\""], "example_outputs": [{"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"7\""}, {"return": "\"11\""}, {"return": "\"13\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"10\""}, {"return": "\"1\""}, {"return": "\"18\""}, {"return": "\"8\""}, {"return": "\"7\""}, {"return": "\"10\""}, {"return": "\"31\""}, {"return": "\"13\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"10\""}, {"return": "\"7\""}, {"return": "\"4\""}, {"return": "\"1\""}, {"return": "\"22\""}, {"return": "\"8\""}, {"return": "\"29\""}, {"return": "\"11\""}], "parsed_inputs": [[["n", "\"hello\""]], [["n", "\"world\""]], [["n", "\"abcde\""]], [["n", "\"12345\""]], [["n", "\"\""]], [["n", "\"a\""]], [["n", "\"abc\""]], [["n", "\"abcdefg\""]], [["n", "\"hello world\""]], [["n", "\"python is fun\""]]], "exec_code": "def get_length(n: str) ->int:\n    return len(n)\n", "output": "The function is:\n\n```python\ndef get_length(n: str) ->int:\n    return len(n)\n\n```", "choosed_example_idx": [3, 8, 1, 7], "prompt": "Write a function that generates the output from the input.\nInput: dict(n=\"12345\"), Output: \"5\"\nInput: dict(n=\"hello world\"), Output: \"11\"\nInput: dict(n=\"world\"), Output: \"5\"\nInput: dict(n=\"abcdefg\"), Output: \"7\"\n\n\nFunction: get_length\n\n", "id": "827930f30377a2ce56b8121a82c07fe34c8a02f9_0"}
{"example_str": "examples = [\n    dict(n1=0),\n    dict(n1=1),\n    dict(n1=2),\n    dict(n1=3),\n    dict(n1=4),\n    dict(n1=5),\n    dict(n1=6),\n    dict(n1=7),\n    dict(n1=8),\n    dict(n1=9),\n]\nexamples += [\n    dict(n1=0),   # Factorial of 0 is 1\n    dict(n1=1),   # Factorial of 1 is 1\n    dict(n1=2),   # Factorial of 2 is 2\n    dict(n1=3),   # Factorial of 3 is 6\n    dict(n1=4),   # Factorial of 4 is 24\n    dict(n1=5),   # Factorial of 5 is 120\n    dict(n1=6),   # Factorial of 6 is 720\n    dict(n1=7),   # Factorial of 7 is 5040\n    dict(n1=8),   # Factorial of 8 is 40320\n    dict(n1=9)    # Factorial of 9 is 362880\n]\nexamples += [\n    dict(n1=0),\n    dict(n1=1),\n    dict(n1=2),\n    dict(n1=3),\n    dict(n1=4),\n    dict(n1=5),\n    dict(n1=6),\n    dict(n1=7),\n    dict(n1=8),\n    dict(n1=9)\n]", "code": "def fact(n1):\n    if n1 == 0:\n        return 1\n    else:\n        return n1 * fact(n1 - 1)\n", "func_name": "fact", "exec_status": true, "example_inputs": ["\"{'n1': 0}\"", "\"{'n1': 1}\"", "\"{'n1': 2}\"", "\"{'n1': 3}\"", "\"{'n1': 4}\"", "\"{'n1': 5}\"", "\"{'n1': 6}\"", "\"{'n1': 7}\"", "\"{'n1': 8}\"", "\"{'n1': 9}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"6\""}, {"return": "\"24\""}, {"return": "\"120\""}, {"return": "\"720\""}, {"return": "\"5040\""}, {"return": "\"40320\""}, {"return": "\"362880\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"6\""}, {"return": "\"24\""}, {"return": "\"120\""}, {"return": "\"720\""}, {"return": "\"5040\""}, {"return": "\"40320\""}, {"return": "\"362880\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"6\""}, {"return": "\"24\""}, {"return": "\"120\""}, {"return": "\"720\""}, {"return": "\"5040\""}, {"return": "\"40320\""}, {"return": "\"362880\""}], "parsed_inputs": [[["n1", "0"]], [["n1", "1"]], [["n1", "2"]], [["n1", "3"]], [["n1", "4"]], [["n1", "5"]], [["n1", "6"]], [["n1", "7"]], [["n1", "8"]], [["n1", "9"]]], "exec_code": "def fact(n1):\n    if n1 == 0:\n        return 1\n    else:\n        return n1 * fact(n1 - 1)\n", "output": "The function is:\n\n```python\ndef fact(n1):\n    if n1 == 0:\n        return 1\n    else:\n        return n1 * fact(n1 - 1)\n\n```", "choosed_example_idx": [1, 7, 0, 9, 2, 4, 3, 8], "prompt": "Input: dict(n1=1), Output: \"1\"\nInput: dict(n1=7), Output: \"5040\"\nInput: dict(n1=0), Output: \"1\"\nInput: dict(n1=9), Output: \"362880\"\nInput: dict(n1=2), Output: \"2\"\nInput: dict(n1=4), Output: \"24\"\nInput: dict(n1=3), Output: \"6\"\nInput: dict(n1=8), Output: \"40320\"\n\nWrite a function that generates the output from the input.\n\nFunction: fact\n\n", "id": "38e1588cc747ea797bacc31e7f685949da891d87_0"}
{"example_str": "examples = [\n    dict(url=\"https://www.example.com/\"),\n    dict(url=\"HTTPS://WWW.EXAMPLE.COM\"),\n    dict(url=\"http://example.com\"),\n    dict(url=\"example.com/\"),\n    dict(url=\"www.example.com\"),\n    dict(url=\"example.com\"),\n    dict(url=\"https://example.com/path/\"),\n    dict(url=\"http://example.com/path\"),\n    dict(url=\"example.com/path/\"),\n    dict(url=\"www.example.com/path\")\n]\nexamples += [\n    dict(url=\"HTTP://EXAMPLE.COM/\"),\n    dict(url=\"WWW.GOOGLE.COM/\"),\n    dict(url=\"https://www.reddit.com\"),\n    dict(url=\"HTTP://MY-SITE.COM/ABOUT/\"),\n    dict(url=\"https://www.example.org/\"),\n    dict(url=\"http://localhost:8000/test/\"),\n    dict(url=\"https://127.0.0.1/api/\"),\n    dict(url=\"WWW.EXAMPLE.COM/TEST\"),\n    dict(url=\"http://www.example.com/page\"),\n    dict(url=\"https://api.example.com/data/\")\n]\nexamples += [\n    dict(url=\"HTTP://EXAMPLE.COM/\"),\n    dict(url=\"WWW.GOOGLE.COM/\"),\n    dict(url=\"https://www.reddit.com\"),\n    dict(url=\"HTTP://MY-SITE.COM/TEST/\"),\n    dict(url=\"https://example.org/\"),\n    dict(url=\"https://www.python.org\"),\n    dict(url=\"http://localhost/8080/\"),\n    dict(url=\"https://api.example.com/data/\"),\n    dict(url=\"http://127.0.0.1/\"),\n    dict(url=\"https://mywebsite.com/page/\")\n]", "code": "def fix_url(url):\n    url = url.lower()\n    if url[-1] == '/':\n        url = url[:-1]\n    return url\n", "func_name": "fix_url", "exec_status": true, "example_inputs": ["\"{'url': 'https://www.example.com/'}\"", "\"{'url': 'HTTPS://WWW.EXAMPLE.COM'}\"", "\"{'url': 'http://example.com'}\"", "\"{'url': 'example.com/'}\"", "\"{'url': 'www.example.com'}\"", "\"{'url': 'example.com'}\"", "\"{'url': 'https://example.com/path/'}\"", "\"{'url': 'http://example.com/path'}\"", "\"{'url': 'example.com/path/'}\"", "\"{'url': 'www.example.com/path'}\""], "example_outputs": [{"return": "\"'https://www.example.com'\""}, {"return": "\"'https://www.example.com'\""}, {"return": "\"'http://example.com'\""}, {"return": "\"'example.com'\""}, {"return": "\"'www.example.com'\""}, {"return": "\"'example.com'\""}, {"return": "\"'https://example.com/path'\""}, {"return": "\"'http://example.com/path'\""}, {"return": "\"'example.com/path'\""}, {"return": "\"'www.example.com/path'\""}, {"return": "\"'http://example.com'\""}, {"return": "\"'www.google.com'\""}, {"return": "\"'https://www.reddit.com'\""}, {"return": "\"'http://my-site.com/about'\""}, {"return": "\"'https://www.example.org'\""}, {"return": "\"'http://localhost:8000/test'\""}, {"return": "\"'https://127.0.0.1/api'\""}, {"return": "\"'www.example.com/test'\""}, {"return": "\"'http://www.example.com/page'\""}, {"return": "\"'https://api.example.com/data'\""}, {"return": "\"'http://example.com'\""}, {"return": "\"'www.google.com'\""}, {"return": "\"'https://www.reddit.com'\""}, {"return": "\"'http://my-site.com/test'\""}, {"return": "\"'https://example.org'\""}, {"return": "\"'https://www.python.org'\""}, {"return": "\"'http://localhost/8080'\""}, {"return": "\"'https://api.example.com/data'\""}, {"return": "\"'http://127.0.0.1'\""}, {"return": "\"'https://mywebsite.com/page'\""}], "parsed_inputs": [[["url", "\"https://www.example.com/\""]], [["url", "\"HTTPS://WWW.EXAMPLE.COM\""]], [["url", "\"http://example.com\""]], [["url", "\"example.com/\""]], [["url", "\"www.example.com\""]], [["url", "\"example.com\""]], [["url", "\"https://example.com/path/\""]], [["url", "\"http://example.com/path\""]], [["url", "\"example.com/path/\""]], [["url", "\"www.example.com/path\""]]], "exec_code": "def fix_url(url):\n    url = url.lower()\n    if url[-1] == '/':\n        url = url[:-1]\n    return url\n", "output": "The function is:\n\n```python\ndef fix_url(url):\n    url = url.lower()\n    if url[-1] == '/':\n        url = url[:-1]\n    return url\n\n```", "choosed_example_idx": [8, 9, 3, 2, 0, 5, 6, 7, 4], "prompt": "Input: dict(url=\"example.com/path/\"), Output: \"'example.com/path'\"\nInput: dict(url=\"www.example.com/path\"), Output: \"'www.example.com/path'\"\nInput: dict(url=\"example.com/\"), Output: \"'example.com'\"\nInput: dict(url=\"http://example.com\"), Output: \"'http://example.com'\"\nInput: dict(url=\"https://www.example.com/\"), Output: \"'https://www.example.com'\"\nInput: dict(url=\"example.com\"), Output: \"'example.com'\"\nInput: dict(url=\"https://example.com/path/\"), Output: \"'https://example.com/path'\"\nInput: dict(url=\"http://example.com/path\"), Output: \"'http://example.com/path'\"\nInput: dict(url=\"www.example.com\"), Output: \"'www.example.com'\"\n\n\nWrite a function that generates the output from the input.\nFunction: fix_url\n\n", "id": "1a9c4e0af0999bb3d6c8d2fed03ebb4c027a672b_0"}
{"example_str": "examples = [\n    dict(n=10),\n    dict(n=20),\n    dict(n=30),\n    dict(n=40),\n    dict(n=50),\n    dict(n=64),\n    dict(n=128),\n    dict(n=256),\n    dict(n=512),\n    dict(n=1024)\n]", "code": "def decompose(n):\n    b = 0\n    while n % 2 == 0:\n        n //= 2\n        b += 1\n    return b, n\n", "func_name": "decompose", "exec_status": true, "example_inputs": ["\"{'n': 10}\"", "\"{'n': 20}\"", "\"{'n': 30}\"", "\"{'n': 40}\"", "\"{'n': 50}\"", "\"{'n': 64}\"", "\"{'n': 128}\"", "\"{'n': 256}\"", "\"{'n': 512}\"", "\"{'n': 1024}\""], "example_outputs": [{"trace": "[\"{'n': 10}\", \"Line 1->    b = 0\", \"{'b': 0}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 5}\", \"Line 4->        b += 1\", \"{'b': 1}\", \"Line 2->    while n % 2 == 0:\", \"Line 5->    return b, n\"]", "return": "\"(1, 5)\""}, {"trace": "[\"{'n': 20}\", \"Line 1->    b = 0\", \"{'b': 0}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 10}\", \"Line 4->        b += 1\", \"{'b': 1}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 5}\", \"Line 4->        b += 1\", \"{'b': 2}\", \"Line 2->    while n % 2 == 0:\", \"Line 5->    return b, n\"]", "return": "\"(2, 5)\""}, {"trace": "[\"{'n': 30}\", \"Line 1->    b = 0\", \"{'b': 0}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 15}\", \"Line 4->        b += 1\", \"{'b': 1}\", \"Line 2->    while n % 2 == 0:\", \"Line 5->    return b, n\"]", "return": "\"(1, 15)\""}, {"trace": "[\"{'n': 40}\", \"Line 1->    b = 0\", \"{'b': 0}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 20}\", \"Line 4->        b += 1\", \"{'b': 1}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 10}\", \"Line 4->        b += 1\", \"{'b': 2}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 5}\", \"Line 4->        b += 1\", \"{'b': 3}\", \"Line 2->    while n % 2 == 0:\", \"Line 5->    return b, n\"]", "return": "\"(3, 5)\""}, {"trace": "[\"{'n': 50}\", \"Line 1->    b = 0\", \"{'b': 0}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 25}\", \"Line 4->        b += 1\", \"{'b': 1}\", \"Line 2->    while n % 2 == 0:\", \"Line 5->    return b, n\"]", "return": "\"(1, 25)\""}, {"trace": "[\"{'n': 64}\", \"Line 1->    b = 0\", \"{'b': 0}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 32}\", \"Line 4->        b += 1\", \"{'b': 1}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 16}\", \"Line 4->        b += 1\", \"{'b': 2}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 8}\", \"Line 4->        b += 1\", \"{'b': 3}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 4}\", \"Line 4->        b += 1\", \"{'b': 4}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 2}\", \"Line 4->        b += 1\", \"{'b': 5}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 1}\", \"Line 4->        b += 1\", \"{'b': 6}\", \"Line 2->    while n % 2 == 0:\", \"Line 5->    return b, n\"]", "return": "\"(6, 1)\""}, {"trace": "[\"{'n': 128}\", \"Line 1->    b = 0\", \"{'b': 0}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 64}\", \"Line 4->        b += 1\", \"{'b': 1}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 32}\", \"Line 4->        b += 1\", \"{'b': 2}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 16}\", \"Line 4->        b += 1\", \"{'b': 3}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 8}\", \"Line 4->        b += 1\", \"{'b': 4}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 4}\", \"Line 4->        b += 1\", \"{'b': 5}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 2}\", \"Line 4->        b += 1\", \"{'b': 6}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 1}\", \"Line 4->        b += 1\", \"{'b': 7}\", \"Line 2->    while n % 2 == 0:\", \"Line 5->    return b, n\"]", "return": "\"(7, 1)\""}, {"trace": "[\"{'n': 256}\", \"Line 1->    b = 0\", \"{'b': 0}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 128}\", \"Line 4->        b += 1\", \"{'b': 1}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 64}\", \"Line 4->        b += 1\", \"{'b': 2}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 32}\", \"Line 4->        b += 1\", \"{'b': 3}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 16}\", \"Line 4->        b += 1\", \"{'b': 4}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 8}\", \"Line 4->        b += 1\", \"{'b': 5}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 4}\", \"Line 4->        b += 1\", \"{'b': 6}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 2}\", \"Line 4->        b += 1\", \"{'b': 7}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 1}\", \"Line 4->        b += 1\", \"{'b': 8}\", \"Line 2->    while n % 2 == 0:\", \"Line 5->    return b, n\"]", "return": "\"(8, 1)\""}, {"trace": "[\"{'n': 512}\", \"Line 1->    b = 0\", \"{'b': 0}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 256}\", \"Line 4->        b += 1\", \"{'b': 1}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 128}\", \"Line 4->        b += 1\", \"{'b': 2}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 64}\", \"Line 4->        b += 1\", \"{'b': 3}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 32}\", \"Line 4->        b += 1\", \"{'b': 4}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 16}\", \"Line 4->        b += 1\", \"{'b': 5}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 8}\", \"Line 4->        b += 1\", \"{'b': 6}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 4}\", \"Line 4->        b += 1\", \"{'b': 7}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 2}\", \"Line 4->        b += 1\", \"{'b': 8}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 1}\", \"Line 4->        b += 1\", \"{'b': 9}\", \"Line 2->    while n % 2 == 0:\", \"Line 5->    return b, n\"]", "return": "\"(9, 1)\""}, {"trace": "[\"{'n': 1024}\", \"Line 1->    b = 0\", \"{'b': 0}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 512}\", \"Line 4->        b += 1\", \"{'b': 1}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 256}\", \"Line 4->        b += 1\", \"{'b': 2}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 128}\", \"Line 4->        b += 1\", \"{'b': 3}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 64}\", \"Line 4->        b += 1\", \"{'b': 4}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 32}\", \"Line 4->        b += 1\", \"{'b': 5}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 16}\", \"Line 4->        b += 1\", \"{'b': 6}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 8}\", \"Line 4->        b += 1\", \"{'b': 7}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 4}\", \"Line 4->        b += 1\", \"{'b': 8}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 2}\", \"Line 4->        b += 1\", \"{'b': 9}\", \"Line 2->    while n % 2 == 0:\", \"Line 3->        n //= 2\", \"{'n': 1}\", \"Line 4->        b += 1\", \"{'b': 10}\", \"Line 2->    while n % 2 == 0:\", \"Line 5->    return b, n\"]", "return": "\"(10, 1)\""}], "parsed_inputs": [[["n", "10"]], [["n", "20"]], [["n", "30"]], [["n", "40"]], [["n", "50"]], [["n", "64"]], [["n", "128"]], [["n", "256"]], [["n", "512"]], [["n", "1024"]]], "exec_code": "def decompose(n):\n    b = 0\n    while n % 2 == 0:\n        n //= 2\n        b += 1\n    return b, n\n", "output": "The function is:\n\n```python\ndef decompose(n):\n    b = 0\n    while n % 2 == 0:\n        n //= 2\n        b += 1\n    return b, n\n\n```", "choosed_example_idx": [1, 0, 2, 4, 3, 5], "prompt": "Write a function that generates the output from the input.\nFunction: decompose\nInput: dict(n=20), Output: \"(2, 5)\"\nInput: dict(n=10), Output: \"(1, 5)\"\nInput: dict(n=30), Output: \"(1, 15)\"\nInput: dict(n=50), Output: \"(1, 25)\"\nInput: dict(n=40), Output: \"(3, 5)\"\nInput: dict(n=64), Output: \"(6, 1)\"\n\n", "id": "9e7fa0e665071878a6e5dba8b236b6255b748aca_0"}
{"example_str": "examples = [\n    dict(seq='ATGC', prob=0.5),\n    dict(seq=['ATGC'], prob=0.3),\n    dict(seq='AT', prob=0.7),\n    dict(seq=['A', 'T', 'G', 'C'], prob=0.1),\n    dict(seq='GC', prob=0.9),\n    dict(seq=['ATGC', 'ATGC'], prob=0.4),\n    dict(seq='A', prob=0.2),\n    dict(seq=['G', 'C'], prob=0.6),\n    dict(seq='TGC', prob=0.8),\n    dict(seq=['AT', 'GC'], prob=0.01),\n]\nexamples += [\n    dict(seq=[\"ATCG\"], prob=0.3),\n    dict(seq=[\"AAAA\"], prob=\"0.5\"),\n    dict(seq=[\"TTTT\"], prob=0.1),\n    dict(seq=[\"CCGG\"], prob=0.7),\n    dict(seq=[\"ATAT\"], prob=\"0.2\"),\n    dict(seq=[\"CGCG\"], prob=0.4),\n    dict(seq=[\"ATGC\"], prob=0.6),\n    dict(seq=[\"TATA\"], prob=\"0.8\"),\n    dict(seq=[\"CCCC\"], prob=0.9),\n    dict(seq=[\"GGGG\"], prob=\"0.25\")\n]\nexamples += [\n    dict(seq=[\"ATCG\"], prob=0.3),\n    dict(seq=[\"TACG\"], prob=\"0.5\"),\n    dict(seq=[\"GGCC\"], prob=0.1),\n    dict(seq=[\"AAAA\"], prob=\"0.2\"),\n    dict(seq=[\"TTTT\"], prob=0.4),\n    dict(seq=[\"CCGG\"], prob=\"0.6\"),\n    dict(seq=[\"ATAT\"], prob=0.7),\n    dict(seq=[\"CGCG\"], prob=\"0.8\"),\n    dict(seq=[\"GCGC\"], prob=0.9),\n    dict(seq=[\"TATA\"], prob=\"0.25\")\n]", "code": "def get_prob(seq, prob):\n    p = 1\n    for base in seq[0]:\n        if base == 'A' or base == 'T':\n            p *= (1 - float(prob)) / 2\n        else:\n            p *= float(prob) / 2\n    return p\n", "func_name": "get_prob", "exec_status": true, "example_inputs": ["\"{'seq': 'ATGC', 'prob': 0.5}\"", "\"{'seq': ['ATGC'], 'prob': 0.3}\"", "\"{'seq': 'AT', 'prob': 0.7}\"", "\"{'seq': ['A', 'T', 'G', 'C'], 'prob': 0.1}\"", "\"{'seq': 'GC', 'prob': 0.9}\"", "\"{'seq': ['ATGC', 'ATGC'], 'prob': 0.4}\"", "\"{'seq': 'A', 'prob': 0.2}\"", "\"{'seq': ['G', 'C'], 'prob': 0.6}\"", "\"{'seq': 'TGC', 'prob': 0.8}\"", "\"{'seq': ['AT', 'GC'], 'prob': 0.01}\""], "example_outputs": [{"return": "\"0.25\""}, {"return": "\"0.002756249999999999\""}, {"return": "\"0.15000000000000002\""}, {"return": "\"0.45\""}, {"return": "\"0.45\""}, {"return": "\"0.0036\""}, {"return": "\"0.4\""}, {"return": "\"0.3\""}, {"return": "\"0.09999999999999998\""}, {"return": "\"0.245025\""}, {"return": "\"0.002756249999999999\""}, {"return": "\"0.00390625\""}, {"return": "\"0.04100625000000001\""}, {"return": "\"0.015006249999999995\""}, {"return": "\"0.025600000000000008\""}, {"return": "\"0.0016000000000000005\""}, {"return": "\"0.0036000000000000003\""}, {"return": "\"9.999999999999991e-05\""}, {"return": "\"0.04100625000000001\""}, {"return": "\"0.000244140625\""}, {"return": "\"0.002756249999999999\""}, {"return": "\"0.00390625\""}, {"return": "\"6.250000000000002e-06\""}, {"return": "\"0.025600000000000008\""}, {"return": "\"0.0081\""}, {"return": "\"0.0081\""}, {"return": "\"0.0005062500000000003\""}, {"return": "\"0.025600000000000008\""}, {"return": "\"0.04100625000000001\""}, {"return": "\"0.019775390625\""}], "parsed_inputs": [[["seq", "\"ATGC\""], ["prob", "0.5"]], [["seq", "['ATGC']"], ["prob", "0.3"]], [["seq", "\"AT\""], ["prob", "0.7"]], [["seq", "['A', 'T', 'G', 'C']"], ["prob", "0.1"]], [["seq", "\"GC\""], ["prob", "0.9"]], [["seq", "['ATGC', 'ATGC']"], ["prob", "0.4"]], [["seq", "\"A\""], ["prob", "0.2"]], [["seq", "['G', 'C']"], ["prob", "0.6"]], [["seq", "\"TGC\""], ["prob", "0.8"]], [["seq", "['AT', 'GC']"], ["prob", "0.01"]]], "exec_code": "def get_prob(seq, prob):\n    p = 1\n    for base in seq[0]:\n        if base == 'A' or base == 'T':\n            p *= (1 - float(prob)) / 2\n        else:\n            p *= float(prob) / 2\n    return p\n", "output": "The function is:\n\n```python\ndef get_prob(seq, prob):\n    p = 1\n    for base in seq[0]:\n        if base == 'A' or base == 'T':\n            p *= (1 - float(prob)) / 2\n        else:\n            p *= float(prob) / 2\n    return p\n\n```", "choosed_example_idx": [2, 9, 0, 3, 5, 1, 8, 6, 7], "prompt": "Write a function that generates the output from the input.\nFunction: get_prob\n\nInput: dict(seq=\"AT\", prob=0.7), Output: \"0.15000000000000002\"\nInput: dict(seq=['AT', 'GC'], prob=0.01), Output: \"0.245025\"\nInput: dict(seq=\"ATGC\", prob=0.5), Output: \"0.25\"\nInput: dict(seq=['A', 'T', 'G', 'C'], prob=0.1), Output: \"0.45\"\nInput: dict(seq=['ATGC', 'ATGC'], prob=0.4), Output: \"0.0036\"\nInput: dict(seq=['ATGC'], prob=0.3), Output: \"0.002756249999999999\"\nInput: dict(seq=\"TGC\", prob=0.8), Output: \"0.09999999999999998\"\nInput: dict(seq=\"A\", prob=0.2), Output: \"0.4\"\nInput: dict(seq=['G', 'C'], prob=0.6), Output: \"0.3\"\n\n", "id": "c31eec8e84bd6281cff227d24aa19fb1770fd35d_0"}
{"example_str": "examples = [\n    dict(a=12, b=15),\n    dict(a=24, b=30),\n    dict(a=17, b=0),\n    dict(a=0, b=17),\n    dict(a=100, b=75),\n    dict(a=7, b=3),\n    dict(a=25, b=11),\n    dict(a=48, b=18),\n    dict(a=99, b=33),\n    dict(a=123, b=45)\n]\nexamples += [\n    dict(a=120, b=23),\n    dict(a=81, b=57),\n    dict(a=0, b=5),\n    dict(a=17, b=0),\n    dict(a=101, b=462),\n    dict(a=-25, b=15),\n    dict(a=15, b=-25),\n    dict(a=-34, b=-55),\n    dict(a=999, b=123),\n    dict(a=12345, b=6789)\n]\nexamples += [\n    dict(a=120, b=23),\n    dict(a=198, b=156),\n    dict(a=1000, b=3),\n    dict(a=49, b=7),\n    dict(a=37, b=600),\n    dict(a=240, b=46),\n    dict(a=99, b=78),\n    dict(a=25, b=5),\n    dict(a=12345, b=6789),\n    dict(a=101, b=103),\n]", "code": "def ext_euclides(a, b):\n    if b == 0:\n        return a, 1, 0\n    else:\n        u1, u2, v1, v2 = 0, 1, 1, 0\n        while b > 0:\n            q = a // b\n            r, u, v = a - q * b, u2 - q * u1, v2 - q * v1\n            a, b, u2, u1, v2, v1 = b, r, u1, u, v1, v\n        return a, u2, v2\n", "func_name": "ext_euclides", "exec_status": true, "example_inputs": ["\"{'a': 12, 'b': 15}\"", "\"{'a': 24, 'b': 30}\"", "\"{'a': 17, 'b': 0}\"", "\"{'a': 0, 'b': 17}\"", "\"{'a': 100, 'b': 75}\"", "\"{'a': 7, 'b': 3}\"", "\"{'a': 25, 'b': 11}\"", "\"{'a': 48, 'b': 18}\"", "\"{'a': 99, 'b': 33}\"", "\"{'a': 123, 'b': 45}\""], "example_outputs": [{"return": "\"(3, -1, 1)\""}, {"return": "\"(6, -1, 1)\""}, {"return": "\"(17, 1, 0)\""}, {"return": "\"(17, 0, 1)\""}, {"return": "\"(25, 1, -1)\""}, {"return": "\"(1, 1, -2)\""}, {"return": "\"(1, 4, -9)\""}, {"return": "\"(6, -1, 3)\""}, {"return": "\"(33, 0, 1)\""}, {"return": "\"(3, -4, 11)\""}, {"return": "\"(1, -9, 47)\""}, {"return": "\"(3, -7, 10)\""}, {"return": "\"(5, 0, 1)\""}, {"return": "\"(17, 1, 0)\""}, {"return": "\"(1, 215, -47)\""}, {"return": "\"(5, 1, 2)\""}, {"return": "\"(15, 1, 0)\""}, {"return": "\"(-34, 1, 0)\""}, {"return": "\"(3, -8, 65)\""}, {"return": "\"(3, -903, 1642)\""}, {"return": "\"(1, -9, 47)\""}, {"return": "\"(6, -11, 14)\""}, {"return": "\"(1, 1, -333)\""}, {"return": "\"(7, 0, 1)\""}, {"return": "\"(1, -227, 14)\""}, {"return": "\"(2, -9, 47)\""}, {"return": "\"(3, -11, 14)\""}, {"return": "\"(5, 0, 1)\""}, {"return": "\"(3, -903, 1642)\""}, {"return": "\"(1, 51, -50)\""}], "parsed_inputs": [[["a", "12"], ["b", "15"]], [["a", "24"], ["b", "30"]], [["a", "17"], ["b", "0"]], [["a", "0"], ["b", "17"]], [["a", "100"], ["b", "75"]], [["a", "7"], ["b", "3"]], [["a", "25"], ["b", "11"]], [["a", "48"], ["b", "18"]], [["a", "99"], ["b", "33"]], [["a", "123"], ["b", "45"]]], "exec_code": "def ext_euclides(a, b):\n    if b == 0:\n        return a, 1, 0\n    else:\n        u1, u2, v1, v2 = 0, 1, 1, 0\n        while b > 0:\n            q = a // b\n            r, u, v = a - q * b, u2 - q * u1, v2 - q * v1\n            a, b, u2, u1, v2, v1 = b, r, u1, u, v1, v\n        return a, u2, v2\n", "output": "The function is:\n\n```python\ndef ext_euclides(a, b):\n    if b == 0:\n        return a, 1, 0\n    else:\n        u1, u2, v1, v2 = 0, 1, 1, 0\n        while b > 0:\n            q = a // b\n            r, u, v = a - q * b, u2 - q * u1, v2 - q * v1\n            a, b, u2, u1, v2, v1 = b, r, u1, u, v1, v\n        return a, u2, v2\n\n```", "choosed_example_idx": [6, 5, 3, 9, 1], "prompt": "Write a function that generates the output from the input.\n\nFunction: ext_euclides\nInput: dict(a=25, b=11), Output: \"(1, 4, -9)\"\nInput: dict(a=7, b=3), Output: \"(1, 1, -2)\"\nInput: dict(a=0, b=17), Output: \"(17, 0, 1)\"\nInput: dict(a=123, b=45), Output: \"(3, -4, 11)\"\nInput: dict(a=24, b=30), Output: \"(6, -1, 1)\"\n\n", "id": "23028108b093db259a14f0f8112545297904f5f9_0"}
{"example_str": "examples = [\n    dict(acc=0, x=5),\n    dict(acc=10, x=2),\n    dict(acc=-3, x=4),\n    dict(acc=0.5, x=1.2),\n    dict(acc=100, x=0),\n    dict(acc=-10, x=-5),\n    dict(acc=3, x=7),\n    dict(acc=2.5, x=3.8),\n    dict(acc=0, x=0),\n    dict(acc=50, x=-20)\n]\nexamples += [\n    dict(acc=0, x=5),  # Example with integers\n    dict(acc=3.5, x=2.1),  # Example with floats\n    dict(acc=\"Hello, \", x=\"world!\"),  # Example with strings\n    dict(acc=[1, 2], x=[3, 4]),  # Example with lists\n    dict(acc=0, x=-10),  # Example with negative integer\n    dict(acc=-3.5, x=2.1),  # Example with negative float and positive float\n    dict(acc=\"Python \", x=3),  # Example with string and integer (TypeError expected)\n    dict(acc=(1, 2), x=(3, 4)),  # Example with tuples\n    dict(acc=10, x=0),  # Example with zero\n    dict(acc=\"Data\", x=\" Science\")  # Example with two strings\n]\nexamples += [\n    dict(acc=0, x=5),\n    dict(acc=10, x=20),\n    dict(acc=1.5, x=2.5),\n    dict(acc=-10, x=5),\n    dict(acc=100, x=200),\n    dict(acc=0, x=0),\n    dict(acc=-5, x=-5),\n    dict(acc=50, x=-25),\n    dict(acc=3.14, x=2.86),\n    dict(acc=1000, x=5000)\n]", "code": "def aux_sum(acc, x):\n    r = acc + x\n    return r, r\n", "func_name": "aux_sum", "exec_status": true, "example_inputs": ["\"{'acc': 0, 'x': 5}\"", "\"{'acc': 10, 'x': 2}\"", "\"{'acc': -3, 'x': 4}\"", "\"{'acc': 0.5, 'x': 1.2}\"", "\"{'acc': 100, 'x': 0}\"", "\"{'acc': -10, 'x': -5}\"", "\"{'acc': 3, 'x': 7}\"", "\"{'acc': 2.5, 'x': 3.8}\"", "\"{'acc': 0, 'x': 0}\"", "\"{'acc': 50, 'x': -20}\""], "example_outputs": [{"return": "\"(5, 5)\""}, {"return": "\"(12, 12)\""}, {"return": "\"(1, 1)\""}, {"return": "\"(1.7, 1.7)\""}, {"return": "\"(100, 100)\""}, {"return": "\"(-15, -15)\""}, {"return": "\"(10, 10)\""}, {"return": "\"(6.3, 6.3)\""}, {"return": "\"(0, 0)\""}, {"return": "\"(30, 30)\""}, {"return": "\"(5, 5)\""}, {"return": "\"(5.6, 5.6)\""}, {"return": "\"('Hello, world!', 'Hello, world!')\""}, {"return": "\"([1, 2, 3, 4], [1, 2, 3, 4])\""}, {"return": "\"(-10, -10)\""}, {"return": "\"(-1.4, -1.4)\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: can only concatenate str (not \\\"int\\\") to str\""}, {"return": "\"((1, 2, 3, 4), (1, 2, 3, 4))\""}, {"return": "\"(10, 10)\""}, {"return": "\"('Data Science', 'Data Science')\""}, {"return": "\"(5, 5)\""}, {"return": "\"(30, 30)\""}, {"return": "\"(4.0, 4.0)\""}, {"return": "\"(-5, -5)\""}, {"return": "\"(300, 300)\""}, {"return": "\"(0, 0)\""}, {"return": "\"(-10, -10)\""}, {"return": "\"(25, 25)\""}, {"return": "\"(6.0, 6.0)\""}, {"return": "\"(6000, 6000)\""}], "parsed_inputs": [[["acc", "0"], ["x", "5"]], [["acc", "10"], ["x", "2"]], [["acc", "-3"], ["x", "4"]], [["acc", "0.5"], ["x", "1.2"]], [["acc", "100"], ["x", "0"]], [["acc", "-10"], ["x", "-5"]], [["acc", "3"], ["x", "7"]], [["acc", "2.5"], ["x", "3.8"]], [["acc", "0"], ["x", "0"]], [["acc", "50"], ["x", "-20"]]], "exec_code": "def aux_sum(acc, x):\n    r = acc + x\n    return r, r\n", "output": "The function is:\n\n```python\ndef aux_sum(acc, x):\n    r = acc + x\n    return r, r\n\n```", "choosed_example_idx": [2, 8, 0, 9, 7, 6, 5], "prompt": "Input: dict(acc=-3, x=4), Output: \"(1, 1)\"\nInput: dict(acc=0, x=0), Output: \"(0, 0)\"\nInput: dict(acc=0, x=5), Output: \"(5, 5)\"\nInput: dict(acc=50, x=-20), Output: \"(30, 30)\"\nInput: dict(acc=2.5, x=3.8), Output: \"(6.3, 6.3)\"\nInput: dict(acc=3, x=7), Output: \"(10, 10)\"\nInput: dict(acc=-10, x=-5), Output: \"(-15, -15)\"\n\nWrite a function that generates the output from the input.\nFunction: aux_sum\n", "id": "4b64f242dc7acff4df6e8e67c1100e9471c9ed6e_0"}
{"example_str": "examples = [\n    dict(input=\"hello\"),\n    dict(input=\"_hello\"),\n    dict(input=\"1hello\"),\n    dict(input=\"hello world\"),\n    dict(input=\"hello@world\"),\n    dict(input=\"hello.world\"),\n    dict(input=\"hello!world\"),\n    dict(input=\"hello-world\"),\n    dict(input=\"hello/world\"),\n    dict(input=\"hello\\\\world\"),\n]\nexamples += [\n    dict(input=\"hello123\"),  # Alphanumeric string\n    dict(input=\"hello world\"),  # Contains space\n    dict(input=\"123start\"),  # Starts with a number\n    dict(input=\"#hashtag\"),  # Starts with a non-alphanumeric character\n    dict(input=\"no_specials\"),  # Only underscores and alphanumerics\n    dict(input=\"with-dash\"),  # Contains a dash\n    dict(input=\"trailing!\"),  # Ends with a non-alphanumeric character\n    dict(input=\"_private\"),  # Starts with an underscore\n    dict(input=\"UPPER_case\"),  # Mixed case with underscore\n    dict(input=\"123_456\"),  # Numbers and underscore\n]\nexamples += [\n    dict(input=\"123abc\"),\n    dict(input=\"!@#$$%^\"),\n    dict(input=\"normal_string\"),\n    dict(input=\"_alreadyCorrect\"),\n    dict(input=\"with spaces\"),\n    dict(input=\"with-dash\"),\n    dict(input=\"with.period\"),\n    dict(input=\"123\"),\n    dict(input=\"UPPERCASE\"),\n    dict(input=\"CamelCaseInput\")\n]", "code": "def sanitize(input):\n    if input[0] != '_' and not input[0].isalpha():\n        input = '_' + input[1:]\n    return ''.join([(character if character.isalnum() or character == '_' else\n        '_') for character in input])\n", "func_name": "sanitize", "exec_status": true, "example_inputs": ["\"{'input': 'hello'}\"", "\"{'input': '_hello'}\"", "\"{'input': '1hello'}\"", "\"{'input': 'hello world'}\"", "\"{'input': 'hello@world'}\"", "\"{'input': 'hello.world'}\"", "\"{'input': 'hello!world'}\"", "\"{'input': 'hello-world'}\"", "\"{'input': 'hello/world'}\"", "\"{'input': 'hello\\\\\\\\world'}\""], "example_outputs": [{"return": "\"'hello'\""}, {"return": "\"'_hello'\""}, {"return": "\"'_hello'\""}, {"return": "\"'hello_world'\""}, {"return": "\"'hello_world'\""}, {"return": "\"'hello_world'\""}, {"return": "\"'hello_world'\""}, {"return": "\"'hello_world'\""}, {"return": "\"'hello_world'\""}, {"return": "\"'hello_world'\""}, {"return": "\"'hello123'\""}, {"return": "\"'hello_world'\""}, {"return": "\"'_23start'\""}, {"return": "\"'_hashtag'\""}, {"return": "\"'no_specials'\""}, {"return": "\"'with_dash'\""}, {"return": "\"'trailing_'\""}, {"return": "\"'_private'\""}, {"return": "\"'UPPER_case'\""}, {"return": "\"'_23_456'\""}, {"return": "\"'_23abc'\""}, {"return": "\"'_______'\""}, {"return": "\"'normal_string'\""}, {"return": "\"'_alreadyCorrect'\""}, {"return": "\"'with_spaces'\""}, {"return": "\"'with_dash'\""}, {"return": "\"'with_period'\""}, {"return": "\"'_23'\""}, {"return": "\"'UPPERCASE'\""}, {"return": "\"'CamelCaseInput'\""}], "parsed_inputs": [[["input", "\"hello\""]], [["input", "\"_hello\""]], [["input", "\"1hello\""]], [["input", "\"hello world\""]], [["input", "\"hello@world\""]], [["input", "\"hello.world\""]], [["input", "\"hello!world\""]], [["input", "\"hello-world\""]], [["input", "\"hello/world\""]], [["input", "\"hello\\\\world\""]]], "exec_code": "def sanitize(input):\n    if input[0] != '_' and not input[0].isalpha():\n        input = '_' + input[1:]\n    return ''.join([(character if character.isalnum() or character == '_' else\n        '_') for character in input])\n", "output": "The function is:\n\n```python\ndef sanitize(input):\n    if input[0] != '_' and not input[0].isalpha():\n        input = '_' + input[1:]\n    return ''.join([(character if character.isalnum() or character == '_' else\n        '_') for character in input])\n\n```", "choosed_example_idx": [5, 7, 8, 9], "prompt": "Function: sanitize\nWrite a function that generates the output from the input.\n\nInput: dict(input=\"hello.world\"), Output: \"'hello_world'\"\nInput: dict(input=\"hello-world\"), Output: \"'hello_world'\"\nInput: dict(input=\"hello/world\"), Output: \"'hello_world'\"\nInput: dict(input=\"hello\\\\world\"), Output: \"'hello_world'\"\n\n", "id": "dc46042ffc94b254e64bc2e8caac494d44d9f4af_0"}
{"example_str": "examples = [\n    dict(X=1, Y=2, walkTime=3, sneakTime=4),\n    dict(X=10, Y=20, walkTime=5, sneakTime=6),\n    dict(X=0, Y=0, walkTime=1, sneakTime=1),\n    dict(X=-1, Y=1, walkTime=2, sneakTime=3),\n    dict(X=5, Y=5, walkTime=10, sneakTime=20),\n    dict(X=100, Y=200, walkTime=30, sneakTime=40),\n    dict(X=3, Y=4, walkTime=5, sneakTime=6),\n    dict(X=7, Y=8, walkTime=9, sneakTime=10),\n    dict(X=11, Y=12, walkTime=13, sneakTime=14),\n    dict(X=25, Y=30, walkTime=35, sneakTime=40),\n]\nexamples += [\n    dict(X=0, Y=0, walkTime=1, sneakTime=1),\n    dict(X=5, Y=5, walkTime=2, sneakTime=3),\n    dict(X=10, Y=10, walkTime=5, sneakTime=2),\n    dict(X=-5, Y=-5, walkTime=3, sneakTime=4),\n    dict(X=0, Y=10, walkTime=1, sneakTime=2),\n    dict(X=10, Y=0, walkTime=2, sneakTime=1),\n    dict(X=15, Y=20, walkTime=4, sneakTime=3),\n    dict(X=-10, Y=5, walkTime=2, sneakTime=5),\n    dict(X=7, Y=-3, walkTime=3, sneakTime=2),\n    dict(X=20, Y=15, walkTime=5, sneakTime=1)\n]\nexamples += [\n    dict(X=0, Y=0, walkTime=1, sneakTime=2),\n    dict(X=1, Y=1, walkTime=2, sneakTime=1),\n    dict(X=5, Y=5, walkTime=3, sneakTime=4),\n    dict(X=10, Y=10, walkTime=5, sneakTime=3),\n    dict(X=2, Y=3, walkTime=4, sneakTime=5),\n    dict(X=3, Y=2, walkTime=5, sneakTime=4),\n    dict(X=0, Y=5, walkTime=1, sneakTime=1),\n    dict(X=5, Y=0, walkTime=2, sneakTime=2),\n    dict(X=7, Y=8, walkTime=6, sneakTime=7),\n    dict(X=8, Y=7, walkTime=7, sneakTime=6)\n]", "code": "def solution(X, Y, walkTime, sneakTime):\n    return 0\n", "func_name": "solution", "exec_status": true, "example_inputs": ["\"{'X': 1, 'Y': 2, 'walkTime': 3, 'sneakTime': 4}\"", "\"{'X': 10, 'Y': 20, 'walkTime': 5, 'sneakTime': 6}\"", "\"{'X': 0, 'Y': 0, 'walkTime': 1, 'sneakTime': 1}\"", "\"{'X': -1, 'Y': 1, 'walkTime': 2, 'sneakTime': 3}\"", "\"{'X': 5, 'Y': 5, 'walkTime': 10, 'sneakTime': 20}\"", "\"{'X': 100, 'Y': 200, 'walkTime': 30, 'sneakTime': 40}\"", "\"{'X': 3, 'Y': 4, 'walkTime': 5, 'sneakTime': 6}\"", "\"{'X': 7, 'Y': 8, 'walkTime': 9, 'sneakTime': 10}\"", "\"{'X': 11, 'Y': 12, 'walkTime': 13, 'sneakTime': 14}\"", "\"{'X': 25, 'Y': 30, 'walkTime': 35, 'sneakTime': 40}\""], "example_outputs": [{"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}], "parsed_inputs": [[["X", "1"], ["Y", "2"], ["walkTime", "3"], ["sneakTime", "4"]], [["X", "10"], ["Y", "20"], ["walkTime", "5"], ["sneakTime", "6"]], [["X", "0"], ["Y", "0"], ["walkTime", "1"], ["sneakTime", "1"]], [["X", "-1"], ["Y", "1"], ["walkTime", "2"], ["sneakTime", "3"]], [["X", "5"], ["Y", "5"], ["walkTime", "10"], ["sneakTime", "20"]], [["X", "100"], ["Y", "200"], ["walkTime", "30"], ["sneakTime", "40"]], [["X", "3"], ["Y", "4"], ["walkTime", "5"], ["sneakTime", "6"]], [["X", "7"], ["Y", "8"], ["walkTime", "9"], ["sneakTime", "10"]], [["X", "11"], ["Y", "12"], ["walkTime", "13"], ["sneakTime", "14"]], [["X", "25"], ["Y", "30"], ["walkTime", "35"], ["sneakTime", "40"]]], "exec_code": "def solution(X, Y, walkTime, sneakTime):\n    return 0\n", "output": "The function is:\n\n```python\ndef solution(X, Y, walkTime, sneakTime):\n    return 0\n\n```", "choosed_example_idx": [0, 2, 3, 4, 6, 9], "prompt": "Input: dict(X=1, Y=2, walkTime=3, sneakTime=4), Output: \"0\"\nInput: dict(X=0, Y=0, walkTime=1, sneakTime=1), Output: \"0\"\nInput: dict(X=-1, Y=1, walkTime=2, sneakTime=3), Output: \"0\"\nInput: dict(X=5, Y=5, walkTime=10, sneakTime=20), Output: \"0\"\nInput: dict(X=3, Y=4, walkTime=5, sneakTime=6), Output: \"0\"\nInput: dict(X=25, Y=30, walkTime=35, sneakTime=40), Output: \"0\"\n\nWrite a function that generates the output from the input.\nFunction: solution\n", "id": "3750e735b2f23a10e90abe88fe08f27f27920472_0"}
{"example_str": "examples = [\n    dict(index='my_index', info_tuple=(('hello world', 1.0), ('foo bar', 2.0))),\n    dict(index='another_index', info_tuple=(('quick brown fox', 3.0),)),\n    dict(index='test_index', info_tuple=(('this is a test', 4.0), ('another test', 5.0))),\n    dict(index='my_index', info_tuple=(('single word', 1.0),)),\n    dict(index='empty_index', info_tuple=(('', 1.0),)),\n    dict(index='multiple_texts', info_tuple=(('text1', 1.0), ('text2', 2.0), ('text3', 3.0))),\n    dict(index='weights_only', info_tuple=((' ', 1.0), ('', 2.0))),\n    dict(index='long_text', info_tuple=(('this is a very long text that needs to be analyzed', 1.0),)),\n    dict(index='short_texts', info_tuple=(('a', 1.0), ('b', 2.0), ('c', 3.0))),\n    dict(index='mixed_case', info_tuple=(('MiXeD cAsE tExT', 1.0),)),\n]", "code": "def gen_suggests(index, info_tuple):\n    used_words = set()\n    suggests = []\n    for text, weight in info_tuple:\n        if text:\n            words = es.indices.analyze(index=index, analyzer='ik_smart',\n                params={'filter': ['lowercase']}, body=text)\n            analyzed_words = set([r['token'] for r in words['tokens'] if \n                len(r['token']) > 1])\n            new_words = analyzed_words - used_words\n        else:\n            new_words = set()\n        if new_words:\n            suggests.append({'input': list(new_words), 'weight': weight})\n            used_words = used_words.union(new_words)\n    return suggests\n", "func_name": "gen_suggests", "exec_status": true, "example_inputs": ["\"{'index': 'my_index', 'info_tuple': (('hello world', 1.0), ('foo bar', 2.0))}\"", "\"{'index': 'another_index', 'info_tuple': (('quick brown fox', 3.0),)}\"", "\"{'index': 'test_index', 'info_tuple': (('this is a test', 4.0), ('another test', 5.0))}\"", "\"{'index': 'my_index', 'info_tuple': (('single word', 1.0),)}\"", "\"{'index': 'empty_index', 'info_tuple': (('', 1.0),)}\"", "\"{'index': 'multiple_texts', 'info_tuple': (('text1', 1.0), ('text2', 2.0), ('text3', 3.0))}\"", "\"{'index': 'weights_only', 'info_tuple': ((' ', 1.0), ('', 2.0))}\"", "\"{'index': 'long_text', 'info_tuple': (('this is a very long text that needs to be analyzed', 1.0),)}\"", "\"{'index': 'short_texts', 'info_tuple': (('a', 1.0), ('b', 2.0), ('c', 3.0))}\"", "\"{'index': 'mixed_case', 'info_tuple': (('MiXeD cAsE tExT', 1.0),)}\""], "example_outputs": [{"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'es' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'es' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'es' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'es' is not defined\""}, {"trace": "[\"{'index': 'empty_index', 'info_tuple': (('', 1.0),)}\", \"Line 1->    used_words = set()\", \"{'used_words': set()}\", \"Line 2->    suggests = []\", \"{'suggests': []}\", \"Line 3->    for text, weight in info_tuple:\", \"{'text': '', 'weight': 1.0}\", \"Line 4->        if text:\", \"Line 11->            new_words = set()\", \"{'new_words': set()}\", \"Line 12->        if new_words:\", \"Line 3->    for text, weight in info_tuple:\", \"Line 15->    return suggests\"]", "return": "\"[]\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'es' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'es' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'es' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'es' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'es' is not defined\""}], "parsed_inputs": [[["index", "\"my_index\""], ["info_tuple", "(('hello world', 1.0), ('foo bar', 2.0))"]], [["index", "\"another_index\""], ["info_tuple", "(('quick brown fox', 3.0),)"]], [["index", "\"test_index\""], ["info_tuple", "(('this is a test', 4.0), ('another test', 5.0))"]], [["index", "\"my_index\""], ["info_tuple", "(('single word', 1.0),)"]], [["index", "\"empty_index\""], ["info_tuple", "(('', 1.0),)"]], [["index", "\"multiple_texts\""], ["info_tuple", "(('text1', 1.0), ('text2', 2.0), ('text3', 3.0))"]], [["index", "\"weights_only\""], ["info_tuple", "((' ', 1.0), ('', 2.0))"]], [["index", "\"long_text\""], ["info_tuple", "(('this is a very long text that needs to be analyzed', 1.0),)"]], [["index", "\"short_texts\""], ["info_tuple", "(('a', 1.0), ('b', 2.0), ('c', 3.0))"]], [["index", "\"mixed_case\""], ["info_tuple", "(('MiXeD cAsE tExT', 1.0),)"]]], "exec_code": "def gen_suggests(index, info_tuple):\n    used_words = set()\n    suggests = []\n    for text, weight in info_tuple:\n        if text:\n            words = es.indices.analyze(index=index, analyzer='ik_smart',\n                params={'filter': ['lowercase']}, body=text)\n            analyzed_words = set([r['token'] for r in words['tokens'] if \n                len(r['token']) > 1])\n            new_words = analyzed_words - used_words\n        else:\n            new_words = set()\n        if new_words:\n            suggests.append({'input': list(new_words), 'weight': weight})\n            used_words = used_words.union(new_words)\n    return suggests\n", "output": "The function is:\n\n```python\ndef gen_suggests(index, info_tuple):\n    used_words = set()\n    suggests = []\n    for text, weight in info_tuple:\n        if text:\n            words = es.indices.analyze(index=index, analyzer='ik_smart',\n                params={'filter': ['lowercase']}, body=text)\n            analyzed_words = set([r['token'] for r in words['tokens'] if \n                len(r['token']) > 1])\n            new_words = analyzed_words - used_words\n        else:\n            new_words = set()\n        if new_words:\n            suggests.append({'input': list(new_words), 'weight': weight})\n            used_words = used_words.union(new_words)\n    return suggests\n\n```", "choosed_example_idx": [6, 2, 4, 3], "prompt": "Function: gen_suggests\n\n\nInput: dict(index=\"weights_only\", info_tuple=((' ', 1.0), ('', 2.0))), Output: \"<class 'NameError'>: name 'es' is not defined\"\nInput: dict(index=\"test_index\", info_tuple=(('this is a test', 4.0), ('another test', 5.0))), Output: \"<class 'NameError'>: name 'es' is not defined\"\nInput: dict(index=\"empty_index\", info_tuple=(('', 1.0),)), Output: \"[]\"\nInput: dict(index=\"my_index\", info_tuple=(('single word', 1.0),)), Output: \"<class 'NameError'>: name 'es' is not defined\"\n\n\nWrite a function that generates the output from the input.\n", "id": "89f65a6b6909a016186a7fc901e4da33350ef44a_0"}
{"example_str": "examples = [\n    dict(line='ბატონობა'),\n    dict(line='დედაქალაქი'),\n    dict(line='ჯარისკაცი'),\n    dict(line='გამოფენა'),\n    dict(line='ღორღო'),\n    dict(line='ჰავაი'),\n    dict(line='კავკასია'),\n    dict(line='ლექსიკონი'),\n    dict(line='მართველი'),\n    dict(line='ნატო'),\n]\nexamples += [\n    dict(line=\"ბდძჯგღჰკქლმნპფყრსშტთწცჭჩვხზჟაეიოუ\"),\n    dict(line=\"გამარჯობა\"),\n    dict(line=\"ქართული ენა\"),\n    dict(line=\"ტექნოლოგია\"),\n    dict(line=\"ფუტკრის ხორცი\"),\n    dict(line=\"საქართველო\"),\n    dict(line=\"მთის წყალი\"),\n    dict(line=\"ბილიკი\"),\n    dict(line=\"ხელოვნება\"),\n    dict(line=\"დიდი მთავარი\")\n]\nexamples += [\n    dict(line='ბდძჯგღჰკქლმნპფყრსშტთწცჭჩვხზჟაეიოუ'),\n    dict(line='ბადგი'),\n    dict(line='ლმნპფყრსშტთწცჭჩვხზჟაეიოუ'),\n    dict(line='ქართული ენა'),\n    dict(line='მისალმება'),\n    dict(line='გამარჯობა'),\n    dict(line='თბილისი'),\n    dict(line='საქართველო'),\n    dict(line='ბათუმი'),\n    dict(line='კახეთი')\n]", "code": "def ipageo(line):\n    ipa = {'ბ': 'b', 'დ': 'd', 'ძ': 'dz', 'ჯ': 'dʒ', 'გ': 'ɡ', 'ღ': 'ɣ',\n        'ჰ': 'h', 'კ': 'kʼ', 'ქ': 'kʰ', 'ლ': 'l', 'მ': 'm', 'ნ': 'n', 'პ':\n        'pʼ', 'ფ': 'pʰ', 'ყ': 'qʼ', 'რ': 'r', 'ს': 's', 'შ': 'ʃ', 'ტ': 'tʼ',\n        'თ': 'tʰ', 'წ': 'tsʼ', 'ც': 'tsʰ', 'ჭ': 'tʃʼ', 'ჩ': 'tʃʰ', 'ვ': 'v',\n        'ხ': 'x', 'ზ': 'z', 'ჟ': 'ʒ', 'ა': 'ɑ', 'ე': 'ɛ', 'ი': 'i', 'ო':\n        'ɔ', 'უ': 'u'}\n    for char in ipa:\n        line = line.replace(char, ipa[char])\n    return line\n", "func_name": "ipageo", "exec_status": true, "example_inputs": ["\"{'line': '\\u10d1\\u10d0\\u10e2\\u10dd\\u10dc\\u10dd\\u10d1\\u10d0'}\"", "\"{'line': '\\u10d3\\u10d4\\u10d3\\u10d0\\u10e5\\u10d0\\u10da\\u10d0\\u10e5\\u10d8'}\"", "\"{'line': '\\u10ef\\u10d0\\u10e0\\u10d8\\u10e1\\u10d9\\u10d0\\u10ea\\u10d8'}\"", "\"{'line': '\\u10d2\\u10d0\\u10db\\u10dd\\u10e4\\u10d4\\u10dc\\u10d0'}\"", "\"{'line': '\\u10e6\\u10dd\\u10e0\\u10e6\\u10dd'}\"", "\"{'line': '\\u10f0\\u10d0\\u10d5\\u10d0\\u10d8'}\"", "\"{'line': '\\u10d9\\u10d0\\u10d5\\u10d9\\u10d0\\u10e1\\u10d8\\u10d0'}\"", "\"{'line': '\\u10da\\u10d4\\u10e5\\u10e1\\u10d8\\u10d9\\u10dd\\u10dc\\u10d8'}\"", "\"{'line': '\\u10db\\u10d0\\u10e0\\u10d7\\u10d5\\u10d4\\u10da\\u10d8'}\"", "\"{'line': '\\u10dc\\u10d0\\u10e2\\u10dd'}\""], "example_outputs": [{"return": "\"'b\\u0251t\\u02bc\\u0254n\\u0254b\\u0251'\""}, {"return": "\"'d\\u025bd\\u0251k\\u02b0\\u0251l\\u0251k\\u02b0i'\""}, {"return": "\"'d\\u0292\\u0251risk\\u02bc\\u0251ts\\u02b0i'\""}, {"return": "\"'\\u0261\\u0251m\\u0254p\\u02b0\\u025bn\\u0251'\""}, {"return": "\"'\\u0263\\u0254r\\u0263\\u0254'\""}, {"return": "\"'h\\u0251v\\u0251i'\""}, {"return": "\"'k\\u02bc\\u0251vk\\u02bc\\u0251si\\u0251'\""}, {"return": "\"'l\\u025bk\\u02b0sik\\u02bc\\u0254ni'\""}, {"return": "\"'m\\u0251rt\\u02b0v\\u025bli'\""}, {"return": "\"'n\\u0251t\\u02bc\\u0254'\""}, {"return": "\"'bddzd\\u0292\\u0261\\u0263hk\\u02bck\\u02b0lmnp\\u02bcp\\u02b0q\\u02bcrs\\u0283t\\u02bct\\u02b0ts\\u02bcts\\u02b0t\\u0283\\u02bct\\u0283\\u02b0vxz\\u0292\\u0251\\u025bi\\u0254u'\""}, {"return": "\"'\\u0261\\u0251m\\u0251rd\\u0292\\u0254b\\u0251'\""}, {"return": "\"'k\\u02b0\\u0251rt\\u02b0uli \\u025bn\\u0251'\""}, {"return": "\"'t\\u02bc\\u025bk\\u02b0n\\u0254l\\u0254\\u0261i\\u0251'\""}, {"return": "\"'p\\u02b0ut\\u02bck\\u02bcris x\\u0254rts\\u02b0i'\""}, {"return": "\"'s\\u0251k\\u02b0\\u0251rt\\u02b0v\\u025bl\\u0254'\""}, {"return": "\"'mt\\u02b0is ts\\u02bcq\\u02bc\\u0251li'\""}, {"return": "\"'bilik\\u02bci'\""}, {"return": "\"'x\\u025bl\\u0254vn\\u025bb\\u0251'\""}, {"return": "\"'didi mt\\u02b0\\u0251v\\u0251ri'\""}, {"return": "\"'bddzd\\u0292\\u0261\\u0263hk\\u02bck\\u02b0lmnp\\u02bcp\\u02b0q\\u02bcrs\\u0283t\\u02bct\\u02b0ts\\u02bcts\\u02b0t\\u0283\\u02bct\\u0283\\u02b0vxz\\u0292\\u0251\\u025bi\\u0254u'\""}, {"return": "\"'b\\u0251d\\u0261i'\""}, {"return": "\"'lmnp\\u02bcp\\u02b0q\\u02bcrs\\u0283t\\u02bct\\u02b0ts\\u02bcts\\u02b0t\\u0283\\u02bct\\u0283\\u02b0vxz\\u0292\\u0251\\u025bi\\u0254u'\""}, {"return": "\"'k\\u02b0\\u0251rt\\u02b0uli \\u025bn\\u0251'\""}, {"return": "\"'mis\\u0251lm\\u025bb\\u0251'\""}, {"return": "\"'\\u0261\\u0251m\\u0251rd\\u0292\\u0254b\\u0251'\""}, {"return": "\"'t\\u02b0bilisi'\""}, {"return": "\"'s\\u0251k\\u02b0\\u0251rt\\u02b0v\\u025bl\\u0254'\""}, {"return": "\"'b\\u0251t\\u02b0umi'\""}, {"return": "\"'k\\u02bc\\u0251x\\u025bt\\u02b0i'\""}], "parsed_inputs": [[["line", "\"\\u10d1\\u10d0\\u10e2\\u10dd\\u10dc\\u10dd\\u10d1\\u10d0\""]], [["line", "\"\\u10d3\\u10d4\\u10d3\\u10d0\\u10e5\\u10d0\\u10da\\u10d0\\u10e5\\u10d8\""]], [["line", "\"\\u10ef\\u10d0\\u10e0\\u10d8\\u10e1\\u10d9\\u10d0\\u10ea\\u10d8\""]], [["line", "\"\\u10d2\\u10d0\\u10db\\u10dd\\u10e4\\u10d4\\u10dc\\u10d0\""]], [["line", "\"\\u10e6\\u10dd\\u10e0\\u10e6\\u10dd\""]], [["line", "\"\\u10f0\\u10d0\\u10d5\\u10d0\\u10d8\""]], [["line", "\"\\u10d9\\u10d0\\u10d5\\u10d9\\u10d0\\u10e1\\u10d8\\u10d0\""]], [["line", "\"\\u10da\\u10d4\\u10e5\\u10e1\\u10d8\\u10d9\\u10dd\\u10dc\\u10d8\""]], [["line", "\"\\u10db\\u10d0\\u10e0\\u10d7\\u10d5\\u10d4\\u10da\\u10d8\""]], [["line", "\"\\u10dc\\u10d0\\u10e2\\u10dd\""]]], "exec_code": "def ipageo(line):\n    ipa = {'ბ': 'b', 'დ': 'd', 'ძ': 'dz', 'ჯ': 'dʒ', 'გ': 'ɡ', 'ღ': 'ɣ',\n        'ჰ': 'h', 'კ': 'kʼ', 'ქ': 'kʰ', 'ლ': 'l', 'მ': 'm', 'ნ': 'n', 'პ':\n        'pʼ', 'ფ': 'pʰ', 'ყ': 'qʼ', 'რ': 'r', 'ს': 's', 'შ': 'ʃ', 'ტ': 'tʼ',\n        'თ': 'tʰ', 'წ': 'tsʼ', 'ც': 'tsʰ', 'ჭ': 'tʃʼ', 'ჩ': 'tʃʰ', 'ვ': 'v',\n        'ხ': 'x', 'ზ': 'z', 'ჟ': 'ʒ', 'ა': 'ɑ', 'ე': 'ɛ', 'ი': 'i', 'ო':\n        'ɔ', 'უ': 'u'}\n    for char in ipa:\n        line = line.replace(char, ipa[char])\n    return line\n", "output": "The function is:\n\n```python\ndef ipageo(line):\n    ipa = {'ბ': 'b', 'დ': 'd', 'ძ': 'dz', 'ჯ': 'dʒ', 'გ': 'ɡ', 'ღ': 'ɣ',\n        'ჰ': 'h', 'კ': 'kʼ', 'ქ': 'kʰ', 'ლ': 'l', 'მ': 'm', 'ნ': 'n', 'პ':\n        'pʼ', 'ფ': 'pʰ', 'ყ': 'qʼ', 'რ': 'r', 'ს': 's', 'შ': 'ʃ', 'ტ': 'tʼ',\n        'თ': 'tʰ', 'წ': 'tsʼ', 'ც': 'tsʰ', 'ჭ': 'tʃʼ', 'ჩ': 'tʃʰ', 'ვ': 'v',\n        'ხ': 'x', 'ზ': 'z', 'ჟ': 'ʒ', 'ა': 'ɑ', 'ე': 'ɛ', 'ი': 'i', 'ო':\n        'ɔ', 'უ': 'u'}\n    for char in ipa:\n        line = line.replace(char, ipa[char])\n    return line\n\n```", "choosed_example_idx": [0, 3, 9, 7, 4, 1, 6, 5, 8], "prompt": "Function: ipageo\nWrite a function that generates the output from the input.\nInput: dict(line=\"\\u10d1\\u10d0\\u10e2\\u10dd\\u10dc\\u10dd\\u10d1\\u10d0\"), Output: \"'b\\u0251t\\u02bc\\u0254n\\u0254b\\u0251'\"\nInput: dict(line=\"\\u10d2\\u10d0\\u10db\\u10dd\\u10e4\\u10d4\\u10dc\\u10d0\"), Output: \"'\\u0261\\u0251m\\u0254p\\u02b0\\u025bn\\u0251'\"\nInput: dict(line=\"\\u10dc\\u10d0\\u10e2\\u10dd\"), Output: \"'n\\u0251t\\u02bc\\u0254'\"\nInput: dict(line=\"\\u10da\\u10d4\\u10e5\\u10e1\\u10d8\\u10d9\\u10dd\\u10dc\\u10d8\"), Output: \"'l\\u025bk\\u02b0sik\\u02bc\\u0254ni'\"\nInput: dict(line=\"\\u10e6\\u10dd\\u10e0\\u10e6\\u10dd\"), Output: \"'\\u0263\\u0254r\\u0263\\u0254'\"\nInput: dict(line=\"\\u10d3\\u10d4\\u10d3\\u10d0\\u10e5\\u10d0\\u10da\\u10d0\\u10e5\\u10d8\"), Output: \"'d\\u025bd\\u0251k\\u02b0\\u0251l\\u0251k\\u02b0i'\"\nInput: dict(line=\"\\u10d9\\u10d0\\u10d5\\u10d9\\u10d0\\u10e1\\u10d8\\u10d0\"), Output: \"'k\\u02bc\\u0251vk\\u02bc\\u0251si\\u0251'\"\nInput: dict(line=\"\\u10f0\\u10d0\\u10d5\\u10d0\\u10d8\"), Output: \"'h\\u0251v\\u0251i'\"\nInput: dict(line=\"\\u10db\\u10d0\\u10e0\\u10d7\\u10d5\\u10d4\\u10da\\u10d8\"), Output: \"'m\\u0251rt\\u02b0v\\u025bli'\"\n\n", "id": "a65fa88f5d585c7c6b088538ad22585341c1a0e1_0"}
{"example_str": "examples = [\n    dict(now=10, then=5),\n    dict(now=20, then=20),\n    dict(now=30, then=40),\n    dict(now=0, then=10),\n    dict(now=100, then=50),\n    dict(now=25, then=25),\n    dict(now=50, then=75),\n    dict(now=1, then=2),\n    dict(now=0, then=0),\n    dict(now=1000, then=500),\n]\nexamples += [\n    dict(now=100, then=50),\n    dict(now=50, then=100),\n    dict(now=75, then=75),\n    dict(now=0, then=100),\n    dict(now=100, then=0),\n    dict(now=-50, then=-100),\n    dict(now=-100, then=-50),\n    dict(now=200, then=150),\n    dict(now=150, then=200),\n    dict(now=0, then=0)\n]\nexamples += [\n    dict(now=100, then=50),\n    dict(now=50, then=100),\n    dict(now=200, then=200),\n    dict(now=0, then=100),\n    dict(now=100, then=0),\n    dict(now=150, then=75),\n    dict(now=75, then=150),\n    dict(now=100, then=90),\n    dict(now=90, then=100),\n    dict(now=500, then=450)\n]", "code": "def compareNumbers(now, then):\n    percentChange = 0\n    compNumDict = {'change': 'even', 'percent': 0}\n    if now > then:\n        change = 'increase'\n        try:\n            percentChange = round((now - then) / now * 100, 2)\n        except ZeroDivisionError as e:\n            percentChange = 0\n        except Exception as e:\n            pass\n        compNumDict = {'change': change, 'percent': percentChange}\n    elif now < then:\n        change = 'decrease'\n        try:\n            percentChange = round((then - now) / then * 100, 2)\n        except ZeroDivisionError as e:\n            percentChange = 0\n        except Exception as e:\n            pass\n        compNumDict = {'change': change, 'percent': percentChange}\n    return compNumDict\n", "func_name": "compareNumbers", "exec_status": true, "example_inputs": ["\"{'now': 10, 'then': 5}\"", "\"{'now': 20, 'then': 20}\"", "\"{'now': 30, 'then': 40}\"", "\"{'now': 0, 'then': 10}\"", "\"{'now': 100, 'then': 50}\"", "\"{'now': 25, 'then': 25}\"", "\"{'now': 50, 'then': 75}\"", "\"{'now': 1, 'then': 2}\"", "\"{'now': 0, 'then': 0}\"", "\"{'now': 1000, 'then': 500}\""], "example_outputs": [{"return": "\"{'change': 'increase', 'percent': 50.0}\""}, {"return": "\"{'change': 'even', 'percent': 0}\""}, {"return": "\"{'change': 'decrease', 'percent': 25.0}\""}, {"return": "\"{'change': 'decrease', 'percent': 100.0}\""}, {"return": "\"{'change': 'increase', 'percent': 50.0}\""}, {"return": "\"{'change': 'even', 'percent': 0}\""}, {"return": "\"{'change': 'decrease', 'percent': 33.33}\""}, {"return": "\"{'change': 'decrease', 'percent': 50.0}\""}, {"return": "\"{'change': 'even', 'percent': 0}\""}, {"return": "\"{'change': 'increase', 'percent': 50.0}\""}, {"return": "\"{'change': 'increase', 'percent': 50.0}\""}, {"return": "\"{'change': 'decrease', 'percent': 50.0}\""}, {"return": "\"{'change': 'even', 'percent': 0}\""}, {"return": "\"{'change': 'decrease', 'percent': 100.0}\""}, {"return": "\"{'change': 'increase', 'percent': 100.0}\""}, {"return": "\"{'change': 'increase', 'percent': -100.0}\""}, {"return": "\"{'change': 'decrease', 'percent': -100.0}\""}, {"return": "\"{'change': 'increase', 'percent': 25.0}\""}, {"return": "\"{'change': 'decrease', 'percent': 25.0}\""}, {"return": "\"{'change': 'even', 'percent': 0}\""}, {"return": "\"{'change': 'increase', 'percent': 50.0}\""}, {"return": "\"{'change': 'decrease', 'percent': 50.0}\""}, {"return": "\"{'change': 'even', 'percent': 0}\""}, {"return": "\"{'change': 'decrease', 'percent': 100.0}\""}, {"return": "\"{'change': 'increase', 'percent': 100.0}\""}, {"return": "\"{'change': 'increase', 'percent': 50.0}\""}, {"return": "\"{'change': 'decrease', 'percent': 50.0}\""}, {"return": "\"{'change': 'increase', 'percent': 10.0}\""}, {"return": "\"{'change': 'decrease', 'percent': 10.0}\""}, {"return": "\"{'change': 'increase', 'percent': 10.0}\""}], "parsed_inputs": [[["now", "10"], ["then", "5"]], [["now", "20"], ["then", "20"]], [["now", "30"], ["then", "40"]], [["now", "0"], ["then", "10"]], [["now", "100"], ["then", "50"]], [["now", "25"], ["then", "25"]], [["now", "50"], ["then", "75"]], [["now", "1"], ["then", "2"]], [["now", "0"], ["then", "0"]], [["now", "1000"], ["then", "500"]]], "exec_code": "def compareNumbers(now, then):\n    percentChange = 0\n    compNumDict = {'change': 'even', 'percent': 0}\n    if now > then:\n        change = 'increase'\n        try:\n            percentChange = round((now - then) / now * 100, 2)\n        except ZeroDivisionError as e:\n            percentChange = 0\n        except Exception as e:\n            pass\n        compNumDict = {'change': change, 'percent': percentChange}\n    elif now < then:\n        change = 'decrease'\n        try:\n            percentChange = round((then - now) / then * 100, 2)\n        except ZeroDivisionError as e:\n            percentChange = 0\n        except Exception as e:\n            pass\n        compNumDict = {'change': change, 'percent': percentChange}\n    return compNumDict\n", "output": "The function is:\n\n```python\ndef compareNumbers(now, then):\n    percentChange = 0\n    compNumDict = {'change': 'even', 'percent': 0}\n    if now > then:\n        change = 'increase'\n        try:\n            percentChange = round((now - then) / now * 100, 2)\n        except ZeroDivisionError as e:\n            percentChange = 0\n        except Exception as e:\n            pass\n        compNumDict = {'change': change, 'percent': percentChange}\n    elif now < then:\n        change = 'decrease'\n        try:\n            percentChange = round((then - now) / then * 100, 2)\n        except ZeroDivisionError as e:\n            percentChange = 0\n        except Exception as e:\n            pass\n        compNumDict = {'change': change, 'percent': percentChange}\n    return compNumDict\n\n```", "choosed_example_idx": [6, 4, 2, 3, 1, 8, 9, 7, 0], "prompt": "Write a function that generates the output from the input.\nFunction: compareNumbers\nInput: dict(now=50, then=75), Output: \"{'change': 'decrease', 'percent': 33.33}\"\nInput: dict(now=100, then=50), Output: \"{'change': 'increase', 'percent': 50.0}\"\nInput: dict(now=30, then=40), Output: \"{'change': 'decrease', 'percent': 25.0}\"\nInput: dict(now=0, then=10), Output: \"{'change': 'decrease', 'percent': 100.0}\"\nInput: dict(now=20, then=20), Output: \"{'change': 'even', 'percent': 0}\"\nInput: dict(now=0, then=0), Output: \"{'change': 'even', 'percent': 0}\"\nInput: dict(now=1000, then=500), Output: \"{'change': 'increase', 'percent': 50.0}\"\nInput: dict(now=1, then=2), Output: \"{'change': 'decrease', 'percent': 50.0}\"\nInput: dict(now=10, then=5), Output: \"{'change': 'increase', 'percent': 50.0}\"\n\n\n", "id": "eb462504622d33395ffaa48aba35cd731eb25aeb_0"}
{"example_str": "examples = [\n    dict(lista=[\"madrid\", \"barcelona\", \"valencia\"]),\n    dict(lista=[\"  madrid  \", \" barcelona \", \"  valencia  \"]),\n    dict(lista=[\"MADRID\", \"BARCELONA\", \"VALENCIA\"]),\n    dict(lista=[\"mAdRiD\", \"bArCeLoNa\", \"vAlEnCiA\"]),\n    dict(lista=[\"madrid\", \"\", \"valencia\"]),\n    dict(lista=[\"\", \"barcelona\", \"\"]),\n    dict(lista=[\"madrid\"]),\n    dict(lista=[]),\n    dict(lista=[\"madrid\", \"barcelona\", \"valencia\", \"sevilla\", \"zaragoza\"]),\n    dict(lista=[\"madrid madrid\", \"barcelona barcelona\", \"valencia valencia\"]),\n    dict(lista=[\"madrid, barcelona, valencia\", \"sevilla, zaragoza, cordoba\"])\n]\nexamples += [\n    dict(lista=[\"new york\", \"los angeles\", \"chicago\"]),\n    dict(lista=[\"   london\", \"paris   \", \" amsterdam \"]),\n    dict(lista=[\"tokyo\", \"Beijing\", \"delhi\"]),\n    dict(lista=[\"são paulo\", \"buenos aires\", \"Lima\"]),\n    dict(lista=[\"moscow\", \"cairo\", \"bangkok\"]),\n    dict(lista=[\"sydney\", \"melbourne\", \"perth\"]),\n    dict(lista=[\"mexico city\", \"bogota\", \"santiago\"]),\n    dict(lista=[\"berlin\", \"munich\", \"hamburg\"]),\n    dict(lista=[\"toronto\", \"vancouver\", \"montreal\"]),\n    dict(lista=[\"mumbai\", \"kolkata\", \"bangalore\"])\n]\nexamples += [\n    dict(lista=[\"new york\", \"los angeles\", \"chicago\"]),\n    dict(lista=[\"   miami\", \"dallas   \", \" houston\"]),\n    dict(lista=[\"boston\", \"atlanta\", \"seattle\"]),\n    dict(lista=[\"san francisco\", \"denver\", \"portland\"]),\n    dict(lista=[\"las vegas\", \"phoenix\", \"san diego\"]),\n    dict(lista=[\"minneapolis\", \"tampa\", \"orlando\"]),\n    dict(lista=[\"sacramento\", \"cleveland\", \"pittsburgh\"]),\n    dict(lista=[\"san jose\", \"austin\", \"saint louis\"]),\n    dict(lista=[\"new orleans\", \"baltimore\", \"milwaukee\"]),\n    dict(lista=[\"albuquerque\", \"tucson\", \"fresno\"]),\n]", "code": "def formatear(lista):\n    resultado = []\n    for ciudad in lista:\n        nueva_ciudad = ciudad.strip()\n        nueva_ciudad = nueva_ciudad.title()\n        resultado.append(nueva_ciudad)\n    return resultado\n", "func_name": "formatear", "exec_status": true, "example_inputs": ["\"{'lista': ['madrid', 'barcelona', 'valencia']}\"", "\"{'lista': ['  madrid  ', ' barcelona ', '  valencia  ']}\"", "\"{'lista': ['MADRID', 'BARCELONA', 'VALENCIA']}\"", "\"{'lista': ['mAdRiD', 'bArCeLoNa', 'vAlEnCiA']}\"", "\"{'lista': ['madrid', '', 'valencia']}\"", "\"{'lista': ['', 'barcelona', '']}\"", "\"{'lista': ['madrid']}\"", "\"{'lista': []}\"", "\"{'lista': ['madrid', 'barcelona', 'valencia', 'sevilla', 'zaragoza']}\"", "\"{'lista': ['madrid madrid', 'barcelona barcelona', 'valencia valencia']}\"", "\"{'lista': ['madrid, barcelona, valencia', 'sevilla, zaragoza, cordoba']}\""], "example_outputs": [{"return": "\"['Madrid', 'Barcelona', 'Valencia']\""}, {"return": "\"['Madrid', 'Barcelona', 'Valencia']\""}, {"return": "\"['Madrid', 'Barcelona', 'Valencia']\""}, {"return": "\"['Madrid', 'Barcelona', 'Valencia']\""}, {"return": "\"['Madrid', '', 'Valencia']\""}, {"return": "\"['', 'Barcelona', '']\""}, {"return": "\"['Madrid']\""}, {"return": "\"[]\""}, {"return": "\"['Madrid', 'Barcelona', 'Valencia', 'Sevilla', 'Zaragoza']\""}, {"return": "\"['Madrid Madrid', 'Barcelona Barcelona', 'Valencia Valencia']\""}, {"return": "\"['Madrid, Barcelona, Valencia', 'Sevilla, Zaragoza, Cordoba']\""}, {"return": "\"['New York', 'Los Angeles', 'Chicago']\""}, {"return": "\"['London', 'Paris', 'Amsterdam']\""}, {"return": "\"['Tokyo', 'Beijing', 'Delhi']\""}, {"return": "\"['S\\u00e3o Paulo', 'Buenos Aires', 'Lima']\""}, {"return": "\"['Moscow', 'Cairo', 'Bangkok']\""}, {"return": "\"['Sydney', 'Melbourne', 'Perth']\""}, {"return": "\"['Mexico City', 'Bogota', 'Santiago']\""}, {"return": "\"['Berlin', 'Munich', 'Hamburg']\""}, {"return": "\"['Toronto', 'Vancouver', 'Montreal']\""}, {"return": "\"['Mumbai', 'Kolkata', 'Bangalore']\""}, {"return": "\"['New York', 'Los Angeles', 'Chicago']\""}, {"return": "\"['Miami', 'Dallas', 'Houston']\""}, {"return": "\"['Boston', 'Atlanta', 'Seattle']\""}, {"return": "\"['San Francisco', 'Denver', 'Portland']\""}, {"return": "\"['Las Vegas', 'Phoenix', 'San Diego']\""}, {"return": "\"['Minneapolis', 'Tampa', 'Orlando']\""}, {"return": "\"['Sacramento', 'Cleveland', 'Pittsburgh']\""}, {"return": "\"['San Jose', 'Austin', 'Saint Louis']\""}, {"return": "\"['New Orleans', 'Baltimore', 'Milwaukee']\""}, {"return": "\"['Albuquerque', 'Tucson', 'Fresno']\""}], "parsed_inputs": [[["lista", "['madrid', 'barcelona', 'valencia']"]], [["lista", "['  madrid  ', ' barcelona ', '  valencia  ']"]], [["lista", "['MADRID', 'BARCELONA', 'VALENCIA']"]], [["lista", "['mAdRiD', 'bArCeLoNa', 'vAlEnCiA']"]], [["lista", "['madrid', '', 'valencia']"]], [["lista", "['', 'barcelona', '']"]], [["lista", "['madrid']"]], [["lista", "[]"]], [["lista", "['madrid', 'barcelona', 'valencia', 'sevilla', 'zaragoza']"]], [["lista", "['madrid madrid', 'barcelona barcelona', 'valencia valencia']"]], [["lista", "['madrid, barcelona, valencia', 'sevilla, zaragoza, cordoba']"]]], "exec_code": "def formatear(lista):\n    resultado = []\n    for ciudad in lista:\n        nueva_ciudad = ciudad.strip()\n        nueva_ciudad = nueva_ciudad.title()\n        resultado.append(nueva_ciudad)\n    return resultado\n", "output": "The function is:\n\n```python\ndef formatear(lista):\n    resultado = []\n    for ciudad in lista:\n        nueva_ciudad = ciudad.strip()\n        nueva_ciudad = nueva_ciudad.title()\n        resultado.append(nueva_ciudad)\n    return resultado\n\n```", "choosed_example_idx": [3, 0, 9, 8, 10, 2, 4, 1, 5], "prompt": "Write a function that generates the output from the input.\nInput: dict(lista=['mAdRiD', 'bArCeLoNa', 'vAlEnCiA']), Output: \"['Madrid', 'Barcelona', 'Valencia']\"\nInput: dict(lista=['madrid', 'barcelona', 'valencia']), Output: \"['Madrid', 'Barcelona', 'Valencia']\"\nInput: dict(lista=['madrid madrid', 'barcelona barcelona', 'valencia valencia']), Output: \"['Madrid Madrid', 'Barcelona Barcelona', 'Valencia Valencia']\"\nInput: dict(lista=['madrid', 'barcelona', 'valencia', 'sevilla', 'zaragoza']), Output: \"['Madrid', 'Barcelona', 'Valencia', 'Sevilla', 'Zaragoza']\"\nInput: dict(lista=['madrid, barcelona, valencia', 'sevilla, zaragoza, cordoba']), Output: \"['Madrid, Barcelona, Valencia', 'Sevilla, Zaragoza, Cordoba']\"\nInput: dict(lista=['MADRID', 'BARCELONA', 'VALENCIA']), Output: \"['Madrid', 'Barcelona', 'Valencia']\"\nInput: dict(lista=['madrid', '', 'valencia']), Output: \"['Madrid', '', 'Valencia']\"\nInput: dict(lista=['  madrid  ', ' barcelona ', '  valencia  ']), Output: \"['Madrid', 'Barcelona', 'Valencia']\"\nInput: dict(lista=['', 'barcelona', '']), Output: \"['', 'Barcelona', '']\"\n\n\n\nFunction: formatear\n", "id": "69d216aac1db49b0878a0615d77c49ffe7b32d1f_0"}
{"example_str": "examples = [\n    dict(slack_uname=\"john\", twitter=\"john\"),\n    dict(slack_uname=\"hello\", twitter=\"hallo\"),\n    dict(slack_uname=\"abcde\", twitter=\"abcdf\"),\n    dict(slack_uname=\"xyz\", twitter=\"xyx\"),\n    dict(slack_uname=\"abcdefg\", twitter=\"abcdxyz\"),\n    dict(slack_uname=\"12345\", twitter=\"12346\"),\n    dict(slack_uname=\"python\", twitter=\"pythno\"),\n    dict(slack_uname=\" coding\", twitter=\" codong\"),\n    dict(slack_uname=\"hamming\", twitter=\"hammang\"),\n    dict(slack_uname=\"distance\", twitter=\"distnace\"),\n]\nexamples += [\n    dict(slack_uname=\"abc\", twitter=\"abc\"),  # Hamming distance = 0\n    dict(slack_uname=\"abc\", twitter=\"abd\"),  # Hamming distance = 1\n    dict(slack_uname=\"123\", twitter=\"321\"),  # Hamming distance = 2\n    dict(slack_uname=\"hello\", twitter=\"h3llo\"),  # Hamming distance = 1\n    dict(slack_uname=\"python\", twitter=\"jython\"),  # Hamming distance = 1\n    dict(slack_uname=\"example\", twitter=\"example\"),  # Hamming distance = 0\n    dict(slack_uname=\"test\", twitter=\"test1\"),  # Incorrect due to length mismatch but function will not handle properly\n    dict(slack_uname=\"node\", twitter=\"mode\"),  # Hamming distance = 1\n    dict(slack_uname=\"space\", twitter=\"spice\"),  # Hamming distance = 1\n    dict(slack_uname=\"12345\", twitter=\"1234\"),  # Incorrect due to length mismatch but function will not handle properly\n]\nexamples += [\n    dict(slack_uname=\"apple\", twitter=\"appla\"),\n    dict(slack_uname=\"hello\", twitter=\"hullo\"),\n    dict(slack_uname=\"python\", twitter=\"pythno\"),\n    dict(slack_uname=\"12345\", twitter=\"12354\"),\n    dict(slack_uname=\"abcde\", twitter=\"abced\"),\n    dict(slack_uname=\"123abc\", twitter=\"123acb\"),\n    dict(slack_uname=\"binary\", twitter=\"baniry\"),\n    dict(slack_uname=\"example\", twitter=\"exampel\"),\n    dict(slack_uname=\"test\", twitter=\"tset\"),\n    dict(slack_uname=\"function\", twitter=\"functoin\")\n]", "code": "def hamming_distance(slack_uname, twitter):\n    count = 0\n    for i in range(len(slack_uname)):\n        if slack_uname[i] != twitter[i]:\n            count += 1\n    return count\n    if len(slack_uname) == len(twitter):\n        return count\n    else:\n        count = 0\n        for i in range(len(slack_uname)):\n            if slack_uname[i] != twitter[i]:\n                count += 1\n    return count\n", "func_name": "hamming_distance", "exec_status": true, "example_inputs": ["\"{'slack_uname': 'john', 'twitter': 'john'}\"", "\"{'slack_uname': 'hello', 'twitter': 'hallo'}\"", "\"{'slack_uname': 'abcde', 'twitter': 'abcdf'}\"", "\"{'slack_uname': 'xyz', 'twitter': 'xyx'}\"", "\"{'slack_uname': 'abcdefg', 'twitter': 'abcdxyz'}\"", "\"{'slack_uname': '12345', 'twitter': '12346'}\"", "\"{'slack_uname': 'python', 'twitter': 'pythno'}\"", "\"{'slack_uname': ' coding', 'twitter': ' codong'}\"", "\"{'slack_uname': 'hamming', 'twitter': 'hammang'}\"", "\"{'slack_uname': 'distance', 'twitter': 'distnace'}\""], "example_outputs": [{"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: string index out of range\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"2\""}], "parsed_inputs": [[["slack_uname", "\"john\""], ["twitter", "\"john\""]], [["slack_uname", "\"hello\""], ["twitter", "\"hallo\""]], [["slack_uname", "\"abcde\""], ["twitter", "\"abcdf\""]], [["slack_uname", "\"xyz\""], ["twitter", "\"xyx\""]], [["slack_uname", "\"abcdefg\""], ["twitter", "\"abcdxyz\""]], [["slack_uname", "\"12345\""], ["twitter", "\"12346\""]], [["slack_uname", "\"python\""], ["twitter", "\"pythno\""]], [["slack_uname", "\" coding\""], ["twitter", "\" codong\""]], [["slack_uname", "\"hamming\""], ["twitter", "\"hammang\""]], [["slack_uname", "\"distance\""], ["twitter", "\"distnace\""]]], "exec_code": "def hamming_distance(slack_uname, twitter):\n    count = 0\n    for i in range(len(slack_uname)):\n        if slack_uname[i] != twitter[i]:\n            count += 1\n    return count\n    if len(slack_uname) == len(twitter):\n        return count\n    else:\n        count = 0\n        for i in range(len(slack_uname)):\n            if slack_uname[i] != twitter[i]:\n                count += 1\n    return count\n", "output": "The function is:\n\n```python\ndef hamming_distance(slack_uname, twitter):\n    count = 0\n    for i in range(len(slack_uname)):\n        if slack_uname[i] != twitter[i]:\n            count += 1\n    return count\n    if len(slack_uname) == len(twitter):\n        return count\n    else:\n        count = 0\n        for i in range(len(slack_uname)):\n            if slack_uname[i] != twitter[i]:\n                count += 1\n    return count\n\n```", "choosed_example_idx": [1, 8, 0, 6, 9, 4, 3], "prompt": "Input: dict(slack_uname=\"hello\", twitter=\"hallo\"), Output: \"1\"\nInput: dict(slack_uname=\"hamming\", twitter=\"hammang\"), Output: \"1\"\nInput: dict(slack_uname=\"john\", twitter=\"john\"), Output: \"0\"\nInput: dict(slack_uname=\"python\", twitter=\"pythno\"), Output: \"2\"\nInput: dict(slack_uname=\"distance\", twitter=\"distnace\"), Output: \"2\"\nInput: dict(slack_uname=\"abcdefg\", twitter=\"abcdxyz\"), Output: \"3\"\nInput: dict(slack_uname=\"xyz\", twitter=\"xyx\"), Output: \"1\"\n\nFunction: hamming_distance\nWrite a function that generates the output from the input.\n", "id": "7d0dfeabb041f9cc81dff7157aec1c350a31c859_0"}
{"example_str": "examples = [\n    dict(trace=('A', 'B', 'C'), distance=1),\n    dict(trace=('X', 'Y', 'Z', 'W'), distance=2),\n    dict(trace=('a', 'b', 'c', 'd', 'e'), distance=1),\n    dict(trace=('1', '2', '3', '4', '5'), distance=3),\n    dict(trace=('hello', 'world'), distance=1),\n    dict(trace=('foo', 'bar', 'baz', 'qux'), distance=2),\n    dict(trace=('I', 'II', 'III', 'IV', 'V'), distance=1),\n    dict(trace=('red', 'green', 'blue'), distance=1),\n    dict(trace=('apple', 'banana', 'orange', 'grape'), distance=2),\n    dict(trace=('one', 'two', 'three', 'four', 'five', 'six'), distance=3),\n]\nexamples += [\n    dict(trace=('A', 'B', 'C', 'A', 'B', 'C'), distance=1),\n    dict(trace=('X', 'Y', 'Z'), distance=2),\n    dict(trace=('start', 'middle', 'end'), distance=1),\n    dict(trace=('login', 'search', 'add to cart', 'checkout'), distance=3),\n    dict(trace=('step1', 'step2', 'step3', 'step4', 'step5'), distance=2),\n    dict(trace=('open', 'close', 'reopen'), distance=1),\n    dict(trace=('A', 'B', 'A', 'B', 'A', 'B'), distance=2),\n    dict(trace=('1', '2', '3', '4', '5', '6', '7'), distance=3),\n    dict(trace=('alpha', 'beta', 'gamma', 'delta', 'epsilon'), distance=4),\n    dict(trace=('first', 'second', 'third', 'fourth', 'fifth', 'sixth'), distance=1)\n]\nexamples += [\n    dict(trace=('A', 'B', 'C', 'A', 'B'), distance=1),\n    dict(trace=('X', 'Y', 'Z'), distance=2),\n    dict(trace=('start', 'middle', 'end'), distance=1),\n    dict(trace=('step1', 'step2', 'step3', 'step4'), distance=3),\n    dict(trace=('alpha', 'beta', 'gamma', 'delta', 'epsilon'), distance=2),\n    dict(trace=('event1', 'event2', 'event3', 'event1', 'event2'), distance=1),\n    dict(trace=('first', 'second', 'third', 'fourth', 'fifth'), distance=4),\n    dict(trace=('one', 'two', 'three', 'four', 'five', 'six'), distance=2),\n    dict(trace=('morning', 'noon', 'evening', 'night'), distance=1),\n    dict(trace=('task1', 'task2', 'task3', 'task4', 'task5', 'task6', 'task7'), distance=3)\n]", "code": "def follows(trace, distance=1):\n    \"\"\"Returns a mapping (aka. dict) from pairs of activities to frequency.\n    A pair (a, b) is part of the mapping if activity b directly follows activity a,\n    in any of the traces.\n\n    Parameters\n    ----------\n    distance: int\n        Distance two activities have to be appart to be counted in the mapping.\n    \"\"\"\n    if not isinstance(trace, tuple):\n        raise ValueError('Trace has to be a tuple of activities.')\n    if not float(distance).is_integer():\n        raise ValueError('Distance has to be an integer.')\n    if not distance >= 1:\n        raise ValueError('Distance has to be greater or equal to 1.')\n    pairs = dict()\n    for i in range(len(trace) - distance):\n        ai = trace[i]\n        aj = trace[i + distance]\n        if (ai, aj) not in pairs:\n            pairs[ai, aj] = 0\n        pairs[ai, aj] += 1\n    return pairs\n", "func_name": "follows", "exec_status": true, "example_inputs": ["\"{'trace': ('A', 'B', 'C'), 'distance': 1}\"", "\"{'trace': ('X', 'Y', 'Z', 'W'), 'distance': 2}\"", "\"{'trace': ('a', 'b', 'c', 'd', 'e'), 'distance': 1}\"", "\"{'trace': ('1', '2', '3', '4', '5'), 'distance': 3}\"", "\"{'trace': ('hello', 'world'), 'distance': 1}\"", "\"{'trace': ('foo', 'bar', 'baz', 'qux'), 'distance': 2}\"", "\"{'trace': ('I', 'II', 'III', 'IV', 'V'), 'distance': 1}\"", "\"{'trace': ('red', 'green', 'blue'), 'distance': 1}\"", "\"{'trace': ('apple', 'banana', 'orange', 'grape'), 'distance': 2}\"", "\"{'trace': ('one', 'two', 'three', 'four', 'five', 'six'), 'distance': 3}\""], "example_outputs": [{"return": "\"{('A', 'B'): 1, ('B', 'C'): 1}\""}, {"return": "\"{('X', 'Z'): 1, ('Y', 'W'): 1}\""}, {"return": "\"{('a', 'b'): 1, ('b', 'c'): 1, ('c', 'd'): 1, ('d', 'e'): 1}\""}, {"return": "\"{('1', '4'): 1, ('2', '5'): 1}\""}, {"return": "\"{('hello', 'world'): 1}\""}, {"return": "\"{('foo', 'baz'): 1, ('bar', 'qux'): 1}\""}, {"return": "\"{('I', 'II'): 1, ('II', 'III'): 1, ('III', 'IV'): 1, ('IV', 'V'): 1}\""}, {"return": "\"{('red', 'green'): 1, ('green', 'blue'): 1}\""}, {"return": "\"{('apple', 'orange'): 1, ('banana', 'grape'): 1}\""}, {"return": "\"{('one', 'four'): 1, ('two', 'five'): 1, ('three', 'six'): 1}\""}, {"return": "\"{('A', 'B'): 2, ('B', 'C'): 2, ('C', 'A'): 1}\""}, {"return": "\"{('X', 'Z'): 1}\""}, {"return": "\"{('start', 'middle'): 1, ('middle', 'end'): 1}\""}, {"return": "\"{('login', 'checkout'): 1}\""}, {"return": "\"{('step1', 'step3'): 1, ('step2', 'step4'): 1, ('step3', 'step5'): 1}\""}, {"return": "\"{('open', 'close'): 1, ('close', 'reopen'): 1}\""}, {"return": "\"{('A', 'A'): 2, ('B', 'B'): 2}\""}, {"return": "\"{('1', '4'): 1, ('2', '5'): 1, ('3', '6'): 1, ('4', '7'): 1}\""}, {"return": "\"{('alpha', 'epsilon'): 1}\""}, {"return": "\"{('first', 'second'): 1, ('second', 'third'): 1, ('third', 'fourth'): 1, ('fourth', 'fifth'): 1, ('fifth', 'sixth'): 1}\""}, {"return": "\"{('A', 'B'): 2, ('B', 'C'): 1, ('C', 'A'): 1}\""}, {"return": "\"{('X', 'Z'): 1}\""}, {"return": "\"{('start', 'middle'): 1, ('middle', 'end'): 1}\""}, {"return": "\"{('step1', 'step4'): 1}\""}, {"return": "\"{('alpha', 'gamma'): 1, ('beta', 'delta'): 1, ('gamma', 'epsilon'): 1}\""}, {"return": "\"{('event1', 'event2'): 2, ('event2', 'event3'): 1, ('event3', 'event1'): 1}\""}, {"return": "\"{('first', 'fifth'): 1}\""}, {"return": "\"{('one', 'three'): 1, ('two', 'four'): 1, ('three', 'five'): 1, ('four', 'six'): 1}\""}, {"return": "\"{('morning', 'noon'): 1, ('noon', 'evening'): 1, ('evening', 'night'): 1}\""}, {"return": "\"{('task1', 'task4'): 1, ('task2', 'task5'): 1, ('task3', 'task6'): 1, ('task4', 'task7'): 1}\""}], "parsed_inputs": [[["trace", "('A', 'B', 'C')"], ["distance", "1"]], [["trace", "('X', 'Y', 'Z', 'W')"], ["distance", "2"]], [["trace", "('a', 'b', 'c', 'd', 'e')"], ["distance", "1"]], [["trace", "('1', '2', '3', '4', '5')"], ["distance", "3"]], [["trace", "('hello', 'world')"], ["distance", "1"]], [["trace", "('foo', 'bar', 'baz', 'qux')"], ["distance", "2"]], [["trace", "('I', 'II', 'III', 'IV', 'V')"], ["distance", "1"]], [["trace", "('red', 'green', 'blue')"], ["distance", "1"]], [["trace", "('apple', 'banana', 'orange', 'grape')"], ["distance", "2"]], [["trace", "('one', 'two', 'three', 'four', 'five', 'six')"], ["distance", "3"]]], "exec_code": "def follows(trace, distance=1):\n    \"\"\"Returns a mapping (aka. dict) from pairs of activities to frequency.\n    A pair (a, b) is part of the mapping if activity b directly follows activity a,\n    in any of the traces.\n\n    Parameters\n    ----------\n    distance: int\n        Distance two activities have to be appart to be counted in the mapping.\n    \"\"\"\n    if not isinstance(trace, tuple):\n        raise ValueError('Trace has to be a tuple of activities.')\n    if not float(distance).is_integer():\n        raise ValueError('Distance has to be an integer.')\n    if not distance >= 1:\n        raise ValueError('Distance has to be greater or equal to 1.')\n    pairs = dict()\n    for i in range(len(trace) - distance):\n        ai = trace[i]\n        aj = trace[i + distance]\n        if (ai, aj) not in pairs:\n            pairs[ai, aj] = 0\n        pairs[ai, aj] += 1\n    return pairs\n", "output": "The function is:\n\n```python\ndef follows(trace, distance=1):\n    \"\"\"Returns a mapping (aka. dict) from pairs of activities to frequency.\n    A pair (a, b) is part of the mapping if activity b directly follows activity a,\n    in any of the traces.\n\n    Parameters\n    ----------\n    distance: int\n        Distance two activities have to be appart to be counted in the mapping.\n    \"\"\"\n    if not isinstance(trace, tuple):\n        raise ValueError('Trace has to be a tuple of activities.')\n    if not float(distance).is_integer():\n        raise ValueError('Distance has to be an integer.')\n    if not distance >= 1:\n        raise ValueError('Distance has to be greater or equal to 1.')\n    pairs = dict()\n    for i in range(len(trace) - distance):\n        ai = trace[i]\n        aj = trace[i + distance]\n        if (ai, aj) not in pairs:\n            pairs[ai, aj] = 0\n        pairs[ai, aj] += 1\n    return pairs\n\n```", "choosed_example_idx": [2, 5, 3, 7, 9, 1, 8], "prompt": "Write a function that generates the output from the input.\nInput: dict(trace=('a', 'b', 'c', 'd', 'e'), distance=1), Output: \"{('a', 'b'): 1, ('b', 'c'): 1, ('c', 'd'): 1, ('d', 'e'): 1}\"\nInput: dict(trace=('foo', 'bar', 'baz', 'qux'), distance=2), Output: \"{('foo', 'baz'): 1, ('bar', 'qux'): 1}\"\nInput: dict(trace=('1', '2', '3', '4', '5'), distance=3), Output: \"{('1', '4'): 1, ('2', '5'): 1}\"\nInput: dict(trace=('red', 'green', 'blue'), distance=1), Output: \"{('red', 'green'): 1, ('green', 'blue'): 1}\"\nInput: dict(trace=('one', 'two', 'three', 'four', 'five', 'six'), distance=3), Output: \"{('one', 'four'): 1, ('two', 'five'): 1, ('three', 'six'): 1}\"\nInput: dict(trace=('X', 'Y', 'Z', 'W'), distance=2), Output: \"{('X', 'Z'): 1, ('Y', 'W'): 1}\"\nInput: dict(trace=('apple', 'banana', 'orange', 'grape'), distance=2), Output: \"{('apple', 'orange'): 1, ('banana', 'grape'): 1}\"\n\n\nFunction: follows\n", "id": "1778e6b94d7fea3242ead11af7585fde7ba0c531_0"}
{"example_str": "examples = [\n    dict(amount=37),\n    dict(amount=10),\n    dict(amount=25),\n    dict(amount=1),\n    dict(amount=50),\n    dict(amount=7),\n    dict(amount=99),\n    dict(amount=42),\n    dict(amount=18),\n    dict(amount=65)\n]\nexamples += [\n    dict(amount=99),   # Example 1: Large amount\n    dict(amount=1),    # Example 2: Smallest denomination\n    dict(amount=0),    # Example 3: Zero amount\n    dict(amount=20),   # Example 4: Exact match with the largest denomination\n    dict(amount=35),   # Example 5: Combination of largest and smallest\n    dict(amount=75),   # Example 6: Multiple denominations\n    dict(amount=13),   # Example 7: No exact matches, uses smallest denomination multiple times\n    dict(amount=50),   # Example 8: Multiple of a middle denomination\n    dict(amount=27),   # Example 9: Random amount requiring multiple types of coins\n    dict(amount=100)   # Example 10: Large round number\n]\nexamples += [\n    dict(amount=99),  # Output will be [4, 1, 1, 4]\n    dict(amount=1),   # Output will be [0, 0, 0, 1]\n    dict(amount=5),   # Output will be [0, 0, 1, 0]\n    dict(amount=10),  # Output will be [0, 1, 0, 0]\n    dict(amount=20),  # Output will be [1, 0, 0, 0]\n    dict(amount=75),  # Output will be [3, 1, 1, 0]\n    dict(amount=37),  # Output will be [1, 1, 1, 2]\n    dict(amount=63),  # Output will be [3, 0, 0, 3]\n    dict(amount=82),  # Output will be [4, 0, 0, 2]\n    dict(amount=0),   # Output will be [0, 0, 0, 0]\n]", "code": "def greedy_algorithm(amount):\n    list_of_coins = []\n    currencies = [20, 10, 5, 1]\n    for coins in currencies:\n        list_of_coins += [amount // coins]\n        amount = amount % coins\n    return list_of_coins\n", "func_name": "greedy_algorithm", "exec_status": true, "example_inputs": ["\"{'amount': 37}\"", "\"{'amount': 10}\"", "\"{'amount': 25}\"", "\"{'amount': 1}\"", "\"{'amount': 50}\"", "\"{'amount': 7}\"", "\"{'amount': 99}\"", "\"{'amount': 42}\"", "\"{'amount': 18}\"", "\"{'amount': 65}\""], "example_outputs": [{"return": "\"[1, 1, 1, 2]\""}, {"return": "\"[0, 1, 0, 0]\""}, {"return": "\"[1, 0, 1, 0]\""}, {"return": "\"[0, 0, 0, 1]\""}, {"return": "\"[2, 1, 0, 0]\""}, {"return": "\"[0, 0, 1, 2]\""}, {"return": "\"[4, 1, 1, 4]\""}, {"return": "\"[2, 0, 0, 2]\""}, {"return": "\"[0, 1, 1, 3]\""}, {"return": "\"[3, 0, 1, 0]\""}, {"return": "\"[4, 1, 1, 4]\""}, {"return": "\"[0, 0, 0, 1]\""}, {"return": "\"[0, 0, 0, 0]\""}, {"return": "\"[1, 0, 0, 0]\""}, {"return": "\"[1, 1, 1, 0]\""}, {"return": "\"[3, 1, 1, 0]\""}, {"return": "\"[0, 1, 0, 3]\""}, {"return": "\"[2, 1, 0, 0]\""}, {"return": "\"[1, 0, 1, 2]\""}, {"return": "\"[5, 0, 0, 0]\""}, {"return": "\"[4, 1, 1, 4]\""}, {"return": "\"[0, 0, 0, 1]\""}, {"return": "\"[0, 0, 1, 0]\""}, {"return": "\"[0, 1, 0, 0]\""}, {"return": "\"[1, 0, 0, 0]\""}, {"return": "\"[3, 1, 1, 0]\""}, {"return": "\"[1, 1, 1, 2]\""}, {"return": "\"[3, 0, 0, 3]\""}, {"return": "\"[4, 0, 0, 2]\""}, {"return": "\"[0, 0, 0, 0]\""}], "parsed_inputs": [[["amount", "37"]], [["amount", "10"]], [["amount", "25"]], [["amount", "1"]], [["amount", "50"]], [["amount", "7"]], [["amount", "99"]], [["amount", "42"]], [["amount", "18"]], [["amount", "65"]]], "exec_code": "def greedy_algorithm(amount):\n    list_of_coins = []\n    currencies = [20, 10, 5, 1]\n    for coins in currencies:\n        list_of_coins += [amount // coins]\n        amount = amount % coins\n    return list_of_coins\n", "output": "The function is:\n\n```python\ndef greedy_algorithm(amount):\n    list_of_coins = []\n    currencies = [20, 10, 5, 1]\n    for coins in currencies:\n        list_of_coins += [amount // coins]\n        amount = amount % coins\n    return list_of_coins\n\n```", "choosed_example_idx": [2, 6, 1, 9, 7, 8, 5, 3, 4, 0], "prompt": "Write a function that generates the output from the input.\nFunction: greedy_algorithm\n\nInput: dict(amount=25), Output: \"[1, 0, 1, 0]\"\nInput: dict(amount=99), Output: \"[4, 1, 1, 4]\"\nInput: dict(amount=10), Output: \"[0, 1, 0, 0]\"\nInput: dict(amount=65), Output: \"[3, 0, 1, 0]\"\nInput: dict(amount=42), Output: \"[2, 0, 0, 2]\"\nInput: dict(amount=18), Output: \"[0, 1, 1, 3]\"\nInput: dict(amount=7), Output: \"[0, 0, 1, 2]\"\nInput: dict(amount=1), Output: \"[0, 0, 0, 1]\"\nInput: dict(amount=50), Output: \"[2, 1, 0, 0]\"\nInput: dict(amount=37), Output: \"[1, 1, 1, 2]\"\n\n\n", "id": "9b8db7edb26a47a606d653940040aac74258fe2c_0"}
{"example_str": "examples = [\n    dict(index=0, arr=[1, 2, 3]),\n    dict(index=5, arr=[1, 2, 3]),\n    dict(index=-1, arr=[1, 2, 3]),\n    dict(index=-4, arr=[1, 2, 3]),\n    dict(index=0, arr=[]),\n    dict(index=0, arr=[1]),\n    dict(index=1, arr=[1]),\n    dict(index=-1, arr=[1]),\n    dict(index=2, arr=[1, 2]),\n    dict(index=-3, arr=[1, 2]),\n]\nexamples += [\n    dict(index=0, arr=[1, 2, 3]),  # False, index is in bounds\n    dict(index=3, arr=[1, 2, 3]),  # True, index is out of bounds\n    dict(index=-1, arr=[1, 2, 3]), # False, index is in bounds (last element)\n    dict(index=-4, arr=[1, 2, 3]), # True, index is out of bounds\n    dict(index=1, arr=[]),         # True, index is out of bounds (empty list)\n    dict(index=0, arr=[]),         # True, index is out of bounds (empty list)\n    dict(index=-1, arr=[]),        # True, index is out of bounds (empty list)\n    dict(index=5, arr=[10, 20]),   # True, index is out of bounds\n    dict(index=-3, arr=[10, 20]),  # True, index is out of bounds\n    dict(index=2, arr=['a', 'b', 'c', 'd']) # False, index is in bounds\n]\nexamples += [\n    dict(index=0, arr=[1, 2, 3]),\n    dict(index=3, arr=[1, 2, 3]),\n    dict(index=-1, arr=[1, 2, 3]),\n    dict(index=-4, arr=[1, 2, 3]),\n    dict(index=1, arr=[]),\n    dict(index=0, arr=[]),\n    dict(index=-1, arr=[]),\n    dict(index=5, arr=[1, 2]),\n    dict(index=-3, arr=[1, 2]),\n    dict(index=2, arr=[10, 20, 30, 40])\n]", "code": "def indexOutOfBounds(index, arr):\n    return index not in range(-len(arr), len(arr))\n", "func_name": "indexOutOfBounds", "exec_status": true, "example_inputs": ["\"{'index': 0, 'arr': [1, 2, 3]}\"", "\"{'index': 5, 'arr': [1, 2, 3]}\"", "\"{'index': -1, 'arr': [1, 2, 3]}\"", "\"{'index': -4, 'arr': [1, 2, 3]}\"", "\"{'index': 0, 'arr': []}\"", "\"{'index': 0, 'arr': [1]}\"", "\"{'index': 1, 'arr': [1]}\"", "\"{'index': -1, 'arr': [1]}\"", "\"{'index': 2, 'arr': [1, 2]}\"", "\"{'index': -3, 'arr': [1, 2]}\""], "example_outputs": [{"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}], "parsed_inputs": [[["index", "0"], ["arr", "[1, 2, 3]"]], [["index", "5"], ["arr", "[1, 2, 3]"]], [["index", "-1"], ["arr", "[1, 2, 3]"]], [["index", "-4"], ["arr", "[1, 2, 3]"]], [["index", "0"], ["arr", "[]"]], [["index", "0"], ["arr", "[1]"]], [["index", "1"], ["arr", "[1]"]], [["index", "-1"], ["arr", "[1]"]], [["index", "2"], ["arr", "[1, 2]"]], [["index", "-3"], ["arr", "[1, 2]"]]], "exec_code": "def indexOutOfBounds(index, arr):\n    return index not in range(-len(arr), len(arr))\n", "output": "The function is:\n\n```python\ndef indexOutOfBounds(index, arr):\n    return index not in range(-len(arr), len(arr))\n\n```", "choosed_example_idx": [6, 7, 3, 4, 8, 1, 2, 5], "prompt": "Write a function that generates the output from the input.\nFunction: indexOutOfBounds\n\nInput: dict(index=1, arr=[1]), Output: \"True\"\nInput: dict(index=-1, arr=[1]), Output: \"False\"\nInput: dict(index=-4, arr=[1, 2, 3]), Output: \"True\"\nInput: dict(index=0, arr=[]), Output: \"True\"\nInput: dict(index=2, arr=[1, 2]), Output: \"True\"\nInput: dict(index=5, arr=[1, 2, 3]), Output: \"True\"\nInput: dict(index=-1, arr=[1, 2, 3]), Output: \"False\"\nInput: dict(index=0, arr=[1]), Output: \"False\"\n\n\n", "id": "71d7fe92828d91fda6edf0b5248348c98849df89_0"}
{"example_str": "examples = [\n    dict(score=5),\n    dict(score=15),\n    dict(score=25),\n    dict(score=35),\n    dict(score=45),\n    dict(score=55),\n    dict(score=65),\n    dict(score=75),\n    dict(score=85),\n    dict(score=95),\n]\nexamples += [\n    dict(score=0),\n    dict(score=5),\n    dict(score=10),\n    dict(score=25),\n    dict(score=50),\n    dict(score=75),\n    dict(score=100),\n    dict(score=150),\n    dict(score=200),\n    dict(score=250)\n]\nexamples += [\n    dict(score=0),\n    dict(score=5),\n    dict(score=10),\n    dict(score=20),\n    dict(score=30),\n    dict(score=40),\n    dict(score=50),\n    dict(score=60),\n    dict(score=70),\n    dict(score=80)\n]", "code": "def calculateLevelAndFallFreq(score):\n    level = int(score / 10) + 1\n    fallFreq = 0.27 - level * 0.02\n    return level, fallFreq\n", "func_name": "calculateLevelAndFallFreq", "exec_status": true, "example_inputs": ["\"{'score': 5}\"", "\"{'score': 15}\"", "\"{'score': 25}\"", "\"{'score': 35}\"", "\"{'score': 45}\"", "\"{'score': 55}\"", "\"{'score': 65}\"", "\"{'score': 75}\"", "\"{'score': 85}\"", "\"{'score': 95}\""], "example_outputs": [{"return": "\"(1, 0.25)\""}, {"return": "\"(2, 0.23)\""}, {"return": "\"(3, 0.21000000000000002)\""}, {"return": "\"(4, 0.19)\""}, {"return": "\"(5, 0.17)\""}, {"return": "\"(6, 0.15000000000000002)\""}, {"return": "\"(7, 0.13)\""}, {"return": "\"(8, 0.11000000000000001)\""}, {"return": "\"(9, 0.09000000000000002)\""}, {"return": "\"(10, 0.07)\""}, {"return": "\"(1, 0.25)\""}, {"return": "\"(1, 0.25)\""}, {"return": "\"(2, 0.23)\""}, {"return": "\"(3, 0.21000000000000002)\""}, {"return": "\"(6, 0.15000000000000002)\""}, {"return": "\"(8, 0.11000000000000001)\""}, {"return": "\"(11, 0.05000000000000002)\""}, {"return": "\"(16, -0.04999999999999999)\""}, {"return": "\"(21, -0.14999999999999997)\""}, {"return": "\"(26, -0.25)\""}, {"return": "\"(1, 0.25)\""}, {"return": "\"(1, 0.25)\""}, {"return": "\"(2, 0.23)\""}, {"return": "\"(3, 0.21000000000000002)\""}, {"return": "\"(4, 0.19)\""}, {"return": "\"(5, 0.17)\""}, {"return": "\"(6, 0.15000000000000002)\""}, {"return": "\"(7, 0.13)\""}, {"return": "\"(8, 0.11000000000000001)\""}, {"return": "\"(9, 0.09000000000000002)\""}], "parsed_inputs": [[["score", "5"]], [["score", "15"]], [["score", "25"]], [["score", "35"]], [["score", "45"]], [["score", "55"]], [["score", "65"]], [["score", "75"]], [["score", "85"]], [["score", "95"]]], "exec_code": "def calculateLevelAndFallFreq(score):\n    level = int(score / 10) + 1\n    fallFreq = 0.27 - level * 0.02\n    return level, fallFreq\n", "output": "The function is:\n\n```python\ndef calculateLevelAndFallFreq(score):\n    level = int(score / 10) + 1\n    fallFreq = 0.27 - level * 0.02\n    return level, fallFreq\n\n```", "choosed_example_idx": [5, 9, 2], "prompt": "Input: dict(score=55), Output: \"(6, 0.15000000000000002)\"\nInput: dict(score=95), Output: \"(10, 0.07)\"\nInput: dict(score=25), Output: \"(3, 0.21000000000000002)\"\n\n\nFunction: calculateLevelAndFallFreq\n\nWrite a function that generates the output from the input.\n", "id": "9dfe4d955bf906603706169637c643950c39386c_0"}
{"example_str": "examples = [\n    dict(items=[]),\n    dict(items=['apple']),\n    dict(items=['apple', 'banana']),\n    dict(items=['apple', 'banana', 'cherry']),\n    dict(items=['one']),\n    dict(items=['one', 'two']),\n    dict(items=['one', 'two', 'three']),\n    dict(items=['a', 'b', 'c', 'd']),\n    dict(items=['x', 'y', 'z', 'w', 'v']),\n    dict(items=['hello', 'world', 'python', 'programming', 'fun']),\n]\nexamples += [\n    dict(items=[]),\n    dict(items=[\"apple\"]),\n    dict(items=[\"apple\", \"banana\"]),\n    dict(items=[\"apple\", \"banana\", \"cherry\"]),\n    dict(items=[\"dog\"]),\n    dict(items=[\"dog\", \"cat\"]),\n    dict(items=[\"dog\", \"cat\", \"mouse\"]),\n    dict(items=[\"red\", \"blue\", \"green\", \"yellow\"]),\n    dict(items=[\"coffee\"]),\n    dict(items=[\"coffee\", \"tea\", \"milk\", \"water\", \"juice\"])\n]\nexamples += [\n    dict(items=[]),\n    dict(items=[\"apple\"]),\n    dict(items=[\"apple\", \"banana\"]),\n    dict(items=[\"apple\", \"banana\", \"cherry\"]),\n    dict(items=[\"apple\", \"banana\", \"cherry\", \"date\"]),\n    dict(items=[\"a\"]),\n    dict(items=[\"a\", \"b\"]),\n    dict(items=[\"a\", \"b\", \"c\"]),\n    dict(items=[\"a\", \"b\", \"c\", \"d\"]),\n    dict(items=[\"item1\", \"item2\", \"item3\", \"item4\", \"item5\"])\n]", "code": "def english_join(items):\n    if len(items) == 0:\n        return ''\n    if len(items) == 1:\n        return items[0]\n    if len(items) == 2:\n        return items[0] + ' and ' + items[1]\n    return ', '.join(items[:-1]) + ', and ' + items[-1]\n", "func_name": "english_join", "exec_status": true, "example_inputs": ["\"{'items': []}\"", "\"{'items': ['apple']}\"", "\"{'items': ['apple', 'banana']}\"", "\"{'items': ['apple', 'banana', 'cherry']}\"", "\"{'items': ['one']}\"", "\"{'items': ['one', 'two']}\"", "\"{'items': ['one', 'two', 'three']}\"", "\"{'items': ['a', 'b', 'c', 'd']}\"", "\"{'items': ['x', 'y', 'z', 'w', 'v']}\"", "\"{'items': ['hello', 'world', 'python', 'programming', 'fun']}\""], "example_outputs": [{"return": "\"''\""}, {"return": "\"'apple'\""}, {"return": "\"'apple and banana'\""}, {"return": "\"'apple, banana, and cherry'\""}, {"return": "\"'one'\""}, {"return": "\"'one and two'\""}, {"return": "\"'one, two, and three'\""}, {"return": "\"'a, b, c, and d'\""}, {"return": "\"'x, y, z, w, and v'\""}, {"return": "\"'hello, world, python, programming, and fun'\""}, {"return": "\"''\""}, {"return": "\"'apple'\""}, {"return": "\"'apple and banana'\""}, {"return": "\"'apple, banana, and cherry'\""}, {"return": "\"'dog'\""}, {"return": "\"'dog and cat'\""}, {"return": "\"'dog, cat, and mouse'\""}, {"return": "\"'red, blue, green, and yellow'\""}, {"return": "\"'coffee'\""}, {"return": "\"'coffee, tea, milk, water, and juice'\""}, {"return": "\"''\""}, {"return": "\"'apple'\""}, {"return": "\"'apple and banana'\""}, {"return": "\"'apple, banana, and cherry'\""}, {"return": "\"'apple, banana, cherry, and date'\""}, {"return": "\"'a'\""}, {"return": "\"'a and b'\""}, {"return": "\"'a, b, and c'\""}, {"return": "\"'a, b, c, and d'\""}, {"return": "\"'item1, item2, item3, item4, and item5'\""}], "parsed_inputs": [[["items", "[]"]], [["items", "['apple']"]], [["items", "['apple', 'banana']"]], [["items", "['apple', 'banana', 'cherry']"]], [["items", "['one']"]], [["items", "['one', 'two']"]], [["items", "['one', 'two', 'three']"]], [["items", "['a', 'b', 'c', 'd']"]], [["items", "['x', 'y', 'z', 'w', 'v']"]], [["items", "['hello', 'world', 'python', 'programming', 'fun']"]]], "exec_code": "def english_join(items):\n    if len(items) == 0:\n        return ''\n    if len(items) == 1:\n        return items[0]\n    if len(items) == 2:\n        return items[0] + ' and ' + items[1]\n    return ', '.join(items[:-1]) + ', and ' + items[-1]\n", "output": "The function is:\n\n```python\ndef english_join(items):\n    if len(items) == 0:\n        return ''\n    if len(items) == 1:\n        return items[0]\n    if len(items) == 2:\n        return items[0] + ' and ' + items[1]\n    return ', '.join(items[:-1]) + ', and ' + items[-1]\n\n```", "choosed_example_idx": [5, 2, 9], "prompt": "Function: english_join\nWrite a function that generates the output from the input.\nInput: dict(items=['one', 'two']), Output: \"'one and two'\"\nInput: dict(items=['apple', 'banana']), Output: \"'apple and banana'\"\nInput: dict(items=['hello', 'world', 'python', 'programming', 'fun']), Output: \"'hello, world, python, programming, and fun'\"\n\n", "id": "b3abccf07a9d8f36c5accab52d4b71d3f5942b3c_0"}
{"example_str": "examples = [\n    dict(r=10),\n    dict(r=20.5),\n    dict(r=0),\n    dict(r=-5),\n    dict(r=100),\n    dict(r=3.14),\n    dict(r=-10.2),\n    dict(r=50),\n    dict(r=25.75),\n    dict(r=1)\n]\nexamples += [\n    dict(r=10),\n    dict(r=100),\n    dict(r=0),\n    dict(r=-10),\n    dict(r=1.5),\n    dict(r=25),\n    dict(r=50),\n    dict(r=-5),\n    dict(r=0.75),\n    dict(r=1000)\n]\nexamples += [\n    dict(r=10),\n    dict(r=20),\n    dict(r=30),\n    dict(r=40),\n    dict(r=50),\n    dict(r=60),\n    dict(r=70),\n    dict(r=80),\n    dict(r=90),\n    dict(r=100)\n]", "code": "def p(r):\n    return r / 10\n", "func_name": "p", "exec_status": true, "example_inputs": ["\"{'r': 10}\"", "\"{'r': 20.5}\"", "\"{'r': 0}\"", "\"{'r': -5}\"", "\"{'r': 100}\"", "\"{'r': 3.14}\"", "\"{'r': -10.2}\"", "\"{'r': 50}\"", "\"{'r': 25.75}\"", "\"{'r': 1}\""], "example_outputs": [{"return": "\"1.0\""}, {"return": "\"2.05\""}, {"return": "\"0.0\""}, {"return": "\"-0.5\""}, {"return": "\"10.0\""}, {"return": "\"0.314\""}, {"return": "\"-1.02\""}, {"return": "\"5.0\""}, {"return": "\"2.575\""}, {"return": "\"0.1\""}, {"return": "\"1.0\""}, {"return": "\"10.0\""}, {"return": "\"0.0\""}, {"return": "\"-1.0\""}, {"return": "\"0.15\""}, {"return": "\"2.5\""}, {"return": "\"5.0\""}, {"return": "\"-0.5\""}, {"return": "\"0.075\""}, {"return": "\"100.0\""}, {"return": "\"1.0\""}, {"return": "\"2.0\""}, {"return": "\"3.0\""}, {"return": "\"4.0\""}, {"return": "\"5.0\""}, {"return": "\"6.0\""}, {"return": "\"7.0\""}, {"return": "\"8.0\""}, {"return": "\"9.0\""}, {"return": "\"10.0\""}], "parsed_inputs": [[["r", "10"]], [["r", "20.5"]], [["r", "0"]], [["r", "-5"]], [["r", "100"]], [["r", "3.14"]], [["r", "-10.2"]], [["r", "50"]], [["r", "25.75"]], [["r", "1"]]], "exec_code": "def p(r):\n    return r / 10\n", "output": "The function is:\n\n```python\ndef p(r):\n    return r / 10\n\n```", "choosed_example_idx": [7, 5, 1, 0, 4, 8, 2, 6, 9, 3], "prompt": "Write a function that generates the output from the input.\n\nFunction: p\n\nInput: dict(r=50), Output: \"5.0\"\nInput: dict(r=3.14), Output: \"0.314\"\nInput: dict(r=20.5), Output: \"2.05\"\nInput: dict(r=10), Output: \"1.0\"\nInput: dict(r=100), Output: \"10.0\"\nInput: dict(r=25.75), Output: \"2.575\"\nInput: dict(r=0), Output: \"0.0\"\nInput: dict(r=-10.2), Output: \"-1.02\"\nInput: dict(r=1), Output: \"0.1\"\nInput: dict(r=-5), Output: \"-0.5\"\n\n", "id": "3fb96961ad4f168a6bb6cbd4ddbd77516aa8a927_0"}
{"example_str": "examples = [\n    dict(initial=[0, 1, 2], turns=10),\n    dict(initial=[1, 2, 3, 4, 5], turns=20),\n    dict(initial=[10, 20, 30], turns=5),\n    dict(initial=[4, 5, 6, 7, 8, 9], turns=15),\n    dict(initial=[1], turns=10),\n    dict(initial=[2, 4, 6, 8], turns=12),\n    dict(initial=[3, 1, 2], turns=8),\n    dict(initial=[5, 10, 15, 20], turns=25),\n    dict(initial=[0, 1, 1, 2], turns=18),\n    dict(initial=[7, 8, 9, 10, 11], turns=30)\n]\nexamples += [\n    dict(initial=[0, 3, 6], turns=10),\n    dict(initial=[1, 2, 3], turns=5),\n    dict(initial=[5, 5, 5], turns=15),\n    dict(initial=[2, 1, 3, 4], turns=20),\n    dict(initial=[9], turns=7),\n    dict(initial=[0, 1, 2, 3, 4, 5], turns=12),\n    dict(initial=[3, 1, 4, 1, 5], turns=30),\n    dict(initial=[7, 8, 9, 0], turns=25),\n    dict(initial=[1], turns=10),\n    dict(initial=[10, 20, 30, 40, 50], turns=50)\n]\nexamples += [\n    dict(initial=[0, 3, 6], turns=10),\n    dict(initial=[1, 2, 3], turns=5),\n    dict(initial=[2, 1, 2], turns=8),\n    dict(initial=[1, 3, 5, 7], turns=15),\n    dict(initial=[9, 8, 7, 6, 5], turns=20),\n    dict(initial=[0], turns=1),\n    dict(initial=[5, 5, 5, 5], turns=10),\n    dict(initial=[1, 1, 1, 2, 2, 2], turns=12),\n    dict(initial=[3, 1, 4, 1, 5], turns=14),\n    dict(initial=[0, 1, 0, 3, 0, 3, 1, 0], turns=25)\n]", "code": "def generate_seq(initial, turns=0):\n    seen = {n: (i + 1) for i, n in enumerate(initial)}\n    n = initial[-1]\n    for i in range(len(initial), turns):\n        seen[n], n = i, i - seen.get(n, i)\n    return n\n", "func_name": "generate_seq", "exec_status": true, "example_inputs": ["\"{'initial': [0, 1, 2], 'turns': 10}\"", "\"{'initial': [1, 2, 3, 4, 5], 'turns': 20}\"", "\"{'initial': [10, 20, 30], 'turns': 5}\"", "\"{'initial': [4, 5, 6, 7, 8, 9], 'turns': 15}\"", "\"{'initial': [1], 'turns': 10}\"", "\"{'initial': [2, 4, 6, 8], 'turns': 12}\"", "\"{'initial': [3, 1, 2], 'turns': 8}\"", "\"{'initial': [5, 10, 15, 20], 'turns': 25}\"", "\"{'initial': [0, 1, 1, 2], 'turns': 18}\"", "\"{'initial': [7, 8, 9, 10, 11], 'turns': 30}\""], "example_outputs": [{"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"8\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"6\""}, {"return": "\"26\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"11\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"12\""}, {"return": "\"0\""}], "parsed_inputs": [[["initial", "[0, 1, 2]"], ["turns", "10"]], [["initial", "[1, 2, 3, 4, 5]"], ["turns", "20"]], [["initial", "[10, 20, 30]"], ["turns", "5"]], [["initial", "[4, 5, 6, 7, 8, 9]"], ["turns", "15"]], [["initial", "[1]"], ["turns", "10"]], [["initial", "[2, 4, 6, 8]"], ["turns", "12"]], [["initial", "[3, 1, 2]"], ["turns", "8"]], [["initial", "[5, 10, 15, 20]"], ["turns", "25"]], [["initial", "[0, 1, 1, 2]"], ["turns", "18"]], [["initial", "[7, 8, 9, 10, 11]"], ["turns", "30"]]], "exec_code": "def generate_seq(initial, turns=0):\n    seen = {n: (i + 1) for i, n in enumerate(initial)}\n    n = initial[-1]\n    for i in range(len(initial), turns):\n        seen[n], n = i, i - seen.get(n, i)\n    return n\n", "output": "The function is:\n\n```python\ndef generate_seq(initial, turns=0):\n    seen = {n: (i + 1) for i, n in enumerate(initial)}\n    n = initial[-1]\n    for i in range(len(initial), turns):\n        seen[n], n = i, i - seen.get(n, i)\n    return n\n\n```", "choosed_example_idx": [2, 9, 8, 6, 3, 0, 1, 5], "prompt": "Write a function that generates the output from the input.\n\nInput: dict(initial=[10, 20, 30], turns=5), Output: \"0\"\nInput: dict(initial=[7, 8, 9, 10, 11], turns=30), Output: \"26\"\nInput: dict(initial=[0, 1, 1, 2], turns=18), Output: \"6\"\nInput: dict(initial=[3, 1, 2], turns=8), Output: \"0\"\nInput: dict(initial=[4, 5, 6, 7, 8, 9], turns=15), Output: \"1\"\nInput: dict(initial=[0, 1, 2], turns=10), Output: \"3\"\nInput: dict(initial=[1, 2, 3, 4, 5], turns=20), Output: \"0\"\nInput: dict(initial=[2, 4, 6, 8], turns=12), Output: \"8\"\n\nFunction: generate_seq\n", "id": "28b7beeaff708c192b8b671e04be374c2306ffc0_0"}
{"example_str": "examples = [\n    dict(label_1='A', label_2='A'),\n    dict(label_1='A', label_2='B'),\n    dict(label_1='C', label_2='C'),\n    dict(label_1='D', label_2='E'),\n    dict(label_1='F', label_2='F'),\n    dict(label_1='G', label_2='H'),\n    dict(label_1='I', label_2='I'),\n    dict(label_1='J', label_2='K'),\n    dict(label_1='L', label_2='L'),\n    dict(label_1='M', label_2='N'),\n]\nexamples += [\n    dict(label_1='a', label_2='a'),  # Example 1: Match\n    dict(label_1='a', label_2='b'),  # Example 2: Mismatch\n    dict(label_1='z', label_2='z'),  # Example 3: Match\n    dict(label_1='x', label_2='y'),  # Example 4: Mismatch\n    dict(label_1='1', label_2='1'),  # Example 5: Match\n    dict(label_1='1', label_2='2'),  # Example 6: Mismatch\n    dict(label_1='A', label_2='A'),  # Example 7: Match\n    dict(label_1='A', label_2='a'),  # Example 8: Mismatch (case-sensitive)\n    dict(label_1='%', label_2='%'),  # Example 9: Match\n    dict(label_1='%', label_2='&')   # Example 10: Mismatch\n]\nexamples += [\n    dict(label_1='a', label_2='a'),\n    dict(label_1='b', label_2='b'),\n    dict(label_1='c', label_2='c'),\n    dict(label_1='d', label_2='d'),\n    dict(label_1='e', label_2='e'),\n    dict(label_1='f', label_2='g'),  # Different\n    dict(label_1='h', label_2='i'),  # Different\n    dict(label_1='j', label_2='k'),  # Different\n    dict(label_1='l', label_2='m'),  # Different\n    dict(label_1='n', label_2='n')\n]", "code": "def matched(label_1, label_2):\n    \"\"\"\n    Determine match score\n    1) if characters: return match or mismatch\n    2) free edges from both sink to both source, otherwise forbidden\n    \"\"\"\n    if label_1 == label_2:\n        return 0\n    else:\n        return 1\n", "func_name": "matched", "exec_status": true, "example_inputs": ["\"{'label_1': 'A', 'label_2': 'A'}\"", "\"{'label_1': 'A', 'label_2': 'B'}\"", "\"{'label_1': 'C', 'label_2': 'C'}\"", "\"{'label_1': 'D', 'label_2': 'E'}\"", "\"{'label_1': 'F', 'label_2': 'F'}\"", "\"{'label_1': 'G', 'label_2': 'H'}\"", "\"{'label_1': 'I', 'label_2': 'I'}\"", "\"{'label_1': 'J', 'label_2': 'K'}\"", "\"{'label_1': 'L', 'label_2': 'L'}\"", "\"{'label_1': 'M', 'label_2': 'N'}\""], "example_outputs": [{"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"0\""}], "parsed_inputs": [[["label_1", "\"A\""], ["label_2", "\"A\""]], [["label_1", "\"A\""], ["label_2", "\"B\""]], [["label_1", "\"C\""], ["label_2", "\"C\""]], [["label_1", "\"D\""], ["label_2", "\"E\""]], [["label_1", "\"F\""], ["label_2", "\"F\""]], [["label_1", "\"G\""], ["label_2", "\"H\""]], [["label_1", "\"I\""], ["label_2", "\"I\""]], [["label_1", "\"J\""], ["label_2", "\"K\""]], [["label_1", "\"L\""], ["label_2", "\"L\""]], [["label_1", "\"M\""], ["label_2", "\"N\""]]], "exec_code": "def matched(label_1, label_2):\n    \"\"\"\n    Determine match score\n    1) if characters: return match or mismatch\n    2) free edges from both sink to both source, otherwise forbidden\n    \"\"\"\n    if label_1 == label_2:\n        return 0\n    else:\n        return 1\n", "output": "The function is:\n\n```python\ndef matched(label_1, label_2):\n    \"\"\"\n    Determine match score\n    1) if characters: return match or mismatch\n    2) free edges from both sink to both source, otherwise forbidden\n    \"\"\"\n    if label_1 == label_2:\n        return 0\n    else:\n        return 1\n\n```", "choosed_example_idx": [0, 8, 6, 4, 7], "prompt": "Write a function that generates the output from the input.\n\nInput: dict(label_1=\"A\", label_2=\"A\"), Output: \"0\"\nInput: dict(label_1=\"L\", label_2=\"L\"), Output: \"0\"\nInput: dict(label_1=\"I\", label_2=\"I\"), Output: \"0\"\nInput: dict(label_1=\"F\", label_2=\"F\"), Output: \"0\"\nInput: dict(label_1=\"J\", label_2=\"K\"), Output: \"1\"\n\n\nFunction: matched\n", "id": "ba0bf594b057fe8c70fbf13d97c26eca9f3e5e89_0"}
{"example_str": "examples = [\n    dict(count=1),\n    dict(count=5),\n    dict(count=10),\n    dict(count=20),\n    dict(count=50),\n    dict(count=100),\n    dict(count=0),\n    dict(count=-1),\n    dict(count=3),\n    dict(count=7),\n]\nexamples += [\n    dict(count=1),  # Generate 1 MAC address\n    dict(count=5),  # Generate 5 MAC addresses\n    dict(count=10), # Generate 10 MAC addresses\n    dict(count=0),  # Generate 0 MAC addresses, should return an empty list\n    dict(count=20), # Generate 20 MAC addresses\n    dict(count=50), # Generate 50 MAC addresses for a larger test\n    dict(count=100),# Generate 100 MAC addresses, testing higher limits\n    dict(count=3),  # Generate 3 MAC addresses\n    dict(count=15), # Generate 15 MAC addresses\n    dict(count=25)  # Generate 25 MAC addresses\n]\nexamples += [\n    dict(count=1),\n    dict(count=5),\n    dict(count=10),\n    dict(count=20),\n    dict(count=50),\n    dict(count=100),\n    dict(count=0),\n    dict(count=3),\n    dict(count=15),\n    dict(count=30),\n]", "code": "def gen_mock_mac_addresses(count):\n    addresses = []\n    for _ in range(count):\n        addresses.append(gen_mock_mac_address())\n    return addresses\n", "func_name": "gen_mock_mac_addresses", "exec_status": true, "example_inputs": ["\"{'count': 1}\"", "\"{'count': 5}\"", "\"{'count': 10}\"", "\"{'count': 20}\"", "\"{'count': 50}\"", "\"{'count': 100}\"", "\"{'count': 0}\"", "\"{'count': -1}\"", "\"{'count': 3}\"", "\"{'count': 7}\""], "example_outputs": [{"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}, {"return": "\"[]\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}, {"return": "\"[]\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}, {"error": "<|EXCEPTION|> \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\""}], "parsed_inputs": [[["count", "1"]], [["count", "5"]], [["count", "10"]], [["count", "20"]], [["count", "50"]], [["count", "100"]], [["count", "0"]], [["count", "-1"]], [["count", "3"]], [["count", "7"]]], "exec_code": "def gen_mock_mac_addresses(count):\n    addresses = []\n    for _ in range(count):\n        addresses.append(gen_mock_mac_address())\n    return addresses\n", "output": "The function is:\n\n```python\ndef gen_mock_mac_addresses(count):\n    addresses = []\n    for _ in range(count):\n        addresses.append(gen_mock_mac_address())\n    return addresses\n\n```", "choosed_example_idx": [3, 9, 7, 1, 5, 2, 0, 4, 8], "prompt": "Input: dict(count=20), Output: \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\"\nInput: dict(count=7), Output: \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\"\nInput: dict(count=-1), Output: \"[]\"\nInput: dict(count=5), Output: \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\"\nInput: dict(count=100), Output: \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\"\nInput: dict(count=10), Output: \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\"\nInput: dict(count=1), Output: \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\"\nInput: dict(count=50), Output: \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\"\nInput: dict(count=3), Output: \"<class 'NameError'>: name 'gen_mock_mac_address' is not defined\"\n\nFunction: gen_mock_mac_addresses\nWrite a function that generates the output from the input.\n", "id": "34183280f5970548986a350cef59544095f40f4a_0"}
{"example_str": "examples = [\n    dict(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], i=0),\n    dict(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], i=1),\n    dict(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], i=2),\n    dict(matrix=[[1, 2], [3, 4], [5, 6]], i=0),\n    dict(matrix=[[1, 2], [3, 4], [5, 6]], i=1),\n    dict(matrix=[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], i=0),\n    dict(matrix=[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], i=1),\n    dict(matrix=[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], i=2),\n    dict(matrix=[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], i=3),\n    dict(matrix=[[1]], i=0),\n]\nexamples += [\n    dict(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], i=0),\n    dict(matrix=[[1, 2], [3, 4], [5, 6]], i=1),\n    dict(matrix=[[10, 20], [30, 40], [50, 60]], i=0),\n    dict(matrix=[[1]], i=0),\n    dict(matrix=[[1, 2, 3], [4, 5, 6]], i=2),\n    dict(matrix=[[7, 8], [9, 10], [11, 12]], i=1),\n    dict(matrix=[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], i=3),\n    dict(matrix=[[0, 1], [1, 0]], i=1),\n    dict(matrix=[[3, 2, 1], [6, 5, 4], [9, 8, 7]], i=2),\n    dict(matrix=[[100, 200], [300, 400], [500, 600]], i=0)\n]\nexamples += [\n    dict(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], i=0),\n    dict(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], i=1),\n    dict(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], i=2),\n    dict(matrix=[[10, 20], [30, 40], [50, 60]], i=0),\n    dict(matrix=[[10, 20], [30, 40], [50, 60]], i=1),\n    dict(matrix=[[7, 8], [9, 10]], i=0),\n    dict(matrix=[[7, 8], [9, 10]], i=1),\n    dict(matrix=[[1]], i=0),\n    dict(matrix=[[1, 2], [3, 4], [5, 6], [7, 8]], i=1),\n    dict(matrix=[[100, 200, 300], [400, 500, 600]], i=2)\n]", "code": "def column(matrix, i):\n    return [row[i] for row in matrix]\n", "func_name": "column", "exec_status": true, "example_inputs": ["\"{'matrix': [[1, 2, 3], [4, 5, 6], [7, 8, 9]], 'i': 0}\"", "\"{'matrix': [[1, 2, 3], [4, 5, 6], [7, 8, 9]], 'i': 1}\"", "\"{'matrix': [[1, 2, 3], [4, 5, 6], [7, 8, 9]], 'i': 2}\"", "\"{'matrix': [[1, 2], [3, 4], [5, 6]], 'i': 0}\"", "\"{'matrix': [[1, 2], [3, 4], [5, 6]], 'i': 1}\"", "\"{'matrix': [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 'i': 0}\"", "\"{'matrix': [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 'i': 1}\"", "\"{'matrix': [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 'i': 2}\"", "\"{'matrix': [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 'i': 3}\"", "\"{'matrix': [[1]], 'i': 0}\""], "example_outputs": [{"return": "\"[1, 4, 7]\""}, {"return": "\"[2, 5, 8]\""}, {"return": "\"[3, 6, 9]\""}, {"return": "\"[1, 3, 5]\""}, {"return": "\"[2, 4, 6]\""}, {"return": "\"[1, 5, 9]\""}, {"return": "\"[2, 6, 10]\""}, {"return": "\"[3, 7, 11]\""}, {"return": "\"[4, 8, 12]\""}, {"return": "\"[1]\""}, {"return": "\"[1, 4, 7]\""}, {"return": "\"[2, 4, 6]\""}, {"return": "\"[10, 30, 50]\""}, {"return": "\"[1]\""}, {"return": "\"[3, 6]\""}, {"return": "\"[8, 10, 12]\""}, {"return": "\"[4, 8, 12]\""}, {"return": "\"[1, 0]\""}, {"return": "\"[1, 4, 7]\""}, {"return": "\"[100, 300, 500]\""}, {"return": "\"[1, 4, 7]\""}, {"return": "\"[2, 5, 8]\""}, {"return": "\"[3, 6, 9]\""}, {"return": "\"[10, 30, 50]\""}, {"return": "\"[20, 40, 60]\""}, {"return": "\"[7, 9]\""}, {"return": "\"[8, 10]\""}, {"return": "\"[1]\""}, {"return": "\"[2, 4, 6, 8]\""}, {"return": "\"[300, 600]\""}], "parsed_inputs": [[["matrix", "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]"], ["i", "0"]], [["matrix", "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]"], ["i", "1"]], [["matrix", "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]"], ["i", "2"]], [["matrix", "[[1, 2], [3, 4], [5, 6]]"], ["i", "0"]], [["matrix", "[[1, 2], [3, 4], [5, 6]]"], ["i", "1"]], [["matrix", "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]"], ["i", "0"]], [["matrix", "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]"], ["i", "1"]], [["matrix", "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]"], ["i", "2"]], [["matrix", "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]"], ["i", "3"]], [["matrix", "[[1]]"], ["i", "0"]]], "exec_code": "def column(matrix, i):\n    return [row[i] for row in matrix]\n", "output": "The function is:\n\n```python\ndef column(matrix, i):\n    return [row[i] for row in matrix]\n\n```", "choosed_example_idx": [9, 3, 5], "prompt": "Function: column\n\nWrite a function that generates the output from the input.\n\nInput: dict(matrix=[[1]], i=0), Output: \"[1]\"\nInput: dict(matrix=[[1, 2], [3, 4], [5, 6]], i=0), Output: \"[1, 3, 5]\"\nInput: dict(matrix=[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], i=0), Output: \"[1, 5, 9]\"\n\n", "id": "714383344f0037315babc7deb0881290505796e2_0"}
{"example_str": "examples = [\n    dict(nums=[1, 2, 3, 4, 5], target=3, left=True),\n    dict(nums=[5, 4, 3, 2, 1], target=3, left=False),\n    dict(nums=[1, 1, 1, 1, 1], target=1, left=True),\n    dict(nums=[1, 2, 3, 4, 5], target=6, left=True),\n    dict(nums=[5, 4, 3, 2, 1], target=0, left=False),\n    dict(nums=[1, 3, 5, 7, 9], target=4, left=True),\n    dict(nums=[9, 7, 5, 3, 1], target=4, left=False),\n    dict(nums=[1, 2, 3, 4, 5], target=2, left=True),\n    dict(nums=[5, 4, 3, 2, 1], target=2, left=False),\n    dict(nums=[1, 1, 1, 1, 1], target=2, left=True),\n]\nexamples += [\n    dict(nums=[1, 2, 3, 4, 5], target=3, left=True),\n    dict(nums=[1, 2, 3, 3, 3, 4, 5], target=3, left=False),\n    dict(nums=[10, 20, 30, 40, 50], target=25, left=True),\n    dict(nums=[5, 10, 15, 20], target=0, left=True),\n    dict(nums=[5, 10, 15, 20], target=25, left=False),\n    dict(nums=[1, 1, 1, 1, 1], target=1, left=True),\n    dict(nums=[1, 1, 1, 1, 1], target=1, left=False),\n    dict(nums=[-5, -3, 0, 2, 4], target=-4, left=True),\n    dict(nums=[100, 200, 300, 400], target=350, left=False),\n    dict(nums=[2, 4, 6, 8, 10], target=5, left=True)\n]\nexamples += [\n    dict(nums=[1, 2, 3, 4, 5], target=3, left=True),\n    dict(nums=[10, 20, 30, 40, 50], target=25, left=False),\n    dict(nums=[5, 10, 15, 20, 25], target=15, left=True),\n    dict(nums=[100, 200, 300, 400], target=200, left=False),\n    dict(nums=[1, 1, 1, 1, 2, 2, 3, 3], target=2, left=True),\n    dict(nums=[-5, -4, -3, -2, -1], target=-3, left=False),\n    dict(nums=[2, 4, 6, 8, 10], target=5, left=True),\n    dict(nums=[10, 20, 30, 40, 50], target=60, left=False),\n    dict(nums=[3, 6, 9, 12], target=8, left=True),\n    dict(nums=[0, 0, 1, 1, 1, 2, 2], target=1, left=False)\n]", "code": "def sub_func(nums, target, left):\n    lo = 0\n    hi = len(nums)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if nums[mid] > target or left and target == nums[mid]:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\n", "func_name": "sub_func", "exec_status": true, "example_inputs": ["\"{'nums': [1, 2, 3, 4, 5], 'target': 3, 'left': True}\"", "\"{'nums': [5, 4, 3, 2, 1], 'target': 3, 'left': False}\"", "\"{'nums': [1, 1, 1, 1, 1], 'target': 1, 'left': True}\"", "\"{'nums': [1, 2, 3, 4, 5], 'target': 6, 'left': True}\"", "\"{'nums': [5, 4, 3, 2, 1], 'target': 0, 'left': False}\"", "\"{'nums': [1, 3, 5, 7, 9], 'target': 4, 'left': True}\"", "\"{'nums': [9, 7, 5, 3, 1], 'target': 4, 'left': False}\"", "\"{'nums': [1, 2, 3, 4, 5], 'target': 2, 'left': True}\"", "\"{'nums': [5, 4, 3, 2, 1], 'target': 2, 'left': False}\"", "\"{'nums': [1, 1, 1, 1, 1], 'target': 2, 'left': True}\""], "example_outputs": [{"return": "\"2\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"5\""}, {"return": "\"2\""}, {"return": "\"5\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"4\""}, {"return": "\"0\""}, {"return": "\"5\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"4\""}, {"return": "\"3\""}, {"return": "\"2\""}, {"return": "\"5\""}, {"return": "\"2\""}, {"return": "\"5\""}], "parsed_inputs": [[["nums", "[1, 2, 3, 4, 5]"], ["target", "3"], ["left", "True"]], [["nums", "[5, 4, 3, 2, 1]"], ["target", "3"], ["left", "False"]], [["nums", "[1, 1, 1, 1, 1]"], ["target", "1"], ["left", "True"]], [["nums", "[1, 2, 3, 4, 5]"], ["target", "6"], ["left", "True"]], [["nums", "[5, 4, 3, 2, 1]"], ["target", "0"], ["left", "False"]], [["nums", "[1, 3, 5, 7, 9]"], ["target", "4"], ["left", "True"]], [["nums", "[9, 7, 5, 3, 1]"], ["target", "4"], ["left", "False"]], [["nums", "[1, 2, 3, 4, 5]"], ["target", "2"], ["left", "True"]], [["nums", "[5, 4, 3, 2, 1]"], ["target", "2"], ["left", "False"]], [["nums", "[1, 1, 1, 1, 1]"], ["target", "2"], ["left", "True"]]], "exec_code": "def sub_func(nums, target, left):\n    lo = 0\n    hi = len(nums)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if nums[mid] > target or left and target == nums[mid]:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\n", "output": "The function is:\n\n```python\ndef sub_func(nums, target, left):\n    lo = 0\n    hi = len(nums)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if nums[mid] > target or left and target == nums[mid]:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\n\n```", "choosed_example_idx": [4, 3, 7, 9, 8, 1, 0, 6, 5], "prompt": "Write a function that generates the output from the input.\n\n\nInput: dict(nums=[5, 4, 3, 2, 1], target=0, left=False), Output: \"0\"\nInput: dict(nums=[1, 2, 3, 4, 5], target=6, left=True), Output: \"5\"\nInput: dict(nums=[1, 2, 3, 4, 5], target=2, left=True), Output: \"1\"\nInput: dict(nums=[1, 1, 1, 1, 1], target=2, left=True), Output: \"5\"\nInput: dict(nums=[5, 4, 3, 2, 1], target=2, left=False), Output: \"0\"\nInput: dict(nums=[5, 4, 3, 2, 1], target=3, left=False), Output: \"5\"\nInput: dict(nums=[1, 2, 3, 4, 5], target=3, left=True), Output: \"2\"\nInput: dict(nums=[9, 7, 5, 3, 1], target=4, left=False), Output: \"0\"\nInput: dict(nums=[1, 3, 5, 7, 9], target=4, left=True), Output: \"2\"\n\nFunction: sub_func\n\n", "id": "8b3c45f5435c3cf452c97d0d1d54591686c9f85c_0"}
{"example_str": "examples = [\n    dict(stng=\"Hello World\"),\n    dict(stng=\"['Hello', 'World']\"),\n    dict(stng=\"Hello [World]\"),\n    dict(stng=\"['H', 'e', 'l', 'l', 'o']\"),\n    dict(stng=\"Hello'World\"),\n    dict(stng=\"[Hello] World\"),\n    dict(stng=\"Hello [World'\"),\n    dict(stng=\"['Hello World']\"),\n    dict(stng=\"Hello World'\"),\n    dict(stng=\"['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']\"),\n]\nexamples += [\n    dict(stng=\"Hello, [World]!\"),  # Example with brackets\n    dict(stng=\"Test 'single quotes' here\"),  # Example with single quotes\n    dict(stng=\"[This] should 'remove' [characters]\"),  # Example with both brackets and single quotes\n    dict(stng=\"NoSpecialCharacters\"),  # Example with no special characters to remove\n    dict(stng=\"12345\"),  # Example with numbers\n    dict(stng=\"\"),  # Example with an empty string\n    dict(stng=\"['List', 'elements']\"),  # Example simulating a list\n    dict(stng=\"Hello World!\"),  # Example with exclamation marks\n    dict(stng=\"Nested [brackets [like] this] example\"),  # Example with nested brackets\n    dict(stng=\"Mix of numbers [123] and letters [ABC]\")  # Example with numbers and letters inside brackets\n]\nexamples += [\n    dict(stng=\"Hello [World]!\"),\n    dict(stng=\"[Example] string with 'quotes' and [brackets]\"),\n    dict(stng=\"['List', 'of', 'strings']\"),\n    dict(stng=\"No special characters here\"),\n    dict(stng=\"[[[Triple brackets]]]\"),\n    dict(stng=\"Just a 'single quote' example\"),\n    dict(stng=\"Empty brackets [] here\"),\n    dict(stng=\"Nested [brackets [like] this] example\"),\n    dict(stng=\"Mix of [brackets] and 'quotes' in [one] string\"),\n    dict(stng=\"['Multiple', 'quotes', 'and', [brackets], here]\")\n]", "code": "def clean(stng):\n    output = ''\n    for letter in stng:\n        if letter != '[' and letter != ']' and letter != \"'\":\n            output += letter\n    return output\n", "func_name": "clean", "exec_status": true, "example_inputs": ["\"{'stng': 'Hello World'}\"", "\"{'stng': \\\"['Hello', 'World']\\\"}\"", "\"{'stng': 'Hello [World]'}\"", "\"{'stng': \\\"['H', 'e', 'l', 'l', 'o']\\\"}\"", "\"{'stng': \\\"Hello'World\\\"}\"", "\"{'stng': '[Hello] World'}\"", "\"{'stng': \\\"Hello [World'\\\"}\"", "\"{'stng': \\\"['Hello World']\\\"}\"", "\"{'stng': \\\"Hello World'\\\"}\"", "\"{'stng': \\\"['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']\\\"}\""], "example_outputs": [{"return": "\"'Hello World'\""}, {"return": "\"'Hello, World'\""}, {"return": "\"'Hello World'\""}, {"return": "\"'H, e, l, l, o'\""}, {"return": "\"'HelloWorld'\""}, {"return": "\"'Hello World'\""}, {"return": "\"'Hello World'\""}, {"return": "\"'Hello World'\""}, {"return": "\"'Hello World'\""}, {"return": "\"'H, e, l, l, o,  , W, o, r, l, d'\""}, {"return": "\"'Hello, World!'\""}, {"return": "\"'Test single quotes here'\""}, {"return": "\"'This should remove characters'\""}, {"return": "\"'NoSpecialCharacters'\""}, {"return": "\"'12345'\""}, {"return": "\"''\""}, {"return": "\"'List, elements'\""}, {"return": "\"'Hello World!'\""}, {"return": "\"'Nested brackets like this example'\""}, {"return": "\"'Mix of numbers 123 and letters ABC'\""}, {"return": "\"'Hello World!'\""}, {"return": "\"'Example string with quotes and brackets'\""}, {"return": "\"'List, of, strings'\""}, {"return": "\"'No special characters here'\""}, {"return": "\"'Triple brackets'\""}, {"return": "\"'Just a single quote example'\""}, {"return": "\"'Empty brackets  here'\""}, {"return": "\"'Nested brackets like this example'\""}, {"return": "\"'Mix of brackets and quotes in one string'\""}, {"return": "\"'Multiple, quotes, and, brackets, here'\""}], "parsed_inputs": [[["stng", "\"Hello World\""]], [["stng", "\"['Hello', 'World']\""]], [["stng", "\"Hello [World]\""]], [["stng", "\"['H', 'e', 'l', 'l', 'o']\""]], [["stng", "\"Hello'World\""]], [["stng", "\"[Hello] World\""]], [["stng", "\"Hello [World'\""]], [["stng", "\"['Hello World']\""]], [["stng", "\"Hello World'\""]], [["stng", "\"['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']\""]]], "exec_code": "def clean(stng):\n    output = ''\n    for letter in stng:\n        if letter != '[' and letter != ']' and letter != \"'\":\n            output += letter\n    return output\n", "output": "The function is:\n\n```python\ndef clean(stng):\n    output = ''\n    for letter in stng:\n        if letter != '[' and letter != ']' and letter != \"'\":\n            output += letter\n    return output\n\n```", "choosed_example_idx": [2, 6, 8], "prompt": "Write a function that generates the output from the input.\n\nInput: dict(stng=\"Hello [World]\"), Output: \"'Hello World'\"\nInput: dict(stng=\"Hello [World'\"), Output: \"'Hello World'\"\nInput: dict(stng=\"Hello World'\"), Output: \"'Hello World'\"\n\nFunction: clean\n", "id": "ea18897be545362db3c59e3f32a8255ea05fe908_0"}
{"example_str": "examples = [\n    dict(str=\"Hello World\"),\n    dict(str=\"   \"),\n    dict(str=\"No spaces here\"),\n    dict(str=\"Multiple   spaces   here\"),\n    dict(str=\"Space at the beginning \"),\n    dict(str=\" Space in the middle \"),\n    dict(str=\"Space at the end \"),\n    dict(str=\"No space at all\"),\n    dict(str=\"Single space \"),\n    dict(str=\"Double  space\"),\n]\nexamples += [\n    dict(str=\"Hello World\"),  # Contains a single space\n    dict(str=\" This is a test string \"),  # Spaces at the beginning and the end\n    dict(str=\"NoSpacesHere\"),  # Contains no spaces\n    dict(str=\" Multiple    spaces\"),  # Contains multiple spaces and tabs\n    dict(str=\"\"),  # Empty string\n    dict(str=\" \"),  # Single space\n    dict(str=\"  \"),  # Multiple spaces only\n    dict(str=\"Hello  World\"),  # Two spaces between words\n    dict(str=\" Line\\nBreak \"),  # Contains a line break and spaces\n    dict(str=\"Tab\\tCharacter\")  # Contains a tab character\n]\nexamples += [\n    dict(str=\"hello world\"),\n    dict(str=\" no spaces \"),\n    dict(str=\"a b c d e f\"),\n    dict(str=\" leading space\"),\n    dict(str=\"trailing space \"),\n    dict(str=\"  multiple   spaces  \"),\n    dict(str=\"\"),\n    dict(str=\"nochange\"),\n    dict(str=\"1 2 3 4 5\"),\n    dict(str=\"! @ # $ % ^ & * ( )\")\n]", "code": "def blankDelete(str):\n    i = 0\n    while i < len(str):\n        if str[i] == ' ':\n            str = str[:i] + str[i + 1:]\n        else:\n            i += 1\n    return str\n", "func_name": "blankDelete", "exec_status": true, "example_inputs": ["\"{'str': 'Hello World'}\"", "\"{'str': '   '}\"", "\"{'str': 'No spaces here'}\"", "\"{'str': 'Multiple   spaces   here'}\"", "\"{'str': 'Space at the beginning '}\"", "\"{'str': ' Space in the middle '}\"", "\"{'str': 'Space at the end '}\"", "\"{'str': 'No space at all'}\"", "\"{'str': 'Single space '}\"", "\"{'str': 'Double  space'}\""], "example_outputs": [{"return": "\"'HelloWorld'\""}, {"return": "\"''\""}, {"return": "\"'Nospaceshere'\""}, {"return": "\"'Multiplespaceshere'\""}, {"return": "\"'Spaceatthebeginning'\""}, {"return": "\"'Spaceinthemiddle'\""}, {"return": "\"'Spaceattheend'\""}, {"return": "\"'Nospaceatall'\""}, {"return": "\"'Singlespace'\""}, {"return": "\"'Doublespace'\""}, {"return": "\"'HelloWorld'\""}, {"return": "\"'Thisisateststring'\""}, {"return": "\"'NoSpacesHere'\""}, {"return": "\"'Multiplespaces'\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"''\""}, {"return": "\"'HelloWorld'\""}, {"return": "\"'Line\\\\nBreak'\""}, {"return": "\"'Tab\\\\tCharacter'\""}, {"return": "\"'helloworld'\""}, {"return": "\"'nospaces'\""}, {"return": "\"'abcdef'\""}, {"return": "\"'leadingspace'\""}, {"return": "\"'trailingspace'\""}, {"return": "\"'multiplespaces'\""}, {"return": "\"''\""}, {"return": "\"'nochange'\""}, {"return": "\"'12345'\""}, {"return": "\"'!@#$%^&*()'\""}], "parsed_inputs": [[["str", "\"Hello World\""]], [["str", "\"   \""]], [["str", "\"No spaces here\""]], [["str", "\"Multiple   spaces   here\""]], [["str", "\"Space at the beginning \""]], [["str", "\" Space in the middle \""]], [["str", "\"Space at the end \""]], [["str", "\"No space at all\""]], [["str", "\"Single space \""]], [["str", "\"Double  space\""]]], "exec_code": "def blankDelete(str):\n    i = 0\n    while i < len(str):\n        if str[i] == ' ':\n            str = str[:i] + str[i + 1:]\n        else:\n            i += 1\n    return str\n", "output": "The function is:\n\n```python\ndef blankDelete(str):\n    i = 0\n    while i < len(str):\n        if str[i] == ' ':\n            str = str[:i] + str[i + 1:]\n        else:\n            i += 1\n    return str\n\n```", "choosed_example_idx": [4, 6, 7, 9, 8, 0, 2], "prompt": "Write a function that generates the output from the input.\nInput: dict(str=\"Space at the beginning \"), Output: \"'Spaceatthebeginning'\"\nInput: dict(str=\"Space at the end \"), Output: \"'Spaceattheend'\"\nInput: dict(str=\"No space at all\"), Output: \"'Nospaceatall'\"\nInput: dict(str=\"Double  space\"), Output: \"'Doublespace'\"\nInput: dict(str=\"Single space \"), Output: \"'Singlespace'\"\nInput: dict(str=\"Hello World\"), Output: \"'HelloWorld'\"\nInput: dict(str=\"No spaces here\"), Output: \"'Nospaceshere'\"\n\nFunction: blankDelete\n", "id": "ae50d409ad8e7b58de18480cfff37f74027298df_0"}
{"example_str": "examples = [\n    dict(regs={'a': 1, 'b': 2}, r='a'),\n    dict(regs={'x': 10, 'y': 20}, r=5),\n    dict(regs={}, r='z'),\n    dict(regs={'p': 3, 'q': 4}, r='p'),\n    dict(regs={'m': 100, 'n': 200}, r='o'),\n    dict(regs={'i': 5, 'j': 6}, r='i'),\n    dict(regs={}, r=10),\n    dict(regs={'k': 7, 'l': 8}, r='m'),\n    dict(regs={'c': 3, 'd': 4}, r='c'),\n    dict(regs={'e': 5, 'f': 6}, r='g'),\n]\nexamples += [\n    dict(regs={'a': 5, 'b': 10}, r='a'),  # Example where 'r' is a key in 'regs'\n    dict(regs={'a': 5, 'b': 10}, r='c'),  # Example where 'r' is not a key in 'regs'\n    dict(regs={}, r='z'),                 # Example with an empty 'regs' and 'r' not in 'regs'\n    dict(regs={'x': 1, 'y': 2}, r=3),     # Example where 'r' is an integer\n    dict(regs={'x': 1, 'y': 2}, r='x'),   # Example where 'r' is a key in 'regs'\n    dict(regs={'x': 1, 'y': 2}, r='y'),   # Example where 'r' is a key in 'regs'\n    dict(regs={'a': 3}, r='b'),           # Example where 'r' is not a key in 'regs'\n    dict(regs={'a': 3}, r='a'),           # Example where 'r' is a key in 'regs'\n    dict(regs={}, r=10),                  # Example where 'regs' is empty and 'r' is an integer\n    dict(regs={'a': 5, 'b': 10, 'c': 15}, r='d')  # Example where 'r' is not a key in 'regs'\n]\nexamples += [\n    dict(regs={'x': 10, 'y': 20}, r='x'),\n    dict(regs={'x': 10, 'y': 20}, r='y'),\n    dict(regs={'a': 5, 'b': 15}, r='a'),\n    dict(regs={'a': 5, 'b': 15}, r='b'),\n    dict(regs={}, r='z'),\n    dict(regs={'x': 1}, r='x'),\n    dict(regs={'x': 1}, r=100),\n    dict(regs={'register1': 200}, r='register1'),\n    dict(regs={'alpha': 300, 'beta': 400}, r='beta'),\n    dict(regs={'one': 1, 'two': 2}, r='two')\n]", "code": "def get(regs, r):\n    try:\n        return int(r)\n    except:\n        if not r in regs:\n            regs[r] = 0\n        return regs[r]\n", "func_name": "get", "exec_status": true, "example_inputs": ["\"{'regs': {'a': 1, 'b': 2}, 'r': 'a'}\"", "\"{'regs': {'x': 10, 'y': 20}, 'r': 5}\"", "\"{'regs': {}, 'r': 'z'}\"", "\"{'regs': {'p': 3, 'q': 4}, 'r': 'p'}\"", "\"{'regs': {'m': 100, 'n': 200}, 'r': 'o'}\"", "\"{'regs': {'i': 5, 'j': 6}, 'r': 'i'}\"", "\"{'regs': {}, 'r': 10}\"", "\"{'regs': {'k': 7, 'l': 8}, 'r': 'm'}\"", "\"{'regs': {'c': 3, 'd': 4}, 'r': 'c'}\"", "\"{'regs': {'e': 5, 'f': 6}, 'r': 'g'}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"5\""}, {"return": "\"10\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"10\""}, {"return": "\"0\""}, {"return": "\"10\""}, {"return": "\"20\""}, {"return": "\"5\""}, {"return": "\"15\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"100\""}, {"return": "\"200\""}, {"return": "\"400\""}, {"return": "\"2\""}], "parsed_inputs": [[["regs", "{'a': 1, 'b': 2}"], ["r", "\"a\""]], [["regs", "{'x': 10, 'y': 20}"], ["r", "5"]], [["regs", "{}"], ["r", "\"z\""]], [["regs", "{'p': 3, 'q': 4}"], ["r", "\"p\""]], [["regs", "{'m': 100, 'n': 200}"], ["r", "\"o\""]], [["regs", "{'i': 5, 'j': 6}"], ["r", "\"i\""]], [["regs", "{}"], ["r", "10"]], [["regs", "{'k': 7, 'l': 8}"], ["r", "\"m\""]], [["regs", "{'c': 3, 'd': 4}"], ["r", "\"c\""]], [["regs", "{'e': 5, 'f': 6}"], ["r", "\"g\""]]], "exec_code": "def get(regs, r):\n    try:\n        return int(r)\n    except:\n        if not r in regs:\n            regs[r] = 0\n        return regs[r]\n", "output": "The function is:\n\n```python\ndef get(regs, r):\n    try:\n        return int(r)\n    except:\n        if not r in regs:\n            regs[r] = 0\n        return regs[r]\n\n```", "choosed_example_idx": [6, 7, 2, 4, 3, 0, 1, 8, 5], "prompt": "Function: get\n\n\nInput: dict(regs={}, r=10), Output: \"10\"\nInput: dict(regs={'k': 7, 'l': 8}, r=\"m\"), Output: \"0\"\nInput: dict(regs={}, r=\"z\"), Output: \"0\"\nInput: dict(regs={'m': 100, 'n': 200}, r=\"o\"), Output: \"0\"\nInput: dict(regs={'p': 3, 'q': 4}, r=\"p\"), Output: \"3\"\nInput: dict(regs={'a': 1, 'b': 2}, r=\"a\"), Output: \"1\"\nInput: dict(regs={'x': 10, 'y': 20}, r=5), Output: \"5\"\nInput: dict(regs={'c': 3, 'd': 4}, r=\"c\"), Output: \"3\"\nInput: dict(regs={'i': 5, 'j': 6}, r=\"i\"), Output: \"5\"\n\n\nWrite a function that generates the output from the input.\n", "id": "2366422e0f3a79f18bce3a765bfb0aa689454641_0"}
{"example_str": "examples = [\n    dict(word='listen', words=['silent', 'enlist', 'inlets', 'tinsel']),\n    dict(word='acts', words=['cats', 'cast', 'acts', 'tacs']),\n    dict(word='teams', words=['meats', 'teams', 'tames', 'seam']),\n    dict(word='hello', words=['olleh', 'hello', 'hlelo', 'loleh']),\n    dict(word='abc', words=['abc', 'bac', 'cab', 'acb']),\n    dict(word='tommarow', words=['tomorrow', 'tommarow', 'morrowot', 'orrowtom']),\n    dict(word='madam', words=['madam', 'adam', 'damam', 'adamm']),\n    dict(word='stats', words=['stats', 'tats', 'tass', 'sstat']),\n    dict(word='weird', words=['weird', 'wired', 'ewire', 'rewid']),\n    dict(word='smile', words=['smile', 'limes', 'miles', 'ilems']),\n]\nexamples += [\n    dict(word=\"listen\", words=[\"enlist\", \"google\", \"inlets\", \"banana\"]),\n    dict(word=\"save\", words=[\"vase\", \"evas\", \"aves\", \"base\", \"case\"]),\n    dict(word=\"earth\", words=[\"heart\", \"hearth\", \"art\", \"hate\", \"rathe\"]),\n    dict(word=\"brag\", words=[\"grab\", \"bag\", \"gab\", \"rag\", \"barg\"]),\n    dict(word=\"elbow\", words=[\"below\", \"bowel\", \"we lob\", \"bowl\", \"low be\"]),\n    dict(word=\"state\", words=[\"taste\", \"test\", \"stat\", \"tset\", \"tates\"]),\n    dict(word=\"cider\", words=[\"cried\", \"ride\", \"dice\", \"iced\", \"dire\"]),\n    dict(word=\"night\", words=[\"thing\", \"ting\", \"thin\", \"nigh\", \"hint\"]),\n    dict(word=\"item\", words=[\"time\", \"emit\", \"mite\", \"team\", \"meat\"]),\n    dict(word=\"looped\", words=[\"poodle\", \"pooled\", \"looped\", \"poloed\", \"dopelo\"])\n]\nexamples += [\n    dict(word='listen', words=['enlist', 'google', 'inlets', 'banana']),\n    dict(word='earth', words=['heart', 'art', 'hate', 'rathe']),\n    dict(word='save', words=['vase', 'evas', 'aves', 'base']),\n    dict( word='race', words=['care', 'acre', 'acer', 'bear']),\n    dict(word='stone', words=['notes', 'tones', 'onset', 'nets']),\n    dict(word='brag', words=['grab', 'gab', 'rag', 'garb']),\n    dict(word='elbow', words=['below', 'bowl', 'owe', 'lowe']),\n    dict(word='state', words=['taste', 'tseta', 'test', 'sett']),\n    dict(word='cider', words=['cried', 'ride', 'dire', 'iced']),\n    dict(word='night', words=['thing', 'ting', 'thin', 'nigh'])\n]", "code": "def anagrams(word, words):\n    lst = list(word)\n    lst.sort()\n    final = list()\n    for element in words:\n        k = list(element)\n        k.sort()\n        if k == lst:\n            final.append(element)\n    return final\n", "func_name": "anagrams", "exec_status": true, "example_inputs": ["\"{'word': 'listen', 'words': ['silent', 'enlist', 'inlets', 'tinsel']}\"", "\"{'word': 'acts', 'words': ['cats', 'cast', 'acts', 'tacs']}\"", "\"{'word': 'teams', 'words': ['meats', 'teams', 'tames', 'seam']}\"", "\"{'word': 'hello', 'words': ['olleh', 'hello', 'hlelo', 'loleh']}\"", "\"{'word': 'abc', 'words': ['abc', 'bac', 'cab', 'acb']}\"", "\"{'word': 'tommarow', 'words': ['tomorrow', 'tommarow', 'morrowot', 'orrowtom']}\"", "\"{'word': 'madam', 'words': ['madam', 'adam', 'damam', 'adamm']}\"", "\"{'word': 'stats', 'words': ['stats', 'tats', 'tass', 'sstat']}\"", "\"{'word': 'weird', 'words': ['weird', 'wired', 'ewire', 'rewid']}\"", "\"{'word': 'smile', 'words': ['smile', 'limes', 'miles', 'ilems']}\""], "example_outputs": [{"return": "\"['silent', 'enlist', 'inlets', 'tinsel']\""}, {"return": "\"['cats', 'cast', 'acts', 'tacs']\""}, {"return": "\"['meats', 'teams', 'tames']\""}, {"return": "\"['olleh', 'hello', 'hlelo', 'loleh']\""}, {"return": "\"['abc', 'bac', 'cab', 'acb']\""}, {"return": "\"['tommarow']\""}, {"return": "\"['madam', 'damam', 'adamm']\""}, {"return": "\"['stats', 'sstat']\""}, {"return": "\"['weird', 'wired', 'rewid']\""}, {"return": "\"['smile', 'limes', 'miles', 'ilems']\""}, {"return": "\"['enlist', 'inlets']\""}, {"return": "\"['vase', 'evas', 'aves']\""}, {"return": "\"['heart', 'rathe']\""}, {"return": "\"['grab', 'barg']\""}, {"return": "\"['below', 'bowel']\""}, {"return": "\"['taste', 'tates']\""}, {"return": "\"['cried']\""}, {"return": "\"['thing']\""}, {"return": "\"['time', 'emit', 'mite']\""}, {"return": "\"['poodle', 'pooled', 'looped', 'poloed', 'dopelo']\""}, {"return": "\"['enlist', 'inlets']\""}, {"return": "\"['heart', 'rathe']\""}, {"return": "\"['vase', 'evas', 'aves']\""}, {"return": "\"['care', 'acre', 'acer']\""}, {"return": "\"['notes', 'tones', 'onset']\""}, {"return": "\"['grab', 'garb']\""}, {"return": "\"['below']\""}, {"return": "\"['taste', 'tseta']\""}, {"return": "\"['cried']\""}, {"return": "\"['thing']\""}], "parsed_inputs": [[["word", "\"listen\""], ["words", "['silent', 'enlist', 'inlets', 'tinsel']"]], [["word", "\"acts\""], ["words", "['cats', 'cast', 'acts', 'tacs']"]], [["word", "\"teams\""], ["words", "['meats', 'teams', 'tames', 'seam']"]], [["word", "\"hello\""], ["words", "['olleh', 'hello', 'hlelo', 'loleh']"]], [["word", "\"abc\""], ["words", "['abc', 'bac', 'cab', 'acb']"]], [["word", "\"tommarow\""], ["words", "['tomorrow', 'tommarow', 'morrowot', 'orrowtom']"]], [["word", "\"madam\""], ["words", "['madam', 'adam', 'damam', 'adamm']"]], [["word", "\"stats\""], ["words", "['stats', 'tats', 'tass', 'sstat']"]], [["word", "\"weird\""], ["words", "['weird', 'wired', 'ewire', 'rewid']"]], [["word", "\"smile\""], ["words", "['smile', 'limes', 'miles', 'ilems']"]]], "exec_code": "def anagrams(word, words):\n    lst = list(word)\n    lst.sort()\n    final = list()\n    for element in words:\n        k = list(element)\n        k.sort()\n        if k == lst:\n            final.append(element)\n    return final\n", "output": "The function is:\n\n```python\ndef anagrams(word, words):\n    lst = list(word)\n    lst.sort()\n    final = list()\n    for element in words:\n        k = list(element)\n        k.sort()\n        if k == lst:\n            final.append(element)\n    return final\n\n```", "choosed_example_idx": [7, 3, 8], "prompt": "Function: anagrams\nInput: dict(word=\"stats\", words=['stats', 'tats', 'tass', 'sstat']), Output: \"['stats', 'sstat']\"\nInput: dict(word=\"hello\", words=['olleh', 'hello', 'hlelo', 'loleh']), Output: \"['olleh', 'hello', 'hlelo', 'loleh']\"\nInput: dict(word=\"weird\", words=['weird', 'wired', 'ewire', 'rewid']), Output: \"['weird', 'wired', 'rewid']\"\n\n\nWrite a function that generates the output from the input.\n", "id": "65c983b34c54724c99b351029b11ba1df8f05382_0"}
{"example_str": "examples = [\n    dict(di=10, ho=20, ve=30),\n    dict(di=50, ho=40, ve=30),\n    dict(di=10, ho=10, ve=20),\n    dict(di=20, ho=30, ve=10),\n    dict(di=40, ho=40, ve=40),\n    dict(di=1, ho=2, ve=3),\n    dict(di=100, ho=200, ve=300),\n    dict(di=300, ho=200, ve=100),\n    dict(di=0, ho=0, ve=0),\n    dict(di=5, ho=5, ve=10),\n]\nexamples += [\n    dict(di=10, ho=5, ve=3),\n    dict(di=2, ho=8, ve=6),\n    dict(di=7, ho=7, ve=7),\n    dict(di=0, ho=0, ve=0),\n    dict(di=15, ho=15, ve=10),\n    dict(di=20, ho=10, ve=20),\n    dict(di=5, ho=10, ve=15),\n    dict(di=3, ho=2, ve=1),\n    dict(di=6, ho=9, ve=12),\n    dict(di=8, ho=8, ve=3)\n]\nexamples += [\n    dict(di=10, ho=5, ve=3),\n    dict(di=2, ho=20, ve=15),\n    dict(di=7, ho=7, ve=8),\n    dict(di=0, ho=0, ve=0),\n    dict(di=9, ho=9, ve=10),\n    dict(di=1, ho=2, ve=3),\n    dict(di=5, ho=1, ve=4),\n    dict(di=6, ho=6, ve=6),\n    dict(di=11, ho=10, ve=9),\n    dict(di=3, ho=8, ve=5),\n]", "code": "def pointers(di: int, ho: int, ve: int) ->str:\n    pointer = max(di, ho, ve)\n    if di == pointer:\n        return 'D'\n    elif ho == pointer:\n        return 'H'\n    else:\n        return 'V'\n", "func_name": "pointers", "exec_status": true, "example_inputs": ["\"{'di': 10, 'ho': 20, 've': 30}\"", "\"{'di': 50, 'ho': 40, 've': 30}\"", "\"{'di': 10, 'ho': 10, 've': 20}\"", "\"{'di': 20, 'ho': 30, 've': 10}\"", "\"{'di': 40, 'ho': 40, 've': 40}\"", "\"{'di': 1, 'ho': 2, 've': 3}\"", "\"{'di': 100, 'ho': 200, 've': 300}\"", "\"{'di': 300, 'ho': 200, 've': 100}\"", "\"{'di': 0, 'ho': 0, 've': 0}\"", "\"{'di': 5, 'ho': 5, 've': 10}\""], "example_outputs": [{"return": "\"'V'\""}, {"return": "\"'D'\""}, {"return": "\"'V'\""}, {"return": "\"'H'\""}, {"return": "\"'D'\""}, {"return": "\"'V'\""}, {"return": "\"'V'\""}, {"return": "\"'D'\""}, {"return": "\"'D'\""}, {"return": "\"'V'\""}, {"return": "\"'D'\""}, {"return": "\"'H'\""}, {"return": "\"'D'\""}, {"return": "\"'D'\""}, {"return": "\"'D'\""}, {"return": "\"'D'\""}, {"return": "\"'V'\""}, {"return": "\"'D'\""}, {"return": "\"'V'\""}, {"return": "\"'D'\""}, {"return": "\"'D'\""}, {"return": "\"'H'\""}, {"return": "\"'V'\""}, {"return": "\"'D'\""}, {"return": "\"'V'\""}, {"return": "\"'V'\""}, {"return": "\"'D'\""}, {"return": "\"'D'\""}, {"return": "\"'D'\""}, {"return": "\"'H'\""}], "parsed_inputs": [[["di", "10"], ["ho", "20"], ["ve", "30"]], [["di", "50"], ["ho", "40"], ["ve", "30"]], [["di", "10"], ["ho", "10"], ["ve", "20"]], [["di", "20"], ["ho", "30"], ["ve", "10"]], [["di", "40"], ["ho", "40"], ["ve", "40"]], [["di", "1"], ["ho", "2"], ["ve", "3"]], [["di", "100"], ["ho", "200"], ["ve", "300"]], [["di", "300"], ["ho", "200"], ["ve", "100"]], [["di", "0"], ["ho", "0"], ["ve", "0"]], [["di", "5"], ["ho", "5"], ["ve", "10"]]], "exec_code": "def pointers(di: int, ho: int, ve: int) ->str:\n    pointer = max(di, ho, ve)\n    if di == pointer:\n        return 'D'\n    elif ho == pointer:\n        return 'H'\n    else:\n        return 'V'\n", "output": "The function is:\n\n```python\ndef pointers(di: int, ho: int, ve: int) ->str:\n    pointer = max(di, ho, ve)\n    if di == pointer:\n        return 'D'\n    elif ho == pointer:\n        return 'H'\n    else:\n        return 'V'\n\n```", "choosed_example_idx": [2, 0, 6, 8, 9, 5, 4], "prompt": "Input: dict(di=10, ho=10, ve=20), Output: \"'V'\"\nInput: dict(di=10, ho=20, ve=30), Output: \"'V'\"\nInput: dict(di=100, ho=200, ve=300), Output: \"'V'\"\nInput: dict(di=0, ho=0, ve=0), Output: \"'D'\"\nInput: dict(di=5, ho=5, ve=10), Output: \"'V'\"\nInput: dict(di=1, ho=2, ve=3), Output: \"'V'\"\nInput: dict(di=40, ho=40, ve=40), Output: \"'D'\"\n\nWrite a function that generates the output from the input.\nFunction: pointers\n", "id": "c7c1ac8b7c0e14a8730b7752a714ba3647bb5b5e_0"}
{"example_str": "examples = [\n    dict(w=10, ar=2),\n    dict(w=20.5, ar=1.5),\n    dict(w=30, ar=3),\n    dict(w=40, ar=4),\n    dict(w=50, ar=5),\n    dict(w=10, ar=10),\n    dict(w=100, ar=2),\n    dict(w=200, ar=4),\n    dict(w=300, ar=6),\n    dict(w=400, ar=8),\n]\nexamples += [\n    dict(w=100, ar=2),\n    dict(w=50.5, ar=1.5),\n    dict(w=200, ar=4),\n    dict(w=120, ar=3),\n    dict(w=75, ar=2.5),\n    dict(w=150, ar=3.3),\n    dict(w=180, ar=2.2),\n    dict(w=250, ar=5),\n    dict(w=90, ar=1.8),\n    dict(w=60, ar=2.4)\n]\nexamples += [\n    dict(w=100, ar=2),\n    dict(w=50, ar=2.5),\n    dict(w=200, ar=4),\n    dict(w=150, ar=3),\n    dict(w=120, ar=1.5),\n    dict(w=180, ar=2.2),\n    dict(w=75, ar=1.25),\n    dict(w=90, ar=3),\n    dict(w=160, ar=4),\n    dict(w=250, ar=5),\n]", "code": "def __set_height(w, ar):\n    return w, w / ar\n", "func_name": "__set_height", "exec_status": true, "example_inputs": ["\"{'w': 10, 'ar': 2}\"", "\"{'w': 20.5, 'ar': 1.5}\"", "\"{'w': 30, 'ar': 3}\"", "\"{'w': 40, 'ar': 4}\"", "\"{'w': 50, 'ar': 5}\"", "\"{'w': 10, 'ar': 10}\"", "\"{'w': 100, 'ar': 2}\"", "\"{'w': 200, 'ar': 4}\"", "\"{'w': 300, 'ar': 6}\"", "\"{'w': 400, 'ar': 8}\""], "example_outputs": [{"return": "\"(10, 5.0)\""}, {"return": "\"(20.5, 13.666666666666666)\""}, {"return": "\"(30, 10.0)\""}, {"return": "\"(40, 10.0)\""}, {"return": "\"(50, 10.0)\""}, {"return": "\"(10, 1.0)\""}, {"return": "\"(100, 50.0)\""}, {"return": "\"(200, 50.0)\""}, {"return": "\"(300, 50.0)\""}, {"return": "\"(400, 50.0)\""}, {"return": "\"(100, 50.0)\""}, {"return": "\"(50.5, 33.666666666666664)\""}, {"return": "\"(200, 50.0)\""}, {"return": "\"(120, 40.0)\""}, {"return": "\"(75, 30.0)\""}, {"return": "\"(150, 45.45454545454546)\""}, {"return": "\"(180, 81.81818181818181)\""}, {"return": "\"(250, 50.0)\""}, {"return": "\"(90, 50.0)\""}, {"return": "\"(60, 25.0)\""}, {"return": "\"(100, 50.0)\""}, {"return": "\"(50, 20.0)\""}, {"return": "\"(200, 50.0)\""}, {"return": "\"(150, 50.0)\""}, {"return": "\"(120, 80.0)\""}, {"return": "\"(180, 81.81818181818181)\""}, {"return": "\"(75, 60.0)\""}, {"return": "\"(90, 30.0)\""}, {"return": "\"(160, 40.0)\""}, {"return": "\"(250, 50.0)\""}], "parsed_inputs": [[["w", "10"], ["ar", "2"]], [["w", "20.5"], ["ar", "1.5"]], [["w", "30"], ["ar", "3"]], [["w", "40"], ["ar", "4"]], [["w", "50"], ["ar", "5"]], [["w", "10"], ["ar", "10"]], [["w", "100"], ["ar", "2"]], [["w", "200"], ["ar", "4"]], [["w", "300"], ["ar", "6"]], [["w", "400"], ["ar", "8"]]], "exec_code": "def __set_height(w, ar):\n    return w, w / ar\n", "output": "The function is:\n\n```python\ndef __set_height(w, ar):\n    return w, w / ar\n\n```", "choosed_example_idx": [6, 0, 8, 4, 9, 5, 3, 2, 1, 7], "prompt": "Write a function that generates the output from the input.\nInput: dict(w=100, ar=2), Output: \"(100, 50.0)\"\nInput: dict(w=10, ar=2), Output: \"(10, 5.0)\"\nInput: dict(w=300, ar=6), Output: \"(300, 50.0)\"\nInput: dict(w=50, ar=5), Output: \"(50, 10.0)\"\nInput: dict(w=400, ar=8), Output: \"(400, 50.0)\"\nInput: dict(w=10, ar=10), Output: \"(10, 1.0)\"\nInput: dict(w=40, ar=4), Output: \"(40, 10.0)\"\nInput: dict(w=30, ar=3), Output: \"(30, 10.0)\"\nInput: dict(w=20.5, ar=1.5), Output: \"(20.5, 13.666666666666666)\"\nInput: dict(w=200, ar=4), Output: \"(200, 50.0)\"\n\nFunction: __set_height\n\n\n", "id": "6f250595a5bf827dcb528653384165318ed5caae_0"}
{"example_str": "examples = [\n    dict(dia=1),\n    dict(dia=2),\n    dict(dia=3),\n    dict(dia=4),\n    dict(dia=5),\n    dict(dia=6),\n    dict(dia=7),\n    dict(dia=0),\n    dict(dia=8),\n    dict(dia=-1),\n]\nexamples += [\n    dict(dia=1),  # Expected output: 'Domingo'\n    dict(dia=2),  # Expected output: 'Sabado'\n    dict(dia=3),  # Expected output: 'Segunda'\n    dict(dia=4),  # Expected output: 'Terça'\n    dict(dia=5),  # Expected output: 'Quarta'\n    dict(dia=6),  # Expected output: 'Quinta'\n    dict(dia=7),  # Expected output: 'Sexta'\n    dict(dia=0),  # Expected output: 'Valor Inválido'\n    dict(dia=8),  # Expected output: 'Valor Inválido'\n    dict(dia=-1)  # Expected output: 'Valor Inválido'\n]\nexamples += [\n    dict(dia=1),\n    dict(dia=2),\n    dict(dia=3),\n    dict(dia=4),\n    dict(dia=5),\n    dict(dia=6),\n    dict(dia=7),\n    dict(dia=0),\n    dict(dia=8),\n    dict(dia=-1)\n]", "code": "def compare(dia):\n    if dia == 1:\n        dia = 'Domingo'\n        return dia\n    elif dia == 2:\n        dia = 'Sabado'\n        return dia\n    elif dia == 3:\n        dia = 'Segunda'\n        return dia\n    elif dia == 4:\n        dia = 'Terça'\n        return dia\n    elif dia == 5:\n        dia = 'Quarta'\n        return dia\n    elif dia == 6:\n        dia = 'Quinta'\n        return dia\n    elif dia == 7:\n        dia = 'Sexta'\n        return dia\n    else:\n        dia = 'Valor Inválido'\n        return dia\n", "func_name": "compare", "exec_status": true, "example_inputs": ["\"{'dia': 1}\"", "\"{'dia': 2}\"", "\"{'dia': 3}\"", "\"{'dia': 4}\"", "\"{'dia': 5}\"", "\"{'dia': 6}\"", "\"{'dia': 7}\"", "\"{'dia': 0}\"", "\"{'dia': 8}\"", "\"{'dia': -1}\""], "example_outputs": [{"return": "\"'Domingo'\""}, {"return": "\"'Sabado'\""}, {"return": "\"'Segunda'\""}, {"return": "\"'Ter\\u00e7a'\""}, {"return": "\"'Quarta'\""}, {"return": "\"'Quinta'\""}, {"return": "\"'Sexta'\""}, {"return": "\"'Valor Inv\\u00e1lido'\""}, {"return": "\"'Valor Inv\\u00e1lido'\""}, {"return": "\"'Valor Inv\\u00e1lido'\""}, {"return": "\"'Domingo'\""}, {"return": "\"'Sabado'\""}, {"return": "\"'Segunda'\""}, {"return": "\"'Ter\\u00e7a'\""}, {"return": "\"'Quarta'\""}, {"return": "\"'Quinta'\""}, {"return": "\"'Sexta'\""}, {"return": "\"'Valor Inv\\u00e1lido'\""}, {"return": "\"'Valor Inv\\u00e1lido'\""}, {"return": "\"'Valor Inv\\u00e1lido'\""}, {"return": "\"'Domingo'\""}, {"return": "\"'Sabado'\""}, {"return": "\"'Segunda'\""}, {"return": "\"'Ter\\u00e7a'\""}, {"return": "\"'Quarta'\""}, {"return": "\"'Quinta'\""}, {"return": "\"'Sexta'\""}, {"return": "\"'Valor Inv\\u00e1lido'\""}, {"return": "\"'Valor Inv\\u00e1lido'\""}, {"return": "\"'Valor Inv\\u00e1lido'\""}], "parsed_inputs": [[["dia", "1"]], [["dia", "2"]], [["dia", "3"]], [["dia", "4"]], [["dia", "5"]], [["dia", "6"]], [["dia", "7"]], [["dia", "0"]], [["dia", "8"]], [["dia", "-1"]]], "exec_code": "def compare(dia):\n    if dia == 1:\n        dia = 'Domingo'\n        return dia\n    elif dia == 2:\n        dia = 'Sabado'\n        return dia\n    elif dia == 3:\n        dia = 'Segunda'\n        return dia\n    elif dia == 4:\n        dia = 'Terça'\n        return dia\n    elif dia == 5:\n        dia = 'Quarta'\n        return dia\n    elif dia == 6:\n        dia = 'Quinta'\n        return dia\n    elif dia == 7:\n        dia = 'Sexta'\n        return dia\n    else:\n        dia = 'Valor Inválido'\n        return dia\n", "output": "The function is:\n\n```python\ndef compare(dia):\n    if dia == 1:\n        dia = 'Domingo'\n        return dia\n    elif dia == 2:\n        dia = 'Sabado'\n        return dia\n    elif dia == 3:\n        dia = 'Segunda'\n        return dia\n    elif dia == 4:\n        dia = 'Terça'\n        return dia\n    elif dia == 5:\n        dia = 'Quarta'\n        return dia\n    elif dia == 6:\n        dia = 'Quinta'\n        return dia\n    elif dia == 7:\n        dia = 'Sexta'\n        return dia\n    else:\n        dia = 'Valor Inválido'\n        return dia\n\n```", "choosed_example_idx": [0, 6, 9, 8, 3, 5, 7, 1, 4], "prompt": "Write a function that generates the output from the input.\nFunction: compare\n\nInput: dict(dia=1), Output: \"'Domingo'\"\nInput: dict(dia=7), Output: \"'Sexta'\"\nInput: dict(dia=-1), Output: \"'Valor Inv\\u00e1lido'\"\nInput: dict(dia=8), Output: \"'Valor Inv\\u00e1lido'\"\nInput: dict(dia=4), Output: \"'Ter\\u00e7a'\"\nInput: dict(dia=6), Output: \"'Quinta'\"\nInput: dict(dia=0), Output: \"'Valor Inv\\u00e1lido'\"\nInput: dict(dia=2), Output: \"'Sabado'\"\nInput: dict(dia=5), Output: \"'Quarta'\"\n\n\n", "id": "683093c43f3b3ae092458cb0696042e32c7c3d6b_0"}
{"example_str": "examples = [\n    dict(tasklist={}, tasknum=1, priority=3, tasktype='high'),\n    dict(tasklist={'data': [1, 2, 'low'], 'next': None}, tasknum=2, priority=1, tasktype='medium'),\n    dict(tasklist={'data': [1, 3, 'high'], 'next': {'data': [2, 2, 'low'], 'next': None}}, tasknum=3, priority=4, tasktype='high'),\n    dict(tasklist={}, tasknum=1, priority=1, tasktype='low'),\n    dict(tasklist={'data': [1, 1, 'low'], 'next': None}, tasknum=2, priority=2, tasktype='medium'),\n    dict(tasklist={'data': [1, 2, 'medium'], 'next': {'data': [2, 1, 'low'], 'next': None}}, tasknum=3, priority=3, tasktype='high'),\n    dict(tasklist={'data': [1, 3, 'high'], 'next': {'data': [2, 2, 'medium'], 'next': {'data': [3, 1, 'low'], 'next': None}}}, tasknum=4, priority=4, tasktype='high'),\n    dict(tasklist={}, tasknum=1, priority=2, tasktype='medium'),\n    dict(tasklist={'data': [1, 2, 'medium'], 'next': None}, tasknum=2, priority=1, tasktype='low'),\n    dict(tasklist={'data': [1, 1, 'low'], 'next': {'data': [2, 2, 'medium'], 'next': {'data': [3, 3, 'high'], 'next': None}}}, tasknum=4, priority=4, tasktype='high')\n]\nexamples += [\n    dict(tasklist={}, tasknum=1, priority=5, tasktype=\"Report\"),\n    dict(tasklist={}, tasknum=2, priority=3, tasktype=\"Email\"),\n    dict(tasklist={\"data\": [1, 5, \"Report\"], \"next\": None}, tasknum=3, priority=7, tasktype=\"Meeting\"),\n    dict(tasklist={\"data\": [1, 5, \"Report\"], \"next\": None}, tasknum=4, priority=4, tasktype=\"Call\"),\n    dict(tasklist={\"data\": [1, 5, \"Report\"], \"next\": None}, tasknum=5, priority=1, tasktype=\"Review\"),\n    dict(tasklist={\"data\": [1, 5, \"Report\"], \"next\": {\"data\": [2, 3, \"Email\"], \"next\": None}}, tasknum=6, priority=2, tasktype=\"Update\"),\n    dict(tasklist={\"data\": [1, 5, \"Report\"], \"next\": {\"data\": [2, 3, \"Email\"], \"next\": None}}, tasknum=7, priority=6, tasktype=\"Presentation\"),\n    dict(tasklist={\"data\": [1, 5, \"Report\"], \"next\": {\"data\": [2, 3, \"Email\"], \"next\": None}}, tasknum=8, priority=5, tasktype=\"Discussion\"),\n    dict(tasklist={\"data\": [1, 5, \"Report\"], \"next\": {\"data\": [2, 3, \"Email\"], \"next\": None}}, tasknum=9, priority=3, tasktype=\"Documentation\"),\n    dict(tasklist={\"data\": [1, 5, \"Report\"], \"next\": {\"data\": [2, 3, \"Email\"], \"next\": None}}, tasknum=10, priority=8, tasktype=\"Analysis\")\n]\nexamples += [\n    dict(tasklist={}, tasknum=1, priority=5, tasktype='Report'),\n    dict(tasklist={'data': [1, 5, 'Report'], 'next': None}, tasknum=2, priority=3, tasktype='Email'),\n    dict(tasklist={'data': [1, 5, 'Report'], 'next': None}, tasknum=3, priority=7, tasktype='Meeting'),\n    dict(tasklist={}, tasknum=4, priority=1, tasktype='Call'),\n    dict(tasklist={'data': [1, 5, 'Report'], 'next': None}, tasknum=5, priority=5, tasktype='Review'),\n    dict(tasklist={'data': [1, 5, 'Report'], 'next': {'data': [2, 3, 'Email'], 'next': None}}, tasknum=6, priority=2, tasktype='Update'),\n    dict(tasklist={'data': [1, 5, 'Report'], 'next': {'data': [2, 3, 'Email'], 'next': None}}, tasknum=7, priority=6, tasktype='Design'),\n    dict(tasklist={}, tasknum=8, priority=4, tasktype='Analysis'),\n    dict(tasklist={'data': [1, 5, 'Report'], 'next': {'data': [2, 3, 'Email'], 'next': {'data': [3, 7, 'Meeting'], 'next': None}}}, tasknum=9, priority=8, tasktype='Presentation'),\n    dict(tasklist={'data': [1, 5, 'Report'], 'next': {'data': [2, 3, 'Email'], 'next': {'data': [3, 7, 'Meeting'], 'next': None}}}, tasknum=10, priority=1, tasktype='Documentation')\n]", "code": "def addtask(tasklist, tasknum, priority, tasktype):\n    newnode = {}\n    newnode['data'] = [tasknum, priority, tasktype]\n    nodebefore = tasklist\n    if tasklist == {}:\n        newnode['next'] = None\n        tasklist = newnode\n        return tasklist\n    else:\n        while nodebefore['next'] != None:\n            if newnode['data'][1] > nodebefore['data'][1]:\n                newnode['next'] = tasklist\n                return newnode\n            elif newnode['data'][1] <= nodebefore['next']['data'][1]:\n                nodebefore = nodebefore['next']\n            else:\n                newnode['next'] = nodebefore['next']\n                nodebefore['next'] = newnode\n                return tasklist\n        newnode['next'] = None\n        nodebefore['next'] = newnode\n        return tasklist\n", "func_name": "addtask", "exec_status": true, "example_inputs": ["\"{'tasklist': {}, 'tasknum': 1, 'priority': 3, 'tasktype': 'high'}\"", "\"{'tasklist': {'data': [1, 2, 'low'], 'next': None}, 'tasknum': 2, 'priority': 1, 'tasktype': 'medium'}\"", "\"{'tasklist': {'data': [1, 3, 'high'], 'next': {'data': [2, 2, 'low'], 'next': None}}, 'tasknum': 3, 'priority': 4, 'tasktype': 'high'}\"", "\"{'tasklist': {}, 'tasknum': 1, 'priority': 1, 'tasktype': 'low'}\"", "\"{'tasklist': {'data': [1, 1, 'low'], 'next': None}, 'tasknum': 2, 'priority': 2, 'tasktype': 'medium'}\"", "\"{'tasklist': {'data': [1, 2, 'medium'], 'next': {'data': [2, 1, 'low'], 'next': None}}, 'tasknum': 3, 'priority': 3, 'tasktype': 'high'}\"", "\"{'tasklist': {'data': [1, 3, 'high'], 'next': {'data': [2, 2, 'medium'], 'next': {'data': [3, 1, 'low'], 'next': None}}}, 'tasknum': 4, 'priority': 4, 'tasktype': 'high'}\"", "\"{'tasklist': {}, 'tasknum': 1, 'priority': 2, 'tasktype': 'medium'}\"", "\"{'tasklist': {'data': [1, 2, 'medium'], 'next': None}, 'tasknum': 2, 'priority': 1, 'tasktype': 'low'}\"", "\"{'tasklist': {'data': [1, 1, 'low'], 'next': {'data': [2, 2, 'medium'], 'next': {'data': [3, 3, 'high'], 'next': None}}}, 'tasknum': 4, 'priority': 4, 'tasktype': 'high'}\""], "example_outputs": [{"return": "\"{'data': [1, 3, 'high'], 'next': None}\""}, {"return": "\"{'data': [1, 2, 'low'], 'next': {'data': [2, 1, 'medium'], 'next': None}}\""}, {"return": "\"{'data': [3, 4, 'high'], 'next': {'data': [1, 3, 'high'], 'next': {'data': [2, 2, 'low'], 'next': None}}}\""}, {"return": "\"{'data': [1, 1, 'low'], 'next': None}\""}, {"return": "\"{'data': [1, 1, 'low'], 'next': {'data': [2, 2, 'medium'], 'next': None}}\""}, {"return": "\"{'data': [3, 3, 'high'], 'next': {'data': [1, 2, 'medium'], 'next': {'data': [2, 1, 'low'], 'next': None}}}\""}, {"return": "\"{'data': [4, 4, 'high'], 'next': {'data': [1, 3, 'high'], 'next': {'data': [2, 2, 'medium'], 'next': {'data': [3, 1, 'low'], 'next': None}}}}\""}, {"return": "\"{'data': [1, 2, 'medium'], 'next': None}\""}, {"return": "\"{'data': [1, 2, 'medium'], 'next': {'data': [2, 1, 'low'], 'next': None}}\""}, {"return": "\"{'data': [4, 4, 'high'], 'next': {'data': [1, 1, 'low'], 'next': {'data': [2, 2, 'medium'], 'next': {'data': [3, 3, 'high'], 'next': None}}}}\""}, {"return": "\"{'data': [1, 5, 'Report'], 'next': None}\""}, {"return": "\"{'data': [2, 3, 'Email'], 'next': None}\""}, {"return": "\"{'data': [1, 5, 'Report'], 'next': {'data': [3, 7, 'Meeting'], 'next': None}}\""}, {"return": "\"{'data': [1, 5, 'Report'], 'next': {'data': [4, 4, 'Call'], 'next': None}}\""}, {"return": "\"{'data': [1, 5, 'Report'], 'next': {'data': [5, 1, 'Review'], 'next': None}}\""}, {"return": "\"{'data': [1, 5, 'Report'], 'next': {'data': [2, 3, 'Email'], 'next': {'data': [6, 2, 'Update'], 'next': None}}}\""}, {"return": "\"{'data': [7, 6, 'Presentation'], 'next': {'data': [1, 5, 'Report'], 'next': {'data': [2, 3, 'Email'], 'next': None}}}\""}, {"return": "\"{'data': [1, 5, 'Report'], 'next': {'data': [8, 5, 'Discussion'], 'next': {'data': [2, 3, 'Email'], 'next': None}}}\""}, {"return": "\"{'data': [1, 5, 'Report'], 'next': {'data': [2, 3, 'Email'], 'next': {'data': [9, 3, 'Documentation'], 'next': None}}}\""}, {"return": "\"{'data': [10, 8, 'Analysis'], 'next': {'data': [1, 5, 'Report'], 'next': {'data': [2, 3, 'Email'], 'next': None}}}\""}, {"return": "\"{'data': [1, 5, 'Report'], 'next': None}\""}, {"return": "\"{'data': [1, 5, 'Report'], 'next': {'data': [2, 3, 'Email'], 'next': None}}\""}, {"return": "\"{'data': [1, 5, 'Report'], 'next': {'data': [3, 7, 'Meeting'], 'next': None}}\""}, {"return": "\"{'data': [4, 1, 'Call'], 'next': None}\""}, {"return": "\"{'data': [1, 5, 'Report'], 'next': {'data': [5, 5, 'Review'], 'next': None}}\""}, {"return": "\"{'data': [1, 5, 'Report'], 'next': {'data': [2, 3, 'Email'], 'next': {'data': [6, 2, 'Update'], 'next': None}}}\""}, {"return": "\"{'data': [7, 6, 'Design'], 'next': {'data': [1, 5, 'Report'], 'next': {'data': [2, 3, 'Email'], 'next': None}}}\""}, {"return": "\"{'data': [8, 4, 'Analysis'], 'next': None}\""}, {"return": "\"{'data': [9, 8, 'Presentation'], 'next': {'data': [1, 5, 'Report'], 'next': {'data': [2, 3, 'Email'], 'next': {'data': [3, 7, 'Meeting'], 'next': None}}}}\""}, {"return": "\"{'data': [1, 5, 'Report'], 'next': {'data': [2, 3, 'Email'], 'next': {'data': [3, 7, 'Meeting'], 'next': {'data': [10, 1, 'Documentation'], 'next': None}}}}\""}], "parsed_inputs": [[["tasklist", "{}"], ["tasknum", "1"], ["priority", "3"], ["tasktype", "\"high\""]], [["tasklist", "{'data': [1, 2, 'low'], 'next': None}"], ["tasknum", "2"], ["priority", "1"], ["tasktype", "\"medium\""]], [["tasklist", "{'data': [1, 3, 'high'], 'next': {'data': [2, 2, 'low'], 'next': None}}"], ["tasknum", "3"], ["priority", "4"], ["tasktype", "\"high\""]], [["tasklist", "{}"], ["tasknum", "1"], ["priority", "1"], ["tasktype", "\"low\""]], [["tasklist", "{'data': [1, 1, 'low'], 'next': None}"], ["tasknum", "2"], ["priority", "2"], ["tasktype", "\"medium\""]], [["tasklist", "{'data': [1, 2, 'medium'], 'next': {'data': [2, 1, 'low'], 'next': None}}"], ["tasknum", "3"], ["priority", "3"], ["tasktype", "\"high\""]], [["tasklist", "{'data': [1, 3, 'high'], 'next': {'data': [2, 2, 'medium'], 'next': {'data': [3, 1, 'low'], 'next': None}}}"], ["tasknum", "4"], ["priority", "4"], ["tasktype", "\"high\""]], [["tasklist", "{}"], ["tasknum", "1"], ["priority", "2"], ["tasktype", "\"medium\""]], [["tasklist", "{'data': [1, 2, 'medium'], 'next': None}"], ["tasknum", "2"], ["priority", "1"], ["tasktype", "\"low\""]], [["tasklist", "{'data': [1, 1, 'low'], 'next': {'data': [2, 2, 'medium'], 'next': {'data': [3, 3, 'high'], 'next': None}}}"], ["tasknum", "4"], ["priority", "4"], ["tasktype", "\"high\""]]], "exec_code": "def addtask(tasklist, tasknum, priority, tasktype):\n    newnode = {}\n    newnode['data'] = [tasknum, priority, tasktype]\n    nodebefore = tasklist\n    if tasklist == {}:\n        newnode['next'] = None\n        tasklist = newnode\n        return tasklist\n    else:\n        while nodebefore['next'] != None:\n            if newnode['data'][1] > nodebefore['data'][1]:\n                newnode['next'] = tasklist\n                return newnode\n            elif newnode['data'][1] <= nodebefore['next']['data'][1]:\n                nodebefore = nodebefore['next']\n            else:\n                newnode['next'] = nodebefore['next']\n                nodebefore['next'] = newnode\n                return tasklist\n        newnode['next'] = None\n        nodebefore['next'] = newnode\n        return tasklist\n", "output": "The function is:\n\n```python\ndef addtask(tasklist, tasknum, priority, tasktype):\n    newnode = {}\n    newnode['data'] = [tasknum, priority, tasktype]\n    nodebefore = tasklist\n    if tasklist == {}:\n        newnode['next'] = None\n        tasklist = newnode\n        return tasklist\n    else:\n        while nodebefore['next'] != None:\n            if newnode['data'][1] > nodebefore['data'][1]:\n                newnode['next'] = tasklist\n                return newnode\n            elif newnode['data'][1] <= nodebefore['next']['data'][1]:\n                nodebefore = nodebefore['next']\n            else:\n                newnode['next'] = nodebefore['next']\n                nodebefore['next'] = newnode\n                return tasklist\n        newnode['next'] = None\n        nodebefore['next'] = newnode\n        return tasklist\n\n```", "choosed_example_idx": [2, 1, 4, 0, 7, 8, 3], "prompt": "Write a function that generates the output from the input.\n\nFunction: addtask\n\nInput: dict(tasklist={'data': [1, 3, 'high'], 'next': {'data': [2, 2, 'low'], 'next': None}}, tasknum=3, priority=4, tasktype=\"high\"), Output: \"{'data': [3, 4, 'high'], 'next': {'data': [1, 3, 'high'], 'next': {'data': [2, 2, 'low'], 'next': None}}}\"\nInput: dict(tasklist={'data': [1, 2, 'low'], 'next': None}, tasknum=2, priority=1, tasktype=\"medium\"), Output: \"{'data': [1, 2, 'low'], 'next': {'data': [2, 1, 'medium'], 'next': None}}\"\nInput: dict(tasklist={'data': [1, 1, 'low'], 'next': None}, tasknum=2, priority=2, tasktype=\"medium\"), Output: \"{'data': [1, 1, 'low'], 'next': {'data': [2, 2, 'medium'], 'next': None}}\"\nInput: dict(tasklist={}, tasknum=1, priority=3, tasktype=\"high\"), Output: \"{'data': [1, 3, 'high'], 'next': None}\"\nInput: dict(tasklist={}, tasknum=1, priority=2, tasktype=\"medium\"), Output: \"{'data': [1, 2, 'medium'], 'next': None}\"\nInput: dict(tasklist={'data': [1, 2, 'medium'], 'next': None}, tasknum=2, priority=1, tasktype=\"low\"), Output: \"{'data': [1, 2, 'medium'], 'next': {'data': [2, 1, 'low'], 'next': None}}\"\nInput: dict(tasklist={}, tasknum=1, priority=1, tasktype=\"low\"), Output: \"{'data': [1, 1, 'low'], 'next': None}\"\n\n", "id": "63bb136946736620a523d548ebff4bfd03547ace_0"}
{"example_str": "examples = [\n    dict(genre=\"Rock.\"),\n    dict(genre=\"ROCK\"),\n    dict(genre=\"Pop\"),\n    dict(genre=\"Jazz.\"),\n    dict(genre=\"jazz\"),\n    dict(genre=\"Electronic\"),\n    dict(genre=\"Classical.\"),\n    dict(genre=\"CLASSICAL\"),\n    dict(genre=\"Folk\"),\n    dict(genre=\"R&B.\"),\n]\nexamples += [\n    dict(genre=\"Horror\"),  # Simple case\n    dict(genre=\"comedy.\"),  # Ends with a period\n    dict(genre=\"Sci-Fi\"),  # Mixed case\n    dict(genre=\"drama \"),  # Trailing space (not handled by function but included for completeness)\n    dict(genre=\"Action.\"),  # Mixed case with period\n    dict(genre=\"thriller\"),  # Lowercase\n    dict(genre=\"Romance.\"),  # Proper case with period\n    dict(genre=\"Documentary\"),  # Proper case\n    dict(genre=\"western.\"),  # Lowercase with period\n    dict(genre=\"ANIME.\")  # Uppercase with period\n]\nexamples += [\n    dict(genre='Horror.'),\n    dict(genre='comedy.'),\n    dict(genre='Drama'),\n    dict(genre='Action.'),\n    dict(genre='thriller'),\n    dict(genre='Science Fiction.'),\n    dict(genre='Documentary'),\n    dict(genre='Romance.'),\n    dict(genre='Mystery'),\n    dict(genre='Adventure.')\n]", "code": "def normalize_genre(genre):\n    if genre.endswith('.'):\n        genre = genre[:-1]\n    genre = genre.lower()\n    return genre\n", "func_name": "normalize_genre", "exec_status": true, "example_inputs": ["\"{'genre': 'Rock.'}\"", "\"{'genre': 'ROCK'}\"", "\"{'genre': 'Pop'}\"", "\"{'genre': 'Jazz.'}\"", "\"{'genre': 'jazz'}\"", "\"{'genre': 'Electronic'}\"", "\"{'genre': 'Classical.'}\"", "\"{'genre': 'CLASSICAL'}\"", "\"{'genre': 'Folk'}\"", "\"{'genre': 'R&B.'}\""], "example_outputs": [{"return": "\"'rock'\""}, {"return": "\"'rock'\""}, {"return": "\"'pop'\""}, {"return": "\"'jazz'\""}, {"return": "\"'jazz'\""}, {"return": "\"'electronic'\""}, {"return": "\"'classical'\""}, {"return": "\"'classical'\""}, {"return": "\"'folk'\""}, {"return": "\"'r&b'\""}, {"return": "\"'horror'\""}, {"return": "\"'comedy'\""}, {"return": "\"'sci-fi'\""}, {"return": "\"'drama '\""}, {"return": "\"'action'\""}, {"return": "\"'thriller'\""}, {"return": "\"'romance'\""}, {"return": "\"'documentary'\""}, {"return": "\"'western'\""}, {"return": "\"'anime'\""}, {"return": "\"'horror'\""}, {"return": "\"'comedy'\""}, {"return": "\"'drama'\""}, {"return": "\"'action'\""}, {"return": "\"'thriller'\""}, {"return": "\"'science fiction'\""}, {"return": "\"'documentary'\""}, {"return": "\"'romance'\""}, {"return": "\"'mystery'\""}, {"return": "\"'adventure'\""}], "parsed_inputs": [[["genre", "\"Rock.\""]], [["genre", "\"ROCK\""]], [["genre", "\"Pop\""]], [["genre", "\"Jazz.\""]], [["genre", "\"jazz\""]], [["genre", "\"Electronic\""]], [["genre", "\"Classical.\""]], [["genre", "\"CLASSICAL\""]], [["genre", "\"Folk\""]], [["genre", "\"R&B.\""]]], "exec_code": "def normalize_genre(genre):\n    if genre.endswith('.'):\n        genre = genre[:-1]\n    genre = genre.lower()\n    return genre\n", "output": "The function is:\n\n```python\ndef normalize_genre(genre):\n    if genre.endswith('.'):\n        genre = genre[:-1]\n    genre = genre.lower()\n    return genre\n\n```", "choosed_example_idx": [8, 7, 2, 1, 6, 0, 4, 5, 9], "prompt": "Write a function that generates the output from the input.\nInput: dict(genre=\"Folk\"), Output: \"'folk'\"\nInput: dict(genre=\"CLASSICAL\"), Output: \"'classical'\"\nInput: dict(genre=\"Pop\"), Output: \"'pop'\"\nInput: dict(genre=\"ROCK\"), Output: \"'rock'\"\nInput: dict(genre=\"Classical.\"), Output: \"'classical'\"\nInput: dict(genre=\"Rock.\"), Output: \"'rock'\"\nInput: dict(genre=\"jazz\"), Output: \"'jazz'\"\nInput: dict(genre=\"Electronic\"), Output: \"'electronic'\"\nInput: dict(genre=\"R&B.\"), Output: \"'r&b'\"\n\nFunction: normalize_genre\n\n", "id": "52b3f4e83c3bede07166e7d1996d34c59593e2bd_0"}
{"example_str": "examples = [\n    dict(string=\"hello:world\"),\n    dict(string=\"a[b+c]*d\"),\n    dict(string=\"(hello+world)*2\"),\n    dict(string=\"foo-bar/baz\"),\n    dict(string=\"[hello, world, foo]\"),\n    dict(string=\"a*(b+c)\"),\n    dict(string=\"hello/2\"),\n    dict(string=\"(a+b)*c\"),\n    dict(string=\"foo[bar+baz]\"),\n    dict(string=\"a*b+c*d\"),\n]\nexamples += [\n    dict(string=\"x + y - z\"),\n    dict(string=\"(a + b) * c / d\"),\n    dict(string=\"function(x[0], y[1], z[2])\"),\n    dict(string=\"5 * (3 + 2)\"),\n    dict(string=\"arr[index] + arr[index + 1]\"),\n    dict(string=\"\"),\n    dict(string=\"x*y/z-w\"),\n    dict(string=\"((x + 1) - (y - 2)) * 3\"),\n    dict(string=\"a+b-c*d/e\"),\n    dict(string=\"1 + 2 - 3 * 4 / 5\")\n]\nexamples += [\n    dict(string=\"x + y - z\"),\n    dict(string=\"function(x): return x[1]\"),\n    dict(string=\"if x > 0: x = x * 2\"),\n    dict(string=\"arr[i - 1] + arr[i + 1]\"),\n    dict(string=\"(a + b) * (c - d)\"),\n    dict(string=\"x / y + z\"),\n    dict(string=\"max(a, b) - min(c, d)\"),\n    dict(string=\"list[x: y]\"),\n    dict(string=\"a * (b + c) / d\"),\n    dict(string=\"x = 1 + 2 - 3 * 4 / 5\")\n]", "code": "def fake_lex(string):\n    toks = [':', '[', ']', '(', ')', '+', '-', '*', '/']\n    for tok in toks:\n        string = string.replace(tok, ' ' + tok + ' ')\n    return string.split() + [None]\n", "func_name": "fake_lex", "exec_status": true, "example_inputs": ["\"{'string': 'hello:world'}\"", "\"{'string': 'a[b+c]*d'}\"", "\"{'string': '(hello+world)*2'}\"", "\"{'string': 'foo-bar/baz'}\"", "\"{'string': '[hello, world, foo]'}\"", "\"{'string': 'a*(b+c)'}\"", "\"{'string': 'hello/2'}\"", "\"{'string': '(a+b)*c'}\"", "\"{'string': 'foo[bar+baz]'}\"", "\"{'string': 'a*b+c*d'}\""], "example_outputs": [{"return": "\"['hello', ':', 'world', None]\""}, {"return": "\"['a', '[', 'b', '+', 'c', ']', '*', 'd', None]\""}, {"return": "\"['(', 'hello', '+', 'world', ')', '*', '2', None]\""}, {"return": "\"['foo', '-', 'bar', '/', 'baz', None]\""}, {"return": "\"['[', 'hello,', 'world,', 'foo', ']', None]\""}, {"return": "\"['a', '*', '(', 'b', '+', 'c', ')', None]\""}, {"return": "\"['hello', '/', '2', None]\""}, {"return": "\"['(', 'a', '+', 'b', ')', '*', 'c', None]\""}, {"return": "\"['foo', '[', 'bar', '+', 'baz', ']', None]\""}, {"return": "\"['a', '*', 'b', '+', 'c', '*', 'd', None]\""}, {"return": "\"['x', '+', 'y', '-', 'z', None]\""}, {"return": "\"['(', 'a', '+', 'b', ')', '*', 'c', '/', 'd', None]\""}, {"return": "\"['function', '(', 'x', '[', '0', ']', ',', 'y', '[', '1', ']', ',', 'z', '[', '2', ']', ')', None]\""}, {"return": "\"['5', '*', '(', '3', '+', '2', ')', None]\""}, {"return": "\"['arr', '[', 'index', ']', '+', 'arr', '[', 'index', '+', '1', ']', None]\""}, {"return": "\"[None]\""}, {"return": "\"['x', '*', 'y', '/', 'z', '-', 'w', None]\""}, {"return": "\"['(', '(', 'x', '+', '1', ')', '-', '(', 'y', '-', '2', ')', ')', '*', '3', None]\""}, {"return": "\"['a', '+', 'b', '-', 'c', '*', 'd', '/', 'e', None]\""}, {"return": "\"['1', '+', '2', '-', '3', '*', '4', '/', '5', None]\""}, {"return": "\"['x', '+', 'y', '-', 'z', None]\""}, {"return": "\"['function', '(', 'x', ')', ':', 'return', 'x', '[', '1', ']', None]\""}, {"return": "\"['if', 'x', '>', '0', ':', 'x', '=', 'x', '*', '2', None]\""}, {"return": "\"['arr', '[', 'i', '-', '1', ']', '+', 'arr', '[', 'i', '+', '1', ']', None]\""}, {"return": "\"['(', 'a', '+', 'b', ')', '*', '(', 'c', '-', 'd', ')', None]\""}, {"return": "\"['x', '/', 'y', '+', 'z', None]\""}, {"return": "\"['max', '(', 'a,', 'b', ')', '-', 'min', '(', 'c,', 'd', ')', None]\""}, {"return": "\"['list', '[', 'x', ':', 'y', ']', None]\""}, {"return": "\"['a', '*', '(', 'b', '+', 'c', ')', '/', 'd', None]\""}, {"return": "\"['x', '=', '1', '+', '2', '-', '3', '*', '4', '/', '5', None]\""}], "parsed_inputs": [[["string", "\"hello:world\""]], [["string", "\"a[b+c]*d\""]], [["string", "\"(hello+world)*2\""]], [["string", "\"foo-bar/baz\""]], [["string", "\"[hello, world, foo]\""]], [["string", "\"a*(b+c)\""]], [["string", "\"hello/2\""]], [["string", "\"(a+b)*c\""]], [["string", "\"foo[bar+baz]\""]], [["string", "\"a*b+c*d\""]]], "exec_code": "def fake_lex(string):\n    toks = [':', '[', ']', '(', ')', '+', '-', '*', '/']\n    for tok in toks:\n        string = string.replace(tok, ' ' + tok + ' ')\n    return string.split() + [None]\n", "output": "The function is:\n\n```python\ndef fake_lex(string):\n    toks = [':', '[', ']', '(', ')', '+', '-', '*', '/']\n    for tok in toks:\n        string = string.replace(tok, ' ' + tok + ' ')\n    return string.split() + [None]\n\n```", "choosed_example_idx": [1, 4, 2, 7, 6, 3], "prompt": "Function: fake_lex\n\nInput: dict(string=\"a[b+c]*d\"), Output: \"['a', '[', 'b', '+', 'c', ']', '*', 'd', None]\"\nInput: dict(string=\"[hello, world, foo]\"), Output: \"['[', 'hello,', 'world,', 'foo', ']', None]\"\nInput: dict(string=\"(hello+world)*2\"), Output: \"['(', 'hello', '+', 'world', ')', '*', '2', None]\"\nInput: dict(string=\"(a+b)*c\"), Output: \"['(', 'a', '+', 'b', ')', '*', 'c', None]\"\nInput: dict(string=\"hello/2\"), Output: \"['hello', '/', '2', None]\"\nInput: dict(string=\"foo-bar/baz\"), Output: \"['foo', '-', 'bar', '/', 'baz', None]\"\n\nWrite a function that generates the output from the input.\n\n", "id": "092793f972c43840c278205d9c3eaa81f3f2a2e3_0"}
{"example_str": "examples = [\n    dict(the_str=\"Hello World\"),\n    dict(the_str=\"This is a $variable\"),\n    dict(the_str=\"Multiple $vars here $and there\"),\n    dict(the_str=\"$single_var\"),\n    dict(the_str=\"No vars here\"),\n    dict(the_str=\"A $var at the end\"),\n    dict(the_str=\"Multiple   $vars  here  $and  there\"),\n    dict(the_str=\"A $very long variable name\"),\n    dict(the_str=\"A $var with spaces $with multiple words\"),\n    dict(the_str=\"A string with multiple $vars $here $and $there\"),\n]\nexamples += [\n    dict(the_str=\"$var1 $var2 $var3\"),  # Multiple variables separated by spaces\n    dict(the_str=\"NoDollarSignsHere\"),  # No dollar signs, should return an empty list\n    dict(the_str=\"$var1$var2 $var3\"),   # Two variables, one right after another without space\n    dict(the_str=\"$var1 end\"),          # Single variable followed by a word\n    dict(the_str=\"\"),                   # Empty string, should return an empty list\n    dict(the_str=\"$\"),                  # Only a dollar sign, should return an empty list\n    dict(the_str=\"$var1 $\"),            # Variable followed by a lone dollar sign\n    dict(the_str=\"$$$var1 $var2\"),      # Multiple dollar signs before a variable name\n    dict(the_str=\"$var1$var2$var3\"),    # Variables without spaces in between\n    dict(the_str=\"Text before $var1 and after\")  # Text surrounding a variable\n]\nexamples += [\n    dict(the_str=\"$var1 I have $var2 and $var3\"),\n    dict(the_str=\"No variables here\"),\n    dict(the_str=\"$user responded with $action\"),\n    dict(the_str=\"$singleVar\"),\n    dict(the_str=\"Multiple $$ signs $var1 $var2\"),\n    dict(the_str=\"Ends with a variable $endVar\"),\n    dict(the_str=\"\"),\n    dict(the_str=\"$var_with_underscore $anotherVar123\"),\n    dict(the_str=\"Spaces $ are tricky\"),\n    dict(the_str=\"$varAtStart of the string\")\n]", "code": "def func_find_var(the_str):\n    l = []\n    s = ''\n    i = 0\n    while i < len(the_str):\n        if the_str[i] == '$':\n            j = i + 1\n            s = ''\n            while j < len(the_str):\n                if j == len(the_str) - 1 or the_str[j] == ' ':\n                    l.append(s)\n                    break\n                s = s + the_str[j]\n                j += 1\n            i = j + 1\n            continue\n        else:\n            i += 1\n    return l\n", "func_name": "func_find_var", "exec_status": true, "example_inputs": ["\"{'the_str': 'Hello World'}\"", "\"{'the_str': 'This is a $variable'}\"", "\"{'the_str': 'Multiple $vars here $and there'}\"", "\"{'the_str': '$single_var'}\"", "\"{'the_str': 'No vars here'}\"", "\"{'the_str': 'A $var at the end'}\"", "\"{'the_str': 'Multiple   $vars  here  $and  there'}\"", "\"{'the_str': 'A $very long variable name'}\"", "\"{'the_str': 'A $var with spaces $with multiple words'}\"", "\"{'the_str': 'A string with multiple $vars $here $and $there'}\""], "example_outputs": [{"return": "\"[]\""}, {"return": "\"['variabl']\""}, {"return": "\"['vars', 'and']\""}, {"return": "\"['single_va']\""}, {"return": "\"[]\""}, {"return": "\"['var']\""}, {"return": "\"['vars', 'and']\""}, {"return": "\"['very']\""}, {"return": "\"['var', 'with']\""}, {"return": "\"['vars', 'here', 'and', 'ther']\""}, {"return": "\"['var1', 'var2', 'var']\""}, {"return": "\"[]\""}, {"return": "\"['var1$var2', 'var']\""}, {"return": "\"['var1']\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"['var1']\""}, {"return": "\"['$$var1', 'var']\""}, {"return": "\"['var1$var2$var']\""}, {"return": "\"['var1']\""}, {"return": "\"['var1', 'var2', 'var']\""}, {"return": "\"[]\""}, {"return": "\"['user', 'actio']\""}, {"return": "\"['singleVa']\""}, {"return": "\"['$', 'var1', 'var']\""}, {"return": "\"['endVa']\""}, {"return": "\"[]\""}, {"return": "\"['var_with_underscore', 'anotherVar12']\""}, {"return": "\"['']\""}, {"return": "\"['varAtStart']\""}], "parsed_inputs": [[["the_str", "\"Hello World\""]], [["the_str", "\"This is a $variable\""]], [["the_str", "\"Multiple $vars here $and there\""]], [["the_str", "\"$single_var\""]], [["the_str", "\"No vars here\""]], [["the_str", "\"A $var at the end\""]], [["the_str", "\"Multiple   $vars  here  $and  there\""]], [["the_str", "\"A $very long variable name\""]], [["the_str", "\"A $var with spaces $with multiple words\""]], [["the_str", "\"A string with multiple $vars $here $and $there\""]]], "exec_code": "def func_find_var(the_str):\n    l = []\n    s = ''\n    i = 0\n    while i < len(the_str):\n        if the_str[i] == '$':\n            j = i + 1\n            s = ''\n            while j < len(the_str):\n                if j == len(the_str) - 1 or the_str[j] == ' ':\n                    l.append(s)\n                    break\n                s = s + the_str[j]\n                j += 1\n            i = j + 1\n            continue\n        else:\n            i += 1\n    return l\n", "output": "The function is:\n\n```python\ndef func_find_var(the_str):\n    l = []\n    s = ''\n    i = 0\n    while i < len(the_str):\n        if the_str[i] == '$':\n            j = i + 1\n            s = ''\n            while j < len(the_str):\n                if j == len(the_str) - 1 or the_str[j] == ' ':\n                    l.append(s)\n                    break\n                s = s + the_str[j]\n                j += 1\n            i = j + 1\n            continue\n        else:\n            i += 1\n    return l\n\n```", "choosed_example_idx": [0, 9, 4, 1, 2, 5, 7, 6], "prompt": "Input: dict(the_str=\"Hello World\"), Output: \"[]\"\nInput: dict(the_str=\"A string with multiple $vars $here $and $there\"), Output: \"['vars', 'here', 'and', 'ther']\"\nInput: dict(the_str=\"No vars here\"), Output: \"[]\"\nInput: dict(the_str=\"This is a $variable\"), Output: \"['variabl']\"\nInput: dict(the_str=\"Multiple $vars here $and there\"), Output: \"['vars', 'and']\"\nInput: dict(the_str=\"A $var at the end\"), Output: \"['var']\"\nInput: dict(the_str=\"A $very long variable name\"), Output: \"['very']\"\nInput: dict(the_str=\"Multiple   $vars  here  $and  there\"), Output: \"['vars', 'and']\"\n\nWrite a function that generates the output from the input.\nFunction: func_find_var\n", "id": "6068ed5be481d423172e3a2456818b065d88e4e7_0"}
{"example_str": "examples = [\n    dict(cel=0),\n    dict(cel=100),\n    dict(cel=-20),\n    dict(cel=37.5),\n    dict(cel=212),\n    dict(cel=-40),\n    dict(cel=25),\n    dict(cel=50),\n    dict(cel=75),\n    dict(cel=-10),\n]\nexamples += [\n    dict(cel=0),       # Freezing point of water\n    dict(cel=100),     # Boiling point of water\n    dict(cel=-40),     # Temperature where Fahrenheit and Celsius are the same\n    dict(cel=37),      # Average human body temperature\n    dict(cel=25),      # Room temperature\n    dict(cel=-273.15), # Absolute zero (theoretically in Celsius)\n    dict(cel=10),      # Mildly cool day\n    dict(cel=-10),     # Cold day\n    dict(cel=50),      # Hot day\n    dict(cel=120)      # Extremely hot day\n]\nexamples += [\n    dict(cel=0),\n    dict(cel=100),\n    dict(cel=-40),\n    dict(cel=37),\n    dict(cel=25),\n    dict(cel=-10),\n    dict(cel=50),\n    dict(cel=15),\n    dict(cel=-5),\n    dict(cel=10)\n]", "code": "def farenh(cel):\n    return cel * (9 / 5) + 32\n", "func_name": "farenh", "exec_status": true, "example_inputs": ["\"{'cel': 0}\"", "\"{'cel': 100}\"", "\"{'cel': -20}\"", "\"{'cel': 37.5}\"", "\"{'cel': 212}\"", "\"{'cel': -40}\"", "\"{'cel': 25}\"", "\"{'cel': 50}\"", "\"{'cel': 75}\"", "\"{'cel': -10}\""], "example_outputs": [{"return": "\"32.0\""}, {"return": "\"212.0\""}, {"return": "\"-4.0\""}, {"return": "\"99.5\""}, {"return": "\"413.6\""}, {"return": "\"-40.0\""}, {"return": "\"77.0\""}, {"return": "\"122.0\""}, {"return": "\"167.0\""}, {"return": "\"14.0\""}, {"return": "\"32.0\""}, {"return": "\"212.0\""}, {"return": "\"-40.0\""}, {"return": "\"98.60000000000001\""}, {"return": "\"77.0\""}, {"return": "\"-459.66999999999996\""}, {"return": "\"50.0\""}, {"return": "\"14.0\""}, {"return": "\"122.0\""}, {"return": "\"248.0\""}, {"return": "\"32.0\""}, {"return": "\"212.0\""}, {"return": "\"-40.0\""}, {"return": "\"98.60000000000001\""}, {"return": "\"77.0\""}, {"return": "\"14.0\""}, {"return": "\"122.0\""}, {"return": "\"59.0\""}, {"return": "\"23.0\""}, {"return": "\"50.0\""}], "parsed_inputs": [[["cel", "0"]], [["cel", "100"]], [["cel", "-20"]], [["cel", "37.5"]], [["cel", "212"]], [["cel", "-40"]], [["cel", "25"]], [["cel", "50"]], [["cel", "75"]], [["cel", "-10"]]], "exec_code": "def farenh(cel):\n    return cel * (9 / 5) + 32\n", "output": "The function is:\n\n```python\ndef farenh(cel):\n    return cel * (9 / 5) + 32\n\n```", "choosed_example_idx": [8, 4, 6, 7, 5, 2, 3, 1, 9, 0], "prompt": "Function: farenh\n\nInput: dict(cel=75), Output: \"167.0\"\nInput: dict(cel=212), Output: \"413.6\"\nInput: dict(cel=25), Output: \"77.0\"\nInput: dict(cel=50), Output: \"122.0\"\nInput: dict(cel=-40), Output: \"-40.0\"\nInput: dict(cel=-20), Output: \"-4.0\"\nInput: dict(cel=37.5), Output: \"99.5\"\nInput: dict(cel=100), Output: \"212.0\"\nInput: dict(cel=-10), Output: \"14.0\"\nInput: dict(cel=0), Output: \"32.0\"\n\nWrite a function that generates the output from the input.\n\n", "id": "cfdc25c1f917c4b0e60d9ca217f832f28c129232_0"}
{"example_str": "examples = [\n    dict(s=\"madam\"),  # True\n    dict(s=\"hello\"),  # False\n    dict(s=\"a\"),  # True\n    dict(s=\"ab\"),  # False\n    dict(s=\"abcba\"),  # True\n    dict(s=\"abcdefg\"),  # False\n    dict(s=\"racecar\"),  # True\n    dict(s=\"radar\"),  # True\n    dict(s=\"level\"),  # True\n    dict(s=\"notapalindrome\"),  # False\n]\nexamples += [\n    dict(s=\"a\"),\n    dict(s=\"racecar\"),\n    dict(s=\"taco cat\"),\n    dict(s=\"madam\"),\n    dict(s=\"step on no pets\"),\n    dict(s=\"\"),\n    dict(s=\"1234321\"),\n    dict(s=\"no palindrome\"),\n    dict(s=\"A man a plan a canal Panama\"),\n    dict(s=\"Was it a car or a cat I saw\")\n]\nexamples += [\n    dict(s=\"tacocat\"),\n    dict(s=\"racecar\"),\n    dict(s=\"aabb\"),\n    dict(s=\"abc\"),\n    dict(s=\"carerac\"),\n    dict(s=\"\"),\n    dict(s=\"a\"),\n    dict(s=\"abba\"),\n    dict(s=\"112233\"),\n    dict(s=\"nope\")\n]", "code": "def canPermutePalindrome(s: str) ->bool:\n    charOcc = set()\n    for char in s:\n        if char in charOcc:\n            charOcc.remove(char)\n        else:\n            charOcc.add(char)\n    return len(charOcc) <= 1\n", "func_name": "canPermutePalindrome", "exec_status": true, "example_inputs": ["\"{'s': 'madam'}\"", "\"{'s': 'hello'}\"", "\"{'s': 'a'}\"", "\"{'s': 'ab'}\"", "\"{'s': 'abcba'}\"", "\"{'s': 'abcdefg'}\"", "\"{'s': 'racecar'}\"", "\"{'s': 'radar'}\"", "\"{'s': 'level'}\"", "\"{'s': 'notapalindrome'}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}], "parsed_inputs": [[["s", "\"madam\""]], [["s", "\"hello\""]], [["s", "\"a\""]], [["s", "\"ab\""]], [["s", "\"abcba\""]], [["s", "\"abcdefg\""]], [["s", "\"racecar\""]], [["s", "\"radar\""]], [["s", "\"level\""]], [["s", "\"notapalindrome\""]]], "exec_code": "def canPermutePalindrome(s: str) ->bool:\n    charOcc = set()\n    for char in s:\n        if char in charOcc:\n            charOcc.remove(char)\n        else:\n            charOcc.add(char)\n    return len(charOcc) <= 1\n", "output": "The function is:\n\n```python\ndef canPermutePalindrome(s: str) ->bool:\n    charOcc = set()\n    for char in s:\n        if char in charOcc:\n            charOcc.remove(char)\n        else:\n            charOcc.add(char)\n    return len(charOcc) <= 1\n\n```", "choosed_example_idx": [8, 7, 6, 1, 4, 2, 9], "prompt": "Write a function that generates the output from the input.\nInput: dict(s=\"level\"), Output: \"True\"\nInput: dict(s=\"radar\"), Output: \"True\"\nInput: dict(s=\"racecar\"), Output: \"True\"\nInput: dict(s=\"hello\"), Output: \"False\"\nInput: dict(s=\"abcba\"), Output: \"True\"\nInput: dict(s=\"a\"), Output: \"True\"\nInput: dict(s=\"notapalindrome\"), Output: \"False\"\n\nFunction: canPermutePalindrome\n", "id": "f887f607251b9124c0cc780ef1515ca705489f2f_0"}
{"example_str": "examples = [\n    dict(list=[]),\n    dict(list=[1]),\n    dict(list=[2, 3]),\n    dict(list=[4, 5, 6]),\n    dict(list=[7, 8, 9, 10]),\n    dict(list=[-1, -2, -3]),\n    dict(list=[-4, 5, -6]),\n    dict(list=[1.2, 2.3, 3.4]),\n    dict(list=[1, 2, 3, 4, 5]),\n    dict(list=[10, 20, 30, 40, 50]),\n]\nexamples += [\n    dict(list=[]),  # Example 1: Empty list\n    dict(list=[5]),  # Example 2: Single element list\n    dict(list=[1, 2, 3, 4]),  # Example 3: List of integers\n    dict(list=[1.5, 2.5, 3.5]),  # Example 4: List of floats\n    dict(list=[-1, 2, -3, 4]),  # Example 5: List with negative numbers\n    dict(list=[10, 0, 20]),  # Example 6: List containing zero\n    dict(list=[2, 2, 2, 2, 2]),  # Example 7: List with repeated elements\n    dict(list=[0.1, 10, 100]),  # Example 8: List with a small float and large integers\n    dict(list=[-2, -2, 2]),  # Example 9: List with negative numbers that cancel out\n    dict(list=[100, 200, 300, 400, 500])  # Example 10: List with large numbers\n]\nexamples += [\n    dict(list=[]),\n    dict(list=[1]),\n    dict(list=[2, 3]),\n    dict(list=[4, 5, 6]),\n    dict(list=[7, 8, 9, 10]),\n    dict(list=[10, -1]),\n    dict(list=[0.5, 2, 4]),\n    dict(list=[-1, -2, -3]),\n    dict(list=[100, 200]),\n    dict(list=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n]", "code": "def multiply(list):\n    \"\"\"\n    Order: O(n)\n    \"\"\"\n    if len(list) == 0:\n        return 0\n    elif len(list) == 1:\n        return list[0]\n    else:\n        return list[0] * multiply(list[1:])\n", "func_name": "multiply", "exec_status": true, "example_inputs": ["\"{'list': []}\"", "\"{'list': [1]}\"", "\"{'list': [2, 3]}\"", "\"{'list': [4, 5, 6]}\"", "\"{'list': [7, 8, 9, 10]}\"", "\"{'list': [-1, -2, -3]}\"", "\"{'list': [-4, 5, -6]}\"", "\"{'list': [1.2, 2.3, 3.4]}\"", "\"{'list': [1, 2, 3, 4, 5]}\"", "\"{'list': [10, 20, 30, 40, 50]}\""], "example_outputs": [{"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"6\""}, {"return": "\"120\""}, {"return": "\"5040\""}, {"return": "\"-6\""}, {"return": "\"120\""}, {"return": "\"9.383999999999999\""}, {"return": "\"120\""}, {"return": "\"12000000\""}, {"return": "\"0\""}, {"return": "\"5\""}, {"return": "\"24\""}, {"return": "\"13.125\""}, {"return": "\"24\""}, {"return": "\"0\""}, {"return": "\"32\""}, {"return": "\"100.0\""}, {"return": "\"8\""}, {"return": "\"1200000000000\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"6\""}, {"return": "\"120\""}, {"return": "\"5040\""}, {"return": "\"-10\""}, {"return": "\"4.0\""}, {"return": "\"-6\""}, {"return": "\"20000\""}, {"return": "\"3628800\""}], "parsed_inputs": [[["list", "[]"]], [["list", "[1]"]], [["list", "[2, 3]"]], [["list", "[4, 5, 6]"]], [["list", "[7, 8, 9, 10]"]], [["list", "[-1, -2, -3]"]], [["list", "[-4, 5, -6]"]], [["list", "[1.2, 2.3, 3.4]"]], [["list", "[1, 2, 3, 4, 5]"]], [["list", "[10, 20, 30, 40, 50]"]]], "exec_code": "def multiply(list):\n    \"\"\"\n    Order: O(n)\n    \"\"\"\n    if len(list) == 0:\n        return 0\n    elif len(list) == 1:\n        return list[0]\n    else:\n        return list[0] * multiply(list[1:])\n", "output": "The function is:\n\n```python\ndef multiply(list):\n    \"\"\"\n    Order: O(n)\n    \"\"\"\n    if len(list) == 0:\n        return 0\n    elif len(list) == 1:\n        return list[0]\n    else:\n        return list[0] * multiply(list[1:])\n\n```", "choosed_example_idx": [2, 7, 9, 3, 1, 6, 0, 5, 8], "prompt": "Input: dict(list=[2, 3]), Output: \"6\"\nInput: dict(list=[1.2, 2.3, 3.4]), Output: \"9.383999999999999\"\nInput: dict(list=[10, 20, 30, 40, 50]), Output: \"12000000\"\nInput: dict(list=[4, 5, 6]), Output: \"120\"\nInput: dict(list=[1]), Output: \"1\"\nInput: dict(list=[-4, 5, -6]), Output: \"120\"\nInput: dict(list=[]), Output: \"0\"\nInput: dict(list=[-1, -2, -3]), Output: \"-6\"\nInput: dict(list=[1, 2, 3, 4, 5]), Output: \"120\"\n\n\nWrite a function that generates the output from the input.\nFunction: multiply\n", "id": "d3aa24eb57d57e81004ba216f1a519366d453ac5_0"}
{"example_str": "examples = [\n    dict(lib='example.dll'),\n    dict(lib='example.pdb'),\n    dict(lib='example.dylib'),\n    dict(lib='example.so'),\n    dict(lib='example.bundle'),\n    dict(lib='example.framework'),\n    dict(lib='example.aar'),\n    dict(lib='example.exe'),\n    dict(lib='example.lib'),\n    dict(lib='example.txt'),\n]\nexamples += [\n    dict(lib=\"example.dll\"),  # Windows dynamic library\n    dict(lib=\"test.dylib\"),  # macOS dynamic library\n    dict(lib=\"libexample.so\"),  # Unix/Linux shared object\n    dict(lib=\"module.bundle\"),  # macOS bundle\n    dict(lib=\"framework.framework\"),  # macOS framework\n    dict(lib=\"android_library.aar\"),  # Android archive file\n    dict(lib=\"data.pdb\"),  # Program Database file\n    dict(lib=\"library.DLL\"),  # Case-insensitive match for Windows dynamic library\n    dict(lib=\"notalibrary.txt\"),  # Not a dynamic library\n    dict(lib=\"lib.so.1\")  # Versioned shared object\n]\nexamples += [\n    dict(lib='library.dll'),\n    dict(lib='module.so'),\n    dict(lib='plugin.dylib'),\n    dict(lib='extension.framework'),\n    dict(lib='archive.aar'),\n    dict(lib='file.pdb'),\n    dict(lib='bundle.bundle'),\n    dict(lib='notalibrary.txt'),\n    dict(lib='randomfile.exe'),\n    dict(lib='anotherlib.DLL'),  # Testing case sensitivity\n]", "code": "def _is_a_dynamic_library(lib):\n    return lib.endswith('.dll') or lib.endswith('.pdb') or lib.endswith(\n        '.dylib') or lib.endswith('.so') or lib.endswith('.bundle'\n        ) or lib.endswith('.framework') or lib.endswith('.aar')\n", "func_name": "_is_a_dynamic_library", "exec_status": true, "example_inputs": ["\"{'lib': 'example.dll'}\"", "\"{'lib': 'example.pdb'}\"", "\"{'lib': 'example.dylib'}\"", "\"{'lib': 'example.so'}\"", "\"{'lib': 'example.bundle'}\"", "\"{'lib': 'example.framework'}\"", "\"{'lib': 'example.aar'}\"", "\"{'lib': 'example.exe'}\"", "\"{'lib': 'example.lib'}\"", "\"{'lib': 'example.txt'}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}], "parsed_inputs": [[["lib", "\"example.dll\""]], [["lib", "\"example.pdb\""]], [["lib", "\"example.dylib\""]], [["lib", "\"example.so\""]], [["lib", "\"example.bundle\""]], [["lib", "\"example.framework\""]], [["lib", "\"example.aar\""]], [["lib", "\"example.exe\""]], [["lib", "\"example.lib\""]], [["lib", "\"example.txt\""]]], "exec_code": "def _is_a_dynamic_library(lib):\n    return lib.endswith('.dll') or lib.endswith('.pdb') or lib.endswith(\n        '.dylib') or lib.endswith('.so') or lib.endswith('.bundle'\n        ) or lib.endswith('.framework') or lib.endswith('.aar')\n", "output": "The function is:\n\n```python\ndef _is_a_dynamic_library(lib):\n    return lib.endswith('.dll') or lib.endswith('.pdb') or lib.endswith(\n        '.dylib') or lib.endswith('.so') or lib.endswith('.bundle'\n        ) or lib.endswith('.framework') or lib.endswith('.aar')\n\n```", "choosed_example_idx": [2, 7, 6, 4, 9, 1], "prompt": "Function: _is_a_dynamic_library\n\n\nInput: dict(lib=\"example.dylib\"), Output: \"True\"\nInput: dict(lib=\"example.exe\"), Output: \"False\"\nInput: dict(lib=\"example.aar\"), Output: \"True\"\nInput: dict(lib=\"example.bundle\"), Output: \"True\"\nInput: dict(lib=\"example.txt\"), Output: \"False\"\nInput: dict(lib=\"example.pdb\"), Output: \"True\"\n\nWrite a function that generates the output from the input.\n", "id": "3c752851876b3a07cd6a48e98b2130e329d955bb_0"}
{"example_str": "examples = [\n    dict(document=\"This is a sample document\", stopwords=[\"is\", \"a\"]),\n    dict(document=\"Hello world, this is Python\", stopwords=[\"this\", \"is\"]),\n    dict(document=\"Machine learning is fun\", stopwords=[\"is\", \"fun\"]),\n    dict(document=\"Natural language processing is cool\", stopwords=[\"is\", \"cool\"]),\n    dict(document=\"I love Python programming\", stopwords=[\"I\", \"love\"]),\n    dict(document=\"This is a test document\", stopwords=[\"this\", \"is\", \"a\"]),\n    dict(document=\"Data science is my passion\", stopwords=[\"is\", \"my\"]),\n    dict(document=\"I am a data scientist\", stopwords=[\"I\", \"am\", \"a\"]),\n    dict(document=\"Python is a popular language\", stopwords=[\"is\", \"a\"]),\n    dict(document=\"This document is for testing\", stopwords=[\"this\", \"is\", \"for\"]),\n]\nexamples += [\n    dict(document=\"Hello world\", stopwords={\"Hello\"}),\n    dict(document=\"This is a test\", stopwords={\"is\", \"a\"}),\n    dict(document=\"Python programming is fun\", stopwords={\"is\"}),\n    dict(document=\"The quick brown fox\", stopwords={\"The\"}),\n    dict(document=\"Lorem ipsum dolor sit amet\", stopwords={\"sit\", \"amet\"}),\n    dict(document=\"Keep calm and carry on\", stopwords={\"and\"}),\n    dict(document=\"To be or not to be\", stopwords={\"to\", \"be\"}),\n    dict(document=\"She sells sea shells on the sea shore\", stopwords={\"on\", \"the\"}),\n    dict(document=\"A journey of a thousand miles begins with a single step\", stopwords={\"a\", \"of\"}),\n    dict(document=\"Early to bed and early to rise\", stopwords={\"to\", \"and\"})\n]\nexamples += [\n    dict(document=\"Hello world\", stopwords=[\"world\"]),\n    dict(document=\"Quick brown fox jumps over the lazy dog\", stopwords=[\"the\", \"over\"]),\n    dict(document=\"Python is a great programming language\", stopwords=[\"is\", \"a\"]),\n    dict(document=\"Keep calm and code on\", stopwords=[\"and\"]),\n    dict(document=\"Data science and machine learning\", stopwords=[\"and\"]),\n    dict(document=\"The quick brown fox\", stopwords=[\"The\"]),\n    dict(document=\"Lorem ipsum dolor sit amet\", stopwords=[\"sit\", \"amet\"]),\n    dict(document=\"Artificial intelligence and deep learning\", stopwords=[\"and\"]),\n    dict(document=\"Explore the universe\", stopwords=[\"the\"]),\n    dict(document=\"New innovations in technology\", stopwords=[\"in\"]),\n]", "code": "def strip_stopwords(document, stopwords):\n    \"\"\"\n    Strips stopwords\n    \"\"\"\n    return ' '.join([w for w in document.split(' ') if not w in stopwords])\n", "func_name": "strip_stopwords", "exec_status": true, "example_inputs": ["\"{'document': 'This is a sample document', 'stopwords': ['is', 'a']}\"", "\"{'document': 'Hello world, this is Python', 'stopwords': ['this', 'is']}\"", "\"{'document': 'Machine learning is fun', 'stopwords': ['is', 'fun']}\"", "\"{'document': 'Natural language processing is cool', 'stopwords': ['is', 'cool']}\"", "\"{'document': 'I love Python programming', 'stopwords': ['I', 'love']}\"", "\"{'document': 'This is a test document', 'stopwords': ['this', 'is', 'a']}\"", "\"{'document': 'Data science is my passion', 'stopwords': ['is', 'my']}\"", "\"{'document': 'I am a data scientist', 'stopwords': ['I', 'am', 'a']}\"", "\"{'document': 'Python is a popular language', 'stopwords': ['is', 'a']}\"", "\"{'document': 'This document is for testing', 'stopwords': ['this', 'is', 'for']}\""], "example_outputs": [{"return": "\"'This sample document'\""}, {"return": "\"'Hello world, Python'\""}, {"return": "\"'Machine learning'\""}, {"return": "\"'Natural language processing'\""}, {"return": "\"'Python programming'\""}, {"return": "\"'This test document'\""}, {"return": "\"'Data science passion'\""}, {"return": "\"'data scientist'\""}, {"return": "\"'Python popular language'\""}, {"return": "\"'This document testing'\""}, {"return": "\"'world'\""}, {"return": "\"'This test'\""}, {"return": "\"'Python programming fun'\""}, {"return": "\"'quick brown fox'\""}, {"return": "\"'Lorem ipsum dolor'\""}, {"return": "\"'Keep calm carry on'\""}, {"return": "\"'To or not'\""}, {"return": "\"'She sells sea shells sea shore'\""}, {"return": "\"'A journey thousand miles begins with single step'\""}, {"return": "\"'Early bed early rise'\""}, {"return": "\"'Hello'\""}, {"return": "\"'Quick brown fox jumps lazy dog'\""}, {"return": "\"'Python great programming language'\""}, {"return": "\"'Keep calm code on'\""}, {"return": "\"'Data science machine learning'\""}, {"return": "\"'quick brown fox'\""}, {"return": "\"'Lorem ipsum dolor'\""}, {"return": "\"'Artificial intelligence deep learning'\""}, {"return": "\"'Explore universe'\""}, {"return": "\"'New innovations technology'\""}], "parsed_inputs": [[["document", "\"This is a sample document\""], ["stopwords", "['is', 'a']"]], [["document", "\"Hello world, this is Python\""], ["stopwords", "['this', 'is']"]], [["document", "\"Machine learning is fun\""], ["stopwords", "['is', 'fun']"]], [["document", "\"Natural language processing is cool\""], ["stopwords", "['is', 'cool']"]], [["document", "\"I love Python programming\""], ["stopwords", "['I', 'love']"]], [["document", "\"This is a test document\""], ["stopwords", "['this', 'is', 'a']"]], [["document", "\"Data science is my passion\""], ["stopwords", "['is', 'my']"]], [["document", "\"I am a data scientist\""], ["stopwords", "['I', 'am', 'a']"]], [["document", "\"Python is a popular language\""], ["stopwords", "['is', 'a']"]], [["document", "\"This document is for testing\""], ["stopwords", "['this', 'is', 'for']"]]], "exec_code": "def strip_stopwords(document, stopwords):\n    \"\"\"\n    Strips stopwords\n    \"\"\"\n    return ' '.join([w for w in document.split(' ') if not w in stopwords])\n", "output": "The function is:\n\n```python\ndef strip_stopwords(document, stopwords):\n    \"\"\"\n    Strips stopwords\n    \"\"\"\n    return ' '.join([w for w in document.split(' ') if not w in stopwords])\n\n```", "choosed_example_idx": [5, 4, 7, 8, 1, 6, 3, 2, 9], "prompt": "Function: strip_stopwords\nInput: dict(document=\"This is a test document\", stopwords=['this', 'is', 'a']), Output: \"'This test document'\"\nInput: dict(document=\"I love Python programming\", stopwords=['I', 'love']), Output: \"'Python programming'\"\nInput: dict(document=\"I am a data scientist\", stopwords=['I', 'am', 'a']), Output: \"'data scientist'\"\nInput: dict(document=\"Python is a popular language\", stopwords=['is', 'a']), Output: \"'Python popular language'\"\nInput: dict(document=\"Hello world, this is Python\", stopwords=['this', 'is']), Output: \"'Hello world, Python'\"\nInput: dict(document=\"Data science is my passion\", stopwords=['is', 'my']), Output: \"'Data science passion'\"\nInput: dict(document=\"Natural language processing is cool\", stopwords=['is', 'cool']), Output: \"'Natural language processing'\"\nInput: dict(document=\"Machine learning is fun\", stopwords=['is', 'fun']), Output: \"'Machine learning'\"\nInput: dict(document=\"This document is for testing\", stopwords=['this', 'is', 'for']), Output: \"'This document testing'\"\n\nWrite a function that generates the output from the input.\n", "id": "d401fd2ace8345741dd1e4b31a05fa10e09959ea_0"}
{"example_str": "examples = [\n    dict(a=[64, 34, 25, 12, 22, 11, 90]),\n    dict(a=[1, 2, 3, 4, 5]),\n    dict(a=[5, 4, 3, 2, 1]),\n    dict(a=[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]),\n    dict(a=[1]),\n    dict(a=[]),\n    dict(a=[-5, -3, -1, 0, 1, 3, 5]),\n    dict(a=[100, 50, 20, 10, 5, 2, 1]),\n    dict(a=[1, 1, 1, 1, 1]),\n    dict(a=[10, 20, 30, 40, 50]),\n    dict(a=[50, 40, 30, 20, 10]),\n]\nexamples += [\n    dict(a=[34, 21, 10, 56, 45]),  # mixed numbers\n    dict(a=[-1, -3, -2, -5, -4]),  # negative numbers\n    dict(a=[5, 4, 3, 2, 1]),       # reverse order\n    dict(a=[1, 2, 3, 4, 5]),       # already sorted\n    dict(a=[]),                    # empty list\n    dict(a=[1]),                   # single element\n    dict(a=[100, 1, 50, 25, 75]),  # mixed range numbers\n    dict(a=[1.1, 1.2, 1.0, 1.3]),  # floating point numbers\n    dict(a=[0, 0, 0, 0]),          # all elements the same\n    dict(a=[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0])  # longer reverse order\n]\nexamples += [\n    dict(a=[3, 2, 1]),\n    dict(a=[5, 4, 3, 2, 1]),\n    dict(a=[1, 2, 3, 4, 5]),\n    dict(a=[10, 9, 8, 7, 6]),\n    dict(a=[2, 3, 1, 5, 4]),\n    dict(a=[100, 50, 20, 80, 60]),\n    dict(a=[-1, -3, -2, 0, 1]),\n    dict(a=[1]),\n    dict(a=[]),\n    dict(a=[1, 1, 1, 1])\n]", "code": "def bubblesort(a: list) ->list:\n    for i in range(0, len(a) - 1):\n        for j in range(0, len(a) - i - 1):\n            if a[j] > a[j + 1]:\n                a[j], a[j + 1] = a[j + 1], a[j]\n    return a\n", "func_name": "bubblesort", "exec_status": true, "example_inputs": ["\"{'a': [64, 34, 25, 12, 22, 11, 90]}\"", "\"{'a': [1, 2, 3, 4, 5]}\"", "\"{'a': [5, 4, 3, 2, 1]}\"", "\"{'a': [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]}\"", "\"{'a': [1]}\"", "\"{'a': []}\"", "\"{'a': [-5, -3, -1, 0, 1, 3, 5]}\"", "\"{'a': [100, 50, 20, 10, 5, 2, 1]}\"", "\"{'a': [1, 1, 1, 1, 1]}\"", "\"{'a': [10, 20, 30, 40, 50]}\"", "\"{'a': [50, 40, 30, 20, 10]}\""], "example_outputs": [{"return": "\"[11, 12, 22, 25, 34, 64, 90]\""}, {"return": "\"[1, 2, 3, 4, 5]\""}, {"return": "\"[1, 2, 3, 4, 5]\""}, {"return": "\"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\""}, {"return": "\"[1]\""}, {"return": "\"[]\""}, {"return": "\"[-5, -3, -1, 0, 1, 3, 5]\""}, {"return": "\"[1, 2, 5, 10, 20, 50, 100]\""}, {"return": "\"[1, 1, 1, 1, 1]\""}, {"return": "\"[10, 20, 30, 40, 50]\""}, {"return": "\"[10, 20, 30, 40, 50]\""}, {"return": "\"[10, 21, 34, 45, 56]\""}, {"return": "\"[-5, -4, -3, -2, -1]\""}, {"return": "\"[1, 2, 3, 4, 5]\""}, {"return": "\"[1, 2, 3, 4, 5]\""}, {"return": "\"[]\""}, {"return": "\"[1]\""}, {"return": "\"[1, 25, 50, 75, 100]\""}, {"return": "\"[1.0, 1.1, 1.2, 1.3]\""}, {"return": "\"[0, 0, 0, 0]\""}, {"return": "\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[1, 2, 3, 4, 5]\""}, {"return": "\"[1, 2, 3, 4, 5]\""}, {"return": "\"[6, 7, 8, 9, 10]\""}, {"return": "\"[1, 2, 3, 4, 5]\""}, {"return": "\"[20, 50, 60, 80, 100]\""}, {"return": "\"[-3, -2, -1, 0, 1]\""}, {"return": "\"[1]\""}, {"return": "\"[]\""}, {"return": "\"[1, 1, 1, 1]\""}], "parsed_inputs": [[["a", "[64, 34, 25, 12, 22, 11, 90]"]], [["a", "[1, 2, 3, 4, 5]"]], [["a", "[5, 4, 3, 2, 1]"]], [["a", "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"]], [["a", "[1]"]], [["a", "[]"]], [["a", "[-5, -3, -1, 0, 1, 3, 5]"]], [["a", "[100, 50, 20, 10, 5, 2, 1]"]], [["a", "[1, 1, 1, 1, 1]"]], [["a", "[10, 20, 30, 40, 50]"]], [["a", "[50, 40, 30, 20, 10]"]]], "exec_code": "def bubblesort(a: list) ->list:\n    for i in range(0, len(a) - 1):\n        for j in range(0, len(a) - i - 1):\n            if a[j] > a[j + 1]:\n                a[j], a[j + 1] = a[j + 1], a[j]\n    return a\n", "output": "The function is:\n\n```python\ndef bubblesort(a: list) ->list:\n    for i in range(0, len(a) - 1):\n        for j in range(0, len(a) - i - 1):\n            if a[j] > a[j + 1]:\n                a[j], a[j + 1] = a[j + 1], a[j]\n    return a\n\n```", "choosed_example_idx": [8, 1, 7, 5, 4, 3, 10, 0], "prompt": "Write a function that generates the output from the input.\n\nInput: dict(a=[1, 1, 1, 1, 1]), Output: \"[1, 1, 1, 1, 1]\"\nInput: dict(a=[1, 2, 3, 4, 5]), Output: \"[1, 2, 3, 4, 5]\"\nInput: dict(a=[100, 50, 20, 10, 5, 2, 1]), Output: \"[1, 2, 5, 10, 20, 50, 100]\"\nInput: dict(a=[]), Output: \"[]\"\nInput: dict(a=[1]), Output: \"[1]\"\nInput: dict(a=[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]), Output: \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\nInput: dict(a=[50, 40, 30, 20, 10]), Output: \"[10, 20, 30, 40, 50]\"\nInput: dict(a=[64, 34, 25, 12, 22, 11, 90]), Output: \"[11, 12, 22, 25, 34, 64, 90]\"\n\nFunction: bubblesort\n", "id": "a8ce555e48c293db693cb47f017f8cbbacaf963b_0"}
{"example_str": "examples = [\n    dict(root=None),\n    dict(root=dict(children=0)),\n    dict(root=dict(children=1)),\n    dict(root=dict(children=5)),\n    dict(root=dict(children=[])),\n    dict(root=dict(children=[1, 2, 3])),\n    dict(root=dict(children={'a': 1, 'b': 2})),\n    dict(root=dict(children='hello')),\n    dict(root=dict(children=True)),\n    dict(root=dict(children=False)),\n]\nfrom types import SimpleNamespace\n\nexamples += [\n    dict(root=None),  # Example 1: root is None\n    dict(root=SimpleNamespace(children=0)),  # Example 2: root has 0 children\n    dict(root=SimpleNamespace(children=1)),  # Example 3: root has 1 child\n    dict(root=SimpleNamespace(children=2)),  # Example 4: root has 2 children\n    dict(root=SimpleNamespace(children=5)),  # Example 5: root has 5 children\n    dict(root=SimpleNamespace(children=10)),  # Example 6: root has 10 children\n    dict(root=SimpleNamespace(children=20)),  # Example 7: root has 20 children\n    dict(root=SimpleNamespace(children=50)),  # Example 8: root has 50 children\n    dict(root=SimpleNamespace(children=100)),  # Example 9: root has 100 children\n    dict(root=SimpleNamespace(children=200))   # Example 10: root has 200 children\n]\nclass Node:\n    def __init__(self, children):\n        self.children = children\n\nexamples += [\n    dict(root=Node(children=0)),\n    dict(root=Node(children=1)),\n    dict(root=Node(children=2)),\n    dict(root=Node(children=3)),\n    dict(root=Node(children=4)),\n    dict(root=Node(children=5)),\n    dict(root=Node(children=6)),\n    dict(root=Node(children=7)),\n    dict(root=Node(children=8)),\n    dict(root=Node(children=9)),\n    dict(root=None)\n]", "code": "def children(root):\n    if root == None:\n        return 0\n    return root.children + 1\n", "func_name": "children", "exec_status": true, "example_inputs": ["\"{'root': None}\"", "\"{'root': {'children': 0}}\"", "\"{'root': {'children': 1}}\"", "\"{'root': {'children': 5}}\"", "\"{'root': {'children': []}}\"", "\"{'root': {'children': [1, 2, 3]}}\"", "\"{'root': {'children': {'a': 1, 'b': 2}}}\"", "\"{'root': {'children': 'hello'}}\"", "\"{'root': {'children': True}}\"", "\"{'root': {'children': False}}\""], "example_outputs": [{"return": "\"0\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'children'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'children'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'children'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'children'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'children'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'children'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'children'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'children'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'children'\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"6\""}, {"return": "\"11\""}, {"return": "\"21\""}, {"return": "\"51\""}, {"return": "\"101\""}, {"return": "\"201\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"4\""}, {"return": "\"5\""}, {"return": "\"6\""}, {"return": "\"7\""}, {"return": "\"8\""}, {"return": "\"9\""}, {"return": "\"10\""}, {"return": "\"0\""}], "parsed_inputs": [[["root", "None"]], [["root", "dict(children=0)"]], [["root", "dict(children=1)"]], [["root", "dict(children=5)"]], [["root", "dict(children=[])"]], [["root", "dict(children=[1, 2, 3])"]], [["root", "dict(children={'a': 1, 'b': 2})"]], [["root", "dict(children='hello')"]], [["root", "dict(children=True)"]], [["root", "dict(children=False)"]]], "exec_code": "def children(root):\n    if root == None:\n        return 0\n    return root.children + 1\n", "output": "The function is:\n\n```python\ndef children(root):\n    if root == None:\n        return 0\n    return root.children + 1\n\n```", "choosed_example_idx": [5, 4, 7, 0, 3, 2, 9, 6, 8, 1], "prompt": "Input: dict(root=dict(children=[1, 2, 3])), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'children'\"\nInput: dict(root=dict(children=[])), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'children'\"\nInput: dict(root=dict(children='hello')), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'children'\"\nInput: dict(root=None), Output: \"0\"\nInput: dict(root=dict(children=5)), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'children'\"\nInput: dict(root=dict(children=1)), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'children'\"\nInput: dict(root=dict(children=False)), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'children'\"\nInput: dict(root=dict(children={'a': 1, 'b': 2})), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'children'\"\nInput: dict(root=dict(children=True)), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'children'\"\nInput: dict(root=dict(children=0)), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'children'\"\n\nFunction: children\n\nWrite a function that generates the output from the input.\n\n\n", "id": "a8aa6c9bb54a98c1584a229a375bf472dbb4961c_0"}
{"example_str": "examples = [\n    dict(arr=[1, 2, 3, 4, 5]),\n    dict(arr=[\"a\", \"b\", \"c\", \"d\"]),\n    dict(arr=[True, False, True, False]),\n    dict(arr=[1.1, 2.2, 3.3, 4.4]),\n    dict(arr=[\"hello\", \"world\", \"python\", \"programming\"]),\n    dict(arr=[1, \"a\", True, 2.2]),\n    dict(arr=[]),\n    dict(arr=[1]),\n    dict(arr=[1, 2]),\n    dict(arr=[\"a\", \"b\", \"c\"]),\n    dict(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),\n]\nexamples += [\n    dict(arr=[]),  # Empty list\n    dict(arr=[1]),  # Single element\n    dict(arr=[1, 2]),  # Two elements\n    dict(arr=[1, 2, 3]),  # Three elements\n    dict(arr=[1, 2, 3, 4]),  # Four elements\n    dict(arr=[5, 4, 3, 2, 1]),  # Reverse order\n    dict(arr=['a', 'b', 'c']),  # List of strings\n    dict(arr=[True, False, True]),  # List of booleans\n    dict(arr=[[1, 2], [3, 4]]),  # List of lists\n    dict(arr=[None, 'None', 'none']),  # Mixed types\n]", "code": "def reverseArray(arr):\n    for outLoop in arr:\n        for inLoop in arr:\n            if arr == arr.empty:\n                print('Array reversed')\n                return newArray\n            elif arr != arr.empty:\n                oldItem = arr[0]\n                minusLast = arr.split[0]\n                newArray.extend(oldItem)\n", "func_name": "reverseArray", "exec_status": true, "example_inputs": ["\"{'arr': [1, 2, 3, 4, 5]}\"", "\"{'arr': ['a', 'b', 'c', 'd']}\"", "\"{'arr': [True, False, True, False]}\"", "\"{'arr': [1.1, 2.2, 3.3, 4.4]}\"", "\"{'arr': ['hello', 'world', 'python', 'programming']}\"", "\"{'arr': [1, 'a', True, 2.2]}\"", "\"{'arr': []}\"", "\"{'arr': [1]}\"", "\"{'arr': [1, 2]}\"", "\"{'arr': ['a', 'b', 'c']}\"", "\"{'arr': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}\""], "example_outputs": [{"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'list' object has no attribute 'empty'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'list' object has no attribute 'empty'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'list' object has no attribute 'empty'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'list' object has no attribute 'empty'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'list' object has no attribute 'empty'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'list' object has no attribute 'empty'\""}, {"return": "\"None\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'list' object has no attribute 'empty'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'list' object has no attribute 'empty'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'list' object has no attribute 'empty'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'list' object has no attribute 'empty'\""}, {"return": "\"None\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'list' object has no attribute 'empty'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'list' object has no attribute 'empty'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'list' object has no attribute 'empty'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'list' object has no attribute 'empty'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'list' object has no attribute 'empty'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'list' object has no attribute 'empty'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'list' object has no attribute 'empty'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'list' object has no attribute 'empty'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'list' object has no attribute 'empty'\""}], "parsed_inputs": [[["arr", "[1, 2, 3, 4, 5]"]], [["arr", "['a', 'b', 'c', 'd']"]], [["arr", "[True, False, True, False]"]], [["arr", "[1.1, 2.2, 3.3, 4.4]"]], [["arr", "['hello', 'world', 'python', 'programming']"]], [["arr", "[1, 'a', True, 2.2]"]], [["arr", "[]"]], [["arr", "[1]"]], [["arr", "[1, 2]"]], [["arr", "['a', 'b', 'c']"]], [["arr", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"]]], "exec_code": "def reverseArray(arr):\n    for outLoop in arr:\n        for inLoop in arr:\n            if arr == arr.empty:\n                print('Array reversed')\n                return newArray\n            elif arr != arr.empty:\n                oldItem = arr[0]\n                minusLast = arr.split[0]\n                newArray.extend(oldItem)\n", "output": "The function is:\n\n```python\ndef reverseArray(arr):\n    for outLoop in arr:\n        for inLoop in arr:\n            if arr == arr.empty:\n                print('Array reversed')\n                return newArray\n            elif arr != arr.empty:\n                oldItem = arr[0]\n                minusLast = arr.split[0]\n                newArray.extend(oldItem)\n\n```", "choosed_example_idx": [7, 10, 6, 8, 5, 2], "prompt": "Input: dict(arr=[1]), Output: \"<class 'AttributeError'>: 'list' object has no attribute 'empty'\"\nInput: dict(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), Output: \"<class 'AttributeError'>: 'list' object has no attribute 'empty'\"\nInput: dict(arr=[]), Output: \"None\"\nInput: dict(arr=[1, 2]), Output: \"<class 'AttributeError'>: 'list' object has no attribute 'empty'\"\nInput: dict(arr=[1, 'a', True, 2.2]), Output: \"<class 'AttributeError'>: 'list' object has no attribute 'empty'\"\nInput: dict(arr=[True, False, True, False]), Output: \"<class 'AttributeError'>: 'list' object has no attribute 'empty'\"\n\nFunction: reverseArray\nWrite a function that generates the output from the input.\n\n", "id": "62f76afb8f9575b65e6cb14c5617330c652236e6_0"}
{"example_str": "examples = [\n    dict(record=['container1', '2022-01-01 00:00:00', 'product1', 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]),\n    dict(record=['container2', '2022-01-01 00:01:00', 'product2', 21, 31, 41, 51, 61, 71, 81, 91, 101, 111, 121, 131, 141, 151]),\n    dict(record=['container3', '2022-01-01 00:02:00', 'product3', 22, 32, 42, 52, 62, 72, 82, 92, 102, 112, 122, 132, 142, 152]),\n    dict(record=['container4', '2022-01-01 00:03:00', 'product4', 23, 33, 43, 53, 63, 73, 83, 93, 103, 113, 123, 133, 143, 153]),\n    dict(record=['container5', '2022-01-01 00:04:00', 'product5', 24, 34, 44, 54, 64, 74, 84, 94, 104, 114, 124, 134, 144, 154]),\n    dict(record=['container6', '2022-01-01 00:05:00', 'product6', 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155]),\n    dict(record=['container7', '2022-01-01 00:06:00', 'product7', 26, 36, 46, 56, 66, 76, 86, 96, 106, 116, 126, 136, 146, 156]),\n    dict(record=['container8', '2022-01-01 00:07:00', 'product8', 27, 37, 47, 57, 67, 77, 87, 97, 107, 117, 127, 137, 147, 157]),\n    dict(record=['container9', '2022-01-01 00:08:00', 'product9', 28, 38, 48, 58, 68, 78, 88, 98, 108, 118, 128, 138, 148, 158]),\n    dict(record=['container10', '2022-01-01 00:09:00', 'product10', 29, 39, 49, 59, 69, 79, 89, 99, 109, 119, 129, 139, 149, 159]),\n]\nexamples += [\n    dict(record=[\"C123\", \"2023-01-01 12:00:00\", \"P001\", 22.5, 20.0, 25.0, 1.5, 120, 1, 0, 78.5, 50.0, 0.04, \"on\", \"off\", \"on\"]),\n    dict(record=[\"C124\", \"2023-01-02 13:00:00\", \"P002\", 21.0, 19.0, 24.0, 1.2, 100, 2, 1, 79.0, 51.0, 0.05, \"off\", \"on\", \"off\"]),\n    dict(record=[\"C125\", \"2023-01-03 14:00:00\", \"P003\", 23.0, 21.0, 26.0, 1.8, 110, 3, 2, 77.0, 52.0, 0.03, \"on\", \"off\", \"on\"]),\n    dict(record=[\"C126\", \"2023-01-04 15:00:00\", \"P004\", 20.0, 18.0, 23.0, 1.0, 90, 4, 3, 76.0, 53.0, 0.02, \"off\", \"on\", \"off\"]),\n    dict(record=[\"C127\", \"2023-01-05 16:00:00\", \"P005\", 24.0, 22.0, 27.0, 2.0, 130, 5, 4, 75.0, 54.0, 0.06, \"on\", \"off\", \"on\"]),\n    dict(record=[\"C128\", \"2023-01-06 17:00:00\", \"P006\", 25.0, 23.0, 28.0, 2.2, 140, 6, 5, 74.0, 55.0, 0.07, \"off\", \"on\", \"off\"]),\n    dict(record=[\"C129\", \"2023-01-07 18:00:00\", \"P007\", 26.0, 24.0, 29.0, 2.4, 150, 7, 6, 73.0, 56.0, 0.08, \"on\", \"off\", \"on\"]),\n    dict(record=[\"C130\", \"2023-01-08 19:00:00\", \"P008\", 27.0, 25.0, 30.0, 2.6, 160, 8, 7, 72.0, 57.0, 0.09, \"off\", \"on\", \"off\"]),\n    dict(record=[\"C131\", \"2023-01-09 20:00:00\", \"P009\", 28.0, 26.0, 31.0, 2.8, 170, 9, 8, 71.0, 58.0, 0.10, \"on\", \"off\", \"on\"]),\n    dict(record=[\"C132\", \"2023-01-10 21:00:00\", \"P010\", 29.0, 27.0, 32.0, 3.0, 180, 10, 9, 70.0, 59.0, 0.11, \"off\", \"on\", \"off\"])\n]\nexamples += [\n    dict(record=('C001', '2023-01-01T12:00:00', 'P001', 20, 5, 15, 1.5, 30, 1, 0, 40, 50, 60, 1, 0, 1)),\n    dict(record=('C002', '2023-01-02T13:00:00', 'P002', 21, 6, 16, 1.6, 31, 2, 1, 41, 51, 61, 0, 1, 0)),\n    dict(record=('C003', '2023-01-03T14:00:00', 'P003', 22, 7, 17, 1.7, 32, 3, 2, 42, 52, 62, 1, 1, 1)),\n    dict(record=('C004', '2023-01-04T15:00:00', 'P004', 23, 8, 18, 1.8, 33, 4, 3, 43, 53, 63, 0, 0, 0)),\n    dict(record=('C005', '2023-01-05T16:00:00', 'P005', 24, 9, 19, 1.9, 34, 5, 4, 44, 54, 64, 1, 0, 1)),\n    dict(record=('C006', '2023-01-06T17:00:00', 'P006', 25, 10, 20, 2.0, 35, 6, 5, 45, 55, 65, 0, 1, 0)),\n    dict(record=('C007', '2023-01-07T18:00:00', 'P007', 26, 11, 21, 2.1, 36, 7, 6, 46, 56, 66, 1, 1, 1)),\n    dict(record=('C008', '2023-01-08T19:00:00', 'P008', 27, 12, 22, 2.2, 37, 8, 7, 47, 57, 67, 0, 0, 0)),\n    dict(record=('C009', '2023-01-09T20:00:00', 'P009', 28, 13, 23, 2.3, 38, 9, 8, 48, 58, 68, 1, 0, 1)),\n    dict(record=('C010', '2023-01-10T21:00:00', 'P010', 29, 14, 24, 2.4, 39, 10, 9, 49, 59, 69, 0, 1, 0))\n]", "code": "def toJson(record):\n    t = {}\n    sensors = {}\n    t['containerID'] = record[0]\n    t['measurement_time'] = record[1]\n    t['product_id'] = record[2]\n    t['target_temperature'] = record[4]\n    t['kilowatts'] = record[6]\n    t['time_door_open'] = int(record[7])\n    t['content_type'] = int(record[8])\n    t['defrost_cycle'] = int(record[9])\n    sensors['temperature'] = record[3]\n    sensors['ambiant_temperature'] = record[5]\n    sensors['oxygen_level'] = record[9]\n    sensors['nitrogen_level'] = record[10]\n    sensors['humidity_level'] = record[10]\n    sensors['carbon_dioxide_level'] = record[12]\n    sensors['fan_1'] = record[13]\n    sensors['fan_2'] = record[14]\n    sensors['fan_3'] = record[15]\n    t['sensors'] = sensors\n    t['latitude'] = '37.8226902168957'\n    t['longitude'] = '-122.3248956640928'\n    return t\n", "func_name": "toJson", "exec_status": true, "example_inputs": ["\"{'record': ['container1', '2022-01-01 00:00:00', 'product1', 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]}\"", "\"{'record': ['container2', '2022-01-01 00:01:00', 'product2', 21, 31, 41, 51, 61, 71, 81, 91, 101, 111, 121, 131, 141, 151]}\"", "\"{'record': ['container3', '2022-01-01 00:02:00', 'product3', 22, 32, 42, 52, 62, 72, 82, 92, 102, 112, 122, 132, 142, 152]}\"", "\"{'record': ['container4', '2022-01-01 00:03:00', 'product4', 23, 33, 43, 53, 63, 73, 83, 93, 103, 113, 123, 133, 143, 153]}\"", "\"{'record': ['container5', '2022-01-01 00:04:00', 'product5', 24, 34, 44, 54, 64, 74, 84, 94, 104, 114, 124, 134, 144, 154]}\"", "\"{'record': ['container6', '2022-01-01 00:05:00', 'product6', 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155]}\"", "\"{'record': ['container7', '2022-01-01 00:06:00', 'product7', 26, 36, 46, 56, 66, 76, 86, 96, 106, 116, 126, 136, 146, 156]}\"", "\"{'record': ['container8', '2022-01-01 00:07:00', 'product8', 27, 37, 47, 57, 67, 77, 87, 97, 107, 117, 127, 137, 147, 157]}\"", "\"{'record': ['container9', '2022-01-01 00:08:00', 'product9', 28, 38, 48, 58, 68, 78, 88, 98, 108, 118, 128, 138, 148, 158]}\"", "\"{'record': ['container10', '2022-01-01 00:09:00', 'product10', 29, 39, 49, 59, 69, 79, 89, 99, 109, 119, 129, 139, 149, 159]}\""], "example_outputs": [{"return": "\"{'containerID': 'container1', 'measurement_time': '2022-01-01 00:00:00', 'product_id': 'product1', 'target_temperature': 30, 'kilowatts': 50, 'time_door_open': 60, 'content_type': 70, 'defrost_cycle': 80, 'sensors': {'temperature': 20, 'ambiant_temperature': 40, 'oxygen_level': 80, 'nitrogen_level': 90, 'humidity_level': 90, 'carbon_dioxide_level': 110, 'fan_1': 120, 'fan_2': 130, 'fan_3': 140}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'container2', 'measurement_time': '2022-01-01 00:01:00', 'product_id': 'product2', 'target_temperature': 31, 'kilowatts': 51, 'time_door_open': 61, 'content_type': 71, 'defrost_cycle': 81, 'sensors': {'temperature': 21, 'ambiant_temperature': 41, 'oxygen_level': 81, 'nitrogen_level': 91, 'humidity_level': 91, 'carbon_dioxide_level': 111, 'fan_1': 121, 'fan_2': 131, 'fan_3': 141}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'container3', 'measurement_time': '2022-01-01 00:02:00', 'product_id': 'product3', 'target_temperature': 32, 'kilowatts': 52, 'time_door_open': 62, 'content_type': 72, 'defrost_cycle': 82, 'sensors': {'temperature': 22, 'ambiant_temperature': 42, 'oxygen_level': 82, 'nitrogen_level': 92, 'humidity_level': 92, 'carbon_dioxide_level': 112, 'fan_1': 122, 'fan_2': 132, 'fan_3': 142}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'container4', 'measurement_time': '2022-01-01 00:03:00', 'product_id': 'product4', 'target_temperature': 33, 'kilowatts': 53, 'time_door_open': 63, 'content_type': 73, 'defrost_cycle': 83, 'sensors': {'temperature': 23, 'ambiant_temperature': 43, 'oxygen_level': 83, 'nitrogen_level': 93, 'humidity_level': 93, 'carbon_dioxide_level': 113, 'fan_1': 123, 'fan_2': 133, 'fan_3': 143}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'container5', 'measurement_time': '2022-01-01 00:04:00', 'product_id': 'product5', 'target_temperature': 34, 'kilowatts': 54, 'time_door_open': 64, 'content_type': 74, 'defrost_cycle': 84, 'sensors': {'temperature': 24, 'ambiant_temperature': 44, 'oxygen_level': 84, 'nitrogen_level': 94, 'humidity_level': 94, 'carbon_dioxide_level': 114, 'fan_1': 124, 'fan_2': 134, 'fan_3': 144}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'container6', 'measurement_time': '2022-01-01 00:05:00', 'product_id': 'product6', 'target_temperature': 35, 'kilowatts': 55, 'time_door_open': 65, 'content_type': 75, 'defrost_cycle': 85, 'sensors': {'temperature': 25, 'ambiant_temperature': 45, 'oxygen_level': 85, 'nitrogen_level': 95, 'humidity_level': 95, 'carbon_dioxide_level': 115, 'fan_1': 125, 'fan_2': 135, 'fan_3': 145}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'container7', 'measurement_time': '2022-01-01 00:06:00', 'product_id': 'product7', 'target_temperature': 36, 'kilowatts': 56, 'time_door_open': 66, 'content_type': 76, 'defrost_cycle': 86, 'sensors': {'temperature': 26, 'ambiant_temperature': 46, 'oxygen_level': 86, 'nitrogen_level': 96, 'humidity_level': 96, 'carbon_dioxide_level': 116, 'fan_1': 126, 'fan_2': 136, 'fan_3': 146}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'container8', 'measurement_time': '2022-01-01 00:07:00', 'product_id': 'product8', 'target_temperature': 37, 'kilowatts': 57, 'time_door_open': 67, 'content_type': 77, 'defrost_cycle': 87, 'sensors': {'temperature': 27, 'ambiant_temperature': 47, 'oxygen_level': 87, 'nitrogen_level': 97, 'humidity_level': 97, 'carbon_dioxide_level': 117, 'fan_1': 127, 'fan_2': 137, 'fan_3': 147}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'container9', 'measurement_time': '2022-01-01 00:08:00', 'product_id': 'product9', 'target_temperature': 38, 'kilowatts': 58, 'time_door_open': 68, 'content_type': 78, 'defrost_cycle': 88, 'sensors': {'temperature': 28, 'ambiant_temperature': 48, 'oxygen_level': 88, 'nitrogen_level': 98, 'humidity_level': 98, 'carbon_dioxide_level': 118, 'fan_1': 128, 'fan_2': 138, 'fan_3': 148}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'container10', 'measurement_time': '2022-01-01 00:09:00', 'product_id': 'product10', 'target_temperature': 39, 'kilowatts': 59, 'time_door_open': 69, 'content_type': 79, 'defrost_cycle': 89, 'sensors': {'temperature': 29, 'ambiant_temperature': 49, 'oxygen_level': 89, 'nitrogen_level': 99, 'humidity_level': 99, 'carbon_dioxide_level': 119, 'fan_1': 129, 'fan_2': 139, 'fan_3': 149}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'C123', 'measurement_time': '2023-01-01 12:00:00', 'product_id': 'P001', 'target_temperature': 20.0, 'kilowatts': 1.5, 'time_door_open': 120, 'content_type': 1, 'defrost_cycle': 0, 'sensors': {'temperature': 22.5, 'ambiant_temperature': 25.0, 'oxygen_level': 0, 'nitrogen_level': 78.5, 'humidity_level': 78.5, 'carbon_dioxide_level': 0.04, 'fan_1': 'on', 'fan_2': 'off', 'fan_3': 'on'}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'C124', 'measurement_time': '2023-01-02 13:00:00', 'product_id': 'P002', 'target_temperature': 19.0, 'kilowatts': 1.2, 'time_door_open': 100, 'content_type': 2, 'defrost_cycle': 1, 'sensors': {'temperature': 21.0, 'ambiant_temperature': 24.0, 'oxygen_level': 1, 'nitrogen_level': 79.0, 'humidity_level': 79.0, 'carbon_dioxide_level': 0.05, 'fan_1': 'off', 'fan_2': 'on', 'fan_3': 'off'}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'C125', 'measurement_time': '2023-01-03 14:00:00', 'product_id': 'P003', 'target_temperature': 21.0, 'kilowatts': 1.8, 'time_door_open': 110, 'content_type': 3, 'defrost_cycle': 2, 'sensors': {'temperature': 23.0, 'ambiant_temperature': 26.0, 'oxygen_level': 2, 'nitrogen_level': 77.0, 'humidity_level': 77.0, 'carbon_dioxide_level': 0.03, 'fan_1': 'on', 'fan_2': 'off', 'fan_3': 'on'}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'C126', 'measurement_time': '2023-01-04 15:00:00', 'product_id': 'P004', 'target_temperature': 18.0, 'kilowatts': 1.0, 'time_door_open': 90, 'content_type': 4, 'defrost_cycle': 3, 'sensors': {'temperature': 20.0, 'ambiant_temperature': 23.0, 'oxygen_level': 3, 'nitrogen_level': 76.0, 'humidity_level': 76.0, 'carbon_dioxide_level': 0.02, 'fan_1': 'off', 'fan_2': 'on', 'fan_3': 'off'}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'C127', 'measurement_time': '2023-01-05 16:00:00', 'product_id': 'P005', 'target_temperature': 22.0, 'kilowatts': 2.0, 'time_door_open': 130, 'content_type': 5, 'defrost_cycle': 4, 'sensors': {'temperature': 24.0, 'ambiant_temperature': 27.0, 'oxygen_level': 4, 'nitrogen_level': 75.0, 'humidity_level': 75.0, 'carbon_dioxide_level': 0.06, 'fan_1': 'on', 'fan_2': 'off', 'fan_3': 'on'}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'C128', 'measurement_time': '2023-01-06 17:00:00', 'product_id': 'P006', 'target_temperature': 23.0, 'kilowatts': 2.2, 'time_door_open': 140, 'content_type': 6, 'defrost_cycle': 5, 'sensors': {'temperature': 25.0, 'ambiant_temperature': 28.0, 'oxygen_level': 5, 'nitrogen_level': 74.0, 'humidity_level': 74.0, 'carbon_dioxide_level': 0.07, 'fan_1': 'off', 'fan_2': 'on', 'fan_3': 'off'}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'C129', 'measurement_time': '2023-01-07 18:00:00', 'product_id': 'P007', 'target_temperature': 24.0, 'kilowatts': 2.4, 'time_door_open': 150, 'content_type': 7, 'defrost_cycle': 6, 'sensors': {'temperature': 26.0, 'ambiant_temperature': 29.0, 'oxygen_level': 6, 'nitrogen_level': 73.0, 'humidity_level': 73.0, 'carbon_dioxide_level': 0.08, 'fan_1': 'on', 'fan_2': 'off', 'fan_3': 'on'}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'C130', 'measurement_time': '2023-01-08 19:00:00', 'product_id': 'P008', 'target_temperature': 25.0, 'kilowatts': 2.6, 'time_door_open': 160, 'content_type': 8, 'defrost_cycle': 7, 'sensors': {'temperature': 27.0, 'ambiant_temperature': 30.0, 'oxygen_level': 7, 'nitrogen_level': 72.0, 'humidity_level': 72.0, 'carbon_dioxide_level': 0.09, 'fan_1': 'off', 'fan_2': 'on', 'fan_3': 'off'}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'C131', 'measurement_time': '2023-01-09 20:00:00', 'product_id': 'P009', 'target_temperature': 26.0, 'kilowatts': 2.8, 'time_door_open': 170, 'content_type': 9, 'defrost_cycle': 8, 'sensors': {'temperature': 28.0, 'ambiant_temperature': 31.0, 'oxygen_level': 8, 'nitrogen_level': 71.0, 'humidity_level': 71.0, 'carbon_dioxide_level': 0.1, 'fan_1': 'on', 'fan_2': 'off', 'fan_3': 'on'}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'C132', 'measurement_time': '2023-01-10 21:00:00', 'product_id': 'P010', 'target_temperature': 27.0, 'kilowatts': 3.0, 'time_door_open': 180, 'content_type': 10, 'defrost_cycle': 9, 'sensors': {'temperature': 29.0, 'ambiant_temperature': 32.0, 'oxygen_level': 9, 'nitrogen_level': 70.0, 'humidity_level': 70.0, 'carbon_dioxide_level': 0.11, 'fan_1': 'off', 'fan_2': 'on', 'fan_3': 'off'}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'C001', 'measurement_time': '2023-01-01T12:00:00', 'product_id': 'P001', 'target_temperature': 5, 'kilowatts': 1.5, 'time_door_open': 30, 'content_type': 1, 'defrost_cycle': 0, 'sensors': {'temperature': 20, 'ambiant_temperature': 15, 'oxygen_level': 0, 'nitrogen_level': 40, 'humidity_level': 40, 'carbon_dioxide_level': 60, 'fan_1': 1, 'fan_2': 0, 'fan_3': 1}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'C002', 'measurement_time': '2023-01-02T13:00:00', 'product_id': 'P002', 'target_temperature': 6, 'kilowatts': 1.6, 'time_door_open': 31, 'content_type': 2, 'defrost_cycle': 1, 'sensors': {'temperature': 21, 'ambiant_temperature': 16, 'oxygen_level': 1, 'nitrogen_level': 41, 'humidity_level': 41, 'carbon_dioxide_level': 61, 'fan_1': 0, 'fan_2': 1, 'fan_3': 0}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'C003', 'measurement_time': '2023-01-03T14:00:00', 'product_id': 'P003', 'target_temperature': 7, 'kilowatts': 1.7, 'time_door_open': 32, 'content_type': 3, 'defrost_cycle': 2, 'sensors': {'temperature': 22, 'ambiant_temperature': 17, 'oxygen_level': 2, 'nitrogen_level': 42, 'humidity_level': 42, 'carbon_dioxide_level': 62, 'fan_1': 1, 'fan_2': 1, 'fan_3': 1}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'C004', 'measurement_time': '2023-01-04T15:00:00', 'product_id': 'P004', 'target_temperature': 8, 'kilowatts': 1.8, 'time_door_open': 33, 'content_type': 4, 'defrost_cycle': 3, 'sensors': {'temperature': 23, 'ambiant_temperature': 18, 'oxygen_level': 3, 'nitrogen_level': 43, 'humidity_level': 43, 'carbon_dioxide_level': 63, 'fan_1': 0, 'fan_2': 0, 'fan_3': 0}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'C005', 'measurement_time': '2023-01-05T16:00:00', 'product_id': 'P005', 'target_temperature': 9, 'kilowatts': 1.9, 'time_door_open': 34, 'content_type': 5, 'defrost_cycle': 4, 'sensors': {'temperature': 24, 'ambiant_temperature': 19, 'oxygen_level': 4, 'nitrogen_level': 44, 'humidity_level': 44, 'carbon_dioxide_level': 64, 'fan_1': 1, 'fan_2': 0, 'fan_3': 1}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'C006', 'measurement_time': '2023-01-06T17:00:00', 'product_id': 'P006', 'target_temperature': 10, 'kilowatts': 2.0, 'time_door_open': 35, 'content_type': 6, 'defrost_cycle': 5, 'sensors': {'temperature': 25, 'ambiant_temperature': 20, 'oxygen_level': 5, 'nitrogen_level': 45, 'humidity_level': 45, 'carbon_dioxide_level': 65, 'fan_1': 0, 'fan_2': 1, 'fan_3': 0}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'C007', 'measurement_time': '2023-01-07T18:00:00', 'product_id': 'P007', 'target_temperature': 11, 'kilowatts': 2.1, 'time_door_open': 36, 'content_type': 7, 'defrost_cycle': 6, 'sensors': {'temperature': 26, 'ambiant_temperature': 21, 'oxygen_level': 6, 'nitrogen_level': 46, 'humidity_level': 46, 'carbon_dioxide_level': 66, 'fan_1': 1, 'fan_2': 1, 'fan_3': 1}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'C008', 'measurement_time': '2023-01-08T19:00:00', 'product_id': 'P008', 'target_temperature': 12, 'kilowatts': 2.2, 'time_door_open': 37, 'content_type': 8, 'defrost_cycle': 7, 'sensors': {'temperature': 27, 'ambiant_temperature': 22, 'oxygen_level': 7, 'nitrogen_level': 47, 'humidity_level': 47, 'carbon_dioxide_level': 67, 'fan_1': 0, 'fan_2': 0, 'fan_3': 0}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'C009', 'measurement_time': '2023-01-09T20:00:00', 'product_id': 'P009', 'target_temperature': 13, 'kilowatts': 2.3, 'time_door_open': 38, 'content_type': 9, 'defrost_cycle': 8, 'sensors': {'temperature': 28, 'ambiant_temperature': 23, 'oxygen_level': 8, 'nitrogen_level': 48, 'humidity_level': 48, 'carbon_dioxide_level': 68, 'fan_1': 1, 'fan_2': 0, 'fan_3': 1}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}, {"return": "\"{'containerID': 'C010', 'measurement_time': '2023-01-10T21:00:00', 'product_id': 'P010', 'target_temperature': 14, 'kilowatts': 2.4, 'time_door_open': 39, 'content_type': 10, 'defrost_cycle': 9, 'sensors': {'temperature': 29, 'ambiant_temperature': 24, 'oxygen_level': 9, 'nitrogen_level': 49, 'humidity_level': 49, 'carbon_dioxide_level': 69, 'fan_1': 0, 'fan_2': 1, 'fan_3': 0}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\""}], "parsed_inputs": [[["record", "['container1', '2022-01-01 00:00:00', 'product1', 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]"]], [["record", "['container2', '2022-01-01 00:01:00', 'product2', 21, 31, 41, 51, 61, 71, 81, 91, 101, 111, 121, 131, 141, 151]"]], [["record", "['container3', '2022-01-01 00:02:00', 'product3', 22, 32, 42, 52, 62, 72, 82, 92, 102, 112, 122, 132, 142, 152]"]], [["record", "['container4', '2022-01-01 00:03:00', 'product4', 23, 33, 43, 53, 63, 73, 83, 93, 103, 113, 123, 133, 143, 153]"]], [["record", "['container5', '2022-01-01 00:04:00', 'product5', 24, 34, 44, 54, 64, 74, 84, 94, 104, 114, 124, 134, 144, 154]"]], [["record", "['container6', '2022-01-01 00:05:00', 'product6', 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155]"]], [["record", "['container7', '2022-01-01 00:06:00', 'product7', 26, 36, 46, 56, 66, 76, 86, 96, 106, 116, 126, 136, 146, 156]"]], [["record", "['container8', '2022-01-01 00:07:00', 'product8', 27, 37, 47, 57, 67, 77, 87, 97, 107, 117, 127, 137, 147, 157]"]], [["record", "['container9', '2022-01-01 00:08:00', 'product9', 28, 38, 48, 58, 68, 78, 88, 98, 108, 118, 128, 138, 148, 158]"]], [["record", "['container10', '2022-01-01 00:09:00', 'product10', 29, 39, 49, 59, 69, 79, 89, 99, 109, 119, 129, 139, 149, 159]"]]], "exec_code": "def toJson(record):\n    t = {}\n    sensors = {}\n    t['containerID'] = record[0]\n    t['measurement_time'] = record[1]\n    t['product_id'] = record[2]\n    t['target_temperature'] = record[4]\n    t['kilowatts'] = record[6]\n    t['time_door_open'] = int(record[7])\n    t['content_type'] = int(record[8])\n    t['defrost_cycle'] = int(record[9])\n    sensors['temperature'] = record[3]\n    sensors['ambiant_temperature'] = record[5]\n    sensors['oxygen_level'] = record[9]\n    sensors['nitrogen_level'] = record[10]\n    sensors['humidity_level'] = record[10]\n    sensors['carbon_dioxide_level'] = record[12]\n    sensors['fan_1'] = record[13]\n    sensors['fan_2'] = record[14]\n    sensors['fan_3'] = record[15]\n    t['sensors'] = sensors\n    t['latitude'] = '37.8226902168957'\n    t['longitude'] = '-122.3248956640928'\n    return t\n", "output": "The function is:\n\n```python\ndef toJson(record):\n    t = {}\n    sensors = {}\n    t['containerID'] = record[0]\n    t['measurement_time'] = record[1]\n    t['product_id'] = record[2]\n    t['target_temperature'] = record[4]\n    t['kilowatts'] = record[6]\n    t['time_door_open'] = int(record[7])\n    t['content_type'] = int(record[8])\n    t['defrost_cycle'] = int(record[9])\n    sensors['temperature'] = record[3]\n    sensors['ambiant_temperature'] = record[5]\n    sensors['oxygen_level'] = record[9]\n    sensors['nitrogen_level'] = record[10]\n    sensors['humidity_level'] = record[10]\n    sensors['carbon_dioxide_level'] = record[12]\n    sensors['fan_1'] = record[13]\n    sensors['fan_2'] = record[14]\n    sensors['fan_3'] = record[15]\n    t['sensors'] = sensors\n    t['latitude'] = '37.8226902168957'\n    t['longitude'] = '-122.3248956640928'\n    return t\n\n```", "choosed_example_idx": [0, 5, 4, 7, 3, 6], "prompt": "Write a function that generates the output from the input.\n\nInput: dict(record=['container1', '2022-01-01 00:00:00', 'product1', 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]), Output: \"{'containerID': 'container1', 'measurement_time': '2022-01-01 00:00:00', 'product_id': 'product1', 'target_temperature': 30, 'kilowatts': 50, 'time_door_open': 60, 'content_type': 70, 'defrost_cycle': 80, 'sensors': {'temperature': 20, 'ambiant_temperature': 40, 'oxygen_level': 80, 'nitrogen_level': 90, 'humidity_level': 90, 'carbon_dioxide_level': 110, 'fan_1': 120, 'fan_2': 130, 'fan_3': 140}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\"\nInput: dict(record=['container6', '2022-01-01 00:05:00', 'product6', 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155]), Output: \"{'containerID': 'container6', 'measurement_time': '2022-01-01 00:05:00', 'product_id': 'product6', 'target_temperature': 35, 'kilowatts': 55, 'time_door_open': 65, 'content_type': 75, 'defrost_cycle': 85, 'sensors': {'temperature': 25, 'ambiant_temperature': 45, 'oxygen_level': 85, 'nitrogen_level': 95, 'humidity_level': 95, 'carbon_dioxide_level': 115, 'fan_1': 125, 'fan_2': 135, 'fan_3': 145}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\"\nInput: dict(record=['container5', '2022-01-01 00:04:00', 'product5', 24, 34, 44, 54, 64, 74, 84, 94, 104, 114, 124, 134, 144, 154]), Output: \"{'containerID': 'container5', 'measurement_time': '2022-01-01 00:04:00', 'product_id': 'product5', 'target_temperature': 34, 'kilowatts': 54, 'time_door_open': 64, 'content_type': 74, 'defrost_cycle': 84, 'sensors': {'temperature': 24, 'ambiant_temperature': 44, 'oxygen_level': 84, 'nitrogen_level': 94, 'humidity_level': 94, 'carbon_dioxide_level': 114, 'fan_1': 124, 'fan_2': 134, 'fan_3': 144}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\"\nInput: dict(record=['container8', '2022-01-01 00:07:00', 'product8', 27, 37, 47, 57, 67, 77, 87, 97, 107, 117, 127, 137, 147, 157]), Output: \"{'containerID': 'container8', 'measurement_time': '2022-01-01 00:07:00', 'product_id': 'product8', 'target_temperature': 37, 'kilowatts': 57, 'time_door_open': 67, 'content_type': 77, 'defrost_cycle': 87, 'sensors': {'temperature': 27, 'ambiant_temperature': 47, 'oxygen_level': 87, 'nitrogen_level': 97, 'humidity_level': 97, 'carbon_dioxide_level': 117, 'fan_1': 127, 'fan_2': 137, 'fan_3': 147}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\"\nInput: dict(record=['container4', '2022-01-01 00:03:00', 'product4', 23, 33, 43, 53, 63, 73, 83, 93, 103, 113, 123, 133, 143, 153]), Output: \"{'containerID': 'container4', 'measurement_time': '2022-01-01 00:03:00', 'product_id': 'product4', 'target_temperature': 33, 'kilowatts': 53, 'time_door_open': 63, 'content_type': 73, 'defrost_cycle': 83, 'sensors': {'temperature': 23, 'ambiant_temperature': 43, 'oxygen_level': 83, 'nitrogen_level': 93, 'humidity_level': 93, 'carbon_dioxide_level': 113, 'fan_1': 123, 'fan_2': 133, 'fan_3': 143}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\"\nInput: dict(record=['container7', '2022-01-01 00:06:00', 'product7', 26, 36, 46, 56, 66, 76, 86, 96, 106, 116, 126, 136, 146, 156]), Output: \"{'containerID': 'container7', 'measurement_time': '2022-01-01 00:06:00', 'product_id': 'product7', 'target_temperature': 36, 'kilowatts': 56, 'time_door_open': 66, 'content_type': 76, 'defrost_cycle': 86, 'sensors': {'temperature': 26, 'ambiant_temperature': 46, 'oxygen_level': 86, 'nitrogen_level': 96, 'humidity_level': 96, 'carbon_dioxide_level': 116, 'fan_1': 126, 'fan_2': 136, 'fan_3': 146}, 'latitude': '37.8226902168957', 'longitude': '-122.3248956640928'}\"\n\n\nFunction: toJson\n", "id": "07c4b61e6efe127922e83c608d5b8fc5529ec1ba_0"}
{"example_str": "examples = [\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10),\n]\nexamples += [\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10)\n]\nexamples += [\n    dict(n=1),\n    dict(n=2),\n    dict(n=3),\n    dict(n=4),\n    dict(n=5),\n    dict(n=6),\n    dict(n=7),\n    dict(n=8),\n    dict(n=9),\n    dict(n=10)\n]", "code": "def ulam(n):\n    \"\"\"Returns the next hailstone number after n.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 1:\n        return 3 * n + 1\n    else:\n        return n // 2\n", "func_name": "ulam", "exec_status": true, "example_inputs": ["\"{'n': 1}\"", "\"{'n': 2}\"", "\"{'n': 3}\"", "\"{'n': 4}\"", "\"{'n': 5}\"", "\"{'n': 6}\"", "\"{'n': 7}\"", "\"{'n': 8}\"", "\"{'n': 9}\"", "\"{'n': 10}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"10\""}, {"return": "\"2\""}, {"return": "\"16\""}, {"return": "\"3\""}, {"return": "\"22\""}, {"return": "\"4\""}, {"return": "\"28\""}, {"return": "\"5\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"10\""}, {"return": "\"2\""}, {"return": "\"16\""}, {"return": "\"3\""}, {"return": "\"22\""}, {"return": "\"4\""}, {"return": "\"28\""}, {"return": "\"5\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"10\""}, {"return": "\"2\""}, {"return": "\"16\""}, {"return": "\"3\""}, {"return": "\"22\""}, {"return": "\"4\""}, {"return": "\"28\""}, {"return": "\"5\""}], "parsed_inputs": [[["n", "1"]], [["n", "2"]], [["n", "3"]], [["n", "4"]], [["n", "5"]], [["n", "6"]], [["n", "7"]], [["n", "8"]], [["n", "9"]], [["n", "10"]]], "exec_code": "def ulam(n):\n    \"\"\"Returns the next hailstone number after n.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 1:\n        return 3 * n + 1\n    else:\n        return n // 2\n", "output": "The function is:\n\n```python\ndef ulam(n):\n    \"\"\"Returns the next hailstone number after n.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 1:\n        return 3 * n + 1\n    else:\n        return n // 2\n\n```", "choosed_example_idx": [6, 2, 7, 0, 9], "prompt": "Write a function that generates the output from the input.\nInput: dict(n=7), Output: \"22\"\nInput: dict(n=3), Output: \"10\"\nInput: dict(n=8), Output: \"4\"\nInput: dict(n=1), Output: \"1\"\nInput: dict(n=10), Output: \"5\"\n\nFunction: ulam\n", "id": "9de3fe103aeaef59e7a042b8ab4e62e1e3ff48dd_0"}
{"example_str": "examples = [\n    dict(sorted_datas=[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], idx=0),\n    dict(sorted_datas=[[11, 12, 13, 14, 15], [16, 17, 18, 19, 20]], idx=1),\n    dict(sorted_datas=[[21, 22, 23, 24, 25], [26, 27, 28, 29, 30]], idx=0),\n    dict(sorted_datas=[[31, 32, 33, 34, 35], [36, 37, 38, 39, 40]], idx=2),\n    dict(sorted_datas=[[41, 42, 43, 44, 45], [46, 47, 48, 49, 50]], idx=1),\n    dict(sorted_datas=[[51, 52, 53, 54, 55], [56, 57, 58, 59, 60]], idx=0),\n    dict(sorted_datas=[[61, 62, 63, 64, 65], [66, 67, 68, 69, 70]], idx=3),\n    dict(sorted_datas=[[71, 72, 73, 74, 75], [76, 77, 78, 79, 80]], idx=2),\n    dict(sorted_datas=[[81, 82, 83, 84, 85], [86, 87, 88, 89, 90]], idx=1),\n    dict(sorted_datas=[[91, 92, 93, 94, 95], [96, 97, 98, 99, 100]], idx=0),\n]", "code": "def tampil_lagi(sorted_datas, idx):\n    p = True\n    while p:\n        if len(sorted_datas) - idx <= 5:\n            for i in range(len(sorted_datas) - idx):\n                print('ID Peminjaman      :', sorted_datas[idx + i][0])\n                print('Nama Pengambil     :', cek_nama_user(sorted_datas[\n                    idx + i][1]))\n                print('Nama Gadget        :', cek_nama(sorted_datas[idx + i\n                    ][2]))\n                print('Tanggal peminjaman :', sorted_datas[idx + i][3])\n                print('Jumlah             :', sorted_datas[idx + i][4])\n                print()\n            print('Ini adalah akhir dari riwayat peminjaman gadget')\n            p = False\n        else:\n            for i in range(5):\n                print('ID Peminjaman      :', sorted_datas[idx + i][0])\n                print('Nama Pengambil     :', cek_nama_user(sorted_datas[\n                    idx + i][1]))\n                print('Nama Gadget        :', cek_nama(sorted_datas[idx + i\n                    ][2]))\n                print('Tanggal peminjaman :', sorted_datas[idx + i][3])\n                print('Jumlah             :', sorted_datas[idx + i][4])\n                print()\n            print(\n                'Apakah Anda ingin melihat riwayat peminjaman gadget lainnya? (Y/N)'\n                )\n            parameter = input('>>> ')\n            if parameter == 'Y':\n                idx += 5\n                tampil_lagi(sorted_datas, idx)\n            elif parameter == 'N':\n                print('Pengaksesan riwayat peminjaman gadget selesai')\n            else:\n                print('Terjadi kesalahan saat input')\n    return idx\n", "func_name": "tampil_lagi", "exec_status": true, "example_inputs": ["\"{'sorted_datas': [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 'idx': 0}\"", "\"{'sorted_datas': [[11, 12, 13, 14, 15], [16, 17, 18, 19, 20]], 'idx': 1}\"", "\"{'sorted_datas': [[21, 22, 23, 24, 25], [26, 27, 28, 29, 30]], 'idx': 0}\"", "\"{'sorted_datas': [[31, 32, 33, 34, 35], [36, 37, 38, 39, 40]], 'idx': 2}\"", "\"{'sorted_datas': [[41, 42, 43, 44, 45], [46, 47, 48, 49, 50]], 'idx': 1}\"", "\"{'sorted_datas': [[51, 52, 53, 54, 55], [56, 57, 58, 59, 60]], 'idx': 0}\"", "\"{'sorted_datas': [[61, 62, 63, 64, 65], [66, 67, 68, 69, 70]], 'idx': 3}\"", "\"{'sorted_datas': [[71, 72, 73, 74, 75], [76, 77, 78, 79, 80]], 'idx': 2}\"", "\"{'sorted_datas': [[81, 82, 83, 84, 85], [86, 87, 88, 89, 90]], 'idx': 1}\"", "\"{'sorted_datas': [[91, 92, 93, 94, 95], [96, 97, 98, 99, 100]], 'idx': 0}\""], "example_outputs": [{"error": "ID Peminjaman      : 1\n<|EXCEPTION|> \"<class 'NameError'>: name 'cek_nama_user' is not defined\""}, {"error": "ID Peminjaman      : 16\n<|EXCEPTION|> \"<class 'NameError'>: name 'cek_nama_user' is not defined\""}, {"error": "ID Peminjaman      : 21\n<|EXCEPTION|> \"<class 'NameError'>: name 'cek_nama_user' is not defined\""}, {"trace": "Ini adalah akhir dari riwayat peminjaman gadget\n [\"{'sorted_datas': [[31, 32, 33, 34, 35], [36, 37, 38, 39, 40]], 'idx': 2}\", \"Line 1->    p = True\", \"{'p': True}\", \"Line 2->    while p:\", \"Line 3->        if len(sorted_datas) - idx <= 5:\", \"Line 4->            for i in range(len(sorted_datas) - idx):\", \"Line 13->            print('Ini adalah akhir dari riwayat peminjaman gadget')\", \"Line 14->            p = False\", \"{'p': False}\", \"Line 2->    while p:\", \"Line 36->    return idx\"]", "return": "\"2\""}, {"error": "ID Peminjaman      : 46\n<|EXCEPTION|> \"<class 'NameError'>: name 'cek_nama_user' is not defined\""}, {"error": "ID Peminjaman      : 51\n<|EXCEPTION|> \"<class 'NameError'>: name 'cek_nama_user' is not defined\""}, {"trace": "Ini adalah akhir dari riwayat peminjaman gadget\n [\"{'sorted_datas': [[61, 62, 63, 64, 65], [66, 67, 68, 69, 70]], 'idx': 3}\", \"Line 1->    p = True\", \"{'p': True}\", \"Line 2->    while p:\", \"Line 3->        if len(sorted_datas) - idx <= 5:\", \"Line 4->            for i in range(len(sorted_datas) - idx):\", \"Line 13->            print('Ini adalah akhir dari riwayat peminjaman gadget')\", \"Line 14->            p = False\", \"{'p': False}\", \"Line 2->    while p:\", \"Line 36->    return idx\"]", "return": "\"3\""}, {"trace": "Ini adalah akhir dari riwayat peminjaman gadget\n [\"{'sorted_datas': [[71, 72, 73, 74, 75], [76, 77, 78, 79, 80]], 'idx': 2}\", \"Line 1->    p = True\", \"{'p': True}\", \"Line 2->    while p:\", \"Line 3->        if len(sorted_datas) - idx <= 5:\", \"Line 4->            for i in range(len(sorted_datas) - idx):\", \"Line 13->            print('Ini adalah akhir dari riwayat peminjaman gadget')\", \"Line 14->            p = False\", \"{'p': False}\", \"Line 2->    while p:\", \"Line 36->    return idx\"]", "return": "\"2\""}, {"error": "ID Peminjaman      : 86\n<|EXCEPTION|> \"<class 'NameError'>: name 'cek_nama_user' is not defined\""}, {"error": "ID Peminjaman      : 91\n<|EXCEPTION|> \"<class 'NameError'>: name 'cek_nama_user' is not defined\""}], "parsed_inputs": [[["sorted_datas", "[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]"], ["idx", "0"]], [["sorted_datas", "[[11, 12, 13, 14, 15], [16, 17, 18, 19, 20]]"], ["idx", "1"]], [["sorted_datas", "[[21, 22, 23, 24, 25], [26, 27, 28, 29, 30]]"], ["idx", "0"]], [["sorted_datas", "[[31, 32, 33, 34, 35], [36, 37, 38, 39, 40]]"], ["idx", "2"]], [["sorted_datas", "[[41, 42, 43, 44, 45], [46, 47, 48, 49, 50]]"], ["idx", "1"]], [["sorted_datas", "[[51, 52, 53, 54, 55], [56, 57, 58, 59, 60]]"], ["idx", "0"]], [["sorted_datas", "[[61, 62, 63, 64, 65], [66, 67, 68, 69, 70]]"], ["idx", "3"]], [["sorted_datas", "[[71, 72, 73, 74, 75], [76, 77, 78, 79, 80]]"], ["idx", "2"]], [["sorted_datas", "[[81, 82, 83, 84, 85], [86, 87, 88, 89, 90]]"], ["idx", "1"]], [["sorted_datas", "[[91, 92, 93, 94, 95], [96, 97, 98, 99, 100]]"], ["idx", "0"]]], "exec_code": "def tampil_lagi(sorted_datas, idx):\n    p = True\n    while p:\n        if len(sorted_datas) - idx <= 5:\n            for i in range(len(sorted_datas) - idx):\n                print('ID Peminjaman      :', sorted_datas[idx + i][0])\n                print('Nama Pengambil     :', cek_nama_user(sorted_datas[\n                    idx + i][1]))\n                print('Nama Gadget        :', cek_nama(sorted_datas[idx + i\n                    ][2]))\n                print('Tanggal peminjaman :', sorted_datas[idx + i][3])\n                print('Jumlah             :', sorted_datas[idx + i][4])\n                print()\n            print('Ini adalah akhir dari riwayat peminjaman gadget')\n            p = False\n        else:\n            for i in range(5):\n                print('ID Peminjaman      :', sorted_datas[idx + i][0])\n                print('Nama Pengambil     :', cek_nama_user(sorted_datas[\n                    idx + i][1]))\n                print('Nama Gadget        :', cek_nama(sorted_datas[idx + i\n                    ][2]))\n                print('Tanggal peminjaman :', sorted_datas[idx + i][3])\n                print('Jumlah             :', sorted_datas[idx + i][4])\n                print()\n            print(\n                'Apakah Anda ingin melihat riwayat peminjaman gadget lainnya? (Y/N)'\n                )\n            parameter = input('>>> ')\n            if parameter == 'Y':\n                idx += 5\n                tampil_lagi(sorted_datas, idx)\n            elif parameter == 'N':\n                print('Pengaksesan riwayat peminjaman gadget selesai')\n            else:\n                print('Terjadi kesalahan saat input')\n    return idx\n", "output": "The function is:\n\n```python\ndef tampil_lagi(sorted_datas, idx):\n    p = True\n    while p:\n        if len(sorted_datas) - idx <= 5:\n            for i in range(len(sorted_datas) - idx):\n                print('ID Peminjaman      :', sorted_datas[idx + i][0])\n                print('Nama Pengambil     :', cek_nama_user(sorted_datas[\n                    idx + i][1]))\n                print('Nama Gadget        :', cek_nama(sorted_datas[idx + i\n                    ][2]))\n                print('Tanggal peminjaman :', sorted_datas[idx + i][3])\n                print('Jumlah             :', sorted_datas[idx + i][4])\n                print()\n            print('Ini adalah akhir dari riwayat peminjaman gadget')\n            p = False\n        else:\n            for i in range(5):\n                print('ID Peminjaman      :', sorted_datas[idx + i][0])\n                print('Nama Pengambil     :', cek_nama_user(sorted_datas[\n                    idx + i][1]))\n                print('Nama Gadget        :', cek_nama(sorted_datas[idx + i\n                    ][2]))\n                print('Tanggal peminjaman :', sorted_datas[idx + i][3])\n                print('Jumlah             :', sorted_datas[idx + i][4])\n                print()\n            print(\n                'Apakah Anda ingin melihat riwayat peminjaman gadget lainnya? (Y/N)'\n                )\n            parameter = input('>>> ')\n            if parameter == 'Y':\n                idx += 5\n                tampil_lagi(sorted_datas, idx)\n            elif parameter == 'N':\n                print('Pengaksesan riwayat peminjaman gadget selesai')\n            else:\n                print('Terjadi kesalahan saat input')\n    return idx\n\n```", "choosed_example_idx": [8, 6, 9, 4, 7, 5, 2, 0], "prompt": "Function: tampil_lagi\nWrite a function that generates the output from the input.\nInput: dict(sorted_datas=[[81, 82, 83, 84, 85], [86, 87, 88, 89, 90]], idx=1), Output: ID Peminjaman      : 86\n \"<class 'NameError'>: name 'cek_nama_user' is not defined\"\nInput: dict(sorted_datas=[[61, 62, 63, 64, 65], [66, 67, 68, 69, 70]], idx=3), Output: \"3\"\nInput: dict(sorted_datas=[[91, 92, 93, 94, 95], [96, 97, 98, 99, 100]], idx=0), Output: ID Peminjaman      : 91\n \"<class 'NameError'>: name 'cek_nama_user' is not defined\"\nInput: dict(sorted_datas=[[41, 42, 43, 44, 45], [46, 47, 48, 49, 50]], idx=1), Output: ID Peminjaman      : 46\n \"<class 'NameError'>: name 'cek_nama_user' is not defined\"\nInput: dict(sorted_datas=[[71, 72, 73, 74, 75], [76, 77, 78, 79, 80]], idx=2), Output: \"2\"\nInput: dict(sorted_datas=[[51, 52, 53, 54, 55], [56, 57, 58, 59, 60]], idx=0), Output: ID Peminjaman      : 51\n \"<class 'NameError'>: name 'cek_nama_user' is not defined\"\nInput: dict(sorted_datas=[[21, 22, 23, 24, 25], [26, 27, 28, 29, 30]], idx=0), Output: ID Peminjaman      : 21\n \"<class 'NameError'>: name 'cek_nama_user' is not defined\"\nInput: dict(sorted_datas=[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], idx=0), Output: ID Peminjaman      : 1\n \"<class 'NameError'>: name 'cek_nama_user' is not defined\"\n\n\n", "id": "ab75bd1b1024ad52f2b1e0b107fd45ef5a2ef242_0"}
{"example_str": "examples = [\n    dict(v=['/', 'path']),\n    dict(v=['relative', 'path']),\n    dict(v=['C:', 'Windows']),\n    dict(v=['/usr', 'bin']),\n    dict(v=['.', 'path']),\n    dict(v=['..', 'path']),\n    dict(v=['/', ]),\n    dict(v=['a', 'b', 'c']),\n    dict(v=['D:', 'Documents']),\n    dict(v=['E:\\\\', 'path']),\n]\nexamples += [\n    dict(v=\"/usr/local/bin\"),  # Unix-style path starting from root\n    dict(v=\"C:/Windows/System32\"),  # Windows-style path starting from root\n    dict(v=\"relative/path/to/file\"),  # Relative Unix-style path\n    dict(v=\"\\\\Server\\Path\"),  # Windows network path, not covered by function but interesting to test\n    dict(v=\":\"),  # Edge case, only colon\n    dict(v=\"/\"),  # Edge case, only slash\n    dict(v=\"D:Document\"),  # Windows-style path, second character is colon\n    dict(v=\"no/leading/slash\"),  # Unix-style path but not starting from root\n    dict(v=\"\"),  # Empty string, edge case\n    dict(v=\"normalfile.txt\")  # Normal file name, not a path\n]\nexamples += [\n    dict(v='/home/user'),  # Unix-like absolute path\n    dict(v='C:/Users'),    # Windows absolute path\n    dict(v='relative/path'),  # Relative path, does not start with '/' or have ':' at index 1\n    dict(v='\\\\NetworkDrive'),  # Windows network path, not covered by function logic\n    dict(v=':memory:'),    # Edge case, starts with ':' but not at index 1\n    dict(v='/'),           # Minimal Unix-like absolute path\n    dict(v='D:Folder'),    # Windows path, ':' at index 1\n    dict(v='no/colon'),    # Contains '/', but not at start\n    dict(v='E:/'),         # Windows absolute path with minimal content\n    dict(v='randomText')   # No '/' at start or ':' at index 1\n]", "code": "def startFromRoot(v):\n    return v[0] == '/' or v[1] == ':'\n", "func_name": "startFromRoot", "exec_status": true, "example_inputs": ["\"{'v': ['/', 'path']}\"", "\"{'v': ['relative', 'path']}\"", "\"{'v': ['C:', 'Windows']}\"", "\"{'v': ['/usr', 'bin']}\"", "\"{'v': ['.', 'path']}\"", "\"{'v': ['..', 'path']}\"", "\"{'v': ['/']}\"", "\"{'v': ['a', 'b', 'c']}\"", "\"{'v': ['D:', 'Documents']}\"", "\"{'v': ['E:\\\\\\\\', 'path']}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: string index out of range\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: string index out of range\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}], "parsed_inputs": [[["v", "['/', 'path']"]], [["v", "['relative', 'path']"]], [["v", "['C:', 'Windows']"]], [["v", "['/usr', 'bin']"]], [["v", "['.', 'path']"]], [["v", "['..', 'path']"]], [["v", "['/']"]], [["v", "['a', 'b', 'c']"]], [["v", "['D:', 'Documents']"]], [["v", "['E:\\\\', 'path']"]]], "exec_code": "def startFromRoot(v):\n    return v[0] == '/' or v[1] == ':'\n", "output": "The function is:\n\n```python\ndef startFromRoot(v):\n    return v[0] == '/' or v[1] == ':'\n\n```", "choosed_example_idx": [5, 8, 1, 3, 4, 7, 6, 2], "prompt": "Function: startFromRoot\nWrite a function that generates the output from the input.\nInput: dict(v=['..', 'path']), Output: \"False\"\nInput: dict(v=['D:', 'Documents']), Output: \"False\"\nInput: dict(v=['relative', 'path']), Output: \"False\"\nInput: dict(v=['/usr', 'bin']), Output: \"False\"\nInput: dict(v=['.', 'path']), Output: \"False\"\nInput: dict(v=['a', 'b', 'c']), Output: \"False\"\nInput: dict(v=['/']), Output: \"True\"\nInput: dict(v=['C:', 'Windows']), Output: \"False\"\n\n", "id": "4242806474150024e348d728e7bec7199756cb19_0"}
{"example_str": "examples = [\n    dict(string=\"hello\"),\n    dict(string=\"world\"),\n    dict(string=\"abc123\"),\n    dict(string=\"Python\"),\n    dict(string=\"\"),\n    dict(string=\"a\"),\n    dict(string=\"xyz\"),\n    dict(string=\"Hello, World!\"),\n    dict(string=\"abcdefg\"),\n    dict(string=\"1234567890\"),\n]\nexamples += [\n    dict(string=\"hello\"),\n    dict(string=\"world\"),\n    dict(string=\"123\"),\n    dict(string=\"!@#\"),\n    dict(string=\"\"),\n    dict(string=\"Python3\"),\n    dict(string=\"space bar\"),\n    dict(string=\"newline\\n\"),\n    dict(string=\"UPPERCASE\"),\n    dict(string=\"CamelCase\")\n]\nexamples += [\n    dict(string='hello'),\n    dict(string='world'),\n    dict(string='python'),\n    dict(string='12345'),\n    dict(string='ASCII'),\n    dict(string='example'),\n    dict(string='test'),\n    dict(string='function'),\n    dict(string='input'),\n    dict(string='output')\n]", "code": "def ord_sum(string: str) ->int:\n    \"\"\"\n    Sum the ASCII values of the characters of a passed string.\n\n    Args:\n        string (str): The string whose ASCII values we are summing.\n\n    Returns:\n        int: The sum of each letter's ASCII value.\n\n    \"\"\"\n    return sum([ord(c) for c in string])\n", "func_name": "ord_sum", "exec_status": true, "example_inputs": ["\"{'string': 'hello'}\"", "\"{'string': 'world'}\"", "\"{'string': 'abc123'}\"", "\"{'string': 'Python'}\"", "\"{'string': ''}\"", "\"{'string': 'a'}\"", "\"{'string': 'xyz'}\"", "\"{'string': 'Hello, World!'}\"", "\"{'string': 'abcdefg'}\"", "\"{'string': '1234567890'}\""], "example_outputs": [{"return": "\"532\""}, {"return": "\"552\""}, {"return": "\"444\""}, {"return": "\"642\""}, {"return": "\"0\""}, {"return": "\"97\""}, {"return": "\"363\""}, {"return": "\"1129\""}, {"return": "\"700\""}, {"return": "\"525\""}, {"return": "\"532\""}, {"return": "\"552\""}, {"return": "\"150\""}, {"return": "\"132\""}, {"return": "\"0\""}, {"return": "\"693\""}, {"return": "\"865\""}, {"return": "\"764\""}, {"return": "\"680\""}, {"return": "\"862\""}, {"return": "\"532\""}, {"return": "\"552\""}, {"return": "\"674\""}, {"return": "\"255\""}, {"return": "\"361\""}, {"return": "\"748\""}, {"return": "\"448\""}, {"return": "\"870\""}, {"return": "\"560\""}, {"return": "\"689\""}], "parsed_inputs": [[["string", "\"hello\""]], [["string", "\"world\""]], [["string", "\"abc123\""]], [["string", "\"Python\""]], [["string", "\"\""]], [["string", "\"a\""]], [["string", "\"xyz\""]], [["string", "\"Hello, World!\""]], [["string", "\"abcdefg\""]], [["string", "\"1234567890\""]]], "exec_code": "def ord_sum(string: str) ->int:\n    \"\"\"\n    Sum the ASCII values of the characters of a passed string.\n\n    Args:\n        string (str): The string whose ASCII values we are summing.\n\n    Returns:\n        int: The sum of each letter's ASCII value.\n\n    \"\"\"\n    return sum([ord(c) for c in string])\n", "output": "The function is:\n\n```python\ndef ord_sum(string: str) ->int:\n    \"\"\"\n    Sum the ASCII values of the characters of a passed string.\n\n    Args:\n        string (str): The string whose ASCII values we are summing.\n\n    Returns:\n        int: The sum of each letter's ASCII value.\n\n    \"\"\"\n    return sum([ord(c) for c in string])\n\n```", "choosed_example_idx": [1, 4, 6, 2, 9, 5, 3, 0], "prompt": "Input: dict(string=\"world\"), Output: \"552\"\nInput: dict(string=\"\"), Output: \"0\"\nInput: dict(string=\"xyz\"), Output: \"363\"\nInput: dict(string=\"abc123\"), Output: \"444\"\nInput: dict(string=\"1234567890\"), Output: \"525\"\nInput: dict(string=\"a\"), Output: \"97\"\nInput: dict(string=\"Python\"), Output: \"642\"\nInput: dict(string=\"hello\"), Output: \"532\"\n\n\n\nWrite a function that generates the output from the input.\nFunction: ord_sum\n", "id": "8e6789397ea53a2b6e689096184f1b649f734b78_0"}
{"example_str": "examples = [\n    dict(dataset=[1, 1, 1, 1, 1, 1]),\n    dict(dataset=[0, 0, 0, 0, 0, 0]),\n    dict(dataset=[0.5, 0.5, 0.5, 0.5, 0.5, 0.5]),\n    dict(dataset=[2, 2, 2, 2, 2, 2]),\n    dict(dataset=[10, 10, 10, 10, 10, 10]),\n    dict(dataset=[0.1, 0.2, 0.3, 0.4, 0.5, 0.6]),\n    dict(dataset=[1, 2, 3, 4, 5, 6]),\n    dict(dataset=[6, 5, 4, 3, 2, 1]),\n    dict(dataset=[0.01, 0.02, 0.03, 0.04, 0.05, 0.06]),\n    dict(dataset=[100, 100, 100, 100, 100, 100]),\n]\nexamples += [\n    dict(dataset=[1, 1, 1, 1, 1, 1]),\n    dict(dataset=[2, 2, 2, 2, 2, 2]),\n    dict(dataset=[0, 0, 0, 0, 0, 0]),\n    dict(dataset=[10, 10, 10, 10, 10, 10]),\n    dict(dataset=[5, 3, 2, 4, 1, 0]),\n    dict(dataset=[0, 1, 0, 1, 0, 1]),\n    dict(dataset=[1, 0, 1, 0, 1, 0]),\n    dict(dataset=[3, 5, 7, 2, 4, 1]),\n    dict(dataset=[8, 6, 4, 2, 1, 0]),\n    dict(dataset=[1, 2, 3, 4, 5, 6])\n]\nexamples += [\n    dict(dataset=[1, 1, 1, 1, 1, 1]),\n    dict(dataset=[2, 2, 2, 2, 2, 2]),\n    dict(dataset=[10, 10, 10, 10, 10, 10]),\n    dict(dataset=[0, 0, 0, 0, 0, 0]),\n    dict(dataset=[5, 3, 2, 2, 1, 0]),\n    dict(dataset=[20, 15, 10, 5, 3, 1]),\n    dict(dataset=[100, 90, 80, 70, 60, 50]),\n    dict(dataset=[0, 1, 0, 1, 0, 1]),\n    dict(dataset=[30, 25, 20, 15, 10, 5]),\n    dict(dataset=[50, 40, 30, 20, 10, 0])\n]", "code": "def calc(dataset):\n    dominant_genotype_table, expected_value = [1.0, 1.0, 1.0, 0.75, 0.5, 0], 0\n    for n in range(6):\n        expected_value += 2 * dataset[n] * dominant_genotype_table[n]\n    return expected_value\n", "func_name": "calc", "exec_status": true, "example_inputs": ["\"{'dataset': [1, 1, 1, 1, 1, 1]}\"", "\"{'dataset': [0, 0, 0, 0, 0, 0]}\"", "\"{'dataset': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5]}\"", "\"{'dataset': [2, 2, 2, 2, 2, 2]}\"", "\"{'dataset': [10, 10, 10, 10, 10, 10]}\"", "\"{'dataset': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6]}\"", "\"{'dataset': [1, 2, 3, 4, 5, 6]}\"", "\"{'dataset': [6, 5, 4, 3, 2, 1]}\"", "\"{'dataset': [0.01, 0.02, 0.03, 0.04, 0.05, 0.06]}\"", "\"{'dataset': [100, 100, 100, 100, 100, 100]}\""], "example_outputs": [{"return": "\"8.5\""}, {"return": "\"0.0\""}, {"return": "\"4.25\""}, {"return": "\"17.0\""}, {"return": "\"85.0\""}, {"return": "\"2.3000000000000003\""}, {"return": "\"23.0\""}, {"return": "\"36.5\""}, {"return": "\"0.22999999999999998\""}, {"return": "\"850.0\""}, {"return": "\"8.5\""}, {"return": "\"17.0\""}, {"return": "\"0.0\""}, {"return": "\"85.0\""}, {"return": "\"27.0\""}, {"return": "\"3.5\""}, {"return": "\"5.0\""}, {"return": "\"37.0\""}, {"return": "\"40.0\""}, {"return": "\"23.0\""}, {"return": "\"8.5\""}, {"return": "\"17.0\""}, {"return": "\"85.0\""}, {"return": "\"0.0\""}, {"return": "\"24.0\""}, {"return": "\"100.5\""}, {"return": "\"705.0\""}, {"return": "\"3.5\""}, {"return": "\"182.5\""}, {"return": "\"280.0\""}], "parsed_inputs": [[["dataset", "[1, 1, 1, 1, 1, 1]"]], [["dataset", "[0, 0, 0, 0, 0, 0]"]], [["dataset", "[0.5, 0.5, 0.5, 0.5, 0.5, 0.5]"]], [["dataset", "[2, 2, 2, 2, 2, 2]"]], [["dataset", "[10, 10, 10, 10, 10, 10]"]], [["dataset", "[0.1, 0.2, 0.3, 0.4, 0.5, 0.6]"]], [["dataset", "[1, 2, 3, 4, 5, 6]"]], [["dataset", "[6, 5, 4, 3, 2, 1]"]], [["dataset", "[0.01, 0.02, 0.03, 0.04, 0.05, 0.06]"]], [["dataset", "[100, 100, 100, 100, 100, 100]"]]], "exec_code": "def calc(dataset):\n    dominant_genotype_table, expected_value = [1.0, 1.0, 1.0, 0.75, 0.5, 0], 0\n    for n in range(6):\n        expected_value += 2 * dataset[n] * dominant_genotype_table[n]\n    return expected_value\n", "output": "The function is:\n\n```python\ndef calc(dataset):\n    dominant_genotype_table, expected_value = [1.0, 1.0, 1.0, 0.75, 0.5, 0], 0\n    for n in range(6):\n        expected_value += 2 * dataset[n] * dominant_genotype_table[n]\n    return expected_value\n\n```", "choosed_example_idx": [1, 9, 2, 0, 6, 7, 8], "prompt": "Input: dict(dataset=[0, 0, 0, 0, 0, 0]), Output: \"0.0\"\nInput: dict(dataset=[100, 100, 100, 100, 100, 100]), Output: \"850.0\"\nInput: dict(dataset=[0.5, 0.5, 0.5, 0.5, 0.5, 0.5]), Output: \"4.25\"\nInput: dict(dataset=[1, 1, 1, 1, 1, 1]), Output: \"8.5\"\nInput: dict(dataset=[1, 2, 3, 4, 5, 6]), Output: \"23.0\"\nInput: dict(dataset=[6, 5, 4, 3, 2, 1]), Output: \"36.5\"\nInput: dict(dataset=[0.01, 0.02, 0.03, 0.04, 0.05, 0.06]), Output: \"0.22999999999999998\"\n\nFunction: calc\n\nWrite a function that generates the output from the input.\n", "id": "12c92ab93113cd799a14034b38931ba9c5f23af6_0"}
{"example_str": "examples = [\n    dict(a=2, b=3),\n    dict(a=4.5, b=2),\n    dict(a=1, b=1),\n    dict(a=0, b=5),\n    dict(a=-2, b=3),\n    dict(a=2, b=-3),\n    dict(a=0, b=0),\n    dict(a=10, b=0.5),\n    dict(a=3, b=3),\n    dict(a=-1, b=-1),\n]\nexamples += [\n    dict(a=5, b=3),         # Example with two integers\n    dict(a=10.5, b=2),      # Example with a float and an integer\n    dict(a=2, b=0.5),       # Example with an integer and a float\n    dict(a=-1, b=8),        # Example with a negative integer and a positive integer\n    dict(a=3, b=-7),        # Example with a positive integer and a negative integer\n    dict(a=0, b=100),       # Example with zero and a positive integer\n    dict(a='Hello ', b=3),  # Example with a string and an integer\n    dict(a=3, b='Hi'),      # Example with an integer and a string (will raise an error)\n    dict(a=[1,2], b=3),     # Example with a list and an integer\n    dict(a=1.5, b=1.5)      # Example with two floats\n]\nexamples += [\n    dict(a=5, b=3),        # Multiplying two integers\n    dict(a=10.5, b=2),     # Multiplying a float and an integer\n    dict(a=2, b=3.5),      # Multiplying an integer and a float\n    dict(a='Hello ', b=3), # Multiplying a string and an integer (repetition)\n    dict(a=3, b='Hi'),     # Multiplying an integer and a string (repetition)\n    dict(a=[1, 2], b=3),   # Multiplying a list by an integer (repetition)\n    dict(a=0.5, b=4),      # Multiplying a float by an integer\n    dict(a=3, b=0.5),      # Multiplying an integer by a float\n    dict(a=-1, b=10),      # Multiplying a negative integer by a positive integer\n    dict(a=3, b=-2)        # Multiplying a positive integer by a negative integer\n]", "code": "def mult(a, b):\n    return a * b\n", "func_name": "mult", "exec_status": true, "example_inputs": ["\"{'a': 2, 'b': 3}\"", "\"{'a': 4.5, 'b': 2}\"", "\"{'a': 1, 'b': 1}\"", "\"{'a': 0, 'b': 5}\"", "\"{'a': -2, 'b': 3}\"", "\"{'a': 2, 'b': -3}\"", "\"{'a': 0, 'b': 0}\"", "\"{'a': 10, 'b': 0.5}\"", "\"{'a': 3, 'b': 3}\"", "\"{'a': -1, 'b': -1}\""], "example_outputs": [{"return": "\"6\""}, {"return": "\"9.0\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"-6\""}, {"return": "\"-6\""}, {"return": "\"0\""}, {"return": "\"5.0\""}, {"return": "\"9\""}, {"return": "\"1\""}, {"return": "\"15\""}, {"return": "\"21.0\""}, {"return": "\"1.0\""}, {"return": "\"-8\""}, {"return": "\"-21\""}, {"return": "\"0\""}, {"return": "\"'Hello Hello Hello '\""}, {"return": "\"'HiHiHi'\""}, {"return": "\"[1, 2, 1, 2, 1, 2]\""}, {"return": "\"2.25\""}, {"return": "\"15\""}, {"return": "\"21.0\""}, {"return": "\"7.0\""}, {"return": "\"'Hello Hello Hello '\""}, {"return": "\"'HiHiHi'\""}, {"return": "\"[1, 2, 1, 2, 1, 2]\""}, {"return": "\"2.0\""}, {"return": "\"1.5\""}, {"return": "\"-10\""}, {"return": "\"-6\""}], "parsed_inputs": [[["a", "2"], ["b", "3"]], [["a", "4.5"], ["b", "2"]], [["a", "1"], ["b", "1"]], [["a", "0"], ["b", "5"]], [["a", "-2"], ["b", "3"]], [["a", "2"], ["b", "-3"]], [["a", "0"], ["b", "0"]], [["a", "10"], ["b", "0.5"]], [["a", "3"], ["b", "3"]], [["a", "-1"], ["b", "-1"]]], "exec_code": "def mult(a, b):\n    return a * b\n", "output": "The function is:\n\n```python\ndef mult(a, b):\n    return a * b\n\n```", "choosed_example_idx": [6, 3, 5, 2, 8], "prompt": "Input: dict(a=0, b=0), Output: \"0\"\nInput: dict(a=0, b=5), Output: \"0\"\nInput: dict(a=2, b=-3), Output: \"-6\"\nInput: dict(a=1, b=1), Output: \"1\"\nInput: dict(a=3, b=3), Output: \"9\"\n\nWrite a function that generates the output from the input.\nFunction: mult\n", "id": "b4115e4504f6242dce3b39833f994e1f730a9667_0"}
{"example_str": "examples = [\n    dict(line=\"Hello World\\n\"),\n    dict(line=\"This is a test string\\r\"),\n    dict(line=\"Hello\\nWorld\"),\n    dict(line=\"This is a test string with multiple linebreaks\\n\\r\\n\"),\n    dict(line=\"   Leading and trailing spaces   \\n\"),\n    dict(line=\"Only a linebreak\\n\"),\n    dict(line=\"No linebreak at all\"),\n    dict(line=\"Multiple leading linebreaks\\n\\n\\nHello\"),\n    dict(line=\"Multiple trailing linebreaks\\nHello World\\n\\n\\n\"),\n    dict(line=\"Mixed linebreaks\\r\\nHello World\\r\\n\"),\n    dict(line=\"\"),\n]\nexamples += [\n    dict(line=\"Hello, world!\\n\"),\n    dict(line=\"\\tHello, world!   \"),\n    dict(line=\"\\n\\nMultiple line breaks before\"),\n    dict(line=\"Trailing spaces   \"),\n    dict(line=\"   Leading spaces\"),\n    dict(line=\"\\t\\tTabs and \\n new lines\\n\"),\n    dict(line=\"No extra whitespace\"),\n    dict(line=\"Ends with a tab\\t\"),\n    dict(line=\"\\rCarriage return character\"),\n    dict(line=\"\\nStarts and ends with line breaks\\n\")\n]\nexamples += [\n    dict(line=\"Hello, world!\\n\"),\n    dict(line=\"\\tHello, Python.\\t\"),\n    dict(line=\"   Leading space\"),\n    dict(line=\"Trailing space   \"),\n    dict(line=\"\\nNew line character at start\"),\n    dict(line=\"Ends with new line\\n\"),\n    dict(line=\" \\t\\n Mixed white spaces \\t\\n \"),\n    dict(line=\"No extra whitespace\"),\n    dict(line=\"\\nMultiple\\nLine\\nBreaks\\n\"),\n    dict(line=\"Tabs\\t\\tand\\nNew Lines\\n\")\n]", "code": "def remove_linebreak(line):\n    return line.strip()\n", "func_name": "remove_linebreak", "exec_status": true, "example_inputs": ["\"{'line': 'Hello World\\\\n'}\"", "\"{'line': 'This is a test string\\\\r'}\"", "\"{'line': 'Hello\\\\nWorld'}\"", "\"{'line': 'This is a test string with multiple linebreaks\\\\n\\\\r\\\\n'}\"", "\"{'line': '   Leading and trailing spaces   \\\\n'}\"", "\"{'line': 'Only a linebreak\\\\n'}\"", "\"{'line': 'No linebreak at all'}\"", "\"{'line': 'Multiple leading linebreaks\\\\n\\\\n\\\\nHello'}\"", "\"{'line': 'Multiple trailing linebreaks\\\\nHello World\\\\n\\\\n\\\\n'}\"", "\"{'line': 'Mixed linebreaks\\\\r\\\\nHello World\\\\r\\\\n'}\"", "\"{'line': ''}\""], "example_outputs": [{"return": "\"'Hello World'\""}, {"return": "\"'This is a test string'\""}, {"return": "\"'Hello\\\\nWorld'\""}, {"return": "\"'This is a test string with multiple linebreaks'\""}, {"return": "\"'Leading and trailing spaces'\""}, {"return": "\"'Only a linebreak'\""}, {"return": "\"'No linebreak at all'\""}, {"return": "\"'Multiple leading linebreaks\\\\n\\\\n\\\\nHello'\""}, {"return": "\"'Multiple trailing linebreaks\\\\nHello World'\""}, {"return": "\"'Mixed linebreaks\\\\r\\\\nHello World'\""}, {"return": "\"''\""}, {"return": "\"'Hello, world!'\""}, {"return": "\"'Hello, world!'\""}, {"return": "\"'Multiple line breaks before'\""}, {"return": "\"'Trailing spaces'\""}, {"return": "\"'Leading spaces'\""}, {"return": "\"'Tabs and \\\\n new lines'\""}, {"return": "\"'No extra whitespace'\""}, {"return": "\"'Ends with a tab'\""}, {"return": "\"'Carriage return character'\""}, {"return": "\"'Starts and ends with line breaks'\""}, {"return": "\"'Hello, world!'\""}, {"return": "\"'Hello, Python.'\""}, {"return": "\"'Leading space'\""}, {"return": "\"'Trailing space'\""}, {"return": "\"'New line character at start'\""}, {"return": "\"'Ends with new line'\""}, {"return": "\"'Mixed white spaces'\""}, {"return": "\"'No extra whitespace'\""}, {"return": "\"'Multiple\\\\nLine\\\\nBreaks'\""}, {"return": "\"'Tabs\\\\t\\\\tand\\\\nNew Lines'\""}], "parsed_inputs": [[["line", "\"Hello World\\n\""]], [["line", "\"This is a test string\\r\""]], [["line", "\"Hello\\nWorld\""]], [["line", "\"This is a test string with multiple linebreaks\\n\\r\\n\""]], [["line", "\"   Leading and trailing spaces   \\n\""]], [["line", "\"Only a linebreak\\n\""]], [["line", "\"No linebreak at all\""]], [["line", "\"Multiple leading linebreaks\\n\\n\\nHello\""]], [["line", "\"Multiple trailing linebreaks\\nHello World\\n\\n\\n\""]], [["line", "\"Mixed linebreaks\\r\\nHello World\\r\\n\""]], [["line", "\"\""]]], "exec_code": "def remove_linebreak(line):\n    return line.strip()\n", "output": "The function is:\n\n```python\ndef remove_linebreak(line):\n    return line.strip()\n\n```", "choosed_example_idx": [10, 6, 7], "prompt": "Input: dict(line=\"\"), Output: \"''\"\nInput: dict(line=\"No linebreak at all\"), Output: \"'No linebreak at all'\"\nInput: dict(line=\"Multiple leading linebreaks\\n\\n\\nHello\"), Output: \"'Multiple leading linebreaks\\\\n\\\\n\\\\nHello'\"\n\nWrite a function that generates the output from the input.\n\n\nFunction: remove_linebreak\n", "id": "04ecfb7fd7584620d832ae8fabaac75a5ed689fe_0"}
{"example_str": "examples = [\n    dict(num=2),\n    dict(num=3),\n    dict(num=4),\n    dict(num=5),\n    dict(num=6),\n    dict(num=7),\n    dict(num=8),\n    dict(num=9),\n    dict(num=10),\n    dict(num=11),\n]\nexamples += [\n    dict(num=2),    # Prime number\n    dict(num=3),    # Prime number\n    dict(num=4),    # Not a prime number\n    dict(num=17),   # Prime number\n    dict(num=18),   # Not a prime number\n    dict(num=29),   # Prime number\n    dict(num=49),   # Not a prime number (7*7)\n    dict(num=97),   # Prime number\n    dict(num=100),  # Not a prime number (10*10)\n    dict(num=113)   # Prime number\n]\nexamples += [\n    dict(num=2),\n    dict(num=3),\n    dict(num=4),\n    dict(num=5),\n    dict(num=6),\n    dict(num=7),\n    dict(num=8),\n    dict(num=9),\n    dict(num=10),\n    dict(num=11)\n]", "code": "def is_prime(num):\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n        i += 1\n    return True\n", "func_name": "is_prime", "exec_status": true, "example_inputs": ["\"{'num': 2}\"", "\"{'num': 3}\"", "\"{'num': 4}\"", "\"{'num': 5}\"", "\"{'num': 6}\"", "\"{'num': 7}\"", "\"{'num': 8}\"", "\"{'num': 9}\"", "\"{'num': 10}\"", "\"{'num': 11}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}], "parsed_inputs": [[["num", "2"]], [["num", "3"]], [["num", "4"]], [["num", "5"]], [["num", "6"]], [["num", "7"]], [["num", "8"]], [["num", "9"]], [["num", "10"]], [["num", "11"]]], "exec_code": "def is_prime(num):\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n        i += 1\n    return True\n", "output": "The function is:\n\n```python\ndef is_prime(num):\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n        i += 1\n    return True\n\n```", "choosed_example_idx": [2, 6, 0], "prompt": "Input: dict(num=4), Output: \"False\"\nInput: dict(num=8), Output: \"False\"\nInput: dict(num=2), Output: \"True\"\n\n\n\nFunction: is_prime\nWrite a function that generates the output from the input.\n", "id": "50ac1022ea14352877c1087b8aca2883d0d788a9_0"}
{"example_str": "examples = [\n    dict(strs=[\"apple\", \"banana\", \"cherry\"], s=\"banana\"),\n    dict(strs=[\"hello\", \"world\"], s=\"hello\"),\n    dict(strs=[\"a\", \"b\", \"c\"], s=\"c\"),\n    dict(strs=[\"python\", \"java\", \"c++\"], s=\"java\"),\n    dict(strs=[\"one\", \"two\", \"three\"], s=\"two\"),\n    dict(strs=[\"x\", \"y\", \"z\"], s=\"x\"),\n    dict(strs=[\"red\", \"green\", \"blue\"], s=\"green\"),\n    dict(strs=[\"car\", \"bike\", \"bus\"], s=\"bus\"),\n    dict(strs=[\"book\", \"pen\", \"paper\"], s=\"pen\"),\n    dict(strs=[\"apple\", \"banana\", \"cherry\"], s=\"orange\"),\n]\nexamples += [\n    dict(strs=[\"apple\", \"banana\", \"cherry\"], s=\"banana\"),\n    dict(strs=[\"hello\", \"world\"], s=\"world\"),\n    dict(strs=[\"test\", \"test\", \"test\"], s=\"test\"),\n    dict(strs=[\"123\", \"456\", \"789\"], s=\"456\"),\n    dict(strs=[\"first\", \"second\", \"third\", \"fourth\"], s=\"third\"),\n    dict(strs=[\"python\", \"java\", \"c++\", \"ruby\"], s=\"java\"),\n    dict(strs=[\"one\", \"two\", \"three\"], s=\"four\"),  # s is not in strs\n    dict(strs=[\"red\", \"green\", \"blue\"], s=\"green\"),\n    dict(strs=[\"sun\", \"moon\", \"star\"], s=\"moon\"),\n    dict(strs=[\"cat\", \"dog\", \"bird\", \"fish\"], s=\"bird\")\n]\nexamples += [\n    dict(strs=[\"apple\", \"banana\", \"cherry\"], s=\"banana\"),\n    dict(strs=[\"hello\", \"world\", \"test\"], s=\"world\"),\n    dict(strs=[\"one\", \"two\", \"three\"], s=\"four\"),\n    dict(strs=[\"python\", \"java\", \"c++\"], s=\"java\"),\n    dict(strs=[\"red\", \"blue\", \"green\"], s=\"blue\"),\n    dict(strs=[\"monday\", \"tuesday\", \"wednesday\"], s=\"friday\"),\n    dict(strs=[\"cat\", \"dog\", \"bird\"], s=\"dog\"),\n    dict(strs=[\"car\", \"bike\", \"plane\"], s=\"bike\"),\n    dict(strs=[\"x\", \"y\", \"z\"], s=\"z\"),\n    dict(strs=[\"first\", \"second\", \"third\"], s=\"second\")\n]", "code": "def finds(strs, s):\n    for i in range(len(strs)):\n        if strs[i] == s:\n            return i\n", "func_name": "finds", "exec_status": true, "example_inputs": ["\"{'strs': ['apple', 'banana', 'cherry'], 's': 'banana'}\"", "\"{'strs': ['hello', 'world'], 's': 'hello'}\"", "\"{'strs': ['a', 'b', 'c'], 's': 'c'}\"", "\"{'strs': ['python', 'java', 'c++'], 's': 'java'}\"", "\"{'strs': ['one', 'two', 'three'], 's': 'two'}\"", "\"{'strs': ['x', 'y', 'z'], 's': 'x'}\"", "\"{'strs': ['red', 'green', 'blue'], 's': 'green'}\"", "\"{'strs': ['car', 'bike', 'bus'], 's': 'bus'}\"", "\"{'strs': ['book', 'pen', 'paper'], 's': 'pen'}\"", "\"{'strs': ['apple', 'banana', 'cherry'], 's': 'orange'}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"None\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"None\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"None\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"None\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"1\""}], "parsed_inputs": [[["strs", "['apple', 'banana', 'cherry']"], ["s", "\"banana\""]], [["strs", "['hello', 'world']"], ["s", "\"hello\""]], [["strs", "['a', 'b', 'c']"], ["s", "\"c\""]], [["strs", "['python', 'java', 'c++']"], ["s", "\"java\""]], [["strs", "['one', 'two', 'three']"], ["s", "\"two\""]], [["strs", "['x', 'y', 'z']"], ["s", "\"x\""]], [["strs", "['red', 'green', 'blue']"], ["s", "\"green\""]], [["strs", "['car', 'bike', 'bus']"], ["s", "\"bus\""]], [["strs", "['book', 'pen', 'paper']"], ["s", "\"pen\""]], [["strs", "['apple', 'banana', 'cherry']"], ["s", "\"orange\""]]], "exec_code": "def finds(strs, s):\n    for i in range(len(strs)):\n        if strs[i] == s:\n            return i\n", "output": "The function is:\n\n```python\ndef finds(strs, s):\n    for i in range(len(strs)):\n        if strs[i] == s:\n            return i\n\n```", "choosed_example_idx": [7, 6, 0, 4, 8, 1, 5], "prompt": "Function: finds\nWrite a function that generates the output from the input.\nInput: dict(strs=['car', 'bike', 'bus'], s=\"bus\"), Output: \"2\"\nInput: dict(strs=['red', 'green', 'blue'], s=\"green\"), Output: \"1\"\nInput: dict(strs=['apple', 'banana', 'cherry'], s=\"banana\"), Output: \"1\"\nInput: dict(strs=['one', 'two', 'three'], s=\"two\"), Output: \"1\"\nInput: dict(strs=['book', 'pen', 'paper'], s=\"pen\"), Output: \"1\"\nInput: dict(strs=['hello', 'world'], s=\"hello\"), Output: \"0\"\nInput: dict(strs=['x', 'y', 'z'], s=\"x\"), Output: \"0\"\n\n\n", "id": "1320357ddb6d2aaf14228821e77259e262648324_0"}
{"example_str": "examples = [\n    dict(p=12, q=15),\n    dict(p=24, q=30),\n    dict(p=48, q=18),\n    dict(p=100, q=75),\n    dict(p=7, q=0),\n    dict(p=0, q=9),\n    dict(p=11, q=13),\n    dict(p=25, q=5),\n    dict(p=36, q=24),\n    dict(p=50, q=30),\n]\nexamples += [\n    dict(p=15, q=5),\n    dict(p=36, q=60),\n    dict(p=49, q=14),\n    dict(p=1071, q=462),\n    dict(p=0, q=10),\n    dict(p=10, q=0),\n    dict(p=-25, q=5),\n    dict(p=5, q=-25),\n    dict(p=-12, q=-15),\n    dict(p=123456, q=789012)\n]\nexamples += [\n    dict(p=12, q=15),\n    dict(p=100, q=50),\n    dict(p=35, q=10),\n    dict(p=81, q=27),\n    dict(p=7, q=3),\n    dict(p=24, q=36),\n    dict(p=17, q=31),\n    dict(p=56, q=42),\n    dict(p=90, q=45),\n    dict(p=25, q=5)\n]", "code": "def gcd(p, q):\n    if q == 0:\n        return p\n    else:\n        r = p % q\n        return gcd(q, r)\n", "func_name": "gcd", "exec_status": true, "example_inputs": ["\"{'p': 12, 'q': 15}\"", "\"{'p': 24, 'q': 30}\"", "\"{'p': 48, 'q': 18}\"", "\"{'p': 100, 'q': 75}\"", "\"{'p': 7, 'q': 0}\"", "\"{'p': 0, 'q': 9}\"", "\"{'p': 11, 'q': 13}\"", "\"{'p': 25, 'q': 5}\"", "\"{'p': 36, 'q': 24}\"", "\"{'p': 50, 'q': 30}\""], "example_outputs": [{"return": "\"3\""}, {"return": "\"6\""}, {"return": "\"6\""}, {"return": "\"25\""}, {"return": "\"7\""}, {"return": "\"9\""}, {"return": "\"1\""}, {"return": "\"5\""}, {"return": "\"12\""}, {"return": "\"10\""}, {"return": "\"5\""}, {"return": "\"12\""}, {"return": "\"7\""}, {"return": "\"21\""}, {"return": "\"10\""}, {"return": "\"10\""}, {"return": "\"5\""}, {"return": "\"-5\""}, {"return": "\"-3\""}, {"return": "\"12\""}, {"return": "\"3\""}, {"return": "\"50\""}, {"return": "\"5\""}, {"return": "\"27\""}, {"return": "\"1\""}, {"return": "\"12\""}, {"return": "\"1\""}, {"return": "\"14\""}, {"return": "\"45\""}, {"return": "\"5\""}], "parsed_inputs": [[["p", "12"], ["q", "15"]], [["p", "24"], ["q", "30"]], [["p", "48"], ["q", "18"]], [["p", "100"], ["q", "75"]], [["p", "7"], ["q", "0"]], [["p", "0"], ["q", "9"]], [["p", "11"], ["q", "13"]], [["p", "25"], ["q", "5"]], [["p", "36"], ["q", "24"]], [["p", "50"], ["q", "30"]]], "exec_code": "def gcd(p, q):\n    if q == 0:\n        return p\n    else:\n        r = p % q\n        return gcd(q, r)\n", "output": "The function is:\n\n```python\ndef gcd(p, q):\n    if q == 0:\n        return p\n    else:\n        r = p % q\n        return gcd(q, r)\n\n```", "choosed_example_idx": [3, 9, 7, 5, 6, 8, 1, 0], "prompt": "Input: dict(p=100, q=75), Output: \"25\"\nInput: dict(p=50, q=30), Output: \"10\"\nInput: dict(p=25, q=5), Output: \"5\"\nInput: dict(p=0, q=9), Output: \"9\"\nInput: dict(p=11, q=13), Output: \"1\"\nInput: dict(p=36, q=24), Output: \"12\"\nInput: dict(p=24, q=30), Output: \"6\"\nInput: dict(p=12, q=15), Output: \"3\"\n\nWrite a function that generates the output from the input.\nFunction: gcd\n", "id": "d5c999b88f98a31215951a7d7382fd72f902548c_0"}
{"example_str": "examples = [\n    dict(l=[\"a\", \"b\", \"c\", \"d\", \"e\"]),\n    dict(l=[\"hello\", \"world\", \"python\", \"programming\"]),\n    dict(l=[\"x\", \"y\", \"z\"]),\n    dict(l=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]),\n    dict(l=[\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]),\n    dict(l=[\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"]),\n    dict(l=[\"python\", \"is\", \"fun\", \"to\", \"learn\"]),\n    dict(l=[\"a\", \"b\", \"c\"]),\n    dict(l=[\"hello\", \"world\"]),\n    dict(l=[\"x\", \"y\", \"z\", \"x\", \"y\", \"z\"]),\n]\nexamples += [\n    dict(l=[\"a\", \"b\", \"c\", \"d\", \"e\"]),\n    dict(l=[\"hello\", \"world\"]),\n    dict(l=[\"x\"]),\n    dict(l=[\"foo\", \"bar\", \"baz\", \"qux\", \"quux\", \"corge\"]),\n    dict(l=[]),\n    dict(l=[\"123\", \"456\", \"789\"]),\n    dict(l=[\"apple\", \"banana\", \"cherry\", \"date\"]),\n    dict(l=[\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"]),\n    dict(l=[\"cat\", \"dog\"]),\n    dict(l=[\"red\", \"green\", \"blue\", \"yellow\", \"black\", \"white\", \"pink\", \"gray\"])\n]\nexamples += [\n    dict(l=[\"a\", \"b\", \"c\", \"d\", \"e\"]),\n    dict(l=[\"hello\", \"world\"]),\n    dict(l=[\"x\", \"y\", \"z\", \"1\", \"2\", \"3\"]),\n    dict(l=[\"apple\", \"banana\", \"cherry\"]),\n    dict(l=[\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]),\n    dict(l=[\"cat\", \"dog\", \"mouse\", \"elephant\"]),\n    dict(l=[\"sun\", \"moon\", \"star\"]),\n    dict(l=[\"red\", \"green\", \"blue\", \"yellow\"]),\n    dict(l=[\"one\", \"two\", \"three\", \"four\", \"five\"]),\n    dict(l=[\"alpha\", \"beta\", \"gamma\", \"delta\", \"epsilon\", \"zeta\"])\n]", "code": "def multiply_strings(l):\n    length = len(l)\n    for i in range(0, length, 2):\n        l[i] = l[i] * 2\n    for i in range(0, length):\n        if i % 3 == 0:\n            l[i] = l[i] * 3\n    return l\n", "func_name": "multiply_strings", "exec_status": true, "example_inputs": ["\"{'l': ['a', 'b', 'c', 'd', 'e']}\"", "\"{'l': ['hello', 'world', 'python', 'programming']}\"", "\"{'l': ['x', 'y', 'z']}\"", "\"{'l': ['apple', 'banana', 'cherry', 'date', 'elderberry']}\"", "\"{'l': ['1', '2', '3', '4', '5', '6']}\"", "\"{'l': ['abc', 'def', 'ghi', 'jkl', 'mno']}\"", "\"{'l': ['python', 'is', 'fun', 'to', 'learn']}\"", "\"{'l': ['a', 'b', 'c']}\"", "\"{'l': ['hello', 'world']}\"", "\"{'l': ['x', 'y', 'z', 'x', 'y', 'z']}\""], "example_outputs": [{"return": "\"['aaaaaa', 'b', 'cc', 'ddd', 'ee']\""}, {"return": "\"['hellohellohellohellohellohello', 'world', 'pythonpython', 'programmingprogrammingprogramming']\""}, {"return": "\"['xxxxxx', 'y', 'zz']\""}, {"return": "\"['appleappleappleappleappleapple', 'banana', 'cherrycherry', 'datedatedate', 'elderberryelderberry']\""}, {"return": "\"['111111', '2', '33', '444', '55', '6']\""}, {"return": "\"['abcabcabcabcabcabc', 'def', 'ghighi', 'jkljkljkl', 'mnomno']\""}, {"return": "\"['pythonpythonpythonpythonpythonpython', 'is', 'funfun', 'tototo', 'learnlearn']\""}, {"return": "\"['aaaaaa', 'b', 'cc']\""}, {"return": "\"['hellohellohellohellohellohello', 'world']\""}, {"return": "\"['xxxxxx', 'y', 'zz', 'xxx', 'yy', 'z']\""}, {"return": "\"['aaaaaa', 'b', 'cc', 'ddd', 'ee']\""}, {"return": "\"['hellohellohellohellohellohello', 'world']\""}, {"return": "\"['xxxxxx']\""}, {"return": "\"['foofoofoofoofoofoo', 'bar', 'bazbaz', 'quxquxqux', 'quuxquux', 'corge']\""}, {"return": "\"[]\""}, {"return": "\"['123123123123123123', '456', '789789']\""}, {"return": "\"['appleappleappleappleappleapple', 'banana', 'cherrycherry', 'datedatedate']\""}, {"return": "\"['oneoneoneoneoneone', 'two', 'threethree', 'fourfourfour', 'fivefive', 'six', 'sevensevensevensevensevenseven']\""}, {"return": "\"['catcatcatcatcatcat', 'dog']\""}, {"return": "\"['redredredredredred', 'green', 'blueblue', 'yellowyellowyellow', 'blackblack', 'white', 'pinkpinkpinkpinkpinkpink', 'gray']\""}, {"return": "\"['aaaaaa', 'b', 'cc', 'ddd', 'ee']\""}, {"return": "\"['hellohellohellohellohellohello', 'world']\""}, {"return": "\"['xxxxxx', 'y', 'zz', '111', '22', '3']\""}, {"return": "\"['appleappleappleappleappleapple', 'banana', 'cherrycherry']\""}, {"return": "\"['111111', '2', '33', '444', '55', '6', '777777']\""}, {"return": "\"['catcatcatcatcatcat', 'dog', 'mousemouse', 'elephantelephantelephant']\""}, {"return": "\"['sunsunsunsunsunsun', 'moon', 'starstar']\""}, {"return": "\"['redredredredredred', 'green', 'blueblue', 'yellowyellowyellow']\""}, {"return": "\"['oneoneoneoneoneone', 'two', 'threethree', 'fourfourfour', 'fivefive']\""}, {"return": "\"['alphaalphaalphaalphaalphaalpha', 'beta', 'gammagamma', 'deltadeltadelta', 'epsilonepsilon', 'zeta']\""}], "parsed_inputs": [[["l", "['a', 'b', 'c', 'd', 'e']"]], [["l", "['hello', 'world', 'python', 'programming']"]], [["l", "['x', 'y', 'z']"]], [["l", "['apple', 'banana', 'cherry', 'date', 'elderberry']"]], [["l", "['1', '2', '3', '4', '5', '6']"]], [["l", "['abc', 'def', 'ghi', 'jkl', 'mno']"]], [["l", "['python', 'is', 'fun', 'to', 'learn']"]], [["l", "['a', 'b', 'c']"]], [["l", "['hello', 'world']"]], [["l", "['x', 'y', 'z', 'x', 'y', 'z']"]]], "exec_code": "def multiply_strings(l):\n    length = len(l)\n    for i in range(0, length, 2):\n        l[i] = l[i] * 2\n    for i in range(0, length):\n        if i % 3 == 0:\n            l[i] = l[i] * 3\n    return l\n", "output": "The function is:\n\n```python\ndef multiply_strings(l):\n    length = len(l)\n    for i in range(0, length, 2):\n        l[i] = l[i] * 2\n    for i in range(0, length):\n        if i % 3 == 0:\n            l[i] = l[i] * 3\n    return l\n\n```", "choosed_example_idx": [8, 3, 7, 9, 6, 0, 4, 1], "prompt": "Function: multiply_strings\nWrite a function that generates the output from the input.\nInput: dict(l=['hello', 'world']), Output: \"['hellohellohellohellohellohello', 'world']\"\nInput: dict(l=['apple', 'banana', 'cherry', 'date', 'elderberry']), Output: \"['appleappleappleappleappleapple', 'banana', 'cherrycherry', 'datedatedate', 'elderberryelderberry']\"\nInput: dict(l=['a', 'b', 'c']), Output: \"['aaaaaa', 'b', 'cc']\"\nInput: dict(l=['x', 'y', 'z', 'x', 'y', 'z']), Output: \"['xxxxxx', 'y', 'zz', 'xxx', 'yy', 'z']\"\nInput: dict(l=['python', 'is', 'fun', 'to', 'learn']), Output: \"['pythonpythonpythonpythonpythonpython', 'is', 'funfun', 'tototo', 'learnlearn']\"\nInput: dict(l=['a', 'b', 'c', 'd', 'e']), Output: \"['aaaaaa', 'b', 'cc', 'ddd', 'ee']\"\nInput: dict(l=['1', '2', '3', '4', '5', '6']), Output: \"['111111', '2', '33', '444', '55', '6']\"\nInput: dict(l=['hello', 'world', 'python', 'programming']), Output: \"['hellohellohellohellohellohello', 'world', 'pythonpython', 'programmingprogrammingprogramming']\"\n\n", "id": "13590664b8b1c14b223e250b81794e4ee7e3624e_0"}
{"example_str": "examples = [\n    dict(clicker_email='user1@example.com', text='Technical Issue'),\n    dict(clicker_email='user2@example.com', text='Feature Request'),\n    dict(clicker_email='user3@example.com', text='Billing Inquiry'),\n    dict(clicker_email='user4@example.com', text='Account Issue'),\n    dict(clicker_email='user5@example.com', text='General Question'),\n    dict(clicker_email='user6@example.com', text='Feedback'),\n    dict(clicker_email='user7@example.com', text='Complaint'),\n    dict(clicker_email='user8@example.com', text='Suggestion'),\n    dict(clicker_email='user9@example.com', text='Bug Report'),\n    dict(clicker_email='user10@example.com', text='Other'),\n]\nexamples += [\n    dict(clicker_email=\"user1@example.com\", text=\"IT Support\"),\n    dict(clicker_email=\"user2@example.com\", text=\"HR Inquiry\"),\n    dict(clicker_email=\"user3@example.com\", text=\"Facilities\"),\n    dict(clicker_email=\"user4@example.com\", text=\"Payroll Query\"),\n    dict(clicker_email=\"user5@example.com\", text=\"Software Issue\"),\n    dict(clicker_email=\"user6@example.com\", text=\"Hardware Request\"),\n    dict(clicker_email=\"user7@example.com\", text=\"Account Access\"),\n    dict(clicker_email=\"user8@example.com\", text=\"Leave Application\"),\n    dict(clicker_email=\"user9@example.com\", text=\"Expense Reimbursement\"),\n    dict(clicker_email=\"user10@example.com\", text=\"Feedback\")\n]\nexamples += [\n    dict(clicker_email=\"user1@example.com\", text=\"Bug Report\"),\n    dict(clicker_email=\"user2@example.com\", text=\"Feature Request\"),\n    dict(clicker_email=\"user3@example.com\", text=\"Account Issue\"),\n    dict(clicker_email=\"user4@example.com\", text=\"Payment Problem\"),\n    dict(clicker_email=\"user5@example.com\", text=\"Technical Support\"),\n    dict(clicker_email=\"user6@example.com\", text=\"Subscription Inquiry\"),\n    dict(clicker_email=\"user7@example.com\", text=\"Feedback\"),\n    dict(clicker_email=\"user8@example.com\", text=\"Data Request\"),\n    dict(clicker_email=\"user9@example.com\", text=\"Compliance Question\"),\n    dict(clicker_email=\"user10@example.com\", text=\"Other\")\n]", "code": "def ticket_dialog(clicker_email, text):\n    return {'callback_id': 'open_ticket', 'title': 'Open New Ticket',\n        'submit_label': 'Submit', 'elements': [{'type': 'text', 'label':\n        'Email', 'name': 'email', 'subtype': 'email', 'value':\n        clicker_email}, {'type': 'text', 'label': 'Request Type', 'name':\n        'type', 'value': text}, {'type': 'textarea', 'label': 'Details',\n        'name': 'details'}]}\n", "func_name": "ticket_dialog", "exec_status": true, "example_inputs": ["\"{'clicker_email': 'user1@example.com', 'text': 'Technical Issue'}\"", "\"{'clicker_email': 'user2@example.com', 'text': 'Feature Request'}\"", "\"{'clicker_email': 'user3@example.com', 'text': 'Billing Inquiry'}\"", "\"{'clicker_email': 'user4@example.com', 'text': 'Account Issue'}\"", "\"{'clicker_email': 'user5@example.com', 'text': 'General Question'}\"", "\"{'clicker_email': 'user6@example.com', 'text': 'Feedback'}\"", "\"{'clicker_email': 'user7@example.com', 'text': 'Complaint'}\"", "\"{'clicker_email': 'user8@example.com', 'text': 'Suggestion'}\"", "\"{'clicker_email': 'user9@example.com', 'text': 'Bug Report'}\"", "\"{'clicker_email': 'user10@example.com', 'text': 'Other'}\""], "example_outputs": [{"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user1@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Technical Issue'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user2@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Feature Request'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user3@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Billing Inquiry'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user4@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Account Issue'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user5@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'General Question'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user6@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Feedback'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user7@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Complaint'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user8@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Suggestion'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user9@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Bug Report'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user10@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Other'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user1@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'IT Support'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user2@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'HR Inquiry'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user3@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Facilities'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user4@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Payroll Query'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user5@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Software Issue'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user6@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Hardware Request'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user7@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Account Access'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user8@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Leave Application'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user9@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Expense Reimbursement'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user10@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Feedback'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user1@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Bug Report'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user2@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Feature Request'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user3@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Account Issue'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user4@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Payment Problem'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user5@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Technical Support'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user6@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Subscription Inquiry'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user7@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Feedback'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user8@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Data Request'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user9@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Compliance Question'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}, {"return": "\"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user10@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Other'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\""}], "parsed_inputs": [[["clicker_email", "\"user1@example.com\""], ["text", "\"Technical Issue\""]], [["clicker_email", "\"user2@example.com\""], ["text", "\"Feature Request\""]], [["clicker_email", "\"user3@example.com\""], ["text", "\"Billing Inquiry\""]], [["clicker_email", "\"user4@example.com\""], ["text", "\"Account Issue\""]], [["clicker_email", "\"user5@example.com\""], ["text", "\"General Question\""]], [["clicker_email", "\"user6@example.com\""], ["text", "\"Feedback\""]], [["clicker_email", "\"user7@example.com\""], ["text", "\"Complaint\""]], [["clicker_email", "\"user8@example.com\""], ["text", "\"Suggestion\""]], [["clicker_email", "\"user9@example.com\""], ["text", "\"Bug Report\""]], [["clicker_email", "\"user10@example.com\""], ["text", "\"Other\""]]], "exec_code": "def ticket_dialog(clicker_email, text):\n    return {'callback_id': 'open_ticket', 'title': 'Open New Ticket',\n        'submit_label': 'Submit', 'elements': [{'type': 'text', 'label':\n        'Email', 'name': 'email', 'subtype': 'email', 'value':\n        clicker_email}, {'type': 'text', 'label': 'Request Type', 'name':\n        'type', 'value': text}, {'type': 'textarea', 'label': 'Details',\n        'name': 'details'}]}\n", "output": "The function is:\n\n```python\ndef ticket_dialog(clicker_email, text):\n    return {'callback_id': 'open_ticket', 'title': 'Open New Ticket',\n        'submit_label': 'Submit', 'elements': [{'type': 'text', 'label':\n        'Email', 'name': 'email', 'subtype': 'email', 'value':\n        clicker_email}, {'type': 'text', 'label': 'Request Type', 'name':\n        'type', 'value': text}, {'type': 'textarea', 'label': 'Details',\n        'name': 'details'}]}\n\n```", "choosed_example_idx": [6, 1, 7, 2], "prompt": "Write a function that generates the output from the input.\n\n\nInput: dict(clicker_email=\"user7@example.com\", text=\"Complaint\"), Output: \"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user7@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Complaint'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\"\nInput: dict(clicker_email=\"user2@example.com\", text=\"Feature Request\"), Output: \"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user2@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Feature Request'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\"\nInput: dict(clicker_email=\"user8@example.com\", text=\"Suggestion\"), Output: \"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user8@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Suggestion'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\"\nInput: dict(clicker_email=\"user3@example.com\", text=\"Billing Inquiry\"), Output: \"{'callback_id': 'open_ticket', 'title': 'Open New Ticket', 'submit_label': 'Submit', 'elements': [{'type': 'text', 'label': 'Email', 'name': 'email', 'subtype': 'email', 'value': 'user3@example.com'}, {'type': 'text', 'label': 'Request Type', 'name': 'type', 'value': 'Billing Inquiry'}, {'type': 'textarea', 'label': 'Details', 'name': 'details'}]}\"\n\n\nFunction: ticket_dialog\n", "id": "ab96ff67e10b5c69c98b4d9c52341ac74a8392da_0"}
{"example_str": "examples = [\n    dict(input=\"Hello World\"),\n    dict(input=\"(123)\"),\n    dict(input=\"abc def\"),\n    dict(input=\"(hello) world\"),\n    dict(input=\"123\"),\n    dict(input=\"(a b c)\"),\n    dict(input=\"\"),\n    dict(input=\"( )\"),\n    dict(input=\"!@#$%^&*()_+\"),\n    dict(input=\"Python is awesome\"),\n]\nexamples += [\n    dict(input=[1, 2, 3]),  # List of integers\n    dict(input=(4, 5, 6)),  # Tuple of integers\n    dict(input=\"Hello\"),    # String\n    dict(input=12345),      # Integer\n    dict(input=[(1,2), (3,4)]),  # List of tuples\n    dict(input=[]),         # Empty list\n    dict(input=\"\"),         # Empty string\n    dict(input=[None, True, False]),  # List with None and boolean values\n    dict(input={\"key\": \"value\"}),  # Dictionary\n    dict(input=[1.1, 2.2, 3.3])  # List of floats\n]\nexamples += [\n    dict(input=[1, 2, 3]),\n    dict(input=[10, 20, 30]),\n    dict(input=[100, 200, 300]),\n    dict(input=[0, 0, 0]),\n    dict(input=[123, 456, 789]),\n    dict(input=[]),\n    dict(input=[-1, -2, -3]),\n    dict(input=[111, 222, 333]),\n    dict(input=[999]),\n    dict(input=[5, 10, 15, 20, 25])\n]", "code": "def list2ASCII(input):\n    suffix = [17, 31, 73, 47, 23]\n    instr = str(input)\n    instr1 = ''.join(c for c in instr if c not in '() ')\n    ascii = [ord(c) for c in instr1]\n    return ascii + suffix\n", "func_name": "list2ASCII", "exec_status": true, "example_inputs": ["\"{'input': 'Hello World'}\"", "\"{'input': '(123)'}\"", "\"{'input': 'abc def'}\"", "\"{'input': '(hello) world'}\"", "\"{'input': '123'}\"", "\"{'input': '(a b c)'}\"", "\"{'input': ''}\"", "\"{'input': '( )'}\"", "\"{'input': '!@#$%^&*()_+'}\"", "\"{'input': 'Python is awesome'}\""], "example_outputs": [{"return": "\"[72, 101, 108, 108, 111, 87, 111, 114, 108, 100, 17, 31, 73, 47, 23]\""}, {"return": "\"[49, 50, 51, 17, 31, 73, 47, 23]\""}, {"return": "\"[97, 98, 99, 100, 101, 102, 17, 31, 73, 47, 23]\""}, {"return": "\"[104, 101, 108, 108, 111, 119, 111, 114, 108, 100, 17, 31, 73, 47, 23]\""}, {"return": "\"[49, 50, 51, 17, 31, 73, 47, 23]\""}, {"return": "\"[97, 98, 99, 17, 31, 73, 47, 23]\""}, {"return": "\"[17, 31, 73, 47, 23]\""}, {"return": "\"[17, 31, 73, 47, 23]\""}, {"return": "\"[33, 64, 35, 36, 37, 94, 38, 42, 95, 43, 17, 31, 73, 47, 23]\""}, {"return": "\"[80, 121, 116, 104, 111, 110, 105, 115, 97, 119, 101, 115, 111, 109, 101, 17, 31, 73, 47, 23]\""}, {"return": "\"[91, 49, 44, 50, 44, 51, 93, 17, 31, 73, 47, 23]\""}, {"return": "\"[52, 44, 53, 44, 54, 17, 31, 73, 47, 23]\""}, {"return": "\"[72, 101, 108, 108, 111, 17, 31, 73, 47, 23]\""}, {"return": "\"[49, 50, 51, 52, 53, 17, 31, 73, 47, 23]\""}, {"return": "\"[91, 49, 44, 50, 44, 51, 44, 52, 93, 17, 31, 73, 47, 23]\""}, {"return": "\"[91, 93, 17, 31, 73, 47, 23]\""}, {"return": "\"[17, 31, 73, 47, 23]\""}, {"return": "\"[91, 78, 111, 110, 101, 44, 84, 114, 117, 101, 44, 70, 97, 108, 115, 101, 93, 17, 31, 73, 47, 23]\""}, {"return": "\"[123, 39, 107, 101, 121, 39, 58, 39, 118, 97, 108, 117, 101, 39, 125, 17, 31, 73, 47, 23]\""}, {"return": "\"[91, 49, 46, 49, 44, 50, 46, 50, 44, 51, 46, 51, 93, 17, 31, 73, 47, 23]\""}, {"return": "\"[91, 49, 44, 50, 44, 51, 93, 17, 31, 73, 47, 23]\""}, {"return": "\"[91, 49, 48, 44, 50, 48, 44, 51, 48, 93, 17, 31, 73, 47, 23]\""}, {"return": "\"[91, 49, 48, 48, 44, 50, 48, 48, 44, 51, 48, 48, 93, 17, 31, 73, 47, 23]\""}, {"return": "\"[91, 48, 44, 48, 44, 48, 93, 17, 31, 73, 47, 23]\""}, {"return": "\"[91, 49, 50, 51, 44, 52, 53, 54, 44, 55, 56, 57, 93, 17, 31, 73, 47, 23]\""}, {"return": "\"[91, 93, 17, 31, 73, 47, 23]\""}, {"return": "\"[91, 45, 49, 44, 45, 50, 44, 45, 51, 93, 17, 31, 73, 47, 23]\""}, {"return": "\"[91, 49, 49, 49, 44, 50, 50, 50, 44, 51, 51, 51, 93, 17, 31, 73, 47, 23]\""}, {"return": "\"[91, 57, 57, 57, 93, 17, 31, 73, 47, 23]\""}, {"return": "\"[91, 53, 44, 49, 48, 44, 49, 53, 44, 50, 48, 44, 50, 53, 93, 17, 31, 73, 47, 23]\""}], "parsed_inputs": [[["input", "\"Hello World\""]], [["input", "\"(123)\""]], [["input", "\"abc def\""]], [["input", "\"(hello) world\""]], [["input", "\"123\""]], [["input", "\"(a b c)\""]], [["input", "\"\""]], [["input", "\"( )\""]], [["input", "\"!@#$%^&*()_+\""]], [["input", "\"Python is awesome\""]]], "exec_code": "def list2ASCII(input):\n    suffix = [17, 31, 73, 47, 23]\n    instr = str(input)\n    instr1 = ''.join(c for c in instr if c not in '() ')\n    ascii = [ord(c) for c in instr1]\n    return ascii + suffix\n", "output": "The function is:\n\n```python\ndef list2ASCII(input):\n    suffix = [17, 31, 73, 47, 23]\n    instr = str(input)\n    instr1 = ''.join(c for c in instr if c not in '() ')\n    ascii = [ord(c) for c in instr1]\n    return ascii + suffix\n\n```", "choosed_example_idx": [5, 4, 2, 6, 0, 9, 8, 1, 3], "prompt": "Input: dict(input=\"(a b c)\"), Output: \"[97, 98, 99, 17, 31, 73, 47, 23]\"\nInput: dict(input=\"123\"), Output: \"[49, 50, 51, 17, 31, 73, 47, 23]\"\nInput: dict(input=\"abc def\"), Output: \"[97, 98, 99, 100, 101, 102, 17, 31, 73, 47, 23]\"\nInput: dict(input=\"\"), Output: \"[17, 31, 73, 47, 23]\"\nInput: dict(input=\"Hello World\"), Output: \"[72, 101, 108, 108, 111, 87, 111, 114, 108, 100, 17, 31, 73, 47, 23]\"\nInput: dict(input=\"Python is awesome\"), Output: \"[80, 121, 116, 104, 111, 110, 105, 115, 97, 119, 101, 115, 111, 109, 101, 17, 31, 73, 47, 23]\"\nInput: dict(input=\"!@#$%^&*()_+\"), Output: \"[33, 64, 35, 36, 37, 94, 38, 42, 95, 43, 17, 31, 73, 47, 23]\"\nInput: dict(input=\"(123)\"), Output: \"[49, 50, 51, 17, 31, 73, 47, 23]\"\nInput: dict(input=\"(hello) world\"), Output: \"[104, 101, 108, 108, 111, 119, 111, 114, 108, 100, 17, 31, 73, 47, 23]\"\n\n\n\nWrite a function that generates the output from the input.\nFunction: list2ASCII\n\n\n", "id": "763468f19b0f48eb03480d9a0fe0dcf0d37a22bb_0"}
{"example_str": "examples = [\n    dict(num1=5, num2=3),\n    dict(num1=10, num2=20),\n    dict(num1=-1, num2=0),\n    dict(num1=3.14, num2=2.71),\n    dict(num1=100, num2=50),\n    dict(num1=0, num2=0),\n    dict(num1=7, num2=7),\n    dict(num1=-5, num2=-10),\n    dict(num1=1.5, num2=2.5),\n    dict(num1=200, num2=150),\n]\nexamples += [\n    dict(num1=5, num2=3),\n    dict(num1=2.5, num2=3.5),\n    dict(num1=-1, num2=-5),\n    dict(num1=0, num2=0),\n    dict(num1=100, num2=100),\n    dict(num1=-10, num2=10),\n    dict(num1=7.7, num2=7.7),\n    dict(num1=3, num2=9),\n    dict(num1=-3, num2=-2),\n    dict(num1=1.234, num2=1.233)\n]\nexamples += [\n    dict(num1=10, num2=5),\n    dict(num1=3, num2=8),\n    dict(num1=15, num2=15),\n    dict(num1=-1, num2=-5),\n    dict(num1=0.5, num2=0.2),\n    dict(num1=100, num2=1000),\n    dict(num1=-10, num2=10),\n    dict(num1=7.5, num2=7.49),\n    dict(num1=20, num2=20),\n    dict(num1=1.234, num2=1.233)\n]", "code": "def lg_num(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2\n", "func_name": "lg_num", "exec_status": true, "example_inputs": ["\"{'num1': 5, 'num2': 3}\"", "\"{'num1': 10, 'num2': 20}\"", "\"{'num1': -1, 'num2': 0}\"", "\"{'num1': 3.14, 'num2': 2.71}\"", "\"{'num1': 100, 'num2': 50}\"", "\"{'num1': 0, 'num2': 0}\"", "\"{'num1': 7, 'num2': 7}\"", "\"{'num1': -5, 'num2': -10}\"", "\"{'num1': 1.5, 'num2': 2.5}\"", "\"{'num1': 200, 'num2': 150}\""], "example_outputs": [{"return": "\"5\""}, {"return": "\"20\""}, {"return": "\"0\""}, {"return": "\"3.14\""}, {"return": "\"100\""}, {"return": "\"0\""}, {"return": "\"7\""}, {"return": "\"-5\""}, {"return": "\"2.5\""}, {"return": "\"200\""}, {"return": "\"5\""}, {"return": "\"3.5\""}, {"return": "\"-1\""}, {"return": "\"0\""}, {"return": "\"100\""}, {"return": "\"10\""}, {"return": "\"7.7\""}, {"return": "\"9\""}, {"return": "\"-2\""}, {"return": "\"1.234\""}, {"return": "\"10\""}, {"return": "\"8\""}, {"return": "\"15\""}, {"return": "\"-1\""}, {"return": "\"0.5\""}, {"return": "\"1000\""}, {"return": "\"10\""}, {"return": "\"7.5\""}, {"return": "\"20\""}, {"return": "\"1.234\""}], "parsed_inputs": [[["num1", "5"], ["num2", "3"]], [["num1", "10"], ["num2", "20"]], [["num1", "-1"], ["num2", "0"]], [["num1", "3.14"], ["num2", "2.71"]], [["num1", "100"], ["num2", "50"]], [["num1", "0"], ["num2", "0"]], [["num1", "7"], ["num2", "7"]], [["num1", "-5"], ["num2", "-10"]], [["num1", "1.5"], ["num2", "2.5"]], [["num1", "200"], ["num2", "150"]]], "exec_code": "def lg_num(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2\n", "output": "The function is:\n\n```python\ndef lg_num(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2\n\n```", "choosed_example_idx": [2, 6, 1, 0, 5, 9, 4, 8, 7, 3], "prompt": "Write a function that generates the output from the input.\nInput: dict(num1=-1, num2=0), Output: \"0\"\nInput: dict(num1=7, num2=7), Output: \"7\"\nInput: dict(num1=10, num2=20), Output: \"20\"\nInput: dict(num1=5, num2=3), Output: \"5\"\nInput: dict(num1=0, num2=0), Output: \"0\"\nInput: dict(num1=200, num2=150), Output: \"200\"\nInput: dict(num1=100, num2=50), Output: \"100\"\nInput: dict(num1=1.5, num2=2.5), Output: \"2.5\"\nInput: dict(num1=-5, num2=-10), Output: \"-5\"\nInput: dict(num1=3.14, num2=2.71), Output: \"3.14\"\n\n\nFunction: lg_num\n\n", "id": "eab2aea7d0ca9aab536907736003df956f5ca8ad_0"}
{"example_str": "examples = [\n    dict(str1=\"leetcode\"),\n    dict(str1=\"loveleetcode\"),\n    dict(str1=\"aabb\"),\n    dict(str1=\"\"),\n    dict(str1=\"a\"),\n    dict(str1=\"abc\"),\n    dict(str1=\"abcabc\"),\n    dict(str1=\"abcdabcd\"),\n    dict(str1=\"abcdabcdabc\"),\n    dict(str1=\"abcdefghijklmnopqrstuvwxyz\"),\n]\nexamples += [\n    dict(str1=\"leetcode\"),\n    dict(str1=\"level\"),\n    dict(str1=\"algorithm\"),\n    dict(str1=\"\"),\n    dict(str1=\"aaaa\"),\n    dict(str1=\"abab\"),\n    dict(str1=\"sos\"),\n    dict(str1=\"racecar\"),\n    dict(str1=\"example\"),\n    dict(str1=\"single\")\n]\nexamples += [\n    dict(str1=\"leetcode\"),\n    dict(str1=\"level\"),\n    dict(str1=\"algorithm\"),\n    dict(str1=\"support\"),\n    dict(str1=\"character\"),\n    dict(str1=\"racecar\"),\n    dict(str1=\"\"),\n    dict(str1=\"repeater\"),\n    dict(str1=\"sassafras\"),\n    dict(str1=\"deeded\")\n]", "code": "def LeetCode387(str1):\n    lst = list(str1)\n    idx = -1\n    for i in range(0, len(lst)):\n        key = lst[i]\n        if key not in lst[i + 1:]:\n            idx = i\n            break\n    return idx\n", "func_name": "LeetCode387", "exec_status": true, "example_inputs": ["\"{'str1': 'leetcode'}\"", "\"{'str1': 'loveleetcode'}\"", "\"{'str1': 'aabb'}\"", "\"{'str1': ''}\"", "\"{'str1': 'a'}\"", "\"{'str1': 'abc'}\"", "\"{'str1': 'abcabc'}\"", "\"{'str1': 'abcdabcd'}\"", "\"{'str1': 'abcdabcdabc'}\"", "\"{'str1': 'abcdefghijklmnopqrstuvwxyz'}\""], "example_outputs": [{"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"-1\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"4\""}, {"return": "\"7\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"-1\""}, {"return": "\"3\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"-1\""}, {"return": "\"2\""}, {"return": "\"5\""}, {"return": "\"4\""}], "parsed_inputs": [[["str1", "\"leetcode\""]], [["str1", "\"loveleetcode\""]], [["str1", "\"aabb\""]], [["str1", "\"\""]], [["str1", "\"a\""]], [["str1", "\"abc\""]], [["str1", "\"abcabc\""]], [["str1", "\"abcdabcd\""]], [["str1", "\"abcdabcdabc\""]], [["str1", "\"abcdefghijklmnopqrstuvwxyz\""]]], "exec_code": "def LeetCode387(str1):\n    lst = list(str1)\n    idx = -1\n    for i in range(0, len(lst)):\n        key = lst[i]\n        if key not in lst[i + 1:]:\n            idx = i\n            break\n    return idx\n", "output": "The function is:\n\n```python\ndef LeetCode387(str1):\n    lst = list(str1)\n    idx = -1\n    for i in range(0, len(lst)):\n        key = lst[i]\n        if key not in lst[i + 1:]:\n            idx = i\n            break\n    return idx\n\n```", "choosed_example_idx": [9, 8, 6, 7, 2], "prompt": "Input: dict(str1=\"abcdefghijklmnopqrstuvwxyz\"), Output: \"0\"\nInput: dict(str1=\"abcdabcdabc\"), Output: \"7\"\nInput: dict(str1=\"abcabc\"), Output: \"3\"\nInput: dict(str1=\"abcdabcd\"), Output: \"4\"\nInput: dict(str1=\"aabb\"), Output: \"1\"\n\n\nFunction: LeetCode387\nWrite a function that generates the output from the input.\n\n\n", "id": "67de30453ea317491784daf9c86a765308850af1_0"}
{"example_str": "examples = [\n    dict(pick='image'),\n    dict(pick='h1'),\n    dict(pick='h2'),\n    dict(pick='h3'),\n    dict(pick='paragraph'),\n    dict(pick='button'),\n    dict(pick='not a tag'),\n    dict(pick='header'),\n    dict(pick='footer'),\n    dict(pick='random'),\n]\nexamples += [\n    dict(pick='image'),\n    dict(pick='h1'),\n    dict(pick='h2'),\n    dict(pick='h3'),\n    dict(pick='paragraph'),\n    dict(pick='button'),\n    dict(pick='table'),  # Not explicitly handled in the function, should return 'not a tag'\n    dict(pick='div'),    # Not explicitly handled in the function, should return 'not a tag'\n    dict(pick='span'),   # Not explicitly handled in the function, should return 'not a tag'\n    dict(pick='footer')  # Not explicitly handled in the function, should return 'not a tag'\n]\nexamples += [\n    dict(pick='image'),\n    dict(pick='h1'),\n    dict(pick='h2'),\n    dict(pick='h3'),\n    dict(pick='paragraph'),\n    dict(pick='button'),\n    dict(pick='table'),  # This is not explicitly handled in the function, so it should return 'not a tag'\n    dict(pick='div'),    # This is also not handled, so it should return 'not a tag'\n    dict(pick='span'),   # Another example that will return 'not a tag'\n    dict(pick='link')    # Not handled, will return 'not a tag'\n]", "code": "def process_prediction(pick):\n    print('pick found: ' + pick)\n    if pick == 'image':\n        return 'img'\n    elif pick == 'h1':\n        return 'h1'\n    elif pick == 'h2':\n        return 'h2'\n    elif pick == 'h3':\n        return 'h3'\n    elif pick == 'paragraph':\n        return 'p'\n    elif pick == 'button':\n        return 'button'\n    else:\n        return 'not a tag'\n", "func_name": "process_prediction", "exec_status": true, "example_inputs": ["\"{'pick': 'image'}\"", "\"{'pick': 'h1'}\"", "\"{'pick': 'h2'}\"", "\"{'pick': 'h3'}\"", "\"{'pick': 'paragraph'}\"", "\"{'pick': 'button'}\"", "\"{'pick': 'not a tag'}\"", "\"{'pick': 'header'}\"", "\"{'pick': 'footer'}\"", "\"{'pick': 'random'}\""], "example_outputs": [{"return": "\"'img'\""}, {"return": "\"'h1'\""}, {"return": "\"'h2'\""}, {"return": "\"'h3'\""}, {"return": "\"'p'\""}, {"return": "\"'button'\""}, {"return": "\"'not a tag'\""}, {"return": "\"'not a tag'\""}, {"return": "\"'not a tag'\""}, {"return": "\"'not a tag'\""}, {"return": "\"'img'\""}, {"return": "\"'h1'\""}, {"return": "\"'h2'\""}, {"return": "\"'h3'\""}, {"return": "\"'p'\""}, {"return": "\"'button'\""}, {"return": "\"'not a tag'\""}, {"return": "\"'not a tag'\""}, {"return": "\"'not a tag'\""}, {"return": "\"'not a tag'\""}, {"return": "\"'img'\""}, {"return": "\"'h1'\""}, {"return": "\"'h2'\""}, {"return": "\"'h3'\""}, {"return": "\"'p'\""}, {"return": "\"'button'\""}, {"return": "\"'not a tag'\""}, {"return": "\"'not a tag'\""}, {"return": "\"'not a tag'\""}, {"return": "\"'not a tag'\""}], "parsed_inputs": [[["pick", "\"image\""]], [["pick", "\"h1\""]], [["pick", "\"h2\""]], [["pick", "\"h3\""]], [["pick", "\"paragraph\""]], [["pick", "\"button\""]], [["pick", "\"not a tag\""]], [["pick", "\"header\""]], [["pick", "\"footer\""]], [["pick", "\"random\""]]], "exec_code": "def process_prediction(pick):\n    print('pick found: ' + pick)\n    if pick == 'image':\n        return 'img'\n    elif pick == 'h1':\n        return 'h1'\n    elif pick == 'h2':\n        return 'h2'\n    elif pick == 'h3':\n        return 'h3'\n    elif pick == 'paragraph':\n        return 'p'\n    elif pick == 'button':\n        return 'button'\n    else:\n        return 'not a tag'\n", "output": "The function is:\n\n```python\ndef process_prediction(pick):\n    print('pick found: ' + pick)\n    if pick == 'image':\n        return 'img'\n    elif pick == 'h1':\n        return 'h1'\n    elif pick == 'h2':\n        return 'h2'\n    elif pick == 'h3':\n        return 'h3'\n    elif pick == 'paragraph':\n        return 'p'\n    elif pick == 'button':\n        return 'button'\n    else:\n        return 'not a tag'\n\n```", "choosed_example_idx": [6, 4, 0, 5, 3, 1, 7], "prompt": "Function: process_prediction\n\nWrite a function that generates the output from the input.\n\nInput: dict(pick=\"not a tag\"), Output: \"'not a tag'\"\nInput: dict(pick=\"paragraph\"), Output: \"'p'\"\nInput: dict(pick=\"image\"), Output: \"'img'\"\nInput: dict(pick=\"button\"), Output: \"'button'\"\nInput: dict(pick=\"h3\"), Output: \"'h3'\"\nInput: dict(pick=\"h1\"), Output: \"'h1'\"\nInput: dict(pick=\"header\"), Output: \"'not a tag'\"\n\n\n", "id": "bdbf2f0e49629f1f69ee7738cfb52ec285d4f4a2_0"}
{"example_str": "examples = [\n    dict(list_of_integers=[]),\n    dict(list_of_integers=[1]),\n    dict(list_of_integers=[1, 2, 3, 2, 1]),\n    dict(list_of_integers=[1, 3, 5, 4, 3, 2, 1]),\n    dict(list_of_integers=[5, 4, 3, 2, 1]),\n    dict(list_of_integers=[1, 2, 3, 4, 5]),\n    dict(list_of_integers=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]),\n    dict(list_of_integers=[100, 90, 80, 70, 60, 50, 40, 30, 20, 10]),\n    dict(list_of_integers=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n    dict(list_of_integers=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110])\n]\nexamples += [\n    dict(list_of_integers=[1, 3, 5, 4, 2]),  # Peak at 5\n    dict(list_of_integers=[10, 20, 15]),  # Peak at 20\n    dict(list_of_integers=[2, 2, 2, 2, 2]),  # All elements are the same, no distinct peak\n    dict(list_of_integers=[8]),  # Single element, which is a peak\n    dict(list_of_integers=[]),  # Empty list, no peak\n    dict(list_of_integers=[1, 2, 3, 4, 5]),  # Increasing order, peak at the end (5)\n    dict(list_of_integers=[5, 4, 3, 2, 1]),  # Decreasing order, peak at the beginning (5)\n    dict(list_of_integers=[1, 3, 2, 3, 5, 6, 4]),  # Multiple peaks, first found is 3\n    dict(list_of_integers=[-3, -1, -2]),  # Negative numbers, peak at -1\n    dict(list_of_integers=[100, 200, 300, 400, 300, 200, 100])  # Peak in the middle at 400\n]\nexamples += [\n    dict(list_of_integers=[1, 2, 3, 4, 5]),  # Peak at the end\n    dict(list_of_integers=[5, 4, 3, 2, 1]),  # Peak at the beginning\n    dict(list_of_integers=[1, 3, 2]),  # Peak in the middle\n    dict(list_of_integers=[1]),  # Single element\n    dict(list_of_integers=[]),  # Empty list\n    dict(list_of_integers=[1, 2, 3, 2, 1]),  # Peak in the middle\n    dict(list_of_integers=[10, 20, 15, 5, 3]),  # Peak near the beginning\n    dict(list_of_integers=[3, 4, 5, 1]),  # Peak before a drop\n    dict(list_of_integers=[8, 9, 6, 7, 8, 9, 10]),  # Peak at the end\n    dict(list_of_integers=[100, 200, 300, 400, 300, 200, 100])  # Peak in the middle\n]", "code": "def find_peak(list_of_integers):\n    \"\"\"Find the peak in the list of integers\"\"\"\n    n = len(list_of_integers)\n    if n == 0:\n        return None\n    elif n == 1:\n        return list_of_integers[0]\n    h = n - 1\n    l = 0\n    li = list_of_integers\n    while h > l:\n        m = (h + l) // 2\n        if li[m] <= li[m + 1]:\n            l = m + 1\n        elif li[m] <= li[m - 1]:\n            h = m - 1\n        elif li[m] >= li[m + 1] and li[m] >= li[m - 1]:\n            return li[m]\n    return li[l]\n", "func_name": "find_peak", "exec_status": true, "example_inputs": ["\"{'list_of_integers': []}\"", "\"{'list_of_integers': [1]}\"", "\"{'list_of_integers': [1, 2, 3, 2, 1]}\"", "\"{'list_of_integers': [1, 3, 5, 4, 3, 2, 1]}\"", "\"{'list_of_integers': [5, 4, 3, 2, 1]}\"", "\"{'list_of_integers': [1, 2, 3, 4, 5]}\"", "\"{'list_of_integers': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]}\"", "\"{'list_of_integers': [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]}\"", "\"{'list_of_integers': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}\"", "\"{'list_of_integers': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110]}\""], "example_outputs": [{"return": "\"None\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"100\""}, {"return": "\"100\""}, {"return": "\"1\""}, {"return": "\"110\""}, {"return": "\"5\""}, {"return": "\"20\""}, {"return": "\"2\""}, {"return": "\"8\""}, {"return": "\"None\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"6\""}, {"return": "\"-1\""}, {"return": "\"400\""}, {"return": "\"5\""}, {"return": "\"5\""}, {"return": "\"3\""}, {"return": "\"1\""}, {"return": "\"None\""}, {"return": "\"3\""}, {"return": "\"20\""}, {"return": "\"5\""}, {"return": "\"10\""}, {"return": "\"400\""}], "parsed_inputs": [[["list_of_integers", "[]"]], [["list_of_integers", "[1]"]], [["list_of_integers", "[1, 2, 3, 2, 1]"]], [["list_of_integers", "[1, 3, 5, 4, 3, 2, 1]"]], [["list_of_integers", "[5, 4, 3, 2, 1]"]], [["list_of_integers", "[1, 2, 3, 4, 5]"]], [["list_of_integers", "[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]"]], [["list_of_integers", "[100, 90, 80, 70, 60, 50, 40, 30, 20, 10]"]], [["list_of_integers", "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"]], [["list_of_integers", "[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110]"]]], "exec_code": "def find_peak(list_of_integers):\n    \"\"\"Find the peak in the list of integers\"\"\"\n    n = len(list_of_integers)\n    if n == 0:\n        return None\n    elif n == 1:\n        return list_of_integers[0]\n    h = n - 1\n    l = 0\n    li = list_of_integers\n    while h > l:\n        m = (h + l) // 2\n        if li[m] <= li[m + 1]:\n            l = m + 1\n        elif li[m] <= li[m - 1]:\n            h = m - 1\n        elif li[m] >= li[m + 1] and li[m] >= li[m - 1]:\n            return li[m]\n    return li[l]\n", "output": "The function is:\n\n```python\ndef find_peak(list_of_integers):\n    \"\"\"Find the peak in the list of integers\"\"\"\n    n = len(list_of_integers)\n    if n == 0:\n        return None\n    elif n == 1:\n        return list_of_integers[0]\n    h = n - 1\n    l = 0\n    li = list_of_integers\n    while h > l:\n        m = (h + l) // 2\n        if li[m] <= li[m + 1]:\n            l = m + 1\n        elif li[m] <= li[m - 1]:\n            h = m - 1\n        elif li[m] >= li[m + 1] and li[m] >= li[m - 1]:\n            return li[m]\n    return li[l]\n\n```", "choosed_example_idx": [6, 9, 3, 1, 5, 2], "prompt": "Write a function that generates the output from the input.\nFunction: find_peak\nInput: dict(list_of_integers=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]), Output: \"100\"\nInput: dict(list_of_integers=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110]), Output: \"110\"\nInput: dict(list_of_integers=[1, 3, 5, 4, 3, 2, 1]), Output: \"5\"\nInput: dict(list_of_integers=[1]), Output: \"1\"\nInput: dict(list_of_integers=[1, 2, 3, 4, 5]), Output: \"5\"\nInput: dict(list_of_integers=[1, 2, 3, 2, 1]), Output: \"3\"\n\n\n", "id": "1fd2e9a4684c802924f06eaafad37fc84e0cf32a_0"}
{"example_str": "examples = [\n    dict(ds={'x': [1, 2, 3], 'y': [4, 5, 6]}),\n    dict(ds={'x': [10, 20, 30], 'y': [40, 50, 60]}),\n    dict(ds={'x': [-1, 0, 1], 'y': [-2, 0, 2]}),\n    dict(ds={'x': [100, 200, 300], 'y': [400, 500, 600]}),\n    dict(ds={'x': [0.1, 0.2, 0.3], 'y': [0.4, 0.5, 0.6]}),\n    dict(ds={'x': [-10, -20, -30], 'y': [-40, -50, -60]}),\n    dict(ds={'x': [1.1, 2.2, 3.3], 'y': [4.4, 5.5, 6.6]}),\n    dict(ds={'x': [5, 10, 15], 'y': [20, 30, 40]}),\n    dict(ds={'x': [-5, -10, -15], 'y': [-20, -30, -40]}),\n    dict(ds={'x': [0.01, 0.02, 0.03], 'y': [0.04, 0.05, 0.06]}),\n]\nexamples += [\n    dict(ds={'x': [1, 2, 3], 'y': [4, 5, 6]}),\n    dict(ds={'x': ['1', '2', '3'], 'y': ['4', '5', '6']}),\n    dict(ds={'x': [10.5, 20.5, 30.5], 'y': [40.5, 50.5, 60.5]}),\n    dict(ds={'x': [-1, -2, -3], 'y': [-4, -5, -6]}),\n    dict(ds={'x': [0, 0.5, 1], 'y': [0, 0.5, 1]}),\n    dict(ds={'x': [100, 200, 300], 'y': [400, 500, 600]}),\n    dict(ds={'x': [1.1, 2.2, 3.3], 'y': [4.4, 5.5, 6.6]}),\n    dict(ds={'x': ['100', '200', '300'], 'y': ['400', '500', '600']}),\n    dict(ds={'x': [0.1, 0.2, 0.3], 'y': [0.4, 0.5, 0.6]}),\n    dict(ds={'x': [-10, -20, -30], 'y': [-40, -50, -60]})\n]\nexamples += [\n    dict(ds={'x': [0, 1, 2, 3], 'y': [0, 1, 2, 3]}),\n    dict(ds={'x': [10, 20, 30], 'y': [10, 20, 30]}),\n    dict(ds={'x': [5.5, 6.5, 7.5], 'y': [2.2, 3.3, 4.4]}),\n    dict(ds={'x': [-1, -2, -3], 'y': [-1, -2, -3]}),\n    dict(ds={'x': [100, 200, 300, 400], 'y': [100, 200, 300, 400]}),\n    dict(ds={'x': [0.1, 0.2, 0.3], 'y': [0.1, 0.2, 0.3]}),\n    dict(ds={'x': [10, 15, 20, 25, 30], 'y': [5, 10, 15, 20, 25]}),\n    dict(ds={'x': [1, 3, 5, 7, 9], 'y': [2, 4, 6, 8, 10]}),\n    dict(ds={'x': [-10, 0, 10], 'y': [-20, 0, 20]}),\n    dict(ds={'x': [0.5, 1.5, 2.5, 3.5], 'y': [1.5, 2.5, 3.5, 4.5]})\n]", "code": "def get_ds_extents(ds):\n    x_from = float(ds['x'][0])\n    x_to = float(ds['x'][-1])\n    y_from = float(ds['y'][0])\n    y_to = float(ds['y'][-1])\n    return x_from, x_to, y_from, y_to\n", "func_name": "get_ds_extents", "exec_status": true, "example_inputs": ["\"{'ds': {'x': [1, 2, 3], 'y': [4, 5, 6]}}\"", "\"{'ds': {'x': [10, 20, 30], 'y': [40, 50, 60]}}\"", "\"{'ds': {'x': [-1, 0, 1], 'y': [-2, 0, 2]}}\"", "\"{'ds': {'x': [100, 200, 300], 'y': [400, 500, 600]}}\"", "\"{'ds': {'x': [0.1, 0.2, 0.3], 'y': [0.4, 0.5, 0.6]}}\"", "\"{'ds': {'x': [-10, -20, -30], 'y': [-40, -50, -60]}}\"", "\"{'ds': {'x': [1.1, 2.2, 3.3], 'y': [4.4, 5.5, 6.6]}}\"", "\"{'ds': {'x': [5, 10, 15], 'y': [20, 30, 40]}}\"", "\"{'ds': {'x': [-5, -10, -15], 'y': [-20, -30, -40]}}\"", "\"{'ds': {'x': [0.01, 0.02, 0.03], 'y': [0.04, 0.05, 0.06]}}\""], "example_outputs": [{"return": "\"(1.0, 3.0, 4.0, 6.0)\""}, {"return": "\"(10.0, 30.0, 40.0, 60.0)\""}, {"return": "\"(-1.0, 1.0, -2.0, 2.0)\""}, {"return": "\"(100.0, 300.0, 400.0, 600.0)\""}, {"return": "\"(0.1, 0.3, 0.4, 0.6)\""}, {"return": "\"(-10.0, -30.0, -40.0, -60.0)\""}, {"return": "\"(1.1, 3.3, 4.4, 6.6)\""}, {"return": "\"(5.0, 15.0, 20.0, 40.0)\""}, {"return": "\"(-5.0, -15.0, -20.0, -40.0)\""}, {"return": "\"(0.01, 0.03, 0.04, 0.06)\""}, {"return": "\"(1.0, 3.0, 4.0, 6.0)\""}, {"return": "\"(1.0, 3.0, 4.0, 6.0)\""}, {"return": "\"(10.5, 30.5, 40.5, 60.5)\""}, {"return": "\"(-1.0, -3.0, -4.0, -6.0)\""}, {"return": "\"(0.0, 1.0, 0.0, 1.0)\""}, {"return": "\"(100.0, 300.0, 400.0, 600.0)\""}, {"return": "\"(1.1, 3.3, 4.4, 6.6)\""}, {"return": "\"(100.0, 300.0, 400.0, 600.0)\""}, {"return": "\"(0.1, 0.3, 0.4, 0.6)\""}, {"return": "\"(-10.0, -30.0, -40.0, -60.0)\""}, {"return": "\"(0.0, 3.0, 0.0, 3.0)\""}, {"return": "\"(10.0, 30.0, 10.0, 30.0)\""}, {"return": "\"(5.5, 7.5, 2.2, 4.4)\""}, {"return": "\"(-1.0, -3.0, -1.0, -3.0)\""}, {"return": "\"(100.0, 400.0, 100.0, 400.0)\""}, {"return": "\"(0.1, 0.3, 0.1, 0.3)\""}, {"return": "\"(10.0, 30.0, 5.0, 25.0)\""}, {"return": "\"(1.0, 9.0, 2.0, 10.0)\""}, {"return": "\"(-10.0, 10.0, -20.0, 20.0)\""}, {"return": "\"(0.5, 3.5, 1.5, 4.5)\""}], "parsed_inputs": [[["ds", "{'x': [1, 2, 3], 'y': [4, 5, 6]}"]], [["ds", "{'x': [10, 20, 30], 'y': [40, 50, 60]}"]], [["ds", "{'x': [-1, 0, 1], 'y': [-2, 0, 2]}"]], [["ds", "{'x': [100, 200, 300], 'y': [400, 500, 600]}"]], [["ds", "{'x': [0.1, 0.2, 0.3], 'y': [0.4, 0.5, 0.6]}"]], [["ds", "{'x': [-10, -20, -30], 'y': [-40, -50, -60]}"]], [["ds", "{'x': [1.1, 2.2, 3.3], 'y': [4.4, 5.5, 6.6]}"]], [["ds", "{'x': [5, 10, 15], 'y': [20, 30, 40]}"]], [["ds", "{'x': [-5, -10, -15], 'y': [-20, -30, -40]}"]], [["ds", "{'x': [0.01, 0.02, 0.03], 'y': [0.04, 0.05, 0.06]}"]]], "exec_code": "def get_ds_extents(ds):\n    x_from = float(ds['x'][0])\n    x_to = float(ds['x'][-1])\n    y_from = float(ds['y'][0])\n    y_to = float(ds['y'][-1])\n    return x_from, x_to, y_from, y_to\n", "output": "The function is:\n\n```python\ndef get_ds_extents(ds):\n    x_from = float(ds['x'][0])\n    x_to = float(ds['x'][-1])\n    y_from = float(ds['y'][0])\n    y_to = float(ds['y'][-1])\n    return x_from, x_to, y_from, y_to\n\n```", "choosed_example_idx": [4, 9, 5], "prompt": "Write a function that generates the output from the input.\nFunction: get_ds_extents\n\nInput: dict(ds={'x': [0.1, 0.2, 0.3], 'y': [0.4, 0.5, 0.6]}), Output: \"(0.1, 0.3, 0.4, 0.6)\"\nInput: dict(ds={'x': [0.01, 0.02, 0.03], 'y': [0.04, 0.05, 0.06]}), Output: \"(0.01, 0.03, 0.04, 0.06)\"\nInput: dict(ds={'x': [-10, -20, -30], 'y': [-40, -50, -60]}), Output: \"(-10.0, -30.0, -40.0, -60.0)\"\n\n", "id": "544f0bd8abec0980710d526acd25d9fdc79cf5bf_0"}
{"example_str": "examples = [\n    dict(s=\"Hello World\"),  # English sentence\n    dict(s=\"\"),  # Empty string\n    dict(s=\" \"),  # String with a space\n    dict(s=\"你好\"),  # Chinese sentence\n    dict(s=\"Hello 你好\"),  # Mixed language sentence\n    dict(s=\"12345\"),  # Numeric string\n    dict(s=\"abcdefg\"),  # Alphabetic string\n    dict(s=\"abc123\"),  # Alphanumeric string\n    dict(s=\"!@#$%^&*()\"),  # Special character string\n    dict(s=\"中文English\"),  # Sentence with both Chinese and English characters\n]\nexamples += [\n    dict(s=\"Hello, world!\"),  # No Chinese characters\n    dict(s=\"你好，世界！\"),     # Chinese characters\n    dict(s=\"Hello, 世界！\"),   # Mixed English and Chinese characters\n    dict(s=\"\"),               # Empty string\n    dict(s=\"12345\"),          # Numbers only\n    dict(s=\"こんにちは\"),     # Japanese characters, not Chinese\n    dict(s=\"안녕하세요\"),       # Korean characters, not Chinese\n    dict(s=\"Python编程\"),      # Mixed English and Chinese characters\n    dict(s=\"中\"),             # Single Chinese character\n    dict(s=\"The quick brown 狐 jumps over the lazy 狗\")  # Mixed with Chinese characters\n]\nexamples += [\n    dict(s='Hello'),  # No Chinese characters\n    dict(s='你好'),  # Chinese characters\n    dict(s='Hello 你好'),  # Mixed, contains Chinese characters\n    dict(s='こんにちは'),  # Japanese characters, not Chinese\n    dict(s='123'),  # Numbers, no Chinese characters\n    dict(s=' '),  # Space, no Chinese characters\n    dict(s='龥'),  # Chinese character at the end of the range\n    dict(s='一是一'),  # Chinese characters, repeated\n    dict(s='abc龙def'),  # Mixed with Chinese character in the middle\n    dict(s='🙂😊😂'),  # Emojis, no Chinese characters\n]", "code": "def is_zh_or_en(s):\n    \"\"\"\n    判断一句话是否为中文\n    :param s: str\n    :return: True or False\n    \"\"\"\n    flag = False\n    for ss in list(s):\n        if u'一' <= ss <= u'龥':\n            flag = True\n            break\n    return flag\n", "func_name": "is_zh_or_en", "exec_status": true, "example_inputs": ["\"{'s': 'Hello World'}\"", "\"{'s': ''}\"", "\"{'s': ' '}\"", "\"{'s': '\\u4f60\\u597d'}\"", "\"{'s': 'Hello \\u4f60\\u597d'}\"", "\"{'s': '12345'}\"", "\"{'s': 'abcdefg'}\"", "\"{'s': 'abc123'}\"", "\"{'s': '!@#$%^&*()'}\"", "\"{'s': '\\u4e2d\\u6587English'}\""], "example_outputs": [{"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}], "parsed_inputs": [[["s", "\"Hello World\""]], [["s", "\"\""]], [["s", "\" \""]], [["s", "\"\\u4f60\\u597d\""]], [["s", "\"Hello \\u4f60\\u597d\""]], [["s", "\"12345\""]], [["s", "\"abcdefg\""]], [["s", "\"abc123\""]], [["s", "\"!@#$%^&*()\""]], [["s", "\"\\u4e2d\\u6587English\""]]], "exec_code": "def is_zh_or_en(s):\n    \"\"\"\n    判断一句话是否为中文\n    :param s: str\n    :return: True or False\n    \"\"\"\n    flag = False\n    for ss in list(s):\n        if u'一' <= ss <= u'龥':\n            flag = True\n            break\n    return flag\n", "output": "The function is:\n\n```python\ndef is_zh_or_en(s):\n    \"\"\"\n    判断一句话是否为中文\n    :param s: str\n    :return: True or False\n    \"\"\"\n    flag = False\n    for ss in list(s):\n        if u'一' <= ss <= u'龥':\n            flag = True\n            break\n    return flag\n\n```", "choosed_example_idx": [5, 1, 2, 9, 7, 0, 4, 3], "prompt": "Input: dict(s=\"12345\"), Output: \"False\"\nInput: dict(s=\"\"), Output: \"False\"\nInput: dict(s=\" \"), Output: \"False\"\nInput: dict(s=\"\\u4e2d\\u6587English\"), Output: \"True\"\nInput: dict(s=\"abc123\"), Output: \"False\"\nInput: dict(s=\"Hello World\"), Output: \"False\"\nInput: dict(s=\"Hello \\u4f60\\u597d\"), Output: \"True\"\nInput: dict(s=\"\\u4f60\\u597d\"), Output: \"True\"\n\nFunction: is_zh_or_en\n\nWrite a function that generates the output from the input.\n", "id": "b12911572ed07af676206361f58282e8a5b1ef01_0"}
{"example_str": "examples = [\n    dict(results={'regions': [{'lines': [{'words': [{'boundingBox': '1,2,3,4', 'text': 'hello'}]}]}]}),\n    dict(results={'regions': [{'lines': [{'words': [{'boundingBox': '5,6,7,8', 'text': 'world'}]}]}]}),\n    dict(results={'regions': [{'lines': [{'words': [{'boundingBox': '9,10,11,12', 'text': 'python'}]}]}]}),\n    dict(results={'regions': [{'lines': [{'words': [{'boundingBox': '13,14,15,16', 'text': 'is'}]}]}]}),\n    dict(results={'regions': [{'lines': [{'words': [{'boundingBox': '17,18,19,20', 'text': 'fun'}]}]}]}),\n    dict(results={'regions': [{'lines': [{'words': [{'boundingBox': '21,22,23,24', 'text': 'to'}]}]}]}),\n    dict(results={'regions': [{'lines': [{'words': [{'boundingBox': '25,26,27,28', 'text': 'code'}]}]}]}),\n    dict(results={'regions': [{'lines': [{'words': [{'boundingBox': '29,30,31,32', 'text': 'in'}]}]}]}),\n    dict(results={'regions': [{'lines': [{'words': [{'boundingBox': '33,34,35,36', 'text': 'python'}]}]}]}),\n    dict(results={'regions': [{'lines': [{'words': [{'boundingBox': '37,38,39,40', 'text': 'language'}]}]}]}),\n]\nexamples += [\n    dict(results={\n        'regions': [\n            {'lines': [\n                {'words': [\n                    {'boundingBox': '30,70,50,20', 'text': 'Hello'},\n                    {'boundingBox': '85,70,30,20', 'text': 'World'}\n                ]}\n            ]}\n        ]\n    }),\n    dict(results={\n        'regions': [\n            {'lines': [\n                {'words': [\n                    {'boundingBox': '10,40,60,20', 'text': 'Sample'},\n                    {'boundingBox': '75,40,45,20', 'text': 'Text'}\n                ]}\n            ]}\n        ]\n    }),\n    dict(results={\n        'regions': [\n            {'lines': [\n                {'words': [\n                    {'boundingBox': '15,30,40,15', 'text': 'Another'},\n                    {'boundingBox': '60,30,50,15', 'text': 'Line'}\n                ]}\n            ]}\n        ]\n    }),\n    dict(results={\n        'regions': [\n            {'lines': [\n                {'words': [\n                    {'boundingBox': '5,50,70,25', 'text': 'More'},\n                    {'boundingBox': '80,50,55,25', 'text': 'Words'}\n                ]}\n            ]}\n        ]\n    }),\n    dict(results={\n        'regions': [\n            {'lines': [\n                {'words': [\n                    {'boundingBox': '20,60,90,30', 'text': 'Text'},\n                    {'boundingBox': '115,60,35,30', 'text': 'Here'}\n                ]}\n            ]}\n        ]\n    }),\n    dict(results={\n        'regions': [\n            {'lines': [\n                {'words': [\n                    {'boundingBox': '25,80,80,35', 'text': 'Example'},\n                    {'boundingBox': '110,80,50,35', 'text': 'Six'}\n                ]}\n            ]}\n        ]\n    }),\n    dict(results={\n        'regions': [\n            {'lines': [\n                {'words': [\n                    {'boundingBox': '30,90,85,40', 'text': 'Seven'},\n                    {'boundingBox': '120,90,45,40', 'text': 'OCR'}\n                ]}\n            ]}\n        ]\n    }),\n    dict(results={\n        'regions': [\n            {'lines': [\n                {'words': [\n                    {'boundingBox': '35,100,75,45', 'text': 'Eight'},\n                    {'boundingBox': '115,100,50,45', 'text': 'Test'}\n                ]}\n            ]}\n        ]\n    }),\n    dict(results={\n        'regions': [\n            {'lines': [\n                {'words': [\n                    {'boundingBox': '40,110,65,50', 'text': 'Nine'},\n                    {'boundingBox': '110,110,55,50', 'text': 'Input'}\n                ]}\n            ]}\n        ]\n    }),\n    dict(results={\n        'regions': [\n            {'lines': [\n                {'words': [\n                    {'boundingBox': '45,120,55,55', 'text': 'Ten'},\n                    {'boundingBox': '105,120,60,55', 'text': 'Data'}\n                ]}\n            ]}\n        ]\n    })\n]\nexamples += [\n    dict(results={\n        'regions': [\n            {'lines': [\n                {'words': [{'boundingBox': '10,20,30,40', 'text': 'Hello'}]}\n            ]}\n        ]\n    }),\n    dict(results={\n        'regions': [\n            {'lines': [\n                {'words': [{'boundingBox': '50,60,70,80', 'text': 'World'}]}\n            ]}\n        ]\n    }),\n    dict(results={\n        'regions': [\n            {'lines': [\n                {'words': [{'boundingBox': '15,25,35,45', 'text': 'Sample'}]},\n                {'words': [{'boundingBox': '55,65,75,85', 'text': 'Text'}]}\n            ]}\n        ]\n    }),\n    dict(results={\n        'regions': [\n            {'lines': [\n                {'words': [{'boundingBox': '100,200,300,400', 'text': 'Line1'}]},\n                {'words': [{'boundingBox': '110,210,310,410', 'text': 'Line2'}]}\n            ]}\n        ]\n    }),\n    dict(results={\n        'regions': [\n            {'lines': [\n                {'words': [{'boundingBox': '120,230,340,450', 'text': 'Data'}]},\n                {'words': [{'boundingBox': '130,240,350,460', 'text': 'Analysis'}]}\n            ]}\n        ]\n    }),\n    dict(results={\n        'regions': [\n            {'lines': [\n                {'words': [{'boundingBox': '10,20,30,40', 'text': 'Python'}]},\n                {'words': [{'boundingBox': '50,60,70,80', 'text': 'Code'}]}\n            ]}\n        ]\n    }),\n    dict(results={\n        'regions': [\n            {'lines': [\n                {'words': [{'boundingBox': '20,30,40,50', 'text': 'OCR'}]},\n                {'words': [{'boundingBox': '60,70,80,90', 'text': 'Function'}]}\n            ]}\n        ]\n    }),\n    dict(results={\n        'regions': [\n            {'lines': [\n                {'words': [{'boundingBox': '25,35,45,55', 'text': 'Test'}]},\n                {'words': [{'boundingBox': '65,75,85,95', 'text': 'Input'}]}\n            ]}\n        ]\n    }),\n    dict(results={\n        'regions': [\n            {'lines': [\n                {'words': [{'boundingBox': '30,40,50,60', 'text': 'Multiple'}]},\n                {'words': [{'boundingBox': '70,80,90,100', 'text': 'Lines'}]}\n            ]}\n        ]\n    }),\n    dict(results={\n        'regions': [\n            {'lines': [\n                {'words': [{'boundingBox': '35,45,55,65', 'text': 'Example'}]},\n                {'words': [{'boundingBox': '75,85,95,105', 'text': 'Ten'}]}\n            ]}\n        ]\n    })\n]", "code": "def analyze_ocr_results(results):\n    line_infos = [region['lines'] for region in results['regions']]\n    word_data = []\n    overall_text = ''\n    for line in line_infos:\n        for word_metadata in line:\n            for word_info in word_metadata['words']:\n                bbox = [int(coord) for coord in word_info['boundingBox'].\n                    split(',')]\n                text = word_info['text']\n                overall_text += text + ' '\n                word_data.append([text, bbox])\n            overall_text += '\\n'\n    return overall_text, word_data\n", "func_name": "analyze_ocr_results", "exec_status": true, "example_inputs": ["\"{'results': {'regions': [{'lines': [{'words': [{'boundingBox': '1,2,3,4', 'text': 'hello'}]}]}]}}\"", "\"{'results': {'regions': [{'lines': [{'words': [{'boundingBox': '5,6,7,8', 'text': 'world'}]}]}]}}\"", "\"{'results': {'regions': [{'lines': [{'words': [{'boundingBox': '9,10,11,12', 'text': 'python'}]}]}]}}\"", "\"{'results': {'regions': [{'lines': [{'words': [{'boundingBox': '13,14,15,16', 'text': 'is'}]}]}]}}\"", "\"{'results': {'regions': [{'lines': [{'words': [{'boundingBox': '17,18,19,20', 'text': 'fun'}]}]}]}}\"", "\"{'results': {'regions': [{'lines': [{'words': [{'boundingBox': '21,22,23,24', 'text': 'to'}]}]}]}}\"", "\"{'results': {'regions': [{'lines': [{'words': [{'boundingBox': '25,26,27,28', 'text': 'code'}]}]}]}}\"", "\"{'results': {'regions': [{'lines': [{'words': [{'boundingBox': '29,30,31,32', 'text': 'in'}]}]}]}}\"", "\"{'results': {'regions': [{'lines': [{'words': [{'boundingBox': '33,34,35,36', 'text': 'python'}]}]}]}}\"", "\"{'results': {'regions': [{'lines': [{'words': [{'boundingBox': '37,38,39,40', 'text': 'language'}]}]}]}}\""], "example_outputs": [{"return": "\"('hello \\\\n', [['hello', [1, 2, 3, 4]]])\""}, {"return": "\"('world \\\\n', [['world', [5, 6, 7, 8]]])\""}, {"return": "\"('python \\\\n', [['python', [9, 10, 11, 12]]])\""}, {"return": "\"('is \\\\n', [['is', [13, 14, 15, 16]]])\""}, {"return": "\"('fun \\\\n', [['fun', [17, 18, 19, 20]]])\""}, {"return": "\"('to \\\\n', [['to', [21, 22, 23, 24]]])\""}, {"return": "\"('code \\\\n', [['code', [25, 26, 27, 28]]])\""}, {"return": "\"('in \\\\n', [['in', [29, 30, 31, 32]]])\""}, {"return": "\"('python \\\\n', [['python', [33, 34, 35, 36]]])\""}, {"return": "\"('language \\\\n', [['language', [37, 38, 39, 40]]])\""}, {"return": "\"('Hello World \\\\n', [['Hello', [30, 70, 50, 20]], ['World', [85, 70, 30, 20]]])\""}, {"return": "\"('Sample Text \\\\n', [['Sample', [10, 40, 60, 20]], ['Text', [75, 40, 45, 20]]])\""}, {"return": "\"('Another Line \\\\n', [['Another', [15, 30, 40, 15]], ['Line', [60, 30, 50, 15]]])\""}, {"return": "\"('More Words \\\\n', [['More', [5, 50, 70, 25]], ['Words', [80, 50, 55, 25]]])\""}, {"return": "\"('Text Here \\\\n', [['Text', [20, 60, 90, 30]], ['Here', [115, 60, 35, 30]]])\""}, {"return": "\"('Example Six \\\\n', [['Example', [25, 80, 80, 35]], ['Six', [110, 80, 50, 35]]])\""}, {"return": "\"('Seven OCR \\\\n', [['Seven', [30, 90, 85, 40]], ['OCR', [120, 90, 45, 40]]])\""}, {"return": "\"('Eight Test \\\\n', [['Eight', [35, 100, 75, 45]], ['Test', [115, 100, 50, 45]]])\""}, {"return": "\"('Nine Input \\\\n', [['Nine', [40, 110, 65, 50]], ['Input', [110, 110, 55, 50]]])\""}, {"return": "\"('Ten Data \\\\n', [['Ten', [45, 120, 55, 55]], ['Data', [105, 120, 60, 55]]])\""}, {"return": "\"('Hello \\\\n', [['Hello', [10, 20, 30, 40]]])\""}, {"return": "\"('World \\\\n', [['World', [50, 60, 70, 80]]])\""}, {"return": "\"('Sample \\\\nText \\\\n', [['Sample', [15, 25, 35, 45]], ['Text', [55, 65, 75, 85]]])\""}, {"return": "\"('Line1 \\\\nLine2 \\\\n', [['Line1', [100, 200, 300, 400]], ['Line2', [110, 210, 310, 410]]])\""}, {"return": "\"('Data \\\\nAnalysis \\\\n', [['Data', [120, 230, 340, 450]], ['Analysis', [130, 240, 350, 460]]])\""}, {"return": "\"('Python \\\\nCode \\\\n', [['Python', [10, 20, 30, 40]], ['Code', [50, 60, 70, 80]]])\""}, {"return": "\"('OCR \\\\nFunction \\\\n', [['OCR', [20, 30, 40, 50]], ['Function', [60, 70, 80, 90]]])\""}, {"return": "\"('Test \\\\nInput \\\\n', [['Test', [25, 35, 45, 55]], ['Input', [65, 75, 85, 95]]])\""}, {"return": "\"('Multiple \\\\nLines \\\\n', [['Multiple', [30, 40, 50, 60]], ['Lines', [70, 80, 90, 100]]])\""}, {"return": "\"('Example \\\\nTen \\\\n', [['Example', [35, 45, 55, 65]], ['Ten', [75, 85, 95, 105]]])\""}], "parsed_inputs": [[["results", "{'regions': [{'lines': [{'words': [{'boundingBox': '1,2,3,4', 'text': 'hello'}]}]}]}"]], [["results", "{'regions': [{'lines': [{'words': [{'boundingBox': '5,6,7,8', 'text': 'world'}]}]}]}"]], [["results", "{'regions': [{'lines': [{'words': [{'boundingBox': '9,10,11,12', 'text': 'python'}]}]}]}"]], [["results", "{'regions': [{'lines': [{'words': [{'boundingBox': '13,14,15,16', 'text': 'is'}]}]}]}"]], [["results", "{'regions': [{'lines': [{'words': [{'boundingBox': '17,18,19,20', 'text': 'fun'}]}]}]}"]], [["results", "{'regions': [{'lines': [{'words': [{'boundingBox': '21,22,23,24', 'text': 'to'}]}]}]}"]], [["results", "{'regions': [{'lines': [{'words': [{'boundingBox': '25,26,27,28', 'text': 'code'}]}]}]}"]], [["results", "{'regions': [{'lines': [{'words': [{'boundingBox': '29,30,31,32', 'text': 'in'}]}]}]}"]], [["results", "{'regions': [{'lines': [{'words': [{'boundingBox': '33,34,35,36', 'text': 'python'}]}]}]}"]], [["results", "{'regions': [{'lines': [{'words': [{'boundingBox': '37,38,39,40', 'text': 'language'}]}]}]}"]]], "exec_code": "def analyze_ocr_results(results):\n    line_infos = [region['lines'] for region in results['regions']]\n    word_data = []\n    overall_text = ''\n    for line in line_infos:\n        for word_metadata in line:\n            for word_info in word_metadata['words']:\n                bbox = [int(coord) for coord in word_info['boundingBox'].\n                    split(',')]\n                text = word_info['text']\n                overall_text += text + ' '\n                word_data.append([text, bbox])\n            overall_text += '\\n'\n    return overall_text, word_data\n", "output": "The function is:\n\n```python\ndef analyze_ocr_results(results):\n    line_infos = [region['lines'] for region in results['regions']]\n    word_data = []\n    overall_text = ''\n    for line in line_infos:\n        for word_metadata in line:\n            for word_info in word_metadata['words']:\n                bbox = [int(coord) for coord in word_info['boundingBox'].\n                    split(',')]\n                text = word_info['text']\n                overall_text += text + ' '\n                word_data.append([text, bbox])\n            overall_text += '\\n'\n    return overall_text, word_data\n\n```", "choosed_example_idx": [7, 0, 9, 2, 5, 3, 1, 8], "prompt": "Function: analyze_ocr_results\n\nInput: dict(results={'regions': [{'lines': [{'words': [{'boundingBox': '29,30,31,32', 'text': 'in'}]}]}]}), Output: \"('in \\\\n', [['in', [29, 30, 31, 32]]])\"\nInput: dict(results={'regions': [{'lines': [{'words': [{'boundingBox': '1,2,3,4', 'text': 'hello'}]}]}]}), Output: \"('hello \\\\n', [['hello', [1, 2, 3, 4]]])\"\nInput: dict(results={'regions': [{'lines': [{'words': [{'boundingBox': '37,38,39,40', 'text': 'language'}]}]}]}), Output: \"('language \\\\n', [['language', [37, 38, 39, 40]]])\"\nInput: dict(results={'regions': [{'lines': [{'words': [{'boundingBox': '9,10,11,12', 'text': 'python'}]}]}]}), Output: \"('python \\\\n', [['python', [9, 10, 11, 12]]])\"\nInput: dict(results={'regions': [{'lines': [{'words': [{'boundingBox': '21,22,23,24', 'text': 'to'}]}]}]}), Output: \"('to \\\\n', [['to', [21, 22, 23, 24]]])\"\nInput: dict(results={'regions': [{'lines': [{'words': [{'boundingBox': '13,14,15,16', 'text': 'is'}]}]}]}), Output: \"('is \\\\n', [['is', [13, 14, 15, 16]]])\"\nInput: dict(results={'regions': [{'lines': [{'words': [{'boundingBox': '5,6,7,8', 'text': 'world'}]}]}]}), Output: \"('world \\\\n', [['world', [5, 6, 7, 8]]])\"\nInput: dict(results={'regions': [{'lines': [{'words': [{'boundingBox': '33,34,35,36', 'text': 'python'}]}]}]}), Output: \"('python \\\\n', [['python', [33, 34, 35, 36]]])\"\n\n\nWrite a function that generates the output from the input.\n\n\n", "id": "2eae05ce279764d8b9f0054ccb7c2a3e1460f66d_0"}
{"example_str": "examples = [\n    dict(x=0, z=0, n=1),\n    dict(x=5, z=3, n=2),\n    dict(x=-2, z=4, n=3),\n    dict(x=10, z=-5, n=4),\n    dict(x=0.5, z=1.2, n=0.7),\n    dict(x=-3.14, z=2.71, n=1.62),\n    dict(x=100, z=200, n=50),\n    dict(x=-100, z=-200, n=25),\n    dict(x=3, z=4, n=0),\n    dict(x=1.1, z=2.2, n=0.3),\n]\nexamples += [\n    dict(x=0, z=0, n=1),\n    dict(x=5, z=5, n=2),\n    dict(x=-3, z=10, n=4),\n    dict(x=2.5, z=-2.5, n=0.5),\n    dict(x=0, z=0, n=0),\n    dict(x=-10, z=20, n=5),\n    dict(x=100, z=100, n=50),\n    dict(x=0.1, z=0.1, n=0.05),\n    dict(x=-5, z=-5, n=3),\n    dict(x=8, z=-3, n=2.5)\n]\nexamples += [\n    dict(x=0, z=0, n=1),\n    dict(x=5, z=5, n=2),\n    dict(x=-3, z=10, n=4),\n    dict(x=2.5, z=-2.5, n=1.5),\n    dict(x=0, z=0, n=0),\n    dict(x=-1, z=-1, n=3),\n    dict(x=10, z=20, n=5),\n    dict(x=100, z=200, n=50),\n    dict(x=-50, z=-100, n=25),\n    dict(x=3.14, z=2.71, n=1.41)\n]", "code": "def cube_2d_aabb(x, z, n):\n    return x - n, z + n, x + n, z - n\n", "func_name": "cube_2d_aabb", "exec_status": true, "example_inputs": ["\"{'x': 0, 'z': 0, 'n': 1}\"", "\"{'x': 5, 'z': 3, 'n': 2}\"", "\"{'x': -2, 'z': 4, 'n': 3}\"", "\"{'x': 10, 'z': -5, 'n': 4}\"", "\"{'x': 0.5, 'z': 1.2, 'n': 0.7}\"", "\"{'x': -3.14, 'z': 2.71, 'n': 1.62}\"", "\"{'x': 100, 'z': 200, 'n': 50}\"", "\"{'x': -100, 'z': -200, 'n': 25}\"", "\"{'x': 3, 'z': 4, 'n': 0}\"", "\"{'x': 1.1, 'z': 2.2, 'n': 0.3}\""], "example_outputs": [{"return": "\"(-1, 1, 1, -1)\""}, {"return": "\"(3, 5, 7, 1)\""}, {"return": "\"(-5, 7, 1, 1)\""}, {"return": "\"(6, -1, 14, -9)\""}, {"return": "\"(-0.19999999999999996, 1.9, 1.2, 0.5)\""}, {"return": "\"(-4.76, 4.33, -1.52, 1.0899999999999999)\""}, {"return": "\"(50, 250, 150, 150)\""}, {"return": "\"(-125, -175, -75, -225)\""}, {"return": "\"(3, 4, 3, 4)\""}, {"return": "\"(0.8, 2.5, 1.4000000000000001, 1.9000000000000001)\""}, {"return": "\"(-1, 1, 1, -1)\""}, {"return": "\"(3, 7, 7, 3)\""}, {"return": "\"(-7, 14, 1, 6)\""}, {"return": "\"(2.0, -2.0, 3.0, -3.0)\""}, {"return": "\"(0, 0, 0, 0)\""}, {"return": "\"(-15, 25, -5, 15)\""}, {"return": "\"(50, 150, 150, 50)\""}, {"return": "\"(0.05, 0.15000000000000002, 0.15000000000000002, 0.05)\""}, {"return": "\"(-8, -2, -2, -8)\""}, {"return": "\"(5.5, -0.5, 10.5, -5.5)\""}, {"return": "\"(-1, 1, 1, -1)\""}, {"return": "\"(3, 7, 7, 3)\""}, {"return": "\"(-7, 14, 1, 6)\""}, {"return": "\"(1.0, -1.0, 4.0, -4.0)\""}, {"return": "\"(0, 0, 0, 0)\""}, {"return": "\"(-4, 2, 2, -4)\""}, {"return": "\"(5, 25, 15, 15)\""}, {"return": "\"(50, 250, 150, 150)\""}, {"return": "\"(-75, -75, -25, -125)\""}, {"return": "\"(1.7300000000000002, 4.12, 4.55, 1.3)\""}], "parsed_inputs": [[["x", "0"], ["z", "0"], ["n", "1"]], [["x", "5"], ["z", "3"], ["n", "2"]], [["x", "-2"], ["z", "4"], ["n", "3"]], [["x", "10"], ["z", "-5"], ["n", "4"]], [["x", "0.5"], ["z", "1.2"], ["n", "0.7"]], [["x", "-3.14"], ["z", "2.71"], ["n", "1.62"]], [["x", "100"], ["z", "200"], ["n", "50"]], [["x", "-100"], ["z", "-200"], ["n", "25"]], [["x", "3"], ["z", "4"], ["n", "0"]], [["x", "1.1"], ["z", "2.2"], ["n", "0.3"]]], "exec_code": "def cube_2d_aabb(x, z, n):\n    return x - n, z + n, x + n, z - n\n", "output": "The function is:\n\n```python\ndef cube_2d_aabb(x, z, n):\n    return x - n, z + n, x + n, z - n\n\n```", "choosed_example_idx": [2, 7, 3], "prompt": "Write a function that generates the output from the input.\n\nFunction: cube_2d_aabb\n\n\nInput: dict(x=-2, z=4, n=3), Output: \"(-5, 7, 1, 1)\"\nInput: dict(x=-100, z=-200, n=25), Output: \"(-125, -175, -75, -225)\"\nInput: dict(x=10, z=-5, n=4), Output: \"(6, -1, 14, -9)\"\n\n\n\n", "id": "a973d5706513b4137e9c60a9fba17461f5c1bc25_0"}
{"example_str": "examples = [\n    dict(current_player=\"X\", grid=[[\"X\", \"X\", \"X\"], [\"O\", \"O\", \"O\"], [\"X\", \"O\", \"X\"]]),\n    dict(current_player=1, grid=[[1, 1, 1], [2, 2, 2], [1, 2, 1]]),\n    dict(current_player=\"O\", grid=[[\"O\", \"O\", \"O\"], [\"X\", \"X\", \"X\"], [\"O\", \"X\", \"O\"]]),\n    dict(current_player=\"X\", grid=[[\"X\", \"X\", \"O\"], [\"O\", \"X\", \"O\"], [\"X\", \"O\", \"X\"]]),\n    dict(current_player=2, grid=[[2, 2, 2], [1, 1, 1], [2, 1, 2]]),\n    dict(current_player=\"X\", grid=[[\"X\", \"O\", \"X\"], [\"O\", \"X\", \"O\"], [\"X\", \"O\", \"X\"]]),\n    dict(current_player=\"O\", grid=[[\"O\", \"X\", \"O\"], [\"X\", \"O\", \"X\"], [\"O\", \"X\", \"O\"]]),\n    dict(current_player=1, grid=[[1, 2, 1], [2, 1, 2], [1, 2, 1]]),\n    dict(current_player=\"X\", grid=[[\"X\", \"X\", \"X\"], [\"X\", \"O\", \"O\"], [\"X\", \"O\", \"X\"]]),\n    dict(current_player=\"O\", grid=[[\"O\", \"O\", \"O\"], [\"O\", \"X\", \"X\"], [\"O\", \"X\", \"O\"]]),\n]\nexamples += [\n    dict(current_player='X', grid=[['X', 'X', 'X'], ['O', 'O', 'X'], ['O', 'X', 'O']]),\n    dict(current_player='O', grid=[['O', 'O', 'O'], ['X', 'X', 'O'], ['X', 'O', 'X']]),\n    dict(current_player='X', grid=[['X', 'O', 'X'], ['X', 'X', 'X'], ['O', 'O', 'X']]),\n    dict(current_player='O', grid=[['O', 'X', 'O'], ['X', 'O', 'X'], ['O', 'O', 'O']]),\n    dict(current_player='X', grid=[['X', 'X', 'O'], ['O', 'O', 'X'], ['X', 'O', 'X']]),\n    dict(current_player='O', grid=[['O', 'X', 'O'], ['X', 'X', 'O'], ['O', 'X', 'O']]),\n    dict(current_player='X', grid=[['X', 'O', 'X'], ['O', 'X', 'O'], ['X', 'O', 'X']]),\n    dict(current_player='O', grid=[['O', 'O', 'X'], ['X', 'O', 'X'], ['X', 'X', 'O']]),\n    dict(current_player='X', grid=[['X', 'X', 'X'], ['X', 'X', 'X'], ['X', 'X', 'X']]),\n    dict(current_player='O', grid=[['O', 'O', 'O'], ['O', 'O', 'O'], ['O', 'O', 'O']])\n]\nexamples += [\n    dict(current_player='X', grid=[['X', 'X', 'X'], ['O', 'O', '_'], ['_', '_', '_']]),\n    dict(current_player='O', grid=[['X', 'X', '_'], ['O', 'O', 'O'], ['_', '_', '_']]),\n    dict(current_player='X', grid=[['X', 'O', 'X'], ['O', 'X', 'O'], ['X', '_', '_']]),\n    dict(current_player='O', grid=[['O', 'O', 'O'], ['O', 'X', 'X'], ['X', 'X', 'O']]),\n    dict(current_player='X', grid=[['X', 'X', 'X'], ['X', 'X', 'X'], ['X', 'X', 'X']]),\n    dict(current_player='O', grid=[['O', 'O', 'O'], ['O', 'O', 'O'], ['O', 'O', 'O']]),\n    dict(current_player='X', grid=[['X', '_', '_'], ['_', 'X', '_'], ['_', '_', 'X']]),\n    dict(current_player='O', grid=[['O', '_', '_'], ['_', 'O', '_'], ['_', '_', 'O']]),\n    dict(current_player='X', grid=[['X', 'O', '_'], ['O', 'X', 'O'], ['_', 'O', 'X']]),\n    dict(current_player='O', grid=[['O', 'X', 'O'], ['X', 'O', 'X'], ['O', 'X', 'O']])\n]", "code": "def check_for_win_condition(current_player, grid):\n    for sub_grid in grid:\n        if len(set(sub_grid)) == 1:\n            print('Winner, winner.  Chicken dinner!')\n            return current_player\n", "func_name": "check_for_win_condition", "exec_status": true, "example_inputs": ["\"{'current_player': 'X', 'grid': [['X', 'X', 'X'], ['O', 'O', 'O'], ['X', 'O', 'X']]}\"", "\"{'current_player': 1, 'grid': [[1, 1, 1], [2, 2, 2], [1, 2, 1]]}\"", "\"{'current_player': 'O', 'grid': [['O', 'O', 'O'], ['X', 'X', 'X'], ['O', 'X', 'O']]}\"", "\"{'current_player': 'X', 'grid': [['X', 'X', 'O'], ['O', 'X', 'O'], ['X', 'O', 'X']]}\"", "\"{'current_player': 2, 'grid': [[2, 2, 2], [1, 1, 1], [2, 1, 2]]}\"", "\"{'current_player': 'X', 'grid': [['X', 'O', 'X'], ['O', 'X', 'O'], ['X', 'O', 'X']]}\"", "\"{'current_player': 'O', 'grid': [['O', 'X', 'O'], ['X', 'O', 'X'], ['O', 'X', 'O']]}\"", "\"{'current_player': 1, 'grid': [[1, 2, 1], [2, 1, 2], [1, 2, 1]]}\"", "\"{'current_player': 'X', 'grid': [['X', 'X', 'X'], ['X', 'O', 'O'], ['X', 'O', 'X']]}\"", "\"{'current_player': 'O', 'grid': [['O', 'O', 'O'], ['O', 'X', 'X'], ['O', 'X', 'O']]}\""], "example_outputs": [{"return": "\"'X'\""}, {"return": "\"1\""}, {"return": "\"'O'\""}, {"return": "\"None\""}, {"return": "\"2\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"'X'\""}, {"return": "\"'O'\""}, {"return": "\"'X'\""}, {"return": "\"'O'\""}, {"return": "\"'X'\""}, {"return": "\"'O'\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"'X'\""}, {"return": "\"'O'\""}, {"return": "\"'X'\""}, {"return": "\"'O'\""}, {"return": "\"None\""}, {"return": "\"'O'\""}, {"return": "\"'X'\""}, {"return": "\"'O'\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}], "parsed_inputs": [[["current_player", "\"X\""], ["grid", "[['X', 'X', 'X'], ['O', 'O', 'O'], ['X', 'O', 'X']]"]], [["current_player", "1"], ["grid", "[[1, 1, 1], [2, 2, 2], [1, 2, 1]]"]], [["current_player", "\"O\""], ["grid", "[['O', 'O', 'O'], ['X', 'X', 'X'], ['O', 'X', 'O']]"]], [["current_player", "\"X\""], ["grid", "[['X', 'X', 'O'], ['O', 'X', 'O'], ['X', 'O', 'X']]"]], [["current_player", "2"], ["grid", "[[2, 2, 2], [1, 1, 1], [2, 1, 2]]"]], [["current_player", "\"X\""], ["grid", "[['X', 'O', 'X'], ['O', 'X', 'O'], ['X', 'O', 'X']]"]], [["current_player", "\"O\""], ["grid", "[['O', 'X', 'O'], ['X', 'O', 'X'], ['O', 'X', 'O']]"]], [["current_player", "1"], ["grid", "[[1, 2, 1], [2, 1, 2], [1, 2, 1]]"]], [["current_player", "\"X\""], ["grid", "[['X', 'X', 'X'], ['X', 'O', 'O'], ['X', 'O', 'X']]"]], [["current_player", "\"O\""], ["grid", "[['O', 'O', 'O'], ['O', 'X', 'X'], ['O', 'X', 'O']]"]]], "exec_code": "def check_for_win_condition(current_player, grid):\n    for sub_grid in grid:\n        if len(set(sub_grid)) == 1:\n            print('Winner, winner.  Chicken dinner!')\n            return current_player\n", "output": "The function is:\n\n```python\ndef check_for_win_condition(current_player, grid):\n    for sub_grid in grid:\n        if len(set(sub_grid)) == 1:\n            print('Winner, winner.  Chicken dinner!')\n            return current_player\n\n```", "choosed_example_idx": [4, 7, 5], "prompt": "Write a function that generates the output from the input.\nInput: dict(current_player=2, grid=[[2, 2, 2], [1, 1, 1], [2, 1, 2]]), Output: \"2\"\nInput: dict(current_player=1, grid=[[1, 2, 1], [2, 1, 2], [1, 2, 1]]), Output: \"None\"\nInput: dict(current_player=\"X\", grid=[['X', 'O', 'X'], ['O', 'X', 'O'], ['X', 'O', 'X']]), Output: \"None\"\n\nFunction: check_for_win_condition\n\n\n", "id": "6b9a8807885574769971387c5a7f00a2c9aeaad9_0"}
{"example_str": "examples = [\n    dict(object=1),\n    dict(object='hello'),\n    dict(object=[1, 2, 3]),\n    dict(object=(1, 2, 3)),\n    dict(object={'a': 1, 'b': 2}),\n    dict(object=frozenset([1, 2, 3])),\n    dict(object=True),\n    dict(object=None),\n    dict(object=b'hello'),\n    dict(object=1.23)\n]\nexamples += [\n    dict(object=42),  # integer\n    dict(object=3.14),  # float\n    dict(object=\"hello\"),  # string\n    dict(object=(1, 2, 3)),  # tuple\n    dict(object=True),  # boolean\n    dict(object=None),  # NoneType\n    dict(object=1+2j),  # complex number\n    dict(object=frozenset([1, 2, 3])),  # frozenset\n    dict(object=b\"byte string\"),  # bytes\n    dict(object=1.0)  # float that is equivalent to an integer\n]\nexamples += [\n    dict(object=42),                # integer\n    dict(object=3.14),              # float\n    dict(object=\"hello\"),           # string\n    dict(object=(1, 2, 3)),         # tuple\n    dict(object=True),              # boolean\n    dict(object=0),                 # zero integer\n    dict(object=-100),              # negative integer\n    dict(object=2.71828),           # another float\n    dict(object=\"world\"),           # another string\n    dict(object=(4, 5, \"six\")),     # tuple with mixed types\n]", "code": "def generate_jinja_hash(object):\n    return hash(object)\n", "func_name": "generate_jinja_hash", "exec_status": true, "example_inputs": ["\"{'object': 1}\"", "\"{'object': 'hello'}\"", "\"{'object': [1, 2, 3]}\"", "\"{'object': (1, 2, 3)}\"", "\"{'object': {'a': 1, 'b': 2}}\"", "\"{'object': frozenset({1, 2, 3})}\"", "\"{'object': True}\"", "\"{'object': None}\"", "\"{'object': b'hello'}\"", "\"{'object': 1.23}\""], "example_outputs": [{"return": "\"1\""}, {"return": "\"-6212446494831598365\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: unhashable type: 'list'\""}, {"return": "\"529344067295497451\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: unhashable type: 'dict'\""}, {"return": "\"-272375401224217160\""}, {"return": "\"1\""}, {"return": "\"463320\""}, {"return": "\"-6212446494831598365\""}, {"return": "\"530343892119149569\""}, {"return": "\"42\""}, {"return": "\"322818021289917443\""}, {"return": "\"-3671651325038964290\""}, {"return": "\"529344067295497451\""}, {"return": "\"1\""}, {"return": "\"463320\""}, {"return": "\"2000007\""}, {"return": "\"-272375401224217160\""}, {"return": "\"-4169085545592910796\""}, {"return": "\"1\""}, {"return": "\"42\""}, {"return": "\"322818021289917443\""}, {"return": "\"2571116617853642917\""}, {"return": "\"529344067295497451\""}, {"return": "\"1\""}, {"return": "\"0\""}, {"return": "\"-100\""}, {"return": "\"1656240916658012162\""}, {"return": "\"2065554082545688847\""}, {"return": "\"3702860140859369785\""}], "parsed_inputs": [[["object", "1"]], [["object", "\"hello\""]], [["object", "[1, 2, 3]"]], [["object", "(1, 2, 3)"]], [["object", "{'a': 1, 'b': 2}"]], [["object", "frozenset([1, 2, 3])"]], [["object", "True"]], [["object", "None"]], [["object", "b'hello'"]], [["object", "1.23"]]], "exec_code": "def generate_jinja_hash(object):\n    return hash(object)\n", "output": "The function is:\n\n```python\ndef generate_jinja_hash(object):\n    return hash(object)\n\n```", "choosed_example_idx": [9, 1, 7, 5, 0, 6, 8, 3], "prompt": "Write a function that generates the output from the input.\nFunction: generate_jinja_hash\n\nInput: dict(object=1.23), Output: \"530343892119149569\"\nInput: dict(object=\"hello\"), Output: \"-6212446494831598365\"\nInput: dict(object=None), Output: \"463320\"\nInput: dict(object=frozenset([1, 2, 3])), Output: \"-272375401224217160\"\nInput: dict(object=1), Output: \"1\"\nInput: dict(object=True), Output: \"1\"\nInput: dict(object=b'hello'), Output: \"-6212446494831598365\"\nInput: dict(object=(1, 2, 3)), Output: \"529344067295497451\"\n\n\n", "id": "b3e21ce3b9766df2caf71b65922afe5eabd157ad_0"}
{"example_str": "examples = [\n    dict(sig=0.5),\n    dict(sig=0.0),\n    dict(sig=1.0),\n    dict(sig=-0.5),\n    dict(sig=0.25),\n    dict(sig=0.75),\n    dict(sig=2.0),\n    dict(sig=-1.0),\n    dict(sig=0.1),\n    dict(sig=0.9),\n]\nexamples += [\n    dict(sig=0.5),\n    dict(sig=0.1),\n    dict(sig=0.9),\n    dict(sig=0.0),\n    dict(sig=1.0),\n    dict(sig=0.75),\n    dict(sig=0.25),\n    dict(sig=0.99),\n    dict(sig=0.01),\n    dict(sig=0.3)\n]\nexamples += [\n    dict(sig=0.1),\n    dict(sig=0.2),\n    dict(sig=0.3),\n    dict(sig=0.4),\n    dict(sig=0.5),\n    dict(sig=0.6),\n    dict(sig=0.7),\n    dict(sig=0.8),\n    dict(sig=0.9),\n    dict(sig=0.95)\n]", "code": "def sigmoid_backward(sig):\n    return sig * (1 - sig)\n", "func_name": "sigmoid_backward", "exec_status": true, "example_inputs": ["\"{'sig': 0.5}\"", "\"{'sig': 0.0}\"", "\"{'sig': 1.0}\"", "\"{'sig': -0.5}\"", "\"{'sig': 0.25}\"", "\"{'sig': 0.75}\"", "\"{'sig': 2.0}\"", "\"{'sig': -1.0}\"", "\"{'sig': 0.1}\"", "\"{'sig': 0.9}\""], "example_outputs": [{"return": "\"0.25\""}, {"return": "\"0.0\""}, {"return": "\"0.0\""}, {"return": "\"-0.75\""}, {"return": "\"0.1875\""}, {"return": "\"0.1875\""}, {"return": "\"-2.0\""}, {"return": "\"-2.0\""}, {"return": "\"0.09000000000000001\""}, {"return": "\"0.08999999999999998\""}, {"return": "\"0.25\""}, {"return": "\"0.09000000000000001\""}, {"return": "\"0.08999999999999998\""}, {"return": "\"0.0\""}, {"return": "\"0.0\""}, {"return": "\"0.1875\""}, {"return": "\"0.1875\""}, {"return": "\"0.00990000000000001\""}, {"return": "\"0.0099\""}, {"return": "\"0.21\""}, {"return": "\"0.09000000000000001\""}, {"return": "\"0.16000000000000003\""}, {"return": "\"0.21\""}, {"return": "\"0.24\""}, {"return": "\"0.25\""}, {"return": "\"0.24\""}, {"return": "\"0.21000000000000002\""}, {"return": "\"0.15999999999999998\""}, {"return": "\"0.08999999999999998\""}, {"return": "\"0.04750000000000004\""}], "parsed_inputs": [[["sig", "0.5"]], [["sig", "0.0"]], [["sig", "1.0"]], [["sig", "-0.5"]], [["sig", "0.25"]], [["sig", "0.75"]], [["sig", "2.0"]], [["sig", "-1.0"]], [["sig", "0.1"]], [["sig", "0.9"]]], "exec_code": "def sigmoid_backward(sig):\n    return sig * (1 - sig)\n", "output": "The function is:\n\n```python\ndef sigmoid_backward(sig):\n    return sig * (1 - sig)\n\n```", "choosed_example_idx": [3, 4, 7, 0, 1, 5, 8, 2], "prompt": "Input: dict(sig=-0.5), Output: \"-0.75\"\nInput: dict(sig=0.25), Output: \"0.1875\"\nInput: dict(sig=-1.0), Output: \"-2.0\"\nInput: dict(sig=0.5), Output: \"0.25\"\nInput: dict(sig=0.0), Output: \"0.0\"\nInput: dict(sig=0.75), Output: \"0.1875\"\nInput: dict(sig=0.1), Output: \"0.09000000000000001\"\nInput: dict(sig=1.0), Output: \"0.0\"\n\nFunction: sigmoid_backward\nWrite a function that generates the output from the input.\n\n", "id": "abb0d23a8e09c2da1cae154a61de5af8b845f1c4_0"}
{"example_str": "examples = [\n    dict(dataset='mnist'),\n    dict(dataset='cifar10'),\n    dict(dataset='cifar100'),\n    dict(dataset='tiny-imagenet'),\n    dict(dataset='imagenet'),\n    dict(dataset='other'),  # this will not return any value as it's not handled in the function\n    dict(dataset='MNIST'),  # this will not return any value as it's case sensitive\n    dict(dataset='CIFAR10'),  # this will not return any value as it's case sensitive\n    dict(dataset=''),  # this will not return any value as it's not handled in the function\n    dict(dataset=None),  # this will throw an error as it's not handled in the function\n]\nexamples += [\n    dict(dataset='mnist'),\n    dict(dataset='cifar10'),\n    dict(dataset='cifar100'),\n    dict(dataset='tiny-imagenet'),\n    dict(dataset='imagenet'),\n    dict(dataset='MNIST'),  # Testing case sensitivity\n    dict(dataset='CIFAR10'),  # Testing case sensitivity\n    dict(dataset='CIFAR100'),  # Testing case sensitivity\n    dict(dataset='TINY-IMAGENET'),  # Testing case sensitivity\n    dict(dataset='IMAGENET')  # Testing case sensitivity\n]\nexamples += [\n    dict(dataset='mnist'),\n    dict(dataset='cifar10'),\n    dict(dataset='cifar100'),\n    dict(dataset='tiny-imagenet'),\n    dict(dataset='imagenet'),\n    dict(dataset='mnist'),  # Repeated to make up 10 examples\n    dict(dataset='cifar10'),\n    dict(dataset='cifar100'),\n    dict(dataset='tiny-imagenet'),\n    dict(dataset='imagenet')\n]", "code": "def dimension(dataset):\n    if dataset == 'mnist':\n        input_shape, num_classes = (1, 28, 28), 10\n    if dataset == 'cifar10':\n        input_shape, num_classes = (3, 32, 32), 10\n    if dataset == 'cifar100':\n        input_shape, num_classes = (3, 32, 32), 100\n    if dataset == 'tiny-imagenet':\n        input_shape, num_classes = (3, 64, 64), 200\n    if dataset == 'imagenet':\n        input_shape, num_classes = (3, 224, 224), 1000\n    return input_shape, num_classes\n", "func_name": "dimension", "exec_status": true, "example_inputs": ["\"{'dataset': 'mnist'}\"", "\"{'dataset': 'cifar10'}\"", "\"{'dataset': 'cifar100'}\"", "\"{'dataset': 'tiny-imagenet'}\"", "\"{'dataset': 'imagenet'}\"", "\"{'dataset': 'other'}\"", "\"{'dataset': 'MNIST'}\"", "\"{'dataset': 'CIFAR10'}\"", "\"{'dataset': ''}\"", "\"{'dataset': None}\""], "example_outputs": [{"return": "\"((1, 28, 28), 10)\""}, {"return": "\"((3, 32, 32), 10)\""}, {"return": "\"((3, 32, 32), 100)\""}, {"return": "\"((3, 64, 64), 200)\""}, {"return": "\"((3, 224, 224), 1000)\""}, {"error": "<|EXCEPTION|> \"<class 'UnboundLocalError'>: local variable 'input_shape' referenced before assignment\""}, {"error": "<|EXCEPTION|> \"<class 'UnboundLocalError'>: local variable 'input_shape' referenced before assignment\""}, {"error": "<|EXCEPTION|> \"<class 'UnboundLocalError'>: local variable 'input_shape' referenced before assignment\""}, {"error": "<|EXCEPTION|> \"<class 'UnboundLocalError'>: local variable 'input_shape' referenced before assignment\""}, {"error": "<|EXCEPTION|> \"<class 'UnboundLocalError'>: local variable 'input_shape' referenced before assignment\""}, {"return": "\"((1, 28, 28), 10)\""}, {"return": "\"((3, 32, 32), 10)\""}, {"return": "\"((3, 32, 32), 100)\""}, {"return": "\"((3, 64, 64), 200)\""}, {"return": "\"((3, 224, 224), 1000)\""}, {"error": "<|EXCEPTION|> \"<class 'UnboundLocalError'>: local variable 'input_shape' referenced before assignment\""}, {"error": "<|EXCEPTION|> \"<class 'UnboundLocalError'>: local variable 'input_shape' referenced before assignment\""}, {"error": "<|EXCEPTION|> \"<class 'UnboundLocalError'>: local variable 'input_shape' referenced before assignment\""}, {"error": "<|EXCEPTION|> \"<class 'UnboundLocalError'>: local variable 'input_shape' referenced before assignment\""}, {"error": "<|EXCEPTION|> \"<class 'UnboundLocalError'>: local variable 'input_shape' referenced before assignment\""}, {"return": "\"((1, 28, 28), 10)\""}, {"return": "\"((3, 32, 32), 10)\""}, {"return": "\"((3, 32, 32), 100)\""}, {"return": "\"((3, 64, 64), 200)\""}, {"return": "\"((3, 224, 224), 1000)\""}, {"return": "\"((1, 28, 28), 10)\""}, {"return": "\"((3, 32, 32), 10)\""}, {"return": "\"((3, 32, 32), 100)\""}, {"return": "\"((3, 64, 64), 200)\""}, {"return": "\"((3, 224, 224), 1000)\""}], "parsed_inputs": [[["dataset", "\"mnist\""]], [["dataset", "\"cifar10\""]], [["dataset", "\"cifar100\""]], [["dataset", "\"tiny-imagenet\""]], [["dataset", "\"imagenet\""]], [["dataset", "\"other\""]], [["dataset", "\"MNIST\""]], [["dataset", "\"CIFAR10\""]], [["dataset", "\"\""]], [["dataset", "None"]]], "exec_code": "def dimension(dataset):\n    if dataset == 'mnist':\n        input_shape, num_classes = (1, 28, 28), 10\n    if dataset == 'cifar10':\n        input_shape, num_classes = (3, 32, 32), 10\n    if dataset == 'cifar100':\n        input_shape, num_classes = (3, 32, 32), 100\n    if dataset == 'tiny-imagenet':\n        input_shape, num_classes = (3, 64, 64), 200\n    if dataset == 'imagenet':\n        input_shape, num_classes = (3, 224, 224), 1000\n    return input_shape, num_classes\n", "output": "The function is:\n\n```python\ndef dimension(dataset):\n    if dataset == 'mnist':\n        input_shape, num_classes = (1, 28, 28), 10\n    if dataset == 'cifar10':\n        input_shape, num_classes = (3, 32, 32), 10\n    if dataset == 'cifar100':\n        input_shape, num_classes = (3, 32, 32), 100\n    if dataset == 'tiny-imagenet':\n        input_shape, num_classes = (3, 64, 64), 200\n    if dataset == 'imagenet':\n        input_shape, num_classes = (3, 224, 224), 1000\n    return input_shape, num_classes\n\n```", "choosed_example_idx": [5, 2, 9, 1, 6, 4, 0, 3, 7], "prompt": "Input: dict(dataset=\"other\"), Output: \"<class 'UnboundLocalError'>: local variable 'input_shape' referenced before assignment\"\nInput: dict(dataset=\"cifar100\"), Output: \"((3, 32, 32), 100)\"\nInput: dict(dataset=None), Output: \"<class 'UnboundLocalError'>: local variable 'input_shape' referenced before assignment\"\nInput: dict(dataset=\"cifar10\"), Output: \"((3, 32, 32), 10)\"\nInput: dict(dataset=\"MNIST\"), Output: \"<class 'UnboundLocalError'>: local variable 'input_shape' referenced before assignment\"\nInput: dict(dataset=\"imagenet\"), Output: \"((3, 224, 224), 1000)\"\nInput: dict(dataset=\"mnist\"), Output: \"((1, 28, 28), 10)\"\nInput: dict(dataset=\"tiny-imagenet\"), Output: \"((3, 64, 64), 200)\"\nInput: dict(dataset=\"CIFAR10\"), Output: \"<class 'UnboundLocalError'>: local variable 'input_shape' referenced before assignment\"\n\n\n\nWrite a function that generates the output from the input.\nFunction: dimension\n\n", "id": "80caed1de4bd6e24e430a24de5ed3e5db9914674_0"}
{"example_str": "examples = [\n    dict(row={'text': ['this', 'is', 'a', 'test'], 'encoded_airline': 1, 'hour': 12}),\n    dict(row={'text': ['hello', 'world'], 'encoded_airline': 2, 'hour': 6}),\n    dict(row={'text': ['python', 'is', 'fun'], 'encoded_airline': 3, 'hour': 18}),\n    dict(row={'text': ['machine', 'learning'], 'encoded_airline': 4, 'hour': 9}),\n    dict(row={'text': ['natural', 'language', 'processing'], 'encoded_airline': 5, 'hour': 15}),\n    dict(row={'text': ['artificial', 'intelligence'], 'encoded_airline': 6, 'hour': 3}),\n    dict(row={'text': ['deep', 'learning'], 'encoded_airline': 7, 'hour': 21}),\n    dict(row={'text': ['computer', 'vision'], 'encoded_airline': 8, 'hour': 1}),\n    dict(row={'text': ['data', 'science'], 'encoded_airline': 9, 'hour': 11}),\n    dict(row={'text': ['big', 'data'], 'encoded_airline': 10, 'hour': 20}),\n]\nexamples += [\n    dict(row={'text': ['Flight', 'delayed'], 'encoded_airline': 101, 'hour': 14}),\n    dict(row={'text': ['Good', 'service'], 'encoded_airline': 202, 'hour': 9}),\n    dict(row={'text': ['Lost', 'luggage'], 'encoded_airline': 303, 'hour': 22}),\n    dict(row={'text': ['Nice', 'crew'], 'encoded_airline': 404, 'hour': 16}),\n    dict(row={'text': ['Long', 'wait'], 'encoded_airline': 505, 'hour': 12}),\n    dict(row={'text': ['Excellent', 'food'], 'encoded_airline': 606, 'hour': 19}),\n    dict(row={'text': ['Poor', 'legroom'], 'encoded_airline': 707, 'hour': 21}),\n    dict(row={'text': ['Great', 'prices'], 'encoded_airline': 808, 'hour': 11}),\n    dict(row={'text': ['Early', 'arrival'], 'encoded_airline': 909, 'hour': 8}),\n    dict(row={'text': ['Smooth', 'takeoff'], 'encoded_airline': 1010, 'hour': 17})\n]\nexamples += [\n    dict(row={'text': ['Hello'], 'encoded_airline': 1, 'hour': 12}),\n    dict(row={'text': ['Good morning'], 'encoded_airline': 2, 'hour': 6}),\n    dict(row={'text': ['Good evening'], 'encoded_airline': 3, 'hour': 18}),\n    dict(row={'text': ['Late night'], 'encoded_airline': 4, 'hour': 23}),\n    dict(row={'text': ['Early morning'], 'encoded_airline': 5, 'hour': 5}),\n    dict(row={'text': ['Afternoon'], 'encoded_airline': 6, 'hour': 15}),\n    dict(row={'text': ['Noon'], 'encoded_airline': 7, 'hour': 12}),\n    dict(row={'text': ['Midnight'], 'encoded_airline': 8, 'hour': 0}),\n    dict(row={'text': ['Lunch time'], 'encoded_airline': 9, 'hour': 13}),\n    dict(row={'text': ['Tea time'], 'encoded_airline': 10, 'hour': 17})\n]", "code": "def generate_observation(row):\n    x = row['text']\n    x.append(row['encoded_airline'])\n    x.append(row['hour'])\n    return x\n", "func_name": "generate_observation", "exec_status": true, "example_inputs": ["\"{'row': {'text': ['this', 'is', 'a', 'test'], 'encoded_airline': 1, 'hour': 12}}\"", "\"{'row': {'text': ['hello', 'world'], 'encoded_airline': 2, 'hour': 6}}\"", "\"{'row': {'text': ['python', 'is', 'fun'], 'encoded_airline': 3, 'hour': 18}}\"", "\"{'row': {'text': ['machine', 'learning'], 'encoded_airline': 4, 'hour': 9}}\"", "\"{'row': {'text': ['natural', 'language', 'processing'], 'encoded_airline': 5, 'hour': 15}}\"", "\"{'row': {'text': ['artificial', 'intelligence'], 'encoded_airline': 6, 'hour': 3}}\"", "\"{'row': {'text': ['deep', 'learning'], 'encoded_airline': 7, 'hour': 21}}\"", "\"{'row': {'text': ['computer', 'vision'], 'encoded_airline': 8, 'hour': 1}}\"", "\"{'row': {'text': ['data', 'science'], 'encoded_airline': 9, 'hour': 11}}\"", "\"{'row': {'text': ['big', 'data'], 'encoded_airline': 10, 'hour': 20}}\""], "example_outputs": [{"return": "\"['this', 'is', 'a', 'test', 1, 12]\""}, {"return": "\"['hello', 'world', 2, 6]\""}, {"return": "\"['python', 'is', 'fun', 3, 18]\""}, {"return": "\"['machine', 'learning', 4, 9]\""}, {"return": "\"['natural', 'language', 'processing', 5, 15]\""}, {"return": "\"['artificial', 'intelligence', 6, 3]\""}, {"return": "\"['deep', 'learning', 7, 21]\""}, {"return": "\"['computer', 'vision', 8, 1]\""}, {"return": "\"['data', 'science', 9, 11]\""}, {"return": "\"['big', 'data', 10, 20]\""}, {"return": "\"['Flight', 'delayed', 101, 14]\""}, {"return": "\"['Good', 'service', 202, 9]\""}, {"return": "\"['Lost', 'luggage', 303, 22]\""}, {"return": "\"['Nice', 'crew', 404, 16]\""}, {"return": "\"['Long', 'wait', 505, 12]\""}, {"return": "\"['Excellent', 'food', 606, 19]\""}, {"return": "\"['Poor', 'legroom', 707, 21]\""}, {"return": "\"['Great', 'prices', 808, 11]\""}, {"return": "\"['Early', 'arrival', 909, 8]\""}, {"return": "\"['Smooth', 'takeoff', 1010, 17]\""}, {"return": "\"['Hello', 1, 12]\""}, {"return": "\"['Good morning', 2, 6]\""}, {"return": "\"['Good evening', 3, 18]\""}, {"return": "\"['Late night', 4, 23]\""}, {"return": "\"['Early morning', 5, 5]\""}, {"return": "\"['Afternoon', 6, 15]\""}, {"return": "\"['Noon', 7, 12]\""}, {"return": "\"['Midnight', 8, 0]\""}, {"return": "\"['Lunch time', 9, 13]\""}, {"return": "\"['Tea time', 10, 17]\""}], "parsed_inputs": [[["row", "{'text': ['this', 'is', 'a', 'test'], 'encoded_airline': 1, 'hour': 12}"]], [["row", "{'text': ['hello', 'world'], 'encoded_airline': 2, 'hour': 6}"]], [["row", "{'text': ['python', 'is', 'fun'], 'encoded_airline': 3, 'hour': 18}"]], [["row", "{'text': ['machine', 'learning'], 'encoded_airline': 4, 'hour': 9}"]], [["row", "{'text': ['natural', 'language', 'processing'], 'encoded_airline': 5, 'hour': 15}"]], [["row", "{'text': ['artificial', 'intelligence'], 'encoded_airline': 6, 'hour': 3}"]], [["row", "{'text': ['deep', 'learning'], 'encoded_airline': 7, 'hour': 21}"]], [["row", "{'text': ['computer', 'vision'], 'encoded_airline': 8, 'hour': 1}"]], [["row", "{'text': ['data', 'science'], 'encoded_airline': 9, 'hour': 11}"]], [["row", "{'text': ['big', 'data'], 'encoded_airline': 10, 'hour': 20}"]]], "exec_code": "def generate_observation(row):\n    x = row['text']\n    x.append(row['encoded_airline'])\n    x.append(row['hour'])\n    return x\n", "output": "The function is:\n\n```python\ndef generate_observation(row):\n    x = row['text']\n    x.append(row['encoded_airline'])\n    x.append(row['hour'])\n    return x\n\n```", "choosed_example_idx": [7, 3, 4, 6, 2, 1, 5], "prompt": "Input: dict(row={'text': ['computer', 'vision'], 'encoded_airline': 8, 'hour': 1}), Output: \"['computer', 'vision', 8, 1]\"\nInput: dict(row={'text': ['machine', 'learning'], 'encoded_airline': 4, 'hour': 9}), Output: \"['machine', 'learning', 4, 9]\"\nInput: dict(row={'text': ['natural', 'language', 'processing'], 'encoded_airline': 5, 'hour': 15}), Output: \"['natural', 'language', 'processing', 5, 15]\"\nInput: dict(row={'text': ['deep', 'learning'], 'encoded_airline': 7, 'hour': 21}), Output: \"['deep', 'learning', 7, 21]\"\nInput: dict(row={'text': ['python', 'is', 'fun'], 'encoded_airline': 3, 'hour': 18}), Output: \"['python', 'is', 'fun', 3, 18]\"\nInput: dict(row={'text': ['hello', 'world'], 'encoded_airline': 2, 'hour': 6}), Output: \"['hello', 'world', 2, 6]\"\nInput: dict(row={'text': ['artificial', 'intelligence'], 'encoded_airline': 6, 'hour': 3}), Output: \"['artificial', 'intelligence', 6, 3]\"\n\n\nWrite a function that generates the output from the input.\n\nFunction: generate_observation\n", "id": "ebe1a3632ac30c3f1cda18a06273843790192e67_0"}
{"example_str": "examples = [\n    dict(A=\"kitten\", B=\"sitting\", maxDist=2),\n    dict(A=[\"a\", \"b\", \"c\"], B=[\"a\", \"b\", \"d\"], maxDist=1),\n    dict(A=\"abcde\", B=\"ace\", maxDist=0),\n    dict(A=[\"a\", \"b\", \"c\", \"d\"], B=[\"a\", \"c\"], maxDist=-1),\n    dict(A=\"abcdef\", B=\"azced\", maxDist=3),\n    dict(A=[\"a\", \"b\", \"c\"], B=[\"d\", \"e\", \"f\"], maxDist=2),\n    dict(A=\"abcd\", B=\"abcd\", maxDist=0),\n    dict(A=[\"a\", \"b\", \"c\", \"d\"], B=[\"e\", \"f\", \"g\", \"h\"], maxDist=4),\n    dict(A=\"abcdefgh\", B=\"abcdefgh\", maxDist=-1),\n    dict(A=[\"a\", \"b\", \"c\", \"d\", \"e\"], B=[\"a\", \"b\", \"c\", \"d\", \"f\"], maxDist=1)\n]\nexamples += [\n    dict(A=\"hello\", B=\"hallo\"),\n    dict(A=\"kitten\", B=\"sitting\"),\n    dict(A=\"flame\", B=\"frame\", maxDist=2),\n    dict(A=\"12345\", B=\"1234\"),\n    dict(A=\"apple\", B=\"aple\", maxDist=1),\n    dict(A=\"banana\", B=\"bahama\", maxDist=3),\n    dict(A=\"star\", B=\"stars\"),\n    dict(A=\"example\", B=\"samples\", maxDist=5),\n    dict(A=\"test\", B=\"tent\", maxDist=1),\n    dict(A=\"distance\", B=\"instance\", maxDist=2)\n]\nexamples += [\n    dict(A=\"hello\", B=\"hallo\", maxDist=-1),\n    dict(A=\"kitten\", B=\"sitting\", maxDist=3),\n    dict(A=\"flaw\", B=\"lawn\", maxDist=2),\n    dict(A=\"intention\", B=\"execution\", maxDist=5),\n    dict(A=\"1234567890\", B=\"123456780\", maxDist=-1),\n    dict(A=\"example\", B=\"samples\", maxDist=2),\n    dict(A=\"distance\", B=\"instance\", maxDist=3),\n    dict(A=\"python\", B=\"pythno\", maxDist=1),\n    dict(A=\"algorithm\", B=\"algoritm\", maxDist=1),\n    dict(A=\"abcdef\", B=\"abcdf\", maxDist=0)\n]", "code": "def compute(A, B, maxDist=-1):\n    w = len(A)\n    h = len(B)\n    if maxDist > 0:\n        if abs(w - h) >= maxDist + 1:\n            return maxDist + 1\n    row = []\n    for x in range(w):\n        row.append(x + 1)\n    for y in range(h):\n        newRow = [0] * w\n        minVal = maxDist + 1\n        for x in range(w):\n            indicator = A[x] == B[y]\n            if indicator:\n                indicator = 0\n            else:\n                indicator = 1\n            if x == 0:\n                val = min(y + 1 + 1, y + indicator, row[x] + 1)\n            else:\n                val = min(newRow[x - 1] + 1, row[x - 1] + indicator, row[x] + 1\n                    )\n            newRow[x] = val\n            minVal = min(minVal, val)\n        if maxDist > 0:\n            if minVal > maxDist:\n                return maxDist + 1\n        row = newRow\n    return row[-1]\n", "func_name": "compute", "exec_status": true, "example_inputs": ["\"{'A': 'kitten', 'B': 'sitting', 'maxDist': 2}\"", "\"{'A': ['a', 'b', 'c'], 'B': ['a', 'b', 'd'], 'maxDist': 1}\"", "\"{'A': 'abcde', 'B': 'ace', 'maxDist': 0}\"", "\"{'A': ['a', 'b', 'c', 'd'], 'B': ['a', 'c'], 'maxDist': -1}\"", "\"{'A': 'abcdef', 'B': 'azced', 'maxDist': 3}\"", "\"{'A': ['a', 'b', 'c'], 'B': ['d', 'e', 'f'], 'maxDist': 2}\"", "\"{'A': 'abcd', 'B': 'abcd', 'maxDist': 0}\"", "\"{'A': ['a', 'b', 'c', 'd'], 'B': ['e', 'f', 'g', 'h'], 'maxDist': 4}\"", "\"{'A': 'abcdefgh', 'B': 'abcdefgh', 'maxDist': -1}\"", "\"{'A': ['a', 'b', 'c', 'd', 'e'], 'B': ['a', 'b', 'c', 'd', 'f'], 'maxDist': 1}\""], "example_outputs": [{"return": "\"3\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"4\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"2\""}, {"return": "\"5\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"1\""}], "parsed_inputs": [[["A", "\"kitten\""], ["B", "\"sitting\""], ["maxDist", "2"]], [["A", "['a', 'b', 'c']"], ["B", "['a', 'b', 'd']"], ["maxDist", "1"]], [["A", "\"abcde\""], ["B", "\"ace\""], ["maxDist", "0"]], [["A", "['a', 'b', 'c', 'd']"], ["B", "['a', 'c']"], ["maxDist", "-1"]], [["A", "\"abcdef\""], ["B", "\"azced\""], ["maxDist", "3"]], [["A", "['a', 'b', 'c']"], ["B", "['d', 'e', 'f']"], ["maxDist", "2"]], [["A", "\"abcd\""], ["B", "\"abcd\""], ["maxDist", "0"]], [["A", "['a', 'b', 'c', 'd']"], ["B", "['e', 'f', 'g', 'h']"], ["maxDist", "4"]], [["A", "\"abcdefgh\""], ["B", "\"abcdefgh\""], ["maxDist", "-1"]], [["A", "['a', 'b', 'c', 'd', 'e']"], ["B", "['a', 'b', 'c', 'd', 'f']"], ["maxDist", "1"]]], "exec_code": "def compute(A, B, maxDist=-1):\n    w = len(A)\n    h = len(B)\n    if maxDist > 0:\n        if abs(w - h) >= maxDist + 1:\n            return maxDist + 1\n    row = []\n    for x in range(w):\n        row.append(x + 1)\n    for y in range(h):\n        newRow = [0] * w\n        minVal = maxDist + 1\n        for x in range(w):\n            indicator = A[x] == B[y]\n            if indicator:\n                indicator = 0\n            else:\n                indicator = 1\n            if x == 0:\n                val = min(y + 1 + 1, y + indicator, row[x] + 1)\n            else:\n                val = min(newRow[x - 1] + 1, row[x - 1] + indicator, row[x] + 1\n                    )\n            newRow[x] = val\n            minVal = min(minVal, val)\n        if maxDist > 0:\n            if minVal > maxDist:\n                return maxDist + 1\n        row = newRow\n    return row[-1]\n", "output": "The function is:\n\n```python\ndef compute(A, B, maxDist=-1):\n    w = len(A)\n    h = len(B)\n    if maxDist > 0:\n        if abs(w - h) >= maxDist + 1:\n            return maxDist + 1\n    row = []\n    for x in range(w):\n        row.append(x + 1)\n    for y in range(h):\n        newRow = [0] * w\n        minVal = maxDist + 1\n        for x in range(w):\n            indicator = A[x] == B[y]\n            if indicator:\n                indicator = 0\n            else:\n                indicator = 1\n            if x == 0:\n                val = min(y + 1 + 1, y + indicator, row[x] + 1)\n            else:\n                val = min(newRow[x - 1] + 1, row[x - 1] + indicator, row[x] + 1\n                    )\n            newRow[x] = val\n            minVal = min(minVal, val)\n        if maxDist > 0:\n            if minVal > maxDist:\n                return maxDist + 1\n        row = newRow\n    return row[-1]\n\n```", "choosed_example_idx": [6, 2, 3, 9, 7], "prompt": "Input: dict(A=\"abcd\", B=\"abcd\", maxDist=0), Output: \"0\"\nInput: dict(A=\"abcde\", B=\"ace\", maxDist=0), Output: \"2\"\nInput: dict(A=['a', 'b', 'c', 'd'], B=['a', 'c'], maxDist=-1), Output: \"2\"\nInput: dict(A=['a', 'b', 'c', 'd', 'e'], B=['a', 'b', 'c', 'd', 'f'], maxDist=1), Output: \"1\"\nInput: dict(A=['a', 'b', 'c', 'd'], B=['e', 'f', 'g', 'h'], maxDist=4), Output: \"4\"\n\nWrite a function that generates the output from the input.\nFunction: compute\n", "id": "a68590d1dfced2505c73af1c2d39023174b22175_0"}
{"example_str": "examples = [\n    dict(node_id=1, page=1, per_page=10),\n    dict(node_id='root', page=2, per_page=20),\n    dict(node_id=42, page=3, per_page=5),\n    dict(node_id='category_a', page=1, per_page=15),\n    dict(node_id=100, page=4, per_page=30),\n    dict(node_id='subcategory_b', page=2, per_page=10),\n    dict(node_id=50, page=5, per_page=25),\n    dict(node_id='product_group_c', page=1, per_page=5),\n    dict(node_id=200, page=3, per_page=40),\n    dict(node_id='all_products', page=1, per_page=50),\n]\nexamples += [\n    dict(node_id=1, page=1, per_page=10),\n    dict(node_id=2, page=1, per_page=5),\n    dict(node_id=1, page=2, per_page=10),\n    dict(node_id=3, page=1, per_page=20),\n    dict(node_id=1, page=3, per_page=15),\n    dict(node_id=4, page=1, per_page=8),\n    dict(node_id=2, page=2, per_page=10),\n    dict(node_id=5, page=1, per_page=12),\n    dict(node_id=1, page=4, per_page=10),\n    dict(node_id=3, page=2, per_page=5)\n]\nexamples += [\n    dict(node_id=1, page=1, per_page=10),\n    dict(node_id=1, page=2, per_page=10),\n    dict(node_id=2, page=1, per_page=5),\n    dict(node_id=2, page=2, per_page=5),\n    dict(node_id=3, page=1, per_page=20),\n    dict(node_id=3, page=2, per_page=20),\n    dict(node_id=4, page=1, per_page=15),\n    dict(node_id=4, page=3, per_page=15),\n    dict(node_id=5, page=1, per_page=8),\n    dict(node_id=5, page=2, per_page=8),\n]", "code": "def get_products_in_node(node_id, page, per_page):\n    \"\"\"\n    Return products in a page for the node\n    \"\"\"\n    return []\n", "func_name": "get_products_in_node", "exec_status": true, "example_inputs": ["\"{'node_id': 1, 'page': 1, 'per_page': 10}\"", "\"{'node_id': 'root', 'page': 2, 'per_page': 20}\"", "\"{'node_id': 42, 'page': 3, 'per_page': 5}\"", "\"{'node_id': 'category_a', 'page': 1, 'per_page': 15}\"", "\"{'node_id': 100, 'page': 4, 'per_page': 30}\"", "\"{'node_id': 'subcategory_b', 'page': 2, 'per_page': 10}\"", "\"{'node_id': 50, 'page': 5, 'per_page': 25}\"", "\"{'node_id': 'product_group_c', 'page': 1, 'per_page': 5}\"", "\"{'node_id': 200, 'page': 3, 'per_page': 40}\"", "\"{'node_id': 'all_products', 'page': 1, 'per_page': 50}\""], "example_outputs": [{"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}], "parsed_inputs": [[["node_id", "1"], ["page", "1"], ["per_page", "10"]], [["node_id", "\"root\""], ["page", "2"], ["per_page", "20"]], [["node_id", "42"], ["page", "3"], ["per_page", "5"]], [["node_id", "\"category_a\""], ["page", "1"], ["per_page", "15"]], [["node_id", "100"], ["page", "4"], ["per_page", "30"]], [["node_id", "\"subcategory_b\""], ["page", "2"], ["per_page", "10"]], [["node_id", "50"], ["page", "5"], ["per_page", "25"]], [["node_id", "\"product_group_c\""], ["page", "1"], ["per_page", "5"]], [["node_id", "200"], ["page", "3"], ["per_page", "40"]], [["node_id", "\"all_products\""], ["page", "1"], ["per_page", "50"]]], "exec_code": "def get_products_in_node(node_id, page, per_page):\n    \"\"\"\n    Return products in a page for the node\n    \"\"\"\n    return []\n", "output": "The function is:\n\n```python\ndef get_products_in_node(node_id, page, per_page):\n    \"\"\"\n    Return products in a page for the node\n    \"\"\"\n    return []\n\n```", "choosed_example_idx": [9, 7, 5, 6, 4], "prompt": "Input: dict(node_id=\"all_products\", page=1, per_page=50), Output: \"[]\"\nInput: dict(node_id=\"product_group_c\", page=1, per_page=5), Output: \"[]\"\nInput: dict(node_id=\"subcategory_b\", page=2, per_page=10), Output: \"[]\"\nInput: dict(node_id=50, page=5, per_page=25), Output: \"[]\"\nInput: dict(node_id=100, page=4, per_page=30), Output: \"[]\"\n\n\n\nWrite a function that generates the output from the input.\nFunction: get_products_in_node\n\n", "id": "c86c5fbbb7a802e573a4033b33d46687f3c1d9bb_0"}
{"example_str": "examples = [\n    dict(l=[1, 2, 3, 4, 5]),\n    dict(l=[10, 20, 30]),\n    dict(l=[-1, -2, -3, -4, -5]),\n    dict(l=[0, 0, 0, 0, 0]),\n    dict(l=[1.1, 2.2, 3.3, 4.4, 5.5]),\n    dict(l=[5, 4, 3, 2, 1]),\n    dict(l=[100, 200, 300, 400, 500]),\n    dict(l=[-10, -20, -30, -40, -50]),\n    dict(l=[1, 1, 1, 1, 1]),\n    dict(l=[]),\n]\nexamples += [\n    dict(l=[1, 2, 3, 4, 5]),\n    dict(l=[10, 20, 30]),\n    dict(l=[-1, 1, -1, 1, -1]),\n    dict(l=[0.5, 1.5, 2.5, 3.5]),\n    dict(l=[100, -50, 25, -25]),\n    dict(l=[1]),\n    dict(l=[]),\n    dict(l=[0, 0, 0, 0]),\n    dict(l=[-10, 10, -10, 10, -10]),\n    dict(l=[2, 4, 6, 8, 10, 12])\n]\nexamples += [\n    dict(l=[1, 2, 3, 4, 5]),\n    dict(l=[10, 20, 30]),\n    dict(l=[-1, -2, -3, -4]),\n    dict(l=[0, 0, 0, 0]),\n    dict(l=[100, 200, 300, 400, 500]),\n    dict(l=[1]),\n    dict(l=[1, -1, 1, -1, 1]),\n    dict(l=[5, 10, 15, 20, 25]),\n    dict(l=[2, 4, 6, 8, 10]),\n    dict(l=[-5, 5, -5, 5, -5])\n]", "code": "def Cumulative(l):\n    new = []\n    cumsum = 0\n    for element in l:\n        cumsum += element\n        new.append(cumsum)\n    return new\n", "func_name": "Cumulative", "exec_status": true, "example_inputs": ["\"{'l': [1, 2, 3, 4, 5]}\"", "\"{'l': [10, 20, 30]}\"", "\"{'l': [-1, -2, -3, -4, -5]}\"", "\"{'l': [0, 0, 0, 0, 0]}\"", "\"{'l': [1.1, 2.2, 3.3, 4.4, 5.5]}\"", "\"{'l': [5, 4, 3, 2, 1]}\"", "\"{'l': [100, 200, 300, 400, 500]}\"", "\"{'l': [-10, -20, -30, -40, -50]}\"", "\"{'l': [1, 1, 1, 1, 1]}\"", "\"{'l': []}\""], "example_outputs": [{"return": "\"[1, 3, 6, 10, 15]\""}, {"return": "\"[10, 30, 60]\""}, {"return": "\"[-1, -3, -6, -10, -15]\""}, {"return": "\"[0, 0, 0, 0, 0]\""}, {"return": "\"[1.1, 3.3000000000000003, 6.6, 11.0, 16.5]\""}, {"return": "\"[5, 9, 12, 14, 15]\""}, {"return": "\"[100, 300, 600, 1000, 1500]\""}, {"return": "\"[-10, -30, -60, -100, -150]\""}, {"return": "\"[1, 2, 3, 4, 5]\""}, {"return": "\"[]\""}, {"return": "\"[1, 3, 6, 10, 15]\""}, {"return": "\"[10, 30, 60]\""}, {"return": "\"[-1, 0, -1, 0, -1]\""}, {"return": "\"[0.5, 2.0, 4.5, 8.0]\""}, {"return": "\"[100, 50, 75, 50]\""}, {"return": "\"[1]\""}, {"return": "\"[]\""}, {"return": "\"[0, 0, 0, 0]\""}, {"return": "\"[-10, 0, -10, 0, -10]\""}, {"return": "\"[2, 6, 12, 20, 30, 42]\""}, {"return": "\"[1, 3, 6, 10, 15]\""}, {"return": "\"[10, 30, 60]\""}, {"return": "\"[-1, -3, -6, -10]\""}, {"return": "\"[0, 0, 0, 0]\""}, {"return": "\"[100, 300, 600, 1000, 1500]\""}, {"return": "\"[1]\""}, {"return": "\"[1, 0, 1, 0, 1]\""}, {"return": "\"[5, 15, 30, 50, 75]\""}, {"return": "\"[2, 6, 12, 20, 30]\""}, {"return": "\"[-5, 0, -5, 0, -5]\""}], "parsed_inputs": [[["l", "[1, 2, 3, 4, 5]"]], [["l", "[10, 20, 30]"]], [["l", "[-1, -2, -3, -4, -5]"]], [["l", "[0, 0, 0, 0, 0]"]], [["l", "[1.1, 2.2, 3.3, 4.4, 5.5]"]], [["l", "[5, 4, 3, 2, 1]"]], [["l", "[100, 200, 300, 400, 500]"]], [["l", "[-10, -20, -30, -40, -50]"]], [["l", "[1, 1, 1, 1, 1]"]], [["l", "[]"]]], "exec_code": "def Cumulative(l):\n    new = []\n    cumsum = 0\n    for element in l:\n        cumsum += element\n        new.append(cumsum)\n    return new\n", "output": "The function is:\n\n```python\ndef Cumulative(l):\n    new = []\n    cumsum = 0\n    for element in l:\n        cumsum += element\n        new.append(cumsum)\n    return new\n\n```", "choosed_example_idx": [8, 6, 1, 7, 4, 3, 9, 5, 2], "prompt": "Write a function that generates the output from the input.\nInput: dict(l=[1, 1, 1, 1, 1]), Output: \"[1, 2, 3, 4, 5]\"\nInput: dict(l=[100, 200, 300, 400, 500]), Output: \"[100, 300, 600, 1000, 1500]\"\nInput: dict(l=[10, 20, 30]), Output: \"[10, 30, 60]\"\nInput: dict(l=[-10, -20, -30, -40, -50]), Output: \"[-10, -30, -60, -100, -150]\"\nInput: dict(l=[1.1, 2.2, 3.3, 4.4, 5.5]), Output: \"[1.1, 3.3000000000000003, 6.6, 11.0, 16.5]\"\nInput: dict(l=[0, 0, 0, 0, 0]), Output: \"[0, 0, 0, 0, 0]\"\nInput: dict(l=[]), Output: \"[]\"\nInput: dict(l=[5, 4, 3, 2, 1]), Output: \"[5, 9, 12, 14, 15]\"\nInput: dict(l=[-1, -2, -3, -4, -5]), Output: \"[-1, -3, -6, -10, -15]\"\n\n\n\nFunction: Cumulative\n", "id": "0208da0ce616acf5e1668641118da34d8d21a81d_0"}
{"example_str": "examples = [\n    {'x': 0, 'y': 0, 'x2': 3, 'y2': 4},\n    {'x': 1, 'y': 2, 'x2': 4, 'y2': 6},\n    {'x': -1, 'y': 0, 'x2': 1, 'y2': 1},\n    {'x': 5, 'y': 5, 'x2': 10, 'y2': 10},\n    {'x': 0, 'y': 5, 'x2': 0, 'y2': 10},\n    {'x': 10, 'y': 0, 'x2': 15, 'y2': 5},\n    {'x': 3, 'y': 3, 'x2': 6, 'y2': 6},\n    {'x': -5, 'y': -5, 'x2': 0, 'y2': 0},\n    {'x': 2, 'y': 8, 'x2': 6, 'y2': 12},\n    {'x': 7, 'y': 1, 'x2': 10, 'y2': 4},\n]\nexamples += [\n    dict(x=0, y=0, x2=1, y2=1),\n    dict(x=5, y=5, x2=5, y2=5),\n    dict(x=-1, y=-1, x2=2, y2=2),\n    dict(x=100, y=100, x2=200, y2=200),\n    dict(x=0.5, y=0.5, x2=1.5, y2=1.5),\n    dict(x=-10, y=10, x2=-20, y2=20),\n    dict(x=2.5, y=3.5, x2=2.5, y2=3.5),\n    dict(x=0, y=0, x2=-1, y2=-1),\n    dict(x=123, y=456, x2=123, y2=789),\n    dict(x=-100, y=-200, x2=100, y2=200)\n]\nexamples += [\n    dict(x=0, y=0, x2=1, y2=1),\n    dict(x=2, y=2, x2=2, y2=5),\n    dict(x=-1, y=-1, x2=1, y2=1),\n    dict(x=10, y=10, x2=10, y2=10),\n    dict(x=100, y=200, x2=300, y2=400),\n    dict(x=0, y=0, x2=0, y2=0),\n    dict(x=-5, y=-5, x2=5, y2=5),\n    dict(x=1.5, y=1.5, x2=2.5, y2=2.5),\n    dict(x=-10, y=20, x2=-10, y2=25),\n    dict(x=0.1, y=0.2, x2=0.1, y2=0.2)\n]", "code": "def get_distance(x, y, x2, y2):\n    return abs(x - x2) + abs(y - y2)\n", "func_name": "get_distance", "exec_status": true, "example_inputs": ["\"{'x': 0, 'y': 0, 'x2': 3, 'y2': 4}\"", "\"{'x': 1, 'y': 2, 'x2': 4, 'y2': 6}\"", "\"{'x': -1, 'y': 0, 'x2': 1, 'y2': 1}\"", "\"{'x': 5, 'y': 5, 'x2': 10, 'y2': 10}\"", "\"{'x': 0, 'y': 5, 'x2': 0, 'y2': 10}\"", "\"{'x': 10, 'y': 0, 'x2': 15, 'y2': 5}\"", "\"{'x': 3, 'y': 3, 'x2': 6, 'y2': 6}\"", "\"{'x': -5, 'y': -5, 'x2': 0, 'y2': 0}\"", "\"{'x': 2, 'y': 8, 'x2': 6, 'y2': 12}\"", "\"{'x': 7, 'y': 1, 'x2': 10, 'y2': 4}\""], "example_outputs": [{"return": "\"7\""}, {"return": "\"7\""}, {"return": "\"3\""}, {"return": "\"10\""}, {"return": "\"5\""}, {"return": "\"10\""}, {"return": "\"6\""}, {"return": "\"10\""}, {"return": "\"8\""}, {"return": "\"6\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"6\""}, {"return": "\"200\""}, {"return": "\"2.0\""}, {"return": "\"20\""}, {"return": "\"0.0\""}, {"return": "\"2\""}, {"return": "\"333\""}, {"return": "\"600\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"4\""}, {"return": "\"0\""}, {"return": "\"400\""}, {"return": "\"0\""}, {"return": "\"20\""}, {"return": "\"2.0\""}, {"return": "\"5\""}, {"return": "\"0.0\""}], "parsed_inputs": [[["x", "0"], ["y", "0"], ["x2", "3"], ["y2", "4"]], [["x", "1"], ["y", "2"], ["x2", "4"], ["y2", "6"]], [["x", "-1"], ["y", "0"], ["x2", "1"], ["y2", "1"]], [["x", "5"], ["y", "5"], ["x2", "10"], ["y2", "10"]], [["x", "0"], ["y", "5"], ["x2", "0"], ["y2", "10"]], [["x", "10"], ["y", "0"], ["x2", "15"], ["y2", "5"]], [["x", "3"], ["y", "3"], ["x2", "6"], ["y2", "6"]], [["x", "-5"], ["y", "-5"], ["x2", "0"], ["y2", "0"]], [["x", "2"], ["y", "8"], ["x2", "6"], ["y2", "12"]], [["x", "7"], ["y", "1"], ["x2", "10"], ["y2", "4"]]], "exec_code": "def get_distance(x, y, x2, y2):\n    return abs(x - x2) + abs(y - y2)\n", "output": "The function is:\n\n```python\ndef get_distance(x, y, x2, y2):\n    return abs(x - x2) + abs(y - y2)\n\n```", "choosed_example_idx": [4, 7, 3, 0, 1, 8, 5, 6, 2, 9], "prompt": "Input: dict(x=0, y=5, x2=0, y2=10), Output: \"5\"\nInput: dict(x=-5, y=-5, x2=0, y2=0), Output: \"10\"\nInput: dict(x=5, y=5, x2=10, y2=10), Output: \"10\"\nInput: dict(x=0, y=0, x2=3, y2=4), Output: \"7\"\nInput: dict(x=1, y=2, x2=4, y2=6), Output: \"7\"\nInput: dict(x=2, y=8, x2=6, y2=12), Output: \"8\"\nInput: dict(x=10, y=0, x2=15, y2=5), Output: \"10\"\nInput: dict(x=3, y=3, x2=6, y2=6), Output: \"6\"\nInput: dict(x=-1, y=0, x2=1, y2=1), Output: \"3\"\nInput: dict(x=7, y=1, x2=10, y2=4), Output: \"6\"\n\nFunction: get_distance\n\nWrite a function that generates the output from the input.\n", "id": "eb60b253a596f48faf8b1e62d44f5563580daf23_0"}
{"example_str": "examples = [\n    dict(N=5),\n    dict(N=15),\n    dict(N=99),\n    dict(N=100),\n    dict(N=121),\n    dict(N=212),\n    dict(N=123),\n    dict(N=135),\n    dict(N=1000),\n    dict(N=545)\n]\nexamples += [\n    dict(N=5),          # N < 10, returns True\n    dict(N=23),         # 10 <= N < 100, returns True\n    dict(N=111),        # 100 <= N < 1000, returns True (1-1 == 1-1)\n    dict(N=123),        # 100 <= N < 1000, returns True (1-2 == 2-3)\n    dict(N=321),        # 100 <= N < 1000, returns False (3-2 != 2-1)\n    dict(N=999),        # 100 <= N < 1000, returns False (9-9 != 9-9)\n    dict(N=1000),       # N >= 1000, returns False\n    dict(N=0),          # N < 10, returns True\n    dict(N=88),         # 10 <= N < 100, returns True\n    dict(N=210)         # 100 <= N < 1000, returns True (2-1 == 1-0)\n]\nexamples += [\n    dict(N=1),\n    dict(N=10),\n    dict(N=11),\n    dict(N=123),\n    dict(N=234),\n    dict(N=321),\n    dict(N=654),\n    dict(N=999),\n    dict(N=1000),\n    dict(N=1001)\n]", "code": "def hannum(N):\n    if N < 10:\n        return True\n    elif N < 100:\n        a = N // 10\n        b = N - 10 * a\n        return True\n    elif N < 1000:\n        a = N // 100\n        b = (N - 100 * a) // 10\n        c = N - 100 * a - 10 * b\n        if a - b == b - c:\n            return True\n        else:\n            return False\n    else:\n        return False\n", "func_name": "hannum", "exec_status": true, "example_inputs": ["\"{'N': 5}\"", "\"{'N': 15}\"", "\"{'N': 99}\"", "\"{'N': 100}\"", "\"{'N': 121}\"", "\"{'N': 212}\"", "\"{'N': 123}\"", "\"{'N': 135}\"", "\"{'N': 1000}\"", "\"{'N': 545}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}], "parsed_inputs": [[["N", "5"]], [["N", "15"]], [["N", "99"]], [["N", "100"]], [["N", "121"]], [["N", "212"]], [["N", "123"]], [["N", "135"]], [["N", "1000"]], [["N", "545"]]], "exec_code": "def hannum(N):\n    if N < 10:\n        return True\n    elif N < 100:\n        a = N // 10\n        b = N - 10 * a\n        return True\n    elif N < 1000:\n        a = N // 100\n        b = (N - 100 * a) // 10\n        c = N - 100 * a - 10 * b\n        if a - b == b - c:\n            return True\n        else:\n            return False\n    else:\n        return False\n", "output": "The function is:\n\n```python\ndef hannum(N):\n    if N < 10:\n        return True\n    elif N < 100:\n        a = N // 10\n        b = N - 10 * a\n        return True\n    elif N < 1000:\n        a = N // 100\n        b = (N - 100 * a) // 10\n        c = N - 100 * a - 10 * b\n        if a - b == b - c:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n```", "choosed_example_idx": [4, 1, 9, 2], "prompt": "Function: hannum\n\nWrite a function that generates the output from the input.\n\n\nInput: dict(N=121), Output: \"False\"\nInput: dict(N=15), Output: \"True\"\nInput: dict(N=545), Output: \"False\"\nInput: dict(N=99), Output: \"True\"\n\n", "id": "a70eaaeca8617abab7d43a09d39bf54e0bfaa517_0"}
{"example_str": "examples = [\n    dict(line=\"light red bags contain 1 bright white bag, 2 muted yellow bags.\"),\n    dict(line=\"dark orange bags contain 3 bright white bags, 4 muted yellow bags.\"),\n    dict(line=\"bright white bags contain 1 shiny gold bag.\"),\n    dict(line=\"muted yellow bags contain 2 shiny gold bags, 9 faded blue bags.\"),\n    dict(line=\"shiny gold bags contain 1 dark olive bag, 2 vibrant plum bags.\"),\n    dict(line=\"dark olive bags contain 3 faded blue bags, 4 dotted black bags.\"),\n    dict(line=\"vibrant plum bags contain 5 faded blue bags, 6 dotted black bags.\"),\n    dict(line=\"faded blue bags contain no other bags.\"),\n    dict(line=\"dotted black bags contain no other bags.\"),\n    dict(line=\"bright white bags contain 1 shiny silver bag.\"),\n]\nexamples += [\n    dict(line=\"bright white bag contain 1 shiny gold bag.\"),\n    dict(line=\"dark orange bag contain 3 bright white bags, 4 muted yellow bags.\"),\n    dict(line=\"light red bag contain 1 bright white bag, 2 muted yellow bags.\"),\n    dict(line=\"shiny gold bag contain 1 dark olive bag, 2 vibrant plum bags.\"),\n    dict(line=\"faded blue bag contain no other bags.\"),\n    dict(line=\"dotted black bag contain no other bags.\"),\n    dict(line=\"vibrant plum bag contain 5 faded blue bags, 6 dotted black bags.\"),\n    dict(line=\"dark olive bag contain 3 faded blue bags, 4 dotted black bags.\"),\n    dict(line=\"muted yellow bag contain 2 shiny gold bags, 9 faded blue bags.\"),\n    dict(line=\"bright yellow bag contain 2 pale blue bags, 1 vibrant green bag.\")\n]\nexamples += [\n    dict(line='bright white bags contain 1 shiny gold bag.'),\n    dict(line='faded blue bags contain no other bags.'),\n    dict(line='dotted black bags contain 2 faded blue bags, 3 dark olive bags.'),\n    dict(line='vibrant plum bags contain 5 faded blue bags, 6 dotted black bags.'),\n    dict(line='dark olive bags contain 3 bright white bags, 4 muted yellow bags.'),\n    dict(line='shiny gold bags contain 1 dark olive bag, 2 vibrant plum bags.'),\n    dict(line='muted yellow bags contain 2 shiny gold bags, 9 faded blue bags.'),\n    dict(line='light red bags contain 1 bright white bag, 2 muted yellow bags.'),\n    dict(line='posh tomato bags contain 3 bright white bags, 4 shiny gold bags.'),\n    dict(line='clear bronze bags contain 4 dark olive bags, 3 vibrant plum bags.')\n]", "code": "def format_data(line):\n    outer_bag, inner_bags = line.split(' contain ')\n    inner_bags = inner_bags.split(', ')\n    inner_bags_dict = {}\n    if inner_bags != ['no other bags.']:\n        for bag in inner_bags:\n            bag = bag.strip('.')\n            inner_bags_dict[bag[2:-4].strip()] = int(bag[0])\n    d = {outer_bag[:-4].strip(): inner_bags_dict}\n    return d\n", "func_name": "format_data", "exec_status": true, "example_inputs": ["\"{'line': 'light red bags contain 1 bright white bag, 2 muted yellow bags.'}\"", "\"{'line': 'dark orange bags contain 3 bright white bags, 4 muted yellow bags.'}\"", "\"{'line': 'bright white bags contain 1 shiny gold bag.'}\"", "\"{'line': 'muted yellow bags contain 2 shiny gold bags, 9 faded blue bags.'}\"", "\"{'line': 'shiny gold bags contain 1 dark olive bag, 2 vibrant plum bags.'}\"", "\"{'line': 'dark olive bags contain 3 faded blue bags, 4 dotted black bags.'}\"", "\"{'line': 'vibrant plum bags contain 5 faded blue bags, 6 dotted black bags.'}\"", "\"{'line': 'faded blue bags contain no other bags.'}\"", "\"{'line': 'dotted black bags contain no other bags.'}\"", "\"{'line': 'bright white bags contain 1 shiny silver bag.'}\""], "example_outputs": [{"return": "\"{'light red': {'bright white': 1, 'muted yellow': 2}}\""}, {"return": "\"{'dark orange': {'bright white': 3, 'muted yellow': 4}}\""}, {"return": "\"{'bright white': {'shiny gold': 1}}\""}, {"return": "\"{'muted yellow': {'shiny gold': 2, 'faded blue': 9}}\""}, {"return": "\"{'shiny gold': {'dark olive': 1, 'vibrant plum': 2}}\""}, {"return": "\"{'dark olive': {'faded blue': 3, 'dotted black': 4}}\""}, {"return": "\"{'vibrant plum': {'faded blue': 5, 'dotted black': 6}}\""}, {"return": "\"{'faded blue': {}}\""}, {"return": "\"{'dotted black': {}}\""}, {"return": "\"{'bright white': {'shiny silver': 1}}\""}, {"return": "\"{'bright white': {'shiny gold': 1}}\""}, {"return": "\"{'dark orange': {'bright white': 3, 'muted yellow': 4}}\""}, {"return": "\"{'light red': {'bright white': 1, 'muted yellow': 2}}\""}, {"return": "\"{'shiny gold': {'dark olive': 1, 'vibrant plum': 2}}\""}, {"return": "\"{'faded blue': {}}\""}, {"return": "\"{'dotted black': {}}\""}, {"return": "\"{'vibrant plum': {'faded blue': 5, 'dotted black': 6}}\""}, {"return": "\"{'dark olive': {'faded blue': 3, 'dotted black': 4}}\""}, {"return": "\"{'muted yellow': {'shiny gold': 2, 'faded blue': 9}}\""}, {"return": "\"{'bright yellow': {'pale blue': 2, 'vibrant green': 1}}\""}, {"return": "\"{'bright white': {'shiny gold': 1}}\""}, {"return": "\"{'faded blue': {}}\""}, {"return": "\"{'dotted black': {'faded blue': 2, 'dark olive': 3}}\""}, {"return": "\"{'vibrant plum': {'faded blue': 5, 'dotted black': 6}}\""}, {"return": "\"{'dark olive': {'bright white': 3, 'muted yellow': 4}}\""}, {"return": "\"{'shiny gold': {'dark olive': 1, 'vibrant plum': 2}}\""}, {"return": "\"{'muted yellow': {'shiny gold': 2, 'faded blue': 9}}\""}, {"return": "\"{'light red': {'bright white': 1, 'muted yellow': 2}}\""}, {"return": "\"{'posh tomato': {'bright white': 3, 'shiny gold': 4}}\""}, {"return": "\"{'clear bronze': {'dark olive': 4, 'vibrant plum': 3}}\""}], "parsed_inputs": [[["line", "\"light red bags contain 1 bright white bag, 2 muted yellow bags.\""]], [["line", "\"dark orange bags contain 3 bright white bags, 4 muted yellow bags.\""]], [["line", "\"bright white bags contain 1 shiny gold bag.\""]], [["line", "\"muted yellow bags contain 2 shiny gold bags, 9 faded blue bags.\""]], [["line", "\"shiny gold bags contain 1 dark olive bag, 2 vibrant plum bags.\""]], [["line", "\"dark olive bags contain 3 faded blue bags, 4 dotted black bags.\""]], [["line", "\"vibrant plum bags contain 5 faded blue bags, 6 dotted black bags.\""]], [["line", "\"faded blue bags contain no other bags.\""]], [["line", "\"dotted black bags contain no other bags.\""]], [["line", "\"bright white bags contain 1 shiny silver bag.\""]]], "exec_code": "def format_data(line):\n    outer_bag, inner_bags = line.split(' contain ')\n    inner_bags = inner_bags.split(', ')\n    inner_bags_dict = {}\n    if inner_bags != ['no other bags.']:\n        for bag in inner_bags:\n            bag = bag.strip('.')\n            inner_bags_dict[bag[2:-4].strip()] = int(bag[0])\n    d = {outer_bag[:-4].strip(): inner_bags_dict}\n    return d\n", "output": "The function is:\n\n```python\ndef format_data(line):\n    outer_bag, inner_bags = line.split(' contain ')\n    inner_bags = inner_bags.split(', ')\n    inner_bags_dict = {}\n    if inner_bags != ['no other bags.']:\n        for bag in inner_bags:\n            bag = bag.strip('.')\n            inner_bags_dict[bag[2:-4].strip()] = int(bag[0])\n    d = {outer_bag[:-4].strip(): inner_bags_dict}\n    return d\n\n```", "choosed_example_idx": [8, 9, 5, 4, 3], "prompt": "Input: dict(line=\"dotted black bags contain no other bags.\"), Output: \"{'dotted black': {}}\"\nInput: dict(line=\"bright white bags contain 1 shiny silver bag.\"), Output: \"{'bright white': {'shiny silver': 1}}\"\nInput: dict(line=\"dark olive bags contain 3 faded blue bags, 4 dotted black bags.\"), Output: \"{'dark olive': {'faded blue': 3, 'dotted black': 4}}\"\nInput: dict(line=\"shiny gold bags contain 1 dark olive bag, 2 vibrant plum bags.\"), Output: \"{'shiny gold': {'dark olive': 1, 'vibrant plum': 2}}\"\nInput: dict(line=\"muted yellow bags contain 2 shiny gold bags, 9 faded blue bags.\"), Output: \"{'muted yellow': {'shiny gold': 2, 'faded blue': 9}}\"\n\nWrite a function that generates the output from the input.\n\n\nFunction: format_data\n\n", "id": "2f25265084ff2d6333cd0e40fead69ac1949beb8_0"}
{"example_str": "examples = [\n    dict(AR=[1, 2, 3, 4, 5], ITEM=3),\n    dict(AR=[\"apple\", \"banana\", \"cherry\", \"date\"], ITEM=\"banana\"),\n    dict(AR=[10, 20, 30, 40, 50], ITEM=20),\n    dict(AR=[\"hello\", \"world\", \"abc\", \"def\"], ITEM=\"world\"),\n    dict(AR=[5, 10, 15, 20, 25], ITEM=15),\n    dict(AR=[\"a\", \"b\", \"c\", \"d\", \"e\"], ITEM=\"c\"),\n    dict(AR=[100, 200, 300, 400, 500], ITEM=300),\n    dict(AR=[\"foo\", \"bar\", \"baz\", \"qux\"], ITEM=\"bar\"),\n    dict(AR=[1.1, 2.2, 3.3, 4.4, 5.5], ITEM=3.3),\n    dict(AR=[\"x\", \"y\", \"z\", \"w\"], ITEM=\"y\")\n]\nexamples += [\n    dict(AR=[1, 2, 3, 4, 5], ITEM=3),\n    dict(AR=[10, 20, 30, 40, 50], ITEM=40),\n    dict(AR=[5, 10, 15, 20, 25], ITEM=5),\n    dict(AR=[100, 200, 300, 400, 500], ITEM=600),\n    dict(AR=[-5, 0, 5, 10, 15], ITEM=0),\n    dict(AR=[2, 4, 6, 8, 10], ITEM=7),\n    dict(AR=[1.5, 2.5, 3.5, 4.5, 5.5], ITEM=3.5),\n    dict(AR=[100, 200, 300, 400, 500], ITEM=100),\n    dict(AR=[-10, -5, 0, 5, 10], ITEM=-10),\n    dict(AR=[3, 6, 9, 12, 15], ITEM=12)\n]\nexamples += [\n    dict(AR=[1, 2, 3, 4, 5], ITEM=3),\n    dict(AR=[10, 20, 30, 40, 50], ITEM=40),\n    dict(AR=[5, 10, 15, 20, 25], ITEM=5),\n    dict(AR=[100, 200, 300, 400, 500], ITEM=600),\n    dict(AR=[-5, 0, 5, 10, 15], ITEM=0),\n    dict(AR=[2, 4, 6, 8, 10], ITEM=8),\n    dict(AR=[1, 1, 1, 1, 1], ITEM=1),\n    dict(AR=[-10, -5, 0, 5, 10], ITEM=-10),\n    dict(AR=[3, 6, 9, 12, 15], ITEM=11),\n    dict(AR=[0, 0, 0, 0, 1], ITEM=1)\n]", "code": "def Bsearch(AR, ITEM):\n    beg = 0\n    last = len(AR) - 1\n    while beg <= last:\n        mid = int((beg + last) / 2)\n        if ITEM == AR[mid]:\n            return mid\n        elif ITEM > AR[mid]:\n            beg = mid + 1\n        else:\n            last = mid - 1\n    else:\n        return False\n", "func_name": "Bsearch", "exec_status": true, "example_inputs": ["\"{'AR': [1, 2, 3, 4, 5], 'ITEM': 3}\"", "\"{'AR': ['apple', 'banana', 'cherry', 'date'], 'ITEM': 'banana'}\"", "\"{'AR': [10, 20, 30, 40, 50], 'ITEM': 20}\"", "\"{'AR': ['hello', 'world', 'abc', 'def'], 'ITEM': 'world'}\"", "\"{'AR': [5, 10, 15, 20, 25], 'ITEM': 15}\"", "\"{'AR': ['a', 'b', 'c', 'd', 'e'], 'ITEM': 'c'}\"", "\"{'AR': [100, 200, 300, 400, 500], 'ITEM': 300}\"", "\"{'AR': ['foo', 'bar', 'baz', 'qux'], 'ITEM': 'bar'}\"", "\"{'AR': [1.1, 2.2, 3.3, 4.4, 5.5], 'ITEM': 3.3}\"", "\"{'AR': ['x', 'y', 'z', 'w'], 'ITEM': 'y'}\""], "example_outputs": [{"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"False\""}, {"return": "\"1\""}, {"return": "\"False\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"3\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"False\""}, {"return": "\"1\""}, {"return": "\"3\""}, {"return": "\"2\""}, {"return": "\"0\""}, {"return": "\"False\""}, {"return": "\"4\""}], "parsed_inputs": [[["AR", "[1, 2, 3, 4, 5]"], ["ITEM", "3"]], [["AR", "['apple', 'banana', 'cherry', 'date']"], ["ITEM", "\"banana\""]], [["AR", "[10, 20, 30, 40, 50]"], ["ITEM", "20"]], [["AR", "['hello', 'world', 'abc', 'def']"], ["ITEM", "\"world\""]], [["AR", "[5, 10, 15, 20, 25]"], ["ITEM", "15"]], [["AR", "['a', 'b', 'c', 'd', 'e']"], ["ITEM", "\"c\""]], [["AR", "[100, 200, 300, 400, 500]"], ["ITEM", "300"]], [["AR", "['foo', 'bar', 'baz', 'qux']"], ["ITEM", "\"bar\""]], [["AR", "[1.1, 2.2, 3.3, 4.4, 5.5]"], ["ITEM", "3.3"]], [["AR", "['x', 'y', 'z', 'w']"], ["ITEM", "\"y\""]]], "exec_code": "def Bsearch(AR, ITEM):\n    beg = 0\n    last = len(AR) - 1\n    while beg <= last:\n        mid = int((beg + last) / 2)\n        if ITEM == AR[mid]:\n            return mid\n        elif ITEM > AR[mid]:\n            beg = mid + 1\n        else:\n            last = mid - 1\n    else:\n        return False\n", "output": "The function is:\n\n```python\ndef Bsearch(AR, ITEM):\n    beg = 0\n    last = len(AR) - 1\n    while beg <= last:\n        mid = int((beg + last) / 2)\n        if ITEM == AR[mid]:\n            return mid\n        elif ITEM > AR[mid]:\n            beg = mid + 1\n        else:\n            last = mid - 1\n    else:\n        return False\n\n```", "choosed_example_idx": [9, 1, 4, 0, 7, 3], "prompt": "Input: dict(AR=['x', 'y', 'z', 'w'], ITEM=\"y\"), Output: \"1\"\nInput: dict(AR=['apple', 'banana', 'cherry', 'date'], ITEM=\"banana\"), Output: \"1\"\nInput: dict(AR=[5, 10, 15, 20, 25], ITEM=15), Output: \"2\"\nInput: dict(AR=[1, 2, 3, 4, 5], ITEM=3), Output: \"2\"\nInput: dict(AR=['foo', 'bar', 'baz', 'qux'], ITEM=\"bar\"), Output: \"1\"\nInput: dict(AR=['hello', 'world', 'abc', 'def'], ITEM=\"world\"), Output: \"1\"\n\n\nWrite a function that generates the output from the input.\n\n\nFunction: Bsearch\n\n", "id": "d255dbccf640271a80c8a59f99aee4e36c2bc9f8_0"}
{"example_str": "examples = [\n    dict(nums=[2, 7, 11, 15], target=9),\n    dict(nums=[3, 2, 4], target=6),\n    dict(nums=[3, 3], target=6),\n    dict(nums=[1, 2, 3, 4, 5], target=7),\n    dict(nums=[1, 2, 3, 4, 5], target=10),\n    dict(nums=[-1, 0, 1, 2, -1, -4], target=-1),\n    dict(nums=[1, 1, 1], target=2),\n    dict(nums=[5, 5, 5], target=10),\n    dict(nums=[-2, 1, -4, 5, 3], target=1),\n    dict(nums=[0, 4, 3, 0], target=0),\n]\nexamples += [\n    dict(nums=[2, 7, 11, 15], target=9),\n    dict(nums=[3, 2, 4], target=6),\n    dict(nums=[-1, -2, -3, -4], target=-5),\n    dict(nums=[1, 5, 3, 7], target=8),\n    dict(nums=[100, 200, 300, 400], target=500),\n    dict(nums=[0, 0, 0, 0], target=0),\n    dict(nums=[-5, 15, 10, 5], target=10),\n    dict(nums=[21, 62, 13, 84], target=34),\n    dict(nums=[1, 2, 3, 4, 5], target=9),\n    dict(nums=[-10, 20, 30, -20], target=10)\n]\nexamples += [\n    dict(nums=[2, 7, 11, 15], target=9),\n    dict(nums=[3, 2, 4], target=6),\n    dict(nums=[3, 3], target=6),\n    dict(nums=[-1, -2, -3, -4], target=-5),\n    dict(nums=[1, 5, 3, 6, 2], target=8),\n    dict(nums=[100, 200, 300, 400], target=500),\n    dict(nums=[0, 14, 7, 8, 9], target=9),\n    dict(nums=[5, 5, 10, 15], target=20),\n    dict(nums=[22, 33, 11, 44], target=55),\n    dict(nums=[-5, 15, 10, 5], target=10)\n]", "code": "def two_sum(nums, target):\n    for i in range(len(nums)):\n        for k in range(len(nums)):\n            if k == i:\n                continue\n            if nums[i] + nums[k] == target:\n                return [i, k]\n        return []\n", "func_name": "two_sum", "exec_status": true, "example_inputs": ["\"{'nums': [2, 7, 11, 15], 'target': 9}\"", "\"{'nums': [3, 2, 4], 'target': 6}\"", "\"{'nums': [3, 3], 'target': 6}\"", "\"{'nums': [1, 2, 3, 4, 5], 'target': 7}\"", "\"{'nums': [1, 2, 3, 4, 5], 'target': 10}\"", "\"{'nums': [-1, 0, 1, 2, -1, -4], 'target': -1}\"", "\"{'nums': [1, 1, 1], 'target': 2}\"", "\"{'nums': [5, 5, 5], 'target': 10}\"", "\"{'nums': [-2, 1, -4, 5, 3], 'target': 1}\"", "\"{'nums': [0, 4, 3, 0], 'target': 0}\""], "example_outputs": [{"return": "\"[0, 1]\""}, {"return": "\"[]\""}, {"return": "\"[0, 1]\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[0, 1]\""}, {"return": "\"[0, 1]\""}, {"return": "\"[0, 1]\""}, {"return": "\"[0, 4]\""}, {"return": "\"[0, 3]\""}, {"return": "\"[0, 1]\""}, {"return": "\"[]\""}, {"return": "\"[0, 3]\""}, {"return": "\"[0, 3]\""}, {"return": "\"[0, 3]\""}, {"return": "\"[0, 1]\""}, {"return": "\"[0, 1]\""}, {"return": "\"[0, 2]\""}, {"return": "\"[]\""}, {"return": "\"[0, 1]\""}, {"return": "\"[0, 1]\""}, {"return": "\"[]\""}, {"return": "\"[0, 1]\""}, {"return": "\"[0, 3]\""}, {"return": "\"[]\""}, {"return": "\"[0, 3]\""}, {"return": "\"[0, 4]\""}, {"return": "\"[0, 3]\""}, {"return": "\"[0, 1]\""}, {"return": "\"[0, 1]\""}], "parsed_inputs": [[["nums", "[2, 7, 11, 15]"], ["target", "9"]], [["nums", "[3, 2, 4]"], ["target", "6"]], [["nums", "[3, 3]"], ["target", "6"]], [["nums", "[1, 2, 3, 4, 5]"], ["target", "7"]], [["nums", "[1, 2, 3, 4, 5]"], ["target", "10"]], [["nums", "[-1, 0, 1, 2, -1, -4]"], ["target", "-1"]], [["nums", "[1, 1, 1]"], ["target", "2"]], [["nums", "[5, 5, 5]"], ["target", "10"]], [["nums", "[-2, 1, -4, 5, 3]"], ["target", "1"]], [["nums", "[0, 4, 3, 0]"], ["target", "0"]]], "exec_code": "def two_sum(nums, target):\n    for i in range(len(nums)):\n        for k in range(len(nums)):\n            if k == i:\n                continue\n            if nums[i] + nums[k] == target:\n                return [i, k]\n        return []\n", "output": "The function is:\n\n```python\ndef two_sum(nums, target):\n    for i in range(len(nums)):\n        for k in range(len(nums)):\n            if k == i:\n                continue\n            if nums[i] + nums[k] == target:\n                return [i, k]\n        return []\n\n```", "choosed_example_idx": [5, 0, 3, 6, 2, 4, 7, 8, 9], "prompt": "Write a function that generates the output from the input.\n\n\nInput: dict(nums=[-1, 0, 1, 2, -1, -4], target=-1), Output: \"[0, 1]\"\nInput: dict(nums=[2, 7, 11, 15], target=9), Output: \"[0, 1]\"\nInput: dict(nums=[1, 2, 3, 4, 5], target=7), Output: \"[]\"\nInput: dict(nums=[1, 1, 1], target=2), Output: \"[0, 1]\"\nInput: dict(nums=[3, 3], target=6), Output: \"[0, 1]\"\nInput: dict(nums=[1, 2, 3, 4, 5], target=10), Output: \"[]\"\nInput: dict(nums=[5, 5, 5], target=10), Output: \"[0, 1]\"\nInput: dict(nums=[-2, 1, -4, 5, 3], target=1), Output: \"[0, 4]\"\nInput: dict(nums=[0, 4, 3, 0], target=0), Output: \"[0, 3]\"\n\nFunction: two_sum\n", "id": "a19c672cc3c529a3296c904b1b90576274a30b3d_0"}
{"example_str": "examples = [\n    dict(this=[5, (0, 0), (4, 4)]),\n    dict(this=[10, (1, 1), (8, 8)]),\n    dict(this=[3, (0, 2), (2, 0)]),\n    dict(this=[7, (3, 3), (6, 6)]),\n    dict(this=[9, (4, 5), (8, 3)]),\n    dict(this=[11, (5, 5), (10, 10)]),\n    dict(this=[6, (2, 4), (5, 1)]),\n    dict(this=[8, (7, 0), (0, 7)]),\n    dict(this=[4, (1, 3), (3, 1)]),\n    dict(this=[12, (9, 9), (11, 11)]),\n]\nexamples += [\n    dict(this=[5, (0, 0), (4, 4)]),\n    dict(this=[3, (1, 1), (2, 2)]),\n    dict(this=[4, (0, 1), (3, 2)]),\n    dict(this=[6, (2, 3), (5, 5)]),\n    dict(this=[2, (0, 0), (1, 1)]),\n    dict(this=[7, (3, 3), (6, 6)]),\n    dict(this=[8, (1, 7), (7, 0)]),\n    dict(this=[10, (9, 0), (0, 9)]),\n    dict(this=[9, (4, 4), (8, 8)]),\n    dict(this=[5, (2, 2), (2, 3)])\n]\nexamples += [\n    dict(this=[5, (0, 0), (4, 4)]),\n    dict(this=[3, (1, 1), (2, 2)]),\n    dict(this=[4, (0, 1), (3, 3)]),\n    dict(this=[6, (2, 2), (5, 5)]),\n    dict(this=[7, (0, 0), (6, 6)]),\n    dict(this=[8, (1, 1), (7, 7)]),\n    dict(this=[9, (3, 3), (8, 8)]),\n    dict(this=[10, (4, 4), (9, 9)]),\n    dict(this=[2, (0, 0), (1, 1)]),\n    dict(this=[5, (2, 2), (2, 4)])\n]", "code": "def process(this):\n    src, dest = this[1], this[2]\n    visited = [[(0) for _ in range(this[0])] for _ in range(this[0])]\n    cnt = [[(0) for _ in range(this[0])] for _ in range(this[0])]\n    q = []\n    q.append(src)\n    while q:\n        cur_step = q.pop()\n        cur_step_len = cnt[cur_step[0]][cur_step[1]]\n        visited[cur_step[0]][cur_step[1]] = 1\n        print('cur_step', cur_step, ' cur_step_len', cur_step_len)\n        print('dest', dest)\n        if cur_step == dest:\n            return cur_step_len\n        print()\n", "func_name": "process", "exec_status": true, "example_inputs": ["\"{'this': [5, (0, 0), (4, 4)]}\"", "\"{'this': [10, (1, 1), (8, 8)]}\"", "\"{'this': [3, (0, 2), (2, 0)]}\"", "\"{'this': [7, (3, 3), (6, 6)]}\"", "\"{'this': [9, (4, 5), (8, 3)]}\"", "\"{'this': [11, (5, 5), (10, 10)]}\"", "\"{'this': [6, (2, 4), (5, 1)]}\"", "\"{'this': [8, (7, 0), (0, 7)]}\"", "\"{'this': [4, (1, 3), (3, 1)]}\"", "\"{'this': [12, (9, 9), (11, 11)]}\""], "example_outputs": [{"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}, {"return": "\"None\""}], "parsed_inputs": [[["this", "[5, (0, 0), (4, 4)]"]], [["this", "[10, (1, 1), (8, 8)]"]], [["this", "[3, (0, 2), (2, 0)]"]], [["this", "[7, (3, 3), (6, 6)]"]], [["this", "[9, (4, 5), (8, 3)]"]], [["this", "[11, (5, 5), (10, 10)]"]], [["this", "[6, (2, 4), (5, 1)]"]], [["this", "[8, (7, 0), (0, 7)]"]], [["this", "[4, (1, 3), (3, 1)]"]], [["this", "[12, (9, 9), (11, 11)]"]]], "exec_code": "def process(this):\n    src, dest = this[1], this[2]\n    visited = [[(0) for _ in range(this[0])] for _ in range(this[0])]\n    cnt = [[(0) for _ in range(this[0])] for _ in range(this[0])]\n    q = []\n    q.append(src)\n    while q:\n        cur_step = q.pop()\n        cur_step_len = cnt[cur_step[0]][cur_step[1]]\n        visited[cur_step[0]][cur_step[1]] = 1\n        print('cur_step', cur_step, ' cur_step_len', cur_step_len)\n        print('dest', dest)\n        if cur_step == dest:\n            return cur_step_len\n        print()\n", "output": "The function is:\n\n```python\ndef process(this):\n    src, dest = this[1], this[2]\n    visited = [[(0) for _ in range(this[0])] for _ in range(this[0])]\n    cnt = [[(0) for _ in range(this[0])] for _ in range(this[0])]\n    q = []\n    q.append(src)\n    while q:\n        cur_step = q.pop()\n        cur_step_len = cnt[cur_step[0]][cur_step[1]]\n        visited[cur_step[0]][cur_step[1]] = 1\n        print('cur_step', cur_step, ' cur_step_len', cur_step_len)\n        print('dest', dest)\n        if cur_step == dest:\n            return cur_step_len\n        print()\n\n```", "choosed_example_idx": [3, 2, 1], "prompt": "Function: process\nWrite a function that generates the output from the input.\n\n\nInput: dict(this=[7, (3, 3), (6, 6)]), Output: \"None\"\nInput: dict(this=[3, (0, 2), (2, 0)]), Output: \"None\"\nInput: dict(this=[10, (1, 1), (8, 8)]), Output: \"None\"\n\n", "id": "2675b4b078e8f0bd52a51253b6c4e9adce1c4ef9_0"}
{"example_str": "examples = [\n    dict(claims_in_singles=[1, 2, 3], claims_in_multiples=[1, 2]),\n    dict(claims_in_singles=['a', 'b', 'c'], claims_in_multiples=['a', 'b']),\n    dict(claims_in_singles=[4, 5, 6], claims_in_multiples=[]),\n    dict(claims_in_singles=['x', 'y', 'z'], claims_in_multiples=['x']),\n    dict(claims_in_singles=[7, 8, 9], claims_in_multiples=[7, 8, 9]),\n    dict(claims_in_singles=['p', 'q', 'r'], claims_in_multiples=['p', 'q', 'r']),\n    dict(claims_in_singles=[10, 11, 12], claims_in_multiples=[10, 11]),\n    dict(claims_in_singles=['m', 'n', 'o'], claims_in_multiples=['m', 'n']),\n    dict(claims_in_singles=[13, 14, 15], claims_in_multiples=[]),\n    dict(claims_in_singles=['s', 't', 'u'], claims_in_multiples=[]),\n]\nexamples += [\n    dict(claims_in_singles=[1, 2, 3], claims_in_multiples=[4, 5, 6]),\n    dict(claims_in_singles=[1, 2, 3], claims_in_multiples=[1, 2, 3]),\n    dict(claims_in_singles=['a', 'b', 'c'], claims_in_multiples=['d', 'e', 'f']),\n    dict(claims_in_singles=['apple', 'banana'], claims_in_multiples=['banana', 'cherry']),\n    dict(claims_in_singles=[10, 20, 30], claims_in_multiples=[20, 40, 60]),\n    dict(claims_in_singles=[True, False], claims_in_multiples=[False]),\n    dict(claims_in_singles=[None, 'None'], claims_in_multipiles=[None]),\n    dict(claims_in_singles=[(1, 2), (3, 4)], claims_in_multiples=[(3, 4), (5, 6)]),\n    dict(claims_in_singles=[{1, 2}, {3, 4}], claims_in_multiples=[{3, 4}, {5, 6}]),\n    dict(claims_in_singles=[[1, 2], [3, 4]], claims_in_multiples=[[3, 4], [5, 6]])\n]\nexamples += [\n    dict(claims_in_singles=[1, 2, 3], claims_in_multiples=[2, 3, 4]),\n    dict(claims_in_singles=['a', 'b', 'c'], claims_in_multiples=['b', 'c', 'd']),\n    dict(claims_in_singles=[10, 20, 30], claims_in_multiples=[20, 30, 40]),\n    dict(claims_in_singles=['apple', 'banana', 'cherry'], claims_in_multiples=['banana']),\n    dict(claims_in_singles=[100, 200, 300], claims_in_multiples=[100, 200, 400]),\n    dict(claims_in_singles=['x', 'y', 'z'], claims_in_multiples=['a', 'b', 'c']),\n    dict(claims_in_singles=[5, 6, 7, 8], claims_in_multiples=[6, 7, 8, 9]),\n    dict(claims_in_singles=['red', 'blue', 'green'], claims_in_multiples=['blue', 'green', 'yellow']),\n    dict(claims_in_singles=[0, 1, 2, 3], claims_in_multiples=[1, 2, 3, 4]),\n    dict(claims_in_singles=['cat', 'dog', 'bird'], claims_in_multiples=['dog', 'bird', 'fish']),\n]", "code": "def find_non_overlapping_claim(claims_in_singles, claims_in_multiples):\n    result = []\n    for claim in claims_in_singles:\n        if claim not in claims_in_multiples:\n            result.append(claim)\n    return result\n", "func_name": "find_non_overlapping_claim", "exec_status": true, "example_inputs": ["\"{'claims_in_singles': [1, 2, 3], 'claims_in_multiples': [1, 2]}\"", "\"{'claims_in_singles': ['a', 'b', 'c'], 'claims_in_multiples': ['a', 'b']}\"", "\"{'claims_in_singles': [4, 5, 6], 'claims_in_multiples': []}\"", "\"{'claims_in_singles': ['x', 'y', 'z'], 'claims_in_multiples': ['x']}\"", "\"{'claims_in_singles': [7, 8, 9], 'claims_in_multiples': [7, 8, 9]}\"", "\"{'claims_in_singles': ['p', 'q', 'r'], 'claims_in_multiples': ['p', 'q', 'r']}\"", "\"{'claims_in_singles': [10, 11, 12], 'claims_in_multiples': [10, 11]}\"", "\"{'claims_in_singles': ['m', 'n', 'o'], 'claims_in_multiples': ['m', 'n']}\"", "\"{'claims_in_singles': [13, 14, 15], 'claims_in_multiples': []}\"", "\"{'claims_in_singles': ['s', 't', 'u'], 'claims_in_multiples': []}\""], "example_outputs": [{"return": "\"[3]\""}, {"return": "\"['c']\""}, {"return": "\"[4, 5, 6]\""}, {"return": "\"['y', 'z']\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"[12]\""}, {"return": "\"['o']\""}, {"return": "\"[13, 14, 15]\""}, {"return": "\"['s', 't', 'u']\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"[]\""}, {"return": "\"['a', 'b', 'c']\""}, {"return": "\"['apple']\""}, {"return": "\"[10, 30]\""}, {"return": "\"[True]\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: find_non_overlapping_claim() got an unexpected keyword argument 'claims_in_multipiles'\""}, {"return": "\"[(1, 2)]\""}, {"return": "\"[{1, 2}]\""}, {"return": "\"[[1, 2]]\""}, {"return": "\"[1]\""}, {"return": "\"['a']\""}, {"return": "\"[10]\""}, {"return": "\"['apple', 'cherry']\""}, {"return": "\"[300]\""}, {"return": "\"['x', 'y', 'z']\""}, {"return": "\"[5]\""}, {"return": "\"['red']\""}, {"return": "\"[0]\""}, {"return": "\"['cat']\""}], "parsed_inputs": [[["claims_in_singles", "[1, 2, 3]"], ["claims_in_multiples", "[1, 2]"]], [["claims_in_singles", "['a', 'b', 'c']"], ["claims_in_multiples", "['a', 'b']"]], [["claims_in_singles", "[4, 5, 6]"], ["claims_in_multiples", "[]"]], [["claims_in_singles", "['x', 'y', 'z']"], ["claims_in_multiples", "['x']"]], [["claims_in_singles", "[7, 8, 9]"], ["claims_in_multiples", "[7, 8, 9]"]], [["claims_in_singles", "['p', 'q', 'r']"], ["claims_in_multiples", "['p', 'q', 'r']"]], [["claims_in_singles", "[10, 11, 12]"], ["claims_in_multiples", "[10, 11]"]], [["claims_in_singles", "['m', 'n', 'o']"], ["claims_in_multiples", "['m', 'n']"]], [["claims_in_singles", "[13, 14, 15]"], ["claims_in_multiples", "[]"]], [["claims_in_singles", "['s', 't', 'u']"], ["claims_in_multiples", "[]"]]], "exec_code": "def find_non_overlapping_claim(claims_in_singles, claims_in_multiples):\n    result = []\n    for claim in claims_in_singles:\n        if claim not in claims_in_multiples:\n            result.append(claim)\n    return result\n", "output": "The function is:\n\n```python\ndef find_non_overlapping_claim(claims_in_singles, claims_in_multiples):\n    result = []\n    for claim in claims_in_singles:\n        if claim not in claims_in_multiples:\n            result.append(claim)\n    return result\n\n```", "choosed_example_idx": [6, 2, 7, 4, 8, 5, 3], "prompt": "Write a function that generates the output from the input.\nInput: dict(claims_in_singles=[10, 11, 12], claims_in_multiples=[10, 11]), Output: \"[12]\"\nInput: dict(claims_in_singles=[4, 5, 6], claims_in_multiples=[]), Output: \"[4, 5, 6]\"\nInput: dict(claims_in_singles=['m', 'n', 'o'], claims_in_multiples=['m', 'n']), Output: \"['o']\"\nInput: dict(claims_in_singles=[7, 8, 9], claims_in_multiples=[7, 8, 9]), Output: \"[]\"\nInput: dict(claims_in_singles=[13, 14, 15], claims_in_multiples=[]), Output: \"[13, 14, 15]\"\nInput: dict(claims_in_singles=['p', 'q', 'r'], claims_in_multiples=['p', 'q', 'r']), Output: \"[]\"\nInput: dict(claims_in_singles=['x', 'y', 'z'], claims_in_multiples=['x']), Output: \"['y', 'z']\"\n\nFunction: find_non_overlapping_claim\n\n", "id": "a03c8cfbb27c8908f80f22c08dabec4cb0f6baf5_0"}
{"example_str": "examples = [\n    dict(sample=10),\n    dict(sample=255),\n    dict(sample=0),\n    dict(sample=-10),\n    dict(sample=128),\n    dict(sample=3.14),\n    dict(sample=[10, 20, 30]),\n    dict(sample=[255, 255, 255]),\n    dict(sample=[0, 0, 0]),\n    dict(sample=[[10, 20], [30, 40]]),\n]\nexamples += [\n    dict(sample=0),\n    dict(sample=255),\n    dict(sample=128),\n    dict(sample=64),\n    dict(sample=512),\n    dict(sample=1024),\n    dict(sample=2048),\n    dict(sample=1),\n    dict(sample=100),\n    dict(sample=250)\n]\nexamples += [\n    dict(sample=0),        # Represents the lowest pixel value (black in grayscale)\n    dict(sample=255),      # Represents the highest pixel value (white in grayscale)\n    dict(sample=128),      # Represents a mid-range pixel value (mid-gray)\n    dict(sample=64),       # Represents a darker gray\n    dict(sample=192),      # Represents a lighter gray\n    dict(sample=30),       # Represents a very dark gray\n    dict(sample=225),      # Represents a very light gray\n    dict(sample=100),      # Represents a dark gray\n    dict(sample=150),      # Represents a medium-light gray\n    dict(sample=200)       # Represents a light gray\n]", "code": "def make_image_scale(sample):\n    return sample / 255\n", "func_name": "make_image_scale", "exec_status": true, "example_inputs": ["\"{'sample': 10}\"", "\"{'sample': 255}\"", "\"{'sample': 0}\"", "\"{'sample': -10}\"", "\"{'sample': 128}\"", "\"{'sample': 3.14}\"", "\"{'sample': [10, 20, 30]}\"", "\"{'sample': [255, 255, 255]}\"", "\"{'sample': [0, 0, 0]}\"", "\"{'sample': [[10, 20], [30, 40]]}\""], "example_outputs": [{"return": "\"0.0392156862745098\""}, {"return": "\"1.0\""}, {"return": "\"0.0\""}, {"return": "\"-0.0392156862745098\""}, {"return": "\"0.5019607843137255\""}, {"return": "\"0.01231372549019608\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: unsupported operand type(s) for /: 'list' and 'int'\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: unsupported operand type(s) for /: 'list' and 'int'\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: unsupported operand type(s) for /: 'list' and 'int'\""}, {"error": "<|EXCEPTION|> \"<class 'TypeError'>: unsupported operand type(s) for /: 'list' and 'int'\""}, {"return": "\"0.0\""}, {"return": "\"1.0\""}, {"return": "\"0.5019607843137255\""}, {"return": "\"0.25098039215686274\""}, {"return": "\"2.007843137254902\""}, {"return": "\"4.015686274509804\""}, {"return": "\"8.031372549019608\""}, {"return": "\"0.00392156862745098\""}, {"return": "\"0.39215686274509803\""}, {"return": "\"0.9803921568627451\""}, {"return": "\"0.0\""}, {"return": "\"1.0\""}, {"return": "\"0.5019607843137255\""}, {"return": "\"0.25098039215686274\""}, {"return": "\"0.7529411764705882\""}, {"return": "\"0.11764705882352941\""}, {"return": "\"0.8823529411764706\""}, {"return": "\"0.39215686274509803\""}, {"return": "\"0.5882352941176471\""}, {"return": "\"0.7843137254901961\""}], "parsed_inputs": [[["sample", "10"]], [["sample", "255"]], [["sample", "0"]], [["sample", "-10"]], [["sample", "128"]], [["sample", "3.14"]], [["sample", "[10, 20, 30]"]], [["sample", "[255, 255, 255]"]], [["sample", "[0, 0, 0]"]], [["sample", "[[10, 20], [30, 40]]"]]], "exec_code": "def make_image_scale(sample):\n    return sample / 255\n", "output": "The function is:\n\n```python\ndef make_image_scale(sample):\n    return sample / 255\n\n```", "choosed_example_idx": [7, 0, 1, 9, 6, 3, 5], "prompt": "Input: dict(sample=[255, 255, 255]), Output: \"<class 'TypeError'>: unsupported operand type(s) for /: 'list' and 'int'\"\nInput: dict(sample=10), Output: \"0.0392156862745098\"\nInput: dict(sample=255), Output: \"1.0\"\nInput: dict(sample=[[10, 20], [30, 40]]), Output: \"<class 'TypeError'>: unsupported operand type(s) for /: 'list' and 'int'\"\nInput: dict(sample=[10, 20, 30]), Output: \"<class 'TypeError'>: unsupported operand type(s) for /: 'list' and 'int'\"\nInput: dict(sample=-10), Output: \"-0.0392156862745098\"\nInput: dict(sample=3.14), Output: \"0.01231372549019608\"\n\nFunction: make_image_scale\nWrite a function that generates the output from the input.\n", "id": "ad831b32eb502dba1dc89b5c9d39e029e4bac3f6_0"}
{"example_str": "examples = [\n    dict(indx=[0, 1, 2], vocab=['This', 'is', 'a']),\n    dict(indx=[3, 2, 1], vocab=['test', 'sentence', 'another']),\n    dict(indx=[0], vocab=['Hello']),\n    dict(indx=[1, 2, 3, 4], vocab=['world', 'this', 'is', 'a', 'test']),\n    dict(indx=[], vocab=[]),\n    dict(indx=[0, 1], vocab=['I', 'am']),\n    dict(indx=[4, 3, 2, 1, 0], vocab=['e', 'd', 'c', 'b', 'a']),\n    dict(indx=[0, 0, 0], vocab=['repeat']),\n    dict(indx=[1, 2, 3], vocab=['a', 'b', 'c', 'd']),\n    dict(indx=[5, 4, 3, 2, 1, 0], vocab=['f', 'e', 'd', 'c', 'b', 'a']),\n]\nexamples += [\n    dict(indx=[0, 1, 2], vocab=[\"Hello\", \"world\", \"!\"]),\n    dict(indx=[2, 1, 0], vocab=[\"end\", \"the\", \"at\"]),\n    dict(indx=[0], vocab=[\"single\"]),\n    dict(indx=[1, 0, 2, 1], vocab=[\"jump\", \"fox\", \"over\"]),\n    dict(indx=[3, 2, 1, 0], vocab=[\"morning\", \"good\", \"very\", \"a\"]),\n    dict(indx=[0, 1, 0, 1], vocab=[\"echo\", \"test\"]),\n    dict(indx=[4, 3, 2, 1, 0], vocab=[\"quick\", \"brown\", \"fox\", \"jumps\", \"The\"]),\n    dict(indx=[0, 2], vocab=[\"First\", \"Second\", \"Third\"]),\n    dict(indx=[1, 1, 1], vocab=[\"repeat\", \"again\"]),\n    dict(indx=[], vocab=[\"empty\", \"list\"])\n]\nexamples += [\n    dict(indx=[0, 1, 2], vocab=[\"hello\", \"world\", \"today\"]),\n    dict(indx=[2, 1, 0], vocab=[\"good\", \"morning\", \"everyone\"]),\n    dict(indx=[1], vocab=[\"single\", \"word\"]),\n    dict(indx=[0, 1, 1, 0], vocab=[\"repeat\", \"words\"]),\n    dict(indx=[3, 2, 1, 0], vocab=[\"this\", \"is\", \"a\", \"test\"]),\n    dict(indx=[0, 0, 0], vocab=[\"echo\", \"echo\", \"echo\"]),\n    dict(indx=[4, 3, 2, 1, 0], vocab=[\"reverse\", \"order\", \"of\", \"words\", \"in\"]),\n    dict(indx=[1, 3, 5], vocab=[\"select\", \"odd\", \"indexed\", \"elements\", \"from\", \"list\"]),\n    dict(indx=[2, 2, 2], vocab=[\"triple\", \"the\", \"fun\"]),\n    dict(indx=[0, 2, 4, 6], vocab=[\"even\", \"indexes\", \"only\", \"are\", \"used\", \"here\", \"please\"])\n]", "code": "def make_sentence(indx, vocab):\n    s = []\n    for n in indx:\n        s.append(vocab[n])\n    return s\n", "func_name": "make_sentence", "exec_status": true, "example_inputs": ["\"{'indx': [0, 1, 2], 'vocab': ['This', 'is', 'a']}\"", "\"{'indx': [3, 2, 1], 'vocab': ['test', 'sentence', 'another']}\"", "\"{'indx': [0], 'vocab': ['Hello']}\"", "\"{'indx': [1, 2, 3, 4], 'vocab': ['world', 'this', 'is', 'a', 'test']}\"", "\"{'indx': [], 'vocab': []}\"", "\"{'indx': [0, 1], 'vocab': ['I', 'am']}\"", "\"{'indx': [4, 3, 2, 1, 0], 'vocab': ['e', 'd', 'c', 'b', 'a']}\"", "\"{'indx': [0, 0, 0], 'vocab': ['repeat']}\"", "\"{'indx': [1, 2, 3], 'vocab': ['a', 'b', 'c', 'd']}\"", "\"{'indx': [5, 4, 3, 2, 1, 0], 'vocab': ['f', 'e', 'd', 'c', 'b', 'a']}\""], "example_outputs": [{"return": "\"['This', 'is', 'a']\""}, {"error": "<|EXCEPTION|> \"<class 'IndexError'>: list index out of range\""}, {"return": "\"['Hello']\""}, {"return": "\"['this', 'is', 'a', 'test']\""}, {"return": "\"[]\""}, {"return": "\"['I', 'am']\""}, {"return": "\"['a', 'b', 'c', 'd', 'e']\""}, {"return": "\"['repeat', 'repeat', 'repeat']\""}, {"return": "\"['b', 'c', 'd']\""}, {"return": "\"['a', 'b', 'c', 'd', 'e', 'f']\""}, {"return": "\"['Hello', 'world', '!']\""}, {"return": "\"['at', 'the', 'end']\""}, {"return": "\"['single']\""}, {"return": "\"['fox', 'jump', 'over', 'fox']\""}, {"return": "\"['a', 'very', 'good', 'morning']\""}, {"return": "\"['echo', 'test', 'echo', 'test']\""}, {"return": "\"['The', 'jumps', 'fox', 'brown', 'quick']\""}, {"return": "\"['First', 'Third']\""}, {"return": "\"['again', 'again', 'again']\""}, {"return": "\"[]\""}, {"return": "\"['hello', 'world', 'today']\""}, {"return": "\"['everyone', 'morning', 'good']\""}, {"return": "\"['word']\""}, {"return": "\"['repeat', 'words', 'words', 'repeat']\""}, {"return": "\"['test', 'a', 'is', 'this']\""}, {"return": "\"['echo', 'echo', 'echo']\""}, {"return": "\"['in', 'words', 'of', 'order', 'reverse']\""}, {"return": "\"['odd', 'elements', 'list']\""}, {"return": "\"['fun', 'fun', 'fun']\""}, {"return": "\"['even', 'only', 'used', 'please']\""}], "parsed_inputs": [[["indx", "[0, 1, 2]"], ["vocab", "['This', 'is', 'a']"]], [["indx", "[3, 2, 1]"], ["vocab", "['test', 'sentence', 'another']"]], [["indx", "[0]"], ["vocab", "['Hello']"]], [["indx", "[1, 2, 3, 4]"], ["vocab", "['world', 'this', 'is', 'a', 'test']"]], [["indx", "[]"], ["vocab", "[]"]], [["indx", "[0, 1]"], ["vocab", "['I', 'am']"]], [["indx", "[4, 3, 2, 1, 0]"], ["vocab", "['e', 'd', 'c', 'b', 'a']"]], [["indx", "[0, 0, 0]"], ["vocab", "['repeat']"]], [["indx", "[1, 2, 3]"], ["vocab", "['a', 'b', 'c', 'd']"]], [["indx", "[5, 4, 3, 2, 1, 0]"], ["vocab", "['f', 'e', 'd', 'c', 'b', 'a']"]]], "exec_code": "def make_sentence(indx, vocab):\n    s = []\n    for n in indx:\n        s.append(vocab[n])\n    return s\n", "output": "The function is:\n\n```python\ndef make_sentence(indx, vocab):\n    s = []\n    for n in indx:\n        s.append(vocab[n])\n    return s\n\n```", "choosed_example_idx": [0, 8, 1, 9, 6, 4, 2], "prompt": "Write a function that generates the output from the input.\nInput: dict(indx=[0, 1, 2], vocab=['This', 'is', 'a']), Output: \"['This', 'is', 'a']\"\nInput: dict(indx=[1, 2, 3], vocab=['a', 'b', 'c', 'd']), Output: \"['b', 'c', 'd']\"\nInput: dict(indx=[3, 2, 1], vocab=['test', 'sentence', 'another']), Output: \"<class 'IndexError'>: list index out of range\"\nInput: dict(indx=[5, 4, 3, 2, 1, 0], vocab=['f', 'e', 'd', 'c', 'b', 'a']), Output: \"['a', 'b', 'c', 'd', 'e', 'f']\"\nInput: dict(indx=[4, 3, 2, 1, 0], vocab=['e', 'd', 'c', 'b', 'a']), Output: \"['a', 'b', 'c', 'd', 'e']\"\nInput: dict(indx=[], vocab=[]), Output: \"[]\"\nInput: dict(indx=[0], vocab=['Hello']), Output: \"['Hello']\"\n\n\nFunction: make_sentence\n\n", "id": "796ecb456c273fec26da61e4b5cbcf55dcf658d9_0"}
{"example_str": "examples = [\n    dict(required=['name', 'age'], inData={'name': 'John', 'age': 30}),\n    dict(required=['name', 'age'], inData={'name': 'John'}),\n    dict(required=['name', 'age'], inData={'age': 30}),\n    dict(required=['name', 'age'], inData={}),\n    dict(required=['name'], inData={'name': 'John', 'age': 30}),\n    dict(required=['age'], inData={'name': 'John', 'age': 30}),\n    dict(required=['name', 'age', 'city'], inData={'name': 'John', 'age': 30}),\n    dict(required=['name', 'age', 'city'], inData={'name': 'John', 'age': 30, 'city': 'New York'}),\n    dict(required=['name', 'age', 'city'], inData={'age': 30, 'city': 'New York'}),\n    dict(required=['name', 'age', 'city'], inData={'name': 'John', 'city': 'New York'}),\n]\nexamples += [\n    dict(required=[\"name\", \"age\", \"email\"], inData={\"name\": \"John\", \"age\": 30}),\n    dict(required=[\"id\", \"title\"], inData={\"title\": \"New Post\", \"content\": \"Here is some content\"}),\n    dict(required=[\"user\", \"password\"], inData={\"user\": \"admin\"}),\n    dict(required=[\"x\", \"y\", \"z\"], inData={\"x\": 1, \"y\": 2, \"z\": 3}),\n    dict(required=[\"country\", \"city\"], inData={\"country\": \"USA\"}),\n    dict(required=[\"first_name\", \"last_name\"], inData={\"first_name\": \"Jane\", \"last_name\": \"Doe\"}),\n    dict(required=[\"product_id\", \"price\"], inData={\"product_id\": 12345}),\n    dict(required=[\"username\", \"email\", \"password\"], inData={\"username\": \"user123\", \"email\": \"user@example.com\"}),\n    dict(required=[\"key1\", \"key2\", \"key3\"], inData={\"key1\": \"value1\", \"key2\": \"value2\"}),\n    dict(required=[\"field1\", \"field2\", \"field3\"], inData={\"field1\": \"data1\", \"field3\": \"data3\"})\n]\nexamples += [\n    dict(required=['name', 'age'], inData={'name': 'John'}),\n    dict(required=['id', 'email'], inData={'email': 'example@example.com'}),\n    dict(required=['first', 'last'], inData={'first': 'Jane', 'last': 'Doe'}),\n    dict(required=['city', 'state', 'zip'], inData={'city': 'New York', 'zip': '10001'}),\n    dict(required=['country'], inData={}),\n    dict(required=['username', 'password'], inData={'username': 'user123'}),\n    dict(required=['title', 'body'], inData={'title': 'Hello World'}),\n    dict(required=['product_id', 'price'], inData={'price': 19.99}),\n    dict(required=['user_id'], inData={'user_id': 5, 'name': 'Alice'}),\n    dict(required=['key1', 'key2', 'key3'], inData={'key1': 'value1', 'key3': 'value3'})\n]", "code": "def checkRequired(required, inData):\n    missingFields = []\n    for term in required:\n        if term not in inData:\n            missingFields.append(term)\n    return missingFields\n", "func_name": "checkRequired", "exec_status": true, "example_inputs": ["\"{'required': ['name', 'age'], 'inData': {'name': 'John', 'age': 30}}\"", "\"{'required': ['name', 'age'], 'inData': {'name': 'John'}}\"", "\"{'required': ['name', 'age'], 'inData': {'age': 30}}\"", "\"{'required': ['name', 'age'], 'inData': {}}\"", "\"{'required': ['name'], 'inData': {'name': 'John', 'age': 30}}\"", "\"{'required': ['age'], 'inData': {'name': 'John', 'age': 30}}\"", "\"{'required': ['name', 'age', 'city'], 'inData': {'name': 'John', 'age': 30}}\"", "\"{'required': ['name', 'age', 'city'], 'inData': {'name': 'John', 'age': 30, 'city': 'New York'}}\"", "\"{'required': ['name', 'age', 'city'], 'inData': {'age': 30, 'city': 'New York'}}\"", "\"{'required': ['name', 'age', 'city'], 'inData': {'name': 'John', 'city': 'New York'}}\""], "example_outputs": [{"return": "\"[]\""}, {"return": "\"['age']\""}, {"return": "\"['name']\""}, {"return": "\"['name', 'age']\""}, {"return": "\"[]\""}, {"return": "\"[]\""}, {"return": "\"['city']\""}, {"return": "\"[]\""}, {"return": "\"['name']\""}, {"return": "\"['age']\""}, {"return": "\"['email']\""}, {"return": "\"['id']\""}, {"return": "\"['password']\""}, {"return": "\"[]\""}, {"return": "\"['city']\""}, {"return": "\"[]\""}, {"return": "\"['price']\""}, {"return": "\"['password']\""}, {"return": "\"['key3']\""}, {"return": "\"['field2']\""}, {"return": "\"['age']\""}, {"return": "\"['id']\""}, {"return": "\"[]\""}, {"return": "\"['state']\""}, {"return": "\"['country']\""}, {"return": "\"['password']\""}, {"return": "\"['body']\""}, {"return": "\"['product_id']\""}, {"return": "\"[]\""}, {"return": "\"['key2']\""}], "parsed_inputs": [[["required", "['name', 'age']"], ["inData", "{'name': 'John', 'age': 30}"]], [["required", "['name', 'age']"], ["inData", "{'name': 'John'}"]], [["required", "['name', 'age']"], ["inData", "{'age': 30}"]], [["required", "['name', 'age']"], ["inData", "{}"]], [["required", "['name']"], ["inData", "{'name': 'John', 'age': 30}"]], [["required", "['age']"], ["inData", "{'name': 'John', 'age': 30}"]], [["required", "['name', 'age', 'city']"], ["inData", "{'name': 'John', 'age': 30}"]], [["required", "['name', 'age', 'city']"], ["inData", "{'name': 'John', 'age': 30, 'city': 'New York'}"]], [["required", "['name', 'age', 'city']"], ["inData", "{'age': 30, 'city': 'New York'}"]], [["required", "['name', 'age', 'city']"], ["inData", "{'name': 'John', 'city': 'New York'}"]]], "exec_code": "def checkRequired(required, inData):\n    missingFields = []\n    for term in required:\n        if term not in inData:\n            missingFields.append(term)\n    return missingFields\n", "output": "The function is:\n\n```python\ndef checkRequired(required, inData):\n    missingFields = []\n    for term in required:\n        if term not in inData:\n            missingFields.append(term)\n    return missingFields\n\n```", "choosed_example_idx": [3, 1, 2, 8, 0], "prompt": "Function: checkRequired\n\nInput: dict(required=['name', 'age'], inData={}), Output: \"['name', 'age']\"\nInput: dict(required=['name', 'age'], inData={'name': 'John'}), Output: \"['age']\"\nInput: dict(required=['name', 'age'], inData={'age': 30}), Output: \"['name']\"\nInput: dict(required=['name', 'age', 'city'], inData={'age': 30, 'city': 'New York'}), Output: \"['name']\"\nInput: dict(required=['name', 'age'], inData={'name': 'John', 'age': 30}), Output: \"[]\"\n\n\nWrite a function that generates the output from the input.\n", "id": "9b731291114d5c3f90731a890b24ec777425468a_0"}
{"example_str": "examples = [\n    dict(actual_age=0),\n    dict(actual_age=10),\n    dict(actual_age=25),\n    dict(actual_age=45),\n    dict(actual_age=65),\n    dict(actual_age=85),\n    dict(actual_age=15),\n    dict(actual_age=30),\n    dict(actual_age=55),\n    dict(actual_age=95),\n]\nexamples += [\n    dict(actual_age=0),\n    dict(actual_age=5),\n    dict(actual_age=20),\n    dict(actual_age=21),\n    dict(actual_age=35),\n    dict(actual_age=40),\n    dict(actual_age=45),\n    dict(actual_age=60),\n    dict(actual_age=75),\n    dict(actual_age=100)\n]\nexamples += [\n    dict(actual_age=0),\n    dict(actual_age=5),\n    dict(actual_age=20),\n    dict(actual_age=21),\n    dict(actual_age=35),\n    dict(actual_age=40),\n    dict(actual_age=45),\n    dict(actual_age=60),\n    dict(actual_age=75),\n    dict(actual_age=100)\n]", "code": "def scale_defendant_age(actual_age):\n    global scaled_age\n    if actual_age == 0:\n        scaled_age = 0\n    elif 1 <= actual_age <= 20:\n        scaled_age = 1\n    elif 21 <= actual_age <= 40:\n        scaled_age = 2\n    elif 41 <= actual_age <= 60:\n        scaled_age = 3\n    elif 61 <= actual_age <= 80:\n        scaled_age = 4\n    elif 81 <= actual_age <= 100:\n        scaled_age = 5\n    return scaled_age\n", "func_name": "scale_defendant_age", "exec_status": true, "example_inputs": ["\"{'actual_age': 0}\"", "\"{'actual_age': 10}\"", "\"{'actual_age': 25}\"", "\"{'actual_age': 45}\"", "\"{'actual_age': 65}\"", "\"{'actual_age': 85}\"", "\"{'actual_age': 15}\"", "\"{'actual_age': 30}\"", "\"{'actual_age': 55}\"", "\"{'actual_age': 95}\""], "example_outputs": [{"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"4\""}, {"return": "\"5\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"4\""}, {"return": "\"5\""}, {"return": "\"0\""}, {"return": "\"1\""}, {"return": "\"1\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"3\""}, {"return": "\"4\""}, {"return": "\"5\""}], "parsed_inputs": [[["actual_age", "0"]], [["actual_age", "10"]], [["actual_age", "25"]], [["actual_age", "45"]], [["actual_age", "65"]], [["actual_age", "85"]], [["actual_age", "15"]], [["actual_age", "30"]], [["actual_age", "55"]], [["actual_age", "95"]]], "exec_code": "def scale_defendant_age(actual_age):\n    global scaled_age\n    if actual_age == 0:\n        scaled_age = 0\n    elif 1 <= actual_age <= 20:\n        scaled_age = 1\n    elif 21 <= actual_age <= 40:\n        scaled_age = 2\n    elif 41 <= actual_age <= 60:\n        scaled_age = 3\n    elif 61 <= actual_age <= 80:\n        scaled_age = 4\n    elif 81 <= actual_age <= 100:\n        scaled_age = 5\n    return scaled_age\n", "output": "The function is:\n\n```python\ndef scale_defendant_age(actual_age):\n    global scaled_age\n    if actual_age == 0:\n        scaled_age = 0\n    elif 1 <= actual_age <= 20:\n        scaled_age = 1\n    elif 21 <= actual_age <= 40:\n        scaled_age = 2\n    elif 41 <= actual_age <= 60:\n        scaled_age = 3\n    elif 61 <= actual_age <= 80:\n        scaled_age = 4\n    elif 81 <= actual_age <= 100:\n        scaled_age = 5\n    return scaled_age\n\n```", "choosed_example_idx": [2, 3, 1, 9, 0, 4, 8], "prompt": "Function: scale_defendant_age\nInput: dict(actual_age=25), Output: \"2\"\nInput: dict(actual_age=45), Output: \"3\"\nInput: dict(actual_age=10), Output: \"1\"\nInput: dict(actual_age=95), Output: \"5\"\nInput: dict(actual_age=0), Output: \"0\"\nInput: dict(actual_age=65), Output: \"4\"\nInput: dict(actual_age=55), Output: \"3\"\n\nWrite a function that generates the output from the input.\n", "id": "db80362382075779ed00857958f3ce9fcab6a9fd_0"}
{"example_str": "examples = [\n    dict(password_list=[1, 2, 3, 4, 5]),\n    dict(password_list=['a', 'b', 'c']),\n    dict(password_list=[True, False, True]),\n    dict(password_list=['hello', 'world']),\n    dict(password_list=[1.1, 2.2, 3.3]),\n    dict(password_list=['x', 'y', 'z', 'w']),\n    dict(password_list=[10, 20, 30, 40, 50]),\n    dict(password_list=['apple', 'banana', 'cherry']),\n    dict(password_list=[111, 222, 333, 444, 555]),\n    dict(password_list=['A', 'B', 'C', 'D', 'E']),\n]\nexamples += [\n    dict(password_list=[1, 2, 3, 4, 5]),  # List of integers\n    dict(password_list=['a', 'b', 'c', 'd']),  # List of characters\n    dict(password_list=[True, False, True]),  # List of booleans\n    dict(password_list=[1.1, 2.2, 3.3]),  # List of floats\n    dict(password_list=['hello', 'world']),  # List of strings\n    dict(password_list=[123, 'abc', 456, 'def']),  # Mixed list of integers and strings\n    dict(password_list=[]),  # Empty list\n    dict(password_list=[None, 'None', 'none']),  # List including a None type\n    dict(password_list=['123', 456, 78.9, True]),  # Mixed types\n    dict(password_list=['', ' ', '   '])  # List of empty and space strings\n]\nexamples += [\n    dict(password_list=[1, 2, 3, 4]),\n    dict(password_list=['a', 'b', 'c', 'd']),\n    dict(password_list=[True, False, True]),\n    dict(password_list=[1.1, 2.2, 3.3]),\n    dict(password_list=['hello', 'world']),\n    dict(password_list=[123, 'abc', 456, 'def']),\n    dict(password_list=[None, 'none', 'None']),\n    dict(password_list=['', ' ', '   ']),\n    dict(password_list=[[], [1], [1, 2]]),\n    dict(password_list=[{}, {'key': 'value'}, {'1': 1}])\n]", "code": "def turn_list_into_string(password_list):\n    password = ''\n    for i in range(len(password_list)):\n        password = password + str(password_list[i])\n    return password\n", "func_name": "turn_list_into_string", "exec_status": true, "example_inputs": ["\"{'password_list': [1, 2, 3, 4, 5]}\"", "\"{'password_list': ['a', 'b', 'c']}\"", "\"{'password_list': [True, False, True]}\"", "\"{'password_list': ['hello', 'world']}\"", "\"{'password_list': [1.1, 2.2, 3.3]}\"", "\"{'password_list': ['x', 'y', 'z', 'w']}\"", "\"{'password_list': [10, 20, 30, 40, 50]}\"", "\"{'password_list': ['apple', 'banana', 'cherry']}\"", "\"{'password_list': [111, 222, 333, 444, 555]}\"", "\"{'password_list': ['A', 'B', 'C', 'D', 'E']}\""], "example_outputs": [{"return": "\"'12345'\""}, {"return": "\"'abc'\""}, {"return": "\"'TrueFalseTrue'\""}, {"return": "\"'helloworld'\""}, {"return": "\"'1.12.23.3'\""}, {"return": "\"'xyzw'\""}, {"return": "\"'1020304050'\""}, {"return": "\"'applebananacherry'\""}, {"return": "\"'111222333444555'\""}, {"return": "\"'ABCDE'\""}, {"return": "\"'12345'\""}, {"return": "\"'abcd'\""}, {"return": "\"'TrueFalseTrue'\""}, {"return": "\"'1.12.23.3'\""}, {"return": "\"'helloworld'\""}, {"return": "\"'123abc456def'\""}, {"return": "\"''\""}, {"return": "\"'NoneNonenone'\""}, {"return": "\"'12345678.9True'\""}, {"return": "\"'    '\""}, {"return": "\"'1234'\""}, {"return": "\"'abcd'\""}, {"return": "\"'TrueFalseTrue'\""}, {"return": "\"'1.12.23.3'\""}, {"return": "\"'helloworld'\""}, {"return": "\"'123abc456def'\""}, {"return": "\"'NonenoneNone'\""}, {"return": "\"'    '\""}, {"return": "\"'[][1][1, 2]'\""}, {"return": "\"\\\"{}{'key': 'value'}{'1': 1}\\\"\""}], "parsed_inputs": [[["password_list", "[1, 2, 3, 4, 5]"]], [["password_list", "['a', 'b', 'c']"]], [["password_list", "[True, False, True]"]], [["password_list", "['hello', 'world']"]], [["password_list", "[1.1, 2.2, 3.3]"]], [["password_list", "['x', 'y', 'z', 'w']"]], [["password_list", "[10, 20, 30, 40, 50]"]], [["password_list", "['apple', 'banana', 'cherry']"]], [["password_list", "[111, 222, 333, 444, 555]"]], [["password_list", "['A', 'B', 'C', 'D', 'E']"]]], "exec_code": "def turn_list_into_string(password_list):\n    password = ''\n    for i in range(len(password_list)):\n        password = password + str(password_list[i])\n    return password\n", "output": "The function is:\n\n```python\ndef turn_list_into_string(password_list):\n    password = ''\n    for i in range(len(password_list)):\n        password = password + str(password_list[i])\n    return password\n\n```", "choosed_example_idx": [7, 5, 6, 0, 2, 9, 8, 1, 3, 4], "prompt": "Input: dict(password_list=['apple', 'banana', 'cherry']), Output: \"'applebananacherry'\"\nInput: dict(password_list=['x', 'y', 'z', 'w']), Output: \"'xyzw'\"\nInput: dict(password_list=[10, 20, 30, 40, 50]), Output: \"'1020304050'\"\nInput: dict(password_list=[1, 2, 3, 4, 5]), Output: \"'12345'\"\nInput: dict(password_list=[True, False, True]), Output: \"'TrueFalseTrue'\"\nInput: dict(password_list=['A', 'B', 'C', 'D', 'E']), Output: \"'ABCDE'\"\nInput: dict(password_list=[111, 222, 333, 444, 555]), Output: \"'111222333444555'\"\nInput: dict(password_list=['a', 'b', 'c']), Output: \"'abc'\"\nInput: dict(password_list=['hello', 'world']), Output: \"'helloworld'\"\nInput: dict(password_list=[1.1, 2.2, 3.3]), Output: \"'1.12.23.3'\"\n\nWrite a function that generates the output from the input.\nFunction: turn_list_into_string\n", "id": "d061f91638c790e6784351bb802a7dfbc10b777f_0"}
{"example_str": "examples = [\n    dict(integer=1),\n    dict(integer=4),\n    dict(integer=10),\n    dict(integer=3999),\n    dict(integer=2022),\n    dict(integer=100),\n    dict(integer=500),\n    dict(integer=1999),\n    dict(integer=3000),\n    dict(integer=3888),\n]\nexamples += [\n    dict(integer=1),\n    dict(integer=3999),\n    dict(integer=500),\n    dict(integer=2023),\n    dict(integer=100),\n    dict(integer=88),\n    dict(integer=44),\n    dict(integer=999),\n    dict(integer=1453),\n    dict(integer=2765)\n]\nexamples += [\n    dict(integer=1),\n    dict(integer=3999),\n    dict(integer=500),\n    dict(integer=100),\n    dict(integer=50),\n    dict(integer=10),\n    dict(integer=5),\n    dict(integer=2023),\n    dict(integer=1987),\n    dict(integer=1453),\n]", "code": "def integerToRoman(integer):\n    if integer <= 0 or integer > 4000:\n        raise ValueError(\n            \"This number can't represtented by a Roman numeral.Try a number within the range 1 - 3999\"\n            )\n    else:\n        list_of_symbols = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X',\n            'IX', 'V', 'IV', 'I']\n        numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        result = ''\n        for letter, n in zip(list_of_symbols, numbers):\n            result += letter * int(integer / n)\n            integer %= n\n        return result\n", "func_name": "integerToRoman", "exec_status": true, "example_inputs": ["\"{'integer': 1}\"", "\"{'integer': 4}\"", "\"{'integer': 10}\"", "\"{'integer': 3999}\"", "\"{'integer': 2022}\"", "\"{'integer': 100}\"", "\"{'integer': 500}\"", "\"{'integer': 1999}\"", "\"{'integer': 3000}\"", "\"{'integer': 3888}\""], "example_outputs": [{"return": "\"'I'\""}, {"return": "\"'IV'\""}, {"return": "\"'X'\""}, {"return": "\"'MMMCMXCIX'\""}, {"return": "\"'MMXXII'\""}, {"return": "\"'C'\""}, {"return": "\"'D'\""}, {"return": "\"'MCMXCIX'\""}, {"return": "\"'MMM'\""}, {"return": "\"'MMMDCCCLXXXVIII'\""}, {"return": "\"'I'\""}, {"return": "\"'MMMCMXCIX'\""}, {"return": "\"'D'\""}, {"return": "\"'MMXXIII'\""}, {"return": "\"'C'\""}, {"return": "\"'LXXXVIII'\""}, {"return": "\"'XLIV'\""}, {"return": "\"'CMXCIX'\""}, {"return": "\"'MCDLIII'\""}, {"return": "\"'MMDCCLXV'\""}, {"return": "\"'I'\""}, {"return": "\"'MMMCMXCIX'\""}, {"return": "\"'D'\""}, {"return": "\"'C'\""}, {"return": "\"'L'\""}, {"return": "\"'X'\""}, {"return": "\"'V'\""}, {"return": "\"'MMXXIII'\""}, {"return": "\"'MCMLXXXVII'\""}, {"return": "\"'MCDLIII'\""}], "parsed_inputs": [[["integer", "1"]], [["integer", "4"]], [["integer", "10"]], [["integer", "3999"]], [["integer", "2022"]], [["integer", "100"]], [["integer", "500"]], [["integer", "1999"]], [["integer", "3000"]], [["integer", "3888"]]], "exec_code": "def integerToRoman(integer):\n    if integer <= 0 or integer > 4000:\n        raise ValueError(\n            \"This number can't represtented by a Roman numeral.Try a number within the range 1 - 3999\"\n            )\n    else:\n        list_of_symbols = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X',\n            'IX', 'V', 'IV', 'I']\n        numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        result = ''\n        for letter, n in zip(list_of_symbols, numbers):\n            result += letter * int(integer / n)\n            integer %= n\n        return result\n", "output": "The function is:\n\n```python\ndef integerToRoman(integer):\n    if integer <= 0 or integer > 4000:\n        raise ValueError(\n            \"This number can't represtented by a Roman numeral.Try a number within the range 1 - 3999\"\n            )\n    else:\n        list_of_symbols = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X',\n            'IX', 'V', 'IV', 'I']\n        numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        result = ''\n        for letter, n in zip(list_of_symbols, numbers):\n            result += letter * int(integer / n)\n            integer %= n\n        return result\n\n```", "choosed_example_idx": [9, 2, 6, 0, 1], "prompt": "Function: integerToRoman\n\nWrite a function that generates the output from the input.\n\n\nInput: dict(integer=3888), Output: \"'MMMDCCCLXXXVIII'\"\nInput: dict(integer=10), Output: \"'X'\"\nInput: dict(integer=500), Output: \"'D'\"\nInput: dict(integer=1), Output: \"'I'\"\nInput: dict(integer=4), Output: \"'IV'\"\n\n", "id": "61e03d493153d64c3f13a4e1f35cc4025dab37de_0"}
{"example_str": "examples = [\n    dict(text=\"hello\"),\n    dict(text=\"WORLD\"),\n    dict(text=\"\"),\n    dict(text=\"a\"),\n    dict(text=\"abc def\"),\n    dict(text=\"123\"),\n    dict(text=\"hello world!\"),\n    dict(text=\"fooBar\"),\n    dict(text=\"Über\"),\n    dict(text=\"multiple   spaces\")\n]\nexamples += [\n    dict(text=\"hello\"),  # \"Hello\"\n    dict(text=\"world\"),  # \"World\"\n    dict(text=\"123abc\"),  # \"123abc\"\n    dict(text=\"test string\"),  # \"Test string\"\n    dict(text=\"\"),  # \"\"\n    dict(text=\"python\"),  # \"Python\"\n    dict(text=\"x\"),  # \"X\"\n    dict(text=\"multi word string\"),  # \"Multi word string\"\n    dict(text=\"UPPERCASE\"),  # \"UPPERCASE\"\n    dict(text=\"sPACE\"),  # \"SPACE\"\n]\nexamples += [\n    dict(text='hello'),\n    dict(text='world'),\n    dict(text='python'),\n    dict(text='example'),\n    dict(text='test'),\n    dict(text='function'),\n    dict(text='uppercase'),\n    dict(text='string'),\n    dict(text='capitalize'),\n    dict(text='programming')\n]", "code": "def uppercase_char_first(text: str) ->str:\n    \"\"\"\n    Uppercase *only* the first character of the passed string.\n\n    Whereas the standard :meth:`str.capitalize` method both uppercases the\n    first character of this string *and* lowercases all remaining characters,\n    this function *only* uppercases the first character. All remaining\n    characters remain unmodified.\n\n    Parameters\n    ----------\n    text : str\n        String whose first character is to be uppercased.\n\n    Returns\n    ----------\n    str\n        This string with the first character uppercased.\n    \"\"\"\n    assert isinstance(text, str), '{!r} not string.'.format(text)\n    return text[0].upper() + text[1:] if text else ''\n", "func_name": "uppercase_char_first", "exec_status": true, "example_inputs": ["\"{'text': 'hello'}\"", "\"{'text': 'WORLD'}\"", "\"{'text': ''}\"", "\"{'text': 'a'}\"", "\"{'text': 'abc def'}\"", "\"{'text': '123'}\"", "\"{'text': 'hello world!'}\"", "\"{'text': 'fooBar'}\"", "\"{'text': '\\u00dcber'}\"", "\"{'text': 'multiple   spaces'}\""], "example_outputs": [{"return": "\"'Hello'\""}, {"return": "\"'WORLD'\""}, {"return": "\"''\""}, {"return": "\"'A'\""}, {"return": "\"'Abc def'\""}, {"return": "\"'123'\""}, {"return": "\"'Hello world!'\""}, {"return": "\"'FooBar'\""}, {"return": "\"'\\u00dcber'\""}, {"return": "\"'Multiple   spaces'\""}, {"return": "\"'Hello'\""}, {"return": "\"'World'\""}, {"return": "\"'123abc'\""}, {"return": "\"'Test string'\""}, {"return": "\"''\""}, {"return": "\"'Python'\""}, {"return": "\"'X'\""}, {"return": "\"'Multi word string'\""}, {"return": "\"'UPPERCASE'\""}, {"return": "\"'SPACE'\""}, {"return": "\"'Hello'\""}, {"return": "\"'World'\""}, {"return": "\"'Python'\""}, {"return": "\"'Example'\""}, {"return": "\"'Test'\""}, {"return": "\"'Function'\""}, {"return": "\"'Uppercase'\""}, {"return": "\"'String'\""}, {"return": "\"'Capitalize'\""}, {"return": "\"'Programming'\""}], "parsed_inputs": [[["text", "\"hello\""]], [["text", "\"WORLD\""]], [["text", "\"\""]], [["text", "\"a\""]], [["text", "\"abc def\""]], [["text", "\"123\""]], [["text", "\"hello world!\""]], [["text", "\"fooBar\""]], [["text", "\"\\u00dcber\""]], [["text", "\"multiple   spaces\""]]], "exec_code": "def uppercase_char_first(text: str) ->str:\n    \"\"\"\n    Uppercase *only* the first character of the passed string.\n\n    Whereas the standard :meth:`str.capitalize` method both uppercases the\n    first character of this string *and* lowercases all remaining characters,\n    this function *only* uppercases the first character. All remaining\n    characters remain unmodified.\n\n    Parameters\n    ----------\n    text : str\n        String whose first character is to be uppercased.\n\n    Returns\n    ----------\n    str\n        This string with the first character uppercased.\n    \"\"\"\n    assert isinstance(text, str), '{!r} not string.'.format(text)\n    return text[0].upper() + text[1:] if text else ''\n", "output": "The function is:\n\n```python\ndef uppercase_char_first(text: str) ->str:\n    \"\"\"\n    Uppercase *only* the first character of the passed string.\n\n    Whereas the standard :meth:`str.capitalize` method both uppercases the\n    first character of this string *and* lowercases all remaining characters,\n    this function *only* uppercases the first character. All remaining\n    characters remain unmodified.\n\n    Parameters\n    ----------\n    text : str\n        String whose first character is to be uppercased.\n\n    Returns\n    ----------\n    str\n        This string with the first character uppercased.\n    \"\"\"\n    assert isinstance(text, str), '{!r} not string.'.format(text)\n    return text[0].upper() + text[1:] if text else ''\n\n```", "choosed_example_idx": [4, 9, 6, 2, 8, 3, 0, 5], "prompt": "Write a function that generates the output from the input.\n\nFunction: uppercase_char_first\n\n\nInput: dict(text=\"abc def\"), Output: \"'Abc def'\"\nInput: dict(text=\"multiple   spaces\"), Output: \"'Multiple   spaces'\"\nInput: dict(text=\"hello world!\"), Output: \"'Hello world!'\"\nInput: dict(text=\"\"), Output: \"''\"\nInput: dict(text=\"\\u00dcber\"), Output: \"'\\u00dcber'\"\nInput: dict(text=\"a\"), Output: \"'A'\"\nInput: dict(text=\"hello\"), Output: \"'Hello'\"\nInput: dict(text=\"123\"), Output: \"'123'\"\n\n", "id": "141714f8a9cc4fea5337e2fece9b062ad517f0cd_0"}
{"example_str": "examples = [\n    dict(output_dict={'a': 1, 'b': 2, 'c': 3}, url='https://example.com'),\n    dict(output_dict={'tag1': 5, 'tag2': 10, 'tag3': 15}, url='https://google.com'),\n    dict(output_dict={'x': 10, 'y': 20, 'z': 30}, url='https://facebook.com'),\n    dict(output_dict={'apple': 5, 'banana': 10, 'orange': 15}, url='https://apple.com'),\n    dict(output_dict={'car': 10, 'bike': 20, 'plane': 30}, url='https://toyota.com'),\n    dict(output_dict={'python': 10, 'java': 20, 'c++': 30}, url='https://github.com'),\n    dict(output_dict={'book1': 5, 'book2': 10, 'book3': 15}, url='https://amazon.com'),\n    dict(output_dict={'movie1': 10, 'movie2': 20, 'movie3': 30}, url='https://netflix.com'),\n    dict(output_dict={'song1': 5, 'song2': 10, 'song3': 15}, url='https://spotify.com'),\n    dict(output_dict={'game1': 10, 'game2': 20, 'game3': 30}, url='https://steam.com'),\n]\nexamples += [\n    dict(output_dict={'a': 5, 'b': 10, 'c': 3}, url=\"https://example.com\"),\n    dict(output_dict={'html': 1, 'head': 1, 'body': 1}, url=\"https://mysite.com\"),\n    dict(output_dict={'p': 10, 'div': 5, 'span': 15}, url=\"https://yourpage.org\"),\n    dict(output_dict={'header': 2, 'footer': 2, 'main': 1}, url=\"https://info.com\"),\n    dict(output_dict={'button': 3, 'input': 7}, url=\"https://forms.net\"),\n    dict(output_dict={'img': 20, 'a': 30}, url=\"https://images.example.com\"),\n    dict(output_dict={'h1': 2, 'h2': 3, 'h3': 4}, url=\"https://headers.com\"),\n    dict(output_dict={'li': 15, 'ul': 5, 'ol': 5}, url=\"https://listsite.com\"),\n    dict(output_dict={'script': 8, 'link': 5}, url=\"https://techsite.org\"),\n    dict(output_dict={'table': 3, 'tr': 9, 'td': 27}, url=\"https://datatables.net\")\n]\nexamples += [\n    dict(output_dict={'tag1': 5, 'tag2': 10}, url='https://example.com'),\n    dict(output_dict={'html': 1, 'body': 1, 'div': 3}, url='https://mysite.com'),\n    dict(output_dict={'header': 2, 'footer': 1}, url='https://website.com'),\n    dict(output_dict={'p': 10, 'a': 5, 'span': 3}, url='https://blog.com'),\n    dict(output_dict={'input': 4, 'button': 2}, url='https://form.com'),\n    dict(output_dict={'img': 8, 'figure': 2}, url='https://gallery.com'),\n    dict(output_dict={'section': 3, 'aside': 1}, url='https://news.com'),\n    dict(output_dict={'h1': 1, 'h2': 2, 'h3': 3}, url='https://info.com'),\n    dict(output_dict={'li': 15, 'ul': 3}, url='https://list.com'),\n    dict(output_dict={'table': 2, 'tr': 10, 'td': 20}, url='https://data.com')\n]", "code": "def print_dict(output_dict, url) ->str:\n    message_text = 'TAG counting for URL:\\n' + url + '\\n\\n'\n    for key, value in output_dict.items():\n        message_text += str(key) + '\\t\\t\\t\\t\\t' + str(value) + '  \\n'\n    message_text += '\\n'\n    message_text += 'Разом:\\t\\t\\t\\t\\t' + str(sum(output_dict.values()))\n    return message_text\n", "func_name": "print_dict", "exec_status": true, "example_inputs": ["\"{'output_dict': {'a': 1, 'b': 2, 'c': 3}, 'url': 'https://example.com'}\"", "\"{'output_dict': {'tag1': 5, 'tag2': 10, 'tag3': 15}, 'url': 'https://google.com'}\"", "\"{'output_dict': {'x': 10, 'y': 20, 'z': 30}, 'url': 'https://facebook.com'}\"", "\"{'output_dict': {'apple': 5, 'banana': 10, 'orange': 15}, 'url': 'https://apple.com'}\"", "\"{'output_dict': {'car': 10, 'bike': 20, 'plane': 30}, 'url': 'https://toyota.com'}\"", "\"{'output_dict': {'python': 10, 'java': 20, 'c++': 30}, 'url': 'https://github.com'}\"", "\"{'output_dict': {'book1': 5, 'book2': 10, 'book3': 15}, 'url': 'https://amazon.com'}\"", "\"{'output_dict': {'movie1': 10, 'movie2': 20, 'movie3': 30}, 'url': 'https://netflix.com'}\"", "\"{'output_dict': {'song1': 5, 'song2': 10, 'song3': 15}, 'url': 'https://spotify.com'}\"", "\"{'output_dict': {'game1': 10, 'game2': 20, 'game3': 30}, 'url': 'https://steam.com'}\""], "example_outputs": [{"return": "\"'TAG counting for URL:\\\\nhttps://example.com\\\\n\\\\na\\\\t\\\\t\\\\t\\\\t\\\\t1  \\\\nb\\\\t\\\\t\\\\t\\\\t\\\\t2  \\\\nc\\\\t\\\\t\\\\t\\\\t\\\\t3  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t6'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://google.com\\\\n\\\\ntag1\\\\t\\\\t\\\\t\\\\t\\\\t5  \\\\ntag2\\\\t\\\\t\\\\t\\\\t\\\\t10  \\\\ntag3\\\\t\\\\t\\\\t\\\\t\\\\t15  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t30'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://facebook.com\\\\n\\\\nx\\\\t\\\\t\\\\t\\\\t\\\\t10  \\\\ny\\\\t\\\\t\\\\t\\\\t\\\\t20  \\\\nz\\\\t\\\\t\\\\t\\\\t\\\\t30  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t60'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://apple.com\\\\n\\\\napple\\\\t\\\\t\\\\t\\\\t\\\\t5  \\\\nbanana\\\\t\\\\t\\\\t\\\\t\\\\t10  \\\\norange\\\\t\\\\t\\\\t\\\\t\\\\t15  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t30'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://toyota.com\\\\n\\\\ncar\\\\t\\\\t\\\\t\\\\t\\\\t10  \\\\nbike\\\\t\\\\t\\\\t\\\\t\\\\t20  \\\\nplane\\\\t\\\\t\\\\t\\\\t\\\\t30  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t60'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://github.com\\\\n\\\\npython\\\\t\\\\t\\\\t\\\\t\\\\t10  \\\\njava\\\\t\\\\t\\\\t\\\\t\\\\t20  \\\\nc++\\\\t\\\\t\\\\t\\\\t\\\\t30  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t60'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://amazon.com\\\\n\\\\nbook1\\\\t\\\\t\\\\t\\\\t\\\\t5  \\\\nbook2\\\\t\\\\t\\\\t\\\\t\\\\t10  \\\\nbook3\\\\t\\\\t\\\\t\\\\t\\\\t15  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t30'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://netflix.com\\\\n\\\\nmovie1\\\\t\\\\t\\\\t\\\\t\\\\t10  \\\\nmovie2\\\\t\\\\t\\\\t\\\\t\\\\t20  \\\\nmovie3\\\\t\\\\t\\\\t\\\\t\\\\t30  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t60'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://spotify.com\\\\n\\\\nsong1\\\\t\\\\t\\\\t\\\\t\\\\t5  \\\\nsong2\\\\t\\\\t\\\\t\\\\t\\\\t10  \\\\nsong3\\\\t\\\\t\\\\t\\\\t\\\\t15  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t30'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://steam.com\\\\n\\\\ngame1\\\\t\\\\t\\\\t\\\\t\\\\t10  \\\\ngame2\\\\t\\\\t\\\\t\\\\t\\\\t20  \\\\ngame3\\\\t\\\\t\\\\t\\\\t\\\\t30  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t60'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://example.com\\\\n\\\\na\\\\t\\\\t\\\\t\\\\t\\\\t5  \\\\nb\\\\t\\\\t\\\\t\\\\t\\\\t10  \\\\nc\\\\t\\\\t\\\\t\\\\t\\\\t3  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t18'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://mysite.com\\\\n\\\\nhtml\\\\t\\\\t\\\\t\\\\t\\\\t1  \\\\nhead\\\\t\\\\t\\\\t\\\\t\\\\t1  \\\\nbody\\\\t\\\\t\\\\t\\\\t\\\\t1  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t3'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://yourpage.org\\\\n\\\\np\\\\t\\\\t\\\\t\\\\t\\\\t10  \\\\ndiv\\\\t\\\\t\\\\t\\\\t\\\\t5  \\\\nspan\\\\t\\\\t\\\\t\\\\t\\\\t15  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t30'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://info.com\\\\n\\\\nheader\\\\t\\\\t\\\\t\\\\t\\\\t2  \\\\nfooter\\\\t\\\\t\\\\t\\\\t\\\\t2  \\\\nmain\\\\t\\\\t\\\\t\\\\t\\\\t1  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t5'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://forms.net\\\\n\\\\nbutton\\\\t\\\\t\\\\t\\\\t\\\\t3  \\\\ninput\\\\t\\\\t\\\\t\\\\t\\\\t7  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t10'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://images.example.com\\\\n\\\\nimg\\\\t\\\\t\\\\t\\\\t\\\\t20  \\\\na\\\\t\\\\t\\\\t\\\\t\\\\t30  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t50'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://headers.com\\\\n\\\\nh1\\\\t\\\\t\\\\t\\\\t\\\\t2  \\\\nh2\\\\t\\\\t\\\\t\\\\t\\\\t3  \\\\nh3\\\\t\\\\t\\\\t\\\\t\\\\t4  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t9'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://listsite.com\\\\n\\\\nli\\\\t\\\\t\\\\t\\\\t\\\\t15  \\\\nul\\\\t\\\\t\\\\t\\\\t\\\\t5  \\\\nol\\\\t\\\\t\\\\t\\\\t\\\\t5  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t25'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://techsite.org\\\\n\\\\nscript\\\\t\\\\t\\\\t\\\\t\\\\t8  \\\\nlink\\\\t\\\\t\\\\t\\\\t\\\\t5  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t13'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://datatables.net\\\\n\\\\ntable\\\\t\\\\t\\\\t\\\\t\\\\t3  \\\\ntr\\\\t\\\\t\\\\t\\\\t\\\\t9  \\\\ntd\\\\t\\\\t\\\\t\\\\t\\\\t27  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t39'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://example.com\\\\n\\\\ntag1\\\\t\\\\t\\\\t\\\\t\\\\t5  \\\\ntag2\\\\t\\\\t\\\\t\\\\t\\\\t10  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t15'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://mysite.com\\\\n\\\\nhtml\\\\t\\\\t\\\\t\\\\t\\\\t1  \\\\nbody\\\\t\\\\t\\\\t\\\\t\\\\t1  \\\\ndiv\\\\t\\\\t\\\\t\\\\t\\\\t3  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t5'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://website.com\\\\n\\\\nheader\\\\t\\\\t\\\\t\\\\t\\\\t2  \\\\nfooter\\\\t\\\\t\\\\t\\\\t\\\\t1  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t3'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://blog.com\\\\n\\\\np\\\\t\\\\t\\\\t\\\\t\\\\t10  \\\\na\\\\t\\\\t\\\\t\\\\t\\\\t5  \\\\nspan\\\\t\\\\t\\\\t\\\\t\\\\t3  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t18'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://form.com\\\\n\\\\ninput\\\\t\\\\t\\\\t\\\\t\\\\t4  \\\\nbutton\\\\t\\\\t\\\\t\\\\t\\\\t2  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t6'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://gallery.com\\\\n\\\\nimg\\\\t\\\\t\\\\t\\\\t\\\\t8  \\\\nfigure\\\\t\\\\t\\\\t\\\\t\\\\t2  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t10'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://news.com\\\\n\\\\nsection\\\\t\\\\t\\\\t\\\\t\\\\t3  \\\\naside\\\\t\\\\t\\\\t\\\\t\\\\t1  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t4'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://info.com\\\\n\\\\nh1\\\\t\\\\t\\\\t\\\\t\\\\t1  \\\\nh2\\\\t\\\\t\\\\t\\\\t\\\\t2  \\\\nh3\\\\t\\\\t\\\\t\\\\t\\\\t3  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t6'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://list.com\\\\n\\\\nli\\\\t\\\\t\\\\t\\\\t\\\\t15  \\\\nul\\\\t\\\\t\\\\t\\\\t\\\\t3  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t18'\""}, {"return": "\"'TAG counting for URL:\\\\nhttps://data.com\\\\n\\\\ntable\\\\t\\\\t\\\\t\\\\t\\\\t2  \\\\ntr\\\\t\\\\t\\\\t\\\\t\\\\t10  \\\\ntd\\\\t\\\\t\\\\t\\\\t\\\\t20  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t32'\""}], "parsed_inputs": [[["output_dict", "{'a': 1, 'b': 2, 'c': 3}"], ["url", "\"https://example.com\""]], [["output_dict", "{'tag1': 5, 'tag2': 10, 'tag3': 15}"], ["url", "\"https://google.com\""]], [["output_dict", "{'x': 10, 'y': 20, 'z': 30}"], ["url", "\"https://facebook.com\""]], [["output_dict", "{'apple': 5, 'banana': 10, 'orange': 15}"], ["url", "\"https://apple.com\""]], [["output_dict", "{'car': 10, 'bike': 20, 'plane': 30}"], ["url", "\"https://toyota.com\""]], [["output_dict", "{'python': 10, 'java': 20, 'c++': 30}"], ["url", "\"https://github.com\""]], [["output_dict", "{'book1': 5, 'book2': 10, 'book3': 15}"], ["url", "\"https://amazon.com\""]], [["output_dict", "{'movie1': 10, 'movie2': 20, 'movie3': 30}"], ["url", "\"https://netflix.com\""]], [["output_dict", "{'song1': 5, 'song2': 10, 'song3': 15}"], ["url", "\"https://spotify.com\""]], [["output_dict", "{'game1': 10, 'game2': 20, 'game3': 30}"], ["url", "\"https://steam.com\""]]], "exec_code": "def print_dict(output_dict, url) ->str:\n    message_text = 'TAG counting for URL:\\n' + url + '\\n\\n'\n    for key, value in output_dict.items():\n        message_text += str(key) + '\\t\\t\\t\\t\\t' + str(value) + '  \\n'\n    message_text += '\\n'\n    message_text += 'Разом:\\t\\t\\t\\t\\t' + str(sum(output_dict.values()))\n    return message_text\n", "output": "The function is:\n\n```python\ndef print_dict(output_dict, url) ->str:\n    message_text = 'TAG counting for URL:\\n' + url + '\\n\\n'\n    for key, value in output_dict.items():\n        message_text += str(key) + '\\t\\t\\t\\t\\t' + str(value) + '  \\n'\n    message_text += '\\n'\n    message_text += 'Разом:\\t\\t\\t\\t\\t' + str(sum(output_dict.values()))\n    return message_text\n\n```", "choosed_example_idx": [4, 2, 3, 5, 0, 7], "prompt": "Input: dict(output_dict={'car': 10, 'bike': 20, 'plane': 30}, url=\"https://toyota.com\"), Output: \"'TAG counting for URL:\\\\nhttps://toyota.com\\\\n\\\\ncar\\\\t\\\\t\\\\t\\\\t\\\\t10  \\\\nbike\\\\t\\\\t\\\\t\\\\t\\\\t20  \\\\nplane\\\\t\\\\t\\\\t\\\\t\\\\t30  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t60'\"\nInput: dict(output_dict={'x': 10, 'y': 20, 'z': 30}, url=\"https://facebook.com\"), Output: \"'TAG counting for URL:\\\\nhttps://facebook.com\\\\n\\\\nx\\\\t\\\\t\\\\t\\\\t\\\\t10  \\\\ny\\\\t\\\\t\\\\t\\\\t\\\\t20  \\\\nz\\\\t\\\\t\\\\t\\\\t\\\\t30  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t60'\"\nInput: dict(output_dict={'apple': 5, 'banana': 10, 'orange': 15}, url=\"https://apple.com\"), Output: \"'TAG counting for URL:\\\\nhttps://apple.com\\\\n\\\\napple\\\\t\\\\t\\\\t\\\\t\\\\t5  \\\\nbanana\\\\t\\\\t\\\\t\\\\t\\\\t10  \\\\norange\\\\t\\\\t\\\\t\\\\t\\\\t15  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t30'\"\nInput: dict(output_dict={'python': 10, 'java': 20, 'c++': 30}, url=\"https://github.com\"), Output: \"'TAG counting for URL:\\\\nhttps://github.com\\\\n\\\\npython\\\\t\\\\t\\\\t\\\\t\\\\t10  \\\\njava\\\\t\\\\t\\\\t\\\\t\\\\t20  \\\\nc++\\\\t\\\\t\\\\t\\\\t\\\\t30  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t60'\"\nInput: dict(output_dict={'a': 1, 'b': 2, 'c': 3}, url=\"https://example.com\"), Output: \"'TAG counting for URL:\\\\nhttps://example.com\\\\n\\\\na\\\\t\\\\t\\\\t\\\\t\\\\t1  \\\\nb\\\\t\\\\t\\\\t\\\\t\\\\t2  \\\\nc\\\\t\\\\t\\\\t\\\\t\\\\t3  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t6'\"\nInput: dict(output_dict={'movie1': 10, 'movie2': 20, 'movie3': 30}, url=\"https://netflix.com\"), Output: \"'TAG counting for URL:\\\\nhttps://netflix.com\\\\n\\\\nmovie1\\\\t\\\\t\\\\t\\\\t\\\\t10  \\\\nmovie2\\\\t\\\\t\\\\t\\\\t\\\\t20  \\\\nmovie3\\\\t\\\\t\\\\t\\\\t\\\\t30  \\\\n\\\\n\\u0420\\u0430\\u0437\\u043e\\u043c:\\\\t\\\\t\\\\t\\\\t\\\\t60'\"\n\nWrite a function that generates the output from the input.\n\nFunction: print_dict\n\n", "id": "7a501629102d99afc20cf57cc236b98d31df0296_0"}
{"example_str": "examples = [\n    dict(x=1),\n    dict(x=5),\n    dict(x=10),\n    dict(x=20),\n    dict(x=50),\n    dict(x=100),\n    dict(x=200),\n    dict(x=500),\n    dict(x=1000),\n    dict(x=5000),\n]\nexamples += [\n    dict(x=1),\n    dict(x=2),\n    dict(x=10),\n    dict(x=20),\n    dict(x=100),\n    dict(x=50),\n    dict(x=75),\n    dict(x=99),\n    dict(x=150),\n    dict(x=200)\n]\nexamples += [\n    dict(x=1),\n    dict(x=2),\n    dict(x=3),\n    dict(x=4),\n    dict(x=5),\n    dict(x=10),\n    dict(x=20),\n    dict(x=50),\n    dict(x=100),\n    dict(x=200)\n]", "code": "def f(x):\n    \"\"\"\n\tInputs: x, a positive int\n\tReturns the value of x + 1\n\t\"\"\"\n    x = x + 1\n    print('in f(x): x =', x)\n    return x\n", "func_name": "f", "exec_status": true, "example_inputs": ["\"{'x': 1}\"", "\"{'x': 5}\"", "\"{'x': 10}\"", "\"{'x': 20}\"", "\"{'x': 50}\"", "\"{'x': 100}\"", "\"{'x': 200}\"", "\"{'x': 500}\"", "\"{'x': 1000}\"", "\"{'x': 5000}\""], "example_outputs": [{"return": "\"2\""}, {"return": "\"6\""}, {"return": "\"11\""}, {"return": "\"21\""}, {"return": "\"51\""}, {"return": "\"101\""}, {"return": "\"201\""}, {"return": "\"501\""}, {"return": "\"1001\""}, {"return": "\"5001\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"11\""}, {"return": "\"21\""}, {"return": "\"101\""}, {"return": "\"51\""}, {"return": "\"76\""}, {"return": "\"100\""}, {"return": "\"151\""}, {"return": "\"201\""}, {"return": "\"2\""}, {"return": "\"3\""}, {"return": "\"4\""}, {"return": "\"5\""}, {"return": "\"6\""}, {"return": "\"11\""}, {"return": "\"21\""}, {"return": "\"51\""}, {"return": "\"101\""}, {"return": "\"201\""}], "parsed_inputs": [[["x", "1"]], [["x", "5"]], [["x", "10"]], [["x", "20"]], [["x", "50"]], [["x", "100"]], [["x", "200"]], [["x", "500"]], [["x", "1000"]], [["x", "5000"]]], "exec_code": "def f(x):\n    \"\"\"\n\tInputs: x, a positive int\n\tReturns the value of x + 1\n\t\"\"\"\n    x = x + 1\n    print('in f(x): x =', x)\n    return x\n", "output": "The function is:\n\n```python\ndef f(x):\n    \"\"\"\n\tInputs: x, a positive int\n\tReturns the value of x + 1\n\t\"\"\"\n    x = x + 1\n    print('in f(x): x =', x)\n    return x\n\n```", "choosed_example_idx": [2, 3, 7, 5, 9, 1, 6, 8], "prompt": "Input: dict(x=10), Output: \"11\"\nInput: dict(x=20), Output: \"21\"\nInput: dict(x=500), Output: \"501\"\nInput: dict(x=100), Output: \"101\"\nInput: dict(x=5000), Output: \"5001\"\nInput: dict(x=5), Output: \"6\"\nInput: dict(x=200), Output: \"201\"\nInput: dict(x=1000), Output: \"1001\"\n\n\nWrite a function that generates the output from the input.\nFunction: f\n\n", "id": "217eefcff387559b09aa7d19614b0256c85e2fb0_0"}
{"example_str": "examples = [\n    dict(x=None),\n    dict(x={'a': 1, 'b': 2}),  # assuming this dict has a to_dict method\n    dict(x=[]),  # assuming this list has a to_dict method\n    dict(x={}),  # assuming this dict has a to_dict method\n    dict(x='string'),  # assuming this string has a to_dict method\n    dict(x=123),  # assuming this int has a to_dict method\n    dict(x=True),  # assuming this bool has a to_dict method\n    dict(x=[1, 2, 3]),  # assuming this list has a to_dict method\n    dict(x={'a': 1, 'b': {'c': 3}}),  # assuming this dict has a to_dict method\n    dict(x=object()),  # assuming this object has a to_dict method\n]\nclass ExampleClass:\n    def __init__(self, data):\n        self.data = data\n\n    def to_dict(self):\n        return {'data': self.data}\n\nexamples += [\n    dict(x=None),  # Example 1: x is None\n    dict(x=ExampleClass(123)),  # Example 2: x is an instance with an integer\n    dict(x=ExampleClass(\"string\")),  # Example 3: x is an instance with a string\n    dict(x=ExampleClass([1, 2, 3])),  # Example 4: x is an instance with a list\n    dict(x=ExampleClass({'key': 'value'})),  # Example 5: x is an instance with a dictionary\n    dict(x=ExampleClass(ExampleClass(456))),  # Example 6: x is an instance containing another instance\n    dict(x=ExampleClass(None)),  # Example 7: x is an instance with None as data\n    dict(x=ExampleClass(3.14)),  # Example 8: x is an instance with a float\n    dict(x=ExampleClass(True)),  # Example 9: x is an instance with a boolean\n    dict(x=ExampleClass((1, 2))),  # Example 10: x is an instance with a tuple\n]\nclass SampleClass:\n    def to_dict(self):\n        return {'key': 'value'}\n\nclass AnotherClass:\n    def to_dict(self):\n        return {'another_key': 123}\n\nclass EmptyClass:\n    def to_dict(self):\n        return {}\n\nclass NestedClass:\n    def to_dict(self):\n        return {'nested': {'key': 'nested_value'}}\n\nclass ListClass:\n    def to_dict(self):\n        return {'list': [1, 2, 3]}\n\nclass StringClass:\n    def to_dict(self):\n        return {'string': 'hello'}\n\nclass NumberClass:\n    def to_dict(self):\n        return {'number': 42}\n\nclass BooleanClass:\n    def to_dict(self):\n        return {'boolean': True}\n\nclass MixedClass:\n    def to_dict(self):\n        return {'mixed': [1, 'two', {'three': 3}]}\n\nclass NoneClass:\n    def to_dict(self):\n        return None\n\nexamples += [\n    dict(x=SampleClass()),\n    dict(x=AnotherClass()),\n    dict(x=EmptyClass()),\n    dict(x=NestedClass()),\n    dict(x=ListClass()),\n    dict(x=StringClass()),\n    dict(x=NumberClass()),\n    dict(x=BooleanClass()),\n    dict(x=MixedClass()),\n    dict(x=None)\n]", "code": "def to_dict(x):\n    if x is None:\n        return {}\n    else:\n        return x.to_dict()\n", "func_name": "to_dict", "exec_status": true, "example_inputs": ["\"{'x': None}\"", "\"{'x': {'a': 1, 'b': 2}}\"", "\"{'x': []}\"", "\"{'x': {}}\"", "\"{'x': 'string'}\"", "\"{'x': 123}\"", "\"{'x': True}\"", "\"{'x': [1, 2, 3]}\"", "\"{'x': {'a': 1, 'b': {'c': 3}}}\"", "\"{'x': <object object at 0x7f99896f6340>}\""], "example_outputs": [{"return": "\"{}\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'to_dict'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'list' object has no attribute 'to_dict'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'to_dict'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'str' object has no attribute 'to_dict'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'int' object has no attribute 'to_dict'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'bool' object has no attribute 'to_dict'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'list' object has no attribute 'to_dict'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'dict' object has no attribute 'to_dict'\""}, {"error": "<|EXCEPTION|> \"<class 'AttributeError'>: 'object' object has no attribute 'to_dict'\""}, {"return": "\"{}\""}, {"return": "\"{'data': 123}\""}, {"return": "\"{'data': 'string'}\""}, {"return": "\"{'data': [1, 2, 3]}\""}, {"return": "\"{'data': {'key': 'value'}}\""}, {"return": "\"{'data': <__main__.ExampleClass object at 0x7fe1fd30d490>}\""}, {"return": "\"{'data': None}\""}, {"return": "\"{'data': 3.14}\""}, {"return": "\"{'data': True}\""}, {"return": "\"{'data': (1, 2)}\""}, {"return": "\"{'key': 'value'}\""}, {"return": "\"{'another_key': 123}\""}, {"return": "\"{}\""}, {"return": "\"{'nested': {'key': 'nested_value'}}\""}, {"return": "\"{'list': [1, 2, 3]}\""}, {"return": "\"{'string': 'hello'}\""}, {"return": "\"{'number': 42}\""}, {"return": "\"{'boolean': True}\""}, {"return": "\"{'mixed': [1, 'two', {'three': 3}]}\""}, {"return": "\"{}\""}], "parsed_inputs": [[["x", "None"]], [["x", "{'a': 1, 'b': 2}"]], [["x", "[]"]], [["x", "{}"]], [["x", "\"string\""]], [["x", "123"]], [["x", "True"]], [["x", "[1, 2, 3]"]], [["x", "{'a': 1, 'b': {'c': 3}}"]], [["x", "object()"]]], "exec_code": "def to_dict(x):\n    if x is None:\n        return {}\n    else:\n        return x.to_dict()\n", "output": "The function is:\n\n```python\ndef to_dict(x):\n    if x is None:\n        return {}\n    else:\n        return x.to_dict()\n\n```", "choosed_example_idx": [6, 5, 1, 0, 7, 8, 4, 2, 9], "prompt": "Write a function that generates the output from the input.\n\nInput: dict(x=True), Output: \"<class 'AttributeError'>: 'bool' object has no attribute 'to_dict'\"\nInput: dict(x=123), Output: \"<class 'AttributeError'>: 'int' object has no attribute 'to_dict'\"\nInput: dict(x={'a': 1, 'b': 2}), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'to_dict'\"\nInput: dict(x=None), Output: \"{}\"\nInput: dict(x=[1, 2, 3]), Output: \"<class 'AttributeError'>: 'list' object has no attribute 'to_dict'\"\nInput: dict(x={'a': 1, 'b': {'c': 3}}), Output: \"<class 'AttributeError'>: 'dict' object has no attribute 'to_dict'\"\nInput: dict(x=\"string\"), Output: \"<class 'AttributeError'>: 'str' object has no attribute 'to_dict'\"\nInput: dict(x=[]), Output: \"<class 'AttributeError'>: 'list' object has no attribute 'to_dict'\"\nInput: dict(x=object()), Output: \"<class 'AttributeError'>: 'object' object has no attribute 'to_dict'\"\n\nFunction: to_dict\n", "id": "065f52369c32bfca6f85e4231dcbcde2a8678387_0"}
{"example_str": "examples = [\n    dict(dict={'a': 1, 'b': 2, 'c': 3}),\n    dict(dict={'x': 10, 'y': 20, 'z': 30}),\n    dict(dict={'apple': 'fruit', 'car': 'vehicle', 'house': 'building'}),\n    dict(dict={'1': 'one', '2': 'two', '3': 'three'}),\n    dict(dict={'name': 'John', 'age': 30, 'city': 'New York'}),\n    dict(dict={'pi': 3.14, 'e': 2.71, 'phi': 1.61}),\n    dict(dict={'a': 'A', 'b': 'B', 'c': 'C'}),\n    dict(dict={'I': 1, 'II': 2, 'III': 3}),\n    dict(dict={'red': 'color', 'fast': 'speed', 'big': 'size'}),\n    dict(dict={'java': 'programming language', 'python': 'programming language', 'c++': 'programming language'}),\n]\nexamples += [\n    dict(dict={}),  # Empty dictionary\n    dict(dict={\"key1\": \"value1\"}),  # Dictionary with one key-value pair\n    dict(dict={\"key1\": \"value1\", \"key2\": \"value2\"}),  # Dictionary with two key-value pairs\n    dict(dict={1: \"one\", 2: \"two\", 3: \"three\"}),  # Dictionary with integer keys\n    dict(dict={\"nested\": {\"innerKey\": \"innerValue\"}}),  # Dictionary with a nested dictionary\n    dict(dict={\"key\": None}),  # Dictionary with a None value\n    dict(dict={\"listKey\": [1, 2, 3]}),  # Dictionary with a list as a value\n    dict(dict={\"tupleKey\": (1, 2)}),  # Dictionary with a tuple as a value\n    dict(dict={True: \"yes\", False: \"no\"}),  # Dictionary with boolean keys\n    dict(dict={\"mixed\": 1, 2: \"two\", 3.5: \"three point five\", (4,5): \"tuple key\"})  # Dictionary with mixed key types\n]\nexamples += [\n    dict(dict={\"key1\": \"value1\", \"key2\": \"value2\"}),\n    dict(dict={\"apple\": 1, \"banana\": 2, \"cherry\": 3}),\n    dict(dict={}),\n    dict(dict={\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}),\n    dict(dict={\"name\": \"Alice\", \"age\": 25}),\n    dict(dict={\"x\": 10, \"y\": 20, \"z\": 30}),\n    dict(dict={\"hello\": \"world\", \"test\": \"123\"}),\n    dict(dict={\"one\": 1}),\n    dict(dict={\"first\": \"John\", \"last\": \"Doe\"}),\n    dict(dict={\"python\": \"cool\", \"java\": \"hot\", \"c++\": \"powerful\"})\n]", "code": "def getList(dict):\n    return list(dict.keys())\n", "func_name": "getList", "exec_status": true, "example_inputs": ["\"{'dict': {'a': 1, 'b': 2, 'c': 3}}\"", "\"{'dict': {'x': 10, 'y': 20, 'z': 30}}\"", "\"{'dict': {'apple': 'fruit', 'car': 'vehicle', 'house': 'building'}}\"", "\"{'dict': {'1': 'one', '2': 'two', '3': 'three'}}\"", "\"{'dict': {'name': 'John', 'age': 30, 'city': 'New York'}}\"", "\"{'dict': {'pi': 3.14, 'e': 2.71, 'phi': 1.61}}\"", "\"{'dict': {'a': 'A', 'b': 'B', 'c': 'C'}}\"", "\"{'dict': {'I': 1, 'II': 2, 'III': 3}}\"", "\"{'dict': {'red': 'color', 'fast': 'speed', 'big': 'size'}}\"", "\"{'dict': {'java': 'programming language', 'python': 'programming language', 'c++': 'programming language'}}\""], "example_outputs": [{"return": "\"['a', 'b', 'c']\""}, {"return": "\"['x', 'y', 'z']\""}, {"return": "\"['apple', 'car', 'house']\""}, {"return": "\"['1', '2', '3']\""}, {"return": "\"['name', 'age', 'city']\""}, {"return": "\"['pi', 'e', 'phi']\""}, {"return": "\"['a', 'b', 'c']\""}, {"return": "\"['I', 'II', 'III']\""}, {"return": "\"['red', 'fast', 'big']\""}, {"return": "\"['java', 'python', 'c++']\""}, {"return": "\"[]\""}, {"return": "\"['key1']\""}, {"return": "\"['key1', 'key2']\""}, {"return": "\"[1, 2, 3]\""}, {"return": "\"['nested']\""}, {"return": "\"['key']\""}, {"return": "\"['listKey']\""}, {"return": "\"['tupleKey']\""}, {"return": "\"[True, False]\""}, {"return": "\"['mixed', 2, 3.5, (4, 5)]\""}, {"return": "\"['key1', 'key2']\""}, {"return": "\"['apple', 'banana', 'cherry']\""}, {"return": "\"[]\""}, {"return": "\"['a', 'b', 'c', 'd']\""}, {"return": "\"['name', 'age']\""}, {"return": "\"['x', 'y', 'z']\""}, {"return": "\"['hello', 'test']\""}, {"return": "\"['one']\""}, {"return": "\"['first', 'last']\""}, {"return": "\"['python', 'java', 'c++']\""}], "parsed_inputs": [[["dict", "{'a': 1, 'b': 2, 'c': 3}"]], [["dict", "{'x': 10, 'y': 20, 'z': 30}"]], [["dict", "{'apple': 'fruit', 'car': 'vehicle', 'house': 'building'}"]], [["dict", "{'1': 'one', '2': 'two', '3': 'three'}"]], [["dict", "{'name': 'John', 'age': 30, 'city': 'New York'}"]], [["dict", "{'pi': 3.14, 'e': 2.71, 'phi': 1.61}"]], [["dict", "{'a': 'A', 'b': 'B', 'c': 'C'}"]], [["dict", "{'I': 1, 'II': 2, 'III': 3}"]], [["dict", "{'red': 'color', 'fast': 'speed', 'big': 'size'}"]], [["dict", "{'java': 'programming language', 'python': 'programming language', 'c++': 'programming language'}"]]], "exec_code": "def getList(dict):\n    return list(dict.keys())\n", "output": "The function is:\n\n```python\ndef getList(dict):\n    return list(dict.keys())\n\n```", "choosed_example_idx": [6, 4, 8, 5], "prompt": "Write a function that generates the output from the input.\nFunction: getList\nInput: dict(dict={'a': 'A', 'b': 'B', 'c': 'C'}), Output: \"['a', 'b', 'c']\"\nInput: dict(dict={'name': 'John', 'age': 30, 'city': 'New York'}), Output: \"['name', 'age', 'city']\"\nInput: dict(dict={'red': 'color', 'fast': 'speed', 'big': 'size'}), Output: \"['red', 'fast', 'big']\"\nInput: dict(dict={'pi': 3.14, 'e': 2.71, 'phi': 1.61}), Output: \"['pi', 'e', 'phi']\"\n\n\n", "id": "16d4ccb724b2c2cb62f235fad8e92a4864d3ce8b_0"}
{"example_str": "examples = [\n    dict(self=None, dictionary={}),\n    dict(self=None, dictionary={'a': 1, 'b': 2}),\n    dict(self=None, dictionary={'a': 0, 'b': 0}),\n    dict(self=None, dictionary={'a': '', 'b': ''}),\n    dict(self=None, dictionary={'a': [], 'b': []}),\n    dict(self=None, dictionary={'a': {}, 'b': {}}),\n    dict(self=None, dictionary={'a': None, 'b': None}),\n    dict(self=None, dictionary={'a': True, 'b': False}),\n    dict(self=None, dictionary={'a': 'hello', 'b': ''}),\n    dict(self=None, dictionary={'a': [1, 2], 'b': []}),\n]", "code": "def isEmpty(self, dictionary):\n    for element in dictionary:\n        if element:\n            return True\n        return False\n", "func_name": "isEmpty", "exec_status": true, "example_inputs": ["\"{'self': None, 'dictionary': {}}\"", "\"{'self': None, 'dictionary': {'a': 1, 'b': 2}}\"", "\"{'self': None, 'dictionary': {'a': 0, 'b': 0}}\"", "\"{'self': None, 'dictionary': {'a': '', 'b': ''}}\"", "\"{'self': None, 'dictionary': {'a': [], 'b': []}}\"", "\"{'self': None, 'dictionary': {'a': {}, 'b': {}}}\"", "\"{'self': None, 'dictionary': {'a': None, 'b': None}}\"", "\"{'self': None, 'dictionary': {'a': True, 'b': False}}\"", "\"{'self': None, 'dictionary': {'a': 'hello', 'b': ''}}\"", "\"{'self': None, 'dictionary': {'a': [1, 2], 'b': []}}\""], "example_outputs": [{"trace": "[\"{'self': None, 'dictionary': {}}\", \"Line 1->    for element in dictionary:\"]", "return": "\"None\""}, {"trace": "[\"{'self': None, 'dictionary': {'a': 1, 'b': 2}}\", \"Line 1->    for element in dictionary:\", \"{'element': 'a'}\", \"Line 2->        if element:\", \"Line 3->            return True\"]", "return": "\"True\""}, {"trace": "[\"{'self': None, 'dictionary': {'a': 0, 'b': 0}}\", \"Line 1->    for element in dictionary:\", \"{'element': 'a'}\", \"Line 2->        if element:\", \"Line 3->            return True\"]", "return": "\"True\""}, {"trace": "[\"{'self': None, 'dictionary': {'a': '', 'b': ''}}\", \"Line 1->    for element in dictionary:\", \"{'element': 'a'}\", \"Line 2->        if element:\", \"Line 3->            return True\"]", "return": "\"True\""}, {"trace": "[\"{'self': None, 'dictionary': {'a': [], 'b': []}}\", \"Line 1->    for element in dictionary:\", \"{'element': 'a'}\", \"Line 2->        if element:\", \"Line 3->            return True\"]", "return": "\"True\""}, {"trace": "[\"{'self': None, 'dictionary': {'a': {}, 'b': {}}}\", \"Line 1->    for element in dictionary:\", \"{'element': 'a'}\", \"Line 2->        if element:\", \"Line 3->            return True\"]", "return": "\"True\""}, {"trace": "[\"{'self': None, 'dictionary': {'a': None, 'b': None}}\", \"Line 1->    for element in dictionary:\", \"{'element': 'a'}\", \"Line 2->        if element:\", \"Line 3->            return True\"]", "return": "\"True\""}, {"trace": "[\"{'self': None, 'dictionary': {'a': True, 'b': False}}\", \"Line 1->    for element in dictionary:\", \"{'element': 'a'}\", \"Line 2->        if element:\", \"Line 3->            return True\"]", "return": "\"True\""}, {"trace": "[\"{'self': None, 'dictionary': {'a': 'hello', 'b': ''}}\", \"Line 1->    for element in dictionary:\", \"{'element': 'a'}\", \"Line 2->        if element:\", \"Line 3->            return True\"]", "return": "\"True\""}, {"trace": "[\"{'self': None, 'dictionary': {'a': [1, 2], 'b': []}}\", \"Line 1->    for element in dictionary:\", \"{'element': 'a'}\", \"Line 2->        if element:\", \"Line 3->            return True\"]", "return": "\"True\""}], "parsed_inputs": [[["self", "None"], ["dictionary", "{}"]], [["self", "None"], ["dictionary", "{'a': 1, 'b': 2}"]], [["self", "None"], ["dictionary", "{'a': 0, 'b': 0}"]], [["self", "None"], ["dictionary", "{'a': '', 'b': ''}"]], [["self", "None"], ["dictionary", "{'a': [], 'b': []}"]], [["self", "None"], ["dictionary", "{'a': {}, 'b': {}}"]], [["self", "None"], ["dictionary", "{'a': None, 'b': None}"]], [["self", "None"], ["dictionary", "{'a': True, 'b': False}"]], [["self", "None"], ["dictionary", "{'a': 'hello', 'b': ''}"]], [["self", "None"], ["dictionary", "{'a': [1, 2], 'b': []}"]]], "exec_code": "def isEmpty(self, dictionary):\n    for element in dictionary:\n        if element:\n            return True\n        return False\n", "output": "The function is:\n\n```python\ndef isEmpty(self, dictionary):\n    for element in dictionary:\n        if element:\n            return True\n        return False\n\n```", "choosed_example_idx": [0, 2, 3, 5, 1, 4, 9, 7], "prompt": "Input: dict(self=None, dictionary={}), Output: \"None\"\nInput: dict(self=None, dictionary={'a': 0, 'b': 0}), Output: \"True\"\nInput: dict(self=None, dictionary={'a': '', 'b': ''}), Output: \"True\"\nInput: dict(self=None, dictionary={'a': {}, 'b': {}}), Output: \"True\"\nInput: dict(self=None, dictionary={'a': 1, 'b': 2}), Output: \"True\"\nInput: dict(self=None, dictionary={'a': [], 'b': []}), Output: \"True\"\nInput: dict(self=None, dictionary={'a': [1, 2], 'b': []}), Output: \"True\"\nInput: dict(self=None, dictionary={'a': True, 'b': False}), Output: \"True\"\n\nWrite a function that generates the output from the input.\n\nFunction: isEmpty\n", "id": "64af7b12c292caf3f67b02470501969080dab9de_0"}
{"example_str": "examples = [\n    dict(str1=\"egg\", str2=\"add\"),\n    dict(str1=\"foo\", str2=\"bar\"),\n    dict(str1=\"paper\", str2=\"title\"),\n    dict(str1=\"hello\", str2=\"world\"),\n    dict(str1=\"abc\", str2=\"def\"),\n    dict(str1=\"abc\", str2=\"abc\"),\n    dict(str1=\"abcde\", str2=\"fghij\"),\n    dict(str1=\"abcdefghijklmnopqrstuvwxyz\", str2=\"abcdefghijklmnopqrstuvwxyz\"),\n    dict(str1=\"\", str2=\"\"),\n    dict(str1=\"aabbcc\", str2=\"ddeeff\")\n]\nexamples += [\n    dict(str1=\"egg\", str2=\"add\"),\n    dict(str1=\"foo\", str2=\"bar\"),\n    dict(str1=\"paper\", str2=\"title\"),\n    dict(str1=\"abca\", str2=\"zbxz\"),\n    dict(str1=\"abc\", str2=\"def\"),\n    dict(str1=\"aabbcc\", str2=\"xxyyzz\"),\n    dict(str1=\"123\", str2=\"321\"),\n    dict(str1=\"hello\", str2=\"world\"),\n    dict(str1=\"one\", str2=\"two\"),\n    dict(str1=\"night\", str2=\"thing\")\n]\nexamples += [\n    dict(str1=\"egg\", str2=\"add\"),\n    dict(str1=\"foo\", str2=\"bar\"),\n    dict(str1=\"paper\", str2=\"title\"),\n    dict(str1=\"abc\", str2=\"def\"),\n    dict(str1=\"aabbcc\", str2=\"ddeeff\"),\n    dict(str1=\"hello\", str2=\"world\"),\n    dict(str1=\"night\", str2=\"thing\"),\n    dict(str1=\"one\", str2=\"two\"),\n    dict(str1=\"abcabc\", str2=\"xyzxyz\"),\n    dict(str1=\"abcd\", str2=\"xyzz\")\n]", "code": "def isomoprhicString(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    dict_str1 = {}\n    dict_str2 = {}\n    for i, value in enumerate(str1):\n        dict_str1[value] = dict_str1.get(value, []) + [i]\n    print(dict_str1.values())\n    for j, value in enumerate(str2):\n        dict_str2[value] = dict_str2.get(value, []) + [j]\n    print(sorted(dict_str1.values()))\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\n        return True\n    else:\n        return False\n", "func_name": "isomoprhicString", "exec_status": true, "example_inputs": ["\"{'str1': 'egg', 'str2': 'add'}\"", "\"{'str1': 'foo', 'str2': 'bar'}\"", "\"{'str1': 'paper', 'str2': 'title'}\"", "\"{'str1': 'hello', 'str2': 'world'}\"", "\"{'str1': 'abc', 'str2': 'def'}\"", "\"{'str1': 'abc', 'str2': 'abc'}\"", "\"{'str1': 'abcde', 'str2': 'fghij'}\"", "\"{'str1': 'abcdefghijklmnopqrstuvwxyz', 'str2': 'abcdefghijklmnopqrstuvwxyz'}\"", "\"{'str1': '', 'str2': ''}\"", "\"{'str1': 'aabbcc', 'str2': 'ddeeff'}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}], "parsed_inputs": [[["str1", "\"egg\""], ["str2", "\"add\""]], [["str1", "\"foo\""], ["str2", "\"bar\""]], [["str1", "\"paper\""], ["str2", "\"title\""]], [["str1", "\"hello\""], ["str2", "\"world\""]], [["str1", "\"abc\""], ["str2", "\"def\""]], [["str1", "\"abc\""], ["str2", "\"abc\""]], [["str1", "\"abcde\""], ["str2", "\"fghij\""]], [["str1", "\"abcdefghijklmnopqrstuvwxyz\""], ["str2", "\"abcdefghijklmnopqrstuvwxyz\""]], [["str1", "\"\""], ["str2", "\"\""]], [["str1", "\"aabbcc\""], ["str2", "\"ddeeff\""]]], "exec_code": "def isomoprhicString(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    dict_str1 = {}\n    dict_str2 = {}\n    for i, value in enumerate(str1):\n        dict_str1[value] = dict_str1.get(value, []) + [i]\n    print(dict_str1.values())\n    for j, value in enumerate(str2):\n        dict_str2[value] = dict_str2.get(value, []) + [j]\n    print(sorted(dict_str1.values()))\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\n        return True\n    else:\n        return False\n", "output": "The function is:\n\n```python\ndef isomoprhicString(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    dict_str1 = {}\n    dict_str2 = {}\n    for i, value in enumerate(str1):\n        dict_str1[value] = dict_str1.get(value, []) + [i]\n    print(dict_str1.values())\n    for j, value in enumerate(str2):\n        dict_str2[value] = dict_str2.get(value, []) + [j]\n    print(sorted(dict_str1.values()))\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\n        return True\n    else:\n        return False\n\n```", "choosed_example_idx": [8, 3, 5, 6], "prompt": "Input: dict(str1=\"\", str2=\"\"), Output: \"True\"\nInput: dict(str1=\"hello\", str2=\"world\"), Output: \"False\"\nInput: dict(str1=\"abc\", str2=\"abc\"), Output: \"True\"\nInput: dict(str1=\"abcde\", str2=\"fghij\"), Output: \"True\"\n\nFunction: isomoprhicString\nWrite a function that generates the output from the input.\n\n", "id": "5f0c1636b376567b668bb02635345123f2266d4d_0"}
{"example_str": "examples = [\n    dict(list=[1, 2, 3, 4, 5]),\n    dict(list=[10, 20, 30, 40, 50]),\n    dict(list=[-1, -2, -3, -4, -5]),\n    dict(list=[5, 5, 5, 5, 5]),\n    dict(list=[1.1, 2.2, 3.3, 4.4, 5.5]),\n    dict(list=[100, 200, 300, 400, 500]),\n    dict(list=[-10, -20, -30, -40, -50]),\n    dict(list=[0, 0, 0, 0, 0]),\n    dict(list=[-5, -4, -3, -2, -1]),\n    dict(list=[9, 8, 7, 6, 5]),\n]\nexamples += [\n    dict(list=[1, 2, 3, 4, 5]),\n    dict(list=[-10, 0, 10, 20, 30]),\n    dict(list=[100, 200, 300, 400, 500]),\n    dict(list=[-5, -10, -15, -20]),\n    dict(list=[0, 0, 0, 0]),\n    dict(list=[123, 456, 789, 1011]),\n    dict(list=[-1, 1, -2, 2, -3, 3]),\n    dict(list=[50]),\n    dict(list=[25, 25, 25, 25]),\n    dict(list=[-100, 0, 100, 200, -200])\n]\nexamples += [\n    dict(list=[1, 2, 3, 4, 5]),\n    dict(list=[10, 20, 30, 40, 50]),\n    dict(list=[-1, -2, -3, -4, -5]),\n    dict(list=[100, 200, 300, 400, 500]),\n    dict(list=[5, 3, 9, 1, 8]),\n    dict(list=[-10, 0, 10, 20, -20]),\n    dict(list=[0.1, 0.2, 0.3, 0.4, 0.5]),\n    dict(list=[-0.5, -0.1, -0.3, -0.2, -0.4]),\n    dict(list=[1000, 2000, 3000, 4000, 5000]),\n    dict(list=[-1000, -2000, -3000, -4000, -5000])\n]", "code": "def minMax(list):\n    return 'The min value is: %d \\nThe max value is: %d' % (min(list), max(\n        list))\n", "func_name": "minMax", "exec_status": true, "example_inputs": ["\"{'list': [1, 2, 3, 4, 5]}\"", "\"{'list': [10, 20, 30, 40, 50]}\"", "\"{'list': [-1, -2, -3, -4, -5]}\"", "\"{'list': [5, 5, 5, 5, 5]}\"", "\"{'list': [1.1, 2.2, 3.3, 4.4, 5.5]}\"", "\"{'list': [100, 200, 300, 400, 500]}\"", "\"{'list': [-10, -20, -30, -40, -50]}\"", "\"{'list': [0, 0, 0, 0, 0]}\"", "\"{'list': [-5, -4, -3, -2, -1]}\"", "\"{'list': [9, 8, 7, 6, 5]}\""], "example_outputs": [{"return": "\"'The min value is: 1 \\\\nThe max value is: 5'\""}, {"return": "\"'The min value is: 10 \\\\nThe max value is: 50'\""}, {"return": "\"'The min value is: -5 \\\\nThe max value is: -1'\""}, {"return": "\"'The min value is: 5 \\\\nThe max value is: 5'\""}, {"return": "\"'The min value is: 1 \\\\nThe max value is: 5'\""}, {"return": "\"'The min value is: 100 \\\\nThe max value is: 500'\""}, {"return": "\"'The min value is: -50 \\\\nThe max value is: -10'\""}, {"return": "\"'The min value is: 0 \\\\nThe max value is: 0'\""}, {"return": "\"'The min value is: -5 \\\\nThe max value is: -1'\""}, {"return": "\"'The min value is: 5 \\\\nThe max value is: 9'\""}, {"return": "\"'The min value is: 1 \\\\nThe max value is: 5'\""}, {"return": "\"'The min value is: -10 \\\\nThe max value is: 30'\""}, {"return": "\"'The min value is: 100 \\\\nThe max value is: 500'\""}, {"return": "\"'The min value is: -20 \\\\nThe max value is: -5'\""}, {"return": "\"'The min value is: 0 \\\\nThe max value is: 0'\""}, {"return": "\"'The min value is: 123 \\\\nThe max value is: 1011'\""}, {"return": "\"'The min value is: -3 \\\\nThe max value is: 3'\""}, {"return": "\"'The min value is: 50 \\\\nThe max value is: 50'\""}, {"return": "\"'The min value is: 25 \\\\nThe max value is: 25'\""}, {"return": "\"'The min value is: -200 \\\\nThe max value is: 200'\""}, {"return": "\"'The min value is: 1 \\\\nThe max value is: 5'\""}, {"return": "\"'The min value is: 10 \\\\nThe max value is: 50'\""}, {"return": "\"'The min value is: -5 \\\\nThe max value is: -1'\""}, {"return": "\"'The min value is: 100 \\\\nThe max value is: 500'\""}, {"return": "\"'The min value is: 1 \\\\nThe max value is: 9'\""}, {"return": "\"'The min value is: -20 \\\\nThe max value is: 20'\""}, {"return": "\"'The min value is: 0 \\\\nThe max value is: 0'\""}, {"return": "\"'The min value is: 0 \\\\nThe max value is: 0'\""}, {"return": "\"'The min value is: 1000 \\\\nThe max value is: 5000'\""}, {"return": "\"'The min value is: -5000 \\\\nThe max value is: -1000'\""}], "parsed_inputs": [[["list", "[1, 2, 3, 4, 5]"]], [["list", "[10, 20, 30, 40, 50]"]], [["list", "[-1, -2, -3, -4, -5]"]], [["list", "[5, 5, 5, 5, 5]"]], [["list", "[1.1, 2.2, 3.3, 4.4, 5.5]"]], [["list", "[100, 200, 300, 400, 500]"]], [["list", "[-10, -20, -30, -40, -50]"]], [["list", "[0, 0, 0, 0, 0]"]], [["list", "[-5, -4, -3, -2, -1]"]], [["list", "[9, 8, 7, 6, 5]"]]], "exec_code": "def minMax(list):\n    return 'The min value is: %d \\nThe max value is: %d' % (min(list), max(\n        list))\n", "output": "The function is:\n\n```python\ndef minMax(list):\n    return 'The min value is: %d \\nThe max value is: %d' % (min(list), max(\n        list))\n\n```", "choosed_example_idx": [8, 9, 2, 3], "prompt": "Write a function that generates the output from the input.\nInput: dict(list=[-5, -4, -3, -2, -1]), Output: \"'The min value is: -5 \\\\nThe max value is: -1'\"\nInput: dict(list=[9, 8, 7, 6, 5]), Output: \"'The min value is: 5 \\\\nThe max value is: 9'\"\nInput: dict(list=[-1, -2, -3, -4, -5]), Output: \"'The min value is: -5 \\\\nThe max value is: -1'\"\nInput: dict(list=[5, 5, 5, 5, 5]), Output: \"'The min value is: 5 \\\\nThe max value is: 5'\"\n\n\nFunction: minMax\n\n", "id": "d054817ad46532850ceaf2d9eb64c6d1851a8905_0"}
{"example_str": "examples = [\n    dict(x=([1, 2], [3, 4])),  # returns True\n    dict(x=([1, 2], [-3, 4])),  # returns False\n    dict(x=([1, 2], [0, 4])),  # returns False\n    dict(x=([1, 2], [3, -4])),  # returns True\n    dict(x=([1, 2], [3.5, 4])),  # returns True\n    dict(x=([1, 2], [-3.5, 4])),  # returns False\n    dict(x=([1, 2], [0.0, 4])),  # returns False\n    dict(x=([(1, 2), 3], [4, 5])),  # returns True\n    dict(x=([(1, 2), 3], [-4, 5])),  # returns False\n    dict(x=([(1, 2), 3], [4, -5])),  # returns True\n]\nexamples += [\n    dict(x=[[], [1]]),  # True, since 1 > 0\n    dict(x=[[], [-1]]),  # False, since -1 is not > 0\n    dict(x=[[], [0]]),  # False, since 0 is not > 0\n    dict(x=[[\"hello\"], [5]]),  # True, since 5 > 0\n    dict(x=[[\"world\"], [-5]]),  # False, since -5 is not > 0\n    dict(x=[[\"test\"], [0.1]]),  # True, since 0.1 > 0\n    dict(x=[[1, 2, 3], [-0.5]]),  # False, since -0.5 is not > 0\n    dict(x=[[1, 2, 3], [10]]),  # True, since 10 > 0\n    dict(x=[[1], [100]]),  # True, since 100 > 0\n    dict(x=[[2, 3], [-100]]),  # False, since -100 is not > 0\n]\nexamples += [\n    dict(x=([0], [1], [2])),       # True because 1 > 0\n    dict(x=([0], [-1], [2])),      # False because -1 <= 0\n    dict(x=([0], [0], [2])),       # False because 0 <= 0\n    dict(x=([0], [100], [2])),     # True because 100 > 0\n    dict(x=([0], [-100], [2])),    # False because -100 <= 0\n    dict(x=([0], [0.1], [2])),     # True because 0.1 > 0\n    dict(x=([0], [-0.1], [2])),    # False because -0.1 <= 0\n    dict(x=([0], [999], [2])),     # True because 999 > 0\n    dict(x=([0], [-999], [2])),    # False because -999 <= 0\n    dict(x=([0], [0.001], [2])),   # True because 0.001 > 0\n]", "code": "def flagPositive(x):\n    return x[1][0] > 0\n", "func_name": "flagPositive", "exec_status": true, "example_inputs": ["\"{'x': ([1, 2], [3, 4])}\"", "\"{'x': ([1, 2], [-3, 4])}\"", "\"{'x': ([1, 2], [0, 4])}\"", "\"{'x': ([1, 2], [3, -4])}\"", "\"{'x': ([1, 2], [3.5, 4])}\"", "\"{'x': ([1, 2], [-3.5, 4])}\"", "\"{'x': ([1, 2], [0.0, 4])}\"", "\"{'x': ([(1, 2), 3], [4, 5])}\"", "\"{'x': ([(1, 2), 3], [-4, 5])}\"", "\"{'x': ([(1, 2), 3], [4, -5])}\""], "example_outputs": [{"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}, {"return": "\"False\""}, {"return": "\"True\""}], "parsed_inputs": [[["x", "([1, 2], [3, 4])"]], [["x", "([1, 2], [-3, 4])"]], [["x", "([1, 2], [0, 4])"]], [["x", "([1, 2], [3, -4])"]], [["x", "([1, 2], [3.5, 4])"]], [["x", "([1, 2], [-3.5, 4])"]], [["x", "([1, 2], [0.0, 4])"]], [["x", "([(1, 2), 3], [4, 5])"]], [["x", "([(1, 2), 3], [-4, 5])"]], [["x", "([(1, 2), 3], [4, -5])"]]], "exec_code": "def flagPositive(x):\n    return x[1][0] > 0\n", "output": "The function is:\n\n```python\ndef flagPositive(x):\n    return x[1][0] > 0\n\n```", "choosed_example_idx": [6, 1, 8, 4, 2, 7, 0, 5, 9], "prompt": "Write a function that generates the output from the input.\n\nFunction: flagPositive\nInput: dict(x=([1, 2], [0.0, 4])), Output: \"False\"\nInput: dict(x=([1, 2], [-3, 4])), Output: \"False\"\nInput: dict(x=([(1, 2), 3], [-4, 5])), Output: \"False\"\nInput: dict(x=([1, 2], [3.5, 4])), Output: \"True\"\nInput: dict(x=([1, 2], [0, 4])), Output: \"False\"\nInput: dict(x=([(1, 2), 3], [4, 5])), Output: \"True\"\nInput: dict(x=([1, 2], [3, 4])), Output: \"True\"\nInput: dict(x=([1, 2], [-3.5, 4])), Output: \"False\"\nInput: dict(x=([(1, 2), 3], [4, -5])), Output: \"True\"\n\n\n", "id": "d76e2061cacbc55df32bb3a9f2b1f31315d08532_0"}
{"example_str": "examples = [\n    dict(x=2, y=3),\n    dict(x=4.5, y=1.2),\n    dict(x=-1, y=5),\n    dict(x=0, y=0),\n    dict(x=10, y=-2),\n    dict(x=3.14, y=2.71),\n    dict(x=100, y=200),\n    dict(x=-5, y=-3),\n    dict(x=7, y=0.5),\n    dict(x=22, y=11)\n]\nexamples += [\n    dict(x=5, y=3),\n    dict(x=-1, y=4),\n    dict(x=0, y=0),\n    dict(x=100, y=200),\n    dict(x=-50, y=-50),\n    dict(x=0.5, y=0.5),\n    dict(x=-1.5, y=2.5),\n    dict(x=999, y=1),\n    dict(x=-100, y=100),\n    dict(x=3.14159, y=2.71828)\n]\nexamples += [\n    dict(x=1, y=2),\n    dict(x=10, y=20),\n    dict(x=-5, y=5),\n    dict(x=0, y=0),\n    dict(x=100, y=200),\n    dict(x=-10, y=-20),\n    dict(x=0.5, y=0.5),\n    dict(x=1.5, y=2.5),\n    dict(x=-1.5, y=1.5),\n    dict(x=1000, y=2000)\n]", "code": "def add_numbers(x, y):\n    sum = x + y\n    return sum\n", "func_name": "add_numbers", "exec_status": true, "example_inputs": ["\"{'x': 2, 'y': 3}\"", "\"{'x': 4.5, 'y': 1.2}\"", "\"{'x': -1, 'y': 5}\"", "\"{'x': 0, 'y': 0}\"", "\"{'x': 10, 'y': -2}\"", "\"{'x': 3.14, 'y': 2.71}\"", "\"{'x': 100, 'y': 200}\"", "\"{'x': -5, 'y': -3}\"", "\"{'x': 7, 'y': 0.5}\"", "\"{'x': 22, 'y': 11}\""], "example_outputs": [{"return": "\"5\""}, {"return": "\"5.7\""}, {"return": "\"4\""}, {"return": "\"0\""}, {"return": "\"8\""}, {"return": "\"5.85\""}, {"return": "\"300\""}, {"return": "\"-8\""}, {"return": "\"7.5\""}, {"return": "\"33\""}, {"return": "\"8\""}, {"return": "\"3\""}, {"return": "\"0\""}, {"return": "\"300\""}, {"return": "\"-100\""}, {"return": "\"1.0\""}, {"return": "\"1.0\""}, {"return": "\"1000\""}, {"return": "\"0\""}, {"return": "\"5.85987\""}, {"return": "\"3\""}, {"return": "\"30\""}, {"return": "\"0\""}, {"return": "\"0\""}, {"return": "\"300\""}, {"return": "\"-30\""}, {"return": "\"1.0\""}, {"return": "\"4.0\""}, {"return": "\"0.0\""}, {"return": "\"3000\""}], "parsed_inputs": [[["x", "2"], ["y", "3"]], [["x", "4.5"], ["y", "1.2"]], [["x", "-1"], ["y", "5"]], [["x", "0"], ["y", "0"]], [["x", "10"], ["y", "-2"]], [["x", "3.14"], ["y", "2.71"]], [["x", "100"], ["y", "200"]], [["x", "-5"], ["y", "-3"]], [["x", "7"], ["y", "0.5"]], [["x", "22"], ["y", "11"]]], "exec_code": "def add_numbers(x, y):\n    sum = x + y\n    return sum\n", "output": "The function is:\n\n```python\ndef add_numbers(x, y):\n    sum = x + y\n    return sum\n\n```", "choosed_example_idx": [2, 8, 3, 0, 9, 4, 7, 5], "prompt": "Write a function that generates the output from the input.\nFunction: add_numbers\nInput: dict(x=-1, y=5), Output: \"4\"\nInput: dict(x=7, y=0.5), Output: \"7.5\"\nInput: dict(x=0, y=0), Output: \"0\"\nInput: dict(x=2, y=3), Output: \"5\"\nInput: dict(x=22, y=11), Output: \"33\"\nInput: dict(x=10, y=-2), Output: \"8\"\nInput: dict(x=-5, y=-3), Output: \"-8\"\nInput: dict(x=3.14, y=2.71), Output: \"5.85\"\n\n", "id": "56a85296b0e60c7474c5e1004f7454af6e0520c0_0"}
{"example_str": "examples = [\n    dict(comps=[\"hello\", \"world\"]),\n    dict(comps=[\"foo\", \"bar\", \"baz\"]),\n    dict(comps=[\"1\", \"2\", \"3\", \"4\", \"5\"]),\n    dict(comps=[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]),\n    dict(comps=[\"apple\", \"banana\", \"orange\"]),\n    dict(comps=[\"John\", \"Doe\", \"30\", \"Male\"]),\n    dict(comps=[\"Python\", \"is\", \"fun\"]),\n    dict(comps=[\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]),\n    dict(comps=[\"car\", \"bike\", \"train\", \"plane\"]),\n    dict(comps=[\"hello\", \"world\", \"!\", \"Python\", \"rocks\"]),\n]\nexamples += [\n    dict(comps=[\"Hello\", \"World\"]),\n    dict(comps=[\"Python\", \"Programming\", \"Language\"]),\n    dict(comps=[\"2023\", \"Year\", \"Review\"]),\n    dict(comps=[\"Data\", \"Science\", \"Machine Learning\"]),\n    dict(comps=[\"Apple\", \"Banana\", \"Cherry\", \"Date\"]),\n    dict(comps=[\"One\"]),\n    dict(comps=[\"First\", \"Second\", \"Third\", \"Fourth\", \"Fifth\"]),\n    dict(comps=[\"Earth\", \"Mars\", \"Venus\"]),\n    dict(comps=[\"Red\", \"Green\", \"Blue\"]),\n    dict(comps=[\"Morning\", \"Afternoon\", \"Evening\", \"Night\"])\n]\nexamples += [\n    dict(comps=['Hello', 'World']),\n    dict(comps=['Name', 'Age', 'Location']),\n    dict(comps=['Python', '3.8']),\n    dict(comps=['ID', 'Value', 'Description']),\n    dict(comps=['2023', 'Data', 'Analysis']),\n    dict(comps=['Red', 'Green', 'Blue']),\n    dict(comps=['One', 'Two', 'Three', 'Four']),\n    dict(comps=['Apple', 'Banana', 'Cherry', 'Date']),\n    dict(comps=['Column1', 'Column2']),\n    dict(comps=['Row1', 'Row2', 'Row3', 'Row4', 'Row5'])\n]", "code": "def to_line(comps):\n    return '{}\\n'.format('\\t'.join(comps))\n", "func_name": "to_line", "exec_status": true, "example_inputs": ["\"{'comps': ['hello', 'world']}\"", "\"{'comps': ['foo', 'bar', 'baz']}\"", "\"{'comps': ['1', '2', '3', '4', '5']}\"", "\"{'comps': ['a', 'b', 'c', 'd', 'e', 'f']}\"", "\"{'comps': ['apple', 'banana', 'orange']}\"", "\"{'comps': ['John', 'Doe', '30', 'Male']}\"", "\"{'comps': ['Python', 'is', 'fun']}\"", "\"{'comps': ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']}\"", "\"{'comps': ['car', 'bike', 'train', 'plane']}\"", "\"{'comps': ['hello', 'world', '!', 'Python', 'rocks']}\""], "example_outputs": [{"return": "\"'hello\\\\tworld\\\\n'\""}, {"return": "\"'foo\\\\tbar\\\\tbaz\\\\n'\""}, {"return": "\"'1\\\\t2\\\\t3\\\\t4\\\\t5\\\\n'\""}, {"return": "\"'a\\\\tb\\\\tc\\\\td\\\\te\\\\tf\\\\n'\""}, {"return": "\"'apple\\\\tbanana\\\\torange\\\\n'\""}, {"return": "\"'John\\\\tDoe\\\\t30\\\\tMale\\\\n'\""}, {"return": "\"'Python\\\\tis\\\\tfun\\\\n'\""}, {"return": "\"'1\\\\t2\\\\t3\\\\t4\\\\t5\\\\t6\\\\t7\\\\t8\\\\t9\\\\t10\\\\n'\""}, {"return": "\"'car\\\\tbike\\\\ttrain\\\\tplane\\\\n'\""}, {"return": "\"'hello\\\\tworld\\\\t!\\\\tPython\\\\trocks\\\\n'\""}, {"return": "\"'Hello\\\\tWorld\\\\n'\""}, {"return": "\"'Python\\\\tProgramming\\\\tLanguage\\\\n'\""}, {"return": "\"'2023\\\\tYear\\\\tReview\\\\n'\""}, {"return": "\"'Data\\\\tScience\\\\tMachine Learning\\\\n'\""}, {"return": "\"'Apple\\\\tBanana\\\\tCherry\\\\tDate\\\\n'\""}, {"return": "\"'One\\\\n'\""}, {"return": "\"'First\\\\tSecond\\\\tThird\\\\tFourth\\\\tFifth\\\\n'\""}, {"return": "\"'Earth\\\\tMars\\\\tVenus\\\\n'\""}, {"return": "\"'Red\\\\tGreen\\\\tBlue\\\\n'\""}, {"return": "\"'Morning\\\\tAfternoon\\\\tEvening\\\\tNight\\\\n'\""}, {"return": "\"'Hello\\\\tWorld\\\\n'\""}, {"return": "\"'Name\\\\tAge\\\\tLocation\\\\n'\""}, {"return": "\"'Python\\\\t3.8\\\\n'\""}, {"return": "\"'ID\\\\tValue\\\\tDescription\\\\n'\""}, {"return": "\"'2023\\\\tData\\\\tAnalysis\\\\n'\""}, {"return": "\"'Red\\\\tGreen\\\\tBlue\\\\n'\""}, {"return": "\"'One\\\\tTwo\\\\tThree\\\\tFour\\\\n'\""}, {"return": "\"'Apple\\\\tBanana\\\\tCherry\\\\tDate\\\\n'\""}, {"return": "\"'Column1\\\\tColumn2\\\\n'\""}, {"return": "\"'Row1\\\\tRow2\\\\tRow3\\\\tRow4\\\\tRow5\\\\n'\""}], "parsed_inputs": [[["comps", "['hello', 'world']"]], [["comps", "['foo', 'bar', 'baz']"]], [["comps", "['1', '2', '3', '4', '5']"]], [["comps", "['a', 'b', 'c', 'd', 'e', 'f']"]], [["comps", "['apple', 'banana', 'orange']"]], [["comps", "['John', 'Doe', '30', 'Male']"]], [["comps", "['Python', 'is', 'fun']"]], [["comps", "['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']"]], [["comps", "['car', 'bike', 'train', 'plane']"]], [["comps", "['hello', 'world', '!', 'Python', 'rocks']"]]], "exec_code": "def to_line(comps):\n    return '{}\\n'.format('\\t'.join(comps))\n", "output": "The function is:\n\n```python\ndef to_line(comps):\n    return '{}\\n'.format('\\t'.join(comps))\n\n```", "choosed_example_idx": [3, 6, 4, 2], "prompt": "Input: dict(comps=['a', 'b', 'c', 'd', 'e', 'f']), Output: \"'a\\\\tb\\\\tc\\\\td\\\\te\\\\tf\\\\n'\"\nInput: dict(comps=['Python', 'is', 'fun']), Output: \"'Python\\\\tis\\\\tfun\\\\n'\"\nInput: dict(comps=['apple', 'banana', 'orange']), Output: \"'apple\\\\tbanana\\\\torange\\\\n'\"\nInput: dict(comps=['1', '2', '3', '4', '5']), Output: \"'1\\\\t2\\\\t3\\\\t4\\\\t5\\\\n'\"\n\nWrite a function that generates the output from the input.\n\nFunction: to_line\n", "id": "d953fedebd3d271161009d5c1423d9b6214be18d_0"}
{"example_str": "examples = [\n    dict(grades=[4.0, 3.5, 4.0, 3.0]),\n    dict(grades=[3.8, 3.2, 4.0, 3.5, 4.0]),\n    dict(grades=[2.0, 2.5, 3.0, 3.5, 4.0]),\n    dict(grades=[4.0, 4.0, 4.0, 4.0, 4.0]),\n    dict(grades=[1.0, 2.0, 3.0, 4.0, 5.0]),\n    dict(grades=[3.0, 3.0, 3.0, 3.0, 3.0]),\n    dict(grades=[4.5, 4.0, 4.2, 4.8, 4.1]),\n    dict(grades=[2.2, 2.5, 2.8, 3.1, 3.4]),\n    dict(grades=[1.5, 2.0, 2.5, 3.0, 3.5]),\n    dict(grades=[3.9, 4.1, 4.3, 4.5, 4.7]),\n]\nexamples += [\n    dict(grades=[4.0, 3.5, 3.7, 3.2, 3.8]),  # Example with a list of floats\n    dict(grades=[3.0, 3.0, 3.0, 3.0]),       # Example where all GPAs are the same\n    dict(grades=[2.5, 2.7, 3.0, 3.5, 4.0]),  # Example with increasing GPAs\n    dict(grades=[4.0, 4.0, 4.0, 4.0, 4.0]),  # Example with perfect GPAs\n    dict(grades=[2.1, 2.4, 2.8, 3.1]),       # Example with GPAs below average\n    dict(grades=[3.6]),                      # Example with a single GPA\n    dict(grades=[3.2, 3.8, 4.0, 3.9, 3.7]),  # Example with high GPAs\n    dict(grades=[1.0, 1.5, 2.0, 2.5, 3.0]),  # Example with low GPAs\n    dict(grades=[]),                         # Example with an empty list\n    dict(grades=[3.33, 3.67, 3.25, 3.75])    # Example with decimal GPAs\n]\nexamples += [\n    dict(grades=[4.0, 3.5, 3.7, 3.8]),\n    dict(grades=[2.0, 2.5, 3.0, 3.5, 4.0]),\n    dict(grades=[3.0]),\n    dict(grades=[2.1, 2.4, 2.8, 3.0, 3.5, 3.9]),\n    dict(grades=[4.0, 4.0, 4.0, 4.0]),\n    dict(grades=[1.0, 2.0, 3.0, 4.0]),\n    dict(grades=[3.2, 3.3, 3.4, 3.5]),\n    dict(grades=[2.7, 2.9, 3.1, 3.3, 3.5]),\n    dict(grades=[3.6, 3.7, 3.8, 3.9]),\n    dict(grades=[2.5, 2.5, 3.0, 3.5, 4.0])\n]", "code": "def get_average_gpa(grades):\n    \"\"\"평균 학점 계산 메소드\"\"\"\n    return sum(grades) / len(grades)\n", "func_name": "get_average_gpa", "exec_status": true, "example_inputs": ["\"{'grades': [4.0, 3.5, 4.0, 3.0]}\"", "\"{'grades': [3.8, 3.2, 4.0, 3.5, 4.0]}\"", "\"{'grades': [2.0, 2.5, 3.0, 3.5, 4.0]}\"", "\"{'grades': [4.0, 4.0, 4.0, 4.0, 4.0]}\"", "\"{'grades': [1.0, 2.0, 3.0, 4.0, 5.0]}\"", "\"{'grades': [3.0, 3.0, 3.0, 3.0, 3.0]}\"", "\"{'grades': [4.5, 4.0, 4.2, 4.8, 4.1]}\"", "\"{'grades': [2.2, 2.5, 2.8, 3.1, 3.4]}\"", "\"{'grades': [1.5, 2.0, 2.5, 3.0, 3.5]}\"", "\"{'grades': [3.9, 4.1, 4.3, 4.5, 4.7]}\""], "example_outputs": [{"return": "\"3.625\""}, {"return": "\"3.7\""}, {"return": "\"3.0\""}, {"return": "\"4.0\""}, {"return": "\"3.0\""}, {"return": "\"3.0\""}, {"return": "\"4.32\""}, {"return": "\"2.8\""}, {"return": "\"2.5\""}, {"return": "\"4.3\""}, {"return": "\"3.6399999999999997\""}, {"return": "\"3.0\""}, {"return": "\"3.1399999999999997\""}, {"return": "\"4.0\""}, {"return": "\"2.6\""}, {"return": "\"3.6\""}, {"return": "\"3.72\""}, {"return": "\"2.0\""}, {"error": "<|EXCEPTION|> \"<class 'ZeroDivisionError'>: division by zero\""}, {"return": "\"3.5\""}, {"return": "\"3.75\""}, {"return": "\"3.0\""}, {"return": "\"3.0\""}, {"return": "\"2.9499999999999997\""}, {"return": "\"4.0\""}, {"return": "\"2.5\""}, {"return": "\"3.35\""}, {"return": "\"3.1\""}, {"return": "\"3.7500000000000004\""}, {"return": "\"3.1\""}], "parsed_inputs": [[["grades", "[4.0, 3.5, 4.0, 3.0]"]], [["grades", "[3.8, 3.2, 4.0, 3.5, 4.0]"]], [["grades", "[2.0, 2.5, 3.0, 3.5, 4.0]"]], [["grades", "[4.0, 4.0, 4.0, 4.0, 4.0]"]], [["grades", "[1.0, 2.0, 3.0, 4.0, 5.0]"]], [["grades", "[3.0, 3.0, 3.0, 3.0, 3.0]"]], [["grades", "[4.5, 4.0, 4.2, 4.8, 4.1]"]], [["grades", "[2.2, 2.5, 2.8, 3.1, 3.4]"]], [["grades", "[1.5, 2.0, 2.5, 3.0, 3.5]"]], [["grades", "[3.9, 4.1, 4.3, 4.5, 4.7]"]]], "exec_code": "def get_average_gpa(grades):\n    \"\"\"평균 학점 계산 메소드\"\"\"\n    return sum(grades) / len(grades)\n", "output": "The function is:\n\n```python\ndef get_average_gpa(grades):\n    \"\"\"평균 학점 계산 메소드\"\"\"\n    return sum(grades) / len(grades)\n\n```", "choosed_example_idx": [2, 1, 0, 9, 5, 8, 4, 6, 7], "prompt": "Write a function that generates the output from the input.\n\nInput: dict(grades=[2.0, 2.5, 3.0, 3.5, 4.0]), Output: \"3.0\"\nInput: dict(grades=[3.8, 3.2, 4.0, 3.5, 4.0]), Output: \"3.7\"\nInput: dict(grades=[4.0, 3.5, 4.0, 3.0]), Output: \"3.625\"\nInput: dict(grades=[3.9, 4.1, 4.3, 4.5, 4.7]), Output: \"4.3\"\nInput: dict(grades=[3.0, 3.0, 3.0, 3.0, 3.0]), Output: \"3.0\"\nInput: dict(grades=[1.5, 2.0, 2.5, 3.0, 3.5]), Output: \"2.5\"\nInput: dict(grades=[1.0, 2.0, 3.0, 4.0, 5.0]), Output: \"3.0\"\nInput: dict(grades=[4.5, 4.0, 4.2, 4.8, 4.1]), Output: \"4.32\"\nInput: dict(grades=[2.2, 2.5, 2.8, 3.1, 3.4]), Output: \"2.8\"\n\nFunction: get_average_gpa\n\n\n", "id": "66544487cd4afa2305f1b4688adc4d34e25a9fe8_0"}
